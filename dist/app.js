!function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=15)}([function(t,e,i){(function(e){t.exports=function t(e,i,r){function n(s,a){if(!i[s]){if(!e[s]){if(o)return o(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var l=i[s]={exports:{}};e[s][0].call(l.exports,(function(t){return n(e[s][1][t]||t)}),l,l.exports,t,e,i,r)}return i[s].exports}for(var o=!1,s=0;s<r.length;s++)n(r[s]);return n}({1:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../geometry/Vector"),s=t("../core/Sleeping"),a=(t("../render/Render"),t("../core/Common")),h=t("../geometry/Bounds"),l=t("../geometry/Axes");!function(){r._inertiaScale=4,r._nextCollidingGroupId=1,r._nextNonCollidingGroupId=-1,r._nextCategory=1,r.create=function(e){var i={id:a.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:n.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0},lineWidth:0}},r=a.extend(i,e);return t(r,e),r},r.nextGroup=function(t){return t?r._nextNonCollidingGroupId--:r._nextCollidingGroupId++},r.nextCategory=function(){return r._nextCategory=r._nextCategory<<1,r._nextCategory};var t=function(t,e){e=e||{},r.set(t,{bounds:t.bounds||h.create(t.vertices),positionPrev:t.positionPrev||o.clone(t.position),anglePrev:t.anglePrev||t.angle,vertices:t.vertices,parts:t.parts||[t],isStatic:t.isStatic,isSleeping:t.isSleeping,parent:t.parent||t}),n.rotate(t.vertices,t.angle,t.position),l.rotate(t.axes,t.angle),h.update(t.bounds,t.vertices,t.velocity),r.set(t,{axes:e.axes||t.axes,area:e.area||t.area,mass:e.mass||t.mass,inertia:e.inertia||t.inertia});var i=t.isStatic?"#2e2b44":a.choose(["#006BA6","#0496FF","#FFBC42","#D81159","#8F2D56"]);t.render.fillStyle=t.render.fillStyle||i,t.render.strokeStyle=t.render.strokeStyle||"#000",t.render.sprite.xOffset+=-(t.bounds.min.x-t.position.x)/(t.bounds.max.x-t.bounds.min.x),t.render.sprite.yOffset+=-(t.bounds.min.y-t.position.y)/(t.bounds.max.y-t.bounds.min.y)};r.set=function(t,e,i){var n;for(n in"string"==typeof e&&(n=e,(e={})[n]=i),e)if(i=e[n],e.hasOwnProperty(n))switch(n){case"isStatic":r.setStatic(t,i);break;case"isSleeping":s.set(t,i);break;case"mass":r.setMass(t,i);break;case"density":r.setDensity(t,i);break;case"inertia":r.setInertia(t,i);break;case"vertices":r.setVertices(t,i);break;case"position":r.setPosition(t,i);break;case"angle":r.setAngle(t,i);break;case"velocity":r.setVelocity(t,i);break;case"angularVelocity":r.setAngularVelocity(t,i);break;case"parts":r.setParts(t,i);break;default:t[n]=i}},r.setStatic=function(t,e){for(var i=0;i<t.parts.length;i++){var r=t.parts[i];r.isStatic=e,e?(r._original={restitution:r.restitution,friction:r.friction,mass:r.mass,inertia:r.inertia,density:r.density,inverseMass:r.inverseMass,inverseInertia:r.inverseInertia},r.restitution=0,r.friction=1,r.mass=r.inertia=r.density=1/0,r.inverseMass=r.inverseInertia=0,r.positionPrev.x=r.position.x,r.positionPrev.y=r.position.y,r.anglePrev=r.angle,r.angularVelocity=0,r.speed=0,r.angularSpeed=0,r.motion=0):r._original&&(r.restitution=r._original.restitution,r.friction=r._original.friction,r.mass=r._original.mass,r.inertia=r._original.inertia,r.density=r._original.density,r.inverseMass=r._original.inverseMass,r.inverseInertia=r._original.inverseInertia,delete r._original)}},r.setMass=function(t,e){var i=t.inertia/(t.mass/6);t.inertia=i*(e/6),t.inverseInertia=1/t.inertia,t.mass=e,t.inverseMass=1/t.mass,t.density=t.mass/t.area},r.setDensity=function(t,e){r.setMass(t,e*t.area),t.density=e},r.setInertia=function(t,e){t.inertia=e,t.inverseInertia=1/t.inertia},r.setVertices=function(t,e){e[0].body===t?t.vertices=e:t.vertices=n.create(e,t),t.axes=l.fromVertices(t.vertices),t.area=n.area(t.vertices),r.setMass(t,t.density*t.area);var i=n.centre(t.vertices);n.translate(t.vertices,i,-1),r.setInertia(t,r._inertiaScale*n.inertia(t.vertices,t.mass)),n.translate(t.vertices,t.position),h.update(t.bounds,t.vertices,t.velocity)},r.setParts=function(t,e,i){var o;for(e=e.slice(0),t.parts.length=0,t.parts.push(t),t.parent=t,o=0;o<e.length;o++){var s=e[o];s!==t&&(s.parent=t,t.parts.push(s))}if(1!==t.parts.length){if(i=void 0===i||i){var a=[];for(o=0;o<e.length;o++)a=a.concat(e[o].vertices);n.clockwiseSort(a);var h=n.hull(a),l=n.centre(h);r.setVertices(t,h),n.translate(t.vertices,l)}var u=r._totalProperties(t);t.area=u.area,t.parent=t,t.position.x=u.centre.x,t.position.y=u.centre.y,t.positionPrev.x=u.centre.x,t.positionPrev.y=u.centre.y,r.setMass(t,u.mass),r.setInertia(t,u.inertia),r.setPosition(t,u.centre)}},r.setPosition=function(t,e){var i=o.sub(e,t.position);t.positionPrev.x+=i.x,t.positionPrev.y+=i.y;for(var r=0;r<t.parts.length;r++){var s=t.parts[r];s.position.x+=i.x,s.position.y+=i.y,n.translate(s.vertices,i),h.update(s.bounds,s.vertices,t.velocity)}},r.setAngle=function(t,e){var i=e-t.angle;t.anglePrev+=i;for(var r=0;r<t.parts.length;r++){var s=t.parts[r];s.angle+=i,n.rotate(s.vertices,i,t.position),l.rotate(s.axes,i),h.update(s.bounds,s.vertices,t.velocity),r>0&&o.rotateAbout(s.position,i,t.position,s.position)}},r.setVelocity=function(t,e){t.positionPrev.x=t.position.x-e.x,t.positionPrev.y=t.position.y-e.y,t.velocity.x=e.x,t.velocity.y=e.y,t.speed=o.magnitude(t.velocity)},r.setAngularVelocity=function(t,e){t.anglePrev=t.angle-e,t.angularVelocity=e,t.angularSpeed=Math.abs(t.angularVelocity)},r.translate=function(t,e){r.setPosition(t,o.add(t.position,e))},r.rotate=function(t,e,i){if(i){var n=Math.cos(e),o=Math.sin(e),s=t.position.x-i.x,a=t.position.y-i.y;r.setPosition(t,{x:i.x+(s*n-a*o),y:i.y+(s*o+a*n)}),r.setAngle(t,t.angle+e)}else r.setAngle(t,t.angle+e)},r.scale=function(t,e,i,o){var s=0,a=0;o=o||t.position;for(var u=0;u<t.parts.length;u++){var c=t.parts[u];n.scale(c.vertices,e,i,o),c.axes=l.fromVertices(c.vertices),c.area=n.area(c.vertices),r.setMass(c,t.density*c.area),n.translate(c.vertices,{x:-c.position.x,y:-c.position.y}),r.setInertia(c,r._inertiaScale*n.inertia(c.vertices,c.mass)),n.translate(c.vertices,{x:c.position.x,y:c.position.y}),u>0&&(s+=c.area,a+=c.inertia),c.position.x=o.x+(c.position.x-o.x)*e,c.position.y=o.y+(c.position.y-o.y)*i,h.update(c.bounds,c.vertices,t.velocity)}t.parts.length>1&&(t.area=s,t.isStatic||(r.setMass(t,t.density*s),r.setInertia(t,a))),t.circleRadius&&(e===i?t.circleRadius*=e:t.circleRadius=null)},r.update=function(t,e,i,r){var s=Math.pow(e*i*t.timeScale,2),a=1-t.frictionAir*i*t.timeScale,u=t.position.x-t.positionPrev.x,c=t.position.y-t.positionPrev.y;t.velocity.x=u*a*r+t.force.x/t.mass*s,t.velocity.y=c*a*r+t.force.y/t.mass*s,t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.position.x+=t.velocity.x,t.position.y+=t.velocity.y,t.angularVelocity=(t.angle-t.anglePrev)*a*r+t.torque/t.inertia*s,t.anglePrev=t.angle,t.angle+=t.angularVelocity,t.speed=o.magnitude(t.velocity),t.angularSpeed=Math.abs(t.angularVelocity);for(var d=0;d<t.parts.length;d++){var p=t.parts[d];n.translate(p.vertices,t.velocity),d>0&&(p.position.x+=t.velocity.x,p.position.y+=t.velocity.y),0!==t.angularVelocity&&(n.rotate(p.vertices,t.angularVelocity,t.position),l.rotate(p.axes,t.angularVelocity),d>0&&o.rotateAbout(p.position,t.angularVelocity,t.position,p.position)),h.update(p.bounds,p.vertices,t.velocity)}},r.applyForce=function(t,e,i){t.force.x+=i.x,t.force.y+=i.y;var r=e.x-t.position.x,n=e.y-t.position.y;t.torque+=r*i.y-n*i.x},r._totalProperties=function(t){for(var e={mass:0,area:0,inertia:0,centre:{x:0,y:0}},i=1===t.parts.length?0:1;i<t.parts.length;i++){var r=t.parts[i],n=r.mass!==1/0?r.mass:1;e.mass+=n,e.area+=r.area,e.inertia+=r.inertia,e.centre=o.add(e.centre,o.mult(r.position,n))}return e.centre=o.div(e.centre,e.mass),e}}()},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31}],2:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Events"),o=t("../core/Common"),s=t("../geometry/Bounds"),a=t("./Body");r.create=function(t){return o.extend({id:o.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{}},t)},r.setModified=function(t,e,i,n){if(t.isModified=e,i&&t.parent&&r.setModified(t.parent,e,i,n),n)for(var o=0;o<t.composites.length;o++){var s=t.composites[o];r.setModified(s,e,i,n)}},r.add=function(t,e){var i=[].concat(e);n.trigger(t,"beforeAdd",{object:e});for(var s=0;s<i.length;s++){var a=i[s];switch(a.type){case"body":if(a.parent!==a){o.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}r.addBody(t,a);break;case"constraint":r.addConstraint(t,a);break;case"composite":r.addComposite(t,a);break;case"mouseConstraint":r.addConstraint(t,a.constraint)}}return n.trigger(t,"afterAdd",{object:e}),t},r.remove=function(t,e,i){var o=[].concat(e);n.trigger(t,"beforeRemove",{object:e});for(var s=0;s<o.length;s++){var a=o[s];switch(a.type){case"body":r.removeBody(t,a,i);break;case"constraint":r.removeConstraint(t,a,i);break;case"composite":r.removeComposite(t,a,i);break;case"mouseConstraint":r.removeConstraint(t,a.constraint)}}return n.trigger(t,"afterRemove",{object:e}),t},r.addComposite=function(t,e){return t.composites.push(e),e.parent=t,r.setModified(t,!0,!0,!1),t},r.removeComposite=function(t,e,i){var n=o.indexOf(t.composites,e);if(-1!==n&&(r.removeCompositeAt(t,n),r.setModified(t,!0,!0,!1)),i)for(var s=0;s<t.composites.length;s++)r.removeComposite(t.composites[s],e,!0);return t},r.removeCompositeAt=function(t,e){return t.composites.splice(e,1),r.setModified(t,!0,!0,!1),t},r.addBody=function(t,e){return t.bodies.push(e),r.setModified(t,!0,!0,!1),t},r.removeBody=function(t,e,i){var n=o.indexOf(t.bodies,e);if(-1!==n&&(r.removeBodyAt(t,n),r.setModified(t,!0,!0,!1)),i)for(var s=0;s<t.composites.length;s++)r.removeBody(t.composites[s],e,!0);return t},r.removeBodyAt=function(t,e){return t.bodies.splice(e,1),r.setModified(t,!0,!0,!1),t},r.addConstraint=function(t,e){return t.constraints.push(e),r.setModified(t,!0,!0,!1),t},r.removeConstraint=function(t,e,i){var n=o.indexOf(t.constraints,e);if(-1!==n&&r.removeConstraintAt(t,n),i)for(var s=0;s<t.composites.length;s++)r.removeConstraint(t.composites[s],e,!0);return t},r.removeConstraintAt=function(t,e){return t.constraints.splice(e,1),r.setModified(t,!0,!0,!1),t},r.clear=function(t,e,i){if(i)for(var n=0;n<t.composites.length;n++)r.clear(t.composites[n],e,!0);return e?t.bodies=t.bodies.filter((function(t){return t.isStatic})):t.bodies.length=0,t.constraints.length=0,t.composites.length=0,r.setModified(t,!0,!0,!1),t},r.allBodies=function(t){for(var e=[].concat(t.bodies),i=0;i<t.composites.length;i++)e=e.concat(r.allBodies(t.composites[i]));return e},r.allConstraints=function(t){for(var e=[].concat(t.constraints),i=0;i<t.composites.length;i++)e=e.concat(r.allConstraints(t.composites[i]));return e},r.allComposites=function(t){for(var e=[].concat(t.composites),i=0;i<t.composites.length;i++)e=e.concat(r.allComposites(t.composites[i]));return e},r.get=function(t,e,i){var n,o;switch(i){case"body":n=r.allBodies(t);break;case"constraint":n=r.allConstraints(t);break;case"composite":n=r.allComposites(t).concat(t)}return n?0===(o=n.filter((function(t){return t.id.toString()===e.toString()}))).length?null:o[0]:null},r.move=function(t,e,i){return r.remove(t,e),r.add(i,e),t},r.rebase=function(t){for(var e=r.allBodies(t).concat(r.allConstraints(t)).concat(r.allComposites(t)),i=0;i<e.length;i++)e[i].id=o.nextId();return r.setModified(t,!0,!0,!1),t},r.translate=function(t,e,i){for(var n=i?r.allBodies(t):t.bodies,o=0;o<n.length;o++)a.translate(n[o],e);return r.setModified(t,!0,!0,!1),t},r.rotate=function(t,e,i,n){for(var o=Math.cos(e),s=Math.sin(e),h=n?r.allBodies(t):t.bodies,l=0;l<h.length;l++){var u=h[l],c=u.position.x-i.x,d=u.position.y-i.y;a.setPosition(u,{x:i.x+(c*o-d*s),y:i.y+(c*s+d*o)}),a.rotate(u,e)}return r.setModified(t,!0,!0,!1),t},r.scale=function(t,e,i,n,o){for(var s=o?r.allBodies(t):t.bodies,h=0;h<s.length;h++){var l=s[h],u=l.position.x-n.x,c=l.position.y-n.y;a.setPosition(l,{x:n.x+u*e,y:n.y+c*i}),a.scale(l,e,i)}return r.setModified(t,!0,!0,!1),t},r.bounds=function(t){for(var e=r.allBodies(t),i=[],n=0;n<e.length;n+=1){var o=e[n];i.push(o.bounds.min,o.bounds.max)}return s.create(i)}},{"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"./Body":1}],3:[function(t,e,i){var r={};e.exports=r;var n=t("./Composite"),o=(t("../constraint/Constraint"),t("../core/Common"));r.create=function(t){var e=n.create();return o.extend(e,{label:"World",gravity:{x:0,y:1,scale:.001},bounds:{min:{x:-1/0,y:-1/0},max:{x:1/0,y:1/0}}},t)}},{"../constraint/Constraint":12,"../core/Common":14,"./Composite":2}],4:[function(t,e,i){var r={};e.exports=r,r.create=function(t){return{id:r.id(t),vertex:t,normalImpulse:0,tangentImpulse:0}},r.id=function(t){return t.body.id+"_"+t.index}},{}],5:[function(t,e,i){var r={};e.exports=r;var n=t("./SAT"),o=t("./Pair"),s=t("../geometry/Bounds");r.collisions=function(t,e){for(var i=[],a=e.pairs.table,h=0;h<t.length;h++){var l=t[h][0],u=t[h][1];if((!l.isStatic&&!l.isSleeping||!u.isStatic&&!u.isSleeping)&&r.canCollide(l.collisionFilter,u.collisionFilter)&&s.overlaps(l.bounds,u.bounds))for(var c=l.parts.length>1?1:0;c<l.parts.length;c++)for(var d=l.parts[c],p=u.parts.length>1?1:0;p<u.parts.length;p++){var f=u.parts[p];if(d===l&&f===u||s.overlaps(d.bounds,f.bounds)){var m,y=a[o.id(d,f)];m=y&&y.isActive?y.collision:null;var v=n.collides(d,f,m);v.collided&&i.push(v)}}}return i},r.canCollide=function(t,e){return t.group===e.group&&0!==t.group?t.group>0:0!=(t.mask&e.category)&&0!=(e.mask&t.category)}},{"../geometry/Bounds":26,"./Pair":7,"./SAT":11}],6:[function(t,e,i){var r={};e.exports=r;var n=t("./Pair"),o=t("./Detector"),s=t("../core/Common");r.create=function(t){var e={controller:r,detector:o.collisions,buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48};return s.extend(e,t)},r.update=function(t,e,i,n){var o,s,a,h,l,u=i.world,c=t.buckets,d=!1;for(o=0;o<e.length;o++){var p=e[o];if((!p.isSleeping||n)&&!(p.bounds.max.x<u.bounds.min.x||p.bounds.min.x>u.bounds.max.x||p.bounds.max.y<u.bounds.min.y||p.bounds.min.y>u.bounds.max.y)){var f=r._getRegion(t,p);if(!p.region||f.id!==p.region.id||n){p.region&&!n||(p.region=f);var m=r._regionUnion(f,p.region);for(s=m.startCol;s<=m.endCol;s++)for(a=m.startRow;a<=m.endRow;a++){h=c[l=r._getBucketId(s,a)];var y=s>=f.startCol&&s<=f.endCol&&a>=f.startRow&&a<=f.endRow,v=s>=p.region.startCol&&s<=p.region.endCol&&a>=p.region.startRow&&a<=p.region.endRow;!y&&v&&v&&h&&r._bucketRemoveBody(t,h,p),(p.region===f||y&&!v||n)&&(h||(h=r._createBucket(c,l)),r._bucketAddBody(t,h,p))}p.region=f,d=!0}}}d&&(t.pairsList=r._createActivePairsList(t))},r.clear=function(t){t.buckets={},t.pairs={},t.pairsList=[]},r._regionUnion=function(t,e){var i=Math.min(t.startCol,e.startCol),n=Math.max(t.endCol,e.endCol),o=Math.min(t.startRow,e.startRow),s=Math.max(t.endRow,e.endRow);return r._createRegion(i,n,o,s)},r._getRegion=function(t,e){var i=e.bounds,n=Math.floor(i.min.x/t.bucketWidth),o=Math.floor(i.max.x/t.bucketWidth),s=Math.floor(i.min.y/t.bucketHeight),a=Math.floor(i.max.y/t.bucketHeight);return r._createRegion(n,o,s,a)},r._createRegion=function(t,e,i,r){return{id:t+","+e+","+i+","+r,startCol:t,endCol:e,startRow:i,endRow:r}},r._getBucketId=function(t,e){return"C"+t+"R"+e},r._createBucket=function(t,e){return t[e]=[]},r._bucketAddBody=function(t,e,i){for(var r=0;r<e.length;r++){var o=e[r];if(!(i.id===o.id||i.isStatic&&o.isStatic)){var s=n.id(i,o),a=t.pairs[s];a?a[2]+=1:t.pairs[s]=[i,o,1]}}e.push(i)},r._bucketRemoveBody=function(t,e,i){e.splice(s.indexOf(e,i),1);for(var r=0;r<e.length;r++){var o=e[r],a=n.id(i,o),h=t.pairs[a];h&&(h[2]-=1)}},r._createActivePairsList=function(t){var e,i,r=[];e=s.keys(t.pairs);for(var n=0;n<e.length;n++)(i=t.pairs[e[n]])[2]>0?r.push(i):delete t.pairs[e[n]];return r}},{"../core/Common":14,"./Detector":5,"./Pair":7}],7:[function(t,e,i){var r={};e.exports=r;var n=t("./Contact");r.create=function(t,e){var i=t.bodyA,n=t.bodyB,o=t.parentA,s=t.parentB,a={id:r.id(i,n),bodyA:i,bodyB:n,contacts:{},activeContacts:[],separation:0,isActive:!0,isSensor:i.isSensor||n.isSensor,timeCreated:e,timeUpdated:e,inverseMass:o.inverseMass+s.inverseMass,friction:Math.min(o.friction,s.friction),frictionStatic:Math.max(o.frictionStatic,s.frictionStatic),restitution:Math.max(o.restitution,s.restitution),slop:Math.max(o.slop,s.slop)};return r.update(a,t,e),a},r.update=function(t,e,i){var o=t.contacts,s=e.supports,a=t.activeContacts,h=e.parentA,l=e.parentB;if(t.collision=e,t.inverseMass=h.inverseMass+l.inverseMass,t.friction=Math.min(h.friction,l.friction),t.frictionStatic=Math.max(h.frictionStatic,l.frictionStatic),t.restitution=Math.max(h.restitution,l.restitution),t.slop=Math.max(h.slop,l.slop),a.length=0,e.collided){for(var u=0;u<s.length;u++){var c=s[u],d=n.id(c),p=o[d];p?a.push(p):a.push(o[d]=n.create(c))}t.separation=e.depth,r.setActive(t,!0,i)}else!0===t.isActive&&r.setActive(t,!1,i)},r.setActive=function(t,e,i){e?(t.isActive=!0,t.timeUpdated=i):(t.isActive=!1,t.activeContacts.length=0)},r.id=function(t,e){return t.id<e.id?"A"+t.id+"B"+e.id:"A"+e.id+"B"+t.id}},{"./Contact":4}],8:[function(t,e,i){var r={};e.exports=r;var n=t("./Pair"),o=t("../core/Common");r._pairMaxIdleLife=1e3,r.create=function(t){return o.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},t)},r.update=function(t,e,i){var r,s,a,h,l=t.list,u=t.table,c=t.collisionStart,d=t.collisionEnd,p=t.collisionActive,f=[];for(c.length=0,d.length=0,p.length=0,h=0;h<e.length;h++)(r=e[h]).collided&&(s=n.id(r.bodyA,r.bodyB),f.push(s),(a=u[s])?(a.isActive?p.push(a):c.push(a),n.update(a,r,i)):(a=n.create(r,i),u[s]=a,c.push(a),l.push(a)));for(h=0;h<l.length;h++)(a=l[h]).isActive&&-1===o.indexOf(f,a.id)&&(n.setActive(a,!1,i),d.push(a))},r.removeOld=function(t,e){var i,n,o,s,a=t.list,h=t.table,l=[];for(s=0;s<a.length;s++)(n=(i=a[s]).collision).bodyA.isSleeping||n.bodyB.isSleeping?i.timeUpdated=e:e-i.timeUpdated>r._pairMaxIdleLife&&l.push(s);for(s=0;s<l.length;s++)delete h[(i=a[o=l[s]-s]).id],a.splice(o,1)},r.clear=function(t){return t.table={},t.list.length=0,t.collisionStart.length=0,t.collisionActive.length=0,t.collisionEnd.length=0,t}},{"../core/Common":14,"./Pair":7}],9:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),o=t("./SAT"),s=t("../geometry/Bounds"),a=t("../factory/Bodies"),h=t("../geometry/Vertices");r.collides=function(t,e){for(var i=[],r=0;r<e.length;r++){var n=e[r];if(s.overlaps(n.bounds,t.bounds))for(var a=1===n.parts.length?0:1;a<n.parts.length;a++){var h=n.parts[a];if(s.overlaps(h.bounds,t.bounds)){var l=o.collides(h,t);if(l.collided){i.push(l);break}}}}return i},r.ray=function(t,e,i,o){o=o||1e-100;for(var s=n.angle(e,i),h=n.magnitude(n.sub(e,i)),l=.5*(i.x+e.x),u=.5*(i.y+e.y),c=a.rectangle(l,u,h,o,{angle:s}),d=r.collides(c,t),p=0;p<d.length;p+=1){var f=d[p];f.body=f.bodyB=f.bodyA}return d},r.region=function(t,e,i){for(var r=[],n=0;n<t.length;n++){var o=t[n],a=s.overlaps(o.bounds,e);(a&&!i||!a&&i)&&r.push(o)}return r},r.point=function(t,e){for(var i=[],r=0;r<t.length;r++){var n=t[r];if(s.contains(n.bounds,e))for(var o=1===n.parts.length?0:1;o<n.parts.length;o++){var a=n.parts[o];if(s.contains(a.bounds,e)&&h.contains(a.vertices,e)){i.push(n);break}}}return i}},{"../factory/Bodies":23,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"./SAT":11}],10:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../geometry/Vector"),s=t("../core/Common"),a=t("../geometry/Bounds");r._restingThresh=4,r._restingThreshTangent=6,r._positionDampen=.9,r._positionWarming=.8,r._frictionNormalMultiplier=5,r.preSolvePosition=function(t){var e,i,r;for(e=0;e<t.length;e++)(i=t[e]).isActive&&(r=i.activeContacts.length,i.collision.parentA.totalContacts+=r,i.collision.parentB.totalContacts+=r)},r.solvePosition=function(t,e){var i,n,s,a,h,l,u,c,d,p=o._temp[0],f=o._temp[1],m=o._temp[2],y=o._temp[3];for(i=0;i<t.length;i++)(n=t[i]).isActive&&!n.isSensor&&(a=(s=n.collision).parentA,h=s.parentB,l=s.normal,u=o.sub(o.add(h.positionImpulse,h.position,p),o.add(a.positionImpulse,o.sub(h.position,s.penetration,f),m),y),n.separation=o.dot(l,u));for(i=0;i<t.length;i++)(n=t[i]).isActive&&!n.isSensor&&(a=(s=n.collision).parentA,h=s.parentB,l=s.normal,d=(n.separation-n.slop)*e,(a.isStatic||h.isStatic)&&(d*=2),a.isStatic||a.isSleeping||(c=r._positionDampen/a.totalContacts,a.positionImpulse.x+=l.x*d*c,a.positionImpulse.y+=l.y*d*c),h.isStatic||h.isSleeping||(c=r._positionDampen/h.totalContacts,h.positionImpulse.x-=l.x*d*c,h.positionImpulse.y-=l.y*d*c))},r.postSolvePosition=function(t){for(var e=0;e<t.length;e++){var i=t[e];if(i.totalContacts=0,0!==i.positionImpulse.x||0!==i.positionImpulse.y){for(var s=0;s<i.parts.length;s++){var h=i.parts[s];n.translate(h.vertices,i.positionImpulse),a.update(h.bounds,h.vertices,i.velocity),h.position.x+=i.positionImpulse.x,h.position.y+=i.positionImpulse.y}i.positionPrev.x+=i.positionImpulse.x,i.positionPrev.y+=i.positionImpulse.y,o.dot(i.positionImpulse,i.velocity)<0?(i.positionImpulse.x=0,i.positionImpulse.y=0):(i.positionImpulse.x*=r._positionWarming,i.positionImpulse.y*=r._positionWarming)}}},r.preSolveVelocity=function(t){var e,i,r,n,s,a,h,l,u,c,d,p,f,m,y=o._temp[0],v=o._temp[1];for(e=0;e<t.length;e++)if((r=t[e]).isActive&&!r.isSensor)for(n=r.activeContacts,a=(s=r.collision).parentA,h=s.parentB,l=s.normal,u=s.tangent,i=0;i<n.length;i++)d=(c=n[i]).vertex,p=c.normalImpulse,f=c.tangentImpulse,0===p&&0===f||(y.x=l.x*p+u.x*f,y.y=l.y*p+u.y*f,a.isStatic||a.isSleeping||(m=o.sub(d,a.position,v),a.positionPrev.x+=y.x*a.inverseMass,a.positionPrev.y+=y.y*a.inverseMass,a.anglePrev+=o.cross(m,y)*a.inverseInertia),h.isStatic||h.isSleeping||(m=o.sub(d,h.position,v),h.positionPrev.x-=y.x*h.inverseMass,h.positionPrev.y-=y.y*h.inverseMass,h.anglePrev-=o.cross(m,y)*h.inverseInertia))},r.solveVelocity=function(t,e){for(var i=e*e,n=o._temp[0],a=o._temp[1],h=o._temp[2],l=o._temp[3],u=o._temp[4],c=o._temp[5],d=0;d<t.length;d++){var p=t[d];if(p.isActive&&!p.isSensor){var f=p.collision,m=f.parentA,y=f.parentB,v=f.normal,g=f.tangent,x=p.activeContacts,b=1/x.length;m.velocity.x=m.position.x-m.positionPrev.x,m.velocity.y=m.position.y-m.positionPrev.y,y.velocity.x=y.position.x-y.positionPrev.x,y.velocity.y=y.position.y-y.positionPrev.y,m.angularVelocity=m.angle-m.anglePrev,y.angularVelocity=y.angle-y.anglePrev;for(var w=0;w<x.length;w++){var _=x[w],S=_.vertex,T=o.sub(S,m.position,a),C=o.sub(S,y.position,h),I=o.add(m.velocity,o.mult(o.perp(T),m.angularVelocity),l),E=o.add(y.velocity,o.mult(o.perp(C),y.angularVelocity),u),A=o.sub(I,E,c),P=o.dot(v,A),M=o.dot(g,A),O=Math.abs(M),k=s.sign(M),B=(1+p.restitution)*P,R=s.clamp(p.separation+P,0,1)*r._frictionNormalMultiplier,D=M,F=1/0;O>p.friction*p.frictionStatic*R*i&&(F=O,D=s.clamp(p.friction*k*i,-F,F));var L=o.cross(T,v),N=o.cross(C,v),U=b/(m.inverseMass+y.inverseMass+m.inverseInertia*L*L+y.inverseInertia*N*N);if(B*=U,D*=U,P<0&&P*P>r._restingThresh*i)_.normalImpulse=0;else{var V=_.normalImpulse;_.normalImpulse=Math.min(_.normalImpulse+B,0),B=_.normalImpulse-V}if(M*M>r._restingThreshTangent*i)_.tangentImpulse=0;else{var X=_.tangentImpulse;_.tangentImpulse=s.clamp(_.tangentImpulse+D,-F,F),D=_.tangentImpulse-X}n.x=v.x*B+g.x*D,n.y=v.y*B+g.y*D,m.isStatic||m.isSleeping||(m.positionPrev.x+=n.x*m.inverseMass,m.positionPrev.y+=n.y*m.inverseMass,m.anglePrev+=o.cross(T,n)*m.inverseInertia),y.isStatic||y.isSleeping||(y.positionPrev.x-=n.x*y.inverseMass,y.positionPrev.y-=n.y*y.inverseMass,y.anglePrev-=o.cross(C,n)*y.inverseInertia)}}}}},{"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],11:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../geometry/Vector");r.collides=function(t,e,i){var s,a,h,l,u=!1;if(i){var c=t.parent,d=e.parent,p=c.speed*c.speed+c.angularSpeed*c.angularSpeed+d.speed*d.speed+d.angularSpeed*d.angularSpeed;u=i&&i.collided&&p<.2,l=i}else l={collided:!1,bodyA:t,bodyB:e};if(i&&u){var f=l.axisBody,m=f===t?e:t,y=[f.axes[i.axisNumber]];if(h=r._overlapAxes(f.vertices,m.vertices,y),l.reused=!0,h.overlap<=0)return l.collided=!1,l}else{if((s=r._overlapAxes(t.vertices,e.vertices,t.axes)).overlap<=0)return l.collided=!1,l;if((a=r._overlapAxes(e.vertices,t.vertices,e.axes)).overlap<=0)return l.collided=!1,l;s.overlap<a.overlap?(h=s,l.axisBody=t):(h=a,l.axisBody=e),l.axisNumber=h.axisNumber}l.bodyA=t.id<e.id?t:e,l.bodyB=t.id<e.id?e:t,l.collided=!0,l.depth=h.overlap,l.parentA=l.bodyA.parent,l.parentB=l.bodyB.parent,t=l.bodyA,e=l.bodyB,o.dot(h.axis,o.sub(e.position,t.position))<0?l.normal={x:h.axis.x,y:h.axis.y}:l.normal={x:-h.axis.x,y:-h.axis.y},l.tangent=o.perp(l.normal),l.penetration=l.penetration||{},l.penetration.x=l.normal.x*l.depth,l.penetration.y=l.normal.y*l.depth;var v=r._findSupports(t,e,l.normal),g=[];if(n.contains(t.vertices,v[0])&&g.push(v[0]),n.contains(t.vertices,v[1])&&g.push(v[1]),g.length<2){var x=r._findSupports(e,t,o.neg(l.normal));n.contains(e.vertices,x[0])&&g.push(x[0]),g.length<2&&n.contains(e.vertices,x[1])&&g.push(x[1])}return g.length<1&&(g=[v[0]]),l.supports=g,l},r._overlapAxes=function(t,e,i){for(var n,s,a=o._temp[0],h=o._temp[1],l={overlap:Number.MAX_VALUE},u=0;u<i.length;u++){if(s=i[u],r._projectToAxis(a,t,s),r._projectToAxis(h,e,s),(n=Math.min(a.max-h.min,h.max-a.min))<=0)return l.overlap=n,l;n<l.overlap&&(l.overlap=n,l.axis=s,l.axisNumber=u)}return l},r._projectToAxis=function(t,e,i){for(var r=o.dot(e[0],i),n=r,s=1;s<e.length;s+=1){var a=o.dot(e[s],i);a>n?n=a:a<r&&(r=a)}t.min=r,t.max=n},r._findSupports=function(t,e,i){for(var r,n,s,a,h=Number.MAX_VALUE,l=o._temp[0],u=e.vertices,c=t.position,d=0;d<u.length;d++)n=u[d],l.x=n.x-c.x,l.y=n.y-c.y,(r=-o.dot(i,l))<h&&(h=r,s=n);return n=u[s.index-1>=0?s.index-1:u.length-1],l.x=n.x-c.x,l.y=n.y-c.y,h=-o.dot(i,l),a=n,n=u[(s.index+1)%u.length],l.x=n.x-c.x,l.y=n.y-c.y,(r=-o.dot(i,l))<h&&(a=n),[s,a]}},{"../geometry/Vector":28,"../geometry/Vertices":29}],12:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../geometry/Vector"),s=t("../core/Sleeping"),a=t("../geometry/Bounds"),h=t("../geometry/Axes"),l=t("../core/Common");r._warming=.4,r._torqueDampen=1,r._minLength=1e-6,r.create=function(t){var e=t;e.bodyA&&!e.pointA&&(e.pointA={x:0,y:0}),e.bodyB&&!e.pointB&&(e.pointB={x:0,y:0});var i=e.bodyA?o.add(e.bodyA.position,e.pointA):e.pointA,r=e.bodyB?o.add(e.bodyB.position,e.pointB):e.pointB,n=o.magnitude(o.sub(i,r));e.length=void 0!==e.length?e.length:n,e.id=e.id||l.nextId(),e.label=e.label||"Constraint",e.type="constraint",e.stiffness=e.stiffness||(e.length>0?1:.7),e.damping=e.damping||0,e.angularStiffness=e.angularStiffness||0,e.angleA=e.bodyA?e.bodyA.angle:e.angleA,e.angleB=e.bodyB?e.bodyB.angle:e.angleB,e.plugin={};var s={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===e.length&&e.stiffness>.1?(s.type="pin",s.anchors=!1):e.stiffness<.9&&(s.type="spring"),e.render=l.extend(s,e.render),e},r.preSolveAll=function(t){for(var e=0;e<t.length;e+=1){var i=t[e],r=i.constraintImpulse;i.isStatic||0===r.x&&0===r.y&&0===r.angle||(i.position.x+=r.x,i.position.y+=r.y,i.angle+=r.angle)}},r.solveAll=function(t,e){for(var i=0;i<t.length;i+=1){var n=t[i],o=!n.bodyA||n.bodyA&&n.bodyA.isStatic,s=!n.bodyB||n.bodyB&&n.bodyB.isStatic;(o||s)&&r.solve(t[i],e)}for(i=0;i<t.length;i+=1)o=!(n=t[i]).bodyA||n.bodyA&&n.bodyA.isStatic,s=!n.bodyB||n.bodyB&&n.bodyB.isStatic,o||s||r.solve(t[i],e)},r.solve=function(t,e){var i=t.bodyA,n=t.bodyB,s=t.pointA,a=t.pointB;if(i||n){i&&!i.isStatic&&(o.rotate(s,i.angle-t.angleA,s),t.angleA=i.angle),n&&!n.isStatic&&(o.rotate(a,n.angle-t.angleB,a),t.angleB=n.angle);var h=s,l=a;if(i&&(h=o.add(i.position,s)),n&&(l=o.add(n.position,a)),h&&l){var u=o.sub(h,l),c=o.magnitude(u);c<r._minLength&&(c=r._minLength);var d,p,f,m,y,v=(c-t.length)/c,g=t.stiffness<1?t.stiffness*e:t.stiffness,x=o.mult(u,v*g),b=(i?i.inverseMass:0)+(n?n.inverseMass:0),w=b+((i?i.inverseInertia:0)+(n?n.inverseInertia:0));if(t.damping){var _=o.create();f=o.div(u,c),y=o.sub(n&&o.sub(n.position,n.positionPrev)||_,i&&o.sub(i.position,i.positionPrev)||_),m=o.dot(f,y)}i&&!i.isStatic&&(p=i.inverseMass/b,i.constraintImpulse.x-=x.x*p,i.constraintImpulse.y-=x.y*p,i.position.x-=x.x*p,i.position.y-=x.y*p,t.damping&&(i.positionPrev.x-=t.damping*f.x*m*p,i.positionPrev.y-=t.damping*f.y*m*p),d=o.cross(s,x)/w*r._torqueDampen*i.inverseInertia*(1-t.angularStiffness),i.constraintImpulse.angle-=d,i.angle-=d),n&&!n.isStatic&&(p=n.inverseMass/b,n.constraintImpulse.x+=x.x*p,n.constraintImpulse.y+=x.y*p,n.position.x+=x.x*p,n.position.y+=x.y*p,t.damping&&(n.positionPrev.x+=t.damping*f.x*m*p,n.positionPrev.y+=t.damping*f.y*m*p),d=o.cross(a,x)/w*r._torqueDampen*n.inverseInertia*(1-t.angularStiffness),n.constraintImpulse.angle+=d,n.angle+=d)}}},r.postSolveAll=function(t){for(var e=0;e<t.length;e++){var i=t[e],l=i.constraintImpulse;if(!(i.isStatic||0===l.x&&0===l.y&&0===l.angle)){s.set(i,!1);for(var u=0;u<i.parts.length;u++){var c=i.parts[u];n.translate(c.vertices,l),u>0&&(c.position.x+=l.x,c.position.y+=l.y),0!==l.angle&&(n.rotate(c.vertices,l.angle,i.position),h.rotate(c.axes,l.angle),u>0&&o.rotateAbout(c.position,l.angle,i.position,c.position)),a.update(c.bounds,c.vertices,i.velocity)}l.angle*=r._warming,l.x*=r._warming,l.y*=r._warming}}}},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],13:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../core/Sleeping"),s=t("../core/Mouse"),a=t("../core/Events"),h=t("../collision/Detector"),l=t("./Constraint"),u=t("../body/Composite"),c=t("../core/Common"),d=t("../geometry/Bounds");r.create=function(t,e){var i=(t?t.mouse:null)||(e?e.mouse:null);i||(t&&t.render&&t.render.canvas?i=s.create(t.render.canvas):e&&e.element?i=s.create(e.element):(i=s.create(),c.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var n={type:"mouseConstraint",mouse:i,element:null,body:null,constraint:l.create({label:"Mouse Constraint",pointA:i.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},o=c.extend(n,e);return a.on(t,"beforeUpdate",(function(){var e=u.allBodies(t.world);r.update(o,e),r._triggerEvents(o)})),o},r.update=function(t,e){var i=t.mouse,r=t.constraint,s=t.body;if(0===i.button){if(r.bodyB)o.set(r.bodyB,!1),r.pointA=i.position;else for(var l=0;l<e.length;l++)if(s=e[l],d.contains(s.bounds,i.position)&&h.canCollide(s.collisionFilter,t.collisionFilter))for(var u=s.parts.length>1?1:0;u<s.parts.length;u++){var c=s.parts[u];if(n.contains(c.vertices,i.position)){r.pointA=i.position,r.bodyB=t.body=s,r.pointB={x:i.position.x-s.position.x,y:i.position.y-s.position.y},r.angleB=s.angle,o.set(s,!1),a.trigger(t,"startdrag",{mouse:i,body:s});break}}}else r.bodyB=t.body=null,r.pointB=null,s&&a.trigger(t,"enddrag",{mouse:i,body:s})},r._triggerEvents=function(t){var e=t.mouse,i=e.sourceEvents;i.mousemove&&a.trigger(t,"mousemove",{mouse:e}),i.mousedown&&a.trigger(t,"mousedown",{mouse:e}),i.mouseup&&a.trigger(t,"mouseup",{mouse:e}),s.clearSourceEvents(e)}},{"../body/Composite":2,"../collision/Detector":5,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../core/Sleeping":22,"../geometry/Bounds":26,"../geometry/Vertices":29,"./Constraint":12}],14:[function(t,i,r){(function(e){var r={};i.exports=r,function(){r._nextId=0,r._seed=0,r._nowStartTime=+new Date,r.extend=function(t,e){var i,n;"boolean"==typeof e?(i=2,n=e):(i=1,n=!0);for(var o=i;o<arguments.length;o++){var s=arguments[o];if(s)for(var a in s)n&&s[a]&&s[a].constructor===Object?t[a]&&t[a].constructor!==Object?t[a]=s[a]:(t[a]=t[a]||{},r.extend(t[a],n,s[a])):t[a]=s[a]}return t},r.clone=function(t,e){return r.extend({},e,t)},r.keys=function(t){if(Object.keys)return Object.keys(t);var e=[];for(var i in t)e.push(i);return e},r.values=function(t){var e=[];if(Object.keys){for(var i=Object.keys(t),r=0;r<i.length;r++)e.push(t[i[r]]);return e}for(var n in t)e.push(t[n]);return e},r.get=function(t,e,i,r){e=e.split(".").slice(i,r);for(var n=0;n<e.length;n+=1)t=t[e[n]];return t},r.set=function(t,e,i,n,o){var s=e.split(".").slice(n,o);return r.get(t,e,0,-1)[s[s.length-1]]=i,i},r.shuffle=function(t){for(var e=t.length-1;e>0;e--){var i=Math.floor(r.random()*(e+1)),n=t[e];t[e]=t[i],t[i]=n}return t},r.choose=function(t){return t[Math.floor(r.random()*t.length)]},r.isElement=function(t){return"undefined"!=typeof HTMLElement?t instanceof HTMLElement:!!(t&&t.nodeType&&t.nodeName)},r.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)},r.isFunction=function(t){return"function"==typeof t},r.isPlainObject=function(t){return"object"==typeof t&&t.constructor===Object},r.isString=function(t){return"[object String]"===toString.call(t)},r.clamp=function(t,e,i){return t<e?e:t>i?i:t},r.sign=function(t){return t<0?-1:1},r.now=function(){if(window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return new Date-r._nowStartTime},r.random=function(t,e){return e=void 0!==e?e:1,(t=void 0!==t?t:0)+i()*(e-t)};var i=function(){return r._seed=(9301*r._seed+49297)%233280,r._seed/233280};r.colorToNumber=function(t){return 3==(t=t.replace("#","")).length&&(t=t.charAt(0)+t.charAt(0)+t.charAt(1)+t.charAt(1)+t.charAt(2)+t.charAt(2)),parseInt(t,16)},r.logLevel=1,r.log=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.info=function(){console&&r.logLevel>0&&r.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.warn=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.nextId=function(){return r._nextId++},r.indexOf=function(t,e){if(t.indexOf)return t.indexOf(e);for(var i=0;i<t.length;i++)if(t[i]===e)return i;return-1},r.map=function(t,e){if(t.map)return t.map(e);for(var i=[],r=0;r<t.length;r+=1)i.push(e(t[r]));return i},r.topologicalSort=function(t){var e=[],i=[],n=[];for(var o in t)i[o]||n[o]||r._topologicalSort(o,i,n,t,e);return e},r._topologicalSort=function(t,e,i,n,o){var s=n[t]||[];i[t]=!0;for(var a=0;a<s.length;a+=1){var h=s[a];i[h]||e[h]||r._topologicalSort(h,e,i,n,o)}i[t]=!1,e[t]=!0,o.push(t)},r.chain=function(){for(var t=[],e=0;e<arguments.length;e+=1){var i=arguments[e];i._chained?t.push.apply(t,i._chained):t.push(i)}var r=function(){for(var e,i=new Array(arguments.length),r=0,n=arguments.length;r<n;r++)i[r]=arguments[r];for(r=0;r<t.length;r+=1){var o=t[r].apply(e,i);void 0!==o&&(e=o)}return e};return r._chained=t,r},r.chainPathBefore=function(t,e,i){return r.set(t,e,r.chain(i,r.get(t,e)))},r.chainPathAfter=function(t,e,i){return r.set(t,e,r.chain(r.get(t,e),i))},r._requireGlobal=function(i,r){return("undefined"!=typeof window?window[i]:void 0!==e?e[i]:null)||t(r)}}()}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],15:[function(t,e,i){var r={};e.exports=r;var n=t("../body/World"),o=t("./Sleeping"),s=t("../collision/Resolver"),a=t("../render/Render"),h=t("../collision/Pairs"),l=(t("./Metrics"),t("../collision/Grid")),u=t("./Events"),c=t("../body/Composite"),d=t("../constraint/Constraint"),p=t("./Common"),f=t("../body/Body");r.create=function(t,e){e=(e=p.isElement(t)?e:t)||{},((t=p.isElement(t)?t:null)||e.render)&&p.warn("Engine.create: engine.render is deprecated (see docs)");var i={positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},timing:{timestamp:0,timeScale:1},broadphase:{controller:l}},r=p.extend(i,e);if(t||r.render){var o={element:t,controller:a};r.render=p.extend(o,r.render)}return r.render&&r.render.controller&&(r.render=r.render.controller.create(r.render)),r.render&&(r.render.engine=r),r.world=e.world||n.create(r.world),r.pairs=h.create(),r.broadphase=r.broadphase.controller.create(r.broadphase),r.metrics=r.metrics||{extended:!1},r},r.update=function(t,e,i){e=e||1e3/60,i=i||1;var n,a=t.world,l=t.timing,p=t.broadphase,f=[];l.timestamp+=e*l.timeScale;var m={timestamp:l.timestamp};u.trigger(t,"beforeUpdate",m);var y=c.allBodies(a),v=c.allConstraints(a);for(t.enableSleeping&&o.update(y,l.timeScale),r._bodiesApplyGravity(y,a.gravity),r._bodiesUpdate(y,e,l.timeScale,i,a.bounds),d.preSolveAll(y),n=0;n<t.constraintIterations;n++)d.solveAll(v,l.timeScale);d.postSolveAll(y),p.controller?(a.isModified&&p.controller.clear(p),p.controller.update(p,y,t,a.isModified),f=p.pairsList):f=y,a.isModified&&c.setModified(a,!1,!1,!0);var g=p.detector(f,t),x=t.pairs,b=l.timestamp;for(h.update(x,g,b),h.removeOld(x,b),t.enableSleeping&&o.afterCollisions(x.list,l.timeScale),x.collisionStart.length>0&&u.trigger(t,"collisionStart",{pairs:x.collisionStart}),s.preSolvePosition(x.list),n=0;n<t.positionIterations;n++)s.solvePosition(x.list,l.timeScale);for(s.postSolvePosition(y),d.preSolveAll(y),n=0;n<t.constraintIterations;n++)d.solveAll(v,l.timeScale);for(d.postSolveAll(y),s.preSolveVelocity(x.list),n=0;n<t.velocityIterations;n++)s.solveVelocity(x.list,l.timeScale);return x.collisionActive.length>0&&u.trigger(t,"collisionActive",{pairs:x.collisionActive}),x.collisionEnd.length>0&&u.trigger(t,"collisionEnd",{pairs:x.collisionEnd}),r._bodiesClearForces(y),u.trigger(t,"afterUpdate",m),t},r.merge=function(t,e){if(p.extend(t,e),e.world){t.world=e.world,r.clear(t);for(var i=c.allBodies(t.world),n=0;n<i.length;n++){var s=i[n];o.set(s,!1),s.id=p.nextId()}}},r.clear=function(t){var e=t.world;h.clear(t.pairs);var i=t.broadphase;if(i.controller){var r=c.allBodies(e);i.controller.clear(i),i.controller.update(i,r,t,!0)}},r._bodiesClearForces=function(t){for(var e=0;e<t.length;e++){var i=t[e];i.force.x=0,i.force.y=0,i.torque=0}},r._bodiesApplyGravity=function(t,e){var i=void 0!==e.scale?e.scale:.001;if((0!==e.x||0!==e.y)&&0!==i)for(var r=0;r<t.length;r++){var n=t[r];n.isStatic||n.isSleeping||(n.force.y+=n.mass*e.y*i,n.force.x+=n.mass*e.x*i)}},r._bodiesUpdate=function(t,e,i,r,n){for(var o=0;o<t.length;o++){var s=t[o];s.isStatic||s.isSleeping||f.update(s,e,i,r)}}},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Grid":6,"../collision/Pairs":8,"../collision/Resolver":10,"../constraint/Constraint":12,"../render/Render":31,"./Common":14,"./Events":16,"./Metrics":18,"./Sleeping":22}],16:[function(t,e,i){var r={};e.exports=r;var n=t("./Common");r.on=function(t,e,i){for(var r,n=e.split(" "),o=0;o<n.length;o++)r=n[o],t.events=t.events||{},t.events[r]=t.events[r]||[],t.events[r].push(i);return i},r.off=function(t,e,i){if(e){"function"==typeof e&&(i=e,e=n.keys(t.events).join(" "));for(var r=e.split(" "),o=0;o<r.length;o++){var s=t.events[r[o]],a=[];if(i&&s)for(var h=0;h<s.length;h++)s[h]!==i&&a.push(s[h]);t.events[r[o]]=a}}else t.events={}},r.trigger=function(t,e,i){var r,o,s,a;if(t.events){i||(i={}),r=e.split(" ");for(var h=0;h<r.length;h++)if(o=r[h],s=t.events[o]){(a=n.clone(i,!1)).name=o,a.source=t;for(var l=0;l<s.length;l++)s[l].apply(t,[a])}}}},{"./Common":14}],17:[function(t,e,i){var r={};e.exports=r;var n=t("./Plugin"),o=t("./Common");r.name="matter-js",r.version="0.14.2",r.uses=[],r.used=[],r.use=function(){n.use(r,Array.prototype.slice.call(arguments))},r.before=function(t,e){return t=t.replace(/^Matter./,""),o.chainPathBefore(r,t,e)},r.after=function(t,e){return t=t.replace(/^Matter./,""),o.chainPathAfter(r,t,e)}},{"./Common":14,"./Plugin":20}],18:[function(t,e,i){},{"../body/Composite":2,"./Common":14}],19:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Common");r.create=function(t){var e={};return t||n.log("Mouse.create: element was undefined, defaulting to document.body","warn"),e.element=t||document.body,e.absolute={x:0,y:0},e.position={x:0,y:0},e.mousedownPosition={x:0,y:0},e.mouseupPosition={x:0,y:0},e.offset={x:0,y:0},e.scale={x:1,y:1},e.wheelDelta=0,e.button=-1,e.pixelRatio=e.element.getAttribute("data-pixel-ratio")||1,e.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},e.mousemove=function(t){var i=r._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches&&(e.button=0,t.preventDefault()),e.absolute.x=i.x,e.absolute.y=i.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.sourceEvents.mousemove=t},e.mousedown=function(t){var i=r._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches?(e.button=0,t.preventDefault()):e.button=t.button,e.absolute.x=i.x,e.absolute.y=i.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.mousedownPosition.x=e.position.x,e.mousedownPosition.y=e.position.y,e.sourceEvents.mousedown=t},e.mouseup=function(t){var i=r._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches&&t.preventDefault(),e.button=-1,e.absolute.x=i.x,e.absolute.y=i.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.mouseupPosition.x=e.position.x,e.mouseupPosition.y=e.position.y,e.sourceEvents.mouseup=t},e.mousewheel=function(t){e.wheelDelta=Math.max(-1,Math.min(1,t.wheelDelta||-t.detail)),t.preventDefault()},r.setElement(e,e.element),e},r.setElement=function(t,e){t.element=e,e.addEventListener("mousemove",t.mousemove),e.addEventListener("mousedown",t.mousedown),e.addEventListener("mouseup",t.mouseup),e.addEventListener("mousewheel",t.mousewheel),e.addEventListener("DOMMouseScroll",t.mousewheel),e.addEventListener("touchmove",t.mousemove),e.addEventListener("touchstart",t.mousedown),e.addEventListener("touchend",t.mouseup)},r.clearSourceEvents=function(t){t.sourceEvents.mousemove=null,t.sourceEvents.mousedown=null,t.sourceEvents.mouseup=null,t.sourceEvents.mousewheel=null,t.wheelDelta=0},r.setOffset=function(t,e){t.offset.x=e.x,t.offset.y=e.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y},r.setScale=function(t,e){t.scale.x=e.x,t.scale.y=e.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y},r._getRelativeMousePosition=function(t,e,i){var r,n,o=e.getBoundingClientRect(),s=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:s.scrollLeft,h=void 0!==window.pageYOffset?window.pageYOffset:s.scrollTop,l=t.changedTouches;return l?(r=l[0].pageX-o.left-a,n=l[0].pageY-o.top-h):(r=t.pageX-o.left-a,n=t.pageY-o.top-h),{x:r/(e.clientWidth/(e.width||e.clientWidth)*i),y:n/(e.clientHeight/(e.height||e.clientHeight)*i)}}},{"../core/Common":14}],20:[function(t,e,i){var r={};e.exports=r;var n=t("./Common");r._registry={},r.register=function(t){if(r.isPlugin(t)||n.warn("Plugin.register:",r.toString(t),"does not implement all required fields."),t.name in r._registry){var e=r._registry[t.name],i=r.versionParse(t.version).number,o=r.versionParse(e.version).number;i>o?(n.warn("Plugin.register:",r.toString(e),"was upgraded to",r.toString(t)),r._registry[t.name]=t):i<o?n.warn("Plugin.register:",r.toString(e),"can not be downgraded to",r.toString(t)):t!==e&&n.warn("Plugin.register:",r.toString(t),"is already registered to different plugin object")}else r._registry[t.name]=t;return t},r.resolve=function(t){return r._registry[r.dependencyParse(t).name]},r.toString=function(t){return"string"==typeof t?t:(t.name||"anonymous")+"@"+(t.version||t.range||"0.0.0")},r.isPlugin=function(t){return t&&t.name&&t.version&&t.install},r.isUsed=function(t,e){return t.used.indexOf(e)>-1},r.isFor=function(t,e){var i=t.for&&r.dependencyParse(t.for);return!t.for||e.name===i.name&&r.versionSatisfies(e.version,i.range)},r.use=function(t,e){if(t.uses=(t.uses||[]).concat(e||[]),0!==t.uses.length){for(var i=r.dependencies(t),o=n.topologicalSort(i),s=[],a=0;a<o.length;a+=1)if(o[a]!==t.name){var h=r.resolve(o[a]);h?r.isUsed(t,h.name)||(r.isFor(h,t)||(n.warn("Plugin.use:",r.toString(h),"is for",h.for,"but installed on",r.toString(t)+"."),h._warned=!0),h.install?h.install(t):(n.warn("Plugin.use:",r.toString(h),"does not specify an install function."),h._warned=!0),h._warned?(s.push("🔶 "+r.toString(h)),delete h._warned):s.push("✅ "+r.toString(h)),t.used.push(h.name)):s.push("❌ "+o[a])}s.length>0&&n.info(s.join("  "))}else n.warn("Plugin.use:",r.toString(t),"does not specify any dependencies to install.")},r.dependencies=function(t,e){var i=r.dependencyParse(t),o=i.name;if(!(o in(e=e||{}))){t=r.resolve(t)||t,e[o]=n.map(t.uses||[],(function(e){r.isPlugin(e)&&r.register(e);var o=r.dependencyParse(e),s=r.resolve(e);return s&&!r.versionSatisfies(s.version,o.range)?(n.warn("Plugin.dependencies:",r.toString(s),"does not satisfy",r.toString(o),"used by",r.toString(i)+"."),s._warned=!0,t._warned=!0):s||(n.warn("Plugin.dependencies:",r.toString(e),"used by",r.toString(i),"could not be resolved."),t._warned=!0),o.name}));for(var s=0;s<e[o].length;s+=1)r.dependencies(e[o][s],e);return e}},r.dependencyParse=function(t){return n.isString(t)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?))?$/.test(t)||n.warn("Plugin.dependencyParse:",t,"is not a valid dependency string."),{name:t.split("@")[0],range:t.split("@")[1]||"*"}):{name:t.name,range:t.range||t.version}},r.versionParse=function(t){/^\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?$/.test(t)||n.warn("Plugin.versionParse:",t,"is not a valid version or range.");var e=t.split("-");t=e[0];var i=isNaN(Number(t[0])),r=i?t.substr(1):t,o=n.map(r.split("."),(function(t){return Number(t)}));return{isRange:i,version:r,range:t,operator:i?t[0]:"",parts:o,prerelease:e[1],number:1e8*o[0]+1e4*o[1]+o[2]}},r.versionSatisfies=function(t,e){e=e||"*";var i=r.versionParse(e),n=i.parts,o=r.versionParse(t),s=o.parts;if(i.isRange){if("*"===i.operator||"*"===t)return!0;if("~"===i.operator)return s[0]===n[0]&&s[1]===n[1]&&s[2]>=n[2];if("^"===i.operator)return n[0]>0?s[0]===n[0]&&o.number>=i.number:n[1]>0?s[1]===n[1]&&s[2]>=n[2]:s[2]===n[2]}return t===e||"*"===t}},{"./Common":14}],21:[function(t,e,i){var r={};e.exports=r;var n=t("./Events"),o=t("./Engine"),s=t("./Common");!function(){var t,e,i;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),t||(t=function(t){i=setTimeout((function(){t(s.now())}),1e3/60)},e=function(){clearTimeout(i)}),r.create=function(t){var e=s.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},t);return e.delta=e.delta||1e3/e.fps,e.deltaMin=e.deltaMin||1e3/e.fps,e.deltaMax=e.deltaMax||1e3/(.5*e.fps),e.fps=1e3/e.delta,e},r.run=function(e,i){return void 0!==e.positionIterations&&(i=e,e=r.create()),function n(o){e.frameRequestId=t(n),o&&e.enabled&&r.tick(e,i,o)}(),e},r.tick=function(t,e,i){var r,s=e.timing,a=1,h={timestamp:s.timestamp};n.trigger(t,"beforeTick",h),n.trigger(e,"beforeTick",h),t.isFixed?r=t.delta:(r=i-t.timePrev||t.delta,t.timePrev=i,t.deltaHistory.push(r),t.deltaHistory=t.deltaHistory.slice(-t.deltaSampleSize),a=(r=(r=(r=Math.min.apply(null,t.deltaHistory))<t.deltaMin?t.deltaMin:r)>t.deltaMax?t.deltaMax:r)/t.delta,t.delta=r),0!==t.timeScalePrev&&(a*=s.timeScale/t.timeScalePrev),0===s.timeScale&&(a=0),t.timeScalePrev=s.timeScale,t.correction=a,t.frameCounter+=1,i-t.counterTimestamp>=1e3&&(t.fps=t.frameCounter*((i-t.counterTimestamp)/1e3),t.counterTimestamp=i,t.frameCounter=0),n.trigger(t,"tick",h),n.trigger(e,"tick",h),e.world.isModified&&e.render&&e.render.controller&&e.render.controller.clear&&e.render.controller.clear(e.render),n.trigger(t,"beforeUpdate",h),o.update(e,r,a),n.trigger(t,"afterUpdate",h),e.render&&e.render.controller&&(n.trigger(t,"beforeRender",h),n.trigger(e,"beforeRender",h),e.render.controller.world(e.render),n.trigger(t,"afterRender",h),n.trigger(e,"afterRender",h)),n.trigger(t,"afterTick",h),n.trigger(e,"afterTick",h)},r.stop=function(t){e(t.frameRequestId)},r.start=function(t,e){r.run(t,e)}}()},{"./Common":14,"./Engine":15,"./Events":16}],22:[function(t,e,i){var r={};e.exports=r;var n=t("./Events");r._motionWakeThreshold=.18,r._motionSleepThreshold=.08,r._minBias=.9,r.update=function(t,e){for(var i=e*e*e,n=0;n<t.length;n++){var o=t[n],s=o.speed*o.speed+o.angularSpeed*o.angularSpeed;if(0===o.force.x&&0===o.force.y){var a=Math.min(o.motion,s),h=Math.max(o.motion,s);o.motion=r._minBias*a+(1-r._minBias)*h,o.sleepThreshold>0&&o.motion<r._motionSleepThreshold*i?(o.sleepCounter+=1,o.sleepCounter>=o.sleepThreshold&&r.set(o,!0)):o.sleepCounter>0&&(o.sleepCounter-=1)}else r.set(o,!1)}},r.afterCollisions=function(t,e){for(var i=e*e*e,n=0;n<t.length;n++){var o=t[n];if(o.isActive){var s=o.collision,a=s.bodyA.parent,h=s.bodyB.parent;if(!(a.isSleeping&&h.isSleeping||a.isStatic||h.isStatic)&&(a.isSleeping||h.isSleeping)){var l=a.isSleeping&&!a.isStatic?a:h,u=l===a?h:a;!l.isStatic&&u.motion>r._motionWakeThreshold*i&&r.set(l,!1)}}}},r.set=function(t,e){var i=t.isSleeping;e?(t.isSleeping=!0,t.sleepCounter=t.sleepThreshold,t.positionImpulse.x=0,t.positionImpulse.y=0,t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.anglePrev=t.angle,t.speed=0,t.angularSpeed=0,t.motion=0,i||n.trigger(t,"sleepStart")):(t.isSleeping=!1,t.sleepCounter=0,i&&n.trigger(t,"sleepEnd"))}},{"./Events":16}],23:[function(t,e,i){var r={};e.exports=r;var n,o=t("../geometry/Vertices"),s=t("../core/Common"),a=t("../body/Body"),h=t("../geometry/Bounds"),l=t("../geometry/Vector");r.rectangle=function(t,e,i,r,n){n=n||{};var h={label:"Rectangle Body",position:{x:t,y:e},vertices:o.fromPath("L 0 0 L "+i+" 0 L "+i+" "+r+" L 0 "+r)};if(n.chamfer){var l=n.chamfer;h.vertices=o.chamfer(h.vertices,l.radius,l.quality,l.qualityMin,l.qualityMax),delete n.chamfer}return a.create(s.extend({},h,n))},r.trapezoid=function(t,e,i,r,n,h){h=h||{};var l,u=i*(n*=.5),c=u+(1-2*n)*i,d=c+u;l=n<.5?"L 0 0 L "+u+" "+-r+" L "+c+" "+-r+" L "+d+" 0":"L 0 0 L "+c+" "+-r+" L "+d+" 0";var p={label:"Trapezoid Body",position:{x:t,y:e},vertices:o.fromPath(l)};if(h.chamfer){var f=h.chamfer;p.vertices=o.chamfer(p.vertices,f.radius,f.quality,f.qualityMin,f.qualityMax),delete h.chamfer}return a.create(s.extend({},p,h))},r.circle=function(t,e,i,n,o){n=n||{};var a={label:"Circle Body",circleRadius:i};o=o||25;var h=Math.ceil(Math.max(10,Math.min(o,i)));return h%2==1&&(h+=1),r.polygon(t,e,h,i,s.extend({},a,n))},r.polygon=function(t,e,i,n,h){if(h=h||{},i<3)return r.circle(t,e,n,h);for(var l=2*Math.PI/i,u="",c=.5*l,d=0;d<i;d+=1){var p=c+d*l,f=Math.cos(p)*n,m=Math.sin(p)*n;u+="L "+f.toFixed(3)+" "+m.toFixed(3)+" "}var y={label:"Polygon Body",position:{x:t,y:e},vertices:o.fromPath(u)};if(h.chamfer){var v=h.chamfer;y.vertices=o.chamfer(y.vertices,v.radius,v.quality,v.qualityMin,v.qualityMax),delete h.chamfer}return a.create(s.extend({},y,h))},r.fromVertices=function(t,e,i,r,u,c,d){var p,f,m,y,v,g,x,b,w;for(n||(n=s._requireGlobal("decomp","poly-decomp")),r=r||{},f=[],u=void 0!==u&&u,c=void 0!==c?c:.01,d=void 0!==d?d:10,n||s.warn("Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull."),s.isArray(i[0])||(i=[i]),b=0;b<i.length;b+=1)if(y=i[b],(m=o.isConvex(y))||!n)y=m?o.clockwiseSort(y):o.hull(y),f.push({position:{x:t,y:e},vertices:y});else{var _=y.map((function(t){return[t.x,t.y]}));n.makeCCW(_),!1!==c&&n.removeCollinearPoints(_,c);var S=n.quickDecomp(_);for(v=0;v<S.length;v++){var T=S[v].map((function(t){return{x:t[0],y:t[1]}}));d>0&&o.area(T)<d||f.push({position:o.centre(T),vertices:T})}}for(v=0;v<f.length;v++)f[v]=a.create(s.extend(f[v],r));if(u)for(v=0;v<f.length;v++){var C=f[v];for(g=v+1;g<f.length;g++){var I=f[g];if(h.overlaps(C.bounds,I.bounds)){var E=C.vertices,A=I.vertices;for(x=0;x<C.vertices.length;x++)for(w=0;w<I.vertices.length;w++){var P=l.magnitudeSquared(l.sub(E[(x+1)%E.length],A[w])),M=l.magnitudeSquared(l.sub(E[x],A[(w+1)%A.length]));P<5&&M<5&&(E[x].isInternal=!0,A[w].isInternal=!0)}}}}return f.length>1?(p=a.create(s.extend({parts:f.slice(0)},r)),a.setPosition(p,{x:t,y:e}),p):f[0]}},{"../body/Body":1,"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],24:[function(t,e,i){var r={};e.exports=r;var n=t("../body/Composite"),o=t("../constraint/Constraint"),s=t("../core/Common"),a=t("../body/Body"),h=t("./Bodies");r.stack=function(t,e,i,r,o,s,h){for(var l,u=n.create({label:"Stack"}),c=t,d=e,p=0,f=0;f<r;f++){for(var m=0,y=0;y<i;y++){var v=h(c,d,y,f,l,p);if(v){var g=v.bounds.max.y-v.bounds.min.y,x=v.bounds.max.x-v.bounds.min.x;g>m&&(m=g),a.translate(v,{x:.5*x,y:.5*g}),c=v.bounds.max.x+o,n.addBody(u,v),l=v,p+=1}else c+=o}d+=m+s,c=t}return u},r.chain=function(t,e,i,r,a,h){for(var l=t.bodies,u=1;u<l.length;u++){var c=l[u-1],d=l[u],p=c.bounds.max.y-c.bounds.min.y,f=c.bounds.max.x-c.bounds.min.x,m=d.bounds.max.y-d.bounds.min.y,y={bodyA:c,pointA:{x:f*e,y:p*i},bodyB:d,pointB:{x:(d.bounds.max.x-d.bounds.min.x)*r,y:m*a}},v=s.extend(y,h);n.addConstraint(t,o.create(v))}return t.label+=" Chain",t},r.mesh=function(t,e,i,r,a){var h,l,u,c,d,p=t.bodies;for(h=0;h<i;h++){for(l=1;l<e;l++)u=p[l-1+h*e],c=p[l+h*e],n.addConstraint(t,o.create(s.extend({bodyA:u,bodyB:c},a)));if(h>0)for(l=0;l<e;l++)u=p[l+(h-1)*e],c=p[l+h*e],n.addConstraint(t,o.create(s.extend({bodyA:u,bodyB:c},a))),r&&l>0&&(d=p[l-1+(h-1)*e],n.addConstraint(t,o.create(s.extend({bodyA:d,bodyB:c},a)))),r&&l<e-1&&(d=p[l+1+(h-1)*e],n.addConstraint(t,o.create(s.extend({bodyA:d,bodyB:c},a))))}return t.label+=" Mesh",t},r.pyramid=function(t,e,i,n,o,s,h){return r.stack(t,e,i,n,o,s,(function(e,r,s,l,u,c){var d=Math.min(n,Math.ceil(i/2)),p=u?u.bounds.max.x-u.bounds.min.x:0;if(!(l>d||s<(l=d-l)||s>i-1-l))return 1===c&&a.translate(u,{x:(s+(i%2==1?1:-1))*p,y:0}),h(t+(u?s*p:0)+s*o,r,s,l,u,c)}))},r.newtonsCradle=function(t,e,i,r,s){for(var a=n.create({label:"Newtons Cradle"}),l=0;l<i;l++){var u=h.circle(t+l*(1.9*r),e+s,r,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),c=o.create({pointA:{x:t+l*(1.9*r),y:e},bodyB:u});n.addBody(a,u),n.addConstraint(a,c)}return a},r.car=function(t,e,i,r,s){var l=a.nextGroup(!0),u=.5*-i+20,c=.5*i-20,d=n.create({label:"Car"}),p=h.rectangle(t,e,i,r,{collisionFilter:{group:l},chamfer:{radius:.5*r},density:2e-4}),f=h.circle(t+u,e+0,s,{collisionFilter:{group:l},friction:.8}),m=h.circle(t+c,e+0,s,{collisionFilter:{group:l},friction:.8}),y=o.create({bodyB:p,pointB:{x:u,y:0},bodyA:f,stiffness:1,length:0}),v=o.create({bodyB:p,pointB:{x:c,y:0},bodyA:m,stiffness:1,length:0});return n.addBody(d,p),n.addBody(d,f),n.addBody(d,m),n.addConstraint(d,y),n.addConstraint(d,v),d},r.softBody=function(t,e,i,n,o,a,l,u,c,d){c=s.extend({inertia:1/0},c),d=s.extend({stiffness:.2,render:{type:"line",anchors:!1}},d);var p=r.stack(t,e,i,n,o,a,(function(t,e){return h.circle(t,e,u,c)}));return r.mesh(p,i,n,l,d),p.label="Soft Body",p}},{"../body/Body":1,"../body/Composite":2,"../constraint/Constraint":12,"../core/Common":14,"./Bodies":23}],25:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),o=t("../core/Common");r.fromVertices=function(t){for(var e={},i=0;i<t.length;i++){var r=(i+1)%t.length,s=n.normalise({x:t[r].y-t[i].y,y:t[i].x-t[r].x}),a=0===s.y?1/0:s.x/s.y;e[a=a.toFixed(3).toString()]=s}return o.values(e)},r.rotate=function(t,e){if(0!==e)for(var i=Math.cos(e),r=Math.sin(e),n=0;n<t.length;n++){var o,s=t[n];o=s.x*i-s.y*r,s.y=s.x*r+s.y*i,s.x=o}}},{"../core/Common":14,"../geometry/Vector":28}],26:[function(t,e,i){var r={};e.exports=r,r.create=function(t){var e={min:{x:0,y:0},max:{x:0,y:0}};return t&&r.update(e,t),e},r.update=function(t,e,i){t.min.x=1/0,t.max.x=-1/0,t.min.y=1/0,t.max.y=-1/0;for(var r=0;r<e.length;r++){var n=e[r];n.x>t.max.x&&(t.max.x=n.x),n.x<t.min.x&&(t.min.x=n.x),n.y>t.max.y&&(t.max.y=n.y),n.y<t.min.y&&(t.min.y=n.y)}i&&(i.x>0?t.max.x+=i.x:t.min.x+=i.x,i.y>0?t.max.y+=i.y:t.min.y+=i.y)},r.contains=function(t,e){return e.x>=t.min.x&&e.x<=t.max.x&&e.y>=t.min.y&&e.y<=t.max.y},r.overlaps=function(t,e){return t.min.x<=e.max.x&&t.max.x>=e.min.x&&t.max.y>=e.min.y&&t.min.y<=e.max.y},r.translate=function(t,e){t.min.x+=e.x,t.max.x+=e.x,t.min.y+=e.y,t.max.y+=e.y},r.shift=function(t,e){var i=t.max.x-t.min.x,r=t.max.y-t.min.y;t.min.x=e.x,t.max.x=e.x+i,t.min.y=e.y,t.max.y=e.y+r}},{}],27:[function(t,e,i){var r={};e.exports=r;var n=(t("../geometry/Bounds"),t("../core/Common"));r.pathToVertices=function(t,e){"undefined"==typeof window||"SVGPathSeg"in window||n.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var i,o,s,a,h,l,u,c,d,p,f,m=[],y=0,v=0,g=0;e=e||15;var x=function(t,e,i){var r=i%2==1&&i>1;if(!d||t!=d.x||e!=d.y){d&&r?(p=d.x,f=d.y):(p=0,f=0);var n={x:p+t,y:f+e};!r&&d||(d=n),m.push(n),v=p+t,g=f+e}},b=function(t){var e=t.pathSegTypeAsLetter.toUpperCase();if("Z"!==e){switch(e){case"M":case"L":case"T":case"C":case"S":case"Q":v=t.x,g=t.y;break;case"H":v=t.x;break;case"V":g=t.y}x(v,g,t.pathSegType)}};for(r._svgPathToAbsolute(t),s=t.getTotalLength(),l=[],i=0;i<t.pathSegList.numberOfItems;i+=1)l.push(t.pathSegList.getItem(i));for(u=l.concat();y<s;){if((h=l[t.getPathSegAtLength(y)])!=c){for(;u.length&&u[0]!=h;)b(u.shift());c=h}switch(h.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":a=t.getPointAtLength(y),x(a.x,a.y,0)}y+=e}for(i=0,o=u.length;i<o;++i)b(u[i]);return m},r._svgPathToAbsolute=function(t){for(var e,i,r,n,o,s,a=t.pathSegList,h=0,l=0,u=a.numberOfItems,c=0;c<u;++c){var d=a.getItem(c),p=d.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(p))"x"in d&&(h=d.x),"y"in d&&(l=d.y);else switch("x1"in d&&(r=h+d.x1),"x2"in d&&(o=h+d.x2),"y1"in d&&(n=l+d.y1),"y2"in d&&(s=l+d.y2),"x"in d&&(h+=d.x),"y"in d&&(l+=d.y),p){case"m":a.replaceItem(t.createSVGPathSegMovetoAbs(h,l),c);break;case"l":a.replaceItem(t.createSVGPathSegLinetoAbs(h,l),c);break;case"h":a.replaceItem(t.createSVGPathSegLinetoHorizontalAbs(h),c);break;case"v":a.replaceItem(t.createSVGPathSegLinetoVerticalAbs(l),c);break;case"c":a.replaceItem(t.createSVGPathSegCurvetoCubicAbs(h,l,r,n,o,s),c);break;case"s":a.replaceItem(t.createSVGPathSegCurvetoCubicSmoothAbs(h,l,o,s),c);break;case"q":a.replaceItem(t.createSVGPathSegCurvetoQuadraticAbs(h,l,r,n),c);break;case"t":a.replaceItem(t.createSVGPathSegCurvetoQuadraticSmoothAbs(h,l),c);break;case"a":a.replaceItem(t.createSVGPathSegArcAbs(h,l,d.r1,d.r2,d.angle,d.largeArcFlag,d.sweepFlag),c);break;case"z":case"Z":h=e,l=i}"M"!=p&&"m"!=p||(e=h,i=l)}}},{"../core/Common":14,"../geometry/Bounds":26}],28:[function(t,e,i){var r={};e.exports=r,r.create=function(t,e){return{x:t||0,y:e||0}},r.clone=function(t){return{x:t.x,y:t.y}},r.magnitude=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},r.magnitudeSquared=function(t){return t.x*t.x+t.y*t.y},r.rotate=function(t,e,i){var r=Math.cos(e),n=Math.sin(e);i||(i={});var o=t.x*r-t.y*n;return i.y=t.x*n+t.y*r,i.x=o,i},r.rotateAbout=function(t,e,i,r){var n=Math.cos(e),o=Math.sin(e);r||(r={});var s=i.x+((t.x-i.x)*n-(t.y-i.y)*o);return r.y=i.y+((t.x-i.x)*o+(t.y-i.y)*n),r.x=s,r},r.normalise=function(t){var e=r.magnitude(t);return 0===e?{x:0,y:0}:{x:t.x/e,y:t.y/e}},r.dot=function(t,e){return t.x*e.x+t.y*e.y},r.cross=function(t,e){return t.x*e.y-t.y*e.x},r.cross3=function(t,e,i){return(e.x-t.x)*(i.y-t.y)-(e.y-t.y)*(i.x-t.x)},r.add=function(t,e,i){return i||(i={}),i.x=t.x+e.x,i.y=t.y+e.y,i},r.sub=function(t,e,i){return i||(i={}),i.x=t.x-e.x,i.y=t.y-e.y,i},r.mult=function(t,e){return{x:t.x*e,y:t.y*e}},r.div=function(t,e){return{x:t.x/e,y:t.y/e}},r.perp=function(t,e){return{x:(e=!0===e?-1:1)*-t.y,y:e*t.x}},r.neg=function(t){return{x:-t.x,y:-t.y}},r.angle=function(t,e){return Math.atan2(e.y-t.y,e.x-t.x)},r._temp=[r.create(),r.create(),r.create(),r.create(),r.create(),r.create()]},{}],29:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),o=t("../core/Common");r.create=function(t,e){for(var i=[],r=0;r<t.length;r++){var n=t[r],o={x:n.x,y:n.y,index:r,body:e,isInternal:!1};i.push(o)}return i},r.fromPath=function(t,e){var i=[];return t.replace(/L?\s*([\-\d\.e]+)[\s,]*([\-\d\.e]+)*/gi,(function(t,e,r){i.push({x:parseFloat(e),y:parseFloat(r)})})),r.create(i,e)},r.centre=function(t){for(var e,i,o,s=r.area(t,!0),a={x:0,y:0},h=0;h<t.length;h++)o=(h+1)%t.length,e=n.cross(t[h],t[o]),i=n.mult(n.add(t[h],t[o]),e),a=n.add(a,i);return n.div(a,6*s)},r.mean=function(t){for(var e={x:0,y:0},i=0;i<t.length;i++)e.x+=t[i].x,e.y+=t[i].y;return n.div(e,t.length)},r.area=function(t,e){for(var i=0,r=t.length-1,n=0;n<t.length;n++)i+=(t[r].x-t[n].x)*(t[r].y+t[n].y),r=n;return e?i/2:Math.abs(i)/2},r.inertia=function(t,e){for(var i,r,o=0,s=0,a=t,h=0;h<a.length;h++)r=(h+1)%a.length,o+=(i=Math.abs(n.cross(a[r],a[h])))*(n.dot(a[r],a[r])+n.dot(a[r],a[h])+n.dot(a[h],a[h])),s+=i;return e/6*(o/s)},r.translate=function(t,e,i){var r;if(i)for(r=0;r<t.length;r++)t[r].x+=e.x*i,t[r].y+=e.y*i;else for(r=0;r<t.length;r++)t[r].x+=e.x,t[r].y+=e.y;return t},r.rotate=function(t,e,i){if(0!==e){for(var r=Math.cos(e),n=Math.sin(e),o=0;o<t.length;o++){var s=t[o],a=s.x-i.x,h=s.y-i.y;s.x=i.x+(a*r-h*n),s.y=i.y+(a*n+h*r)}return t}},r.contains=function(t,e){for(var i=0;i<t.length;i++){var r=t[i],n=t[(i+1)%t.length];if((e.x-r.x)*(n.y-r.y)+(e.y-r.y)*(r.x-n.x)>0)return!1}return!0},r.scale=function(t,e,i,o){if(1===e&&1===i)return t;o=o||r.centre(t);for(var s,a,h=0;h<t.length;h++)s=t[h],a=n.sub(s,o),t[h].x=o.x+a.x*e,t[h].y=o.y+a.y*i;return t},r.chamfer=function(t,e,i,r,s){e="number"==typeof e?[e]:e||[8],i=void 0!==i?i:-1,r=r||2,s=s||14;for(var a=[],h=0;h<t.length;h++){var l=t[h-1>=0?h-1:t.length-1],u=t[h],c=t[(h+1)%t.length],d=e[h<e.length?h:e.length-1];if(0!==d){var p=n.normalise({x:u.y-l.y,y:l.x-u.x}),f=n.normalise({x:c.y-u.y,y:u.x-c.x}),m=Math.sqrt(2*Math.pow(d,2)),y=n.mult(o.clone(p),d),v=n.normalise(n.mult(n.add(p,f),.5)),g=n.sub(u,n.mult(v,m)),x=i;-1===i&&(x=1.75*Math.pow(d,.32)),(x=o.clamp(x,r,s))%2==1&&(x+=1);for(var b=Math.acos(n.dot(p,f))/x,w=0;w<x;w++)a.push(n.add(n.rotate(y,b*w),g))}else a.push(u)}return a},r.clockwiseSort=function(t){var e=r.mean(t);return t.sort((function(t,i){return n.angle(e,t)-n.angle(e,i)})),t},r.isConvex=function(t){var e,i,r,n,o=0,s=t.length;if(s<3)return null;for(e=0;e<s;e++)if(r=(e+2)%s,n=(t[i=(e+1)%s].x-t[e].x)*(t[r].y-t[i].y),(n-=(t[i].y-t[e].y)*(t[r].x-t[i].x))<0?o|=1:n>0&&(o|=2),3===o)return!1;return 0!==o||null},r.hull=function(t){var e,i,r=[],o=[];for((t=t.slice(0)).sort((function(t,e){var i=t.x-e.x;return 0!==i?i:t.y-e.y})),i=0;i<t.length;i+=1){for(e=t[i];o.length>=2&&n.cross3(o[o.length-2],o[o.length-1],e)<=0;)o.pop();o.push(e)}for(i=t.length-1;i>=0;i-=1){for(e=t[i];r.length>=2&&n.cross3(r[r.length-2],r[r.length-1],e)<=0;)r.pop();r.push(e)}return r.pop(),o.pop(),r.concat(o)}},{"../core/Common":14,"../geometry/Vector":28}],30:[function(t,e,i){var r=e.exports=t("../core/Matter");r.Body=t("../body/Body"),r.Composite=t("../body/Composite"),r.World=t("../body/World"),r.Contact=t("../collision/Contact"),r.Detector=t("../collision/Detector"),r.Grid=t("../collision/Grid"),r.Pairs=t("../collision/Pairs"),r.Pair=t("../collision/Pair"),r.Query=t("../collision/Query"),r.Resolver=t("../collision/Resolver"),r.SAT=t("../collision/SAT"),r.Constraint=t("../constraint/Constraint"),r.MouseConstraint=t("../constraint/MouseConstraint"),r.Common=t("../core/Common"),r.Engine=t("../core/Engine"),r.Events=t("../core/Events"),r.Mouse=t("../core/Mouse"),r.Runner=t("../core/Runner"),r.Sleeping=t("../core/Sleeping"),r.Plugin=t("../core/Plugin"),r.Bodies=t("../factory/Bodies"),r.Composites=t("../factory/Composites"),r.Axes=t("../geometry/Axes"),r.Bounds=t("../geometry/Bounds"),r.Svg=t("../geometry/Svg"),r.Vector=t("../geometry/Vector"),r.Vertices=t("../geometry/Vertices"),r.Render=t("../render/Render"),r.RenderPixi=t("../render/RenderPixi"),r.World.add=r.Composite.add,r.World.remove=r.Composite.remove,r.World.addComposite=r.Composite.addComposite,r.World.addBody=r.Composite.addBody,r.World.addConstraint=r.Composite.addConstraint,r.World.clear=r.Composite.clear,r.Engine.run=r.Runner.run},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Contact":4,"../collision/Detector":5,"../collision/Grid":6,"../collision/Pair":7,"../collision/Pairs":8,"../collision/Query":9,"../collision/Resolver":10,"../collision/SAT":11,"../constraint/Constraint":12,"../constraint/MouseConstraint":13,"../core/Common":14,"../core/Engine":15,"../core/Events":16,"../core/Matter":17,"../core/Metrics":18,"../core/Mouse":19,"../core/Plugin":20,"../core/Runner":21,"../core/Sleeping":22,"../factory/Bodies":23,"../factory/Composites":24,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Svg":27,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31,"../render/RenderPixi":32}],31:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Common"),o=t("../body/Composite"),s=t("../geometry/Bounds"),a=t("../core/Events"),h=t("../collision/Grid"),l=t("../geometry/Vector"),u=t("../core/Mouse");!function(){var t,e;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout((function(){t(n.now())}),1e3/60)},e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(t){var e={controller:r,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,options:{width:800,height:600,pixelRatio:1,background:"#18181d",wireframeBackground:"#0f0f13",hasBounds:!!t.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},o=n.extend(e,t);return o.canvas&&(o.canvas.width=o.options.width||o.canvas.width,o.canvas.height=o.options.height||o.canvas.height),o.mouse=t.mouse,o.engine=t.engine,o.canvas=o.canvas||i(o.options.width,o.options.height),o.context=o.canvas.getContext("2d"),o.textures={},o.bounds=o.bounds||{min:{x:0,y:0},max:{x:o.canvas.width,y:o.canvas.height}},1!==o.options.pixelRatio&&r.setPixelRatio(o,o.options.pixelRatio),n.isElement(o.element)?o.element.appendChild(o.canvas):o.canvas.parentNode||n.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),o},r.run=function(e){!function i(n){e.frameRequestId=t(i),r.world(e)}()},r.stop=function(t){e(t.frameRequestId)},r.setPixelRatio=function(t,e){var i=t.options,r=t.canvas;"auto"===e&&(e=c(r)),i.pixelRatio=e,r.setAttribute("data-pixel-ratio",e),r.width=i.width*e,r.height=i.height*e,r.style.width=i.width+"px",r.style.height=i.height+"px",t.context.scale(e,e)},r.lookAt=function(t,e,i,r){r=void 0===r||r,e=n.isArray(e)?e:[e],i=i||{x:0,y:0};for(var o={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},s=0;s<e.length;s+=1){var a=e[s],h=a.bounds?a.bounds.min:a.min||a.position||a,l=a.bounds?a.bounds.max:a.max||a.position||a;h&&l&&(h.x<o.min.x&&(o.min.x=h.x),l.x>o.max.x&&(o.max.x=l.x),h.y<o.min.y&&(o.min.y=h.y),l.y>o.max.y&&(o.max.y=l.y))}var c=o.max.x-o.min.x+2*i.x,d=o.max.y-o.min.y+2*i.y,p=t.canvas.height,f=t.canvas.width/p,m=c/d,y=1,v=1;m>f?v=m/f:y=f/m,t.options.hasBounds=!0,t.bounds.min.x=o.min.x,t.bounds.max.x=o.min.x+c*y,t.bounds.min.y=o.min.y,t.bounds.max.y=o.min.y+d*v,r&&(t.bounds.min.x+=.5*c-c*y*.5,t.bounds.max.x+=.5*c-c*y*.5,t.bounds.min.y+=.5*d-d*v*.5,t.bounds.max.y+=.5*d-d*v*.5),t.bounds.min.x-=i.x,t.bounds.max.x-=i.x,t.bounds.min.y-=i.y,t.bounds.max.y-=i.y,t.mouse&&(u.setScale(t.mouse,{x:(t.bounds.max.x-t.bounds.min.x)/t.canvas.width,y:(t.bounds.max.y-t.bounds.min.y)/t.canvas.height}),u.setOffset(t.mouse,t.bounds.min))},r.startViewTransform=function(t){var e=t.bounds.max.x-t.bounds.min.x,i=t.bounds.max.y-t.bounds.min.y,r=e/t.options.width,n=i/t.options.height;t.context.scale(1/r,1/n),t.context.translate(-t.bounds.min.x,-t.bounds.min.y)},r.endViewTransform=function(t){t.context.setTransform(t.options.pixelRatio,0,0,t.options.pixelRatio,0,0)},r.world=function(t){var e,i=t.engine,n=i.world,c=t.canvas,d=t.context,f=t.options,m=o.allBodies(n),y=o.allConstraints(n),v=f.wireframes?f.wireframeBackground:f.background,g=[],x=[],b={timestamp:i.timing.timestamp};if(a.trigger(t,"beforeRender",b),t.currentBackground!==v&&p(t,v),d.globalCompositeOperation="source-in",d.fillStyle="transparent",d.fillRect(0,0,c.width,c.height),d.globalCompositeOperation="source-over",f.hasBounds){for(e=0;e<m.length;e++){var w=m[e];s.overlaps(w.bounds,t.bounds)&&g.push(w)}for(e=0;e<y.length;e++){var _=y[e],S=_.bodyA,T=_.bodyB,C=_.pointA,I=_.pointB;S&&(C=l.add(S.position,_.pointA)),T&&(I=l.add(T.position,_.pointB)),C&&I&&(s.contains(t.bounds,C)||s.contains(t.bounds,I))&&x.push(_)}r.startViewTransform(t),t.mouse&&(u.setScale(t.mouse,{x:(t.bounds.max.x-t.bounds.min.x)/t.canvas.width,y:(t.bounds.max.y-t.bounds.min.y)/t.canvas.height}),u.setOffset(t.mouse,t.bounds.min))}else x=y,g=m;!f.wireframes||i.enableSleeping&&f.showSleeping?r.bodies(t,g,d):(f.showConvexHulls&&r.bodyConvexHulls(t,g,d),r.bodyWireframes(t,g,d)),f.showBounds&&r.bodyBounds(t,g,d),(f.showAxes||f.showAngleIndicator)&&r.bodyAxes(t,g,d),f.showPositions&&r.bodyPositions(t,g,d),f.showVelocity&&r.bodyVelocity(t,g,d),f.showIds&&r.bodyIds(t,g,d),f.showSeparations&&r.separations(t,i.pairs.list,d),f.showCollisions&&r.collisions(t,i.pairs.list,d),f.showVertexNumbers&&r.vertexNumbers(t,g,d),f.showMousePosition&&r.mousePosition(t,t.mouse,d),r.constraints(x,d),f.showBroadphase&&i.broadphase.controller===h&&r.grid(t,i.broadphase,d),f.showDebug&&r.debug(t,d),f.hasBounds&&r.endViewTransform(t),a.trigger(t,"afterRender",b)},r.debug=function(t,e){var i=e,r=t.engine,n=r.world,s=r.metrics,a=t.options;if(o.allBodies(n),r.timing.timestamp-(t.debugTimestamp||0)>=500){var h="";s.timing&&(h+="fps: "+Math.round(s.timing.fps)+"    "),t.debugString=h,t.debugTimestamp=r.timing.timestamp}if(t.debugString){i.font="12px Arial",a.wireframes?i.fillStyle="rgba(255,255,255,0.5)":i.fillStyle="rgba(0,0,0,0.5)";for(var l=t.debugString.split("\n"),u=0;u<l.length;u++)i.fillText(l[u],50,50+18*u)}},r.constraints=function(t,e){for(var i=e,r=0;r<t.length;r++){var o=t[r];if(o.render.visible&&o.pointA&&o.pointB){var s,a,h=o.bodyA,u=o.bodyB;if(s=h?l.add(h.position,o.pointA):o.pointA,"pin"===o.render.type)i.beginPath(),i.arc(s.x,s.y,3,0,2*Math.PI),i.closePath();else{if(a=u?l.add(u.position,o.pointB):o.pointB,i.beginPath(),i.moveTo(s.x,s.y),"spring"===o.render.type)for(var c,d=l.sub(a,s),p=l.perp(l.normalise(d)),f=Math.ceil(n.clamp(o.length/5,12,20)),m=1;m<f;m+=1)c=m%2==0?1:-1,i.lineTo(s.x+d.x*(m/f)+p.x*c*4,s.y+d.y*(m/f)+p.y*c*4);i.lineTo(a.x,a.y)}o.render.lineWidth&&(i.lineWidth=o.render.lineWidth,i.strokeStyle=o.render.strokeStyle,i.stroke()),o.render.anchors&&(i.fillStyle=o.render.strokeStyle,i.beginPath(),i.arc(s.x,s.y,3,0,2*Math.PI),i.arc(a.x,a.y,3,0,2*Math.PI),i.closePath(),i.fill())}}},r.bodyShadows=function(t,e,i){for(var r=i,n=(t.engine,0);n<e.length;n++){var o=e[n];if(o.render.visible){if(o.circleRadius)r.beginPath(),r.arc(o.position.x,o.position.y,o.circleRadius,0,2*Math.PI),r.closePath();else{r.beginPath(),r.moveTo(o.vertices[0].x,o.vertices[0].y);for(var s=1;s<o.vertices.length;s++)r.lineTo(o.vertices[s].x,o.vertices[s].y);r.closePath()}var a=o.position.x-.5*t.options.width,h=o.position.y-.2*t.options.height,l=Math.abs(a)+Math.abs(h);r.shadowColor="rgba(0,0,0,0.15)",r.shadowOffsetX=.05*a,r.shadowOffsetY=.05*h,r.shadowBlur=1+12*Math.min(1,l/1e3),r.fill(),r.shadowColor=null,r.shadowOffsetX=null,r.shadowOffsetY=null,r.shadowBlur=null}}},r.bodies=function(t,e,i){var r,n,o,s,a=i,h=(t.engine,t.options),l=h.showInternalEdges||!h.wireframes;for(o=0;o<e.length;o++)if((r=e[o]).render.visible)for(s=r.parts.length>1?1:0;s<r.parts.length;s++)if((n=r.parts[s]).render.visible){if(h.showSleeping&&r.isSleeping?a.globalAlpha=.5*n.render.opacity:1!==n.render.opacity&&(a.globalAlpha=n.render.opacity),n.render.sprite&&n.render.sprite.texture&&!h.wireframes){var u=n.render.sprite,c=d(t,u.texture);a.translate(n.position.x,n.position.y),a.rotate(n.angle),a.drawImage(c,c.width*-u.xOffset*u.xScale,c.height*-u.yOffset*u.yScale,c.width*u.xScale,c.height*u.yScale),a.rotate(-n.angle),a.translate(-n.position.x,-n.position.y)}else{if(n.circleRadius)a.beginPath(),a.arc(n.position.x,n.position.y,n.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(n.vertices[0].x,n.vertices[0].y);for(var p=1;p<n.vertices.length;p++)!n.vertices[p-1].isInternal||l?a.lineTo(n.vertices[p].x,n.vertices[p].y):a.moveTo(n.vertices[p].x,n.vertices[p].y),n.vertices[p].isInternal&&!l&&a.moveTo(n.vertices[(p+1)%n.vertices.length].x,n.vertices[(p+1)%n.vertices.length].y);a.lineTo(n.vertices[0].x,n.vertices[0].y),a.closePath()}h.wireframes?(a.lineWidth=1,a.strokeStyle="#bbb",a.stroke()):(a.fillStyle=n.render.fillStyle,n.render.lineWidth&&(a.lineWidth=n.render.lineWidth,a.strokeStyle=n.render.strokeStyle,a.stroke()),a.fill())}a.globalAlpha=1}},r.bodyWireframes=function(t,e,i){var r,n,o,s,a,h=i,l=t.options.showInternalEdges;for(h.beginPath(),o=0;o<e.length;o++)if((r=e[o]).render.visible)for(a=r.parts.length>1?1:0;a<r.parts.length;a++){for(n=r.parts[a],h.moveTo(n.vertices[0].x,n.vertices[0].y),s=1;s<n.vertices.length;s++)!n.vertices[s-1].isInternal||l?h.lineTo(n.vertices[s].x,n.vertices[s].y):h.moveTo(n.vertices[s].x,n.vertices[s].y),n.vertices[s].isInternal&&!l&&h.moveTo(n.vertices[(s+1)%n.vertices.length].x,n.vertices[(s+1)%n.vertices.length].y);h.lineTo(n.vertices[0].x,n.vertices[0].y)}h.lineWidth=1,h.strokeStyle="#bbb",h.stroke()},r.bodyConvexHulls=function(t,e,i){var r,n,o,s=i;for(s.beginPath(),n=0;n<e.length;n++)if((r=e[n]).render.visible&&1!==r.parts.length){for(s.moveTo(r.vertices[0].x,r.vertices[0].y),o=1;o<r.vertices.length;o++)s.lineTo(r.vertices[o].x,r.vertices[o].y);s.lineTo(r.vertices[0].x,r.vertices[0].y)}s.lineWidth=1,s.strokeStyle="rgba(255,255,255,0.2)",s.stroke()},r.vertexNumbers=function(t,e,i){var r,n,o,s=i;for(r=0;r<e.length;r++){var a=e[r].parts;for(o=a.length>1?1:0;o<a.length;o++){var h=a[o];for(n=0;n<h.vertices.length;n++)s.fillStyle="rgba(255,255,255,0.2)",s.fillText(r+"_"+n,h.position.x+.8*(h.vertices[n].x-h.position.x),h.position.y+.8*(h.vertices[n].y-h.position.y))}}},r.mousePosition=function(t,e,i){var r=i;r.fillStyle="rgba(255,255,255,0.8)",r.fillText(e.position.x+"  "+e.position.y,e.position.x+5,e.position.y-5)},r.bodyBounds=function(t,e,i){var r=i,n=(t.engine,t.options);r.beginPath();for(var o=0;o<e.length;o++)if(e[o].render.visible)for(var s=e[o].parts,a=s.length>1?1:0;a<s.length;a++){var h=s[a];r.rect(h.bounds.min.x,h.bounds.min.y,h.bounds.max.x-h.bounds.min.x,h.bounds.max.y-h.bounds.min.y)}n.wireframes?r.strokeStyle="rgba(255,255,255,0.08)":r.strokeStyle="rgba(0,0,0,0.1)",r.lineWidth=1,r.stroke()},r.bodyAxes=function(t,e,i){var r,n,o,s,a=i,h=(t.engine,t.options);for(a.beginPath(),n=0;n<e.length;n++){var l=e[n],u=l.parts;if(l.render.visible)if(h.showAxes)for(o=u.length>1?1:0;o<u.length;o++)for(r=u[o],s=0;s<r.axes.length;s++){var c=r.axes[s];a.moveTo(r.position.x,r.position.y),a.lineTo(r.position.x+20*c.x,r.position.y+20*c.y)}else for(o=u.length>1?1:0;o<u.length;o++)for(r=u[o],s=0;s<r.axes.length;s++)a.moveTo(r.position.x,r.position.y),a.lineTo((r.vertices[0].x+r.vertices[r.vertices.length-1].x)/2,(r.vertices[0].y+r.vertices[r.vertices.length-1].y)/2)}h.wireframes?(a.strokeStyle="indianred",a.lineWidth=1):(a.strokeStyle="rgba(255, 255, 255, 0.4)",a.globalCompositeOperation="overlay",a.lineWidth=2),a.stroke(),a.globalCompositeOperation="source-over"},r.bodyPositions=function(t,e,i){var r,n,o,s,a=i,h=(t.engine,t.options);for(a.beginPath(),o=0;o<e.length;o++)if((r=e[o]).render.visible)for(s=0;s<r.parts.length;s++)n=r.parts[s],a.arc(n.position.x,n.position.y,3,0,2*Math.PI,!1),a.closePath();for(h.wireframes?a.fillStyle="indianred":a.fillStyle="rgba(0,0,0,0.5)",a.fill(),a.beginPath(),o=0;o<e.length;o++)(r=e[o]).render.visible&&(a.arc(r.positionPrev.x,r.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle="rgba(255,165,0,0.8)",a.fill()},r.bodyVelocity=function(t,e,i){var r=i;r.beginPath();for(var n=0;n<e.length;n++){var o=e[n];o.render.visible&&(r.moveTo(o.position.x,o.position.y),r.lineTo(o.position.x+2*(o.position.x-o.positionPrev.x),o.position.y+2*(o.position.y-o.positionPrev.y)))}r.lineWidth=3,r.strokeStyle="cornflowerblue",r.stroke()},r.bodyIds=function(t,e,i){var r,n,o=i;for(r=0;r<e.length;r++)if(e[r].render.visible){var s=e[r].parts;for(n=s.length>1?1:0;n<s.length;n++){var a=s[n];o.font="12px Arial",o.fillStyle="rgba(255,255,255,0.5)",o.fillText(a.id,a.position.x+10,a.position.y-10)}}},r.collisions=function(t,e,i){var r,n,o,s,a=i,h=t.options;for(a.beginPath(),o=0;o<e.length;o++)if((r=e[o]).isActive)for(n=r.collision,s=0;s<r.activeContacts.length;s++){var l=r.activeContacts[s].vertex;a.rect(l.x-1.5,l.y-1.5,3.5,3.5)}for(h.wireframes?a.fillStyle="rgba(255,255,255,0.7)":a.fillStyle="orange",a.fill(),a.beginPath(),o=0;o<e.length;o++)if((r=e[o]).isActive&&(n=r.collision,r.activeContacts.length>0)){var u=r.activeContacts[0].vertex.x,c=r.activeContacts[0].vertex.y;2===r.activeContacts.length&&(u=(r.activeContacts[0].vertex.x+r.activeContacts[1].vertex.x)/2,c=(r.activeContacts[0].vertex.y+r.activeContacts[1].vertex.y)/2),n.bodyB===n.supports[0].body||!0===n.bodyA.isStatic?a.moveTo(u-8*n.normal.x,c-8*n.normal.y):a.moveTo(u+8*n.normal.x,c+8*n.normal.y),a.lineTo(u,c)}h.wireframes?a.strokeStyle="rgba(255,165,0,0.7)":a.strokeStyle="orange",a.lineWidth=1,a.stroke()},r.separations=function(t,e,i){var r,n,o,s,a,h=i,l=t.options;for(h.beginPath(),a=0;a<e.length;a++)if((r=e[a]).isActive){o=(n=r.collision).bodyA;var u=1;(s=n.bodyB).isStatic||o.isStatic||(u=.5),s.isStatic&&(u=0),h.moveTo(s.position.x,s.position.y),h.lineTo(s.position.x-n.penetration.x*u,s.position.y-n.penetration.y*u),u=1,s.isStatic||o.isStatic||(u=.5),o.isStatic&&(u=0),h.moveTo(o.position.x,o.position.y),h.lineTo(o.position.x+n.penetration.x*u,o.position.y+n.penetration.y*u)}l.wireframes?h.strokeStyle="rgba(255,165,0,0.5)":h.strokeStyle="orange",h.stroke()},r.grid=function(t,e,i){var r=i;t.options.wireframes?r.strokeStyle="rgba(255,180,0,0.1)":r.strokeStyle="rgba(255,180,0,0.5)",r.beginPath();for(var o=n.keys(e.buckets),s=0;s<o.length;s++){var a=o[s];if(!(e.buckets[a].length<2)){var h=a.split(/C|R/);r.rect(.5+parseInt(h[1],10)*e.bucketWidth,.5+parseInt(h[2],10)*e.bucketHeight,e.bucketWidth,e.bucketHeight)}}r.lineWidth=1,r.stroke()},r.inspector=function(t,e){var i,r=(t.engine,t.selected),n=t.render,o=n.options;if(o.hasBounds){var s=n.bounds.max.x-n.bounds.min.x,a=n.bounds.max.y-n.bounds.min.y,h=s/n.options.width,l=a/n.options.height;e.scale(1/h,1/l),e.translate(-n.bounds.min.x,-n.bounds.min.y)}for(var u=0;u<r.length;u++){var c=r[u].data;switch(e.translate(.5,.5),e.lineWidth=1,e.strokeStyle="rgba(255,165,0,0.9)",e.setLineDash([1,2]),c.type){case"body":i=c.bounds,e.beginPath(),e.rect(Math.floor(i.min.x-3),Math.floor(i.min.y-3),Math.floor(i.max.x-i.min.x+6),Math.floor(i.max.y-i.min.y+6)),e.closePath(),e.stroke();break;case"constraint":var d=c.pointA;c.bodyA&&(d=c.pointB),e.beginPath(),e.arc(d.x,d.y,10,0,2*Math.PI),e.closePath(),e.stroke()}e.setLineDash([]),e.translate(-.5,-.5)}null!==t.selectStart&&(e.translate(.5,.5),e.lineWidth=1,e.strokeStyle="rgba(255,165,0,0.6)",e.fillStyle="rgba(255,165,0,0.1)",i=t.selectBounds,e.beginPath(),e.rect(Math.floor(i.min.x),Math.floor(i.min.y),Math.floor(i.max.x-i.min.x),Math.floor(i.max.y-i.min.y)),e.closePath(),e.stroke(),e.fill(),e.translate(-.5,-.5)),o.hasBounds&&e.setTransform(1,0,0,1,0,0)};var i=function(t,e){var i=document.createElement("canvas");return i.width=t,i.height=e,i.oncontextmenu=function(){return!1},i.onselectstart=function(){return!1},i},c=function(t){var e=t.getContext("2d");return(window.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1)},d=function(t,e){var i=t.textures[e];return i||((i=t.textures[e]=new Image).src=e,i)},p=function(t,e){var i=e;/(jpg|gif|png)$/.test(e)&&(i="url("+e+")"),t.canvas.style.background=i,t.canvas.style.backgroundSize="contain",t.currentBackground=e}}()},{"../body/Composite":2,"../collision/Grid":6,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../geometry/Bounds":26,"../geometry/Vector":28}],32:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Bounds"),o=t("../body/Composite"),s=t("../core/Common"),a=t("../core/Events"),h=t("../geometry/Vector");!function(){var t,e;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout((function(){t(s.now())}),1e3/60)},e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(t){s.warn("RenderPixi.create: Matter.RenderPixi is deprecated (see docs)");var e={controller:r,engine:null,element:null,frameRequestId:null,canvas:null,renderer:null,container:null,spriteContainer:null,pixiOptions:null,options:{width:800,height:600,background:"#fafafa",wireframeBackground:"#222",hasBounds:!1,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1}},i=s.extend(e,t),n=!i.options.wireframes&&"transparent"===i.options.background;return i.pixiOptions=i.pixiOptions||{view:i.canvas,transparent:n,antialias:!0,backgroundColor:t.background},i.mouse=t.mouse,i.engine=t.engine,i.renderer=i.renderer||new PIXI.WebGLRenderer(i.options.width,i.options.height,i.pixiOptions),i.container=i.container||new PIXI.Container,i.spriteContainer=i.spriteContainer||new PIXI.Container,i.canvas=i.canvas||i.renderer.view,i.bounds=i.bounds||{min:{x:0,y:0},max:{x:i.options.width,y:i.options.height}},a.on(i.engine,"beforeUpdate",(function(){r.clear(i)})),i.textures={},i.sprites={},i.primitives={},i.container.addChild(i.spriteContainer),s.isElement(i.element)?i.element.appendChild(i.canvas):s.warn('No "render.element" passed, "render.canvas" was not inserted into document.'),i.canvas.oncontextmenu=function(){return!1},i.canvas.onselectstart=function(){return!1},i},r.run=function(e){!function i(n){e.frameRequestId=t(i),r.world(e)}()},r.stop=function(t){e(t.frameRequestId)},r.clear=function(t){for(var e=t.container,i=t.spriteContainer;e.children[0];)e.removeChild(e.children[0]);for(;i.children[0];)i.removeChild(i.children[0]);var r=t.sprites["bg-0"];t.textures={},t.sprites={},t.primitives={},t.sprites["bg-0"]=r,r&&e.addChildAt(r,0),t.container.addChild(t.spriteContainer),t.currentBackground=null,e.scale.set(1,1),e.position.set(0,0)},r.setBackground=function(t,e){if(t.currentBackground!==e){var i=e.indexOf&&-1!==e.indexOf("#"),r=t.sprites["bg-0"];if(i){var n=s.colorToNumber(e);t.renderer.backgroundColor=n,r&&t.container.removeChild(r)}else if(!r){var o=u(t,e);(r=t.sprites["bg-0"]=new PIXI.Sprite(o)).position.x=0,r.position.y=0,t.container.addChildAt(r,0)}t.currentBackground=e}},r.world=function(t){var e,i=t.engine.world,s=t.renderer,a=t.container,l=t.options,u=o.allBodies(i),c=o.allConstraints(i),d=[];l.wireframes?r.setBackground(t,l.wireframeBackground):r.setBackground(t,l.background);var p=t.bounds.max.x-t.bounds.min.x,f=t.bounds.max.y-t.bounds.min.y,m=p/t.options.width,y=f/t.options.height;if(l.hasBounds){for(e=0;e<u.length;e++){var v=u[e];v.render.sprite.visible=n.overlaps(v.bounds,t.bounds)}for(e=0;e<c.length;e++){var g=c[e],x=g.bodyA,b=g.bodyB,w=g.pointA,_=g.pointB;x&&(w=h.add(x.position,g.pointA)),b&&(_=h.add(b.position,g.pointB)),w&&_&&(n.contains(t.bounds,w)||n.contains(t.bounds,_))&&d.push(g)}a.scale.set(1/m,1/y),a.position.set(-t.bounds.min.x*(1/m),-t.bounds.min.y*(1/y))}else d=c;for(e=0;e<u.length;e++)r.body(t,u[e]);for(e=0;e<d.length;e++)r.constraint(t,d[e]);s.render(a)},r.constraint=function(t,e){var i=(t.engine,e.bodyA),r=e.bodyB,n=e.pointA,o=e.pointB,a=t.container,h=e.render,l="c-"+e.id,u=t.primitives[l];u||(u=t.primitives[l]=new PIXI.Graphics),h.visible&&e.pointA&&e.pointB?(-1===s.indexOf(a.children,u)&&a.addChild(u),u.clear(),u.beginFill(0,0),u.lineStyle(h.lineWidth,s.colorToNumber(h.strokeStyle),1),i?u.moveTo(i.position.x+n.x,i.position.y+n.y):u.moveTo(n.x,n.y),r?u.lineTo(r.position.x+o.x,r.position.y+o.y):u.lineTo(o.x,o.y),u.endFill()):u.clear()},r.body=function(t,e){var r=(t.engine,e.render);if(r.visible)if(r.sprite&&r.sprite.texture){var n="b-"+e.id,o=t.sprites[n],a=t.spriteContainer;o||(o=t.sprites[n]=i(t,e)),-1===s.indexOf(a.children,o)&&a.addChild(o),o.position.x=e.position.x,o.position.y=e.position.y,o.rotation=e.angle,o.scale.x=r.sprite.xScale||1,o.scale.y=r.sprite.yScale||1}else{var h="b-"+e.id,u=t.primitives[h],c=t.container;u||((u=t.primitives[h]=l(t,e)).initialAngle=e.angle),-1===s.indexOf(c.children,u)&&c.addChild(u),u.position.x=e.position.x,u.position.y=e.position.y,u.rotation=e.angle-u.initialAngle}};var i=function(t,e){var i=e.render.sprite.texture,r=u(t,i),n=new PIXI.Sprite(r);return n.anchor.x=e.render.sprite.xOffset,n.anchor.y=e.render.sprite.yOffset,n},l=function(t,e){var i,r=e.render,n=t.options,o=new PIXI.Graphics,a=s.colorToNumber(r.fillStyle),h=s.colorToNumber(r.strokeStyle),l=s.colorToNumber(r.strokeStyle),u=s.colorToNumber("#bbb"),c=s.colorToNumber("#CD5C5C");o.clear();for(var d=e.parts.length>1?1:0;d<e.parts.length;d++){i=e.parts[d],n.wireframes?(o.beginFill(0,0),o.lineStyle(1,u,1)):(o.beginFill(a,1),o.lineStyle(r.lineWidth,h,1)),o.moveTo(i.vertices[0].x-e.position.x,i.vertices[0].y-e.position.y);for(var p=1;p<i.vertices.length;p++)o.lineTo(i.vertices[p].x-e.position.x,i.vertices[p].y-e.position.y);o.lineTo(i.vertices[0].x-e.position.x,i.vertices[0].y-e.position.y),o.endFill(),(n.showAngleIndicator||n.showAxes)&&(o.beginFill(0,0),n.wireframes?o.lineStyle(1,c,1):o.lineStyle(1,l),o.moveTo(i.position.x-e.position.x,i.position.y-e.position.y),o.lineTo((i.vertices[0].x+i.vertices[i.vertices.length-1].x)/2-e.position.x,(i.vertices[0].y+i.vertices[i.vertices.length-1].y)/2-e.position.y),o.endFill())}return o},u=function(t,e){var i=t.textures[e];return i||(i=t.textures[e]=PIXI.Texture.fromImage(e)),i}}()},{"../body/Composite":2,"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"../geometry/Vector":28}]},{},[30])(30)}).call(this,i(4))},function(t,e,i){var r,n,o;!function(i){var s=/iPhone/i,a=/iPod/i,h=/iPad/i,l=/\bAndroid(?:.+)Mobile\b/i,u=/Android/i,c=/\bAndroid(?:.+)SD4930UR\b/i,d=/\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i,p=/Windows Phone/i,f=/\bWindows(?:.+)ARM\b/i,m=/BlackBerry/i,y=/BB10/i,v=/Opera Mini/i,g=/\b(CriOS|Chrome)(?:.+)Mobile/i,x=/Mobile(?:.+)Firefox\b/i;function b(t,e){return t.test(e)}function w(t){var e=t||("undefined"!=typeof navigator?navigator.userAgent:""),i=e.split("[FBAN");void 0!==i[1]&&(e=i[0]),void 0!==(i=e.split("Twitter"))[1]&&(e=i[0]);var r={apple:{phone:b(s,e)&&!b(p,e),ipod:b(a,e),tablet:!b(s,e)&&b(h,e)&&!b(p,e),device:(b(s,e)||b(a,e)||b(h,e))&&!b(p,e)},amazon:{phone:b(c,e),tablet:!b(c,e)&&b(d,e),device:b(c,e)||b(d,e)},android:{phone:!b(p,e)&&b(c,e)||!b(p,e)&&b(l,e),tablet:!b(p,e)&&!b(c,e)&&!b(l,e)&&(b(d,e)||b(u,e)),device:!b(p,e)&&(b(c,e)||b(d,e)||b(l,e)||b(u,e))||b(/\bokhttp\b/i,e)},windows:{phone:b(p,e),tablet:b(f,e),device:b(p,e)||b(f,e)},other:{blackberry:b(m,e),blackberry10:b(y,e),opera:b(v,e),firefox:b(x,e),chrome:b(g,e),device:b(m,e)||b(y,e)||b(v,e)||b(x,e)||b(g,e)}};return r.any=r.apple.device||r.android.device||r.windows.device||r.other.device,r.phone=r.apple.phone||r.android.phone||r.windows.phone,r.tablet=r.apple.tablet||r.android.tablet||r.windows.tablet,r}t.exports&&"undefined"==typeof window?t.exports=w:t.exports&&"undefined"!=typeof window?(t.exports=w(),t.exports.isMobile=w):(n=[],r=i.isMobile=w(),void 0===(o="function"==typeof r?r.apply(e,n):r)||(t.exports=o))}(this)},function(t,e,i){"use strict";var r=i(8),n=i(10);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=x,e.resolve=function(t,e){return x(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?x(t,!1,!0).resolveObject(e):e},e.format=function(t){n.isString(t)&&(t=x(t));return t instanceof o?t.format():o.prototype.format.call(t)},e.Url=o;var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,h=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(l),c=["%","/","?",";","#"].concat(u),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},y={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},g=i(11);function x(t,e,i){if(t&&n.isObject(t)&&t instanceof o)return t;var r=new o;return r.parse(t,e,i),r}o.prototype.parse=function(t,e,i){if(!n.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var o=t.indexOf("?"),a=-1!==o&&o<t.indexOf("#")?"?":"#",l=t.split(a);l[0]=l[0].replace(/\\/g,"/");var x=t=l.join(a);if(x=x.trim(),!i&&1===t.split("#").length){var b=h.exec(x);if(b)return this.path=x,this.href=x,this.pathname=b[1],b[2]?(this.search=b[2],this.query=e?g.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var w=s.exec(x);if(w){var _=(w=w[0]).toLowerCase();this.protocol=_,x=x.substr(w.length)}if(i||w||x.match(/^\/\/[^@\/]+@[^@\/]+/)){var S="//"===x.substr(0,2);!S||w&&y[w]||(x=x.substr(2),this.slashes=!0)}if(!y[w]&&(S||w&&!v[w])){for(var T,C,I=-1,E=0;E<d.length;E++){-1!==(A=x.indexOf(d[E]))&&(-1===I||A<I)&&(I=A)}-1!==(C=-1===I?x.lastIndexOf("@"):x.lastIndexOf("@",I))&&(T=x.slice(0,C),x=x.slice(C+1),this.auth=decodeURIComponent(T)),I=-1;for(E=0;E<c.length;E++){var A;-1!==(A=x.indexOf(c[E]))&&(-1===I||A<I)&&(I=A)}-1===I&&(I=x.length),this.host=x.slice(0,I),x=x.slice(I),this.parseHost(),this.hostname=this.hostname||"";var P="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!P)for(var M=this.hostname.split(/\./),O=(E=0,M.length);E<O;E++){var k=M[E];if(k&&!k.match(p)){for(var B="",R=0,D=k.length;R<D;R++)k.charCodeAt(R)>127?B+="x":B+=k[R];if(!B.match(p)){var F=M.slice(0,E),L=M.slice(E+1),N=k.match(f);N&&(F.push(N[1]),L.unshift(N[2])),L.length&&(x="/"+L.join(".")+x),this.hostname=F.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),P||(this.hostname=r.toASCII(this.hostname));var U=this.port?":"+this.port:"",V=this.hostname||"";this.host=V+U,this.href+=this.host,P&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==x[0]&&(x="/"+x))}if(!m[_])for(E=0,O=u.length;E<O;E++){var X=u[E];if(-1!==x.indexOf(X)){var j=encodeURIComponent(X);j===X&&(j=escape(X)),x=x.split(X).join(j)}}var z=x.indexOf("#");-1!==z&&(this.hash=x.substr(z),x=x.slice(0,z));var G=x.indexOf("?");if(-1!==G?(this.search=x.substr(G),this.query=x.substr(G+1),e&&(this.query=g.parse(this.query)),x=x.slice(0,G)):e&&(this.search="",this.query={}),x&&(this.pathname=x),v[_]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){U=this.pathname||"";var H=this.search||"";this.path=U+H}return this.href=this.format(),this},o.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",i=this.pathname||"",r=this.hash||"",o=!1,s="";this.host?o=t+this.host:this.hostname&&(o=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&n.isObject(this.query)&&Object.keys(this.query).length&&(s=g.stringify(this.query));var a=this.search||s&&"?"+s||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||v[e])&&!1!==o?(o="//"+(o||""),i&&"/"!==i.charAt(0)&&(i="/"+i)):o||(o=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),e+o+(i=i.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(a=a.replace("#","%23"))+r},o.prototype.resolve=function(t){return this.resolveObject(x(t,!1,!0)).format()},o.prototype.resolveObject=function(t){if(n.isString(t)){var e=new o;e.parse(t,!1,!0),t=e}for(var i=new o,r=Object.keys(this),s=0;s<r.length;s++){var a=r[s];i[a]=this[a]}if(i.hash=t.hash,""===t.href)return i.href=i.format(),i;if(t.slashes&&!t.protocol){for(var h=Object.keys(t),l=0;l<h.length;l++){var u=h[l];"protocol"!==u&&(i[u]=t[u])}return v[i.protocol]&&i.hostname&&!i.pathname&&(i.path=i.pathname="/"),i.href=i.format(),i}if(t.protocol&&t.protocol!==i.protocol){if(!v[t.protocol]){for(var c=Object.keys(t),d=0;d<c.length;d++){var p=c[d];i[p]=t[p]}return i.href=i.format(),i}if(i.protocol=t.protocol,t.host||y[t.protocol])i.pathname=t.pathname;else{for(var f=(t.pathname||"").split("/");f.length&&!(t.host=f.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),i.pathname=f.join("/")}if(i.search=t.search,i.query=t.query,i.host=t.host||"",i.auth=t.auth,i.hostname=t.hostname||t.host,i.port=t.port,i.pathname||i.search){var m=i.pathname||"",g=i.search||"";i.path=m+g}return i.slashes=i.slashes||t.slashes,i.href=i.format(),i}var x=i.pathname&&"/"===i.pathname.charAt(0),b=t.host||t.pathname&&"/"===t.pathname.charAt(0),w=b||x||i.host&&t.pathname,_=w,S=i.pathname&&i.pathname.split("/")||[],T=(f=t.pathname&&t.pathname.split("/")||[],i.protocol&&!v[i.protocol]);if(T&&(i.hostname="",i.port=null,i.host&&(""===S[0]?S[0]=i.host:S.unshift(i.host)),i.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===f[0]?f[0]=t.host:f.unshift(t.host)),t.host=null),w=w&&(""===f[0]||""===S[0])),b)i.host=t.host||""===t.host?t.host:i.host,i.hostname=t.hostname||""===t.hostname?t.hostname:i.hostname,i.search=t.search,i.query=t.query,S=f;else if(f.length)S||(S=[]),S.pop(),S=S.concat(f),i.search=t.search,i.query=t.query;else if(!n.isNullOrUndefined(t.search)){if(T)i.hostname=i.host=S.shift(),(P=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=P.shift(),i.host=i.hostname=P.shift());return i.search=t.search,i.query=t.query,n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.href=i.format(),i}if(!S.length)return i.pathname=null,i.search?i.path="/"+i.search:i.path=null,i.href=i.format(),i;for(var C=S.slice(-1)[0],I=(i.host||t.host||S.length>1)&&("."===C||".."===C)||""===C,E=0,A=S.length;A>=0;A--)"."===(C=S[A])?S.splice(A,1):".."===C?(S.splice(A,1),E++):E&&(S.splice(A,1),E--);if(!w&&!_)for(;E--;E)S.unshift("..");!w||""===S[0]||S[0]&&"/"===S[0].charAt(0)||S.unshift(""),I&&"/"!==S.join("/").substr(-1)&&S.push("");var P,M=""===S[0]||S[0]&&"/"===S[0].charAt(0);T&&(i.hostname=i.host=M?"":S.length?S.shift():"",(P=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=P.shift(),i.host=i.hostname=P.shift()));return(w=w||i.host&&S.length)&&!M&&S.unshift(""),S.length?i.pathname=S.join("/"):(i.pathname=null,i.path=null),n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.auth=t.auth||i.auth,i.slashes=i.slashes||t.slashes,i.href=i.format(),i},o.prototype.parseHost=function(){var t=this.host,e=a.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(14);function n(t,e,i){return{dx:-e-t*r.SQUISH_2D,dy:-i-t*r.SQUISH_2D,xsb:e,ysb:i}}function o(t,e,i,n){return{dx:-e-t*r.SQUISH_3D,dy:-i-t*r.SQUISH_3D,dz:-n-t*r.SQUISH_3D,xsb:e,ysb:i,zsb:n}}function s(t,e,i,n,o){return{dx:-e-t*r.SQUISH_4D,dy:-i-t*r.SQUISH_4D,dz:-n-t*r.SQUISH_4D,dw:-o-t*r.SQUISH_4D,xsb:e,ysb:i,zsb:n,wsb:o}}function a(t){var e=new Uint32Array(1);return e[0]=1664525*t[0]+1013904223,e}e.makeNoise2D=function(t){for(var e=[],i=0;i<r.p2D.length;i+=4){for(var o=r.base2D[r.p2D[i]],s=null,h=null,l=0;l<o.length;l+=3)h=n(o[l],o[l+1],o[l+2]),null===s?e[i/4]=h:s.next=h,s=h;h.next=n(r.p2D[i+1],r.p2D[i+2],r.p2D[i+3])}var u=[];for(i=0;i<r.lookupPairs2D.length;i+=2)u[r.lookupPairs2D[i]]=e[r.lookupPairs2D[i+1]];var c=new Uint8Array(256),d=new Uint8Array(256),p=new Uint8Array(256);for(i=0;i<256;i++)p[i]=i;var f=new Uint32Array(1);for(f[0]=t,f=a(a(a(f))),i=255;i>=0;i--){f=a(f);var m=new Uint32Array(1);m[0]=(f[0]+31)%(i+1),m[0]<0&&(m[0]+=i+1),c[i]=p[m[0]],d[i]=14&c[i],p[m[0]]=p[i]}return function(t,e){for(var i=(t+e)*r.STRETCH_2D,n=t+i,o=e+i,s=Math.floor(n),a=Math.floor(o),h=(s+a)*r.SQUISH_2D,l=t-(s+h),p=e-(a+h),f=n-s,m=o-a,y=f+m,v=0,g=u[f-m+1|y<<1|y+m<<2|y+f<<4];void 0!==g;g=g.next){var x=l+g.dx,b=p+g.dy,w=2-x*x-b*b;if(w>0){var _=s+g.xsb,S=a+g.ysb,T=c[255&_],C=d[T+S&255];v+=w*w*w*w*(r.gradients2D[C]*x+r.gradients2D[C+1]*b)}}return v*r.NORM_2D}},e.makeNoise3D=function(t){for(var e=[],i=0;i<r.p3D.length;i+=9){for(var n=r.base3D[r.p3D[i]],s=null,h=null,l=0;l<n.length;l+=4)h=o(n[l],n[l+1],n[l+2],n[l+3]),null===s?e[i/9]=h:s.next=h,s=h;h.next=o(r.p3D[i+1],r.p3D[i+2],r.p3D[i+3],r.p3D[i+4]),h.next.next=o(r.p3D[i+5],r.p3D[i+6],r.p3D[i+7],r.p3D[i+8])}var u=[];for(i=0;i<r.lookupPairs3D.length;i+=2)u[r.lookupPairs3D[i]]=e[r.lookupPairs3D[i+1]];var c=new Uint8Array(256),d=new Uint8Array(256),p=new Uint8Array(256);for(i=0;i<256;i++)p[i]=i;var f=new Uint32Array(1);for(f[0]=t,f=a(a(a(f))),i=255;i>=0;i--){f=a(f);var m=new Uint32Array(1);m[0]=(f[0]+31)%(i+1),m[0]<0&&(m[0]+=i+1),c[i]=p[m[0]],d[i]=c[i]%24*3,p[m[0]]=p[i]}return function(t,e,i){for(var n=(t+e+i)*r.STRETCH_3D,o=t+n,s=e+n,a=i+n,h=Math.floor(o),l=Math.floor(s),p=Math.floor(a),f=(h+l+p)*r.SQUISH_3D,m=t-(h+f),y=e-(l+f),v=i-(p+f),g=o-h,x=s-l,b=a-p,w=g+x+b,_=0,S=u[x-b+1|g-x+1<<1|g-b+1<<2|w<<3|w+b<<5|w+x<<7|w+g<<9];void 0!==S;S=S.next){var T=m+S.dx,C=y+S.dy,I=v+S.dz,E=2-T*T-C*C-I*I;if(E>0){var A=h+S.xsb,P=l+S.ysb,M=p+S.zsb,O=c[255&A],k=c[O+P&255],B=d[k+M&255];_+=E*E*E*E*(r.gradients3D[B]*T+r.gradients3D[B+1]*C+r.gradients3D[B+2]*I)}}return _*r.NORM_3D}},e.makeNoise4D=function(t){for(var e=[],i=0;i<r.p4D.length;i+=16){for(var n=r.base4D[r.p4D[i]],o=null,h=null,l=0;l<n.length;l+=5)h=s(n[l],n[l+1],n[l+2],n[l+3],n[l+4]),null===o?e[i/16]=h:o.next=h,o=h;h.next=s(r.p4D[i+1],r.p4D[i+2],r.p4D[i+3],r.p4D[i+4],r.p4D[i+5]),h.next.next=s(r.p4D[i+6],r.p4D[i+7],r.p4D[i+8],r.p4D[i+9],r.p4D[i+10]),h.next.next.next=s(r.p4D[i+11],r.p4D[i+12],r.p4D[i+13],r.p4D[i+14],r.p4D[i+15])}var u=[];for(i=0;i<r.lookupPairs4D.length;i+=2)u[r.lookupPairs4D[i]]=e[r.lookupPairs4D[i+1]];var c=new Uint8Array(256),d=new Uint8Array(256),p=new Uint8Array(256);for(i=0;i<256;i++)p[i]=i;var f=new Uint32Array(1);for(f[0]=t,f=a(a(a(f))),i=255;i>=0;i--){f=a(f);var m=new Uint32Array(1);m[0]=(f[0]+31)%(i+1),m[0]<0&&(m[0]+=i+1),c[i]=p[m[0]],d[i]=252&c[i],p[m[0]]=p[i]}return function(t,e,i,n){for(var o=(t+e+i+n)*r.STRETCH_4D,s=t+o,a=e+o,h=i+o,l=n+o,p=Math.floor(s),f=Math.floor(a),m=Math.floor(h),y=Math.floor(l),v=(p+f+m+y)*r.SQUISH_4D,g=t-(p+v),x=e-(f+v),b=i-(m+v),w=n-(y+v),_=s-p,S=a-f,T=h-m,C=l-y,I=_+S+T+C,E=0,A=u[T-C+1|S-T+1<<1|S-C+1<<2|_-S+1<<3|_-T+1<<4|_-C+1<<5|I<<6|I+C<<8|I+T<<11|I+S<<14|I+_<<17];void 0!==A;A=A.next){var P=g+A.dx,M=x+A.dy,O=b+A.dz,k=w+A.dw,B=2-P*P-M*M-O*O-k*k;if(B>0){var R=p+A.xsb,D=f+A.ysb,F=m+A.zsb,L=y+A.wsb,N=c[255&R],U=c[N+D&255],V=c[U+F&255],X=d[V+L&255];E+=B*B*B*B*(r.gradients4D[X]*P+r.gradients4D[X+1]*M+r.gradients4D[X+2]*O+r.gradients4D[X+3]*k)}}return E*r.NORM_4D}}},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";var r=Object.prototype.hasOwnProperty,n="~";function o(){}function s(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function a(t,e,i,r,o){if("function"!=typeof i)throw new TypeError("The listener must be a function");var a=new s(i,r||t,o),h=n?n+e:e;return t._events[h]?t._events[h].fn?t._events[h]=[t._events[h],a]:t._events[h].push(a):(t._events[h]=a,t._eventsCount++),t}function h(t,e){0==--t._eventsCount?t._events=new o:delete t._events[e]}function l(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(n=!1)),l.prototype.eventNames=function(){var t,e,i=[];if(0===this._eventsCount)return i;for(e in t=this._events)r.call(t,e)&&i.push(n?e.slice(1):e);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},l.prototype.listeners=function(t){var e=n?n+t:t,i=this._events[e];if(!i)return[];if(i.fn)return[i.fn];for(var r=0,o=i.length,s=new Array(o);r<o;r++)s[r]=i[r].fn;return s},l.prototype.listenerCount=function(t){var e=n?n+t:t,i=this._events[e];return i?i.fn?1:i.length:0},l.prototype.emit=function(t,e,i,r,o,s){var a=n?n+t:t;if(!this._events[a])return!1;var h,l,u=this._events[a],c=arguments.length;if(u.fn){switch(u.once&&this.removeListener(t,u.fn,void 0,!0),c){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,e),!0;case 3:return u.fn.call(u.context,e,i),!0;case 4:return u.fn.call(u.context,e,i,r),!0;case 5:return u.fn.call(u.context,e,i,r,o),!0;case 6:return u.fn.call(u.context,e,i,r,o,s),!0}for(l=1,h=new Array(c-1);l<c;l++)h[l-1]=arguments[l];u.fn.apply(u.context,h)}else{var d,p=u.length;for(l=0;l<p;l++)switch(u[l].once&&this.removeListener(t,u[l].fn,void 0,!0),c){case 1:u[l].fn.call(u[l].context);break;case 2:u[l].fn.call(u[l].context,e);break;case 3:u[l].fn.call(u[l].context,e,i);break;case 4:u[l].fn.call(u[l].context,e,i,r);break;default:if(!h)for(d=1,h=new Array(c-1);d<c;d++)h[d-1]=arguments[d];u[l].fn.apply(u[l].context,h)}}return!0},l.prototype.on=function(t,e,i){return a(this,t,e,i,!1)},l.prototype.once=function(t,e,i){return a(this,t,e,i,!0)},l.prototype.removeListener=function(t,e,i,r){var o=n?n+t:t;if(!this._events[o])return this;if(!e)return h(this,o),this;var s=this._events[o];if(s.fn)s.fn!==e||r&&!s.once||i&&s.context!==i||h(this,o);else{for(var a=0,l=[],u=s.length;a<u;a++)(s[a].fn!==e||r&&!s[a].once||i&&s[a].context!==i)&&l.push(s[a]);l.length?this._events[o]=1===l.length?l[0]:l:h(this,o)}return this},l.prototype.removeAllListeners=function(t){var e;return t?(e=n?n+t:t,this._events[e]&&h(this,e)):(this._events=new o,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prefixed=n,l.EventEmitter=l,t.exports=l},function(t,e,i){"use strict";function r(t,e,i){i=i||2;var r,a,h,l,u,p,f,y=e&&e.length,v=y?e[0]*i:t.length,g=n(t,0,v,i,!0),x=[];if(!g||g.next===g.prev)return x;if(y&&(g=function(t,e,i,r){var s,a,h,l,u,p=[];for(s=0,a=e.length;s<a;s++)h=e[s]*r,l=s<a-1?e[s+1]*r:t.length,(u=n(t,h,l,r,!1))===u.next&&(u.steiner=!0),p.push(m(u));for(p.sort(c),s=0;s<p.length;s++)d(p[s],i),i=o(i,i.next);return i}(t,e,g,i)),t.length>80*i){r=h=t[0],a=l=t[1];for(var b=i;b<v;b+=i)(u=t[b])<r&&(r=u),(p=t[b+1])<a&&(a=p),u>h&&(h=u),p>l&&(l=p);f=0!==(f=Math.max(h-r,l-a))?1/f:0}return s(g,x,i,r,a,f),x}function n(t,e,i,r,n){var o,s;if(n===A(t,e,i,r)>0)for(o=e;o<i;o+=r)s=C(o,t[o],t[o+1],s);else for(o=i-r;o>=e;o-=r)s=C(o,t[o],t[o+1],s);return s&&x(s,s.next)&&(I(s),s=s.next),s}function o(t,e){if(!t)return t;e||(e=t);var i,r=t;do{if(i=!1,r.steiner||!x(r,r.next)&&0!==g(r.prev,r,r.next))r=r.next;else{if(I(r),(r=e=r.prev)===r.next)break;i=!0}}while(i||r!==e);return e}function s(t,e,i,r,n,c,d){if(t){!d&&c&&function(t,e,i,r){var n=t;do{null===n.z&&(n.z=f(n.x,n.y,e,i,r)),n.prevZ=n.prev,n.nextZ=n.next,n=n.next}while(n!==t);n.prevZ.nextZ=null,n.prevZ=null,function(t){var e,i,r,n,o,s,a,h,l=1;do{for(i=t,t=null,o=null,s=0;i;){for(s++,r=i,a=0,e=0;e<l&&(a++,r=r.nextZ);e++);for(h=l;a>0||h>0&&r;)0!==a&&(0===h||!r||i.z<=r.z)?(n=i,i=i.nextZ,a--):(n=r,r=r.nextZ,h--),o?o.nextZ=n:t=n,n.prevZ=o,o=n;i=r}o.nextZ=null,l*=2}while(s>1)}(n)}(t,r,n,c);for(var p,m,y=t;t.prev!==t.next;)if(p=t.prev,m=t.next,c?h(t,r,n,c):a(t))e.push(p.i/i),e.push(t.i/i),e.push(m.i/i),I(t),t=m.next,y=m.next;else if((t=m)===y){d?1===d?s(t=l(o(t),e,i),e,i,r,n,c,2):2===d&&u(t,e,i,r,n,c):s(o(t),e,i,r,n,c,1);break}}}function a(t){var e=t.prev,i=t,r=t.next;if(g(e,i,r)>=0)return!1;for(var n=t.next.next;n!==t.prev;){if(y(e.x,e.y,i.x,i.y,r.x,r.y,n.x,n.y)&&g(n.prev,n,n.next)>=0)return!1;n=n.next}return!0}function h(t,e,i,r){var n=t.prev,o=t,s=t.next;if(g(n,o,s)>=0)return!1;for(var a=n.x<o.x?n.x<s.x?n.x:s.x:o.x<s.x?o.x:s.x,h=n.y<o.y?n.y<s.y?n.y:s.y:o.y<s.y?o.y:s.y,l=n.x>o.x?n.x>s.x?n.x:s.x:o.x>s.x?o.x:s.x,u=n.y>o.y?n.y>s.y?n.y:s.y:o.y>s.y?o.y:s.y,c=f(a,h,e,i,r),d=f(l,u,e,i,r),p=t.prevZ,m=t.nextZ;p&&p.z>=c&&m&&m.z<=d;){if(p!==t.prev&&p!==t.next&&y(n.x,n.y,o.x,o.y,s.x,s.y,p.x,p.y)&&g(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,m!==t.prev&&m!==t.next&&y(n.x,n.y,o.x,o.y,s.x,s.y,m.x,m.y)&&g(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;p&&p.z>=c;){if(p!==t.prev&&p!==t.next&&y(n.x,n.y,o.x,o.y,s.x,s.y,p.x,p.y)&&g(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;m&&m.z<=d;){if(m!==t.prev&&m!==t.next&&y(n.x,n.y,o.x,o.y,s.x,s.y,m.x,m.y)&&g(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function l(t,e,i){var r=t;do{var n=r.prev,s=r.next.next;!x(n,s)&&b(n,r,r.next,s)&&S(n,s)&&S(s,n)&&(e.push(n.i/i),e.push(r.i/i),e.push(s.i/i),I(r),I(r.next),r=t=s),r=r.next}while(r!==t);return o(r)}function u(t,e,i,r,n,a){var h=t;do{for(var l=h.next.next;l!==h.prev;){if(h.i!==l.i&&v(h,l)){var u=T(h,l);return h=o(h,h.next),u=o(u,u.next),s(h,e,i,r,n,a),void s(u,e,i,r,n,a)}l=l.next}h=h.next}while(h!==t)}function c(t,e){return t.x-e.x}function d(t,e){if(e=function(t,e){var i,r=e,n=t.x,o=t.y,s=-1/0;do{if(o<=r.y&&o>=r.next.y&&r.next.y!==r.y){var a=r.x+(o-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(a<=n&&a>s){if(s=a,a===n){if(o===r.y)return r;if(o===r.next.y)return r.next}i=r.x<r.next.x?r:r.next}}r=r.next}while(r!==e);if(!i)return null;if(n===s)return i;var h,l=i,u=i.x,c=i.y,d=1/0;r=i;do{n>=r.x&&r.x>=u&&n!==r.x&&y(o<c?n:s,o,u,c,o<c?s:n,o,r.x,r.y)&&(h=Math.abs(o-r.y)/(n-r.x),S(r,t)&&(h<d||h===d&&(r.x>i.x||r.x===i.x&&p(i,r)))&&(i=r,d=h)),r=r.next}while(r!==l);return i}(t,e)){var i=T(e,t);o(i,i.next)}}function p(t,e){return g(t.prev,t,e.prev)<0&&g(e.next,t,t.next)<0}function f(t,e,i,r,n){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*n)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*n)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function m(t){var e=t,i=t;do{(e.x<i.x||e.x===i.x&&e.y<i.y)&&(i=e),e=e.next}while(e!==t);return i}function y(t,e,i,r,n,o,s,a){return(n-s)*(e-a)-(t-s)*(o-a)>=0&&(t-s)*(r-a)-(i-s)*(e-a)>=0&&(i-s)*(o-a)-(n-s)*(r-a)>=0}function v(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&b(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&(S(t,e)&&S(e,t)&&function(t,e){var i=t,r=!1,n=(t.x+e.x)/2,o=(t.y+e.y)/2;do{i.y>o!=i.next.y>o&&i.next.y!==i.y&&n<(i.next.x-i.x)*(o-i.y)/(i.next.y-i.y)+i.x&&(r=!r),i=i.next}while(i!==t);return r}(t,e)&&(g(t.prev,t,e.prev)||g(t,e.prev,e))||x(t,e)&&g(t.prev,t,t.next)>0&&g(e.prev,e,e.next)>0)}function g(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function x(t,e){return t.x===e.x&&t.y===e.y}function b(t,e,i,r){var n=_(g(t,e,i)),o=_(g(t,e,r)),s=_(g(i,r,t)),a=_(g(i,r,e));return n!==o&&s!==a||(!(0!==n||!w(t,i,e))||(!(0!==o||!w(t,r,e))||(!(0!==s||!w(i,t,r))||!(0!==a||!w(i,e,r)))))}function w(t,e,i){return e.x<=Math.max(t.x,i.x)&&e.x>=Math.min(t.x,i.x)&&e.y<=Math.max(t.y,i.y)&&e.y>=Math.min(t.y,i.y)}function _(t){return t>0?1:t<0?-1:0}function S(t,e){return g(t.prev,t,t.next)<0?g(t,e,t.next)>=0&&g(t,t.prev,e)>=0:g(t,e,t.prev)<0||g(t,t.next,e)<0}function T(t,e){var i=new E(t.i,t.x,t.y),r=new E(e.i,e.x,e.y),n=t.next,o=e.prev;return t.next=e,e.prev=t,i.next=n,n.prev=i,r.next=i,i.prev=r,o.next=r,r.prev=o,r}function C(t,e,i,r){var n=new E(t,e,i);return r?(n.next=r.next,n.prev=r,r.next.prev=n,r.next=n):(n.prev=n,n.next=n),n}function I(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function E(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function A(t,e,i,r){for(var n=0,o=e,s=i-r;o<i;o+=r)n+=(t[s]-t[o])*(t[o+1]+t[s+1]),s=o;return n}t.exports=r,t.exports.default=r,r.deviation=function(t,e,i,r){var n=e&&e.length,o=n?e[0]*i:t.length,s=Math.abs(A(t,0,o,i));if(n)for(var a=0,h=e.length;a<h;a++){var l=e[a]*i,u=a<h-1?e[a+1]*i:t.length;s-=Math.abs(A(t,l,u,i))}var c=0;for(a=0;a<r.length;a+=3){var d=r[a]*i,p=r[a+1]*i,f=r[a+2]*i;c+=Math.abs((t[d]-t[f])*(t[p+1]-t[d+1])-(t[d]-t[p])*(t[f+1]-t[d+1]))}return 0===s&&0===c?0:Math.abs((c-s)/s)},r.flatten=function(t){for(var e=t[0][0].length,i={vertices:[],holes:[],dimensions:e},r=0,n=0;n<t.length;n++){for(var o=0;o<t[n].length;o++)for(var s=0;s<e;s++)i.vertices.push(t[n][o][s]);n>0&&(r+=t[n-1].length,i.holes.push(r))}return i}},function(t,e,i){window,t.exports=function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);var r,n=function(t,e){var i=e.x-t.x,r=e.y-t.y;return Math.sqrt(i*i+r*r)},o=function(t){return t*(Math.PI/180)},s=function(t,e,i){for(var r,n=e.split(/[ ,]+/g),o=0;o<n.length;o+=1)r=n[o],t.addEventListener?t.addEventListener(r,i,!1):t.attachEvent&&t.attachEvent(r,i)},a=function(t,e,i){for(var r,n=e.split(/[ ,]+/g),o=0;o<n.length;o+=1)r=n[o],t.removeEventListener?t.removeEventListener(r,i):t.detachEvent&&t.detachEvent(r,i)},h=function(t){return t.preventDefault(),t.type.match(/^touch/)?t.changedTouches:t},l=function(){return{x:void 0!==window.pageXOffset?window.pageXOffset:(document.documentElement||document.body.parentNode||document.body).scrollLeft,y:void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop}},u=function(t,e){e.top||e.right||e.bottom||e.left?(t.style.top=e.top,t.style.right=e.right,t.style.bottom=e.bottom,t.style.left=e.left):(t.style.left=e.x+"px",t.style.top=e.y+"px")},c=function(t,e,i){var r=d(t);for(var n in r)if(r.hasOwnProperty(n))if("string"==typeof e)r[n]=e+" "+i;else{for(var o="",s=0,a=e.length;s<a;s+=1)o+=e[s]+" "+i+", ";r[n]=o.slice(0,-2)}return r},d=function(t){var e={};return e[t]="",["webkit","Moz","o"].forEach((function(i){e[i+t.charAt(0).toUpperCase()+t.slice(1)]=""})),e},p=function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);return t},f=function(t,e){if(t.length)for(var i=0,r=t.length;i<r;i+=1)e(t[i]);else e(t)},m=!!("ontouchstart"in window),y=!!window.PointerEvent,v=!!window.MSPointerEvent,g={start:"mousedown",move:"mousemove",end:"mouseup"},x={};function b(){}y?r={start:"pointerdown",move:"pointermove",end:"pointerup, pointercancel"}:v?r={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:m?(r={start:"touchstart",move:"touchmove",end:"touchend, touchcancel"},x=g):r=g,b.prototype.on=function(t,e){var i,r=t.split(/[ ,]+/g);this._handlers_=this._handlers_||{};for(var n=0;n<r.length;n+=1)i=r[n],this._handlers_[i]=this._handlers_[i]||[],this._handlers_[i].push(e);return this},b.prototype.off=function(t,e){return this._handlers_=this._handlers_||{},void 0===t?this._handlers_={}:void 0===e?this._handlers_[t]=null:this._handlers_[t]&&this._handlers_[t].indexOf(e)>=0&&this._handlers_[t].splice(this._handlers_[t].indexOf(e),1),this},b.prototype.trigger=function(t,e){var i,r=this,n=t.split(/[ ,]+/g);r._handlers_=r._handlers_||{};for(var o=0;o<n.length;o+=1)i=n[o],r._handlers_[i]&&r._handlers_[i].length&&r._handlers_[i].forEach((function(t){t.call(r,{type:i,target:r},e)}))},b.prototype.config=function(t){this.options=this.defaults||{},t&&(this.options=function(t,e){var i={};for(var r in t)t.hasOwnProperty(r)&&e.hasOwnProperty(r)?i[r]=e[r]:t.hasOwnProperty(r)&&(i[r]=t[r]);return i}(this.options,t))},b.prototype.bindEvt=function(t,e){var i=this;return i._domHandlers_=i._domHandlers_||{},i._domHandlers_[e]=function(){"function"==typeof i["on"+e]?i["on"+e].apply(i,arguments):console.warn('[WARNING] : Missing "on'+e+'" handler.')},s(t,r[e],i._domHandlers_[e]),x[e]&&s(t,x[e],i._domHandlers_[e]),i},b.prototype.unbindEvt=function(t,e){return this._domHandlers_=this._domHandlers_||{},a(t,r[e],this._domHandlers_[e]),x[e]&&a(t,x[e],this._domHandlers_[e]),delete this._domHandlers_[e],this};var w=b;function _(t,e){return this.identifier=e.identifier,this.position=e.position,this.frontPosition=e.frontPosition,this.collection=t,this.defaults={size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,mode:"dynamic",zone:document.body,lockX:!1,lockY:!1},this.config(e),"dynamic"===this.options.mode&&(this.options.restOpacity=0),this.id=_.id,_.id+=1,this.buildEl().stylize(),this.instance={el:this.ui.el,on:this.on.bind(this),off:this.off.bind(this),show:this.show.bind(this),hide:this.hide.bind(this),add:this.addToDom.bind(this),remove:this.removeFromDom.bind(this),destroy:this.destroy.bind(this),resetDirection:this.resetDirection.bind(this),computeDirection:this.computeDirection.bind(this),trigger:this.trigger.bind(this),position:this.position,frontPosition:this.frontPosition,ui:this.ui,identifier:this.identifier,id:this.id,options:this.options},this.instance}_.prototype=new w,_.constructor=_,_.id=0,_.prototype.buildEl=function(t){return this.ui={},this.options.dataOnly?this:(this.ui.el=document.createElement("div"),this.ui.back=document.createElement("div"),this.ui.front=document.createElement("div"),this.ui.el.className="nipple collection_"+this.collection.id,this.ui.back.className="back",this.ui.front.className="front",this.ui.el.setAttribute("id","nipple_"+this.collection.id+"_"+this.id),this.ui.el.appendChild(this.ui.back),this.ui.el.appendChild(this.ui.front),this)},_.prototype.stylize=function(){if(this.options.dataOnly)return this;var t=this.options.fadeTime+"ms",e=function(t,e){var i=d("borderRadius");for(var r in i)i.hasOwnProperty(r)&&(i[r]="50%");return i}(),i=c("transition","opacity",t),r={};return r.el={position:"absolute",opacity:this.options.restOpacity,display:"block",zIndex:999},r.back={position:"absolute",display:"block",width:this.options.size+"px",height:this.options.size+"px",marginLeft:-this.options.size/2+"px",marginTop:-this.options.size/2+"px",background:this.options.color,opacity:".5"},r.front={width:this.options.size/2+"px",height:this.options.size/2+"px",position:"absolute",display:"block",marginLeft:-this.options.size/4+"px",marginTop:-this.options.size/4+"px",background:this.options.color,opacity:".5"},p(r.el,i),p(r.back,e),p(r.front,e),this.applyStyles(r),this},_.prototype.applyStyles=function(t){for(var e in this.ui)if(this.ui.hasOwnProperty(e))for(var i in t[e])this.ui[e].style[i]=t[e][i];return this},_.prototype.addToDom=function(){return this.options.dataOnly||document.body.contains(this.ui.el)?this:(this.options.zone.appendChild(this.ui.el),this)},_.prototype.removeFromDom=function(){return this.options.dataOnly||!document.body.contains(this.ui.el)?this:(this.options.zone.removeChild(this.ui.el),this)},_.prototype.destroy=function(){clearTimeout(this.removeTimeout),clearTimeout(this.showTimeout),clearTimeout(this.restTimeout),this.trigger("destroyed",this.instance),this.removeFromDom(),this.off()},_.prototype.show=function(t){var e=this;return e.options.dataOnly?e:(clearTimeout(e.removeTimeout),clearTimeout(e.showTimeout),clearTimeout(e.restTimeout),e.addToDom(),e.restCallback(),setTimeout((function(){e.ui.el.style.opacity=1}),0),e.showTimeout=setTimeout((function(){e.trigger("shown",e.instance),"function"==typeof t&&t.call(this)}),e.options.fadeTime),e)},_.prototype.hide=function(t){var e=this;return e.options.dataOnly?e:(e.ui.el.style.opacity=e.options.restOpacity,clearTimeout(e.removeTimeout),clearTimeout(e.showTimeout),clearTimeout(e.restTimeout),e.removeTimeout=setTimeout((function(){var i="dynamic"===e.options.mode?"none":"block";e.ui.el.style.display=i,"function"==typeof t&&t.call(e),e.trigger("hidden",e.instance)}),e.options.fadeTime),e.options.restJoystick&&e.restPosition(),e)},_.prototype.restPosition=function(t){var e=this;e.frontPosition={x:0,y:0};var i=e.options.fadeTime+"ms",r={};r.front=c("transition",["top","left"],i);var n={front:{}};n.front={left:e.frontPosition.x+"px",top:e.frontPosition.y+"px"},e.applyStyles(r),e.applyStyles(n),e.restTimeout=setTimeout((function(){"function"==typeof t&&t.call(e),e.restCallback()}),e.options.fadeTime)},_.prototype.restCallback=function(){var t={};t.front=c("transition","none",""),this.applyStyles(t),this.trigger("rested",this.instance)},_.prototype.resetDirection=function(){this.direction={x:!1,y:!1,angle:!1}},_.prototype.computeDirection=function(t){var e,i,r,n=t.angle.radian,o=Math.PI/4,s=Math.PI/2;if(n>o&&n<3*o&&!t.lockX?e="up":n>-o&&n<=o&&!t.lockY?e="left":n>3*-o&&n<=-o&&!t.lockX?e="down":t.lockY||(e="right"),t.lockY||(i=n>-s&&n<s?"left":"right"),t.lockX||(r=n>0?"up":"down"),t.force>this.options.threshold){var a,h={};for(a in this.direction)this.direction.hasOwnProperty(a)&&(h[a]=this.direction[a]);var l={};for(a in this.direction={x:i,y:r,angle:e},t.direction=this.direction,h)h[a]===this.direction[a]&&(l[a]=!0);if(l.x&&l.y&&l.angle)return t;l.x&&l.y||this.trigger("plain",t),l.x||this.trigger("plain:"+i,t),l.y||this.trigger("plain:"+r,t),l.angle||this.trigger("dir dir:"+e,t)}else this.resetDirection();return t};var S=_;function T(t,e){return this.nipples=[],this.idles=[],this.actives=[],this.ids=[],this.pressureIntervals={},this.manager=t,this.id=T.id,T.id+=1,this.defaults={zone:document.body,multitouch:!1,maxNumberOfNipples:10,mode:"dynamic",position:{top:0,left:0},catchDistance:200,size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,lockX:!1,lockY:!1,dynamicPage:!1},this.config(e),"static"!==this.options.mode&&"semi"!==this.options.mode||(this.options.multitouch=!1),this.options.multitouch||(this.options.maxNumberOfNipples=1),this.updateBox(),this.prepareNipples(),this.bindings(),this.begin(),this.nipples}T.prototype=new w,T.constructor=T,T.id=0,T.prototype.prepareNipples=function(){var t=this.nipples;t.on=this.on.bind(this),t.off=this.off.bind(this),t.options=this.options,t.destroy=this.destroy.bind(this),t.ids=this.ids,t.id=this.id,t.processOnMove=this.processOnMove.bind(this),t.processOnEnd=this.processOnEnd.bind(this),t.get=function(e){if(void 0===e)return t[0];for(var i=0,r=t.length;i<r;i+=1)if(t[i].identifier===e)return t[i];return!1}},T.prototype.bindings=function(){this.bindEvt(this.options.zone,"start"),this.options.zone.style.touchAction="none",this.options.zone.style.msTouchAction="none"},T.prototype.begin=function(){var t=this.options;if("static"===t.mode){var e=this.createNipple(t.position,this.manager.getIdentifier());e.add(),this.idles.push(e)}},T.prototype.createNipple=function(t,e){var i=l(),r={},n=this.options;if(t.x&&t.y)r={x:t.x-(i.x+this.box.left),y:t.y-(i.y+this.box.top)};else if(t.top||t.right||t.bottom||t.left){var o=document.createElement("DIV");o.style.display="hidden",o.style.top=t.top,o.style.right=t.right,o.style.bottom=t.bottom,o.style.left=t.left,o.style.position="absolute",n.zone.appendChild(o);var s=o.getBoundingClientRect();n.zone.removeChild(o),r=t,t={x:s.left+i.x,y:s.top+i.y}}var a=new S(this,{color:n.color,size:n.size,threshold:n.threshold,fadeTime:n.fadeTime,dataOnly:n.dataOnly,restJoystick:n.restJoystick,restOpacity:n.restOpacity,mode:n.mode,identifier:e,position:t,zone:n.zone,frontPosition:{x:0,y:0}});return n.dataOnly||(u(a.ui.el,r),u(a.ui.front,a.frontPosition)),this.nipples.push(a),this.trigger("added "+a.identifier+":added",a),this.manager.trigger("added "+a.identifier+":added",a),this.bindNipple(a),a},T.prototype.updateBox=function(){this.box=this.options.zone.getBoundingClientRect()},T.prototype.bindNipple=function(t){var e,i=this,r=function(t,r){e=t.type+" "+r.id+":"+t.type,i.trigger(e,r)};t.on("destroyed",i.onDestroyed.bind(i)),t.on("shown hidden rested dir plain",r),t.on("dir:up dir:right dir:down dir:left",r),t.on("plain:up plain:right plain:down plain:left",r)},T.prototype.pressureFn=function(t,e,i){var r=this,n=0;clearInterval(r.pressureIntervals[i]),r.pressureIntervals[i]=setInterval(function(){var i=t.force||t.pressure||t.webkitForce||0;i!==n&&(e.trigger("pressure",i),r.trigger("pressure "+e.identifier+":pressure",i),n=i)}.bind(r),100)},T.prototype.onstart=function(t){var e=this,i=e.options,r=t;return t=h(t),e.updateBox(),f(t,(function(n){e.actives.length<i.maxNumberOfNipples?e.processOnStart(n):r.type.match(/^touch/)&&(Object.keys(e.manager.ids).forEach((function(i){if(Object.values(r.touches).findIndex((function(t){return t.identifier===i}))<0){var n=[t[0]];n.identifier=i,e.processOnEnd(n)}})),e.actives.length<i.maxNumberOfNipples&&e.processOnStart(n))})),e.manager.bindDocument(),!1},T.prototype.processOnStart=function(t){var e,i=this,r=i.options,o=i.manager.getIdentifier(t),s=t.force||t.pressure||t.webkitForce||0,a={x:t.pageX,y:t.pageY},h=i.getOrCreate(o,a);h.identifier!==o&&i.manager.removeIdentifier(h.identifier),h.identifier=o;var l=function(e){e.trigger("start",e),i.trigger("start "+e.id+":start",e),e.show(),s>0&&i.pressureFn(t,e,e.identifier),i.processOnMove(t)};if((e=i.idles.indexOf(h))>=0&&i.idles.splice(e,1),i.actives.push(h),i.ids.push(h.identifier),"semi"!==r.mode)l(h);else{if(!(n(a,h.position)<=r.catchDistance))return h.destroy(),void i.processOnStart(t);l(h)}return h},T.prototype.getOrCreate=function(t,e){var i,r=this.options;return/(semi|static)/.test(r.mode)?(i=this.idles[0])?(this.idles.splice(0,1),i):"semi"===r.mode?this.createNipple(e,t):(console.warn("Coudln't find the needed nipple."),!1):i=this.createNipple(e,t)},T.prototype.processOnMove=function(t){var e=this.options,i=this.manager.getIdentifier(t),r=this.nipples.get(i);if(function(t){return isNaN(t.buttons)?0!==t.pressure:0!==t.buttons}(t)){if(!r)return console.error("Found zombie joystick with ID "+i),void this.manager.removeIdentifier(i);if(e.dynamicPage){var s=l();h=r.el.getBoundingClientRect(),r.position={x:s.x+h.left,y:s.y+h.top}}r.identifier=i;var a=r.options.size/2,h={x:t.pageX,y:t.pageY};e.lockX&&(h.y=r.position.y),e.lockY&&(h.x=r.position.x);var c,d,p,f,m,y,v,g,x=n(h,r.position),b=(c=h,p=(d=r.position).x-c.x,f=d.y-c.y,function(t){return t*(180/Math.PI)}(Math.atan2(f,p))),w=o(b),_=x/a,S={distance:x,position:h};x>a&&(x=a,m=r.position,y=x,g={x:0,y:0},v=o(v=b),g.x=m.x-y*Math.cos(v),g.y=m.y-y*Math.sin(v),h=g);var T=h.x-r.position.x,C=h.y-r.position.y;r.frontPosition={x:T,y:C},e.dataOnly||u(r.ui.front,r.frontPosition);var I={identifier:r.identifier,position:h,force:_,pressure:t.force||t.pressure||t.webkitForce||0,distance:x,angle:{radian:w,degree:b},vector:{x:T/a,y:-C/a},raw:S,instance:r,lockX:e.lockX,lockY:e.lockY};(I=r.computeDirection(I)).angle={radian:o(180-b),degree:180-b},r.trigger("move",I),this.trigger("move "+r.id+":move",I)}else this.processOnEnd(t)},T.prototype.processOnEnd=function(t){var e=this,i=e.options,r=e.manager.getIdentifier(t),n=e.nipples.get(r),o=e.manager.removeIdentifier(n.identifier);n&&(i.dataOnly||n.hide((function(){"dynamic"===i.mode&&(n.trigger("removed",n),e.trigger("removed "+n.id+":removed",n),e.manager.trigger("removed "+n.id+":removed",n),n.destroy())})),clearInterval(e.pressureIntervals[n.identifier]),n.resetDirection(),n.trigger("end",n),e.trigger("end "+n.id+":end",n),e.ids.indexOf(n.identifier)>=0&&e.ids.splice(e.ids.indexOf(n.identifier),1),e.actives.indexOf(n)>=0&&e.actives.splice(e.actives.indexOf(n),1),/(semi|static)/.test(i.mode)?e.idles.push(n):e.nipples.indexOf(n)>=0&&e.nipples.splice(e.nipples.indexOf(n),1),e.manager.unbindDocument(),/(semi|static)/.test(i.mode)&&(e.manager.ids[o.id]=o.identifier))},T.prototype.onDestroyed=function(t,e){this.nipples.indexOf(e)>=0&&this.nipples.splice(this.nipples.indexOf(e),1),this.actives.indexOf(e)>=0&&this.actives.splice(this.actives.indexOf(e),1),this.idles.indexOf(e)>=0&&this.idles.splice(this.idles.indexOf(e),1),this.ids.indexOf(e.identifier)>=0&&this.ids.splice(this.ids.indexOf(e.identifier),1),this.manager.removeIdentifier(e.identifier),this.manager.unbindDocument()},T.prototype.destroy=function(){for(var t in this.unbindEvt(this.options.zone,"start"),this.nipples.forEach((function(t){t.destroy()})),this.pressureIntervals)this.pressureIntervals.hasOwnProperty(t)&&clearInterval(this.pressureIntervals[t]);this.trigger("destroyed",this.nipples),this.manager.unbindDocument(),this.off()};var C=T;function I(t){var e,i=this;return i.ids={},i.index=0,i.collections=[],i.config(t),i.prepareCollections(),s(window,"resize",(function(t){clearTimeout(e),e=setTimeout((function(){var t,e=l();i.collections.forEach((function(i){i.forEach((function(i){t=i.el.getBoundingClientRect(),i.position={x:e.x+t.left,y:e.y+t.top}}))}))}),100)})),i.collections}I.prototype=new w,I.constructor=I,I.prototype.prepareCollections=function(){var t=this;t.collections.create=t.create.bind(t),t.collections.on=t.on.bind(t),t.collections.off=t.off.bind(t),t.collections.destroy=t.destroy.bind(t),t.collections.get=function(e){var i;return t.collections.every((function(t){return!(i=t.get(e))})),i}},I.prototype.create=function(t){return this.createCollection(t)},I.prototype.createCollection=function(t){var e=new C(this,t);return this.bindCollection(e),this.collections.push(e),e},I.prototype.bindCollection=function(t){var e,i=this,r=function(t,r){e=t.type+" "+r.id+":"+t.type,i.trigger(e,r)};t.on("destroyed",i.onDestroyed.bind(i)),t.on("shown hidden rested dir plain",r),t.on("dir:up dir:right dir:down dir:left",r),t.on("plain:up plain:right plain:down plain:left",r)},I.prototype.bindDocument=function(){this.binded||(this.bindEvt(document,"move").bindEvt(document,"end"),this.binded=!0)},I.prototype.unbindDocument=function(t){Object.keys(this.ids).length&&!0!==t||(this.unbindEvt(document,"move").unbindEvt(document,"end"),this.binded=!1)},I.prototype.getIdentifier=function(t){var e;return t?void 0===(e=void 0===t.identifier?t.pointerId:t.identifier)&&(e=this.latest||0):e=this.index,void 0===this.ids[e]&&(this.ids[e]=this.index,this.index+=1),this.latest=e,this.ids[e]},I.prototype.removeIdentifier=function(t){var e={};for(var i in this.ids)if(this.ids[i]===t){e.id=i,e.identifier=this.ids[i],delete this.ids[i];break}return e},I.prototype.onmove=function(t){return this.onAny("move",t),!1},I.prototype.onend=function(t){return this.onAny("end",t),!1},I.prototype.oncancel=function(t){return this.onAny("end",t),!1},I.prototype.onAny=function(t,e){var i,r=this,n="processOn"+t.charAt(0).toUpperCase()+t.slice(1);return e=h(e),f(e,(function(t){i=r.getIdentifier(t),f(r.collections,function(t,e,i){i.ids.indexOf(e)>=0&&(i[n](t),t._found_=!0)}.bind(null,t,i)),t._found_||r.removeIdentifier(i)})),!1},I.prototype.destroy=function(){this.unbindDocument(!0),this.ids={},this.index=0,this.collections.forEach((function(t){t.destroy()})),this.off()},I.prototype.onDestroyed=function(t,e){if(this.collections.indexOf(e)<0)return!1;this.collections.splice(this.collections.indexOf(e),1)};var E=new I;e.default={create:function(t){return E.create(t)},factory:E}}]).default},function(t,e,i){(function(t,r){var n;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(o){e&&e.nodeType,t&&t.nodeType;var s="object"==typeof r&&r;s.global!==s&&s.window!==s&&s.self;var a,h=2147483647,l=/^xn--/,u=/[^\x20-\x7E]/,c=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function m(t){throw new RangeError(d[t])}function y(t,e){for(var i=t.length,r=[];i--;)r[i]=e(t[i]);return r}function v(t,e){var i=t.split("@"),r="";return i.length>1&&(r=i[0]+"@",t=i[1]),r+y((t=t.replace(c,".")).split("."),e).join(".")}function g(t){for(var e,i,r=[],n=0,o=t.length;n<o;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<o?56320==(64512&(i=t.charCodeAt(n++)))?r.push(((1023&e)<<10)+(1023&i)+65536):(r.push(e),n--):r.push(e);return r}function x(t){return y(t,(function(t){var e="";return t>65535&&(e+=f((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=f(t)})).join("")}function b(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function w(t,e,i){var r=0;for(t=i?p(t/700):t>>1,t+=p(t/e);t>455;r+=36)t=p(t/35);return p(r+36*t/(t+38))}function _(t){var e,i,r,n,o,s,a,l,u,c,d,f=[],y=t.length,v=0,g=128,b=72;for((i=t.lastIndexOf("-"))<0&&(i=0),r=0;r<i;++r)t.charCodeAt(r)>=128&&m("not-basic"),f.push(t.charCodeAt(r));for(n=i>0?i+1:0;n<y;){for(o=v,s=1,a=36;n>=y&&m("invalid-input"),((l=(d=t.charCodeAt(n++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:36)>=36||l>p((h-v)/s))&&m("overflow"),v+=l*s,!(l<(u=a<=b?1:a>=b+26?26:a-b));a+=36)s>p(h/(c=36-u))&&m("overflow"),s*=c;b=w(v-o,e=f.length+1,0==o),p(v/e)>h-g&&m("overflow"),g+=p(v/e),v%=e,f.splice(v++,0,g)}return x(f)}function S(t){var e,i,r,n,o,s,a,l,u,c,d,y,v,x,_,S=[];for(y=(t=g(t)).length,e=128,i=0,o=72,s=0;s<y;++s)(d=t[s])<128&&S.push(f(d));for(r=n=S.length,n&&S.push("-");r<y;){for(a=h,s=0;s<y;++s)(d=t[s])>=e&&d<a&&(a=d);for(a-e>p((h-i)/(v=r+1))&&m("overflow"),i+=(a-e)*v,e=a,s=0;s<y;++s)if((d=t[s])<e&&++i>h&&m("overflow"),d==e){for(l=i,u=36;!(l<(c=u<=o?1:u>=o+26?26:u-o));u+=36)_=l-c,x=36-c,S.push(f(b(c+_%x,0))),l=p(_/x);S.push(f(b(l,0))),o=w(i,v,r==n),i=0,++r}++i,++e}return S.join("")}a={version:"1.4.1",ucs2:{decode:g,encode:x},decode:_,encode:S,toASCII:function(t){return v(t,(function(t){return u.test(t)?"xn--"+S(t):t}))},toUnicode:function(t){return v(t,(function(t){return l.test(t)?_(t.slice(4).toLowerCase()):t}))}},void 0===(n=function(){return a}.call(e,i,e,t))||(t.exports=n)}()}).call(this,i(9)(t),i(4))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,i){"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},function(t,e,i){"use strict";e.decode=e.parse=i(12),e.encode=e.stringify=i(13)},function(t,e,i){"use strict";function r(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,i,o){e=e||"&",i=i||"=";var s={};if("string"!=typeof t||0===t.length)return s;var a=/\+/g;t=t.split(e);var h=1e3;o&&"number"==typeof o.maxKeys&&(h=o.maxKeys);var l=t.length;h>0&&l>h&&(l=h);for(var u=0;u<l;++u){var c,d,p,f,m=t[u].replace(a,"%20"),y=m.indexOf(i);y>=0?(c=m.substr(0,y),d=m.substr(y+1)):(c=m,d=""),p=decodeURIComponent(c),f=decodeURIComponent(d),r(s,p)?n(s[p])?s[p].push(f):s[p]=[s[p],f]:s[p]=f}return s};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,i){"use strict";var r=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,i,a){return e=e||"&",i=i||"=",null===t&&(t=void 0),"object"==typeof t?o(s(t),(function(s){var a=encodeURIComponent(r(s))+i;return n(t[s])?o(t[s],(function(t){return a+encodeURIComponent(r(t))})).join(e):a+encodeURIComponent(r(t[s]))})).join(e):a?encodeURIComponent(r(a))+i+encodeURIComponent(r(t)):""};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function o(t,e){if(t.map)return t.map(e);for(var i=[],r=0;r<t.length;r++)i.push(e(t[r],r));return i}var s=Object.keys||function(t){var e=[];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.push(i);return e}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NORM_2D=1/47,e.NORM_3D=1/103,e.NORM_4D=1/30,e.SQUISH_2D=(Math.sqrt(3)-1)/2,e.SQUISH_3D=(Math.sqrt(4)-1)/3,e.SQUISH_4D=(Math.sqrt(5)-1)/4,e.STRETCH_2D=(1/Math.sqrt(3)-1)/2,e.STRETCH_3D=(1/Math.sqrt(4)-1)/3,e.STRETCH_4D=(1/Math.sqrt(5)-1)/4,e.base2D=[[1,1,0,1,0,1,0,0,0],[1,1,0,1,0,1,2,1,1]],e.base3D=[[0,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1],[2,1,1,0,2,1,0,1,2,0,1,1,3,1,1,1],[1,1,0,0,1,0,1,0,1,0,0,1,2,1,1,0,2,1,0,1,2,0,1,1]],e.base4D=[[0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1],[3,1,1,1,0,3,1,1,0,1,3,1,0,1,1,3,0,1,1,1,4,1,1,1,1],[1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,2,1,1,0,0,2,1,0,1,0,2,1,0,0,1,2,0,1,1,0,2,0,1,0,1,2,0,0,1,1],[3,1,1,1,0,3,1,1,0,1,3,1,0,1,1,3,0,1,1,1,2,1,1,0,0,2,1,0,1,0,2,1,0,0,1,2,0,1,1,0,2,0,1,0,1,2,0,0,1,1]],e.gradients2D=[5,2,2,5,-5,2,-2,5,5,-2,2,-5,-5,-2,-2,-5],e.gradients3D=[-11,4,4,-4,11,4,-4,4,11,11,4,4,4,11,4,4,4,11,-11,-4,4,-4,-11,4,-4,-4,11,11,-4,4,4,-11,4,4,-4,11,-11,4,-4,-4,11,-4,-4,4,-11,11,4,-4,4,11,-4,4,4,-11,-11,-4,-4,-4,-11,-4,-4,-4,-11,11,-4,-4,4,-11,-4,4,-4,-11],e.gradients4D=[3,1,1,1,1,3,1,1,1,1,3,1,1,1,1,3,-3,1,1,1,-1,3,1,1,-1,1,3,1,-1,1,1,3,3,-1,1,1,1,-3,1,1,1,-1,3,1,1,-1,1,3,-3,-1,1,1,-1,-3,1,1,-1,-1,3,1,-1,-1,1,3,3,1,-1,1,1,3,-1,1,1,1,-3,1,1,1,-1,3,-3,1,-1,1,-1,3,-1,1,-1,1,-3,1,-1,1,-1,3,3,-1,-1,1,1,-3,-1,1,1,-1,-3,1,1,-1,-1,3,-3,-1,-1,1,-1,-3,-1,1,-1,-1,-3,1,-1,-1,-1,3,3,1,1,-1,1,3,1,-1,1,1,3,-1,1,1,1,-3,-3,1,1,-1,-1,3,1,-1,-1,1,3,-1,-1,1,1,-3,3,-1,1,-1,1,-3,1,-1,1,-1,3,-1,1,-1,1,-3,-3,-1,1,-1,-1,-3,1,-1,-1,-1,3,-1,-1,-1,1,-3,3,1,-1,-1,1,3,-1,-1,1,1,-3,-1,1,1,-1,-3,-3,1,-1,-1,-1,3,-1,-1,-1,1,-3,-1,-1,1,-1,-3,3,-1,-1,-1,1,-3,-1,-1,1,-1,-3,-1,1,-1,-1,-3,-3,-1,-1,-1,-1,-3,-1,-1,-1,-1,-3,-1,-1,-1,-1,-3],e.lookupPairs2D=[0,1,1,0,4,1,17,0,20,2,21,2,22,5,23,5,26,4,39,3,42,4,43,3],e.lookupPairs3D=[0,2,1,1,2,2,5,1,6,0,7,0,32,2,34,2,129,1,133,1,160,5,161,5,518,0,519,0,546,4,550,4,645,3,647,3,672,5,673,5,674,4,677,3,678,4,679,3,680,13,681,13,682,12,685,14,686,12,687,14,712,20,714,18,809,21,813,23,840,20,841,21,1198,19,1199,22,1226,18,1230,19,1325,23,1327,22,1352,15,1353,17,1354,15,1357,17,1358,16,1359,16,1360,11,1361,10,1362,11,1365,10,1366,9,1367,9,1392,11,1394,11,1489,10,1493,10,1520,8,1521,8,1878,9,1879,9,1906,7,1910,7,2005,6,2007,6,2032,8,2033,8,2034,7,2037,6,2038,7,2039,6],e.lookupPairs4D=[0,3,1,2,2,3,5,2,6,1,7,1,8,3,9,2,10,3,13,2,16,3,18,3,22,1,23,1,24,3,26,3,33,2,37,2,38,1,39,1,41,2,45,2,54,1,55,1,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,256,3,258,3,264,3,266,3,272,3,274,3,280,3,282,3,2049,2,2053,2,2057,2,2061,2,2081,2,2085,2,2089,2,2093,2,2304,9,2305,9,2312,9,2313,9,16390,1,16391,1,16406,1,16407,1,16422,1,16423,1,16438,1,16439,1,16642,8,16646,8,16658,8,16662,8,18437,6,18439,6,18469,6,18471,6,18688,9,18689,9,18690,8,18693,6,18694,8,18695,6,18696,9,18697,9,18706,8,18710,8,18725,6,18727,6,131128,0,131129,0,131130,0,131131,0,131132,0,131133,0,131134,0,131135,0,131352,7,131354,7,131384,7,131386,7,133161,5,133165,5,133177,5,133181,5,133376,9,133377,9,133384,9,133385,9,133400,7,133402,7,133417,5,133421,5,133432,7,133433,5,133434,7,133437,5,147510,4,147511,4,147518,4,147519,4,147714,8,147718,8,147730,8,147734,8,147736,7,147738,7,147766,4,147767,4,147768,7,147770,7,147774,4,147775,4,149509,6,149511,6,149541,6,149543,6,149545,5,149549,5,149558,4,149559,4,149561,5,149565,5,149566,4,149567,4,149760,9,149761,9,149762,8,149765,6,149766,8,149767,6,149768,9,149769,9,149778,8,149782,8,149784,7,149786,7,149797,6,149799,6,149801,5,149805,5,149814,4,149815,4,149816,7,149817,5,149818,7,149821,5,149822,4,149823,4,149824,37,149825,37,149826,36,149829,34,149830,36,149831,34,149832,37,149833,37,149842,36,149846,36,149848,35,149850,35,149861,34,149863,34,149865,33,149869,33,149878,32,149879,32,149880,35,149881,33,149882,35,149885,33,149886,32,149887,32,150080,49,150082,48,150088,49,150098,48,150104,47,150106,47,151873,46,151877,45,151881,46,151909,45,151913,44,151917,44,152128,49,152129,46,152136,49,152137,46,166214,43,166215,42,166230,43,166247,42,166262,41,166263,41,166466,48,166470,43,166482,48,166486,43,168261,45,168263,42,168293,45,168295,42,168512,31,168513,28,168514,31,168517,28,168518,25,168519,25,280952,40,280953,39,280954,40,280957,39,280958,38,280959,38,281176,47,281178,47,281208,40,281210,40,282985,44,282989,44,283001,39,283005,39,283208,30,283209,27,283224,30,283241,27,283256,22,283257,22,297334,41,297335,41,297342,38,297343,38,297554,29,297558,24,297562,29,297590,24,297594,21,297598,21,299365,26,299367,23,299373,26,299383,23,299389,20,299391,20,299584,31,299585,28,299586,31,299589,28,299590,25,299591,25,299592,30,299593,27,299602,29,299606,24,299608,30,299610,29,299621,26,299623,23,299625,27,299629,26,299638,24,299639,23,299640,22,299641,22,299642,21,299645,20,299646,21,299647,20,299648,61,299649,60,299650,61,299653,60,299654,59,299655,59,299656,58,299657,57,299666,55,299670,54,299672,58,299674,55,299685,52,299687,51,299689,57,299693,52,299702,54,299703,51,299704,56,299705,56,299706,53,299709,50,299710,53,299711,50,299904,61,299906,61,299912,58,299922,55,299928,58,299930,55,301697,60,301701,60,301705,57,301733,52,301737,57,301741,52,301952,79,301953,79,301960,76,301961,76,316038,59,316039,59,316054,54,316071,51,316086,54,316087,51,316290,78,316294,78,316306,73,316310,73,318085,77,318087,77,318117,70,318119,70,318336,79,318337,79,318338,78,318341,77,318342,78,318343,77,430776,56,430777,56,430778,53,430781,50,430782,53,430783,50,431e3,75,431002,72,431032,75,431034,72,432809,74,432813,69,432825,74,432829,69,433032,76,433033,76,433048,75,433065,74,433080,75,433081,74,447158,71,447159,68,447166,71,447167,68,447378,73,447382,73,447386,72,447414,71,447418,72,447422,71,449189,70,449191,70,449197,69,449207,68,449213,69,449215,68,449408,67,449409,67,449410,66,449413,64,449414,66,449415,64,449416,67,449417,67,449426,66,449430,66,449432,65,449434,65,449445,64,449447,64,449449,63,449453,63,449462,62,449463,62,449464,65,449465,63,449466,65,449469,63,449470,62,449471,62,449472,19,449473,19,449474,18,449477,16,449478,18,449479,16,449480,19,449481,19,449490,18,449494,18,449496,17,449498,17,449509,16,449511,16,449513,15,449517,15,449526,14,449527,14,449528,17,449529,15,449530,17,449533,15,449534,14,449535,14,449728,19,449729,19,449730,18,449734,18,449736,19,449737,19,449746,18,449750,18,449752,17,449754,17,449784,17,449786,17,451520,19,451521,19,451525,16,451527,16,451528,19,451529,19,451557,16,451559,16,451561,15,451565,15,451577,15,451581,15,451776,19,451777,19,451784,19,451785,19,465858,18,465861,16,465862,18,465863,16,465874,18,465878,18,465893,16,465895,16,465910,14,465911,14,465918,14,465919,14,466114,18,466118,18,466130,18,466134,18,467909,16,467911,16,467941,16,467943,16,468160,13,468161,13,468162,13,468163,13,468164,13,468165,13,468166,13,468167,13,580568,17,580570,17,580585,15,580589,15,580598,14,580599,14,580600,17,580601,15,580602,17,580605,15,580606,14,580607,14,580824,17,580826,17,580856,17,580858,17,582633,15,582637,15,582649,15,582653,15,582856,12,582857,12,582872,12,582873,12,582888,12,582889,12,582904,12,582905,12,596982,14,596983,14,596990,14,596991,14,597202,11,597206,11,597210,11,597214,11,597234,11,597238,11,597242,11,597246,11,599013,10,599015,10,599021,10,599023,10,599029,10,599031,10,599037,10,599039,10,599232,13,599233,13,599234,13,599235,13,599236,13,599237,13,599238,13,599239,13,599240,12,599241,12,599250,11,599254,11,599256,12,599257,12,599258,11,599262,11,599269,10,599271,10,599272,12,599273,12,599277,10,599279,10,599282,11,599285,10,599286,11,599287,10,599288,12,599289,12,599290,11,599293,10,599294,11,599295,10],e.p2D=[0,0,1,-1,0,0,-1,1,0,2,1,1,1,2,2,0,1,2,0,2,1,0,0,0],e.p3D=[0,0,1,-1,0,0,1,0,-1,0,0,-1,1,0,0,0,1,-1,0,0,-1,0,1,0,0,-1,1,0,2,1,1,0,1,1,1,-1,0,2,1,0,1,1,1,-1,1,0,2,0,1,1,1,-1,1,1,1,3,2,1,0,3,1,2,0,1,3,2,0,1,3,1,0,2,1,3,0,2,1,3,0,1,2,1,1,1,0,0,2,2,0,0,1,1,0,1,0,2,0,2,0,1,1,0,0,1,2,0,0,2,2,0,0,0,0,1,1,-1,1,2,0,0,0,0,1,-1,1,1,2,0,0,0,0,1,1,1,-1,2,3,1,1,1,2,0,0,2,2,3,1,1,1,2,2,0,0,2,3,1,1,1,2,0,2,0,2,1,1,-1,1,2,0,0,2,2,1,1,-1,1,2,2,0,0,2,1,-1,1,1,2,0,0,2,2,1,-1,1,1,2,0,2,0,2,1,1,1,-1,2,2,0,0,2,1,1,1,-1,2,0,2,0],e.p4D=[0,0,1,-1,0,0,0,1,0,-1,0,0,1,0,0,-1,0,0,-1,1,0,0,0,0,1,-1,0,0,0,1,0,-1,0,0,-1,0,1,0,0,0,-1,1,0,0,0,0,1,-1,0,0,-1,0,0,1,0,0,-1,0,1,0,0,0,-1,1,0,2,1,1,0,0,1,1,1,-1,0,1,1,1,0,-1,0,2,1,0,1,0,1,1,-1,1,0,1,1,0,1,-1,0,2,0,1,1,0,1,-1,1,1,0,1,0,1,1,-1,0,2,1,0,0,1,1,1,-1,0,1,1,1,0,-1,1,0,2,0,1,0,1,1,-1,1,0,1,1,0,1,-1,1,0,2,0,0,1,1,1,-1,0,1,1,1,0,-1,1,1,1,4,2,1,1,0,4,1,2,1,0,4,1,1,2,0,1,4,2,1,0,1,4,1,2,0,1,4,1,1,0,2,1,4,2,0,1,1,4,1,0,2,1,4,1,0,1,2,1,4,0,2,1,1,4,0,1,2,1,4,0,1,1,2,1,2,1,1,0,0,3,2,1,0,0,3,1,2,0,0,1,2,1,0,1,0,3,2,0,1,0,3,1,0,2,0,1,2,0,1,1,0,3,0,2,1,0,3,0,1,2,0,1,2,1,0,0,1,3,2,0,0,1,3,1,0,0,2,1,2,0,1,0,1,3,0,2,0,1,3,0,1,0,2,1,2,0,0,1,1,3,0,0,2,1,3,0,0,1,2,2,3,1,1,1,0,2,1,1,1,-1,2,2,0,0,0,2,3,1,1,0,1,2,1,1,-1,1,2,2,0,0,0,2,3,1,0,1,1,2,1,-1,1,1,2,2,0,0,0,2,3,1,1,1,0,2,1,1,1,-1,2,0,2,0,0,2,3,1,1,0,1,2,1,1,-1,1,2,0,2,0,0,2,3,0,1,1,1,2,-1,1,1,1,2,0,2,0,0,2,3,1,1,1,0,2,1,1,1,-1,2,0,0,2,0,2,3,1,0,1,1,2,1,-1,1,1,2,0,0,2,0,2,3,0,1,1,1,2,-1,1,1,1,2,0,0,2,0,2,3,1,1,0,1,2,1,1,-1,1,2,0,0,0,2,2,3,1,0,1,1,2,1,-1,1,1,2,0,0,0,2,2,3,0,1,1,1,2,-1,1,1,1,2,0,0,0,2,2,1,1,1,-1,0,1,1,1,0,-1,0,0,0,0,0,2,1,1,-1,1,0,1,1,0,1,-1,0,0,0,0,0,2,1,-1,1,1,0,1,0,1,1,-1,0,0,0,0,0,2,1,1,-1,0,1,1,1,0,-1,1,0,0,0,0,0,2,1,-1,1,0,1,1,0,1,-1,1,0,0,0,0,0,2,1,-1,0,1,1,1,0,-1,1,1,0,0,0,0,0,2,1,1,1,-1,0,1,1,1,0,-1,2,2,0,0,0,2,1,1,-1,1,0,1,1,0,1,-1,2,2,0,0,0,2,1,1,-1,0,1,1,1,0,-1,1,2,2,0,0,0,2,1,1,1,-1,0,1,1,1,0,-1,2,0,2,0,0,2,1,-1,1,1,0,1,0,1,1,-1,2,0,2,0,0,2,1,-1,1,0,1,1,0,1,-1,1,2,0,2,0,0,2,1,1,-1,1,0,1,1,0,1,-1,2,0,0,2,0,2,1,-1,1,1,0,1,0,1,1,-1,2,0,0,2,0,2,1,-1,0,1,1,1,0,-1,1,1,2,0,0,2,0,2,1,1,-1,0,1,1,1,0,-1,1,2,0,0,0,2,2,1,-1,1,0,1,1,0,1,-1,1,2,0,0,0,2,2,1,-1,0,1,1,1,0,-1,1,1,2,0,0,0,2,3,1,1,0,0,0,2,2,0,0,0,2,1,1,1,-1,3,1,0,1,0,0,2,0,2,0,0,2,1,1,1,-1,3,1,0,0,1,0,2,0,0,2,0,2,1,1,1,-1,3,1,1,0,0,0,2,2,0,0,0,2,1,1,-1,1,3,1,0,1,0,0,2,0,2,0,0,2,1,1,-1,1,3,1,0,0,0,1,2,0,0,0,2,2,1,1,-1,1,3,1,1,0,0,0,2,2,0,0,0,2,1,-1,1,1,3,1,0,0,1,0,2,0,0,2,0,2,1,-1,1,1,3,1,0,0,0,1,2,0,0,0,2,2,1,-1,1,1,3,1,0,1,0,0,2,0,2,0,0,2,-1,1,1,1,3,1,0,0,1,0,2,0,0,2,0,2,-1,1,1,1,3,1,0,0,0,1,2,0,0,0,2,2,-1,1,1,1,3,3,2,1,0,0,3,1,2,0,0,4,1,1,1,1,3,3,2,0,1,0,3,1,0,2,0,4,1,1,1,1,3,3,0,2,1,0,3,0,1,2,0,4,1,1,1,1,3,3,2,0,0,1,3,1,0,0,2,4,1,1,1,1,3,3,0,2,0,1,3,0,1,0,2,4,1,1,1,1,3,3,0,0,2,1,3,0,0,1,2,4,1,1,1,1,3,3,2,1,0,0,3,1,2,0,0,2,1,1,1,-1,3,3,2,0,1,0,3,1,0,2,0,2,1,1,1,-1,3,3,0,2,1,0,3,0,1,2,0,2,1,1,1,-1,3,3,2,1,0,0,3,1,2,0,0,2,1,1,-1,1,3,3,2,0,0,1,3,1,0,0,2,2,1,1,-1,1,3,3,0,2,0,1,3,0,1,0,2,2,1,1,-1,1,3,3,2,0,1,0,3,1,0,2,0,2,1,-1,1,1,3,3,2,0,0,1,3,1,0,0,2,2,1,-1,1,1,3,3,0,0,2,1,3,0,0,1,2,2,1,-1,1,1,3,3,0,2,1,0,3,0,1,2,0,2,-1,1,1,1,3,3,0,2,0,1,3,0,1,0,2,2,-1,1,1,1,3,3,0,0,2,1,3,0,0,1,2,2,-1,1,1,1]},function(t,e,i){"use strict";i.r(e);class r{constructor(){this.filePaths=["sprites/catWalk1.json","sprites/catStop.json","sprites/catIdle.json","sprites/catJump.json","sprites/wallSlide.json","sprites/catHang.json","sprites/catClimbFull.json","sprites/catFall.json","sprites/cathouse_r1.png","sprites/tileSet2.json","sprites/torchSprites.json","sprites/keys.json","sprites/menuButtons.json","shaders/lightFilterVert.GLSL","shaders/lightFilterFrag.GLSL","shaders/lightVert.GLSL","shaders/lightFrag.GLSL","shaders/catnip-effect/catnipVert.GLSL","shaders/catnip-effect/catnipFrag.GLSL","shaders/dissolve/dissolveVert.GLSL","shaders/dissolve/dissolveFrag.GLSL","shaders/BezierDisplacementFilter/BezierDispVert.GLSL","shaders/BezierDisplacementFilter/BezierDispFrag.GLSL"]}array(){return this.filePaths}}let n=PIXI.loader,o=PIXI.loader.resources;var s=i(0),a=i.n(s),h=function(t){this.items=[],this._name=t,this._aliasCount=0},l={empty:{configurable:!0},name:{configurable:!0}};h.prototype.emit=function(t,e,i,r,n,o,s,a){if(arguments.length>8)throw new Error("max arguments reached");var h=this,l=h.name,u=h.items;this._aliasCount++;for(var c=0,d=u.length;c<d;c++)u[c][l](t,e,i,r,n,o,s,a);return u===this.items&&this._aliasCount--,this},h.prototype.ensureNonAliasedItems=function(){this._aliasCount>0&&this.items.length>1&&(this._aliasCount=0,this.items=this.items.slice(0))},h.prototype.add=function(t){return t[this._name]&&(this.ensureNonAliasedItems(),this.remove(t),this.items.push(t)),this},h.prototype.remove=function(t){var e=this.items.indexOf(t);return-1!==e&&(this.ensureNonAliasedItems(),this.items.splice(e,1)),this},h.prototype.contains=function(t){return-1!==this.items.indexOf(t)},h.prototype.removeAll=function(){return this.ensureNonAliasedItems(),this.items.length=0,this},h.prototype.destroy=function(){this.removeAll(),this.items=null,this._name=null},l.empty.get=function(){return 0===this.items.length},l.name.get=function(){return this._name},Object.defineProperties(h.prototype,l),h.prototype.dispatch=h.prototype.emit,h.prototype.run=h.prototype.emit;var u=i(1),c=i.n(u);var d={MIPMAP_TEXTURES:1,ANISOTROPIC_LEVEL:0,RESOLUTION:1,FILTER_RESOLUTION:1,SPRITE_MAX_TEXTURES:
/*!
 * @pixi/settings - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/settings is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
function(t){var e=!0;if(c.a.tablet||c.a.phone){if(e=!1,c.a.apple.device){var i=navigator.userAgent.match(/OS (\d+)_(\d+)?/);if(i)parseInt(i[1],10)>=11&&(e=!0)}if(c.a.android.device){var r=navigator.userAgent.match(/Android\s([0-9.]*)/);if(r)parseInt(r[1],10)>=7&&(e=!0)}}return e?t:4}(32),SPRITE_BATCH_SIZE:4096,RENDER_OPTIONS:{view:null,antialias:!1,forceFXAA:!1,autoDensity:!1,transparent:!1,backgroundColor:0,clearBeforeRender:!0,preserveDrawingBuffer:!1,width:800,height:600,legacy:!1},GC_MODE:0,GC_MAX_IDLE:3600,GC_MAX_CHECK_COUNT:600,WRAP_MODE:33071,SCALE_MODE:1,PRECISION_VERTEX:"highp",PRECISION_FRAGMENT:c.a.apple.device?"highp":"mediump",CAN_UPLOAD_SAME_BUFFER:!c.a.apple.device,CREATE_IMAGE_BITMAP:!1,ROUND_PIXELS:!1},p=i(5),f=i.n(p),m=(i(6),i(2)),y=i.n(m),v=0,g=1,x=2,b=0,w=1,_=0,S=1,T=2,C=3,I=4,E=5,A=6,P=7,M=8,O=9,k=10,B=11,R=12,D=13,F=14,L=15,N=16,U=17,V=18,X=19,j=20,z=21,G=22,H=23,W=24,Y=25,q=26,Z=27,K=28,Q=4,J=5,$=6408,tt=6402,et=3553,it=34067,rt=35866,nt=34069,ot=5121,st=5123,at=5126,ht=36193,lt=1,ut=0,ct=33071,dt=1,pt=1,ft="mediump",mt="highp";
/*!
 * @pixi/utils - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/utils is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
d.RETINA_PREFIX=/@([0-9\.]+)x/,d.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT=!0;var yt,vt=!1;function gt(t,e){return(e=e||[])[0]=(t>>16&255)/255,e[1]=(t>>8&255)/255,e[2]=(255&t)/255,e}function xt(t){return(255*t[0]<<16)+(255*t[1]<<8)+(255*t[2]|0)}var bt=function(){for(var t=[],e=[],i=0;i<32;i++)t[i]=i,e[i]=i;t[U]=_,t[V]=S,t[X]=C,e[_]=U,e[S]=V,e[C]=X;var r=[];return r.push(e),r.push(t),r}();function wt(t,e,i){var r,n=t.length;if(!(e>=n||0===i)){var o=n-(i=e+i>n?n-e:i);for(r=e;r<o;++r)t[r]=t[r+i];t.length=o}}var _t=0;function St(){return++_t}function Tt(t){return t+=0===t,--t,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,(t|=t>>>16)+1}function Ct(t){return!(t&t-1||!t)}function It(t){var e=(t>65535)<<4,i=((t>>>=e)>255)<<3;return e|=i,e|=i=((t>>>=i)>15)<<2,(e|=i=((t>>>=i)>3)<<1)|(t>>>=i)>>1}var Et={},At=Object.create(null),Pt=Object.create(null);var Mt=function(t,e,i){this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.resolution=i||d.RESOLUTION,this.resize(t,e)},Ot={width:{configurable:!0},height:{configurable:!0}};Mt.prototype.clear=function(){this.context.setTransform(1,0,0,1,0,0),this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},Mt.prototype.resize=function(t,e){this.canvas.width=t*this.resolution,this.canvas.height=e*this.resolution},Mt.prototype.destroy=function(){this.context=null,this.canvas=null},Ot.width.get=function(){return this.canvas.width},Ot.width.set=function(t){this.canvas.width=t},Ot.height.get=function(){return this.canvas.height},Ot.height.set=function(t){this.canvas.height=t},Object.defineProperties(Mt.prototype,Ot);var kt;function Bt(t,e){var i=d.RETINA_PREFIX.exec(t);return i?parseFloat(i[1]):void 0!==e?e:1}var Rt={};
/*!
 * @pixi/ticker - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/ticker is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
d.TARGET_FPMS=.06;var Dt=0,Ft=-25,Lt=function(t,e,i,r){void 0===e&&(e=null),void 0===i&&(i=0),void 0===r&&(r=!1),this.fn=t,this.context=e,this.priority=i,this.once=r,this.next=null,this.previous=null,this._destroyed=!1};Lt.prototype.match=function(t,e){return e=e||null,this.fn===t&&this.context===e},Lt.prototype.emit=function(t){this.fn&&(this.context?this.fn.call(this.context,t):this.fn(t));var e=this.next;return this.once&&this.destroy(!0),this._destroyed&&(this.next=null),e},Lt.prototype.connect=function(t){this.previous=t,t.next&&(t.next.previous=this),this.next=t.next,t.next=this},Lt.prototype.destroy=function(t){void 0===t&&(t=!1),this._destroyed=!0,this.fn=null,this.context=null,this.previous&&(this.previous.next=this.next),this.next&&(this.next.previous=this.previous);var e=this.next;return this.next=t?null:e,this.previous=null,e};var Nt=function(){var t=this;this._head=new Lt(null,null,1/0),this._requestId=null,this._maxElapsedMS=100,this._minElapsedMS=0,this.autoStart=!1,this.deltaTime=1,this.deltaMS=1/d.TARGET_FPMS,this.elapsedMS=1/d.TARGET_FPMS,this.lastTime=-1,this.speed=1,this.started=!1,this._protected=!1,this._lastFrame=-1,this._tick=function(e){t._requestId=null,t.started&&(t.update(e),t.started&&null===t._requestId&&t._head.next&&(t._requestId=requestAnimationFrame(t._tick)))}},Ut={FPS:{configurable:!0},minFPS:{configurable:!0},maxFPS:{configurable:!0}},Vt={shared:{configurable:!0},system:{configurable:!0}};Nt.prototype._requestIfNeeded=function(){null===this._requestId&&this._head.next&&(this.lastTime=performance.now(),this._lastFrame=this.lastTime,this._requestId=requestAnimationFrame(this._tick))},Nt.prototype._cancelIfNeeded=function(){null!==this._requestId&&(cancelAnimationFrame(this._requestId),this._requestId=null)},Nt.prototype._startIfPossible=function(){this.started?this._requestIfNeeded():this.autoStart&&this.start()},Nt.prototype.add=function(t,e,i){return void 0===i&&(i=Dt),this._addListener(new Lt(t,e,i))},Nt.prototype.addOnce=function(t,e,i){return void 0===i&&(i=Dt),this._addListener(new Lt(t,e,i,!0))},Nt.prototype._addListener=function(t){var e=this._head.next,i=this._head;if(e){for(;e;){if(t.priority>e.priority){t.connect(i);break}i=e,e=e.next}t.previous||t.connect(i)}else t.connect(i);return this._startIfPossible(),this},Nt.prototype.remove=function(t,e){for(var i=this._head.next;i;)i=i.match(t,e)?i.destroy():i.next;return this._head.next||this._cancelIfNeeded(),this},Nt.prototype.start=function(){this.started||(this.started=!0,this._requestIfNeeded())},Nt.prototype.stop=function(){this.started&&(this.started=!1,this._cancelIfNeeded())},Nt.prototype.destroy=function(){if(!this._protected){this.stop();for(var t=this._head.next;t;)t=t.destroy(!0);this._head.destroy(),this._head=null}},Nt.prototype.update=function(t){var e;if(void 0===t&&(t=performance.now()),t>this.lastTime){if((e=this.elapsedMS=t-this.lastTime)>this._maxElapsedMS&&(e=this._maxElapsedMS),e*=this.speed,this._minElapsedMS){var i=t-this._lastFrame|0;if(i<this._minElapsedMS)return;this._lastFrame=t-i%this._minElapsedMS}this.deltaMS=e,this.deltaTime=this.deltaMS*d.TARGET_FPMS;for(var r=this._head,n=r.next;n;)n=n.emit(this.deltaTime);r.next||this._cancelIfNeeded()}else this.deltaTime=this.deltaMS=this.elapsedMS=0;this.lastTime=t},Ut.FPS.get=function(){return 1e3/this.elapsedMS},Ut.minFPS.get=function(){return 1e3/this._maxElapsedMS},Ut.minFPS.set=function(t){var e=Math.min(this.maxFPS,t),i=Math.min(Math.max(0,e)/1e3,d.TARGET_FPMS);this._maxElapsedMS=1/i},Ut.maxFPS.get=function(){return this._minElapsedMS?Math.round(1e3/this._minElapsedMS):0},Ut.maxFPS.set=function(t){if(0===t)this._minElapsedMS=0;else{var e=Math.max(this.minFPS,t);this._minElapsedMS=1/(e/1e3)}},Vt.shared.get=function(){if(!Nt._shared){var t=Nt._shared=new Nt;t.autoStart=!0,t._protected=!0}return Nt._shared},Vt.system.get=function(){if(!Nt._system){var t=Nt._system=new Nt;t.autoStart=!0,t._protected=!0}return Nt._system},Object.defineProperties(Nt.prototype,Ut),Object.defineProperties(Nt,Vt);var Xt=function(){};Xt.init=function(t){var e=this;t=Object.assign({autoStart:!0,sharedTicker:!1},t),Object.defineProperty(this,"ticker",{set:function(t){this._ticker&&this._ticker.remove(this.render,this),this._ticker=t,t&&t.add(this.render,this,Ft)},get:function(){return this._ticker}}),this.stop=function(){e._ticker.stop()},this.start=function(){e._ticker.start()},this._ticker=null,this.ticker=t.sharedTicker?Nt.shared:new Nt,t.autoStart&&this.start()},Xt.destroy=function(){if(this._ticker){var t=this._ticker;this.ticker=null,t.destroy()}};
/*!
 * @pixi/math - v5.1.0
 * Compiled Fri, 19 Jul 2019 21:54:36 UTC
 *
 * @pixi/math is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var jt=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e};jt.prototype.clone=function(){return new jt(this.x,this.y)},jt.prototype.copyFrom=function(t){return this.set(t.x,t.y),this},jt.prototype.copyTo=function(t){return t.set(this.x,this.y),t},jt.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},jt.prototype.set=function(t,e){this.x=t||0,this.y=e||(0!==e?this.x:0)};var zt=function(t,e,i,r){void 0===i&&(i=0),void 0===r&&(r=0),this._x=i,this._y=r,this.cb=t,this.scope=e},Gt={x:{configurable:!0},y:{configurable:!0}};zt.prototype.clone=function(t,e){void 0===t&&(t=null),void 0===e&&(e=null);var i=t||this.cb,r=e||this.scope;return new zt(i,r,this._x,this._y)},zt.prototype.set=function(t,e){var i=t||0,r=e||(0!==e?i:0);this._x===i&&this._y===r||(this._x=i,this._y=r,this.cb.call(this.scope))},zt.prototype.copyFrom=function(t){return this._x===t.x&&this._y===t.y||(this._x=t.x,this._y=t.y,this.cb.call(this.scope)),this},zt.prototype.copyTo=function(t){return t.set(this._x,this._y),t},zt.prototype.equals=function(t){return t.x===this._x&&t.y===this._y},Gt.x.get=function(){return this._x},Gt.x.set=function(t){this._x!==t&&(this._x=t,this.cb.call(this.scope))},Gt.y.get=function(){return this._y},Gt.y.set=function(t){this._y!==t&&(this._y=t,this.cb.call(this.scope))},Object.defineProperties(zt.prototype,Gt);var Ht=2*Math.PI,Wt=180/Math.PI,Yt=Math.PI/180,qt=0,Zt=1,Kt=2,Qt=3,Jt=4,$t=function(t,e,i,r,n,o){void 0===t&&(t=1),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=1),void 0===n&&(n=0),void 0===o&&(o=0),this.a=t,this.b=e,this.c=i,this.d=r,this.tx=n,this.ty=o,this.array=null},te={IDENTITY:{configurable:!0},TEMP_MATRIX:{configurable:!0}};$t.prototype.fromArray=function(t){this.a=t[0],this.b=t[1],this.c=t[3],this.d=t[4],this.tx=t[2],this.ty=t[5]},$t.prototype.set=function(t,e,i,r,n,o){return this.a=t,this.b=e,this.c=i,this.d=r,this.tx=n,this.ty=o,this},$t.prototype.toArray=function(t,e){this.array||(this.array=new Float32Array(9));var i=e||this.array;return t?(i[0]=this.a,i[1]=this.b,i[2]=0,i[3]=this.c,i[4]=this.d,i[5]=0,i[6]=this.tx,i[7]=this.ty,i[8]=1):(i[0]=this.a,i[1]=this.c,i[2]=this.tx,i[3]=this.b,i[4]=this.d,i[5]=this.ty,i[6]=0,i[7]=0,i[8]=1),i},$t.prototype.apply=function(t,e){e=e||new jt;var i=t.x,r=t.y;return e.x=this.a*i+this.c*r+this.tx,e.y=this.b*i+this.d*r+this.ty,e},$t.prototype.applyInverse=function(t,e){e=e||new jt;var i=1/(this.a*this.d+this.c*-this.b),r=t.x,n=t.y;return e.x=this.d*i*r+-this.c*i*n+(this.ty*this.c-this.tx*this.d)*i,e.y=this.a*i*n+-this.b*i*r+(-this.ty*this.a+this.tx*this.b)*i,e},$t.prototype.translate=function(t,e){return this.tx+=t,this.ty+=e,this},$t.prototype.scale=function(t,e){return this.a*=t,this.d*=e,this.c*=t,this.b*=e,this.tx*=t,this.ty*=e,this},$t.prototype.rotate=function(t){var e=Math.cos(t),i=Math.sin(t),r=this.a,n=this.c,o=this.tx;return this.a=r*e-this.b*i,this.b=r*i+this.b*e,this.c=n*e-this.d*i,this.d=n*i+this.d*e,this.tx=o*e-this.ty*i,this.ty=o*i+this.ty*e,this},$t.prototype.append=function(t){var e=this.a,i=this.b,r=this.c,n=this.d;return this.a=t.a*e+t.b*r,this.b=t.a*i+t.b*n,this.c=t.c*e+t.d*r,this.d=t.c*i+t.d*n,this.tx=t.tx*e+t.ty*r+this.tx,this.ty=t.tx*i+t.ty*n+this.ty,this},$t.prototype.setTransform=function(t,e,i,r,n,o,s,a,h){return this.a=Math.cos(s+h)*n,this.b=Math.sin(s+h)*n,this.c=-Math.sin(s-a)*o,this.d=Math.cos(s-a)*o,this.tx=t-(i*this.a+r*this.c),this.ty=e-(i*this.b+r*this.d),this},$t.prototype.prepend=function(t){var e=this.tx;if(1!==t.a||0!==t.b||0!==t.c||1!==t.d){var i=this.a,r=this.c;this.a=i*t.a+this.b*t.c,this.b=i*t.b+this.b*t.d,this.c=r*t.a+this.d*t.c,this.d=r*t.b+this.d*t.d}return this.tx=e*t.a+this.ty*t.c+t.tx,this.ty=e*t.b+this.ty*t.d+t.ty,this},$t.prototype.decompose=function(t){var e=this.a,i=this.b,r=this.c,n=this.d,o=-Math.atan2(-r,n),s=Math.atan2(i,e),a=Math.abs(o+s);return a<1e-5||Math.abs(Ht-a)<1e-5?(t.rotation=s,t.skew.x=t.skew.y=0):(t.rotation=0,t.skew.x=o,t.skew.y=s),t.scale.x=Math.sqrt(e*e+i*i),t.scale.y=Math.sqrt(r*r+n*n),t.position.x=this.tx,t.position.y=this.ty,t},$t.prototype.invert=function(){var t=this.a,e=this.b,i=this.c,r=this.d,n=this.tx,o=t*r-e*i;return this.a=r/o,this.b=-e/o,this.c=-i/o,this.d=t/o,this.tx=(i*this.ty-r*n)/o,this.ty=-(t*this.ty-e*n)/o,this},$t.prototype.identity=function(){return this.a=1,this.b=0,this.c=0,this.d=1,this.tx=0,this.ty=0,this},$t.prototype.clone=function(){var t=new $t;return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t},$t.prototype.copyTo=function(t){return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t},$t.prototype.copyFrom=function(t){return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.tx=t.tx,this.ty=t.ty,this},te.IDENTITY.get=function(){return new $t},te.TEMP_MATRIX.get=function(){return new $t},Object.defineProperties($t,te);var ee=[1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1,0,1],ie=[0,1,1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1],re=[0,-1,-1,-1,0,1,1,1,0,1,1,1,0,-1,-1,-1],ne=[1,1,0,-1,-1,-1,0,1,-1,-1,0,1,1,1,0,-1],oe=[],se=[],ae=Math.sign;!function(){for(var t=0;t<16;t++){var e=[];oe.push(e);for(var i=0;i<16;i++)for(var r=ae(ee[t]*ee[i]+re[t]*ie[i]),n=ae(ie[t]*ee[i]+ne[t]*ie[i]),o=ae(ee[t]*re[i]+re[t]*ne[i]),s=ae(ie[t]*re[i]+ne[t]*ne[i]),a=0;a<16;a++)if(ee[a]===r&&ie[a]===n&&re[a]===o&&ne[a]===s){e.push(a);break}}for(var h=0;h<16;h++){var l=new $t;l.set(ee[h],ie[h],re[h],ne[h],0,0),se.push(l)}}();var he={E:0,SE:1,S:2,SW:3,W:4,NW:5,N:6,NE:7,MIRROR_VERTICAL:8,MAIN_DIAGONAL:10,MIRROR_HORIZONTAL:12,REVERSE_DIAGONAL:14,uX:function(t){return ee[t]},uY:function(t){return ie[t]},vX:function(t){return re[t]},vY:function(t){return ne[t]},inv:function(t){return 8&t?15&t:7&-t},add:function(t,e){return oe[t][e]},sub:function(t,e){return oe[t][he.inv(e)]},rotate180:function(t){return 4^t},isVertical:function(t){return 2==(3&t)},byDirection:function(t,e){return 2*Math.abs(t)<=Math.abs(e)?e>=0?he.S:he.N:2*Math.abs(e)<=Math.abs(t)?t>0?he.E:he.W:e>0?t>0?he.SE:he.SW:t>0?he.NE:he.NW},matrixAppendRotationInv:function(t,e,i,r){void 0===i&&(i=0),void 0===r&&(r=0);var n=se[he.inv(e)];n.tx=i,n.ty=r,t.append(n)}},le=function(){this.worldTransform=new $t,this.localTransform=new $t,this.position=new zt(this.onChange,this,0,0),this.scale=new zt(this.onChange,this,1,1),this.pivot=new zt(this.onChange,this,0,0),this.skew=new zt(this.updateSkew,this,0,0),this._rotation=0,this._cx=1,this._sx=0,this._cy=0,this._sy=1,this._localID=0,this._currentLocalID=0,this._worldID=0,this._parentID=0},ue={rotation:{configurable:!0}};le.prototype.onChange=function(){this._localID++},le.prototype.updateSkew=function(){this._cx=Math.cos(this._rotation+this.skew._y),this._sx=Math.sin(this._rotation+this.skew._y),this._cy=-Math.sin(this._rotation-this.skew._x),this._sy=Math.cos(this._rotation-this.skew._x),this._localID++},le.prototype.updateLocalTransform=function(){var t=this.localTransform;this._localID!==this._currentLocalID&&(t.a=this._cx*this.scale._x,t.b=this._sx*this.scale._x,t.c=this._cy*this.scale._y,t.d=this._sy*this.scale._y,t.tx=this.position._x-(this.pivot._x*t.a+this.pivot._y*t.c),t.ty=this.position._y-(this.pivot._x*t.b+this.pivot._y*t.d),this._currentLocalID=this._localID,this._parentID=-1)},le.prototype.updateTransform=function(t){var e=this.localTransform;if(this._localID!==this._currentLocalID&&(e.a=this._cx*this.scale._x,e.b=this._sx*this.scale._x,e.c=this._cy*this.scale._y,e.d=this._sy*this.scale._y,e.tx=this.position._x-(this.pivot._x*e.a+this.pivot._y*e.c),e.ty=this.position._y-(this.pivot._x*e.b+this.pivot._y*e.d),this._currentLocalID=this._localID,this._parentID=-1),this._parentID!==t._worldID){var i=t.worldTransform,r=this.worldTransform;r.a=e.a*i.a+e.b*i.c,r.b=e.a*i.b+e.b*i.d,r.c=e.c*i.a+e.d*i.c,r.d=e.c*i.b+e.d*i.d,r.tx=e.tx*i.a+e.ty*i.c+i.tx,r.ty=e.tx*i.b+e.ty*i.d+i.ty,this._parentID=t._worldID,this._worldID++}},le.prototype.setFromMatrix=function(t){t.decompose(this),this._localID++},ue.rotation.get=function(){return this._rotation},ue.rotation.set=function(t){this._rotation!==t&&(this._rotation=t,this.updateSkew())},Object.defineProperties(le.prototype,ue),le.IDENTITY=new le;var ce=function(t,e,i,r){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=0),this.x=Number(t),this.y=Number(e),this.width=Number(i),this.height=Number(r),this.type=Zt},de={left:{configurable:!0},right:{configurable:!0},top:{configurable:!0},bottom:{configurable:!0}},pe={EMPTY:{configurable:!0}};de.left.get=function(){return this.x},de.right.get=function(){return this.x+this.width},de.top.get=function(){return this.y},de.bottom.get=function(){return this.y+this.height},pe.EMPTY.get=function(){return new ce(0,0,0,0)},ce.prototype.clone=function(){return new ce(this.x,this.y,this.width,this.height)},ce.prototype.copyFrom=function(t){return this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this},ce.prototype.copyTo=function(t){return t.x=this.x,t.y=this.y,t.width=this.width,t.height=this.height,t},ce.prototype.contains=function(t,e){return!(this.width<=0||this.height<=0)&&(t>=this.x&&t<this.x+this.width&&e>=this.y&&e<this.y+this.height)},ce.prototype.pad=function(t,e){t=t||0,e=e||(0!==e?t:0),this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e},ce.prototype.fit=function(t){var e=Math.max(this.x,t.x),i=Math.min(this.x+this.width,t.x+t.width),r=Math.max(this.y,t.y),n=Math.min(this.y+this.height,t.y+t.height);this.x=e,this.width=Math.max(i-e,0),this.y=r,this.height=Math.max(n-r,0)},ce.prototype.ceil=function(t,e){void 0===t&&(t=1),void 0===e&&(e=.001);var i=Math.ceil((this.x+this.width-e)*t)/t,r=Math.ceil((this.y+this.height-e)*t)/t;this.x=Math.floor((this.x+e)*t)/t,this.y=Math.floor((this.y+e)*t)/t,this.width=i-this.x,this.height=r-this.y},ce.prototype.enlarge=function(t){var e=Math.min(this.x,t.x),i=Math.max(this.x+this.width,t.x+t.width),r=Math.min(this.y,t.y),n=Math.max(this.y+this.height,t.y+t.height);this.x=e,this.width=i-e,this.y=r,this.height=n-r},Object.defineProperties(ce.prototype,de),Object.defineProperties(ce,pe);var fe=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),this.x=t,this.y=e,this.radius=i,this.type=Kt};fe.prototype.clone=function(){return new fe(this.x,this.y,this.radius)},fe.prototype.contains=function(t,e){if(this.radius<=0)return!1;var i=this.radius*this.radius,r=this.x-t,n=this.y-e;return(r*=r)+(n*=n)<=i},fe.prototype.getBounds=function(){return new ce(this.x-this.radius,this.y-this.radius,2*this.radius,2*this.radius)};var me=function(t,e,i,r){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=0),this.x=t,this.y=e,this.width=i,this.height=r,this.type=Qt};me.prototype.clone=function(){return new me(this.x,this.y,this.width,this.height)},me.prototype.contains=function(t,e){if(this.width<=0||this.height<=0)return!1;var i=(t-this.x)/this.width,r=(e-this.y)/this.height;return(i*=i)+(r*=r)<=1},me.prototype.getBounds=function(){return new ce(this.x-this.width,this.y-this.height,this.width,this.height)};var ye=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(Array.isArray(t[0])&&(t=t[0]),t[0]instanceof jt){for(var i=[],r=0,n=t.length;r<n;r++)i.push(t[r].x,t[r].y);t=i}this.points=t,this.type=qt,this.closeStroke=!0};ye.prototype.clone=function(){var t=new ye(this.points.slice());return t.closeStroke=this.closeStroke,t},ye.prototype.contains=function(t,e){for(var i=!1,r=this.points.length/2,n=0,o=r-1;n<r;o=n++){var s=this.points[2*n],a=this.points[2*n+1],h=this.points[2*o],l=this.points[2*o+1];a>e!=l>e&&t<(e-a)/(l-a)*(h-s)+s&&(i=!i)}return i};var ve=function(t,e,i,r,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=0),void 0===n&&(n=20),this.x=t,this.y=e,this.width=i,this.height=r,this.radius=n,this.type=Jt};ve.prototype.clone=function(){return new ve(this.x,this.y,this.width,this.height,this.radius)},ve.prototype.contains=function(t,e){if(this.width<=0||this.height<=0)return!1;if(t>=this.x&&t<=this.x+this.width&&e>=this.y&&e<=this.y+this.height){if(e>=this.y+this.radius&&e<=this.y+this.height-this.radius||t>=this.x+this.radius&&t<=this.x+this.width-this.radius)return!0;var i=t-(this.x+this.radius),r=e-(this.y+this.radius),n=this.radius*this.radius;if(i*i+r*r<=n)return!0;if((i=t-(this.x+this.width-this.radius))*i+r*r<=n)return!0;if(i*i+(r=e-(this.y+this.height-this.radius))*r<=n)return!0;if((i=t-(this.x+this.radius))*i+r*r<=n)return!0}return!1},
/*!
 * @pixi/display - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/display is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
d.SORTABLE_CHILDREN=!1;var ge=function(){this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0,this.rect=null};ge.prototype.isEmpty=function(){return this.minX>this.maxX||this.minY>this.maxY},ge.prototype.clear=function(){this.updateID++,this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0},ge.prototype.getRectangle=function(t){return this.minX>this.maxX||this.minY>this.maxY?ce.EMPTY:((t=t||new ce(0,0,1,1)).x=this.minX,t.y=this.minY,t.width=this.maxX-this.minX,t.height=this.maxY-this.minY,t)},ge.prototype.addPoint=function(t){this.minX=Math.min(this.minX,t.x),this.maxX=Math.max(this.maxX,t.x),this.minY=Math.min(this.minY,t.y),this.maxY=Math.max(this.maxY,t.y)},ge.prototype.addQuad=function(t){var e=this.minX,i=this.minY,r=this.maxX,n=this.maxY,o=t[0],s=t[1];e=o<e?o:e,i=s<i?s:i,r=o>r?o:r,n=s>n?s:n,e=(o=t[2])<e?o:e,i=(s=t[3])<i?s:i,r=o>r?o:r,n=s>n?s:n,e=(o=t[4])<e?o:e,i=(s=t[5])<i?s:i,r=o>r?o:r,n=s>n?s:n,e=(o=t[6])<e?o:e,i=(s=t[7])<i?s:i,r=o>r?o:r,n=s>n?s:n,this.minX=e,this.minY=i,this.maxX=r,this.maxY=n},ge.prototype.addFrame=function(t,e,i,r,n){var o=t.worldTransform,s=o.a,a=o.b,h=o.c,l=o.d,u=o.tx,c=o.ty,d=this.minX,p=this.minY,f=this.maxX,m=this.maxY,y=s*e+h*i+u,v=a*e+l*i+c;d=y<d?y:d,p=v<p?v:p,f=y>f?y:f,m=v>m?v:m,d=(y=s*r+h*i+u)<d?y:d,p=(v=a*r+l*i+c)<p?v:p,f=y>f?y:f,m=v>m?v:m,d=(y=s*e+h*n+u)<d?y:d,p=(v=a*e+l*n+c)<p?v:p,f=y>f?y:f,m=v>m?v:m,d=(y=s*r+h*n+u)<d?y:d,p=(v=a*r+l*n+c)<p?v:p,f=y>f?y:f,m=v>m?v:m,this.minX=d,this.minY=p,this.maxX=f,this.maxY=m},ge.prototype.addVertexData=function(t,e,i){for(var r=this.minX,n=this.minY,o=this.maxX,s=this.maxY,a=e;a<i;a+=2){var h=t[a],l=t[a+1];r=h<r?h:r,n=l<n?l:n,o=h>o?h:o,s=l>s?l:s}this.minX=r,this.minY=n,this.maxX=o,this.maxY=s},ge.prototype.addVertices=function(t,e,i,r){for(var n=t.worldTransform,o=n.a,s=n.b,a=n.c,h=n.d,l=n.tx,u=n.ty,c=this.minX,d=this.minY,p=this.maxX,f=this.maxY,m=i;m<r;m+=2){var y=e[m],v=e[m+1],g=o*y+a*v+l,x=h*v+s*y+u;c=g<c?g:c,d=x<d?x:d,p=g>p?g:p,f=x>f?x:f}this.minX=c,this.minY=d,this.maxX=p,this.maxY=f},ge.prototype.addBounds=function(t){var e=this.minX,i=this.minY,r=this.maxX,n=this.maxY;this.minX=t.minX<e?t.minX:e,this.minY=t.minY<i?t.minY:i,this.maxX=t.maxX>r?t.maxX:r,this.maxY=t.maxY>n?t.maxY:n},ge.prototype.addBoundsMask=function(t,e){var i=t.minX>e.minX?t.minX:e.minX,r=t.minY>e.minY?t.minY:e.minY,n=t.maxX<e.maxX?t.maxX:e.maxX,o=t.maxY<e.maxY?t.maxY:e.maxY;if(i<=n&&r<=o){var s=this.minX,a=this.minY,h=this.maxX,l=this.maxY;this.minX=i<s?i:s,this.minY=r<a?r:a,this.maxX=n>h?n:h,this.maxY=o>l?o:l}},ge.prototype.addBoundsArea=function(t,e){var i=t.minX>e.x?t.minX:e.x,r=t.minY>e.y?t.minY:e.y,n=t.maxX<e.x+e.width?t.maxX:e.x+e.width,o=t.maxY<e.y+e.height?t.maxY:e.y+e.height;if(i<=n&&r<=o){var s=this.minX,a=this.minY,h=this.maxX,l=this.maxY;this.minX=i<s?i:s,this.minY=r<a?r:a,this.maxX=n>h?n:h,this.maxY=o>l?o:l}};var xe=function(t){function e(){t.call(this),this.tempDisplayObjectParent=null,this.transform=new le,this.alpha=1,this.visible=!0,this.renderable=!0,this.parent=null,this.worldAlpha=1,this._lastSortedIndex=0,this._zIndex=0,this.filterArea=null,this.filters=null,this._enabledFilters=null,this._bounds=new ge,this._boundsID=0,this._lastBoundsID=-1,this._boundsRect=null,this._localBoundsRect=null,this._mask=null,this._destroyed=!1,this.isSprite=!1}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={_tempDisplayObjectParent:{configurable:!0},x:{configurable:!0},y:{configurable:!0},worldTransform:{configurable:!0},localTransform:{configurable:!0},position:{configurable:!0},scale:{configurable:!0},pivot:{configurable:!0},skew:{configurable:!0},rotation:{configurable:!0},angle:{configurable:!0},zIndex:{configurable:!0},worldVisible:{configurable:!0},mask:{configurable:!0}};return e.mixin=function(t){for(var i=Object.keys(t),r=0;r<i.length;++r){var n=i[r];Object.defineProperty(e.prototype,n,Object.getOwnPropertyDescriptor(t,n))}},i._tempDisplayObjectParent.get=function(){return null===this.tempDisplayObjectParent&&(this.tempDisplayObjectParent=new e),this.tempDisplayObjectParent},e.prototype.updateTransform=function(){this.transform.updateTransform(this.parent.transform),this.worldAlpha=this.alpha*this.parent.worldAlpha,this._bounds.updateID++},e.prototype._recursivePostUpdateTransform=function(){this.parent?(this.parent._recursivePostUpdateTransform(),this.transform.updateTransform(this.parent.transform)):this.transform.updateTransform(this._tempDisplayObjectParent.transform)},e.prototype.getBounds=function(t,e){return t||(this.parent?(this._recursivePostUpdateTransform(),this.updateTransform()):(this.parent=this._tempDisplayObjectParent,this.updateTransform(),this.parent=null)),this._boundsID!==this._lastBoundsID&&(this.calculateBounds(),this._lastBoundsID=this._boundsID),e||(this._boundsRect||(this._boundsRect=new ce),e=this._boundsRect),this._bounds.getRectangle(e)},e.prototype.getLocalBounds=function(t){var e=this.transform,i=this.parent;this.parent=null,this.transform=this._tempDisplayObjectParent.transform,t||(this._localBoundsRect||(this._localBoundsRect=new ce),t=this._localBoundsRect);var r=this.getBounds(!1,t);return this.parent=i,this.transform=e,r},e.prototype.toGlobal=function(t,e,i){return void 0===i&&(i=!1),i||(this._recursivePostUpdateTransform(),this.parent?this.displayObjectUpdateTransform():(this.parent=this._tempDisplayObjectParent,this.displayObjectUpdateTransform(),this.parent=null)),this.worldTransform.apply(t,e)},e.prototype.toLocal=function(t,e,i,r){return e&&(t=e.toGlobal(t,i,r)),r||(this._recursivePostUpdateTransform(),this.parent?this.displayObjectUpdateTransform():(this.parent=this._tempDisplayObjectParent,this.displayObjectUpdateTransform(),this.parent=null)),this.worldTransform.applyInverse(t,i)},e.prototype.render=function(t){},e.prototype.setParent=function(t){if(!t||!t.addChild)throw new Error("setParent: Argument must be a Container");return t.addChild(this),t},e.prototype.setTransform=function(t,e,i,r,n,o,s,a,h){return void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=1),void 0===r&&(r=1),void 0===n&&(n=0),void 0===o&&(o=0),void 0===s&&(s=0),void 0===a&&(a=0),void 0===h&&(h=0),this.position.x=t,this.position.y=e,this.scale.x=i||1,this.scale.y=r||1,this.rotation=n,this.skew.x=o,this.skew.y=s,this.pivot.x=a,this.pivot.y=h,this},e.prototype.destroy=function(){this.removeAllListeners(),this.parent&&this.parent.removeChild(this),this.transform=null,this.parent=null,this._bounds=null,this._currentBounds=null,this._mask=null,this.filterArea=null,this.interactive=!1,this.interactiveChildren=!1,this._destroyed=!0},i.x.get=function(){return this.position.x},i.x.set=function(t){this.transform.position.x=t},i.y.get=function(){return this.position.y},i.y.set=function(t){this.transform.position.y=t},i.worldTransform.get=function(){return this.transform.worldTransform},i.localTransform.get=function(){return this.transform.localTransform},i.position.get=function(){return this.transform.position},i.position.set=function(t){this.transform.position.copyFrom(t)},i.scale.get=function(){return this.transform.scale},i.scale.set=function(t){this.transform.scale.copyFrom(t)},i.pivot.get=function(){return this.transform.pivot},i.pivot.set=function(t){this.transform.pivot.copyFrom(t)},i.skew.get=function(){return this.transform.skew},i.skew.set=function(t){this.transform.skew.copyFrom(t)},i.rotation.get=function(){return this.transform.rotation},i.rotation.set=function(t){this.transform.rotation=t},i.angle.get=function(){return this.transform.rotation*Wt},i.angle.set=function(t){this.transform.rotation=t*Yt},i.zIndex.get=function(){return this._zIndex},i.zIndex.set=function(t){this._zIndex=t,this.parent&&(this.parent.sortDirty=!0)},i.worldVisible.get=function(){var t=this;do{if(!t.visible)return!1;t=t.parent}while(t);return!0},i.mask.get=function(){return this._mask},i.mask.set=function(t){this._mask&&(this._mask.renderable=!0,this._mask.isMask=!1),this._mask=t,this._mask&&(this._mask.renderable=!1,this._mask.isMask=!0)},Object.defineProperties(e.prototype,i),e}(f.a);function be(t,e){return t.zIndex===e.zIndex?t._lastSortedIndex-e._lastSortedIndex:t.zIndex-e.zIndex}xe.prototype.displayObjectUpdateTransform=xe.prototype.updateTransform;var we=function(t){function e(){t.call(this),this.children=[],this.sortableChildren=d.SORTABLE_CHILDREN,this.sortDirty=!1}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={width:{configurable:!0},height:{configurable:!0}};return e.prototype.onChildrenChange=function(){},e.prototype.addChild=function(t){var e=arguments,i=arguments.length;if(i>1)for(var r=0;r<i;r++)this.addChild(e[r]);else t.parent&&t.parent.removeChild(t),t.parent=this,this.sortDirty=!0,t.transform._parentID=-1,this.children.push(t),this._boundsID++,this.onChildrenChange(this.children.length-1),this.emit("childAdded",t,this,this.children.length-1),t.emit("added",this);return t},e.prototype.addChildAt=function(t,e){if(e<0||e>this.children.length)throw new Error(t+"addChildAt: The index "+e+" supplied is out of bounds "+this.children.length);return t.parent&&t.parent.removeChild(t),t.parent=this,this.sortDirty=!0,t.transform._parentID=-1,this.children.splice(e,0,t),this._boundsID++,this.onChildrenChange(e),t.emit("added",this),this.emit("childAdded",t,this,e),t},e.prototype.swapChildren=function(t,e){if(t!==e){var i=this.getChildIndex(t),r=this.getChildIndex(e);this.children[i]=e,this.children[r]=t,this.onChildrenChange(i<r?i:r)}},e.prototype.getChildIndex=function(t){var e=this.children.indexOf(t);if(-1===e)throw new Error("The supplied DisplayObject must be a child of the caller");return e},e.prototype.setChildIndex=function(t,e){if(e<0||e>=this.children.length)throw new Error("The index "+e+" supplied is out of bounds "+this.children.length);var i=this.getChildIndex(t);wt(this.children,i,1),this.children.splice(e,0,t),this.onChildrenChange(e)},e.prototype.getChildAt=function(t){if(t<0||t>=this.children.length)throw new Error("getChildAt: Index ("+t+") does not exist.");return this.children[t]},e.prototype.removeChild=function(t){var e=arguments,i=arguments.length;if(i>1)for(var r=0;r<i;r++)this.removeChild(e[r]);else{var n=this.children.indexOf(t);if(-1===n)return null;t.parent=null,t.transform._parentID=-1,wt(this.children,n,1),this._boundsID++,this.onChildrenChange(n),t.emit("removed",this),this.emit("childRemoved",t,this,n)}return t},e.prototype.removeChildAt=function(t){var e=this.getChildAt(t);return e.parent=null,e.transform._parentID=-1,wt(this.children,t,1),this._boundsID++,this.onChildrenChange(t),e.emit("removed",this),this.emit("childRemoved",e,this,t),e},e.prototype.removeChildren=function(t,e){void 0===t&&(t=0);var i,r=t,n="number"==typeof e?e:this.children.length,o=n-r;if(o>0&&o<=n){i=this.children.splice(r,o);for(var s=0;s<i.length;++s)i[s].parent=null,i[s].transform&&(i[s].transform._parentID=-1);this._boundsID++,this.onChildrenChange(t);for(var a=0;a<i.length;++a)i[a].emit("removed",this),this.emit("childRemoved",i[a],this,a);return i}if(0===o&&0===this.children.length)return[];throw new RangeError("removeChildren: numeric values are outside the acceptable range.")},e.prototype.sortChildren=function(){for(var t=!1,e=0,i=this.children.length;e<i;++e){var r=this.children[e];r._lastSortedIndex=e,t||0===r.zIndex||(t=!0)}t&&this.children.length>1&&this.children.sort(be),this.sortDirty=!1},e.prototype.updateTransform=function(){this.sortableChildren&&this.sortDirty&&this.sortChildren(),this._boundsID++,this.transform.updateTransform(this.parent.transform),this.worldAlpha=this.alpha*this.parent.worldAlpha;for(var t=0,e=this.children.length;t<e;++t){var i=this.children[t];i.visible&&i.updateTransform()}},e.prototype.calculateBounds=function(){this._bounds.clear(),this._calculateBounds();for(var t=0;t<this.children.length;t++){var e=this.children[t];e.visible&&e.renderable&&(e.calculateBounds(),e._mask?(e._mask.calculateBounds(),this._bounds.addBoundsMask(e._bounds,e._mask._bounds)):e.filterArea?this._bounds.addBoundsArea(e._bounds,e.filterArea):this._bounds.addBounds(e._bounds))}this._lastBoundsID=this._boundsID},e.prototype._calculateBounds=function(){},e.prototype.render=function(t){if(this.visible&&!(this.worldAlpha<=0)&&this.renderable)if(this._mask||this.filters&&this.filters.length)this.renderAdvanced(t);else{this._render(t);for(var e=0,i=this.children.length;e<i;++e)this.children[e].render(t)}},e.prototype.renderAdvanced=function(t){t.batch.flush();var e=this.filters,i=this._mask;if(e){this._enabledFilters||(this._enabledFilters=[]),this._enabledFilters.length=0;for(var r=0;r<e.length;r++)e[r].enabled&&this._enabledFilters.push(e[r]);this._enabledFilters.length&&t.filter.push(this,this._enabledFilters)}i&&t.mask.push(this,this._mask),this._render(t);for(var n=0,o=this.children.length;n<o;n++)this.children[n].render(t);t.batch.flush(),i&&t.mask.pop(this,this._mask),e&&this._enabledFilters&&this._enabledFilters.length&&t.filter.pop()},e.prototype._render=function(t){},e.prototype.destroy=function(e){t.prototype.destroy.call(this),this.sortDirty=!1;var i="boolean"==typeof e?e:e&&e.children,r=this.removeChildren(0,this.children.length);if(i)for(var n=0;n<r.length;++n)r[n].destroy(e)},i.width.get=function(){return this.scale.x*this.getLocalBounds().width},i.width.set=function(t){var e=this.getLocalBounds().width;this.scale.x=0!==e?t/e:1,this._width=t},i.height.get=function(){return this.scale.y*this.getLocalBounds().height},i.height.set=function(t){var e=this.getLocalBounds().height;this.scale.y=0!==e?t/e:1,this._height=t},Object.defineProperties(e.prototype,i),e}(xe);we.prototype.containerUpdateTransform=we.prototype.updateTransform;
/*!
 * @pixi/core - v5.1.5
 * Compiled Tue, 24 Sep 2019 04:07:05 UTC
 *
 * @pixi/core is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var _e=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this._width=t,this._height=e,this.destroyed=!1,this.internal=!1,this.onResize=new h("setRealSize",2),this.onUpdate=new h("update"),this.onError=new h("onError",1)},Se={valid:{configurable:!0},width:{configurable:!0},height:{configurable:!0}};_e.prototype.bind=function(t){this.onResize.add(t),this.onUpdate.add(t),this.onError.add(t),(this._width||this._height)&&this.onResize.run(this._width,this._height)},_e.prototype.unbind=function(t){this.onResize.remove(t),this.onUpdate.remove(t),this.onError.remove(t)},_e.prototype.resize=function(t,e){t===this._width&&e===this._height||(this._width=t,this._height=e,this.onResize.run(t,e))},Se.valid.get=function(){return!!this._width&&!!this._height},_e.prototype.update=function(){this.destroyed||this.onUpdate.run()},_e.prototype.load=function(){return Promise.resolve()},Se.width.get=function(){return this._width},Se.height.get=function(){return this._height},_e.prototype.upload=function(t,e,i){return!1},_e.prototype.style=function(t,e,i){return!1},_e.prototype.dispose=function(){},_e.prototype.destroy=function(){this.destroyed||(this.destroyed=!0,this.dispose(),this.onError.removeAll(),this.onError=null,this.onResize.removeAll(),this.onResize=null,this.onUpdate.removeAll(),this.onUpdate=null)},Object.defineProperties(_e.prototype,Se);var Te=function(t){function e(e){var i=e.naturalWidth||e.videoWidth||e.width,r=e.naturalHeight||e.videoHeight||e.height;t.call(this,i,r),this.source=e,this.noSubImage=!1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.crossOrigin=function(t,e,i){void 0===i&&0!==e.indexOf("data:")?t.crossOrigin=function(t,e){if(void 0===e&&(e=window.location),0===t.indexOf("data:"))return"";e=e||window.location,kt||(kt=document.createElement("a")),kt.href=t;var i=!(t=y.a.parse(kt.href)).port&&""===e.port||t.port===e.port;return t.hostname===e.hostname&&i&&t.protocol===e.protocol?"":"anonymous"}(e):!1!==i&&(t.crossOrigin="string"==typeof i?i:"anonymous")},e.prototype.upload=function(t,e,i,r){var n=t.gl,o=e.realWidth,s=e.realHeight;return r=r||this.source,n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),this.noSubImage||e.target!==n.TEXTURE_2D||i.width!==o||i.height!==s?(i.width=o,i.height=s,n.texImage2D(e.target,0,e.format,e.format,e.type,r)):n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.format,e.type,r),!0},e.prototype.update=function(){if(!this.destroyed){var e=this.source.naturalWidth||this.source.videoWidth||this.source.width,i=this.source.naturalHeight||this.source.videoHeight||this.source.height;this.resize(e,i),t.prototype.update.call(this)}},e.prototype.dispose=function(){this.source=null},e}(_e),Ce=function(t){function e(e,i){if(i=i||{},!(e instanceof HTMLImageElement)){var r=new Image;t.crossOrigin(r,e,i.crossorigin),r.src=e,e=r}t.call(this,e),!e.complete&&this._width&&this._height&&(this._width=0,this._height=0),this.url=e.src,this._process=null,this.preserveBitmap=!1,this.createBitmap=(void 0!==i.createBitmap?i.createBitmap:d.CREATE_IMAGE_BITMAP)&&!!window.createImageBitmap,this.premultiplyAlpha=!1!==i.premultiplyAlpha,this.bitmap=null,this._load=null,!1!==i.autoLoad&&this.load()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.load=function(t){var e=this;return void 0!==t&&(this.createBitmap=t),this._load?this._load:(this._load=new Promise((function(t){e.url=e.source.src;var i=e.source,r=function(){e.destroyed||(i.onload=null,i.onerror=null,e.resize(i.width,i.height),e._load=null,e.createBitmap?t(e.process()):t(e))};i.complete&&i.src?r():(i.onload=r,i.onerror=function(t){return e.onError.run(t)})})),this._load)},e.prototype.process=function(){var t=this;return null!==this._process?this._process:null===this.bitmap&&window.createImageBitmap?(this._process=window.createImageBitmap(this.source,0,0,this.source.width,this.source.height,{premultiplyAlpha:this.premultiplyAlpha?"premultiply":"none"}).then((function(e){return t.destroyed?Promise.reject():(t.bitmap=e,t.update(),t._process=null,Promise.resolve(t))})),this._process):Promise.resolve(this)},e.prototype.upload=function(e,i,r){if(i.premultiplyAlpha=this.premultiplyAlpha,!this.createBitmap)return t.prototype.upload.call(this,e,i,r);if(!this.bitmap&&(this.process(),!this.bitmap))return!1;if(t.prototype.upload.call(this,e,i,r,this.bitmap),!this.preserveBitmap){var n=!0;for(var o in i._glTextures){var s=i._glTextures[o];if(s!==r&&s.dirtyId!==i.dirtyId){n=!1;break}}n&&(this.bitmap.close&&this.bitmap.close(),this.bitmap=null)}return!0},e.prototype.dispose=function(){this.source.onload=null,this.source.onerror=null,t.prototype.dispose.call(this),this.bitmap&&(this.bitmap.close(),this.bitmap=null),this._process=null,this._load=null},e}(Te),Ie=[];function Ee(t,e){if(!t)return null;var i="";if("string"==typeof t){var r=/\.(\w{3,4})(?:$|\?|#)/i.exec(t);r&&(i=r[1].toLowerCase())}for(var n=Ie.length-1;n>=0;--n){var o=Ie[n];if(o.test&&o.test(t,i))return new o(t,e)}return new Ce(t,e)}var Ae=function(t){function e(e,i){var r=i||{},n=r.width,o=r.height;if(!n||!o)throw new Error("BufferResource width or height invalid");t.call(this,n,o),this.data=e}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.upload=function(t,e,i){var r=t.gl;return r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),i.width===e.width&&i.height===e.height?r.texSubImage2D(e.target,0,0,0,e.width,e.height,e.format,e.type,this.data):(i.width=e.width,i.height=e.height,r.texImage2D(e.target,0,i.internalFormat,e.width,e.height,0,e.format,i.type,this.data)),!0},e.prototype.dispose=function(){this.data=null},e.test=function(t){return t instanceof Float32Array||t instanceof Uint8Array||t instanceof Uint32Array},e}(_e),Pe={scaleMode:ut,format:$,premultiplyAlpha:!1},Me=function(t){function e(e,i){void 0===e&&(e=null),void 0===i&&(i=null),t.call(this);var r=(i=i||{}).premultiplyAlpha,n=i.mipmap,o=i.anisotropicLevel,s=i.scaleMode,a=i.width,h=i.height,l=i.wrapMode,u=i.format,c=i.type,p=i.target,f=i.resolution,m=i.resourceOptions;!e||e instanceof _e||((e=Ee(e,m)).internal=!0),this.width=a||0,this.height=h||0,this.resolution=f||d.RESOLUTION,this.mipmap=void 0!==n?n:d.MIPMAP_TEXTURES,this.anisotropicLevel=void 0!==o?o:d.ANISOTROPIC_LEVEL,this.wrapMode=l||d.WRAP_MODE,this.scaleMode=void 0!==s?s:d.SCALE_MODE,this.format=u||$,this.type=c||ot,this.target=p||et,this.premultiplyAlpha=!1!==r,this.uid=St(),this.touched=0,this.isPowerOfTwo=!1,this._refreshPOT(),this._glTextures={},this.dirtyId=0,this.dirtyStyleId=0,this.cacheId=null,this.valid=a>0&&h>0,this.textureCacheIds=[],this.destroyed=!1,this.resource=null,this._batchEnabled=0,this.setResource(e)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={realWidth:{configurable:!0},realHeight:{configurable:!0}};return i.realWidth.get=function(){return Math.ceil(this.width*this.resolution-1e-4)},i.realHeight.get=function(){return Math.ceil(this.height*this.resolution-1e-4)},e.prototype.setStyle=function(t,e){var i;return void 0!==t&&t!==this.scaleMode&&(this.scaleMode=t,i=!0),void 0!==e&&e!==this.mipmap&&(this.mipmap=e,i=!0),i&&this.dirtyStyleId++,this},e.prototype.setSize=function(t,e,i){return this.resolution=i||this.resolution,this.width=t,this.height=e,this._refreshPOT(),this.update(),this},e.prototype.setRealSize=function(t,e,i){return this.resolution=i||this.resolution,this.width=t/this.resolution,this.height=e/this.resolution,this._refreshPOT(),this.update(),this},e.prototype._refreshPOT=function(){this.isPowerOfTwo=Ct(this.realWidth)&&Ct(this.realHeight)},e.prototype.setResolution=function(t){var e=this.resolution;return e===t?this:(this.resolution=t,this.valid&&(this.width=this.width*e/t,this.height=this.height*e/t,this.emit("update",this)),this._refreshPOT(),this)},e.prototype.setResource=function(t){if(this.resource===t)return this;if(this.resource)throw new Error("Resource can be set only once");return t.bind(this),this.resource=t,this},e.prototype.update=function(){this.valid?(this.dirtyId++,this.dirtyStyleId++,this.emit("update",this)):this.width>0&&this.height>0&&(this.valid=!0,this.emit("loaded",this),this.emit("update",this))},e.prototype.onError=function(t){this.emit("error",this,t)},e.prototype.destroy=function(){this.resource&&(this.resource.unbind(this),this.resource.internal&&this.resource.destroy(),this.resource=null),this.cacheId&&(delete Pt[this.cacheId],delete At[this.cacheId],this.cacheId=null),this.dispose(),e.removeFromCache(this),this.textureCacheIds=null,this.destroyed=!0},e.prototype.dispose=function(){this.emit("dispose",this)},e.from=function(t,i){var r=null;"string"==typeof t?r=t:(t._pixiId||(t._pixiId="pixiid_"+St()),r=t._pixiId);var n=Pt[r];return n||((n=new e(t,i)).cacheId=r,e.addToCache(n,r)),n},e.fromBuffer=function(t,i,r,n){t=t||new Float32Array(i*r*4);var o=new Ae(t,{width:i,height:r}),s=t instanceof Float32Array?at:ot;return new e(o,Object.assign(Pe,n||{width:i,height:r,type:s}))},e.addToCache=function(t,e){e&&(-1===t.textureCacheIds.indexOf(e)&&t.textureCacheIds.push(e),Pt[e]&&console.warn("BaseTexture added to the cache with an id ["+e+"] that already had an entry"),Pt[e]=t)},e.removeFromCache=function(t){if("string"==typeof t){var e=Pt[t];if(e){var i=e.textureCacheIds.indexOf(t);return i>-1&&e.textureCacheIds.splice(i,1),delete Pt[t],e}}else if(t&&t.textureCacheIds){for(var r=0;r<t.textureCacheIds.length;++r)delete Pt[t.textureCacheIds[r]];return t.textureCacheIds.length=0,t}return null},Object.defineProperties(e.prototype,i),e}(f.a);Me._globalBatch=0;var Oe=function(t){function e(e,i){var r;i=i||{};var n=e;Array.isArray(e)&&(r=e,n=e.length),t.call(this,i.width,i.height),this.items=[],this.itemDirtyIds=[];for(var o=0;o<n;o++){var s=new Me;this.items.push(s),this.itemDirtyIds.push(-1)}if(this.length=n,this._load=null,r)for(var a=0;a<n;a++)this.addResourceAt(Ee(r[a],i),a)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.dispose=function(){for(var t=0,e=this.length;t<e;t++)this.items[t].destroy();this.items=null,this.itemDirtyIds=null,this._load=null},e.prototype.addResourceAt=function(t,e){if(!this.items[e])throw new Error("Index "+e+" is out of bounds");return t.valid&&!this.valid&&this.resize(t.width,t.height),this.items[e].setResource(t),this},e.prototype.bind=function(e){t.prototype.bind.call(this,e),e.target=rt;for(var i=0;i<this.length;i++)this.items[i].on("update",e.update,e)},e.prototype.unbind=function(e){t.prototype.unbind.call(this,e);for(var i=0;i<this.length;i++)this.items[i].off("update",e.update,e)},e.prototype.load=function(){var t=this;if(this._load)return this._load;var e=this.items.map((function(t){return t.resource})),i=e.map((function(t){return t.load()}));return this._load=Promise.all(i).then((function(){var i=e[0],r=i.width,n=i.height;return t.resize(r,n),Promise.resolve(t)})),this._load},e.prototype.upload=function(t,e,i){var r=this.length,n=this.itemDirtyIds,o=this.items,s=t.gl;i.dirtyId<0&&s.texImage3D(s.TEXTURE_2D_ARRAY,0,e.format,this._width,this._height,r,0,e.format,e.type,null);for(var a=0;a<r;a++){var h=o[a];n[a]<h.dirtyId&&(n[a]=h.dirtyId,h.valid&&s.texSubImage3D(s.TEXTURE_2D_ARRAY,0,0,0,a,h.resource.width,h.resource.height,1,e.format,e.type,h.resource.source))}return!0},e}(_e),ke=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.test=function(t){var e=window.OffscreenCanvas;return!!(e&&t instanceof e)||t instanceof HTMLCanvasElement},e}(Te),Be=function(t){function e(i,r){if(r=r||{},t.call(this,i,r),this.length!==e.SIDES)throw new Error("Invalid length. Got "+this.length+", expected 6");for(var n=0;n<e.SIDES;n++)this.items[n].target=nt+n;!1!==r.autoLoad&&this.load()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.bind=function(e){t.prototype.bind.call(this,e),e.target=it},e.prototype.upload=function(t,i,r){for(var n=this.itemDirtyIds,o=0;o<e.SIDES;o++){var s=this.items[o];n[o]<s.dirtyId&&(n[o]=s.dirtyId,s.valid&&s.resource.upload(t,s,r))}return!0},e}(Oe);Be.SIDES=6;var Re=function(t){function e(e,i){i=i||{},t.call(this,document.createElement("canvas")),this._width=0,this._height=0,this.svg=e,this.scale=i.scale||1,this._overrideWidth=i.width,this._overrideHeight=i.height,this._resolve=null,this._crossorigin=i.crossorigin,this._load=null,!1!==i.autoLoad&&this.load()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.load=function(){var t=this;return this._load?this._load:(this._load=new Promise((function(e){if(t._resolve=function(){t.resize(t.source.width,t.source.height),e(t)},/^\<svg/.test(t.svg.trim())){if(!btoa)throw new Error("Your browser doesn't support base64 conversions.");t.svg="data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(t.svg)))}t._loadSvg()})),this._load)},e.prototype._loadSvg=function(){var e=this,i=new Image;t.crossOrigin(i,this.svg,this._crossorigin),i.src=this.svg,i.onerror=function(t){i.onerror=null,e.onError.run(t)},i.onload=function(){var t=i.width,r=i.height;if(!t||!r)throw new Error("The SVG image must have width and height defined (in pixels), canvas API needs them.");var n=t*e.scale,o=r*e.scale;(e._overrideWidth||e._overrideHeight)&&(n=e._overrideWidth||e._overrideHeight/r*t,o=e._overrideHeight||e._overrideWidth/t*r),n=Math.round(n),o=Math.round(o);var s=e.source;s.width=n,s.height=o,s._pixiId="canvas_"+St(),s.getContext("2d").drawImage(i,0,0,t,r,0,0,n,o),e._resolve(),e._resolve=null}},e.getSize=function(t){var i=e.SVG_SIZE.exec(t),r={};return i&&(r[i[1]]=Math.round(parseFloat(i[3])),r[i[5]]=Math.round(parseFloat(i[7]))),r},e.prototype.dispose=function(){t.prototype.dispose.call(this),this._resolve=null,this._crossorigin=null},e.test=function(t,e){return"svg"===e||"string"==typeof t&&0===t.indexOf("data:image/svg+xml;base64")||"string"==typeof t&&0===t.indexOf("<svg")},e}(Te);Re.SVG_SIZE=/<svg[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*>/i;var De=function(t){function e(e,i){if(i=i||{},!(e instanceof HTMLVideoElement)){var r=document.createElement("video");r.setAttribute("preload","auto"),r.setAttribute("webkit-playsinline",""),r.setAttribute("playsinline",""),"string"==typeof e&&(e=[e]),t.crossOrigin(r,e[0].src||e[0],i.crossorigin);for(var n=0;n<e.length;++n){var o=document.createElement("source"),s=e[n],a=s.src,h=s.mime,l=(a=a||e[n]).split("?").shift().toLowerCase(),u=l.substr(l.lastIndexOf(".")+1);h=h||"video/"+u,o.src=a,o.type=h,r.appendChild(o)}e=r}t.call(this,e),this.noSubImage=!0,this._autoUpdate=!0,this._isAutoUpdating=!1,this._updateFPS=i.updateFPS||0,this._msToNextUpdate=0,this.autoPlay=!1!==i.autoPlay,this._load=null,this._resolve=null,this._onCanPlay=this._onCanPlay.bind(this),this._onError=this._onError.bind(this),!1!==i.autoLoad&&this.load()}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={autoUpdate:{configurable:!0},updateFPS:{configurable:!0}};return e.prototype.update=function(e){if(void 0===e&&(e=0),!this.destroyed){var i=Nt.shared.elapsedMS*this.source.playbackRate;this._msToNextUpdate=Math.floor(this._msToNextUpdate-i),(!this._updateFPS||this._msToNextUpdate<=0)&&(t.prototype.update.call(this,e),this._msToNextUpdate=this._updateFPS?Math.floor(1e3/this._updateFPS):0)}},e.prototype.load=function(){var t=this;if(this._load)return this._load;var e=this.source;return(e.readyState===e.HAVE_ENOUGH_DATA||e.readyState===e.HAVE_FUTURE_DATA)&&e.width&&e.height&&(e.complete=!0),e.addEventListener("play",this._onPlayStart.bind(this)),e.addEventListener("pause",this._onPlayStop.bind(this)),this._isSourceReady()?this._onCanPlay():(e.addEventListener("canplay",this._onCanPlay),e.addEventListener("canplaythrough",this._onCanPlay),e.addEventListener("error",this._onError,!0)),this._load=new Promise((function(i){t.valid?i(t):(t._resolve=i,e.load())})),this._load},e.prototype._onError=function(){this.source.removeEventListener("error",this._onError,!0),this.onError.run(event)},e.prototype._isSourcePlaying=function(){var t=this.source;return t.currentTime>0&&!1===t.paused&&!1===t.ended&&t.readyState>2},e.prototype._isSourceReady=function(){return 3===this.source.readyState||4===this.source.readyState},e.prototype._onPlayStart=function(){this.valid||this._onCanPlay(),!this._isAutoUpdating&&this.autoUpdate&&(Nt.shared.add(this.update,this),this._isAutoUpdating=!0)},e.prototype._onPlayStop=function(){this._isAutoUpdating&&(Nt.shared.remove(this.update,this),this._isAutoUpdating=!1)},e.prototype._onCanPlay=function(){var t=this.source;t.removeEventListener("canplay",this._onCanPlay),t.removeEventListener("canplaythrough",this._onCanPlay);var e=this.valid;this.resize(t.videoWidth,t.videoHeight),!e&&this._resolve&&(this._resolve(this),this._resolve=null),this._isSourcePlaying()?this._onPlayStart():this.autoPlay&&t.play()},e.prototype.dispose=function(){this._isAutoUpdating&&Nt.shared.remove(this.update,this),this.source&&(this.source.removeEventListener("error",this._onError,!0),this.source.pause(),this.source.src="",this.source.load()),t.prototype.dispose.call(this)},i.autoUpdate.get=function(){return this._autoUpdate},i.autoUpdate.set=function(t){t!==this._autoUpdate&&(this._autoUpdate=t,!this._autoUpdate&&this._isAutoUpdating?(Nt.shared.remove(this.update,this),this._isAutoUpdating=!1):this._autoUpdate&&!this._isAutoUpdating&&(Nt.shared.add(this.update,this),this._isAutoUpdating=!0))},i.updateFPS.get=function(){return this._updateFPS},i.updateFPS.set=function(t){t!==this._updateFPS&&(this._updateFPS=t)},e.test=function(t,i){return t instanceof HTMLVideoElement||e.TYPES.indexOf(i)>-1},Object.defineProperties(e.prototype,i),e}(Te);De.TYPES=["mp4","m4v","webm","ogg","ogv","h264","avi","mov"];var Fe=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.test=function(t){return!!window.createImageBitmap&&t instanceof ImageBitmap},e}(Te);Ie.push(Ce,Fe,ke,De,Re,Ae,Be,Oe);var Le=function(t){this.renderer=t};Le.prototype.destroy=function(){this.renderer=null};var Ne=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.upload=function(t,e,i){var r=t.gl;return r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),i.width===e.width&&i.height===e.height?r.texSubImage2D(e.target,0,0,0,e.width,e.height,e.format,e.type,this.data):(i.width=e.width,i.height=e.height,r.texImage2D(e.target,0,r.DEPTH_COMPONENT16,e.width,e.height,0,e.format,e.type,this.data)),!0},e}(Ae),Ue=function(t,e){this.width=Math.ceil(t||100),this.height=Math.ceil(e||100),this.stencil=!1,this.depth=!1,this.dirtyId=0,this.dirtyFormat=0,this.dirtySize=0,this.depthTexture=null,this.colorTextures=[],this.glFramebuffers={},this.disposeRunner=new h("disposeFramebuffer",2)},Ve={colorTexture:{configurable:!0}};Ve.colorTexture.get=function(){return this.colorTextures[0]},Ue.prototype.addColorTexture=function(t,e){return void 0===t&&(t=0),this.colorTextures[t]=e||new Me(null,{scaleMode:0,resolution:1,mipmap:!1,width:this.width,height:this.height}),this.dirtyId++,this.dirtyFormat++,this},Ue.prototype.addDepthTexture=function(t){return this.depthTexture=t||new Me(new Ne(null,{width:this.width,height:this.height}),{scaleMode:0,resolution:1,width:this.width,height:this.height,mipmap:!1,format:tt,type:st}),this.dirtyId++,this.dirtyFormat++,this},Ue.prototype.enableDepth=function(){return this.depth=!0,this.dirtyId++,this.dirtyFormat++,this},Ue.prototype.enableStencil=function(){return this.stencil=!0,this.dirtyId++,this.dirtyFormat++,this},Ue.prototype.resize=function(t,e){if(t=Math.ceil(t),e=Math.ceil(e),t!==this.width||e!==this.height){this.width=t,this.height=e,this.dirtyId++,this.dirtySize++;for(var i=0;i<this.colorTextures.length;i++){var r=this.colorTextures[i],n=r.resolution;r.setSize(t/n,e/n)}if(this.depthTexture){var o=this.depthTexture.resolution;this.depthTexture.setSize(t/o,e/o)}}},Ue.prototype.dispose=function(){this.disposeRunner.run(this,!1)},Object.defineProperties(Ue.prototype,Ve);var Xe=function(t){function e(e){if("number"==typeof e){var i=arguments[0],r=arguments[1],n=arguments[2],o=arguments[3];e={width:i,height:r,scaleMode:n,resolution:o}}t.call(this,null,e);var s=e||{},a=s.width,h=s.height;this.mipmap=!1,this.width=Math.ceil(a)||100,this.height=Math.ceil(h)||100,this.valid=!0,this._canvasRenderTarget=null,this.clearColor=[0,0,0,0],this.framebuffer=new Ue(this.width*this.resolution,this.height*this.resolution).addColorTexture(0,this),this.stencilMaskStack=[],this.filterStack=[{}]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.resize=function(t,e){t=Math.ceil(t),e=Math.ceil(e),this.framebuffer.resize(t*this.resolution,e*this.resolution)},e.prototype.dispose=function(){this.framebuffer.dispose(),t.prototype.dispose.call(this)},e.prototype.destroy=function(){t.prototype.destroy.call(this,!0),this.framebuffer=null},e}(Me),je=function(){this.x0=0,this.y0=0,this.x1=1,this.y1=0,this.x2=1,this.y2=1,this.x3=0,this.y3=1,this.uvsFloat32=new Float32Array(8)};je.prototype.set=function(t,e,i){var r=e.width,n=e.height;if(i){var o=t.width/2/r,s=t.height/2/n,a=t.x/r+o,h=t.y/n+s;i=he.add(i,he.NW),this.x0=a+o*he.uX(i),this.y0=h+s*he.uY(i),i=he.add(i,2),this.x1=a+o*he.uX(i),this.y1=h+s*he.uY(i),i=he.add(i,2),this.x2=a+o*he.uX(i),this.y2=h+s*he.uY(i),i=he.add(i,2),this.x3=a+o*he.uX(i),this.y3=h+s*he.uY(i)}else this.x0=t.x/r,this.y0=t.y/n,this.x1=(t.x+t.width)/r,this.y1=t.y/n,this.x2=(t.x+t.width)/r,this.y2=(t.y+t.height)/n,this.x3=t.x/r,this.y3=(t.y+t.height)/n;this.uvsFloat32[0]=this.x0,this.uvsFloat32[1]=this.y0,this.uvsFloat32[2]=this.x1,this.uvsFloat32[3]=this.y1,this.uvsFloat32[4]=this.x2,this.uvsFloat32[5]=this.y2,this.uvsFloat32[6]=this.x3,this.uvsFloat32[7]=this.y3};var ze=new je,Ge=function(t){function e(i,r,n,o,s,a){if(t.call(this),this.noFrame=!1,r||(this.noFrame=!0,r=new ce(0,0,1,1)),i instanceof e&&(i=i.baseTexture),this.baseTexture=i,this._frame=r,this.trim=o,this.valid=!1,this.requiresUpdate=!1,this._uvs=ze,this.uvMatrix=null,this.orig=n||r,this._rotate=Number(s||0),!0===s)this._rotate=2;else if(this._rotate%2!=0)throw new Error("attempt to use diamond-shaped UVs. If you are sure, set rotation manually");this.defaultAnchor=a?new jt(a.x,a.y):new jt(0,0),this._updateID=0,this.textureCacheIds=[],i.valid?this.noFrame?i.valid&&this.onBaseTextureUpdated(i):this.frame=r:i.once("loaded",this.onBaseTextureUpdated,this),this.noFrame&&i.on("update",this.onBaseTextureUpdated,this)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={resolution:{configurable:!0},frame:{configurable:!0},rotate:{configurable:!0},width:{configurable:!0},height:{configurable:!0}};return e.prototype.update=function(){this.baseTexture.resource&&this.baseTexture.resource.update()},e.prototype.onBaseTextureUpdated=function(t){if(this.noFrame){if(!this.baseTexture.valid)return;this._frame.width=t.width,this._frame.height=t.height,this.valid=!0,this.updateUvs()}else this.frame=this._frame;this.emit("update",this)},e.prototype.destroy=function(t){if(this.baseTexture){if(t){var i=this.baseTexture.resource;i&&At[i.url]&&e.removeFromCache(i.url),this.baseTexture.destroy()}this.baseTexture.off("update",this.onBaseTextureUpdated,this),this.baseTexture=null}this._frame=null,this._uvs=null,this.trim=null,this.orig=null,this.valid=!1,e.removeFromCache(this),this.textureCacheIds=null},e.prototype.clone=function(){return new e(this.baseTexture,this.frame,this.orig,this.trim,this.rotate,this.defaultAnchor)},e.prototype.updateUvs=function(){this._uvs===ze&&(this._uvs=new je),this._uvs.set(this._frame,this.baseTexture,this.rotate),this._updateID++},e.from=function(t,i){void 0===i&&(i={});var r=null;"string"==typeof t?r=t:(t._pixiId||(t._pixiId="pixiid_"+St()),r=t._pixiId);var n=At[r];return n||(i.resolution||(i.resolution=Bt(t)),(n=new e(new Me(t,i))).baseTexture.cacheId=r,Me.addToCache(n.baseTexture,r),e.addToCache(n,r)),n},e.fromBuffer=function(t,i,r,n){return new e(Me.fromBuffer(t,i,r,n))},e.fromLoader=function(t,i,r){var n=new Ce(t);n.url=i;var o=new e(new Me(n,{scaleMode:d.SCALE_MODE,resolution:Bt(i)}));return r||(r=i),Me.addToCache(o.baseTexture,r),e.addToCache(o,r),r!==i&&(Me.addToCache(o.baseTexture,i),e.addToCache(o,i)),o},e.addToCache=function(t,e){e&&(-1===t.textureCacheIds.indexOf(e)&&t.textureCacheIds.push(e),At[e]&&console.warn("Texture added to the cache with an id ["+e+"] that already had an entry"),At[e]=t)},e.removeFromCache=function(t){if("string"==typeof t){var e=At[t];if(e){var i=e.textureCacheIds.indexOf(t);return i>-1&&e.textureCacheIds.splice(i,1),delete At[t],e}}else if(t&&t.textureCacheIds){for(var r=0;r<t.textureCacheIds.length;++r)At[t.textureCacheIds[r]]===t&&delete At[t.textureCacheIds[r]];return t.textureCacheIds.length=0,t}return null},i.resolution.get=function(){return this.baseTexture.resolution},i.frame.get=function(){return this._frame},i.frame.set=function(t){this._frame=t,this.noFrame=!1;var e=t.x,i=t.y,r=t.width,n=t.height,o=e+r>this.baseTexture.width,s=i+n>this.baseTexture.height;if(o||s){var a=o&&s?"and":"or",h="X: "+e+" + "+r+" = "+(e+r)+" > "+this.baseTexture.width,l="Y: "+i+" + "+n+" = "+(i+n)+" > "+this.baseTexture.height;throw new Error("Texture Error: frame does not fit inside the base Texture dimensions: "+h+" "+a+" "+l)}this.valid=r&&n&&this.baseTexture.valid,this.trim||this.rotate||(this.orig=t),this.valid&&this.updateUvs()},i.rotate.get=function(){return this._rotate},i.rotate.set=function(t){this._rotate=t,this.valid&&this.updateUvs()},i.width.get=function(){return this.orig.width},i.height.get=function(){return this.orig.height},Object.defineProperties(e.prototype,i),e}(f.a);function He(t){t.destroy=function(){},t.on=function(){},t.once=function(){},t.emit=function(){}}Ge.EMPTY=new Ge(new Me),He(Ge.EMPTY),He(Ge.EMPTY.baseTexture),Ge.WHITE=function(){var t=document.createElement("canvas");t.width=16,t.height=16;var e=t.getContext("2d");return e.fillStyle="white",e.fillRect(0,0,16,16),new Ge(new Me(new ke(t)))}(),He(Ge.WHITE),He(Ge.WHITE.baseTexture);var We=function(t){function e(e,i){var r=null;if(!(e instanceof Xe)){var n=arguments[1],o=arguments[2],s=arguments[3],a=arguments[4];console.warn("Please use RenderTexture.create("+n+", "+o+") instead of the ctor directly."),r=arguments[0],i=null,e=new Xe({width:n,height:o,scaleMode:s,resolution:a})}t.call(this,e,i),this.legacyRenderer=r,this.valid=!0,this.filterFrame=null,this.filterPoolKey=null,this.updateUvs()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.resize=function(t,e,i){void 0===i&&(i=!0),t=Math.ceil(t),e=Math.ceil(e),this.valid=t>0&&e>0,this._frame.width=this.orig.width=t,this._frame.height=this.orig.height=e,i&&this.baseTexture.resize(t,e),this.updateUvs()},e.prototype.setResolution=function(t){var e=this.baseTexture;e.resolution!==t&&(e.setResolution(t),this.resize(e.width,e.height,!1))},e.create=function(t){return"number"==typeof t&&(t={width:t,height:arguments[1],scaleMode:arguments[2],resolution:arguments[3]}),new e(new Xe(t))},e}(Ge),Ye=function(t){this.texturePool={},this.textureOptions=t||{},this.enableFullScreen=!1,this._pixelsWidth=0,this._pixelsHeight=0};Ye.prototype.createTexture=function(t,e){var i=new Xe(Object.assign({width:t,height:e,resolution:1},this.textureOptions));return new We(i)},Ye.prototype.getOptimalTexture=function(t,e,i){void 0===i&&(i=1);var r=Ye.SCREEN_KEY;t*=i,e*=i,this.enableFullScreen&&t===this._pixelsWidth&&e===this._pixelsHeight||(r=(65535&(t=Tt(t)))<<16|65535&(e=Tt(e))),this.texturePool[r]||(this.texturePool[r]=[]);var n=this.texturePool[r].pop();return n||(n=this.createTexture(t,e)),n.filterPoolKey=r,n.setResolution(i),n},Ye.prototype.getFilterTexture=function(t,e){var i=this.getOptimalTexture(t.width,t.height,e||t.resolution);return i.filterFrame=t.filterFrame,i},Ye.prototype.returnTexture=function(t){var e=t.filterPoolKey;t.filterFrame=null,this.texturePool[e].push(t)},Ye.prototype.returnFilterTexture=function(t){this.returnTexture(t)},Ye.prototype.clear=function(t){if(t=!1!==t)for(var e in this.texturePool){var i=this.texturePool[e];if(i)for(var r=0;r<i.length;r++)i[r].destroy(!0)}this.texturePool={}},Ye.prototype.setScreenSize=function(t){if(t.width!==this._pixelsWidth||t.height!==this._pixelsHeight){var e=Ye.SCREEN_KEY,i=this.texturePool[e];if(this.enableFullScreen=t.width>0&&t.height>0,i)for(var r=0;r<i.length;r++)i[r].destroy(!0);this.texturePool[e]=[],this._pixelsWidth=t.width,this._pixelsHeight=t.height}},Ye.SCREEN_KEY="screen";var qe=function(t,e,i,r,n,o,s){void 0===i&&(i=!1),void 0===r&&(r=5126),this.buffer=t,this.size=e,this.normalized=i,this.type=r,this.stride=n,this.start=o,this.instance=s};qe.prototype.destroy=function(){this.buffer=null},qe.from=function(t,e,i,r,n){return new qe(t,e,i,r,n)};var Ze=0,Ke=function(t,e,i){void 0===e&&(e=!0),void 0===i&&(i=!1),this.data=t||new Float32Array(1),this._glBuffers={},this._updateID=0,this.index=i,this.static=e,this.id=Ze++,this.disposeRunner=new h("disposeBuffer",2)};function Qe(t){if(4===t.BYTES_PER_ELEMENT)return t instanceof Float32Array?"Float32Array":t instanceof Uint32Array?"Uint32Array":"Int32Array";if(2===t.BYTES_PER_ELEMENT){if(t instanceof Uint16Array)return"Uint16Array"}else if(1===t.BYTES_PER_ELEMENT&&t instanceof Uint8Array)return"Uint8Array";return null}Ke.prototype.update=function(t){this.data=t||this.data,this._updateID++},Ke.prototype.dispose=function(){this.disposeRunner.run(this,!1)},Ke.prototype.destroy=function(){this.dispose(),this.data=null},Ke.from=function(t){return t instanceof Array&&(t=new Float32Array(t)),new Ke(t)};var Je={Float32Array:Float32Array,Uint32Array:Uint32Array,Int32Array:Int32Array,Uint8Array:Uint8Array};var $e={5126:4,5123:2,5121:1},ti=0,ei={Float32Array:Float32Array,Uint32Array:Uint32Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array},ii=function(t,e){void 0===t&&(t=[]),void 0===e&&(e={}),this.buffers=t,this.indexBuffer=null,this.attributes=e,this.glVertexArrayObjects={},this.id=ti++,this.instanced=!1,this.instanceCount=1,this.disposeRunner=new h("disposeGeometry",2),this.refCount=0};ii.prototype.addAttribute=function(t,e,i,r,n,o,s,a){if(void 0===r&&(r=!1),void 0===a&&(a=!1),!e)throw new Error("You must pass a buffer when creating an attribute");e.data||(e instanceof Array&&(e=new Float32Array(e)),e=new Ke(e));var h=t.split("|");if(h.length>1){for(var l=0;l<h.length;l++)this.addAttribute(h[l],e,i,r,n);return this}var u=this.buffers.indexOf(e);return-1===u&&(this.buffers.push(e),u=this.buffers.length-1),this.attributes[t]=new qe(u,i,r,n,o,s,a),this.instanced=this.instanced||a,this},ii.prototype.getAttribute=function(t){return this.attributes[t]},ii.prototype.getBuffer=function(t){return this.buffers[this.getAttribute(t).buffer]},ii.prototype.addIndex=function(t){return t.data||(t instanceof Array&&(t=new Uint16Array(t)),t=new Ke(t)),t.index=!0,this.indexBuffer=t,-1===this.buffers.indexOf(t)&&this.buffers.push(t),this},ii.prototype.getIndex=function(){return this.indexBuffer},ii.prototype.interleave=function(){if(1===this.buffers.length||2===this.buffers.length&&this.indexBuffer)return this;var t,e=[],i=[],r=new Ke;for(t in this.attributes){var n=this.attributes[t],o=this.buffers[n.buffer];e.push(o.data),i.push(n.size*$e[n.type]/4),n.buffer=0}for(r.data=function(t,e){for(var i=0,r=0,n={},o=0;o<t.length;o++)r+=e[o],i+=t[o].length;for(var s=new ArrayBuffer(4*i),a=null,h=0,l=0;l<t.length;l++){var u=e[l],c=t[l],d=Qe(c);n[d]||(n[d]=new Je[d](s)),a=n[d];for(var p=0;p<c.length;p++){a[(p/u|0)*r+h+p%u]=c[p]}h+=u}return new Float32Array(s)}(e,i),t=0;t<this.buffers.length;t++)this.buffers[t]!==this.indexBuffer&&this.buffers[t].destroy();return this.buffers=[r],this.indexBuffer&&this.buffers.push(this.indexBuffer),this},ii.prototype.getSize=function(){for(var t in this.attributes){var e=this.attributes[t];return this.buffers[e.buffer].data.length/(e.stride/4||e.size)}return 0},ii.prototype.dispose=function(){this.disposeRunner.run(this,!1)},ii.prototype.destroy=function(){this.dispose(),this.buffers=null,this.indexBuffer.destroy(),this.attributes=null},ii.prototype.clone=function(){for(var t=new ii,e=0;e<this.buffers.length;e++)t.buffers[e]=new Ke(this.buffers[e].data.slice());for(var i in this.attributes){var r=this.attributes[i];t.attributes[i]=new qe(r.buffer,r.size,r.normalized,r.type,r.stride,r.start,r.instance)}return this.indexBuffer&&(t.indexBuffer=t.buffers[this.buffers.indexOf(this.indexBuffer)],t.indexBuffer.index=!0),t},ii.merge=function(t){for(var e,i=new ii,r=[],n=[],o=[],s=0;s<t.length;s++){e=t[s];for(var a=0;a<e.buffers.length;a++)n[a]=n[a]||0,n[a]+=e.buffers[a].data.length,o[a]=0}for(var h=0;h<e.buffers.length;h++)r[h]=new(ei[Qe(e.buffers[h].data)])(n[h]),i.buffers[h]=new Ke(r[h]);for(var l=0;l<t.length;l++){e=t[l];for(var u=0;u<e.buffers.length;u++)r[u].set(e.buffers[u].data,o[u]),o[u]+=e.buffers[u].data.length}if(i.attributes=e.attributes,e.indexBuffer){i.indexBuffer=i.buffers[e.buffers.indexOf(e.indexBuffer)],i.indexBuffer.index=!0;for(var c=0,d=0,p=0,f=0,m=0;m<e.buffers.length;m++)if(e.buffers[m]!==e.indexBuffer){f=m;break}for(var y in e.attributes){var v=e.attributes[y];(0|v.buffer)===f&&(d+=v.size*$e[v.type]/4)}for(var g=0;g<t.length;g++){for(var x=t[g].indexBuffer.data,b=0;b<x.length;b++)i.indexBuffer.data[b+p]+=c;c+=e.buffers[f].data.length/d,p+=x.length}}return i};var ri=function(t){function e(){t.call(this),this.addAttribute("aVertexPosition",[0,0,1,0,1,1,0,1]).addIndex([0,1,3,2])}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(ii),ni=function(t){function e(){t.call(this),this.vertices=new Float32Array([-1,-1,1,-1,1,1,-1,1]),this.uvs=new Float32Array([0,0,1,0,1,1,0,1]),this.vertexBuffer=new Ke(this.vertices),this.uvBuffer=new Ke(this.uvs),this.addAttribute("aVertexPosition",this.vertexBuffer).addAttribute("aTextureCoord",this.uvBuffer).addIndex([0,1,2,0,2,3])}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.map=function(t,e){var i=0,r=0;return this.uvs[0]=i,this.uvs[1]=r,this.uvs[2]=i+e.width/t.width,this.uvs[3]=r,this.uvs[4]=i+e.width/t.width,this.uvs[5]=r+e.height/t.height,this.uvs[6]=i,this.uvs[7]=r+e.height/t.height,i=e.x,r=e.y,this.vertices[0]=i,this.vertices[1]=r,this.vertices[2]=i+e.width,this.vertices[3]=r,this.vertices[4]=i+e.width,this.vertices[5]=r+e.height,this.vertices[6]=i,this.vertices[7]=r+e.height,this.invalidate(),this},e.prototype.invalidate=function(){return this.vertexBuffer._updateID++,this.uvBuffer._updateID++,this},e}(ii),oi=0,si=function(t,e){this.uniforms=t,this.group=!0,this.syncUniforms={},this.dirtyId=0,this.id=oi++,this.static=!!e};si.prototype.update=function(){this.dirtyId++},si.prototype.add=function(t,e,i){this.uniforms[t]=new si(e,i)},si.from=function(t,e){return new si(t,e)};var ai=function(){this.renderTexture=null,this.target=null,this.legacy=!1,this.resolution=1,this.sourceFrame=new ce,this.destinationFrame=new ce,this.filters=[]};ai.prototype.clear=function(){this.target=null,this.filters=null,this.renderTexture=null};var hi=function(t){function e(e){t.call(this,e),this.defaultFilterStack=[{}],this.texturePool=new Ye,this.texturePool.setScreenSize(e.view),this.statePool=[],this.quad=new ri,this.quadUv=new ni,this.tempRect=new ce,this.activeState={},this.globalUniforms=new si({outputFrame:this.tempRect,inputSize:new Float32Array(4),inputPixel:new Float32Array(4),inputClamp:new Float32Array(4),resolution:1,filterArea:new Float32Array(4),filterClamp:new Float32Array(4)},!0),this._pixelsWidth=e.view.width,this._pixelsHeight=e.view.height}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(t,e){for(var i=this.renderer,r=this.defaultFilterStack,n=this.statePool.pop()||new ai,o=e[0].resolution,s=e[0].padding,a=e[0].autoFit,h=e[0].legacy,l=1;l<e.length;l++){var u=e[l];o=Math.min(o,u.resolution),s=Math.max(s,u.padding),a=a||u.autoFit,h=h||u.legacy}1===r.length&&(this.defaultFilterStack[0].renderTexture=i.renderTexture.current),r.push(n),n.resolution=o,n.legacy=h,n.target=t,n.sourceFrame.copyFrom(t.filterArea||t.getBounds(!0)),n.sourceFrame.pad(s),a&&n.sourceFrame.fit(this.renderer.renderTexture.sourceFrame),n.sourceFrame.ceil(o),n.renderTexture=this.getOptimalFilterTexture(n.sourceFrame.width,n.sourceFrame.height,o),n.filters=e,n.destinationFrame.width=n.renderTexture.width,n.destinationFrame.height=n.renderTexture.height,n.renderTexture.filterFrame=n.sourceFrame,i.renderTexture.bind(n.renderTexture,n.sourceFrame),i.renderTexture.clear()},e.prototype.pop=function(){var t=this.defaultFilterStack,e=t.pop(),i=e.filters;this.activeState=e;var r=this.globalUniforms.uniforms;r.outputFrame=e.sourceFrame,r.resolution=e.resolution;var n=r.inputSize,o=r.inputPixel,s=r.inputClamp;if(n[0]=e.destinationFrame.width,n[1]=e.destinationFrame.height,n[2]=1/n[0],n[3]=1/n[1],o[0]=n[0]*e.resolution,o[1]=n[1]*e.resolution,o[2]=1/o[0],o[3]=1/o[1],s[0]=.5*o[2],s[1]=.5*o[3],s[2]=e.sourceFrame.width*n[2]-.5*o[2],s[3]=e.sourceFrame.height*n[3]-.5*o[3],e.legacy){var a=r.filterArea;a[0]=e.destinationFrame.width,a[1]=e.destinationFrame.height,a[2]=e.sourceFrame.x,a[3]=e.sourceFrame.y,r.filterClamp=r.inputClamp}this.globalUniforms.update();var h=t[t.length-1];if(1===i.length)i[0].apply(this,e.renderTexture,h.renderTexture,!1,e),this.returnFilterTexture(e.renderTexture);else{var l=e.renderTexture,u=this.getOptimalFilterTexture(l.width,l.height,e.resolution);u.filterFrame=l.filterFrame;var c=0;for(c=0;c<i.length-1;++c){i[c].apply(this,l,u,!0,e);var d=l;l=u,u=d}i[c].apply(this,l,h.renderTexture,!1,e),this.returnFilterTexture(l),this.returnFilterTexture(u)}e.clear(),this.statePool.push(e)},e.prototype.applyFilter=function(t,e,i,r){var n=this.renderer;n.renderTexture.bind(i,i?i.filterFrame:null),r&&n.renderTexture.clear(),t.uniforms.uSampler=e,t.uniforms.filterGlobals=this.globalUniforms,n.state.set(t.state),n.shader.bind(t),t.legacy?(this.quadUv.map(e._frame,e.filterFrame),n.geometry.bind(this.quadUv),n.geometry.draw(Q)):(n.geometry.bind(this.quad),n.geometry.draw(J))},e.prototype.calculateSpriteMatrix=function(t,e){var i=this.activeState,r=i.sourceFrame,n=i.destinationFrame,o=e._texture.orig,s=t.set(n.width,0,0,n.height,r.x,r.y),a=e.worldTransform.copyTo($t.TEMP_MATRIX);return a.invert(),s.prepend(a),s.scale(1/o.width,1/o.height),s.translate(e.anchor.x,e.anchor.y),s},e.prototype.destroy=function(){this.texturePool.clear(!1)},e.prototype.getOptimalFilterTexture=function(t,e,i){return void 0===i&&(i=1),this.texturePool.getOptimalTexture(t,e,i)},e.prototype.getFilterTexture=function(t,e){if("number"==typeof t){var i=t;t=e,e=i}t=t||this.activeState.renderTexture;var r=this.texturePool.getOptimalTexture(t.width,t.height,e||t.resolution);return r.filterFrame=t.filterFrame,r},e.prototype.returnFilterTexture=function(t){this.texturePool.returnTexture(t)},e.prototype.emptyPool=function(){this.texturePool.clear(!0)},e.prototype.resize=function(){this.texturePool.setScreenSize(this.renderer.view)},e}(Le),li=function(t){this.renderer=t};li.prototype.flush=function(){},li.prototype.destroy=function(){this.renderer=null},li.prototype.start=function(){},li.prototype.stop=function(){this.flush()},li.prototype.render=function(t){};var ui=function(t){function e(e){t.call(this,e),this.emptyRenderer=new li(e),this.currentRenderer=this.emptyRenderer}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setObjectRenderer=function(t){this.currentRenderer!==t&&(this.currentRenderer.stop(),this.currentRenderer=t,this.currentRenderer.start())},e.prototype.flush=function(){this.setObjectRenderer(this.emptyRenderer)},e.prototype.reset=function(){this.setObjectRenderer(this.emptyRenderer)},e}(Le);d.PREFER_ENV=c.a.any?g:x;var ci=0,di=function(t){function e(e){t.call(this,e),this.webGLVersion=1,this.extensions={},this.handleContextLost=this.handleContextLost.bind(this),this.handleContextRestored=this.handleContextRestored.bind(this),e.view.addEventListener("webglcontextlost",this.handleContextLost,!1),e.view.addEventListener("webglcontextrestored",this.handleContextRestored,!1)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={isLost:{configurable:!0}};return i.isLost.get=function(){return!this.gl||this.gl.isContextLost()},e.prototype.contextChange=function(t){this.gl=t,this.renderer.gl=t,this.renderer.CONTEXT_UID=ci++,t.isContextLost()&&t.getExtension("WEBGL_lose_context")&&t.getExtension("WEBGL_lose_context").restoreContext()},e.prototype.initFromContext=function(t){this.gl=t,this.validateContext(t),this.renderer.gl=t,this.renderer.CONTEXT_UID=ci++,this.renderer.runners.contextChange.run(t)},e.prototype.initFromOptions=function(t){var e=this.createContext(this.renderer.view,t);this.initFromContext(e)},e.prototype.createContext=function(t,e){var i;if(d.PREFER_ENV>=x&&(i=t.getContext("webgl2",e)),i)this.webGLVersion=2;else if(this.webGLVersion=1,!(i=t.getContext("webgl",e)||t.getContext("experimental-webgl",e)))throw new Error("This browser does not support WebGL. Try using the canvas renderer");return this.gl=i,this.getExtensions(),i},e.prototype.getExtensions=function(){var t=this.gl;1===this.webGLVersion?Object.assign(this.extensions,{drawBuffers:t.getExtension("WEBGL_draw_buffers"),depthTexture:t.getExtension("WEBKIT_WEBGL_depth_texture"),loseContext:t.getExtension("WEBGL_lose_context"),vertexArrayObject:t.getExtension("OES_vertex_array_object")||t.getExtension("MOZ_OES_vertex_array_object")||t.getExtension("WEBKIT_OES_vertex_array_object"),anisotropicFiltering:t.getExtension("EXT_texture_filter_anisotropic"),uint32ElementIndex:t.getExtension("OES_element_index_uint"),floatTexture:t.getExtension("OES_texture_float"),floatTextureLinear:t.getExtension("OES_texture_float_linear"),textureHalfFloat:t.getExtension("OES_texture_half_float"),textureHalfFloatLinear:t.getExtension("OES_texture_half_float_linear")}):2===this.webGLVersion&&Object.assign(this.extensions,{anisotropicFiltering:t.getExtension("EXT_texture_filter_anisotropic"),colorBufferFloat:t.getExtension("EXT_color_buffer_float"),floatTextureLinear:t.getExtension("OES_texture_float_linear")})},e.prototype.handleContextLost=function(t){t.preventDefault()},e.prototype.handleContextRestored=function(){this.renderer.runners.contextChange.run(this.gl)},e.prototype.destroy=function(){var t=this.renderer.view;t.removeEventListener("webglcontextlost",this.handleContextLost),t.removeEventListener("webglcontextrestored",this.handleContextRestored),this.gl.useProgram(null),this.extensions.loseContext&&this.extensions.loseContext.loseContext()},e.prototype.postrender=function(){this.gl.flush()},e.prototype.validateContext=function(t){t.getContextAttributes().stencil||console.warn("Provided WebGL context does not have a stencil buffer, masks may not render correctly")},Object.defineProperties(e.prototype,i),e}(Le),pi=function(t){function e(e){t.call(this,e),this.managedFramebuffers=[],this.unknownFramebuffer=new Ue(10,10)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={size:{configurable:!0}};return e.prototype.contextChange=function(){var t=this.gl=this.renderer.gl;if(this.CONTEXT_UID=this.renderer.CONTEXT_UID,this.current=this.unknownFramebuffer,this.viewport=new ce,this.hasMRT=!0,this.writeDepthTexture=!0,this.disposeAll(!0),1===this.renderer.context.webGLVersion){var e=this.renderer.context.extensions.drawBuffers,i=this.renderer.context.extensions.depthTexture;d.PREFER_ENV===v&&(e=null,i=null),e?t.drawBuffers=function(t){return e.drawBuffersWEBGL(t)}:(this.hasMRT=!1,t.drawBuffers=function(){}),i||(this.writeDepthTexture=!1)}},e.prototype.bind=function(t,e){var i=this.gl;if(t){var r=t.glFramebuffers[this.CONTEXT_UID]||this.initFramebuffer(t);this.current!==t&&(this.current=t,i.bindFramebuffer(i.FRAMEBUFFER,r.framebuffer)),r.dirtyId!==t.dirtyId&&(r.dirtyId=t.dirtyId,r.dirtyFormat!==t.dirtyFormat?(r.dirtyFormat=t.dirtyFormat,this.updateFramebuffer(t)):r.dirtySize!==t.dirtySize&&(r.dirtySize=t.dirtySize,this.resizeFramebuffer(t)));for(var n=0;n<t.colorTextures.length;n++)t.colorTextures[n].texturePart?this.renderer.texture.unbind(t.colorTextures[n].texture):this.renderer.texture.unbind(t.colorTextures[n]);t.depthTexture&&this.renderer.texture.unbind(t.depthTexture),e?this.setViewport(e.x,e.y,e.width,e.height):this.setViewport(0,0,t.width,t.height)}else this.current&&(this.current=null,i.bindFramebuffer(i.FRAMEBUFFER,null)),e?this.setViewport(e.x,e.y,e.width,e.height):this.setViewport(0,0,this.renderer.width,this.renderer.height)},e.prototype.setViewport=function(t,e,i,r){var n=this.viewport;n.width===i&&n.height===r&&n.x===t&&n.y===e||(n.x=t,n.y=e,n.width=i,n.height=r,this.gl.viewport(t,e,i,r))},i.size.get=function(){return this.current?{x:0,y:0,width:this.current.width,height:this.current.height}:{x:0,y:0,width:this.renderer.width,height:this.renderer.height}},e.prototype.clear=function(t,e,i,r){var n=this.gl;n.clearColor(t,e,i,r),n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT)},e.prototype.initFramebuffer=function(t){var e={framebuffer:this.gl.createFramebuffer(),stencil:null,dirtyId:0,dirtyFormat:0,dirtySize:0};return t.glFramebuffers[this.CONTEXT_UID]=e,this.managedFramebuffers.push(t),t.disposeRunner.add(this),e},e.prototype.resizeFramebuffer=function(t){var e=this.gl,i=t.glFramebuffers[this.CONTEXT_UID];i.stencil&&(e.bindRenderbuffer(e.RENDERBUFFER,i.stencil),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,t.width,t.height));for(var r=t.colorTextures,n=0;n<r.length;n++)this.renderer.texture.bind(r[n],0);t.depthTexture&&this.renderer.texture.bind(t.depthTexture,0)},e.prototype.updateFramebuffer=function(t){var e=this.gl,i=t.glFramebuffers[this.CONTEXT_UID],r=t.colorTextures.length;e.drawBuffers||(r=Math.min(r,1));for(var n=[],o=0;o<r;o++){var s=t.colorTextures[o];s.texturePart?(this.renderer.texture.bind(s.texture,0),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+o,e.TEXTURE_CUBE_MAP_NEGATIVE_X+s.side,s.texture._glTextures[this.CONTEXT_UID].texture,0)):(this.renderer.texture.bind(s,0),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+o,e.TEXTURE_2D,s._glTextures[this.CONTEXT_UID].texture,0)),n.push(e.COLOR_ATTACHMENT0+o)}if((n.length>1&&e.drawBuffers(n),t.depthTexture)&&this.writeDepthTexture){var a=t.depthTexture;this.renderer.texture.bind(a,0),e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,a._glTextures[this.CONTEXT_UID].texture,0)}i.stencil||!t.stencil&&!t.depth||(i.stencil=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,i.stencil),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,t.width,t.height),t.depthTexture||e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,i.stencil))},e.prototype.disposeFramebuffer=function(t,e){var i=t.glFramebuffers[this.CONTEXT_UID],r=this.gl;if(i){delete t.glFramebuffers[this.CONTEXT_UID];var n=this.managedFramebuffers.indexOf(t);n>=0&&this.managedFramebuffers.splice(n,1),t.disposeRunner.remove(this),e||(r.deleteFramebuffer(i.framebuffer),i.stencil&&r.deleteRenderbuffer(i.stencil))}},e.prototype.disposeAll=function(t){var e=this.managedFramebuffers;this.managedFramebuffers=[];for(var i=0;i<e.length;i++)this.disposeFramebuffer(e[i],t)},e.prototype.forceStencil=function(){var t=this.current;if(t){var e=t.glFramebuffers[this.CONTEXT_UID];if(e&&!e.stencil){t.enableStencil();var i=t.width,r=t.height,n=this.gl,o=n.createRenderbuffer();n.bindRenderbuffer(n.RENDERBUFFER,o),n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_STENCIL,i,r),e.stencil=o,n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.RENDERBUFFER,o)}}},e.prototype.reset=function(){this.current=this.unknownFramebuffer,this.viewport=new ce},Object.defineProperties(e.prototype,i),e}(Le),fi=function(t){this.buffer=t,this.updateID=-1,this.byteLength=-1,this.refCount=0},mi={5126:4,5123:2,5121:1},yi=function(t){function e(e){t.call(this,e),this._activeGeometry=null,this._activeVao=null,this.hasVao=!0,this.hasInstance=!0,this.canUseUInt32ElementIndex=!1,this.boundBuffers={},this.managedGeometries={},this.managedBuffers={}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(){this.disposeAll(!0);var t=this.gl=this.renderer.gl,e=this.renderer.context;if(this.CONTEXT_UID=this.renderer.CONTEXT_UID,!t.createVertexArray){var i=this.renderer.context.extensions.vertexArrayObject;d.PREFER_ENV===v&&(i=null),i?(t.createVertexArray=function(){return i.createVertexArrayOES()},t.bindVertexArray=function(t){return i.bindVertexArrayOES(t)},t.deleteVertexArray=function(t){return i.deleteVertexArrayOES(t)}):(this.hasVao=!1,t.createVertexArray=function(){},t.bindVertexArray=function(){},t.deleteVertexArray=function(){})}if(!t.vertexAttribDivisor){var r=t.getExtension("ANGLE_instanced_arrays");r?(t.vertexAttribDivisor=function(t,e){return r.vertexAttribDivisorANGLE(t,e)},t.drawElementsInstanced=function(t,e,i,n,o){return r.drawElementsInstancedANGLE(t,e,i,n,o)},t.drawArraysInstanced=function(t,e,i,n){return r.drawArraysInstancedANGLE(t,e,i,n)}):this.hasInstance=!1}this.canUseUInt32ElementIndex=2===e.webGLVersion||!!e.extensions.uint32ElementIndex},e.prototype.bind=function(t,e){e=e||this.renderer.shader.shader;var i=this.gl,r=t.glVertexArrayObjects[this.CONTEXT_UID];r||(this.managedGeometries[t.id]=t,t.disposeRunner.add(this),t.glVertexArrayObjects[this.CONTEXT_UID]=r={});var n=r[e.program.id]||this.initGeometryVao(t,e.program);this._activeGeometry=t,this._activeVao!==n&&(this._activeVao=n,this.hasVao?i.bindVertexArray(n):this.activateVao(t,e.program)),this.updateBuffers()},e.prototype.reset=function(){this.unbind()},e.prototype.updateBuffers=function(){for(var t=this._activeGeometry,e=this.gl,i=0;i<t.buffers.length;i++){var r=t.buffers[i],n=r._glBuffers[this.CONTEXT_UID];if(r._updateID!==n.updateID){n.updateID=r._updateID;var o=r.index?e.ELEMENT_ARRAY_BUFFER:e.ARRAY_BUFFER;if(e.bindBuffer(o,n.buffer),this._boundBuffer=n,n.byteLength>=r.data.byteLength)e.bufferSubData(o,0,r.data);else{var s=r.static?e.STATIC_DRAW:e.DYNAMIC_DRAW;n.byteLength=r.data.byteLength,e.bufferData(o,r.data,s)}}}},e.prototype.checkCompatibility=function(t,e){var i=t.attributes,r=e.attributeData;for(var n in r)if(!i[n])throw new Error('shader and geometry incompatible, geometry missing the "'+n+'" attribute')},e.prototype.getSignature=function(t,e){var i=t.attributes,r=e.attributeData,n=["g",t.id];for(var o in i)r[o]&&n.push(o);return n.join("-")},e.prototype.initGeometryVao=function(t,e){this.checkCompatibility(t,e);var i=this.gl,r=this.CONTEXT_UID,n=this.getSignature(t,e),o=t.glVertexArrayObjects[this.CONTEXT_UID],s=o[n];if(s)return o[e.id]=s,s;var a=t.buffers,h=t.attributes,l={},u={};for(var c in a)l[c]=0,u[c]=0;for(var d in h)!h[d].size&&e.attributeData[d]?h[d].size=e.attributeData[d].size:h[d].size||console.warn("PIXI Geometry attribute '"+d+"' size cannot be determined (likely the bound shader does not have the attribute)"),l[h[d].buffer]+=h[d].size*mi[h[d].type];for(var p in h){var f=h[p],m=f.size;void 0===f.stride&&(l[f.buffer]===m*mi[f.type]?f.stride=0:f.stride=l[f.buffer]),void 0===f.start&&(f.start=u[f.buffer],u[f.buffer]+=m*mi[f.type])}s=i.createVertexArray(),i.bindVertexArray(s);for(var y=0;y<a.length;y++){var v=a[y];v._glBuffers[r]||(v._glBuffers[r]=new fi(i.createBuffer()),this.managedBuffers[v.id]=v,v.disposeRunner.add(this)),v._glBuffers[r].refCount++}return this.activateVao(t,e),this._activeVao=s,o[e.id]=s,o[n]=s,s},e.prototype.disposeBuffer=function(t,e){if(this.managedBuffers[t.id]){delete this.managedBuffers[t.id];var i=t._glBuffers[this.CONTEXT_UID],r=this.gl;t.disposeRunner.remove(this),i&&(e||r.deleteBuffer(i.buffer),delete t._glBuffers[this.CONTEXT_UID])}},e.prototype.disposeGeometry=function(t,e){if(this.managedGeometries[t.id]){delete this.managedGeometries[t.id];var i=t.glVertexArrayObjects[this.CONTEXT_UID],r=this.gl,n=t.buffers;if(t.disposeRunner.remove(this),i){for(var o=0;o<n.length;o++){var s=n[o]._glBuffers[this.CONTEXT_UID];s.refCount--,0!==s.refCount||e||this.disposeBuffer(n[o],e)}if(!e)for(var a in i)if("g"===a[0]){var h=i[a];this._activeVao===h&&this.unbind(),r.deleteVertexArray(h)}delete t.glVertexArrayObjects[this.CONTEXT_UID]}}},e.prototype.disposeAll=function(t){for(var e=Object.keys(this.managedGeometries),i=0;i<e.length;i++)this.disposeGeometry(this.managedGeometries[e[i]],t);e=Object.keys(this.managedBuffers);for(var r=0;r<e.length;r++)this.disposeBuffer(this.managedBuffers[e[r]],t)},e.prototype.activateVao=function(t,e){var i=this.gl,r=this.CONTEXT_UID,n=t.buffers,o=t.attributes;t.indexBuffer&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,t.indexBuffer._glBuffers[r].buffer);var s=null;for(var a in o){var h=o[a],l=n[h.buffer]._glBuffers[r];if(e.attributeData[a]){s!==l&&(i.bindBuffer(i.ARRAY_BUFFER,l.buffer),s=l);var u=e.attributeData[a].location;if(i.enableVertexAttribArray(u),i.vertexAttribPointer(u,h.size,h.type||i.FLOAT,h.normalized,h.stride,h.start),h.instance){if(!this.hasInstance)throw new Error("geometry error, GPU Instancing is not supported on this device");i.vertexAttribDivisor(u,1)}}}},e.prototype.draw=function(t,e,i,r){var n=this.gl,o=this._activeGeometry;if(o.indexBuffer){var s=o.indexBuffer.data.BYTES_PER_ELEMENT,a=2===s?n.UNSIGNED_SHORT:n.UNSIGNED_INT;2===s||4===s&&this.canUseUInt32ElementIndex?o.instanced?n.drawElementsInstanced(t,e||o.indexBuffer.data.length,a,(i||0)*s,r||1):n.drawElements(t,e||o.indexBuffer.data.length,a,(i||0)*s):console.warn("unsupported index buffer type: uint32")}else o.instanced?n.drawArraysInstanced(t,i,e||o.getSize(),r||1):n.drawArrays(t,i,e||o.getSize());return this},e.prototype.unbind=function(){this.gl.bindVertexArray(null),this._activeVao=null,this._activeGeometry=null},e}(Le);function vi(t,e,i,r){var n=gi(t,t.VERTEX_SHADER,e),o=gi(t,t.FRAGMENT_SHADER,i),s=t.createProgram();if(t.attachShader(s,n),t.attachShader(s,o),r)for(var a in r)t.bindAttribLocation(s,r[a],a);return t.linkProgram(s),t.getProgramParameter(s,t.LINK_STATUS)||(console.error("Pixi.js Error: Could not initialize shader."),console.error("gl.VALIDATE_STATUS",t.getProgramParameter(s,t.VALIDATE_STATUS)),console.error("gl.getError()",t.getError()),""!==t.getProgramInfoLog(s)&&console.warn("Pixi.js Warning: gl.getProgramInfoLog()",t.getProgramInfoLog(s)),t.deleteProgram(s),s=null),t.deleteShader(n),t.deleteShader(o),s}function gi(t,e,i){var r=t.createShader(e);return t.shaderSource(r,i),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS)?r:(console.warn(i),console.error(t.getShaderInfoLog(r)),null)}function xi(t,e){switch(t){case"float":return 0;case"vec2":return new Float32Array(2*e);case"vec3":return new Float32Array(3*e);case"vec4":return new Float32Array(4*e);case"int":case"sampler2D":case"sampler2DArray":return 0;case"ivec2":return new Int32Array(2*e);case"ivec3":return new Int32Array(3*e);case"ivec4":return new Int32Array(4*e);case"bool":return!1;case"bvec2":return bi(2*e);case"bvec3":return bi(3*e);case"bvec4":return bi(4*e);case"mat2":return new Float32Array([1,0,0,1]);case"mat3":return new Float32Array([1,0,0,0,1,0,0,0,1]);case"mat4":return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}return null}function bi(t){for(var e=new Array(t),i=0;i<e.length;i++)e[i]=!1;return e}var wi,_i={},Si=_i;function Ti(){if(Si===_i||Si.isContextLost()){var t,e=document.createElement("canvas");d.PREFER_ENV>=x&&(t=e.getContext("webgl2",{})),t||((t=e.getContext("webgl",{})||e.getContext("experimental-webgl",{}))?t.getExtension("WEBGL_draw_buffers"):t=null),Si=t}return Si}function Ci(t,e,i){if("precision"!==t.substring(0,9)){var r=e;return e===mt&&i!==mt&&(r=ft),"precision "+r+" float;\n"+t}return i!==mt&&"precision highp"===t.substring(0,15)?t.replace("precision highp","precision mediump"):t}var Ii={float:1,vec2:2,vec3:3,vec4:4,int:1,ivec2:2,ivec3:3,ivec4:4,bool:1,bvec2:2,bvec3:3,bvec4:4,mat2:4,mat3:9,mat4:16,sampler2D:1};function Ei(t){return Ii[t]}var Ai=null,Pi={FLOAT:"float",FLOAT_VEC2:"vec2",FLOAT_VEC3:"vec3",FLOAT_VEC4:"vec4",INT:"int",INT_VEC2:"ivec2",INT_VEC3:"ivec3",INT_VEC4:"ivec4",BOOL:"bool",BOOL_VEC2:"bvec2",BOOL_VEC3:"bvec3",BOOL_VEC4:"bvec4",FLOAT_MAT2:"mat2",FLOAT_MAT3:"mat3",FLOAT_MAT4:"mat4",SAMPLER_2D:"sampler2D",SAMPLER_CUBE:"samplerCube",SAMPLER_2D_ARRAY:"sampler2DArray"};function Mi(t,e){if(!Ai){var i=Object.keys(Pi);Ai={};for(var r=0;r<i.length;++r){var n=i[r];Ai[t[n]]=Pi[n]}}return Ai[e]}var Oi={float:"\n    if(cv !== v)\n    {\n        cv.v = v;\n        gl.uniform1f(location, v)\n    }",vec2:"\n    if(cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        gl.uniform2f(location, v[0], v[1])\n    }",vec3:"\n    if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3f(location, v[0], v[1], v[2])\n    }",vec4:"gl.uniform4f(location, v[0], v[1], v[2], v[3])",int:"gl.uniform1i(location, v)",ivec2:"gl.uniform2i(location, v[0], v[1])",ivec3:"gl.uniform3i(location, v[0], v[1], v[2])",ivec4:"gl.uniform4i(location, v[0], v[1], v[2], v[3])",bool:"gl.uniform1i(location, v)",bvec2:"gl.uniform2i(location, v[0], v[1])",bvec3:"gl.uniform3i(location, v[0], v[1], v[2])",bvec4:"gl.uniform4i(location, v[0], v[1], v[2], v[3])",mat2:"gl.uniformMatrix2fv(location, false, v)",mat3:"gl.uniformMatrix3fv(location, false, v)",mat4:"gl.uniformMatrix4fv(location, false, v)",sampler2D:"gl.uniform1i(location, v)",samplerCube:"gl.uniform1i(location, v)",sampler2DArray:"gl.uniform1i(location, v)"},ki={float:"gl.uniform1fv(location, v)",vec2:"gl.uniform2fv(location, v)",vec3:"gl.uniform3fv(location, v)",vec4:"gl.uniform4fv(location, v)",mat4:"gl.uniformMatrix4fv(location, false, v)",mat3:"gl.uniformMatrix3fv(location, false, v)",mat2:"gl.uniformMatrix2fv(location, false, v)",int:"gl.uniform1iv(location, v)",ivec2:"gl.uniform2iv(location, v)",ivec3:"gl.uniform3iv(location, v)",ivec4:"gl.uniform4iv(location, v)",bool:"gl.uniform1iv(location, v)",bvec2:"gl.uniform2iv(location, v)",bvec3:"gl.uniform3iv(location, v)",bvec4:"gl.uniform4iv(location, v)",sampler2D:"gl.uniform1iv(location, v)",samplerCube:"gl.uniform1iv(location, v)",sampler2DArray:"gl.uniform1iv(location, v)"};var Bi,Ri=["precision mediump float;","void main(void){","float test = 0.1;","%forloop%","gl_FragColor = vec4(0.0);","}"].join("\n");function Di(t){for(var e="",i=0;i<t;++i)i>0&&(e+="\nelse "),i<t-1&&(e+="if(test == "+i+".0){}");return e}var Fi=0,Li={},Ni=function t(e,i,r){void 0===r&&(r="pixi-shader"),this.id=Fi++,this.vertexSrc=e||t.defaultVertexSrc,this.fragmentSrc=i||t.defaultFragmentSrc,this.vertexSrc=this.vertexSrc.trim(),this.fragmentSrc=this.fragmentSrc.trim(),"#version"!==this.vertexSrc.substring(0,8)&&(r=r.replace(/\s+/g,"-"),Li[r]?(Li[r]++,r+="-"+Li[r]):Li[r]=1,this.vertexSrc="#define SHADER_NAME "+r+"\n"+this.vertexSrc,this.fragmentSrc="#define SHADER_NAME "+r+"\n"+this.fragmentSrc,this.vertexSrc=Ci(this.vertexSrc,d.PRECISION_VERTEX,mt),this.fragmentSrc=Ci(this.fragmentSrc,d.PRECISION_FRAGMENT,function(){if(!wi){wi=ft;var t=Ti();if(t&&t.getShaderPrecisionFormat){var e=t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT);wi=e.precision?mt:ft}}return wi}())),this.extractData(this.vertexSrc,this.fragmentSrc),this.glPrograms={},this.syncUniforms=null},Ui={defaultVertexSrc:{configurable:!0},defaultFragmentSrc:{configurable:!0}};Ni.prototype.extractData=function(t,e){var i=Ti();if(i){var r=vi(i,t,e);this.attributeData=this.getAttributeData(r,i),this.uniformData=this.getUniformData(r,i),i.deleteProgram(r)}else this.uniformData={},this.attributeData={}},Ni.prototype.getAttributeData=function(t,e){for(var i={},r=[],n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),o=0;o<n;o++){var s=e.getActiveAttrib(t,o),a=Mi(e,s.type),h={type:a,name:s.name,size:Ei(a),location:0};i[s.name]=h,r.push(h)}r.sort((function(t,e){return t.name>e.name?1:-1}));for(var l=0;l<r.length;l++)r[l].location=l;return i},Ni.prototype.getUniformData=function(t,e){for(var i={},r=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),n=0;n<r;n++){var o=e.getActiveUniform(t,n),s=o.name.replace(/\[.*?\]/,""),a=o.name.match(/\[.*?\]/,""),h=Mi(e,o.type);i[s]={type:h,size:o.size,isArray:a,value:xi(h,o.size)}}return i},Ui.defaultVertexSrc.get=function(){return"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vTextureCoord = aTextureCoord;\n}\n"},Ui.defaultFragmentSrc.get=function(){return"varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor *= texture2D(uSampler, vTextureCoord);\n}"},Ni.from=function(t,e,i){var r=t+e,n=Et[r];return n||(Et[r]=n=new Ni(t,e,i)),n},Object.defineProperties(Ni,Ui);var Vi=function(t,e){for(var i in this.program=t,this.uniformGroup=e?e instanceof si?e:new si(e):new si({}),t.uniformData)this.uniformGroup.uniforms[i]instanceof Array&&(this.uniformGroup.uniforms[i]=new Float32Array(this.uniformGroup.uniforms[i]))},Xi={uniforms:{configurable:!0}};Vi.prototype.checkUniformExists=function(t,e){if(e.uniforms[t])return!0;for(var i in e.uniforms){var r=e.uniforms[i];if(r.group&&this.checkUniformExists(t,r))return!0}return!1},Vi.prototype.destroy=function(){this.uniformGroup=null},Xi.uniforms.get=function(){return this.uniformGroup.uniforms},Vi.from=function(t,e,i){var r=Ni.from(t,e);return new Vi(r,i)},Object.defineProperties(Vi.prototype,Xi);var ji=function(){this.data=0,this.blendMode=_,this.polygonOffset=0,this.blend=!0},zi={blend:{configurable:!0},offsets:{configurable:!0},culling:{configurable:!0},depthTest:{configurable:!0},clockwiseFrontFace:{configurable:!0},blendMode:{configurable:!0},polygonOffset:{configurable:!0}};zi.blend.get=function(){return!!(1&this.data)},zi.blend.set=function(t){!!(1&this.data)!==t&&(this.data^=1)},zi.offsets.get=function(){return!!(2&this.data)},zi.offsets.set=function(t){!!(2&this.data)!==t&&(this.data^=2)},zi.culling.get=function(){return!!(4&this.data)},zi.culling.set=function(t){!!(4&this.data)!==t&&(this.data^=4)},zi.depthTest.get=function(){return!!(8&this.data)},zi.depthTest.set=function(t){!!(8&this.data)!==t&&(this.data^=8)},zi.clockwiseFrontFace.get=function(){return!!(16&this.data)},zi.clockwiseFrontFace.set=function(t){!!(16&this.data)!==t&&(this.data^=16)},zi.blendMode.get=function(){return this._blendMode},zi.blendMode.set=function(t){this.blend=t!==j,this._blendMode=t},zi.polygonOffset.get=function(){return this._polygonOffset},zi.polygonOffset.set=function(t){this.offsets=!!t,this._polygonOffset=t},ji.for2d=function(){var t=new ji;return t.depthTest=!1,t.blend=!0,t},Object.defineProperties(ji.prototype,zi);var Gi=function(t){function e(i,r,n){var o=Ni.from(i||e.defaultVertexSrc,r||e.defaultFragmentSrc);t.call(this,o,n),this.padding=0,this.resolution=d.FILTER_RESOLUTION,this.enabled=!0,this.autoFit=!0,this.legacy=!!this.program.attributeData.aTextureCoord,this.state=new ji}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={blendMode:{configurable:!0}},r={defaultVertexSrc:{configurable:!0},defaultFragmentSrc:{configurable:!0}};return e.prototype.apply=function(t,e,i,r,n){t.applyFilter(this,e,i,r,n)},i.blendMode.get=function(){return this.state.blendMode},i.blendMode.set=function(t){this.state.blendMode=t},r.defaultVertexSrc.get=function(){return"attribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n"},r.defaultFragmentSrc.get=function(){return"varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor = texture2D(uSampler, vTextureCoord);\n}\n"},Object.defineProperties(e.prototype,i),Object.defineProperties(e,r),e}(Vi);Gi.SOURCE_KEY_MAP={};var Hi=new $t,Wi=function(t,e){this._texture=t,this.mapCoord=new $t,this.uClampFrame=new Float32Array(4),this.uClampOffset=new Float32Array(2),this._updateID=-1,this.clampOffset=0,this.clampMargin=void 0===e?.5:e,this.isSimple=!1},Yi={texture:{configurable:!0}};Yi.texture.get=function(){return this._texture},Yi.texture.set=function(t){this._texture=t,this._updateID=-1},Wi.prototype.multiplyUvs=function(t,e){void 0===e&&(e=t);for(var i=this.mapCoord,r=0;r<t.length;r+=2){var n=t[r],o=t[r+1];e[r]=n*i.a+o*i.c+i.tx,e[r+1]=n*i.b+o*i.d+i.ty}return e},Wi.prototype.update=function(t){var e=this._texture;if(!e||!e.valid)return!1;if(!t&&this._updateID===e._updateID)return!1;this._updateID=e._updateID;var i=e._uvs;this.mapCoord.set(i.x1-i.x0,i.y1-i.y0,i.x3-i.x0,i.y3-i.y0,i.x0,i.y0);var r=e.orig,n=e.trim;n&&(Hi.set(r.width/n.width,0,0,r.height/n.height,-n.x/n.width,-n.y/n.height),this.mapCoord.append(Hi));var o=e.baseTexture,s=this.uClampFrame,a=this.clampMargin/o.resolution,h=this.clampOffset;return s[0]=(e._frame.x+a+h)/o.width,s[1]=(e._frame.y+a+h)/o.height,s[2]=(e._frame.x+e._frame.width-a+h)/o.width,s[3]=(e._frame.y+e._frame.height-a+h)/o.height,this.uClampOffset[0]=h/o.realWidth,this.uClampOffset[1]=h/o.realHeight,this.isSimple=e._frame.width===o.width&&e._frame.height===o.height&&0===e.rotate,!0},Object.defineProperties(Wi.prototype,Yi);var qi=function(t){function e(e){var i=new $t;t.call(this,"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 otherMatrix;\n\nvarying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n}\n","varying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform sampler2D mask;\nuniform float alpha;\nuniform float npmAlpha;\nuniform vec4 maskClamp;\n\nvoid main(void)\n{\n    float clip = step(3.5,\n        step(maskClamp.x, vMaskCoord.x) +\n        step(maskClamp.y, vMaskCoord.y) +\n        step(vMaskCoord.x, maskClamp.z) +\n        step(vMaskCoord.y, maskClamp.w));\n\n    vec4 original = texture2D(uSampler, vTextureCoord);\n    vec4 masky = texture2D(mask, vMaskCoord);\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\n\n    original *= (alphaMul * masky.r * alpha * clip);\n\n    gl_FragColor = original;\n}\n"),e.renderable=!1,this.maskSprite=e,this.maskMatrix=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t,e,i,r){var n=this.maskSprite,o=this.maskSprite.texture;o.valid&&(o.transform||(o.transform=new Wi(o,0)),o.transform.update(),this.uniforms.npmAlpha=o.baseTexture.premultiplyAlpha?0:1,this.uniforms.mask=o,this.uniforms.otherMatrix=t.calculateSpriteMatrix(this.maskMatrix,n).prepend(o.transform.mapCoord),this.uniforms.alpha=n.worldAlpha,this.uniforms.maskClamp=o.transform.uClampFrame,t.applyFilter(this,e,i,r))},e}(Gi),Zi=function(t){function e(e){t.call(this,e),this.scissor=!1,this.scissorData=null,this.scissorRenderTarget=null,this.enableScissor=!1,this.alphaMaskPool=[],this.alphaMaskIndex=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(t,e){if(e.isSprite)this.pushSpriteMask(t,e);else if(this.enableScissor&&!this.scissor&&this.renderer._activeRenderTarget.root&&!this.renderer.stencil.stencilMaskStack.length&&e.isFastRect()){var i=e.worldTransform,r=Math.atan2(i.b,i.a);(r=Math.round(r*(180/Math.PI)))%90?this.pushStencilMask(e):this.pushScissorMask(t,e)}else this.pushStencilMask(e)},e.prototype.pop=function(t,e){e.isSprite?this.popSpriteMask(t,e):this.enableScissor&&!this.renderer.stencil.stencilMaskStack.length?this.popScissorMask(t,e):this.popStencilMask(t,e)},e.prototype.pushSpriteMask=function(t,e){var i=this.alphaMaskPool[this.alphaMaskIndex];i||(i=this.alphaMaskPool[this.alphaMaskIndex]=[new qi(e)]),i[0].resolution=this.renderer.resolution,i[0].maskSprite=e;var r=t.filterArea;t.filterArea=e.getBounds(!0),this.renderer.filter.push(t,i),t.filterArea=r,this.alphaMaskIndex++},e.prototype.popSpriteMask=function(){this.renderer.filter.pop(),this.alphaMaskIndex--},e.prototype.pushStencilMask=function(t){this.renderer.batch.flush(),this.renderer.stencil.pushStencil(t)},e.prototype.popStencilMask=function(){this.renderer.stencil.popStencil()},e.prototype.pushScissorMask=function(t,e){e.renderable=!0;var i=this.renderer._activeRenderTarget,r=e.getBounds();r.fit(i.size),e.renderable=!1,this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);var n=this.renderer.resolution;this.renderer.gl.scissor(r.x*n,(i.root?i.size.height-r.y-r.height:r.y)*n,r.width*n,r.height*n),this.scissorRenderTarget=i,this.scissorData=e,this.scissor=!0},e.prototype.popScissorMask=function(){this.scissorRenderTarget=null,this.scissorData=null,this.scissor=!1;var t=this.renderer.gl;t.disable(t.SCISSOR_TEST)},e}(Le),Ki=function(t){function e(e){t.call(this,e),this.stencilMaskStack=[]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setMaskStack=function(t){var e=this.renderer.gl,i=this.stencilMaskStack.length;this.stencilMaskStack=t,t.length!==i&&(0===t.length?e.disable(e.STENCIL_TEST):(e.enable(e.STENCIL_TEST),this._useCurrent()))},e.prototype.pushStencil=function(t){var e=this.renderer.gl,i=this.stencilMaskStack.length;0===i&&(this.renderer.framebuffer.forceStencil(),e.enable(e.STENCIL_TEST)),this.stencilMaskStack.push(t),e.colorMask(!1,!1,!1,!1),e.stencilFunc(e.EQUAL,i,this._getBitwiseMask()),e.stencilOp(e.KEEP,e.KEEP,e.INCR),t.renderable=!0,t.render(this.renderer),this.renderer.batch.flush(),t.renderable=!1,this._useCurrent()},e.prototype.popStencil=function(){var t=this.renderer.gl,e=this.stencilMaskStack.pop();0===this.stencilMaskStack.length?(t.disable(t.STENCIL_TEST),t.clear(t.STENCIL_BUFFER_BIT),t.clearStencil(0)):(t.colorMask(!1,!1,!1,!1),t.stencilOp(t.KEEP,t.KEEP,t.DECR),e.renderable=!0,e.render(this.renderer),this.renderer.batch.flush(),e.renderable=!1,this._useCurrent())},e.prototype._useCurrent=function(){var t=this.renderer.gl;t.colorMask(!0,!0,!0,!0),t.stencilFunc(t.EQUAL,this.stencilMaskStack.length,this._getBitwiseMask()),t.stencilOp(t.KEEP,t.KEEP,t.KEEP)},e.prototype._getBitwiseMask=function(){return(1<<this.stencilMaskStack.length)-1},e.prototype.destroy=function(){t.prototype.destroy.call(this,this),this.stencilMaskStack=null},e}(Le),Qi=function(t){function e(e){t.call(this,e),this.destinationFrame=null,this.sourceFrame=null,this.defaultFrame=null,this.projectionMatrix=new $t,this.transform=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.update=function(t,e,i,r){this.destinationFrame=t||this.destinationFrame||this.defaultFrame,this.sourceFrame=e||this.sourceFrame||t,this.calculateProjection(this.destinationFrame,this.sourceFrame,i,r),this.transform&&this.projectionMatrix.append(this.transform);var n=this.renderer;n.globalUniforms.uniforms.projectionMatrix=this.projectionMatrix,n.globalUniforms.update(),n.shader.shader&&n.shader.syncUniformGroup(n.shader.shader.uniforms.globals)},e.prototype.calculateProjection=function(t,e,i,r){var n=this.projectionMatrix;r?(n.a=1/t.width*2*i,n.d=-1/t.height*2*i,n.tx=-1-e.x*n.a,n.ty=1-e.y*n.d):(n.a=1/t.width*2*i,n.d=1/t.height*2*i,n.tx=-1-e.x*n.a,n.ty=-1-e.y*n.d)},e.prototype.setTransform=function(){},e}(Le),Ji=new ce,$i=function(t){function e(e){t.call(this,e),this.clearColor=e._backgroundColorRgba,this.defaultMaskStack=[],this.current=null,this.sourceFrame=new ce,this.destinationFrame=new ce}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.bind=function(t,e,i){void 0===t&&(t=null),this.current=t;var r,n=this.renderer;if(t){var o=t.baseTexture;r=o.resolution,i||(Ji.width=o.realWidth,Ji.height=o.realHeight,i=Ji),e||(e=i),this.renderer.framebuffer.bind(o.framebuffer,i),this.renderer.projection.update(i,e,r,!1),this.renderer.stencil.setMaskStack(o.stencilMaskStack)}else r=this.renderer.resolution,i||(Ji.width=n.width,Ji.height=n.height,i=Ji),e||(e=i),n.framebuffer.bind(null,i),this.renderer.projection.update(i,e,r,!0),this.renderer.stencil.setMaskStack(this.defaultMaskStack);this.sourceFrame.copyFrom(e),this.destinationFrame.x=i.x/r,this.destinationFrame.y=i.y/r,this.destinationFrame.width=i.width/r,this.destinationFrame.height=i.height/r,e===i&&this.sourceFrame.copyFrom(this.destinationFrame)},e.prototype.clear=function(t){t=this.current?t||this.current.baseTexture.clearColor:t||this.clearColor,this.renderer.framebuffer.clear(t[0],t[1],t[2],t[3])},e.prototype.resize=function(){this.bind(null)},e.prototype.reset=function(){this.bind(null)},e}(Le),tr=function(t,e){this.program=t,this.uniformData=e,this.uniformGroups={}};tr.prototype.destroy=function(){this.uniformData=null,this.uniformGroups=null,this.program=null};var er=0,ir=function(t){function e(e){t.call(this,e),this.systemCheck(),this.gl=null,this.shader=null,this.program=null,this.cache={},this.id=er++}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.systemCheck=function(){if(!function(){if("boolean"==typeof Bi)return Bi;try{var t=new Function("param1","param2","param3","return param1[param2] === param3;");Bi=!0===t({a:"b"},"a","b")}catch(t){Bi=!1}return Bi}())throw new Error("Current environment does not allow unsafe-eval, please use @pixi/unsafe-eval module to enable support.")},e.prototype.contextChange=function(t){this.gl=t,this.reset()},e.prototype.bind=function(t,e){t.uniforms.globals=this.renderer.globalUniforms;var i=t.program,r=i.glPrograms[this.renderer.CONTEXT_UID]||this.generateShader(t);return this.shader=t,this.program!==i&&(this.program=i,this.gl.useProgram(r.program)),e||this.syncUniformGroup(t.uniformGroup),r},e.prototype.setUniforms=function(t){var e=this.shader.program,i=e.glPrograms[this.renderer.CONTEXT_UID];e.syncUniforms(i.uniformData,t,this.renderer)},e.prototype.syncUniformGroup=function(t){var e=this.getglProgram();t.static&&t.dirtyId===e.uniformGroups[t.id]||(e.uniformGroups[t.id]=t.dirtyId,this.syncUniforms(t,e))},e.prototype.syncUniforms=function(t,e){(t.syncUniforms[this.shader.program.id]||this.createSyncGroups(t))(e.uniformData,t.uniforms,this.renderer)},e.prototype.createSyncGroups=function(t){var e=this.getSignature(t,this.shader.program.uniformData);return this.cache[e]||(this.cache[e]=function(t,e){var i=0,r="var v = null;\n    var cv = null\n    var gl = renderer.gl";for(var n in t.uniforms){var o=e[n];if(o)if("float"===o.type&&1===o.size)r+="\n            if(uv."+n+" !== ud."+n+".value)\n            {\n                ud."+n+".value = uv."+n+"\n                gl.uniform1f(ud."+n+".location, uv."+n+")\n            }\n";else if("sampler2D"!==o.type&&"samplerCube"!==o.type&&"sampler2DArray"!==o.type||1!==o.size||o.isArray)if("mat3"===o.type&&1===o.size)void 0!==t.uniforms[n].a?r+="\n                gl.uniformMatrix3fv(ud."+n+".location, false, uv."+n+".toArray(true));\n                \n":r+="\n                gl.uniformMatrix3fv(ud."+n+".location, false, uv."+n+");\n                \n";else if("vec2"===o.type&&1===o.size)void 0!==t.uniforms[n].x?r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud."+n+".location, v.x, v.y);\n                }\n":r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud."+n+".location, v[0], v[1]);\n                }\n                \n";else if("vec4"===o.type&&1===o.size)void 0!==t.uniforms[n].width?r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud."+n+".location, v.x, v.y, v.width, v.height)\n                }\n":r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud."+n+".location, v[0], v[1], v[2], v[3])\n                }\n                \n";else{r+="\n            cv = ud."+n+".value;\n            v = uv."+n+";\n            "+(1===o.size?Oi:ki)[o.type].replace("location","ud."+n+".location")+";\n"}else r+="\n            renderer.texture.bind(uv."+n+", "+i+");\n\n            if(ud."+n+".value !== "+i+")\n            {\n                ud."+n+".value = "+i+";\n                gl.uniform1i(ud."+n+".location, "+i+");\n; // eslint-disable-line max-len\n            }\n",i++;else t.uniforms[n].group&&(r+="\n                    renderer.shader.syncUniformGroup(uv."+n+");\n                ")}return new Function("ud","uv","renderer",r)}(t,this.shader.program.uniformData)),t.syncUniforms[this.shader.program.id]=this.cache[e],t.syncUniforms[this.shader.program.id]},e.prototype.getSignature=function(t,e){var i=t.uniforms,r=[];for(var n in i)r.push(n),e[n]&&r.push(e[n].type);return r.join("-")},e.prototype.getglProgram=function(){return this.shader?this.shader.program.glPrograms[this.renderer.CONTEXT_UID]:null},e.prototype.generateShader=function(t){var e=this.gl,i=t.program,r={};for(var n in i.attributeData)r[n]=i.attributeData[n].location;var o=vi(e,i.vertexSrc,i.fragmentSrc,r),s={};for(var a in i.uniformData){var h=i.uniformData[a];s[a]={location:e.getUniformLocation(o,a),value:xi(h.type,h.size)}}var l=new tr(o,s);return i.glPrograms[this.renderer.CONTEXT_UID]=l,l},e.prototype.reset=function(){this.program=null,this.shader=null},e.prototype.destroy=function(){this.destroyed=!0},e}(Le);var rr=function(t){function e(e){t.call(this,e),this.gl=null,this.stateId=0,this.polygonOffset=0,this.blendMode=j,this._blendEq=!1,this.map=[],this.map[0]=this.setBlend,this.map[1]=this.setOffset,this.map[2]=this.setCullFace,this.map[3]=this.setDepthTest,this.map[4]=this.setFrontFace,this.checks=[],this.defaultState=new ji,this.defaultState.blend=!0,this.defaultState.depth=!0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(t){this.gl=t,this.blendModes=function(t,e){return void 0===e&&(e=[]),e[_]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[S]=[t.ONE,t.ONE],e[T]=[t.DST_COLOR,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[C]=[t.ONE,t.ONE_MINUS_SRC_COLOR,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[I]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[E]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[A]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[P]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[M]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[O]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[k]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[B]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[R]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[D]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[F]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[L]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[N]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[j]=[0,0],e[U]=[t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[V]=[t.SRC_ALPHA,t.ONE,t.ONE,t.ONE],e[X]=[t.SRC_ALPHA,t.ONE_MINUS_SRC_COLOR,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[z]=[t.DST_ALPHA,t.ZERO],e[G]=[t.ONE_MINUS_DST_ALPHA,t.ZERO],e[H]=[t.DST_ALPHA,t.ONE_MINUS_SRC_ALPHA],e[W]=[t.ONE_MINUS_DST_ALPHA,t.ONE],e[Y]=[t.ZERO,t.SRC_ALPHA],e[q]=[t.ZERO,t.ONE_MINUS_SRC_ALPHA],e[Z]=[t.ONE_MINUS_DST_ALPHA,t.SRC_ALPHA],e[K]=[t.ONE,t.ONE,t.ONE,t.ONE,t.FUNC_REVERSE_SUBTRACT,t.FUNC_ADD],e}(t),this.set(this.defaultState),this.reset()},e.prototype.set=function(t){if(t=t||this.defaultState,this.stateId!==t.data){for(var e=this.stateId^t.data,i=0;e;)1&e&&this.map[i].call(this,!!(t.data&1<<i)),e>>=1,i++;this.stateId=t.data}for(var r=0;r<this.checks.length;r++)this.checks[r](this,t)},e.prototype.forceState=function(t){t=t||this.defaultState;for(var e=0;e<this.map.length;e++)this.map[e].call(this,!!(t.data&1<<e));for(var i=0;i<this.checks.length;i++)this.checks[i](this,t);this.stateId=t.data},e.prototype.setBlend=function(t){this.updateCheck(e.checkBlendMode,t),this.gl[t?"enable":"disable"](this.gl.BLEND)},e.prototype.setOffset=function(t){this.updateCheck(e.checkPolygonOffset,t),this.gl[t?"enable":"disable"](this.gl.POLYGON_OFFSET_FILL)},e.prototype.setDepthTest=function(t){this.gl[t?"enable":"disable"](this.gl.DEPTH_TEST)},e.prototype.setCullFace=function(t){this.gl[t?"enable":"disable"](this.gl.CULL_FACE)},e.prototype.setFrontFace=function(t){this.gl.frontFace(this.gl[t?"CW":"CCW"])},e.prototype.setBlendMode=function(t){if(t!==this.blendMode){this.blendMode=t;var e=this.blendModes[t],i=this.gl;2===e.length?i.blendFunc(e[0],e[1]):i.blendFuncSeparate(e[0],e[1],e[2],e[3]),6===e.length?(this._blendEq=!0,i.blendEquationSeparate(e[4],e[5])):this._blendEq&&(this._blendEq=!1,i.blendEquationSeparate(i.FUNC_ADD,i.FUNC_ADD))}},e.prototype.setPolygonOffset=function(t,e){this.gl.polygonOffset(t,e)},e.prototype.reset=function(){this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!1),this.forceState(0),this._blendEq=!0,this.blendMode=-1,this.setBlendMode(0)},e.prototype.updateCheck=function(t,e){var i=this.checks.indexOf(t);e&&-1===i?this.checks.push(t):e||-1===i||this.checks.splice(i,1)},e.checkBlendMode=function(t,e){t.setBlendMode(e.blendMode)},e.checkPolygonOffset=function(t,e){t.setPolygonOffset(e.polygonOffset,0)},e}(Le),nr=function(t){function e(e){t.call(this,e),this.count=0,this.checkCount=0,this.maxIdle=d.GC_MAX_IDLE,this.checkCountMax=d.GC_MAX_CHECK_COUNT,this.mode=d.GC_MODE}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.postrender=function(){this.count++,this.mode!==pt&&(this.checkCount++,this.checkCount>this.checkCountMax&&(this.checkCount=0,this.run()))},e.prototype.run=function(){for(var t=this.renderer.texture,e=t.managedTextures,i=!1,r=0;r<e.length;r++){var n=e[r];!n.framebuffer&&this.count-n.touched>this.maxIdle&&(t.destroyTexture(n,!0),e[r]=null,i=!0)}if(i){for(var o=0,s=0;s<e.length;s++)null!==e[s]&&(e[o++]=e[s]);e.length=o}},e.prototype.unload=function(t){var e=this.renderer.textureSystem;t._texture&&t._texture._glRenderTargets&&e.destroyTexture(t._texture);for(var i=t.children.length-1;i>=0;i--)this.unload(t.children[i])},e}(Le),or=function(t){this.texture=t,this.width=-1,this.height=-1,this.dirtyId=-1,this.dirtyStyleId=-1,this.mipmap=!1,this.wrapMode=33071,this.type=6408,this.internalFormat=5121},sr=function(t){function e(e){t.call(this,e),this.boundTextures=[],this.currentLocation=-1,this.managedTextures=[],this._unknownBoundTextures=!1,this.unknownTexture=new Me}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(){var t=this.gl=this.renderer.gl;this.CONTEXT_UID=this.renderer.CONTEXT_UID,this.webGLVersion=this.renderer.context.webGLVersion;var e=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);this.boundTextures.length=e;for(var i=0;i<e;i++)this.boundTextures[i]=null;this.emptyTextures={};var r=new or(t.createTexture());t.bindTexture(t.TEXTURE_2D,r.texture),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array(4)),this.emptyTextures[t.TEXTURE_2D]=r,this.emptyTextures[t.TEXTURE_CUBE_MAP]=new or(t.createTexture()),t.bindTexture(t.TEXTURE_CUBE_MAP,this.emptyTextures[t.TEXTURE_CUBE_MAP].texture);for(var n=0;n<6;n++)t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,null);t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR);for(var o=0;o<this.boundTextures.length;o++)this.bind(null,o)},e.prototype.bind=function(t,e){void 0===e&&(e=0);var i=this.gl;if(t){if((t=t.baseTexture||t).valid){t.touched=this.renderer.textureGC.count;var r=t._glTextures[this.CONTEXT_UID]||this.initTexture(t);this.currentLocation!==e&&(this.currentLocation=e,i.activeTexture(i.TEXTURE0+e)),this.boundTextures[e]!==t&&i.bindTexture(t.target,r.texture),r.dirtyId!==t.dirtyId&&this.updateTexture(t),this.boundTextures[e]=t}}else this.currentLocation!==e&&(this.currentLocation=e,i.activeTexture(i.TEXTURE0+e)),i.bindTexture(i.TEXTURE_2D,this.emptyTextures[i.TEXTURE_2D].texture),this.boundTextures[e]=null},e.prototype.reset=function(){this._unknownBoundTextures=!0,this.currentLocation=-1;for(var t=0;t<this.boundTextures.length;t++)this.boundTextures[t]=this.unknownTexture},e.prototype.unbind=function(t){var e=this.gl,i=this.boundTextures;if(this._unknownBoundTextures){this._unknownBoundTextures=!1;for(var r=0;r<i.length;r++)i[r]===this.unknownTexture&&this.bind(null,r)}for(var n=0;n<i.length;n++)i[n]===t&&(this.currentLocation!==n&&(e.activeTexture(e.TEXTURE0+n),this.currentLocation=n),e.bindTexture(e.TEXTURE_2D,this.emptyTextures[t.target].texture),i[n]=null)},e.prototype.initTexture=function(t){var e=new or(this.gl.createTexture());return e.dirtyId=-1,t._glTextures[this.CONTEXT_UID]=e,this.managedTextures.push(t),t.on("dispose",this.destroyTexture,this),e},e.prototype.initTextureType=function(t,e){if(e.internalFormat=t.format,e.type=t.type,2===this.webGLVersion){var i=this.renderer.gl;t.type===i.FLOAT&&t.format===i.RGBA&&(e.internalFormat=i.RGBA32F),t.type===ht&&(e.type=i.HALF_FLOAT),e.type===i.HALF_FLOAT&&t.format===i.RGBA&&(e.internalFormat=i.RGBA16F)}},e.prototype.updateTexture=function(t){var e=t._glTextures[this.CONTEXT_UID];if(e){var i=this.renderer;if(this.initTextureType(t,e),t.resource&&t.resource.upload(i,t,e));else{var r=t.realWidth,n=t.realHeight,o=i.gl;(e.width!==r||e.height!==n||e.dirtyId<0)&&(e.width=r,e.height=n,o.texImage2D(t.target,0,e.internalFormat,r,n,0,t.format,e.type,null))}t.dirtyStyleId!==e.dirtyStyleId&&this.updateTextureStyle(t),e.dirtyId=t.dirtyId}},e.prototype.destroyTexture=function(t,e){var i=this.gl;if((t=t.baseTexture||t)._glTextures[this.CONTEXT_UID]&&(this.unbind(t),i.deleteTexture(t._glTextures[this.CONTEXT_UID].texture),t.off("dispose",this.destroyTexture,this),delete t._glTextures[this.CONTEXT_UID],!e)){var r=this.managedTextures.indexOf(t);-1!==r&&wt(this.managedTextures,r,1)}},e.prototype.updateTextureStyle=function(t){var e=t._glTextures[this.CONTEXT_UID];e&&(t.mipmap!==dt&&2===this.webGLVersion||t.isPowerOfTwo?(e.mipmap=t.mipmap>=1,e.wrapMode=t.wrapMode):(e.mipmap=0,e.wrapMode=ct),t.resource&&t.resource.style(this.renderer,t,e)||this.setStyle(t,e),e.dirtyStyleId=t.dirtyStyleId)},e.prototype.setStyle=function(t,e){var i=this.gl;if(e.mipmap&&i.generateMipmap(t.target),i.texParameteri(t.target,i.TEXTURE_WRAP_S,e.wrapMode),i.texParameteri(t.target,i.TEXTURE_WRAP_T,e.wrapMode),e.mipmap){i.texParameteri(t.target,i.TEXTURE_MIN_FILTER,t.scaleMode?i.LINEAR_MIPMAP_LINEAR:i.NEAREST_MIPMAP_NEAREST);var r=this.renderer.context.extensions.anisotropicFiltering;if(r&&t.anisotropicLevel>0&&t.scaleMode===lt){var n=Math.min(t.anisotropicLevel,i.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT));i.texParameterf(t.target,r.TEXTURE_MAX_ANISOTROPY_EXT,n)}}else i.texParameteri(t.target,i.TEXTURE_MIN_FILTER,t.scaleMode?i.LINEAR:i.NEAREST);i.texParameteri(t.target,i.TEXTURE_MAG_FILTER,t.scaleMode?i.LINEAR:i.NEAREST)},e}(Le),ar=new $t;f.a;var hr=function(){this.textures=[],this.ids=[],this.blend=0,this.textureCount=0,this.start=0,this.size=0,this.type=4},lr=function(t){this.rawBinaryData=new ArrayBuffer(t),this.uint32View=new Uint32Array(this.rawBinaryData),this.float32View=new Float32Array(this.rawBinaryData)},ur={int8View:{configurable:!0},uint8View:{configurable:!0},int16View:{configurable:!0},uint16View:{configurable:!0},int32View:{configurable:!0}};ur.int8View.get=function(){return this._int8View||(this._int8View=new Int8Array(this.rawBinaryData)),this._int8View},ur.uint8View.get=function(){return this._uint8View||(this._uint8View=new Uint8Array(this.rawBinaryData)),this._uint8View},ur.int16View.get=function(){return this._int16View||(this._int16View=new Int16Array(this.rawBinaryData)),this._int16View},ur.uint16View.get=function(){return this._uint16View||(this._uint16View=new Uint16Array(this.rawBinaryData)),this._uint16View},ur.int32View.get=function(){return this._int32View||(this._int32View=new Int32Array(this.rawBinaryData)),this._int32View},lr.prototype.view=function(t){return this[t+"View"]},lr.prototype.destroy=function(){this.rawBinaryData=null,this._int8View=null,this._uint8View=null,this._int16View=null,this._uint16View=null,this._int32View=null,this.uint32View=null,this.float32View=null},lr.sizeOf=function(t){switch(t){case"int8":case"uint8":return 1;case"int16":case"uint16":return 2;case"int32":case"uint32":case"float32":return 4;default:throw new Error(t+" isn't a valid view type")}},Object.defineProperties(lr.prototype,ur);var cr=function(t){function e(e){t.call(this,e),this.shaderGenerator=null,this.geometryClass=null,this.vertexSize=null,this.state=ji.for2d(),this.size=8e3,this._vertexCount=0,this._indexCount=0,this._bufferedElements=[],this._bufferSize=0,this._shader=null,this._packedGeometries=[],this._packedGeometryPoolSize=2,this._flushId=0,this._drawCalls=[];for(var i=0;i<this.size/4;i++)this._drawCalls[i]=new hr;this._aBuffers={},this._iBuffers={},this.MAX_TEXTURES=1,this.renderer.on("prerender",this.onPrerender,this),e.runners.contextChange.add(this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(){var t=this.renderer.gl;d.PREFER_ENV===v?this.MAX_TEXTURES=1:(this.MAX_TEXTURES=Math.min(t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),d.SPRITE_MAX_TEXTURES),this.MAX_TEXTURES=function(t,e){if(0===t)throw new Error("Invalid value of `0` passed to `checkMaxIfStatementsInShader`");for(var i=e.createShader(e.FRAGMENT_SHADER);;){var r=Ri.replace(/%forloop%/gi,Di(t));if(e.shaderSource(i,r),e.compileShader(i),e.getShaderParameter(i,e.COMPILE_STATUS))break;t=t/2|0}return t}(this.MAX_TEXTURES,t)),this._shader=this.shaderGenerator.generateShader(this.MAX_TEXTURES);for(var e=0;e<this._packedGeometryPoolSize;e++)this._packedGeometries[e]=new this.geometryClass},e.prototype.onPrerender=function(){this._flushId=0},e.prototype.render=function(t){t._texture.valid&&(this._vertexCount+t.vertexData.length/2>this.size&&this.flush(),this._vertexCount+=t.vertexData.length/2,this._indexCount+=t.indices.length,this._bufferedElements[this._bufferSize++]=t)},e.prototype.flush=function(){if(0!==this._vertexCount){var t,e,i=this.getAttributeBuffer(this._vertexCount),r=this.getIndexBuffer(this._indexCount),n=this.renderer.gl,o=this._bufferedElements,s=this._drawCalls,a=this.MAX_TEXTURES,h=this._packedGeometries,l=this.vertexSize,u=this.renderer.textureGC.count,c=0,p=0,f=0,m=s[0],y=0,v=-1;m.textureCount=0,m.start=0,m.blend=v;var g,x=++Me._globalBatch;for(g=0;g<this._bufferSize;++g){var b=o[g];o[g]=null,t=b._texture.baseTexture;var w=bt[t.premultiplyAlpha?1:0][b.blendMode];v!==w&&(v=w,e=null,f=a,x++),e!==t&&(e=t,t._batchEnabled!==x&&(f===a&&(x++,f=0,m.size=p-m.start,(m=s[y++]).textureCount=0,m.blend=v,m.start=p),t.touched=u,t._batchEnabled=x,t._id=f,m.textures[m.textureCount++]=t,f++)),this.packInterleavedGeometry(b,i,r,c,p),c+=b.vertexData.length/2*l,p+=b.indices.length}Me._globalBatch=x,m.size=p-m.start,d.CAN_UPLOAD_SAME_BUFFER?(h[this._flushId]._buffer.update(i.rawBinaryData,0),h[this._flushId]._indexBuffer.update(r,0),this.renderer.geometry.updateBuffers()):(this._packedGeometryPoolSize<=this._flushId&&(this._packedGeometryPoolSize++,h[this._flushId]=new this.geometryClass),h[this._flushId]._buffer.update(i.rawBinaryData,0),h[this._flushId]._indexBuffer.update(r,0),this.renderer.geometry.bind(h[this._flushId]),this.renderer.geometry.updateBuffers(),this._flushId++);var _=this.renderer.texture,S=this.renderer.state;for(g=0;g<y;g++){for(var T=s[g],C=T.textureCount,I=0;I<C;I++)_.bind(T.textures[I],I),T.textures[I]=null;S.setBlendMode(T.blend),n.drawElements(T.type,T.size,n.UNSIGNED_SHORT,2*T.start)}this._bufferSize=0,this._vertexCount=0,this._indexCount=0}},e.prototype.start=function(){this.renderer.state.set(this.state),this.renderer.shader.bind(this._shader),d.CAN_UPLOAD_SAME_BUFFER&&this.renderer.geometry.bind(this._packedGeometries[this._flushId])},e.prototype.stop=function(){this.flush()},e.prototype.destroy=function(){for(var e=0;e<this._packedGeometryPoolSize;e++)this._packedGeometries[e]&&this._packedGeometries[e].destroy();this.renderer.off("prerender",this.onPrerender,this),this._aBuffers=null,this._iBuffers=null,this._packedGeometries=null,this._drawCalls=null,this._shader&&(this._shader.destroy(),this._shader=null),t.prototype.destroy.call(this)},e.prototype.getAttributeBuffer=function(t){var e=Tt(Math.ceil(t/8)),i=It(e),r=8*e;this._aBuffers.length<=i&&(this._iBuffers.length=i+1);var n=this._aBuffers[r];return n||(this._aBuffers[r]=n=new lr(r*this.vertexSize*4)),n},e.prototype.getIndexBuffer=function(t){var e=Tt(Math.ceil(t/12)),i=It(e),r=12*e;this._iBuffers.length<=i&&(this._iBuffers.length=i+1);var n=this._iBuffers[i];return n||(this._iBuffers[i]=n=new Uint16Array(r)),n},e.prototype.packInterleavedGeometry=function(t,e,i,r,n){for(var o=e.uint32View,s=e.float32View,a=r/this.vertexSize,h=t.uvs,l=t.indices,u=t.vertexData,c=t._texture.baseTexture._id,d=Math.min(t.worldAlpha,1),p=d<1&&t._texture.baseTexture.premultiplyAlpha?function(t,e){if(1===e)return(255*e<<24)+t;if(0===e)return 0;var i=t>>16&255,r=t>>8&255,n=255&t;return(255*e<<24)+((i=i*e+.5|0)<<16)+((r=r*e+.5|0)<<8)+(n=n*e+.5|0)}(t._tintRGB,d):t._tintRGB+(255*d<<24),f=0;f<u.length;f+=2)s[r++]=u[f],s[r++]=u[f+1],s[r++]=h[f],s[r++]=h[f+1],o[r++]=p,s[r++]=c;for(var m=0;m<l.length;m++)i[n++]=a+l[m]},e}(li),dr=function(t,e){if(this.vertexSrc=t,this.fragTemplate=e,this.programCache={},this.defaultGroupCache={},e.indexOf("%count%")<0)throw new Error('Fragment template must contain "%count%".');if(e.indexOf("%forloop%")<0)throw new Error('Fragment template must contain "%forloop%".')};dr.prototype.generateShader=function(t){if(!this.programCache[t]){for(var e=new Int32Array(t),i=0;i<t;i++)e[i]=i;this.defaultGroupCache[t]=si.from({uSamplers:e},!0);var r=this.fragTemplate;r=(r=r.replace(/%count%/gi,""+t)).replace(/%forloop%/gi,this.generateSampleSrc(t)),this.programCache[t]=new Ni(this.vertexSrc,r)}var n={tint:new Float32Array([1,1,1,1]),translationMatrix:new $t,default:this.defaultGroupCache[t]};return new Vi(this.programCache[t],n)},dr.prototype.generateSampleSrc=function(t){var e="";e+="\n",e+="\n";for(var i=0;i<t;i++)i>0&&(e+="\nelse "),i<t-1&&(e+="if(vTextureId < "+i+".5)"),e+="\n{",e+="\n\tcolor = texture2D(uSamplers["+i+"], vTextureCoord);",e+="\n}";return e+="\n",e+="\n"};var pr=function(t){function e(e){void 0===e&&(e=!1),t.call(this),this._buffer=new Ke(null,e,!1),this._indexBuffer=new Ke(null,e,!0),this.addAttribute("aVertexPosition",this._buffer,2,!1,at).addAttribute("aTextureCoord",this._buffer,2,!1,at).addAttribute("aColor",this._buffer,4,!0,ot).addAttribute("aTextureId",this._buffer,1,!0,at).addIndex(this._indexBuffer)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(ii),fr="precision highp float;\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform vec4 tint;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vColor = aColor * tint;\n}\n",mr="varying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\nuniform sampler2D uSamplers[%count%];\n\nvoid main(void){\n    vec4 color;\n    %forloop%\n    gl_FragColor = color * vColor;\n}\n",yr=function(){},vr={defaultVertexSrc:{configurable:!0},defaultFragmentTemplate:{configurable:!0}};yr.create=function(t){var e=Object.assign({vertex:fr,fragment:mr,geometryClass:pr,vertexSize:6},t),i=e.vertex,r=e.fragment,n=e.vertexSize,o=e.geometryClass;return function(t){function e(e){t.call(this,e),this.shaderGenerator=new dr(i,r),this.geometryClass=o,this.vertexSize=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(cr)},vr.defaultVertexSrc.get=function(){return fr},vr.defaultFragmentTemplate.get=function(){return mr},Object.defineProperties(yr,vr);yr.create();
/*!
 * @pixi/filter-pixelate - v3.0.3
 * Compiled Wed, 29 May 2019 03:04:05 UTC
 *
 * @pixi/filter-pixelate is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */var gr=function(t){function e(e){void 0===e&&(e=10),t.call(this,"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}","precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform vec2 size;\nuniform sampler2D uSampler;\n\nuniform vec4 filterArea;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 pixelate(vec2 coord, vec2 size)\n{\n\treturn floor( coord / size ) * size;\n}\n\nvoid main(void)\n{\n    vec2 coord = mapCoord(vTextureCoord);\n\n    coord = pixelate(coord, size);\n\n    coord = unmapCoord(coord);\n\n    gl_FragColor = texture2D(uSampler, coord);\n}\n"),this.size=e}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={size:{configurable:!0}};return i.size.get=function(){return this.uniforms.size},i.size.set=function(t){"number"==typeof t&&(t=[t,t]),this.uniforms.size=t},Object.defineProperties(e.prototype,i),e}(Gi),xr=function(t){function e(e,i,r){void 0===e&&(e=16711680),void 0===i&&(i=0),void 0===r&&(r=.4),t.call(this,"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}","varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec3 originalColor;\nuniform vec3 newColor;\nuniform float epsilon;\nvoid main(void) {\n    vec4 currentColor = texture2D(uSampler, vTextureCoord);\n    vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));\n    float colorDistance = length(colorDiff);\n    float doReplace = step(colorDistance, epsilon);\n    gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);\n}\n"),this.uniforms.originalColor=new Float32Array(3),this.uniforms.newColor=new Float32Array(3),this.originalColor=e,this.newColor=i,this.epsilon=r}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={originalColor:{configurable:!0},newColor:{configurable:!0},epsilon:{configurable:!0}};return i.originalColor.set=function(t){var e=this.uniforms.originalColor;"number"==typeof t?(gt(t,e),this._originalColor=t):(e[0]=t[0],e[1]=t[1],e[2]=t[2],this._originalColor=xt(e))},i.originalColor.get=function(){return this._originalColor},i.newColor.set=function(t){var e=this.uniforms.newColor;"number"==typeof t?(gt(t,e),this._newColor=t):(e[0]=t[0],e[1]=t[1],e[2]=t[2],this._newColor=xt(e))},i.newColor.get=function(){return this._newColor},i.epsilon.set=function(t){this.uniforms.epsilon=t},i.epsilon.get=function(){return this.uniforms.epsilon},Object.defineProperties(e.prototype,i),e}(Gi);class br{constructor(t,e,i,r,n,o){this.x=t*i,this.y=e*i,this.w=i,this.h=i,this.Collider=new a.a.Bodies.rectangle(this.x,this.y,i,i,{isStatic:!0}),this.edgeBoxes=[],this.edgeBoxWidth=1,this.edgeBoxHeight=2;if(this.walkBoxHeight=20,n){let t=new a.a.Bodies.rectangle(this.x+i/2-this.edgeBoxWidth/2,this.y-i/2+20,this.edgeBoxWidth,this.walkBoxHeight,{isStatic:!0,isSensor:!0});t.isEdgeBox=!0,t.isRight=!0,this.edgeBoxes.push(t)}if(r){let t=new a.a.Bodies.rectangle(this.x-i/2+this.edgeBoxWidth/2,this.y-i/2+20,this.edgeBoxWidth,this.walkBoxHeight,{isStatic:!0,isSensor:!0});t.isEdgeBox=!0,t.isRight=!1,this.edgeBoxes.push(t)}o&&(this.walkBox=new a.a.Bodies.rectangle(this.x,this.y-i/2-this.walkBoxHeight/2,i,this.walkBoxHeight,{isStatic:!0,isSensor:!0}),this.walkBox.isEdgeBox=!1)}drawRect(t,e){if(t.beginFill(6304424),t.drawRect(this.Collider.vertices[0].x,this.Collider.vertices[0].y,this.w,this.h),t.endFill(),this.walkBox&&(e.beginFill(3319874,.5),e.drawRect(this.x-this.w/2,this.walkBox.position.y-this.walkBoxHeight/2,this.w,this.walkBoxHeight),e.endFill()),0!=this.edgeBoxes.length)for(let t of this.edgeBoxes)e.beginFill(16515843,.8),e.drawRect(t.position.x-this.edgeBoxWidth/2,t.position.y-this.edgeBoxWidth/2,this.edgeBoxWidth,this.edgeBoxHeight),e.endFill()}}class wr{constructor(t,e,i,r,n=!1){this.a=new a.a.Vector.create(t,e),this.b=new a.a.Vector.create(i,r),this.isEdge=n}}class _r{constructor(t,e,i){this.pos=t,this.dir=a.a.Vector.create(1,0),this.dir=a.a.Vector.rotateAbout(this.dir,e,a.a.Vector.create(0,0)),this.angle=e,this.endpoint=i,this.closestPoint=i}setDir(t){this.dir=t,this.angle=a.a.Vector.angle(this.dir,a.a.Vector.create(0,0))}lookAt(t,e){this.dir.x=t-this.pos.x,this.dir.y=e-this.pos.y,this.dir=a.a.Vector.normalise(this.dir)}show(){stroke(127),push(),translate(this.pos.x,this.pos.y),line(0,0,10*this.dir.x,10*this.dir.y),pop()}cast(t){const e=t.a.x,i=t.a.y,r=t.b.x,n=t.b.y,o=this.pos.x,s=this.pos.y,h=this.pos.x+this.dir.x,l=this.pos.y+this.dir.y,u=(e-r)*(s-l)-(i-n)*(o-h);if(0==u)return;const c=((e-o)*(s-l)-(i-s)*(o-h))/u;if(c>0&&c<1&&-((e-r)*(i-s)-(i-n)*(e-o))/u>0){const t=a.a.Vector.create();return t.x=e+c*(r-e),t.y=i+c*(n-i),t}}}class Sr{constructor(t,e,i,r,n){this.pos=a.a.Vector.create(t,e),this.rays=[],this.cornerRays=[],this.hangRay=new _r(this.pos,0,a.a.Vector.create(0,0)),this.hangRay.setDir(a.a.Vector.create(0,-1)),this.endpoints=r,this.segments=i,this.tris=[],this.shaderProgram=n,this.color=[1,.831,.322,1,.831,.322,1,.831,.322];for(let t of r){let e=a.a.Vector.create(t.x-this.pos.x,t.y-this.pos.y);a.a.Vector.normalise(e);let i=new _r(this.pos,0,t);i.setDir(e),this.rays.push(i)}this.renderer=PIXI.autoDetectRenderer(),this.uniforms={dimensions:[window.innerWidth,window.innerHeight],position:[this.pos.x,this.pos.y],time:Math.random()},this.shader=new PIXI.Shader.from(n.vert,n.frag,this.uniforms)}compare(t,e){return t.angle-e.angle}update(t,e){this.pos.x=t,this.pos.y=e,this.rays=[],this.uniforms={dimensions:[window.innerWidth,window.innerHeight],position:[t,e],time:Math.random()},this.shader=new PIXI.Shader.from(this.shaderProgram.vert,this.shaderProgram.frag,this.uniforms),this.cornerRays=[];for(let t of this.endpoints){let e=a.a.Vector.create(t.x-this.pos.x,t.y-this.pos.y);a.a.Vector.normalise(e);let i=new _r(this.pos,0,t);i.setDir(e),this.rays.push(i)}this.look(),this.auxLook()}look(){for(let t of this.rays)this.cast(t)}cast(t){let e=t.endpoint,i=Math.sqrt(Math.pow(this.pos.x-e.x,2)+Math.pow(this.pos.y-e.y,2));for(let r of this.segments){const n=t.cast(r);if(n){const t=Math.sqrt(Math.pow(this.pos.x-n.x,2)+Math.pow(this.pos.y-n.y,2));t<i&&(i=t,e=n)}}if(e&&(t.closestPoint=e,e==t.endpoint)){let e=new _r(this.pos,0,a.a.Vector.create(-5e3,0)),i=new _r(this.pos,0,a.a.Vector.create(-5e3,0));e.setDir(a.a.Vector.rotate(t.dir,-.005)),i.setDir(a.a.Vector.rotate(t.dir,.005)),this.cornerRays.push(e,i)}}auxLook(){for(let t of this.cornerRays)t=this.auxCast(t),this.rays.push(t);this.rays.sort(this.compare)}auxCast(t){let e=null,i=1/0;for(let r of this.segments){const n=t.cast(r);if(n){const t=Math.sqrt(Math.pow(this.pos.x-n.x,2)+Math.pow(this.pos.y-n.y,2));t<i&&(i=t,e=n)}}return e&&(t.closestPoint=e),t}show(t){t.lineStyle(1,14561865),t.beginFill(16706423,1),t.drawCircle(this.pos.x,this.pos.y,10),t.endFill()}drawLight(t){t.lineStyle(0),t.beginFill(16706423,.5),t.drawPolygon([this.pos.x,this.pos.y,this.rays[0].closestPoint.x,this.rays[0].closestPoint.y,this.rays[this.rays.length-1].closestPoint.x,this.rays[this.rays.length-1].closestPoint.y]),t.endFill();for(let e=1;e<this.rays.length;e++)t.beginFill(16706423,.5),t.drawPolygon([this.pos.x,this.pos.y,this.rays[e-1].closestPoint.x,this.rays[e-1].closestPoint.y,this.rays[e].closestPoint.x,this.rays[e].closestPoint.y]),t.endFill()}drawMesh(t){this.tris=[];for(let e=1;e<this.rays.length;e++){const i=(new PIXI.Geometry).addAttribute("aVertexPosition",[this.pos.x,this.pos.y,this.rays[e-1].closestPoint.x,this.rays[e-1].closestPoint.y,this.rays[e].closestPoint.x,this.rays[e].closestPoint.y],2).addAttribute("aColor",this.color,3),r=new PIXI.Mesh(i,this.shader);r.filters=t,this.tris.push(r)}const e=(new PIXI.Geometry).addAttribute("aVertexPosition",[this.pos.x,this.pos.y,this.rays[0].closestPoint.x,this.rays[0].closestPoint.y,this.rays[this.rays.length-1].closestPoint.x,this.rays[this.rays.length-1].closestPoint.y],2).addAttribute("aColor",this.color,3),i=new PIXI.Mesh(e,this.shader);i.filters=t,this.tris.push(i)}}class Tr{constructor(t,e,i,r,n,o){this.pos=a.a.Vector.create(t,e),this.castSegments=i,this.visionSource=new Sr(t,e,i,r,n),this.numStaticRays=this.visionSource.rays.length,this.vel=-1.5,this.visionSource.look(),this.visionSource.auxLook(),this.lightContainer=new PIXI.Container,this.torch=new Cr(t,e,o)}update(t){this.lightContainer.destroy({children:!0}),this.lightContainer=new PIXI.Container,this.pos.x+=this.vel*t,this.visionSource.update(this.pos.x,this.pos.y),this.visionSource.drawMesh();for(let t=0;t<this.visionSource.tris.length;t++)this.lightContainer.addChild(this.visionSource.tris[t])}}class Cr{constructor(t,e,i){this.animation=new PIXI.AnimatedSprite(i),this.animation.position.set(t,e),this.animation.anchor.set(.5),this.animation.scale.set(1.5,1.5),this.animation.animationSpeed=.2,this.animation.gotoAndPlay(9*Math.random())}}class Ir{constructor(t,e,i){this.sprite=new PIXI.Sprite.from(i),this.sprite.position.set(t,e),this.sprite.anchor.set(.5),this.sprite.scale.set(2.5),this.x=t,this.y=e,this.timescale=.003,this.maxOffset=10,this.width=this.sprite.width,this.height=this.sprite.height,this.ticker=new PIXI.Ticker,this.ticker.autoStart=!1,this.DissolveValue=.8,this.collider=new a.a.Bodies.rectangle(t,e,this.width,this.height,{isStatic:!0,isSensor:!0}),this.collider.isCatnip=!0,this.collider.spriteReference=this.sprite}update(t){let e=t*this.timescale;this.sprite.y=this.y+this.maxOffset*Math.sin(e),this.sprite.filters&&(this.DissolveValue-=.01,this.sprite.filters[0].uniforms.DissolveVal=this.DissolveValue,this.DissolveValue<=0&&(this.sprite.renderable=!1,this.sprite.filters[0].uniforms.DissolveVal=.75,this.sprite.filters=null))}}class Er{constructor(t,e,i,r,n,o,s){this.w=t,this.h=e,this.tileSize=i,this.tileMap={},this.tileset=o,this.numLights=r,this.freeCells=[],this.groundTiles=[],this.terrain=[],this.lights=[],this.torchFrames=s,this.torchSprites=[],this.shaderProgram=n,this.tileContainer=new PIXI.Container,this.backgroundContainer=new PIXI.Container,this.torchContainer=new PIXI.Container,this.edges=new Set,this.vertices=new Set,this.powerups=[]}generateLights(t,e){for(let i=0;i<e;i++){let e=Math.floor(ROT.RNG.getUniform()*t.length),i=t.splice(e,1)[0];this.tileMap[i]="*"}}addLights(t){for(let e in this.tileMap)if("*"==this.tileMap[e]){let i=e.split(","),r=parseInt(i[0]),n=parseInt(i[1]);this.lights.push(new Tr(r*this.tileSize,n*this.tileSize,this.edges,this.vertices,t,this.torchFrames))}this.lights.forEach(t=>{this.torchSprites.push(t.torch.animation)})}parallaxScroll(t,e,i){this.backgroundContainer.x=t.x/e,this.backgroundContainer.y=t.y/i}tileSpriteInit(t,e,i,r=0){let n=new PIXI.Sprite.from(i);n.width=this.tileSize-6,n.height=this.tileSize,0!=r&&n.scale.set(r),n.anchor.set(.5),n.position.x=t*this.tileSize,n.position.y=e*this.tileSize,this.tileContainer.addChild(n)}}class Ar extends Er{constructor(t,e,i,r,n,o,s){super(t,e,i,r,n,o,s),this.cellMap=new ROT.Map.Cellular(t,e,{born:[4,5,6,7,8],survive:[2,3,4,5]}),this.cellMap.randomize(.5);for(var a=8;a>=0;a--)this.cellMap.create();this.cellMap.connect(null,1),this.cellMap.connect((t,e,i)=>{let r=t+","+e;this.tileMap[r]=i});for(let i in this.tileMap){let r=i.split(","),n=parseInt(r[0]),o=parseInt(r[1]);0!=n&&0!=o&&n!=t-1&&o!=e-1||(this.tileMap[i]=1),this.tileMap[i]||this.freeCells.push(i)}this.generateLights(this.freeCells,r),this.caveWalls(this.tileMap,!0,this.tileContainer,this.tileSize),this.generateCatnip(10),this.backgroundTiling(),this.addFeatures(this.freeCells,this.tileMap),this.addCatnip(),console.log("ray cast vertices: ",this.vertices.size),this.addLights(n);let h=Math.floor(ROT.RNG.getUniform()*this.freeCells.length),l=this.freeCells.splice(h,1)[0].split(",");this.playerSpawn=new PIXI.Point(parseInt(l[0])*this.tileSize,parseInt(l[1])*this.tileSize)}caveWalls(t,e,i,r){for(let n in t)if(1==t[n]){let o,s=n.split(","),a=parseInt(s[0]),h=parseInt(s[1]),l=!1,u=!1,c=!1,d=!1,p=!1,f=!1,m=!1,y=!1;if(1==t[a-1+","+h]&&(l=!0),1==t[a+1+","+h]&&(u=!0),1==t[a+","+(h-1)]&&(c=!0),1==t[a+","+(h+1)]&&(d=!0),1==t[a-1+","+(h-1)]&&(p=!0),1==t[a+1+","+(h-1)]&&(f=!0),1==t[a+1+","+(h+1)]&&(m=!0),1==t[a-1+","+(h+1)]&&(y=!0),!c&&h>0&&this.groundTiles.push(n),e){let t=new br(a,h,this.tileSize,!l&&!c,!u&&!c,!c);this.terrain.push(t);let e=t.Collider.vertices;e.forEach((t,e)=>{switch(e){case 0:(!l&&!c||!c&&p)&&this.vertices.add(t);break;case 1:(!u&&!c||!c&&f)&&this.vertices.add(t);break;case 2:(!u&&!d||!d&&m)&&this.vertices.add(t);break;case 3:(!l&&!d||!d&&y)&&this.vertices.add(t)}}),c||this.edges.add(new wr(e[0].x,e[0].y,e[1].x,e[1].y)),u||this.edges.add(new wr(e[1].x,e[1].y,e[2].x,e[2].y)),d||this.edges.add(new wr(e[3].x,e[3].y,e[2].x,e[2].y)),l||this.edges.add(new wr(e[0].x,e[0].y,e[3].x,e[3].y))}if(o=c&&d&&u&&l?"Interior":!c&&l&&u&&d?"TopEdge":c&&l&&u&&!d?"BottomEdge":c&&l&&!u&&d?"RightEdge":c&&!l&&u&&d?"LeftEdge":!c&&!l&&u&&d?"TLCorner":!c&&l&&!u&&d?"TRCorner":c&&!l&&u&&!d?"BLCorner":c&&l&&!u&&!d?"BRCorner":c+l+u+d==1?"Wang":c+d==2||l+u==2?"Shaft":"Loner",o){let t=new PIXI.Sprite.from(this.tileset.get(o));switch(t.width=r+2,t.height=r,t.anchor.set(.5),t.position.x=a*r,t.position.y=h*r,o){case"Wang":l?t.angle=90:c?t.angle=180:u&&(t.angle=270);break;case"Shaft":l&&(t.angle=90)}i.addChild(t)}}}backgroundTiling(){this.bgScale=2;let t=new PIXI.TilingSprite(this.tileset.get("Background"),this.tileSize*this.w*this.bgScale,this.tileSize*this.h*this.bgScale);t.x-=this.w*this.tileSize*this.bgScale/2,t.y-=this.h*this.tileSize*this.bgScale/2,t.tileScale.x=this.tileSize/this.tileset.get("Background").width*.75,t.tileScale.y=this.tileSize/this.tileset.get("Background").height*.75,this.backgroundContainer.addChild(t),this.bgSprite=t}addFeatures(t,e){for(let i of t){let t=i.split(","),r=parseInt(t[0]),n=parseInt(t[1]);if(0==Math.floor(3*ROT.RNG.getUniform()))if(1==e[r+","+(n-1)])this.tileSpriteInit(r,n,this.tileset.get("Spikes"));else if(1==e[r+","+(n+1)])switch(Math.floor(2*ROT.RNG.getUniform())){case 0:this.tileSpriteInit(r,n,this.tileset.get("Grass-1"));break;case 1:this.tileSpriteInit(r,n,this.tileset.get("Grass-2"))}}}generateCatnip(t){for(let e=0;e<t;e++){let t=Math.floor(ROT.RNG.getUniform()*this.groundTiles.length),e=this.groundTiles.splice(t,1)[0],i=e.split(","),r=(parseInt(i[0]),parseInt(i[1]));r-=1,this.tileMap[e]="N"}}addCatnip(){for(let t in this.tileMap)if("N"==this.tileMap[t]){let e=t.split(","),i=parseInt(e[0]),r=parseInt(e[1]),n=new Ir(i*this.tileSize,--r*this.tileSize,this.tileset.get("catnip"));this.powerups.push(n),this.tileContainer.addChild(n.sprite)}}}class Pr{constructor(){this.isRunning=!1,this.startTime=null,this.endTime=null,this.elapsedTime=null;let t=new Date;this.initTime=t.getTime()}start(){this.isRunning=!0;let t=new Date;this.startTime=t.getTime()}stop(){this.isRunning&&(this.isRunning=!1)}getElapsedTime(){if(this.isRunning){return(new Date).getTime()-this.startTime}return 0}}class Mr{constructor(t,e){this.lastInput=null,this.prevTimeScale=1,this.prevVel=0,this.position=new PIXI.Point(t.x,t.y),this.scale=3.5,this.maxVel=5,this.defaultMaxVel=5,this.tripMaxVel=6.5,this.jumpVel=-25,this.defaultJumpVel=-25,this.tripJumpVel=-30,this.unScaledJumpVel=-25,this.xVel=0,this.isGrounded=!1,this.inSlide=!1,this.inSlowDown=!1,this.jumpInput=!1,this.isHanging=!1,this.cameraSnapped=!0,this.bouncyBug=0,this.collisionTimer=new Pr,this.wallJumpTimer=new Pr,this.lateJumpDuration=225,this.fallDamageMS=1500,this.grappleMS=125,this.fallDamageVel=10,this.idleFrameCount=0,this.maxIdleFrames=60,this.climbTranslation=new PIXI.Point(0,0),this.cameraMovement=new PIXI.Point(0,0),this.flip="left",this.animations=e,this.currentAnimation="none",this.colliderWidth=this.animations.get("walk").width,this.colliderHeight=this.animations.get("walk").height,this.A=a.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.B=a.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.C=a.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.D=a.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.bounds=[new wr(this.A.x,this.A.y,this.B.x,this.B.y),new wr(this.A.x,this.A.y,this.C.x,this.C.y),new wr(this.C.x,this.C.y,this.D.x,this.D.y),new wr(this.B.x,this.B.y,this.D.x,this.D.y)],this.body=new a.a.Bodies.rectangle(this.position.x,this.position.y,this.colliderWidth,this.colliderHeight,{density:5e-4,frictionAir:.06,restitution:0,friction:.01,inertia:1/0})}update(t){if(!this.isGrounded&&this.body.velocity.y>1&&(this.prevVel=this.body.velocity.y),this.wallJumpTimer.isRunning&&this.wallJumpTimer.getElapsedTime()>this.grappleMS&&(this.handleEvent({type:"inputDown",direction:this.lastInput}),this.wallJumpTimer.stop()),"stop"!=this.currentAnimation||this.animations.get("stop").playing?"idle"!=this.currentAnimation||this.animations.get("idle").playing||(this.idleFrameCount++,this.idleFrameCount>this.maxIdleFrames&&(this.idleFrameCount=0,this.setAnimation("idle",0,!0),this.maxIdleFrames=200*Math.random())):this.setAnimation("idle"),"climb"==this.currentAnimation){if("end"!=this.lastInput&&this.lastInput!=this.flip&&this.animations.get("climb").currentFrame<4)console.log("climb cancel",this.lastInput),this.setAnimation("jump",5),this.setFlip(this.lastInput),this.isGrounded=!1,this.inSlide=!1,this.jumpInput=!1,this.cameraSnapped=!0,a.a.Body.setStatic(this.body,!1),this.isHanging=!1;else if(!this.animations.get("climb").playing){switch(a.a.Body.setPosition(this.body,new a.a.Vector.create(this.climbTranslation.x,this.climbTranslation.y)),a.a.Body.setVelocity(this.body,new a.a.Vector.create(0,0)),this.lastInput!=this.flip&&(this.lastInput="end"),this.lastInput){case"right":this.setAnimation("walk"),this.xVel=this.maxVel,this.inSlowDown=!1;break;case"left":this.setAnimation("walk"),this.xVel=-this.maxVel,this.inSlowDown=!1;break;default:this.setAnimation("stop"),this.inSlowDown=!0}this.lockCamera(),this.bouncyBug||(this.bouncyBug=1),this.isGrounded=!0,this.inSlide=!1,this.jumpInput=!1,this.isHanging=!1,a.a.Body.setStatic(this.body,!1)}}else a.a.Body.setVelocity(this.body,new a.a.Vector.create(this.xVel,this.body.velocity.y));this.setPosition(this.body.position.x,this.body.position.y),this.inSlowDown&&this.slowVelocity(),t!=this.prevTimeScale&&(this.animations.forEach((function(e){e.animationSpeed*=.5==t?.5:2})),this.prevTimeScale=t);let e,i=this.lateJumpDuration/5/t;this.inSlide?(i/=2,e=i):e=this.lateJumpDuration/t,!this.isHanging&&this.collisionTimer.isRunning&&this.collisionTimer.getElapsedTime()>i&&this.setAnimation("jump",5),!this.isHanging&&this.collisionTimer.isRunning&&this.collisionTimer.getElapsedTime()>e&&(this.collisionTimer.stop(),this.isGrounded=!1,this.inSlide=!1,this.jumpInput=!1)}setPosition(t,e){this.position.x=t,this.position.y=e,this.A=a.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.B=a.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.C=a.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.D=a.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.bounds=[new wr(this.A.x,this.A.y,this.B.x,this.B.y),new wr(this.A.x,this.A.y,this.C.x,this.C.y),new wr(this.C.x,this.C.y,this.D.x,this.D.y),new wr(this.B.x,this.B.y,this.D.x,this.D.y)],this.animations.forEach((function(i){i.x=t,i.y=e}))}setAnimation(t,e=0,i=!1){if(t!=this.currentAnimation||i){this.currentAnimation=t,this.animations.forEach((function(t){t.visible=!1}));var r=this.animations.get(t);r.visible=!0,r.gotoAndPlay(e),this.animations.set(t,r)}}setFlip(t){var e;this.cameraSnapped&&("right"==t?(e=-Math.abs(this.scale),this.scale=-Math.abs(this.scale),this.flip="right"):"left"==t&&(e=Math.abs(this.scale),this.scale=Math.abs(this.scale),this.flip="left"),this.animations.forEach((function(t){t.scale.x=e})))}slowVelocity(){this.xVel>0?(this.xVel-=.1,this.xVel<=0&&(this.xVel=0,this.inSlowDown=!1)):this.xVel<0&&(this.xVel+=.1,this.xVel>=0&&(this.xVel=0,this.inSlowDown=!1))}drawCollider(t){t.clear(),t.beginFill(16549891,.5),t.drawRect(this.position.x-this.colliderWidth/2,this.position.y-this.colliderHeight/2-1,this.colliderWidth,this.colliderHeight),t.endFill()}getClimbDistance(t,e){this.animations.get("climb").totalFrames;this.cameraMovement.x=(t-this.position.x)/45,this.cameraMovement.y=(e-this.position.y)/45}startLedgeClimb(t,e){let i=a.a.Vector;this.inSlide=!1,this.isGrounded=!1,this.isHanging=!0,this.setAnimation("climb");let r=40,n=-60;e?this.setFlip("left"):(r*=-1,n*=-1,this.setFlip("right"));let o=new i.create(t.x+r,t.y+0);a.a.Body.setStatic(this.body,!0),a.a.Body.setVelocity(this.body,new i.create(0,0)),a.a.Body.setPosition(this.body,o),this.climbTranslation.set(o.x+n,o.y+-52),this.getClimbDistance(this.climbTranslation.x,this.climbTranslation.y),this.cameraSnapped=!1}lockCamera(){this.cameraSnapped=!0}handleEvent(t){switch(t.type){case"inputDown":switch(t.direction){case"up":this.isGrounded?(a.a.Body.setVelocity(this.body,a.a.Vector.create(this.xVel,this.jumpVel)),this.setAnimation("jump",0,!0),this.isGrounded=!1,this.jumpInput=!0,this.inSlide=!1):this.inSlide&&(this.wallJumpTimer.start(),"right"==this.flip?(this.setFlip("left"),this.xVel=1.5*-this.maxVel,a.a.Body.setVelocity(this.body,a.a.Vector.create(this.xVel,.85*this.jumpVel)),this.setAnimation("jump",0,!0),this.inSlide=!1,this.jumpInput=!0):"left"==this.flip&&(this.setFlip("right"),this.xVel=1.5*this.maxVel,a.a.Body.setVelocity(this.body,a.a.Vector.create(this.xVel,.85*this.jumpVel)),this.setAnimation("jump",0,!0),this.inSlide=!1,this.jumpInput=!0));break;case"down":break;case"right":this.isGrounded&&this.setAnimation("walk"),this.setFlip("right"),this.inSlowDown=!1,this.xVel=this.maxVel,this.lastInput="right";break;case"left":this.isGrounded&&this.setAnimation("walk"),this.setFlip("left"),this.inSlowDown=!1,this.xVel=-this.maxVel,this.lastInput="left"}break;case"inputUp":switch(t.direction){case"up":case"down":break;case"right":case"left":this.lastInput="end",this.isGrounded?(this.setAnimation("stop"),this.xVel=0):this.inSlowDown=!0}}}}i(7);var Or=function(t,e,i,r,n){this.rightDown=!1,this.leftDown=!1,document.onkeydown=function(e){e=e||window.event;let o={type:"inputDown"};"38"==e.keyCode?o.direction="up":"40"==e.keyCode?o.direction="down":"37"!=e.keyCode||this.leftDown?"39"!=e.keyCode||this.rightDown?"32"==e.keyCode?n.isOpen?o.direction="enter":i.speed=.5:"88"==e.keyCode?t.showDebug^=!0:"70"==e.keyCode?r.addTrauma(1):"27"==e.keyCode&&n.onClick(i):(o.direction="right",this.leftDown=!1,this.rightDown=!0):(o.direction="left",this.rightDown=!1,this.leftDown=!0);n.isOpen?("up"==o.direction?o.direction="left":"down"==o.direction&&(o.direction="right"),n.handleEvent(o)):t.handleEvent(o)},document.onkeyup=function(e){e=e||window.event;let r={type:"inputUp"};"38"==e.keyCode?r.direction="up":"40"==e.keyCode?r.direction="down":"37"==e.keyCode&&this.leftDown?(r.direction="left",this.leftDown=!1):"39"==e.keyCode&&this.rightDown?(this.rightDown=!1,r.direction="right"):"32"==e.keyCode&&(i.speed=1);t.handleEvent(r)}};Or.prototype.constructor=Or;class kr{constructor(t,e,i){let r=new PIXI.Graphics;this.mesh=new PIXI.Graphics;let n=e.tileSize,o=e.w,s=e.h;const a=new PIXI.Rectangle(-n/2,-n/2,o*n,s*n);r.beginFill(16777215,1),r.drawRect(-n/2,-n/2,o*n,s*n),r.endFill(),t.forEach(t=>{t.lightContainer.children.forEach(t=>{let e=t.geometry.getBuffer("aVertexPosition").data;r.beginFill(0,1),r.moveTo(e[0],e[1]),r.lineTo(e[2],e[3]),r.lineTo(e[4],e[5]),r.lineTo(e[0],e[1]),r.endFill()})});const h=i.generateTexture(r,PIXI.SCALE_MODES.NEAREST,1,a);this.focus=new PIXI.Sprite(h),this.focus.x=-n/2,this.focus.y=-n/2,this.mesh.beginFill(0,.4),this.mesh.drawRect(-n/2,-n/2,o*n,s*n),this.mesh.endFill(),this.mesh.mask=this.focus}}var Br=i(3);class Rr{constructor(t){this.targetPos=t,this.position=t,this.offset=new PIXI.Point(0,0),this.angleOffset=0,this.maxOffset=250,this.maxAngleOffset=10,this.flipOffset=75,this.shake=0,this.trauma=0,this.baseSeed=Date.now(),this.xNoise=Object(Br.makeNoise2D)(this.baseSeed),this.yNoise=Object(Br.makeNoise2D)(this.baseSeed+1),this.rNoise=Object(Br.makeNoise2D)(this.baseSeed+2),this.noiseIncrement=0}update(t,e,i){this.noiseIncrement+=i,this.trauma-=.015*i,this.trauma<0&&(this.trauma=0),this.shake=Math.pow(this.trauma,2),this.simplexShake();let r=new PIXI.Point;r.copyFrom(t),"right"==e?r.x+=this.flipOffset:r.x-=this.flipOffset,this.asymptoticAverage(r,.05),this.position.x+=this.offset.x,this.position.y+=this.offset.y}addTrauma(t){this.trauma+=t,console.log("trauma += ",t)}randomShake(){this.offset.x=this.maxOffset*this.shake*(2*Math.random()-1),this.offset.y=this.maxOffset*this.shake*(2*Math.random()-1),this.angleOffset=this.maxAngleOffset*this.shake*(2*Math.random()-1)}simplexShake(){this.offset.x=this.maxOffset*this.shake*this.xNoise(this.noiseIncrement,0),this.offset.y=this.maxOffset*this.shake*this.yNoise(this.noiseIncrement,0),this.angleOffset=this.maxAngleOffset*this.shake*this.rNoise(this.noiseIncrement,0)}asymptoticAverage(t,e){const i=1-e;this.position.x=i*this.position.x+e*t.x,this.position.y=i*this.position.y+e*t.y}}class Dr extends class{constructor(t){this.pressed=!1,this.sprites=new Map([["unpressed",new PIXI.Sprite.from(t[0])],["pressed",new PIXI.Sprite.from(t[1])]]),this.sprites.forEach(t=>{t.interactive=!0,t.visible=!1,t.scale.set(7)}),this.sprites.get("unpressed").visible=!0,this.interactionRectangle=new PIXI.Rectangle,console.log("hello")}}{constructor(t,e,i,r,n){super(t),this.type=e,this.eventCallback=r,this.pauseCallback=n,this.inPause=!1,this.sprites.forEach(t=>{t.position.copyFrom(i),t.alpha=.5}),this.height=this.sprites.get("unpressed").height,this.width=this.sprites.get("unpressed").width}onPress(){this.swapButtons();const t={type:"inputDown",direction:this.type};this.inPause?("up"==t.direction&&(t.direction="enter"),this.pauseCallback(t)):this.eventCallback(t),this.pressed=!0}onEnd(){this.swapButtons();const t={type:"inputUp",direction:this.type};this.inPause?this.pauseCallback(t):this.eventCallback(t),this.pressed=!1}onMove(t){let e=t.data.global;this.pressed?this.sprites.get("pressed").getBounds().contains(e.x,e.y)||this.onEnd():this.sprites.get("unpressed").getBounds().contains(e.x,e.y)&&this.onPress()}swapButtons(){this.sprites.get("unpressed").visible?(this.sprites.get("unpressed").visible=!1,this.sprites.get("pressed").visible=!0):(this.sprites.get("unpressed").visible=!0,this.sprites.get("pressed").visible=!1)}setPosition(t,e){let i=new PIXI.Point;i.copyFrom(t),i.x+=e.x,i.y+=e.y,this.sprites.forEach(t=>{t.position.copyFrom(i)})}}class Fr{constructor(t,e,i,r,n,o){this.clientTopLeft=new PIXI.Point(e.x-window.innerWidth,e.y-window.innerHeight),n.addEventListener("touchstart",this.handleTouches.bind(this)),n.addEventListener("touchend",this.handleTouches.bind(this)),n.addEventListener("touchmove",this.handleTouches.bind(this)),n.addEventListener("click",t=>{console.log("click: x: ",t.clientX,"y: ",t.clientY)}),this.buttonContainer=new PIXI.Container,this.buttons=new Map([["left",new Dr(t.get("left"),"left",e,i,r)],["right",new Dr(t.get("right"),"right",e,i,r)],["up",new Dr(t.get("up"),"up",e,i,r)]]),this.buttons.forEach(t=>{t.sprites.forEach(t=>{this.buttonContainer.addChild(t)})}),this.leftButtonOffset=new PIXI.Point(10-window.innerWidth,window.innerHeight-(this.buttons.get("left").height+10)),this.rightButtonOffset=new PIXI.Point(this.leftButtonOffset.x+this.buttons.get("left").width+5,this.leftButtonOffset.y),this.upButtonOffset=new PIXI.Point(window.innerWidth-this.buttons.get("left").width-5,this.leftButtonOffset.y);let s=this.buttons.get("left").sprites.get("unpressed");console.log(s.getBounds())}handleTouches(t){console.log("touches: ",t.touches.length),this.buttons.forEach(e=>{let i=!1;for(let r=0;r<t.touches.length;r++){let n=t.touches.item(r);e.interactionRectangle.contains(n.clientX,n.clientY)&&(i=!0)}i!=e.pressed&&(e.pressed=i,e.pressed?e.onPress():e.onEnd())})}onMove(t){let e=t.data.global;this.buttons.forEach(t=>{t.pressed?t.sprites.get("pressed").getBounds().contains(e.x,e.y)||t.onEnd():t.sprites.get("unpressed").getBounds().contains(e.x,e.y)&&t.onPress()})}moveButtons(t){this.buttons.get("left").interactionRectangle=this.buttons.get("left").sprites.get("unpressed").getBounds(),this.buttons.get("right").interactionRectangle=this.buttons.get("right").sprites.get("unpressed").getBounds(),this.buttons.get("up").interactionRectangle=this.buttons.get("up").sprites.get("unpressed").getBounds(),this.buttons.get("left").setPosition(t,this.leftButtonOffset),this.buttons.get("right").setPosition(t,this.rightButtonOffset),this.buttons.get("up").setPosition(t,this.upButtonOffset)}onResize(){this.leftButtonOffset=new PIXI.Point(10-window.innerWidth,window.innerHeight-(this.buttons.get("left").height+10)),this.rightButtonOffset=new PIXI.Point(this.leftButtonOffset.x+this.buttons.get("left").width+5,this.leftButtonOffset.y),this.upButtonOffset=new PIXI.Point(window.innerWidth-this.buttons.get("left").width-5,this.leftButtonOffset.y)}}class Lr{constructor(t){this.sprites=new Map([["pause",PIXI.Sprite.from(t[0])],["exit",PIXI.Sprite.from(t[1])]]),this.buttonContainer=new PIXI.Container,this.sprites.forEach(t=>{t.interactive=!0,t.alpha=.5,t.scale.set(3),this.buttonContainer.addChild(t)}),this.width=this.sprites.get("exit").width,this.height=this.sprites.get("exit").height,this.sprites.get("exit").visible=!1}setPosition(t,e){let i=new PIXI.Point;i.copyFrom(t),i.x+=e.x,i.y+=e.y,this.buttonContainer.children.forEach(t=>{t.position.copyFrom(i)})}}class Nr{constructor(t,e,i,r,n,o){this.ticker=e,this.isOpen=!1,this.toggleButton=new Lr([t.get("pause"),t.get("exit")]),this.toggleButton.sprites.forEach(t=>{t.on("click",this.onClick.bind(this,e)),t.on("tap",this.onClick.bind(this,e)),t.position.set(i.x,i.y)}),this.pausedText=this.staticText(t),this.pauseTicker=new PIXI.Ticker,this.pauseTicker.add(this.pauseBlinker.bind(this)),this.PAUSE_BLINKER_INTERVAL=500,this.pauseBlinkerLag=0,this.toggleButtonOffset=new PIXI.Point(window.innerWidth-this.toggleButton.width-16,32-window.innerHeight),this.buttonContainer=new PIXI.Container,this.buttonContainer.addChild(this.toggleButton.buttonContainer,this.pausedText),this.animationContainer=r,this.menuList=new Ur(i,o),this.menuList.options.forEach(t=>{this.buttonContainer.addChild(t.inactiveSprite),this.buttonContainer.addChild(t.activeSprite)})}onClick(t){this.isOpen^=1,this.toggleButton.sprites.forEach(t=>{t.visible^=1}),this.menuList.onToggle(this.isOpen),this.controller&&this.controller.buttons.forEach(t=>{t.inPause=this.isOpen}),this.isOpen?(this.pauseTicker.start(),this.pausedText.visible=!0,this.pauseBlinkerLag=0,this.pauseBlinker(),t.speed=0,this.controller&&this.controller.buttonContainer.children.forEach(t=>{t.interactive=!1}),this.animationContainer.children.forEach(t=>{t.stop()})):(t.speed=1,this.pausedText.visible=!1,this.pauseTicker.stop(),this.pauseBlinker(),this.controller&&this.controller.buttonContainer.children.forEach(t=>{t.interactive=!0}),this.animationContainer.children.forEach(t=>{t.play()}))}handleEvent(t){let e=!1;switch(t.type){case"inputDown":switch(t.direction){case"right":this.menuList.currentIndex>=this.menuList.options.length-1?this.menuList.currentIndex=0:this.menuList.currentIndex++;const t=this.menuList.currentIndex;this.menuList.currentKey=this.menuList.options[t].label;break;case"left":0==this.menuList.currentIndex?this.menuList.currentIndex=this.menuList.options.length-1:this.menuList.currentIndex--;const i=this.menuList.currentIndex;this.menuList.currentKey=this.menuList.options[i].label;break;case"enter":case"up":switch(e=!0,this.menuList.currentKey){case"RESUME":this.onClick(this.ticker);break;case"REROLL":this.onReroll()}}e||this.menuList.updateOptions()}}onReroll(){window.location.reload()}attachController(t){this.controller=t,this.buttonContainer.addChild(this.controller.buttonContainer)}staticText(t){let e=new PIXI.Text("PAUSED",{fill:16777215,fontSize:52,fontFamily:"ARCADECLASSIC"});return e.visible=!1,e.anchor.set(.5),e}pauseBlinker(){this.pauseBlinkerLag+=this.pauseTicker.deltaMS,this.pauseBlinkerLag>this.PAUSE_BLINKER_INTERVAL&&(this.pauseBlinkerLag-=this.PAUSE_BLINKER_INTERVAL,this.pausedText.visible^=1)}moveButtons(t){this.controller&&this.controller.moveButtons(t),this.toggleButton.setPosition(t,this.toggleButtonOffset),this.pausedText.position.copyFrom(t),this.pausedText.y-=window.innerHeight-(this.pausedText.height/2+6),this.menuList.moveElements(this.pausedText.position)}onResize(){this.toggleButtonOffset=new PIXI.Point(window.innerWidth-this.toggleButton.width-16,32-window.innerHeight),this.controller&&this.controller.onResize()}}class Ur{constructor(t,e){this.currentIndex=0,this.options=[new Vr("RESUME","placeholder",e),new Vr("REROLL","placeholder",e),new Vr("PALETTE","placeholder",e),new Vr("OPTIONS","placeholder",e)],this.currentKey=this.options[0].label,this.moveElements(t)}moveElements(t){this.options.forEach((e,i)=>{e.activeSprite.position.copyFrom(t),e.inactiveSprite.position.copyFrom(t),e.activeSprite.y+=100,e.inactiveSprite.y+=100,e.inactiveSprite.x-=200,e.activeSprite.x-=200,e.activeSprite.x+=40*i,e.activeSprite.y+=e.activeSprite.height*i,e.inactiveSprite.x+=40*i,e.inactiveSprite.y+=e.activeSprite.height*i;e.activeSprite.x+=5,e.activeSprite.y-=5})}onToggle(t){t?(this.currentIndex=0,this.options.forEach((t,e)=>{t.inactiveSprite.visible=!0,t.activeSprite.visible=!1,0==e&&(t.activeSprite.visible=!0)})):this.options.forEach(t=>{t.inactiveSprite.visible=!1,t.activeSprite.visible=!1})}updateOptions(){console.log("successful pause menu event"),this.options.forEach((t,e)=>{t.activeSprite.visible=!1,e==this.currentIndex&&(t.activeSprite.visible=!0)})}}class Vr{constructor(t,e,i){this.label=t,this.callback=e;this.inactiveSprite=new PIXI.Text(t,{fill:16753234,fontSize:52,fontFamily:"ARCADECLASSIC"}),this.activeSprite=new PIXI.Text(t,{fill:16777215,fontSize:52,fontFamily:"ARCADECLASSIC"}),this.inactiveSprite.cacheAsBitmap=!0,this.activeSprite.cacheAsBitmap=!0,this.activeSprite.visible=!1,this.inactiveSprite.visible=!1}}class Xr extends PIXI.Filter{constructor(t,e,i){const r=new PIXI.Matrix;t.renderable=!1;let n={mapSampler:t._texture,filterMatrix:r,scale:{x:1,y:1},DissolveVal:1};super(e.vert,e.frag,n),this.maskSprite=t,this.maskMatrix=r,null==i&&(i=20),this.scale=new PIXI.Point(i,i)}apply(t,e,i,r){this.uniforms.filterMatrix=t.calculateSpriteMatrix(this.maskMatrix,this.maskSprite),this.uniforms.scale.x=this.scale.x,this.uniforms.scale.y=this.scale.y,t.applyFilter(this,e,i,r)}get map(){return this.uniforms.mapSampler}set map(t){this.uniforms.mapSampler=t}}class jr extends PIXI.Filter{constructor(t,e,i){const r=new PIXI.Matrix;t.renderable=!1,super(e.vert,e.frag,{mapSampler:t._texture,filterMatrix:r,scale:{x:1,y:1},rotation:new Float32Array([1,0,0,1]),bezierVal:0}),this.maskSprite=t,this.maskMatrix=r,null==i&&(i=20),this.scale=new PIXI.Point(i,i)}apply(t,e,i,r){this.uniforms.filterMatrix=t.calculateSpriteMatrix(this.maskMatrix,this.maskSprite),this.uniforms.scale.x=this.scale.x,this.uniforms.scale.y=this.scale.y;const n=this.maskSprite.transform.worldTransform,o=Math.sqrt(n.a*n.a+n.b*n.b),s=Math.sqrt(n.c*n.c+n.d*n.d);0!==o&&0!==s&&(this.uniforms.rotation[0]=n.a/o,this.uniforms.rotation[1]=n.b/o,this.uniforms.rotation[2]=n.c/s,this.uniforms.rotation[3]=n.d/s),t.applyFilter(this,e,i,r)}get map(){return this.uniforms.mapSampler}set map(t){this.uniforms.mapSampler=t}}class zr{constructor(){this.points=[new PIXI.Point(0,0),new PIXI.Point(.5,0),new PIXI.Point(.5,1),new PIXI.Point(1,1)]}getY(t){let e=Math.pow(1-t,3)*this.points[0].y;return e+=3*Math.pow(1-t,2)*t*this.points[1].y,e+=3*(1-t)*Math.pow(t,2)*this.points[2].y,e+=Math.pow(t,3)*this.points[3].y,e}}class Gr{constructor(t,e){this.playerDefaultVel=e.maxVel,this.playerTripVel=1.3*e.maxVel,this.playerDefaultJump=e.jumpVel,this.playerTripJump=1.2*e.jumpVel,this.cameraRotation=0,this.bezierTime=0,this.filterTime=0,this.filterTransitionMS=3e3,this.filterStaticMS=1e4,this.displacementIncrement=.5,this.bezierIncrement=1/(this.filterTransitionMS/16.666),this.bezierCurve=new zr,this.timer=new Pr,this.powerupTimer=new Pr,this.powerupTimer.start(),this.foregroundNoise=PIXI.Sprite.fromImage("https://res.cloudinary.com/dvxikybyi/image/upload/v1486634113/2yYayZk_vqsyzx.png"),this.foregroundNoise.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.backgroundNoise=PIXI.Sprite.fromImage("https://res.cloudinary.com/dvxikybyi/image/upload/v1486634113/2yYayZk_vqsyzx.png"),this.backgroundNoise.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.foregroundNoise.scale.set(.6),this.backgroundNoise.scale.set(.6),this.foregroundFilter=new jr(this.foregroundNoise,t),this.backgroundFilter=new jr(this.backgroundNoise,t),this.badFilterSolution=(new PIXI.Graphics).beginFill(0,0).drawRect(-2e3,-2e3,8e3,8e3).endFill()}update(){this.foregroundNoise.position.set(this.filterTime,this.filterTime),this.backgroundNoise.position.set(this.filterTime,this.filterTime)}FixedUpdate(t,e,i,r){if(this.timer.isRunning){let e;t.maxVel=this.playerTripVel,t.jumpVel=this.playerTripJump,this.filterTime+=this.displacementIncrement,this.bezierTime>1?(this.bezierTime=1,e=1):e=this.bezierCurve.getY(this.bezierTime),this.foregroundFilter.uniforms.bezierVal=e,this.backgroundFilter.uniforms.bezierVal=e,this.cameraRotation=.015*e*Math.sin(.02*this.filterTime),this.timer.getElapsedTime()<this.filterTransitionMS?this.bezierTime+=this.bezierIncrement:this.timer.getElapsedTime()>this.filterTransitionMS+this.filterStaticMS&&(this.bezierTime-=this.bezierIncrement),this.timer.getElapsedTime()>2*this.filterTransitionMS+this.filterStaticMS&&(this.filterTime=0,this.bezierTime=0,this.timer.stop(),[],[],t.jumpVel=this.playerDefaultJump,t.maxVel=this.playerDefaultVel)}r.forEach(t=>{t.update(this.powerupTimer.getElapsedTime())})}addToStage(t,e){t.addChild(this.foregroundNoise),e.addChild(this.backgroundNoise),t.addChild(this.badFilterSolution)}start(){this.timer.start()}}let Hr,Wr,Yr=a.a.Engine,qr=a.a.World,Zr=a.a.Events;class Kr{constructor(t,e){this.app=e,this.worldContainer=new PIXI.Container,this.animationContainer=new PIXI.Container,this.foregroundContainer=new PIXI.Container,this.backgroundContainer=new PIXI.Container,this.pauseMusic=t.pauseMusic,this.dissolveSprite=new PIXI.Sprite.from("https://res.cloudinary.com/dvxikybyi/image/upload/v1486634113/2yYayZk_vqsyzx.png"),this.dissolveSprite.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.dissolveSprite.scale.set(.2),this.dissolveShader=t.dissolveShader,this.bezierDisplacementShader=t.displacementShader,this.worldContainer.addChild(this.dissolveSprite),this.engine=Yr.create(),this.world=this.engine.world,this.updateLag=0,this.tileMap=new Ar(25,25,150,6,t.lightShader,t.tileset,t.torchFrames),this.allLights=new PIXI.Container;let i=this.tileMap.playerSpawn;this.player=new Mr(i,t.catAnimations),console.log(this.player),this.catnipTrip=new Gr(this.bezierDisplacementShader,this.player),this.tileMap.torchSprites.forEach(t=>{this.animationContainer.addChild(t)}),this.player.animations.forEach(t=>{this.animationContainer.addChild(t)}),qr.add(this.world,this.player.body),this.tileMap.terrain.forEach(t=>{qr.add(this.world,t.Collider),t.walkBox&&qr.add(this.world,t.walkBox),qr.add(this.world,t.edgeBoxes)}),this.tileMap.powerups.forEach(t=>{qr.add(this.world,t.collider)}),this.camera=new Rr(i),this.pauseMenu=new Nr(t.menuButtons,this.app.ticker,i,this.animationContainer,this.pauseMusic,t.menuFont),this.buttonController=null,"ontouchstart"in document.documentElement&&(this.buttonController=new Fr(t.buttonFrames,this.player.position,this.player.handleEvent.bind(this.player),this.pauseMenu.handleEvent.bind(this.pauseMenu),this.app.renderer.view),this.pauseMenu.attachController(this.buttonController)),this.KBInput=new Or(this.player,this.player.body,this.app.ticker,this.camera,this.pauseMenu),window.addEventListener("resize",this.onWindowResize.bind(this),!1),this.collisionEventSetup(),this.app.stage.position.set(this.app.screen.width/2,this.app.screen.height/2),this.tileMap.lights.forEach(t=>{t.update(this.app.ticker.speed)}),this.initLayers(),this.app.stage.scale.set(.5),this.app.ticker.add(t=>this.loop(t))}loop(t){this.FixedUpdate(),this.catnipTrip.timer.isRunning&&(this.worldContainer.rotation=this.catnipTrip.cameraRotation),this.pauseMenu.moveButtons(this.camera.position),this.app.stage.pivot.copyFrom(this.camera.position),this.app.stage.angle=this.camera.angleOffset,this.tileMap.parallaxScroll(this.app.stage.pivot,1.2,1.2),this.catnipTrip.update()}FixedUpdate(){for(this.updateLag+=this.app.ticker.deltaMS;this.updateLag>=16.666;)this.player.update(this.app.ticker.speed),Yr.update(this.engine),this.player.cameraSnapped?this.camera.update(this.player.position,this.player.flip,this.app.ticker.speed):this.camera.update(this.player.climbTranslation,this.player.flip,this.app.ticker.speed),!this.player.isGrounded&&!this.player.inSlide&&!this.player.isHanging&&this.player.body.velocity.y>0?this.world.gravity.y<3.5&&(this.world.gravity.y+=.015):this.world.gravity.y=1,this.updateLag-=16.666,this.tileMap.lights.forEach(t=>{t.lightContainer.children.forEach(t=>{t.shader.uniforms.time+=3e-5})}),this.catnipTrip.FixedUpdate(this.player,this.foregroundContainer.filters,this.backgroundContainer.filters,this.tileMap.powerups)}initLayers(){this.backgroundContainer.addChild(this.tileMap.backgroundContainer),this.worldContainer.addChild(this.backgroundContainer),this.foregroundContainer.addChild(this.animationContainer),this.foregroundContainer.addChild(this.tileMap.tileContainer),this.tileMap.lights.forEach(t=>{this.allLights.addChild(t.lightContainer)}),this.foregroundContainer.addChild(this.allLights);let t=new kr(this.tileMap.lights,this.tileMap,this.app.renderer);this.foregroundContainer.addChild(t.focus),this.foregroundContainer.addChild(t.mesh),this.worldContainer.addChild(this.foregroundContainer),this.app.stage.addChild(this.worldContainer),this.app.stage.addChild(this.pauseMenu.buttonContainer),this.foregroundContainer.addChild(this.catnipTrip.foregroundNoise),this.foregroundContainer.addChild(this.catnipTrip.badFilterSolution),this.tileMap.backgroundContainer.addChild(this.catnipTrip.backgroundNoise);let e=new xr(1576960,16753234,.001);this.worldContainer.filters=[new gr(3)],this.animationContainer.filters=[e]}collisionEventSetup(){Zr.on(this.engine,"collisionActive",t=>{for(var e=!1,i=!1,r=t.pairs,n=0,o=0;o<r.length;o++){let t,s=r[o];if(s.bodyA.id==this.player.body.id)t=s.bodyB;else{if(s.bodyB.id!=this.player.body.id)continue;t=s.bodyA}if(t.isSensor){if(t.isEdgeBox){if("right"==this.player.lastInput&&!t.isRight||"left"==this.player.lastInput&&t.isRight){this.world.gravity.y=1;const e=this.player.prevVel;return e>this.player.fallDamageVel&&this.camera.addTrauma(e/(2*this.player.fallDamageVel)),void this.player.startLedgeClimb(t.position,t.isRight)}e=!1,this.player.isGrounded=!1,this.player.inSlide=!0}else this.player.isHanging||(e=!0);t.isCatnip&&(this.foregroundContainer.filters=[this.catnipTrip.foregroundFilter],this.tileMap.backgroundContainer.filters=[this.catnipTrip.backgroundFilter],this.catnipTrip.start(),qr.remove(this.world,t),t.spriteReference.filters=[new Xr(this.dissolveSprite,this.dissolveShader,1)],console.log(t.spriteReference))}else this.player.collisionTimer.stop(),i=!0,n++}if(e||!i||this.player.isGrounded){if(!this.player.isGrounded&&(e&&i&&!this.player.inSlide||n>=2&&e)){this.world.gravity.y=1;const t=this.player.prevVel;t>this.player.fallDamageVel&&this.camera.addTrauma(t/(2*this.player.fallDamageVel)),this.player.prevVel=0,this.player.isGrounded=!0,this.player.inSlide=!1,0==this.player.xVel||this.player.inSlowDown?this.player.setAnimation("stop"):this.player.inSlowDown||this.player.setAnimation("walk")}}else{if(this.player.wallJumpTimer.stop(),this.player.xVel=0,this.player.inSlide=!0,"right"==this.player.flip)(s=this.player.animations.get("slide")).scale.x=-this.player.scale,s.angle=-90,this.player.animations.set("slide",s);else if("left"==this.player.flip){var s;(s=this.player.animations.get("slide")).scale.x=-this.player.scale,s.angle=90,this.player.animations.set("slide",s)}this.player.setAnimation("slide")}}),Zr.on(this.engine,"collisionEnd",t=>{let e=t.pairs;for(var i=0;i<e.length;i++){let t,r=e[i];r.bodyA.id==this.player.body.id?t=r.bodyB:r.bodyB.id==this.player.body.id&&(t=r.bodyA),t.isSensor||(this.player.collisionTimer.start(),this.player.body.velocity.y<0&&(this.player.setAnimation("jump",5),this.player.collisionTimer.stop(),this.player.isGrounded=!1,this.player.inSlide=!1,this.player.jumpInput=!1))}})}onWindowResize(){console.log("resize");const t=this.app.view.parentNode;this.app.renderer.resize(t.clientWidth,t.clientHeight),this.app.stage.position.set(this.app.screen.width/2,this.app.screen.height/2),this.tileMap.lights.forEach(t=>{t.update(this.app.ticker.speed),this.worldContainer.addChild(t.lightContainer)}),this.pauseMenu.onResize()}}!function(t,e){for(var i=0,r=0,n=t.length;r<n;++r)!function(r){var n=document.createElement("span");n.innerHTML="giItT1WQy@!-/#",n.style.position="absolute",n.style.left="-10000px",n.style.top="-10000px",n.style.fontSize="300px",n.style.fontFamily="sans-serif",n.style.fontVariant="normal",n.style.fontStyle="normal",n.style.fontWeight="normal",n.style.letterSpacing="0",document.body.appendChild(n);var o,s=n.offsetWidth;function a(){if(n&&n.offsetWidth!=s&&(++i,n.parentNode.removeChild(n),n=null),i>=t.length&&(o&&clearInterval(o),i==t.length))return e(),!0}n.style.fontFamily=r,a()||(o=setInterval(a,50))}(t[r])}(["ARCADECLASSIC"],(Hr=new PIXI.Application({width:window.innerWidth,height:window.innerHeight,antialias:!0,transparent:!1,resolution:1,backgroundColor:0,autoDensity:!0}),Hr.renderer.view.style.position="absolute",Hr.renderer.view.style.display="block",void document.getElementById("myCanvas").appendChild(Hr.view)));let Qr=new class{constructor(t){this.doneLoading=!1;let e=new r;PIXI.settings.SCALE_MODE=PIXI.SCALE_MODES.NEAREST,n.add(e.array()).add("pauseMusic","sound/tropical jam.mp3").add("ARCADECLASSIC","fonts/ARCADECLASSIC.TTF").load(this.onLoad.bind(this,t))}onLoad(t){this.lightShader=this.loadShaders(),this.dissolveShader=this.loadDissolveShader(),this.displacementShader=this.loadDisplacementShader(),this.catnipFilter=this.loadFilters(),this.catAnimations=this.animationsInit(),this.tileset=this.loadTiles(),this.torchFrames=this.loadTorch(),this.doneLoading=!0,this.buttonFrames=this.loadButtons(),this.menuButtons=this.loadMenu(),this.pauseMusic=this.loadSound(),this.pauseMusic.loop=!0,this.menuFont=this.loadFont(),console.log(this.menuFont.data),t()}checkLoad(){console.log(this.lightShader),console.log(this.catAnimations),console.log(this.doneLoading)}loadShaders(){return{vert:o["shaders/lightVert.GLSL"].data,frag:o["shaders/lightFrag.GLSL"].data}}loadDissolveShader(){return{vert:o["shaders/dissolve/dissolveVert.GLSL"].data,frag:o["shaders/dissolve/dissolveFrag.GLSL"].data}}loadDisplacementShader(){return{vert:o["shaders/BezierDisplacementFilter/BezierDispVert.GLSL"].data,frag:o["shaders/BezierDisplacementFilter/BezierDispFrag.GLSL"].data}}loadFilters(){return{vert:o["shaders/catnip-effect/catnipVert.GLSL"].data,frag:o["shaders/catnip-effect/catnipFrag.GLSL"].data}}animationsInit(){let t=new Map([["walk",this.loadSprite("walk",10,!0)],["stop",this.loadSprite("stop",4,!1)],["idle",this.loadSprite("idle",9,!1)],["jump",this.loadSprite("jump",8,!1)],["slide",this.loadSprite("slide",4,!1)],["hang",this.loadSprite("hang",3,!1)],["climb",this.loadSprite("climb",9,!1)],["fall",this.loadSprite("fall",6,!0)]]);return t.get("slide").anchor.y=.3,t.get("hang").anchor.y=.3,t.get("climb").anchor.y=.65,t.get("climb").anchor.x=.85,t.get("idle").animationSpeed=.15,t.forEach((t,e)=>{"jump"!=e&&(t.visible=!1)}),t.get("jump").play(),t}loadSprite(t,e,i,r=.2){let n=[];for(let i=1;i<e+1;i++){const e=`${t} (${i}).png`;n.push(PIXI.Texture.from(e))}let o=new PIXI.AnimatedSprite(n);return o.x=window.innerWidth/2,o.y=window.innerHeight/2,o.vx=0,o.vy=0,o.scale.set(3.5,3.5),o.anchor.set(.5),o.animationSpeed=r,o.loop=i,o}loadTorch(){let t=[];for(let e=1;e<10;e++){const i=e;t.push(PIXI.Texture.from(`torch (${i}).png`))}return t}loadTiles(){let t=[];for(let e=1;e<24;e++){const i=e;let r=PIXI.Texture.from(`caveTile (${i}).png`);t.push(r)}return new Map([["Background",t[0]],["TLCorner",t[1]],["TopEdge",t[2]],["TRCorner",t[3]],["LeftEdge",t[4]],["Interior",t[5]],["RightEdge",t[6]],["BLCorner",t[7]],["BottomEdge",t[8]],["BRCorner",t[9]],["Wang",t[10]],["Shaft",t[11]],["Loner",t[13]],["Spikes",t[14]],["Moon",t[15]],["Sky",t[16]],["Stars-1",t[17]],["Stars-2",t[18]],["Stars-3",t[19]],["Grass-1",t[20]],["Grass-2",t[21]],["catnip",t[22]]])}loadButtons(){return new Map([["right",[PIXI.Texture.from("right-key (1).png"),PIXI.Texture.from("right-key (2).png")]],["left",[PIXI.Texture.from("left-key (1).png"),PIXI.Texture.from("left-key (2).png")]],["up",[PIXI.Texture.from("a-key (1).png"),PIXI.Texture.from("a-key (2).png")]]])}loadMenu(){return new Map([["pause",PIXI.Texture.from("pause.png")],["exit",PIXI.Texture.from("exit-button.png")],["paused-text",PIXI.Texture.from("paused-text.png")]])}loadSound(){return o.pauseMusic.data}loadFont(){return o.ARCADECLASSIC}}(function(){Wr=new Kr(Qr,Hr,this),document.getElementById("myCanvas").ontouchend=t=>{t.preventDefault()},document.getElementById("myCanvas").ontouchmove=t=>{t.preventDefault()},document.getElementById("myCanvas").ontouchstart=t=>{t.preventDefault()}}.bind(void 0))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9tYXR0ZXItanMvYnVpbGQvbWF0dGVyLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2lzbW9iaWxlanMvZGlzdC9pc01vYmlsZS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvb3Blbi1zaW1wbGV4LW5vaXNlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZWFyY3V0L3NyYy9lYXJjdXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9uaXBwbGVqcy9kaXN0L25pcHBsZWpzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL3B1bnljb2RlL3B1bnljb2RlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3VybC91dGlsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9lbmNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9vcGVuLXNpbXBsZXgtbm9pc2UvbGliL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvRmlsZVBhdGhzLmpzIiwid2VicGFjazovLy8uL2FwcC9teUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BwaXhpL3J1bm5lci9saWIvcnVubmVyLmVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHBpeGkvc2V0dGluZ3MvbGliL3NldHRpbmdzLmVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHBpeGkvY29uc3RhbnRzL2xpYi9jb25zdGFudHMuZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AcGl4aS91dGlscy9saWIvdXRpbHMuZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AcGl4aS90aWNrZXIvbGliL3RpY2tlci5lcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BwaXhpL21hdGgvbGliL21hdGguZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AcGl4aS9kaXNwbGF5L2xpYi9kaXNwbGF5LmVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHBpeGkvY29yZS9saWIvY29yZS5lcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BwaXhpL2ZpbHRlci1waXhlbGF0ZS9saWIvZmlsdGVyLXBpeGVsYXRlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BwaXhpL2ZpbHRlci1jb2xvci1yZXBsYWNlL2xpYi9maWx0ZXItY29sb3ItcmVwbGFjZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vZW50aXRpZXMvdGlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vZW50aXRpZXMvdGVycmFpbi5qcyIsIndlYnBhY2s6Ly8vLi9saWdodGluZy9yYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbGlnaHRpbmcvcmF5U291cmNlLmpzIiwid2VicGFjazovLy8uL2xpZ2h0aW5nL1BvaW50TGlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vZW50aXRpZXMvcG93ZXJ1cHMuanMiLCJ3ZWJwYWNrOi8vLy4vZW50aXRpZXMvbWFwR2VuLmpzIiwid2VicGFjazovLy8uL2VudGl0aWVzL215VGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZW50aXRpZXMvcGxheWVyLmpzIiwid2VicGFjazovLy8uL2VudGl0aWVzL2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbGlnaHRpbmcvc2hhZG93TWFwLmpzIiwid2VicGFjazovLy8uL2VudGl0aWVzL215Q2FtZXJhLmpzIiwid2VicGFjazovLy8uL2VudGl0aWVzL2J1dHRvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vZW50aXRpZXMvbXlNZW51LmpzIiwid2VicGFjazovLy8uL2ZpbHRlcnMvRGlzc29sdmVGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZmlsdGVycy9CZXppZXJEaXNwbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vZmlsdGVycy9CZXppZXJDdXJ2ZS5qcyIsIndlYnBhY2s6Ly8vLi9maWx0ZXJzL2NhdFRyaXBTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZ2FtZS5qcyIsIndlYnBhY2s6Ly8vLi9tYWluLmpzIiwid2VicGFjazovLy8uL2FwcC9sb2FkRm9udHMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJlIiwiYSIsIkVycm9yIiwiY29kZSIsImxlbmd0aCIsIjEiLCJfaW5lcnRpYVNjYWxlIiwiX25leHRDb2xsaWRpbmdHcm91cElkIiwiX25leHROb25Db2xsaWRpbmdHcm91cElkIiwiX25leHRDYXRlZ29yeSIsImlkIiwibmV4dElkIiwidHlwZSIsImxhYmVsIiwicGFydHMiLCJwbHVnaW4iLCJhbmdsZSIsInZlcnRpY2VzIiwiZnJvbVBhdGgiLCJwb3NpdGlvbiIsIngiLCJ5IiwiZm9yY2UiLCJ0b3JxdWUiLCJwb3NpdGlvbkltcHVsc2UiLCJjb25zdHJhaW50SW1wdWxzZSIsInRvdGFsQ29udGFjdHMiLCJzcGVlZCIsImFuZ3VsYXJTcGVlZCIsInZlbG9jaXR5IiwiYW5ndWxhclZlbG9jaXR5IiwiaXNTZW5zb3IiLCJpc1N0YXRpYyIsImlzU2xlZXBpbmciLCJtb3Rpb24iLCJzbGVlcFRocmVzaG9sZCIsImRlbnNpdHkiLCJyZXN0aXR1dGlvbiIsImZyaWN0aW9uIiwiZnJpY3Rpb25TdGF0aWMiLCJmcmljdGlvbkFpciIsImNvbGxpc2lvbkZpbHRlciIsImNhdGVnb3J5IiwibWFzayIsImdyb3VwIiwic2xvcCIsInRpbWVTY2FsZSIsInJlbmRlciIsInZpc2libGUiLCJvcGFjaXR5Iiwic3ByaXRlIiwieFNjYWxlIiwieVNjYWxlIiwieE9mZnNldCIsInlPZmZzZXQiLCJsaW5lV2lkdGgiLCJleHRlbmQiLCJuZXh0R3JvdXAiLCJuZXh0Q2F0ZWdvcnkiLCJzZXQiLCJib3VuZHMiLCJwb3NpdGlvblByZXYiLCJjbG9uZSIsImFuZ2xlUHJldiIsInBhcmVudCIsInJvdGF0ZSIsImF4ZXMiLCJ1cGRhdGUiLCJhcmVhIiwibWFzcyIsImluZXJ0aWEiLCJjaG9vc2UiLCJmaWxsU3R5bGUiLCJzdHJva2VTdHlsZSIsIm1pbiIsIm1heCIsInNldFN0YXRpYyIsInNldE1hc3MiLCJzZXREZW5zaXR5Iiwic2V0SW5lcnRpYSIsInNldFZlcnRpY2VzIiwic2V0UG9zaXRpb24iLCJzZXRBbmdsZSIsInNldFZlbG9jaXR5Iiwic2V0QW5ndWxhclZlbG9jaXR5Iiwic2V0UGFydHMiLCJfb3JpZ2luYWwiLCJpbnZlcnNlTWFzcyIsImludmVyc2VJbmVydGlhIiwiYm9keSIsImZyb21WZXJ0aWNlcyIsImNlbnRyZSIsInRyYW5zbGF0ZSIsInNsaWNlIiwicHVzaCIsImNvbmNhdCIsImNsb2Nrd2lzZVNvcnQiLCJodWxsIiwiX3RvdGFsUHJvcGVydGllcyIsInN1YiIsInJvdGF0ZUFib3V0IiwibWFnbml0dWRlIiwiTWF0aCIsImFicyIsImFkZCIsImNvcyIsInNpbiIsInNjYWxlIiwidSIsImNpcmNsZVJhZGl1cyIsInBvdyIsImYiLCJhcHBseUZvcmNlIiwibXVsdCIsImRpdiIsIjIiLCJpc01vZGlmaWVkIiwiYm9kaWVzIiwiY29uc3RyYWludHMiLCJjb21wb3NpdGVzIiwic2V0TW9kaWZpZWQiLCJ0cmlnZ2VyIiwid2FybiIsImFkZEJvZHkiLCJhZGRDb25zdHJhaW50IiwiYWRkQ29tcG9zaXRlIiwiY29uc3RyYWludCIsInJlbW92ZSIsInJlbW92ZUJvZHkiLCJyZW1vdmVDb25zdHJhaW50IiwicmVtb3ZlQ29tcG9zaXRlIiwiaW5kZXhPZiIsInJlbW92ZUNvbXBvc2l0ZUF0Iiwic3BsaWNlIiwicmVtb3ZlQm9keUF0IiwicmVtb3ZlQ29uc3RyYWludEF0IiwiY2xlYXIiLCJmaWx0ZXIiLCJhbGxCb2RpZXMiLCJhbGxDb25zdHJhaW50cyIsImFsbENvbXBvc2l0ZXMiLCJ0b1N0cmluZyIsIm1vdmUiLCJyZWJhc2UiLCIzIiwiZ3Jhdml0eSIsIjQiLCJ2ZXJ0ZXgiLCJub3JtYWxJbXB1bHNlIiwidGFuZ2VudEltcHVsc2UiLCJpbmRleCIsIjUiLCJjb2xsaXNpb25zIiwicGFpcnMiLCJ0YWJsZSIsImNhbkNvbGxpZGUiLCJvdmVybGFwcyIsInYiLCJnIiwiaXNBY3RpdmUiLCJjb2xsaXNpb24iLCJjb2xsaWRlcyIsImNvbGxpZGVkIiwiNiIsImNvbnRyb2xsZXIiLCJkZXRlY3RvciIsImJ1Y2tldHMiLCJwYWlyc0xpc3QiLCJidWNrZXRXaWR0aCIsImJ1Y2tldEhlaWdodCIsIndvcmxkIiwiX2dldFJlZ2lvbiIsInJlZ2lvbiIsIl9yZWdpb25VbmlvbiIsInN0YXJ0Q29sIiwiZW5kQ29sIiwic3RhcnRSb3ciLCJlbmRSb3ciLCJfZ2V0QnVja2V0SWQiLCJfYnVja2V0UmVtb3ZlQm9keSIsIl9jcmVhdGVCdWNrZXQiLCJfYnVja2V0QWRkQm9keSIsIl9jcmVhdGVBY3RpdmVQYWlyc0xpc3QiLCJfY3JlYXRlUmVnaW9uIiwiZmxvb3IiLCJrZXlzIiwiNyIsImJvZHlBIiwiYm9keUIiLCJwYXJlbnRBIiwicGFyZW50QiIsImNvbnRhY3RzIiwiYWN0aXZlQ29udGFjdHMiLCJzZXBhcmF0aW9uIiwidGltZUNyZWF0ZWQiLCJ0aW1lVXBkYXRlZCIsInN1cHBvcnRzIiwiZGVwdGgiLCJzZXRBY3RpdmUiLCI4IiwiX3BhaXJNYXhJZGxlTGlmZSIsImxpc3QiLCJjb2xsaXNpb25TdGFydCIsImNvbGxpc2lvbkFjdGl2ZSIsImNvbGxpc2lvbkVuZCIsInJlbW92ZU9sZCIsIjkiLCJyYXkiLCJyZWN0YW5nbGUiLCJwb2ludCIsImNvbnRhaW5zIiwiMTAiLCJfcmVzdGluZ1RocmVzaCIsIl9yZXN0aW5nVGhyZXNoVGFuZ2VudCIsIl9wb3NpdGlvbkRhbXBlbiIsIl9wb3NpdGlvbldhcm1pbmciLCJfZnJpY3Rpb25Ob3JtYWxNdWx0aXBsaWVyIiwicHJlU29sdmVQb3NpdGlvbiIsInNvbHZlUG9zaXRpb24iLCJfdGVtcCIsIm5vcm1hbCIsInBlbmV0cmF0aW9uIiwiZG90IiwicG9zdFNvbHZlUG9zaXRpb24iLCJwcmVTb2x2ZVZlbG9jaXR5IiwidGFuZ2VudCIsImNyb3NzIiwic29sdmVWZWxvY2l0eSIsImgiLCJiIiwidyIsIlMiLCJDIiwiQSIsIlAiLCJCIiwicGVycCIsIk0iLCJrIiwiSSIsIl8iLCJUIiwiUiIsInNpZ24iLCJWIiwiRSIsImNsYW1wIiwiTCIsIkYiLCJPIiwicSIsIlciLCJEIiwiTiIsIjExIiwiYXhpc0JvZHkiLCJheGlzTnVtYmVyIiwiX292ZXJsYXBBeGVzIiwicmV1c2VkIiwib3ZlcmxhcCIsImF4aXMiLCJfZmluZFN1cHBvcnRzIiwibmVnIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiX3Byb2plY3RUb0F4aXMiLCIxMiIsIl93YXJtaW5nIiwiX3RvcnF1ZURhbXBlbiIsIl9taW5MZW5ndGgiLCJwb2ludEEiLCJwb2ludEIiLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwiYW5ndWxhclN0aWZmbmVzcyIsImFuZ2xlQSIsImFuZ2xlQiIsImFuY2hvcnMiLCJwcmVTb2x2ZUFsbCIsInNvbHZlQWxsIiwic29sdmUiLCJwb3N0U29sdmVBbGwiLCIxMyIsIm1vdXNlIiwiY2FudmFzIiwiZWxlbWVudCIsIm9uIiwiX3RyaWdnZXJFdmVudHMiLCJidXR0b24iLCJzb3VyY2VFdmVudHMiLCJtb3VzZW1vdmUiLCJtb3VzZWRvd24iLCJtb3VzZXVwIiwiY2xlYXJTb3VyY2VFdmVudHMiLCIxNCIsIl9uZXh0SWQiLCJfc2VlZCIsIl9ub3dTdGFydFRpbWUiLCJEYXRlIiwiYXJndW1lbnRzIiwiY29uc3RydWN0b3IiLCJ2YWx1ZXMiLCJzcGxpdCIsInNodWZmbGUiLCJyYW5kb20iLCJpc0VsZW1lbnQiLCJIVE1MRWxlbWVudCIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc0FycmF5IiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJpc1N0cmluZyIsIm5vdyIsIndpbmRvdyIsInBlcmZvcm1hbmNlIiwid2Via2l0Tm93IiwiY29sb3JUb051bWJlciIsInJlcGxhY2UiLCJjaGFyQXQiLCJwYXJzZUludCIsImxvZ0xldmVsIiwibG9nIiwiY29uc29sZSIsImFwcGx5IiwiQXJyYXkiLCJpbmZvIiwibWFwIiwidG9wb2xvZ2ljYWxTb3J0IiwiX3RvcG9sb2dpY2FsU29ydCIsImNoYWluIiwiX2NoYWluZWQiLCJjaGFpblBhdGhCZWZvcmUiLCJjaGFpblBhdGhBZnRlciIsIl9yZXF1aXJlR2xvYmFsIiwidGhpcyIsImdsb2JhbCIsInNlbGYiLCIxNSIsInBvc2l0aW9uSXRlcmF0aW9ucyIsInZlbG9jaXR5SXRlcmF0aW9ucyIsImNvbnN0cmFpbnRJdGVyYXRpb25zIiwiZW5hYmxlU2xlZXBpbmciLCJldmVudHMiLCJ0aW1pbmciLCJ0aW1lc3RhbXAiLCJicm9hZHBoYXNlIiwiZW5naW5lIiwibWV0cmljcyIsImV4dGVuZGVkIiwiX2JvZGllc0FwcGx5R3Jhdml0eSIsIl9ib2RpZXNVcGRhdGUiLCJhZnRlckNvbGxpc2lvbnMiLCJfYm9kaWVzQ2xlYXJGb3JjZXMiLCJtZXJnZSIsIjE2Iiwib2ZmIiwiam9pbiIsInNvdXJjZSIsIjE3IiwidmVyc2lvbiIsInVzZXMiLCJ1c2VkIiwidXNlIiwiYmVmb3JlIiwiYWZ0ZXIiLCIxOCIsIjE5IiwiZG9jdW1lbnQiLCJhYnNvbHV0ZSIsIm1vdXNlZG93blBvc2l0aW9uIiwibW91c2V1cFBvc2l0aW9uIiwib2Zmc2V0Iiwid2hlZWxEZWx0YSIsInBpeGVsUmF0aW8iLCJnZXRBdHRyaWJ1dGUiLCJtb3VzZXdoZWVsIiwiX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvbiIsImNoYW5nZWRUb3VjaGVzIiwicHJldmVudERlZmF1bHQiLCJkZXRhaWwiLCJzZXRFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldE9mZnNldCIsInNldFNjYWxlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZG9jdW1lbnRFbGVtZW50IiwicGFyZW50Tm9kZSIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwicGFnZVgiLCJsZWZ0IiwicGFnZVkiLCJ0b3AiLCJjbGllbnRXaWR0aCIsIndpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaGVpZ2h0IiwiMjAiLCJfcmVnaXN0cnkiLCJyZWdpc3RlciIsImlzUGx1Z2luIiwidmVyc2lvblBhcnNlIiwibnVtYmVyIiwicmVzb2x2ZSIsImRlcGVuZGVuY3lQYXJzZSIsInJhbmdlIiwiaW5zdGFsbCIsImlzVXNlZCIsImlzRm9yIiwiZm9yIiwidmVyc2lvblNhdGlzZmllcyIsImRlcGVuZGVuY2llcyIsIl93YXJuZWQiLCJ0ZXN0IiwiaXNOYU4iLCJzdWJzdHIiLCJpc1JhbmdlIiwib3BlcmF0b3IiLCJwcmVyZWxlYXNlIiwiMjEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZnBzIiwiY29ycmVjdGlvbiIsImRlbHRhU2FtcGxlU2l6ZSIsImNvdW50ZXJUaW1lc3RhbXAiLCJmcmFtZUNvdW50ZXIiLCJkZWx0YUhpc3RvcnkiLCJ0aW1lUHJldiIsInRpbWVTY2FsZVByZXYiLCJmcmFtZVJlcXVlc3RJZCIsImlzRml4ZWQiLCJlbmFibGVkIiwiZGVsdGEiLCJkZWx0YU1pbiIsImRlbHRhTWF4IiwicnVuIiwidGljayIsInN0b3AiLCJzdGFydCIsIjIyIiwiX21vdGlvbldha2VUaHJlc2hvbGQiLCJfbW90aW9uU2xlZXBUaHJlc2hvbGQiLCJfbWluQmlhcyIsInNsZWVwQ291bnRlciIsIjIzIiwiY2hhbWZlciIsInJhZGl1cyIsInF1YWxpdHkiLCJxdWFsaXR5TWluIiwicXVhbGl0eU1heCIsInRyYXBlem9pZCIsImNpcmNsZSIsImNlaWwiLCJwb2x5Z29uIiwiUEkiLCJ0b0ZpeGVkIiwiaXNDb252ZXgiLCJtYWtlQ0NXIiwicmVtb3ZlQ29sbGluZWFyUG9pbnRzIiwicXVpY2tEZWNvbXAiLCJtYWduaXR1ZGVTcXVhcmVkIiwiaXNJbnRlcm5hbCIsIjI0Iiwic3RhY2siLCJtZXNoIiwicHlyYW1pZCIsIm5ld3RvbnNDcmFkbGUiLCJjYXIiLCJzb2Z0Qm9keSIsIjI1Iiwibm9ybWFsaXNlIiwiMjYiLCJzaGlmdCIsIjI3IiwicGF0aFRvVmVydGljZXMiLCJwYXRoU2VnVHlwZUFzTGV0dGVyIiwidG9VcHBlckNhc2UiLCJwYXRoU2VnVHlwZSIsIl9zdmdQYXRoVG9BYnNvbHV0ZSIsImdldFRvdGFsTGVuZ3RoIiwicGF0aFNlZ0xpc3QiLCJudW1iZXJPZkl0ZW1zIiwiZ2V0SXRlbSIsImdldFBhdGhTZWdBdExlbmd0aCIsImdldFBvaW50QXRMZW5ndGgiLCJ4MSIsIngyIiwieTEiLCJ5MiIsInJlcGxhY2VJdGVtIiwiY3JlYXRlU1ZHUGF0aFNlZ01vdmV0b0FicyIsImNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9BYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicyIsImNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyIsImNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMiLCJjcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMiLCJjcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicyIsImNyZWF0ZVNWR1BhdGhTZWdBcmNBYnMiLCJyMSIsInIyIiwibGFyZ2VBcmNGbGFnIiwic3dlZXBGbGFnIiwiMjgiLCJzcXJ0IiwiY3Jvc3MzIiwiYXRhbjIiLCIyOSIsInBhcnNlRmxvYXQiLCJtZWFuIiwiYWNvcyIsInNvcnQiLCJwb3AiLCIzMCIsIkJvZHkiLCJDb21wb3NpdGUiLCJXb3JsZCIsIkNvbnRhY3QiLCJEZXRlY3RvciIsIkdyaWQiLCJQYWlycyIsIlBhaXIiLCJRdWVyeSIsIlJlc29sdmVyIiwiU0FUIiwiQ29uc3RyYWludCIsIk1vdXNlQ29uc3RyYWludCIsIkNvbW1vbiIsIkVuZ2luZSIsIkV2ZW50cyIsIk1vdXNlIiwiUnVubmVyIiwiU2xlZXBpbmciLCJQbHVnaW4iLCJCb2RpZXMiLCJDb21wb3NpdGVzIiwiQXhlcyIsIkJvdW5kcyIsIlN2ZyIsIlZlY3RvciIsIlZlcnRpY2VzIiwiUmVuZGVyIiwiUmVuZGVyUGl4aSIsIjMxIiwib3B0aW9ucyIsImJhY2tncm91bmQiLCJ3aXJlZnJhbWVCYWNrZ3JvdW5kIiwiaGFzQm91bmRzIiwid2lyZWZyYW1lcyIsInNob3dTbGVlcGluZyIsInNob3dEZWJ1ZyIsInNob3dCcm9hZHBoYXNlIiwic2hvd0JvdW5kcyIsInNob3dWZWxvY2l0eSIsInNob3dDb2xsaXNpb25zIiwic2hvd1NlcGFyYXRpb25zIiwic2hvd0F4ZXMiLCJzaG93UG9zaXRpb25zIiwic2hvd0FuZ2xlSW5kaWNhdG9yIiwic2hvd0lkcyIsInNob3dTaGFkb3dzIiwic2hvd1ZlcnRleE51bWJlcnMiLCJzaG93Q29udmV4SHVsbHMiLCJzaG93SW50ZXJuYWxFZGdlcyIsInNob3dNb3VzZVBvc2l0aW9uIiwiY29udGV4dCIsImdldENvbnRleHQiLCJ0ZXh0dXJlcyIsInNldFBpeGVsUmF0aW8iLCJhcHBlbmRDaGlsZCIsInNldEF0dHJpYnV0ZSIsInN0eWxlIiwibG9va0F0Iiwic3RhcnRWaWV3VHJhbnNmb3JtIiwiZW5kVmlld1RyYW5zZm9ybSIsInNldFRyYW5zZm9ybSIsImN1cnJlbnRCYWNrZ3JvdW5kIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiZmlsbFJlY3QiLCJib2R5Q29udmV4SHVsbHMiLCJib2R5V2lyZWZyYW1lcyIsImJvZHlCb3VuZHMiLCJib2R5QXhlcyIsImJvZHlQb3NpdGlvbnMiLCJib2R5VmVsb2NpdHkiLCJib2R5SWRzIiwic2VwYXJhdGlvbnMiLCJ2ZXJ0ZXhOdW1iZXJzIiwibW91c2VQb3NpdGlvbiIsImdyaWQiLCJkZWJ1ZyIsImRlYnVnVGltZXN0YW1wIiwicm91bmQiLCJkZWJ1Z1N0cmluZyIsImZvbnQiLCJmaWxsVGV4dCIsImJlZ2luUGF0aCIsImFyYyIsImNsb3NlUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImZpbGwiLCJib2R5U2hhZG93cyIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJzaGFkb3dCbHVyIiwiZ2xvYmFsQWxwaGEiLCJ0ZXh0dXJlIiwiZHJhd0ltYWdlIiwicmVjdCIsImluc3BlY3RvciIsInNlbGVjdGVkIiwiZGF0YSIsInNldExpbmVEYXNoIiwic2VsZWN0U3RhcnQiLCJzZWxlY3RCb3VuZHMiLCJjcmVhdGVFbGVtZW50Iiwib25jb250ZXh0bWVudSIsIm9uc2VsZWN0c3RhcnQiLCJkZXZpY2VQaXhlbFJhdGlvIiwid2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJvQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJJbWFnZSIsInNyYyIsImJhY2tncm91bmRTaXplIiwiMzIiLCJyZW5kZXJlciIsImNvbnRhaW5lciIsInNwcml0ZUNvbnRhaW5lciIsInBpeGlPcHRpb25zIiwidmlldyIsInRyYW5zcGFyZW50IiwiYW50aWFsaWFzIiwiYmFja2dyb3VuZENvbG9yIiwiUElYSSIsIldlYkdMUmVuZGVyZXIiLCJDb250YWluZXIiLCJzcHJpdGVzIiwicHJpbWl0aXZlcyIsImFkZENoaWxkIiwiY2hpbGRyZW4iLCJyZW1vdmVDaGlsZCIsImFkZENoaWxkQXQiLCJzZXRCYWNrZ3JvdW5kIiwiU3ByaXRlIiwiR3JhcGhpY3MiLCJiZWdpbkZpbGwiLCJsaW5lU3R5bGUiLCJlbmRGaWxsIiwicm90YXRpb24iLCJpbml0aWFsQW5nbGUiLCJhbmNob3IiLCJUZXh0dXJlIiwiZnJvbUltYWdlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiYXBwbGUiLCJwaG9uZSIsImlwb2QiLCJ0YWJsZXQiLCJkZXZpY2UiLCJhbWF6b24iLCJhbmRyb2lkIiwid2luZG93cyIsIm90aGVyIiwiYmxhY2tiZXJyeSIsImJsYWNrYmVycnkxMCIsIm9wZXJhIiwiZmlyZWZveCIsImNocm9tZSIsImFueSIsImlzTW9iaWxlIiwicHVueWNvZGUiLCJ1dGlsIiwiVXJsIiwicHJvdG9jb2wiLCJzbGFzaGVzIiwiYXV0aCIsImhvc3QiLCJwb3J0IiwiaG9zdG5hbWUiLCJoYXNoIiwic2VhcmNoIiwicXVlcnkiLCJwYXRobmFtZSIsInBhdGgiLCJocmVmIiwicGFyc2UiLCJ1cmxQYXJzZSIsInJlbGF0aXZlIiwicmVzb2x2ZU9iamVjdCIsImZvcm1hdCIsIm9iaiIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwidW5zYWZlUHJvdG9jb2wiLCJob3N0bGVzc1Byb3RvY29sIiwic2xhc2hlZFByb3RvY29sIiwicXVlcnlzdHJpbmciLCJ1cmwiLCJwYXJzZVF1ZXJ5U3RyaW5nIiwic2xhc2hlc0Rlbm90ZUhvc3QiLCJpc09iamVjdCIsIlR5cGVFcnJvciIsInF1ZXJ5SW5kZXgiLCJzcGxpdHRlciIsInVTcGxpdCIsInJlc3QiLCJ0cmltIiwic2ltcGxlUGF0aCIsImV4ZWMiLCJwcm90byIsImxvd2VyUHJvdG8iLCJ0b0xvd2VyQ2FzZSIsIm1hdGNoIiwiYXRTaWduIiwiaG9zdEVuZCIsImhlYyIsImxhc3RJbmRleE9mIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VIb3N0IiwiaXB2Nkhvc3RuYW1lIiwiaG9zdHBhcnRzIiwicGFydCIsIm5ld3BhcnQiLCJqIiwiY2hhckNvZGVBdCIsInZhbGlkUGFydHMiLCJub3RIb3N0IiwiYml0IiwidW5zaGlmdCIsInRvQVNDSUkiLCJhZSIsImVzYyIsImVuY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsInFtIiwic3RyaW5naWZ5IiwicmVsIiwicmVzdWx0IiwidGtleXMiLCJ0ayIsInRrZXkiLCJya2V5cyIsInJrIiwicmtleSIsInJlbFBhdGgiLCJpc1NvdXJjZUFicyIsImlzUmVsQWJzIiwibXVzdEVuZEFicyIsInJlbW92ZUFsbERvdHMiLCJzcmNQYXRoIiwicHN5Y2hvdGljIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJhdXRoSW5Ib3N0IiwiaXNOdWxsIiwibGFzdCIsImhhc1RyYWlsaW5nU2xhc2giLCJ1cCIsImlzQWJzb2x1dGUiLCJjb25zdGFudHNfMSIsImNvbnRyaWJ1dGlvbjJEIiwibXVsdGlwbGllciIsInhzYiIsInlzYiIsImR4IiwiU1FVSVNIXzJEIiwiZHkiLCJjb250cmlidXRpb24zRCIsInpzYiIsIlNRVUlTSF8zRCIsImR6IiwiY29udHJpYnV0aW9uNEQiLCJ3c2IiLCJTUVVJU0hfNEQiLCJkdyIsInNodWZmbGVTZWVkIiwic2VlZCIsIm5ld1NlZWQiLCJVaW50MzJBcnJheSIsIm1ha2VOb2lzZTJEIiwiY2xpZW50U2VlZCIsImNvbnRyaWJ1dGlvbnMiLCJwMkQiLCJiYXNlU2V0IiwiYmFzZTJEIiwicHJldmlvdXMiLCJjdXJyZW50IiwibmV4dCIsImxvb2t1cCIsImxvb2t1cFBhaXJzMkQiLCJwZXJtIiwiVWludDhBcnJheSIsInBlcm0yRCIsInN0cmV0Y2hPZmZzZXQiLCJTVFJFVENIXzJEIiwieHMiLCJ5cyIsInNxdWlzaE9mZnNldCIsImR4MCIsImR5MCIsInhpbnMiLCJ5aW5zIiwiaW5TdW0iLCJ1bmRlZmluZWQiLCJhdHRuIiwicHgiLCJweSIsImluZGV4UGFydEEiLCJncmFkaWVudHMyRCIsIk5PUk1fMkQiLCJtYWtlTm9pc2UzRCIsInAzRCIsImJhc2UzRCIsImxvb2t1cFBhaXJzM0QiLCJwZXJtM0QiLCJ6IiwiU1RSRVRDSF8zRCIsInpzIiwiZHowIiwiemlucyIsInB6IiwiaW5kZXhQYXJ0QiIsImdyYWRpZW50czNEIiwiTk9STV8zRCIsIm1ha2VOb2lzZTREIiwicDREIiwiYmFzZTREIiwibG9va3VwUGFpcnM0RCIsInBlcm00RCIsIlNUUkVUQ0hfNEQiLCJ3cyIsImR3MCIsIndpbnMiLCJwdyIsImluZGV4UGFydEMiLCJncmFkaWVudHM0RCIsIk5PUk1fNEQiLCJGdW5jdGlvbiIsImhhcyIsInByZWZpeCIsIkVFIiwiZm4iLCJvbmNlIiwiYWRkTGlzdGVuZXIiLCJlbWl0dGVyIiwiZXZlbnQiLCJsaXN0ZW5lciIsImV2dCIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJjbGVhckV2ZW50IiwiRXZlbnRFbWl0dGVyIiwiX19wcm90b19fIiwiZXZlbnROYW1lcyIsIm5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibGlzdGVuZXJzIiwiaGFuZGxlcnMiLCJlZSIsImxpc3RlbmVyQ291bnQiLCJlbWl0IiwiYTEiLCJhMiIsImEzIiwiYTQiLCJhNSIsImFyZ3MiLCJsZW4iLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZWZpeGVkIiwiZWFyY3V0IiwiaG9sZUluZGljZXMiLCJkaW0iLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwiaW52U2l6ZSIsImhhc0hvbGVzIiwib3V0ZXJMZW4iLCJvdXRlck5vZGUiLCJsaW5rZWRMaXN0IiwidHJpYW5nbGVzIiwicHJldiIsImVuZCIsInF1ZXVlIiwic3RlaW5lciIsImdldExlZnRtb3N0IiwiY29tcGFyZVgiLCJlbGltaW5hdGVIb2xlIiwiZmlsdGVyUG9pbnRzIiwiZWxpbWluYXRlSG9sZXMiLCJlYXJjdXRMaW5rZWQiLCJjbG9ja3dpc2UiLCJzaWduZWRBcmVhIiwiaW5zZXJ0Tm9kZSIsImVxdWFscyIsInJlbW92ZU5vZGUiLCJhZ2FpbiIsImVhciIsInBhc3MiLCJ6T3JkZXIiLCJwcmV2WiIsIm5leHRaIiwidGFpbCIsIm51bU1lcmdlcyIsInBTaXplIiwicVNpemUiLCJpblNpemUiLCJzb3J0TGlua2VkIiwiaW5kZXhDdXJ2ZSIsImlzRWFySGFzaGVkIiwiaXNFYXIiLCJjdXJlTG9jYWxJbnRlcnNlY3Rpb25zIiwic3BsaXRFYXJjdXQiLCJwb2ludEluVHJpYW5nbGUiLCJtaW5UWCIsIm1pblRZIiwibWF4VFgiLCJtYXhUWSIsIm1pbloiLCJtYXhaIiwiaW50ZXJzZWN0cyIsImxvY2FsbHlJbnNpZGUiLCJpc1ZhbGlkRGlhZ29uYWwiLCJzcGxpdFBvbHlnb24iLCJob2xlIiwiaHgiLCJoeSIsInF4IiwiSW5maW5pdHkiLCJ0YW4iLCJteCIsIm15IiwidGFuTWluIiwic2VjdG9yQ29udGFpbnNTZWN0b3IiLCJmaW5kSG9sZUJyaWRnZSIsImxlZnRtb3N0IiwiYXgiLCJheSIsImJ4IiwiYnkiLCJjeCIsImN5IiwiaW50ZXJzZWN0c1BvbHlnb24iLCJpbnNpZGUiLCJtaWRkbGVJbnNpZGUiLCJwMSIsInAyIiwicTEiLCJxMiIsIm8xIiwibzIiLCJvMyIsIm80Iiwib25TZWdtZW50IiwibnVtIiwiTm9kZSIsImIyIiwiYW4iLCJicCIsInN1bSIsImRlZmF1bHQiLCJkZXZpYXRpb24iLCJwb2x5Z29uQXJlYSIsInRyaWFuZ2xlc0FyZWEiLCJmbGF0dGVuIiwiaG9sZXMiLCJkaW1lbnNpb25zIiwiaG9sZUluZGV4IiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJyaWdodCIsImJvdHRvbSIsImZvckVhY2giLCJQb2ludGVyRXZlbnQiLCJNU1BvaW50ZXJFdmVudCIsIl9oYW5kbGVyc18iLCJ0YXJnZXQiLCJjb25maWciLCJkZWZhdWx0cyIsImJpbmRFdnQiLCJfZG9tSGFuZGxlcnNfIiwidW5iaW5kRXZ0IiwiaWRlbnRpZmllciIsImZyb250UG9zaXRpb24iLCJjb2xsZWN0aW9uIiwic2l6ZSIsInRocmVzaG9sZCIsImNvbG9yIiwiZmFkZVRpbWUiLCJkYXRhT25seSIsInJlc3RKb3lzdGljayIsInJlc3RPcGFjaXR5Iiwiem9uZSIsImxvY2tYIiwibG9ja1kiLCJidWlsZEVsIiwic3R5bGl6ZSIsImluc3RhbmNlIiwiZWwiLCJ1aSIsInNob3ciLCJoaWRlIiwiYWRkVG9Eb20iLCJyZW1vdmVGcm9tRG9tIiwiZGVzdHJveSIsInJlc2V0RGlyZWN0aW9uIiwiY29tcHV0ZURpcmVjdGlvbiIsImJhY2siLCJmcm9udCIsImNsYXNzTmFtZSIsImRpc3BsYXkiLCJ6SW5kZXgiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwiYXBwbHlTdHlsZXMiLCJyZW1vdmVUaW1lb3V0Iiwic2hvd1RpbWVvdXQiLCJyZXN0VGltZW91dCIsInJlc3RDYWxsYmFjayIsInJlc3RQb3NpdGlvbiIsImRpcmVjdGlvbiIsInJhZGlhbiIsIm5pcHBsZXMiLCJpZGxlcyIsImFjdGl2ZXMiLCJpZHMiLCJwcmVzc3VyZUludGVydmFscyIsIm1hbmFnZXIiLCJtdWx0aXRvdWNoIiwibWF4TnVtYmVyT2ZOaXBwbGVzIiwiY2F0Y2hEaXN0YW5jZSIsImR5bmFtaWNQYWdlIiwidXBkYXRlQm94IiwicHJlcGFyZU5pcHBsZXMiLCJiaW5kaW5ncyIsImJlZ2luIiwicHJvY2Vzc09uTW92ZSIsInByb2Nlc3NPbkVuZCIsInRvdWNoQWN0aW9uIiwibXNUb3VjaEFjdGlvbiIsImNyZWF0ZU5pcHBsZSIsImdldElkZW50aWZpZXIiLCJib3giLCJiaW5kTmlwcGxlIiwib25EZXN0cm95ZWQiLCJwcmVzc3VyZUZuIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwicHJlc3N1cmUiLCJ3ZWJraXRGb3JjZSIsIm9uc3RhcnQiLCJwcm9jZXNzT25TdGFydCIsInRvdWNoZXMiLCJmaW5kSW5kZXgiLCJiaW5kRG9jdW1lbnQiLCJnZXRPckNyZWF0ZSIsInJlbW92ZUlkZW50aWZpZXIiLCJidXR0b25zIiwiZXJyb3IiLCJkaXN0YW5jZSIsImRlZ3JlZSIsInZlY3RvciIsInJhdyIsInVuYmluZERvY3VtZW50IiwiY29sbGVjdGlvbnMiLCJwcmVwYXJlQ29sbGVjdGlvbnMiLCJldmVyeSIsImNyZWF0ZUNvbGxlY3Rpb24iLCJiaW5kQ29sbGVjdGlvbiIsImJpbmRlZCIsInBvaW50ZXJJZCIsImxhdGVzdCIsIm9ubW92ZSIsIm9uQW55Iiwib25lbmQiLCJvbmNhbmNlbCIsIl9mb3VuZF8iLCJmYWN0b3J5Iiwicm9vdCIsImZyZWVHbG9iYWwiLCJtYXhJbnQiLCJyZWdleFB1bnljb2RlIiwicmVnZXhOb25BU0NJSSIsInJlZ2V4U2VwYXJhdG9ycyIsImVycm9ycyIsInN0cmluZ0Zyb21DaGFyQ29kZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIlJhbmdlRXJyb3IiLCJhcnJheSIsIm1hcERvbWFpbiIsInN0cmluZyIsInVjczJkZWNvZGUiLCJleHRyYSIsIm91dHB1dCIsImNvdW50ZXIiLCJ1Y3MyZW5jb2RlIiwiZGlnaXRUb0Jhc2ljIiwiZGlnaXQiLCJmbGFnIiwiYWRhcHQiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwiYmFzZSIsImRlY29kZSIsImlucHV0Iiwib3V0IiwiYmFzaWMiLCJvbGRpIiwiYmFzZU1pbnVzVCIsImNvZGVQb2ludCIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImVuY29kZSIsImhhbmRsZWRDUENvdW50IiwiYmFzaWNMZW5ndGgiLCJjdXJyZW50VmFsdWUiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJhcmciLCJwcm9wIiwicXMiLCJzZXAiLCJlcSIsInJlZ2V4cCIsIm1heEtleXMiLCJrc3RyIiwidnN0ciIsImlkeCIsInN0cmluZ2lmeVByaW1pdGl2ZSIsImlzRmluaXRlIiwib2JqZWN0S2V5cyIsImtzIiwicmVzIiwiRmlsZVBhdGhzIiwiZmlsZVBhdGhzIiwibG9hZGVyIiwicmVzb3VyY2VzIiwiaXRlbXMiLCJfbmFtZSIsIl9hbGlhc0NvdW50IiwiZW1wdHkiLCJjb25maWd1cmFibGUiLCJhMCIsImE2IiwiYTciLCJyZWYiLCJlbnN1cmVOb25BbGlhc2VkSXRlbXMiLCJpdGVtIiwicmVtb3ZlQWxsIiwiZGVmaW5lUHJvcGVydGllcyIsImRpc3BhdGNoIiwic2V0dGluZ3MiLCJNSVBNQVBfVEVYVFVSRVMiLCJBTklTT1RST1BJQ19MRVZFTCIsIlJFU09MVVRJT04iLCJGSUxURVJfUkVTT0xVVElPTiIsIlNQUklURV9NQVhfVEVYVFVSRVMiLCJhbGxvd01heCIsIm1hdGNoJDEiLCJtYXhSZWNvbW1lbmRlZFRleHR1cmVzIiwiU1BSSVRFX0JBVENIX1NJWkUiLCJSRU5ERVJfT1BUSU9OUyIsImZvcmNlRlhBQSIsImF1dG9EZW5zaXR5IiwiY2xlYXJCZWZvcmVSZW5kZXIiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJsZWdhY3kiLCJHQ19NT0RFIiwiR0NfTUFYX0lETEUiLCJHQ19NQVhfQ0hFQ0tfQ09VTlQiLCJXUkFQX01PREUiLCJTQ0FMRV9NT0RFIiwiUFJFQ0lTSU9OX1ZFUlRFWCIsIlBSRUNJU0lPTl9GUkFHTUVOVCIsIkNBTl9VUExPQURfU0FNRV9CVUZGRVIiLCJDUkVBVEVfSU1BR0VfQklUTUFQIiwiUk9VTkRfUElYRUxTIiwiRU5WIiwiUkVOREVSRVJfVFlQRSIsIkJMRU5EX01PREVTIiwiRFJBV19NT0RFUyIsIkZPUk1BVFMiLCJUQVJHRVRTIiwiVFlQRVMiLCJTQ0FMRV9NT0RFUyIsIldSQVBfTU9ERVMiLCJNSVBNQVBfTU9ERVMiLCJHQ19NT0RFUyIsIlBSRUNJU0lPTiIsIlJFVElOQV9QUkVGSVgiLCJGQUlMX0lGX01BSk9SX1BFUkZPUk1BTkNFX0NBVkVBVCIsInNhaWRIZWxsbyIsImhleDJyZ2IiLCJoZXgiLCJyZ2IyaGV4IiwicmdiIiwicHJlbXVsdGlwbHlCbGVuZE1vZGUiLCJwbSIsIm5wbSIsIm1hcFByZW11bHRpcGxpZWRCbGVuZE1vZGVzIiwicmVtb3ZlSXRlbXMiLCJhcnIiLCJzdGFydElkeCIsInJlbW92ZUNvdW50IiwibmV4dFVpZCIsInVpZCIsIm5leHRQb3cyIiwiaXNQb3cyIiwibG9nMiIsIlByb2dyYW1DYWNoZSIsIlRleHR1cmVDYWNoZSIsIkJhc2VUZXh0dXJlQ2FjaGUiLCJyZXNvbHV0aW9uIiwicmVzaXplIiwiY2xlYXJSZWN0IiwidmFsIiwidGVtcEFuY2hvciIsImdldFJlc29sdXRpb25PZlVybCIsImRlZmF1bHRWYWx1ZSIsIndhcm5pbmdzIiwiVEFSR0VUX0ZQTVMiLCJVUERBVEVfUFJJT1JJVFkiLCJUaWNrZXJMaXN0ZW5lciIsInByaW9yaXR5IiwiX2Rlc3Ryb3llZCIsImRlbHRhVGltZSIsInJlZGlyZWN0IiwiY29ubmVjdCIsImhhcmQiLCJ0aGlzJDEiLCJfaGVhZCIsIl9yZXF1ZXN0SWQiLCJfbWF4RWxhcHNlZE1TIiwiX21pbkVsYXBzZWRNUyIsImF1dG9TdGFydCIsImRlbHRhTVMiLCJlbGFwc2VkTVMiLCJsYXN0VGltZSIsInN0YXJ0ZWQiLCJfcHJvdGVjdGVkIiwiX2xhc3RGcmFtZSIsIl90aWNrIiwidGltZSIsIkZQUyIsIm1pbkZQUyIsIm1heEZQUyIsInNoYXJlZCIsInN5c3RlbSIsIl9yZXF1ZXN0SWZOZWVkZWQiLCJfY2FuY2VsSWZOZWVkZWQiLCJfc3RhcnRJZlBvc3NpYmxlIiwiX2FkZExpc3RlbmVyIiwiYWRkT25jZSIsImN1cnJlbnRUaW1lIiwiaGVhZCIsIm1pbkZQTVMiLCJfc2hhcmVkIiwiX3N5c3RlbSIsIlRpY2tlclBsdWdpbiIsImluaXQiLCJhc3NpZ24iLCJzaGFyZWRUaWNrZXIiLCJ0aWNrZXIiLCJfdGlja2VyIiwib2xkVGlja2VyIiwiUG9pbnQiLCJjb3B5RnJvbSIsImNvcHlUbyIsIk9ic2VydmFibGVQb2ludCIsImNiIiwic2NvcGUiLCJfeCIsIl95IiwiX2NiIiwiX3Njb3BlIiwiUElfMiIsIlJBRF9UT19ERUciLCJERUdfVE9fUkFEIiwiU0hBUEVTIiwiTWF0cml4IiwidHgiLCJ0eSIsIklERU5USVRZIiwiVEVNUF9NQVRSSVgiLCJmcm9tQXJyYXkiLCJ0b0FycmF5IiwidHJhbnNwb3NlIiwiRmxvYXQzMkFycmF5IiwicG9zIiwibmV3UG9zIiwiYXBwbHlJbnZlcnNlIiwiYzEiLCJ0eDEiLCJhcHBlbmQiLCJtYXRyaXgiLCJiMSIsImQxIiwicGl2b3RYIiwicGl2b3RZIiwic2NhbGVYIiwic2NhbGVZIiwic2tld1giLCJza2V3WSIsInByZXBlbmQiLCJkZWNvbXBvc2UiLCJ0cmFuc2Zvcm0iLCJza2V3IiwiaW52ZXJ0IiwiaWRlbnRpdHkiLCJ1eCIsInV5IiwidngiLCJ2eSIsInJvdGF0aW9uQ2F5bGV5Iiwicm90YXRpb25NYXRyaWNlcyIsInNpZ251bSIsInJvdyIsIl91eCIsIl91eSIsIl92eCIsIl92eSIsImkkMSIsIm1hdCIsIkdyb3VwRDgiLCJTRSIsIlNXIiwiTlciLCJORSIsIk1JUlJPUl9WRVJUSUNBTCIsIk1BSU5fRElBR09OQUwiLCJNSVJST1JfSE9SSVpPTlRBTCIsIlJFVkVSU0VfRElBR09OQUwiLCJ1WCIsImluZCIsInVZIiwidlgiLCJ2WSIsImludiIsInJvdGF0aW9uU2Vjb25kIiwicm90YXRpb25GaXJzdCIsInJvdGF0ZTE4MCIsImlzVmVydGljYWwiLCJieURpcmVjdGlvbiIsIm1hdHJpeEFwcGVuZFJvdGF0aW9uSW52IiwiVHJhbnNmb3JtIiwid29ybGRUcmFuc2Zvcm0iLCJsb2NhbFRyYW5zZm9ybSIsIm9uQ2hhbmdlIiwicGl2b3QiLCJ1cGRhdGVTa2V3IiwiX3JvdGF0aW9uIiwiX2N4IiwiX3N4IiwiX2N5IiwiX3N5IiwiX2xvY2FsSUQiLCJfY3VycmVudExvY2FsSUQiLCJfd29ybGRJRCIsIl9wYXJlbnRJRCIsInByb3RvdHlwZUFjY2Vzc29ycyQxIiwidXBkYXRlTG9jYWxUcmFuc2Zvcm0iLCJsdCIsInVwZGF0ZVRyYW5zZm9ybSIsInBhcmVudFRyYW5zZm9ybSIsInB0Iiwid3QiLCJzZXRGcm9tTWF0cml4IiwiUmVjdGFuZ2xlIiwicHJvdG90eXBlQWNjZXNzb3JzJDIiLCJzdGF0aWNBY2Nlc3NvcnMkMSIsIkVNUFRZIiwicGFkIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsImZpdCIsImVwcyIsImVubGFyZ2UiLCJDaXJjbGUiLCJnZXRCb3VuZHMiLCJFbGxpcHNlIiwiaGFsZldpZHRoIiwiaGFsZkhlaWdodCIsIm5vcm14Iiwibm9ybXkiLCJQb2x5Z29uIiwicG9pbnRzIiwiaWwiLCJjbG9zZVN0cm9rZSIsInhpIiwieWkiLCJ4aiIsInlqIiwiUm91bmRlZFJlY3RhbmdsZSIsInJhZGl1czIiLCJTT1JUQUJMRV9DSElMRFJFTiIsImlzRW1wdHkiLCJ1cGRhdGVJRCIsImdldFJlY3RhbmdsZSIsImFkZFBvaW50IiwiYWRkUXVhZCIsImFkZEZyYW1lIiwieDAiLCJ5MCIsImFkZFZlcnRleERhdGEiLCJ2ZXJ0ZXhEYXRhIiwiYmVnaW5PZmZzZXQiLCJlbmRPZmZzZXQiLCJhZGRWZXJ0aWNlcyIsInJhd1giLCJyYXdZIiwiYWRkQm91bmRzIiwiYWRkQm91bmRzTWFzayIsIl9taW5YIiwiX21pblkiLCJfbWF4WCIsIl9tYXhZIiwiYWRkQm91bmRzQXJlYSIsIkRpc3BsYXlPYmplY3QiLCJ0ZW1wRGlzcGxheU9iamVjdFBhcmVudCIsImFscGhhIiwicmVuZGVyYWJsZSIsIndvcmxkQWxwaGEiLCJfbGFzdFNvcnRlZEluZGV4IiwiX3pJbmRleCIsImZpbHRlckFyZWEiLCJmaWx0ZXJzIiwiX2VuYWJsZWRGaWx0ZXJzIiwiX2JvdW5kcyIsIl9ib3VuZHNJRCIsIl9sYXN0Qm91bmRzSUQiLCJfYm91bmRzUmVjdCIsIl9sb2NhbEJvdW5kc1JlY3QiLCJfbWFzayIsImlzU3ByaXRlIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50Iiwid29ybGRWaXNpYmxlIiwibWl4aW4iLCJwcm9wZXJ0eU5hbWUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVjdXJzaXZlUG9zdFVwZGF0ZVRyYW5zZm9ybSIsInNraXBVcGRhdGUiLCJjYWxjdWxhdGVCb3VuZHMiLCJnZXRMb2NhbEJvdW5kcyIsInRyYW5zZm9ybVJlZiIsInBhcmVudFJlZiIsInRvR2xvYmFsIiwiZGlzcGxheU9iamVjdFVwZGF0ZVRyYW5zZm9ybSIsInRvTG9jYWwiLCJmcm9tIiwic2V0UGFyZW50IiwiX2N1cnJlbnRCb3VuZHMiLCJpbnRlcmFjdGl2ZSIsImludGVyYWN0aXZlQ2hpbGRyZW4iLCJzb3J0RGlydHkiLCJpc01hc2siLCJzb3J0Q2hpbGRyZW4iLCJzb3J0YWJsZUNoaWxkcmVuIiwib25DaGlsZHJlbkNoYW5nZSIsImNoaWxkIiwiYXJndW1lbnRzJDEiLCJhcmd1bWVudHNMZW5ndGgiLCJzd2FwQ2hpbGRyZW4iLCJjaGlsZDIiLCJpbmRleDEiLCJnZXRDaGlsZEluZGV4IiwiaW5kZXgyIiwic2V0Q2hpbGRJbmRleCIsImN1cnJlbnRJbmRleCIsImdldENoaWxkQXQiLCJyZW1vdmVDaGlsZEF0IiwicmVtb3ZlQ2hpbGRyZW4iLCJiZWdpbkluZGV4IiwiZW5kSW5kZXgiLCJyZW1vdmVkIiwic29ydFJlcXVpcmVkIiwiX2NhbGN1bGF0ZUJvdW5kcyIsInJlbmRlckFkdmFuY2VkIiwiX3JlbmRlciIsImJhdGNoIiwiZmx1c2giLCJkZXN0cm95Q2hpbGRyZW4iLCJvbGRDaGlsZHJlbiIsIl93aWR0aCIsIl9oZWlnaHQiLCJjb250YWluZXJVcGRhdGVUcmFuc2Zvcm0iLCJkZXN0cm95ZWQiLCJpbnRlcm5hbCIsIm9uUmVzaXplIiwib25VcGRhdGUiLCJvbkVycm9yIiwidmFsaWQiLCJiYXNlVGV4dHVyZSIsInVuYmluZCIsImxvYWQiLCJQcm9taXNlIiwidXBsb2FkIiwiZ2xUZXh0dXJlIiwiZGlzcG9zZSIsIlJlc291cmNlIiwiQmFzZUltYWdlUmVzb3VyY2UiLCJuYXR1cmFsV2lkdGgiLCJ2aWRlb1dpZHRoIiwibmF0dXJhbEhlaWdodCIsInZpZGVvSGVpZ2h0Iiwibm9TdWJJbWFnZSIsImNyb3NzT3JpZ2luIiwiY3Jvc3NvcmlnaW4iLCJsb2MiLCJsb2NhdGlvbiIsInNhbWVQb3J0IiwiZGV0ZXJtaW5lQ3Jvc3NPcmlnaW4iLCJnbCIsInJlYWxXaWR0aCIsInJlYWxIZWlnaHQiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCIsInByZW11bHRpcGx5QWxwaGEiLCJURVhUVVJFXzJEIiwidGV4SW1hZ2UyRCIsInRleFN1YkltYWdlMkQiLCJJbWFnZVJlc291cmNlIiwiSFRNTEltYWdlRWxlbWVudCIsImltYWdlRWxlbWVudCIsImNvbXBsZXRlIiwiX3Byb2Nlc3MiLCJwcmVzZXJ2ZUJpdG1hcCIsImNyZWF0ZUJpdG1hcCIsImNyZWF0ZUltYWdlQml0bWFwIiwiYml0bWFwIiwiX2xvYWQiLCJhdXRvTG9hZCIsImNvbXBsZXRlZCIsIm9ubG9hZCIsIm9uZXJyb3IiLCJwcm9jZXNzIiwidGhlbiIsInJlamVjdCIsIl9nbFRleHR1cmVzIiwib3RoZXJUZXgiLCJkaXJ0eUlkIiwiY2xvc2UiLCJJTlNUQUxMRUQiLCJhdXRvRGV0ZWN0UmVzb3VyY2UiLCJleHRlbnNpb24iLCJSZXNvdXJjZVBsdWdpbiIsIkJ1ZmZlclJlc291cmNlIiwiaW50ZXJuYWxGb3JtYXQiLCJkZWZhdWx0QnVmZmVyT3B0aW9ucyIsInNjYWxlTW9kZSIsIkJhc2VUZXh0dXJlIiwicmVzb3VyY2UiLCJtaXBtYXAiLCJhbmlzb3Ryb3BpY0xldmVsIiwid3JhcE1vZGUiLCJyZXNvdXJjZU9wdGlvbnMiLCJ0b3VjaGVkIiwiaXNQb3dlck9mVHdvIiwiX3JlZnJlc2hQT1QiLCJkaXJ0eVN0eWxlSWQiLCJjYWNoZUlkIiwidGV4dHVyZUNhY2hlSWRzIiwiX2JhdGNoRW5hYmxlZCIsInNldFJlc291cmNlIiwic2V0U3R5bGUiLCJkaXJ0eSIsInNldFNpemUiLCJzZXRSZWFsU2l6ZSIsInNldFJlc29sdXRpb24iLCJvbGRSZXNvbHV0aW9uIiwicmVtb3ZlRnJvbUNhY2hlIiwiX3BpeGlJZCIsImFkZFRvQ2FjaGUiLCJmcm9tQnVmZmVyIiwiYnVmZmVyIiwiYmFzZVRleHR1cmVGcm9tQ2FjaGUiLCJfZ2xvYmFsQmF0Y2giLCJBcnJheVJlc291cmNlIiwidXJscyIsIml0ZW1EaXJ0eUlkcyIsInBhcnRUZXh0dXJlIiwiYWRkUmVzb3VyY2VBdCIsInByb21pc2VzIiwiYWxsIiwidGV4SW1hZ2UzRCIsIlRFWFRVUkVfMkRfQVJSQVkiLCJ0ZXhTdWJJbWFnZTNEIiwiQ2FudmFzUmVzb3VyY2UiLCJPZmZzY3JlZW5DYW52YXMiLCJIVE1MQ2FudmFzRWxlbWVudCIsIkN1YmVSZXNvdXJjZSIsIlNJREVTIiwic2lkZSIsIlNWR1Jlc291cmNlIiwic3ZnIiwiX292ZXJyaWRlV2lkdGgiLCJfb3ZlcnJpZGVIZWlnaHQiLCJfcmVzb2x2ZSIsIl9jcm9zc29yaWdpbiIsImJ0b2EiLCJ1bmVzY2FwZSIsIl9sb2FkU3ZnIiwidGVtcEltYWdlIiwic3ZnV2lkdGgiLCJzdmdIZWlnaHQiLCJnZXRTaXplIiwic3ZnU3RyaW5nIiwic2l6ZU1hdGNoIiwiU1ZHX1NJWkUiLCJWaWRlb1Jlc291cmNlIiwiSFRNTFZpZGVvRWxlbWVudCIsInZpZGVvRWxlbWVudCIsInNvdXJjZUVsZW1lbnQiLCJtaW1lIiwiYmFzZVNyYyIsImV4dCIsIl9hdXRvVXBkYXRlIiwiX2lzQXV0b1VwZGF0aW5nIiwiX3VwZGF0ZUZQUyIsInVwZGF0ZUZQUyIsIl9tc1RvTmV4dFVwZGF0ZSIsImF1dG9QbGF5IiwiX29uQ2FuUGxheSIsIl9vbkVycm9yIiwiYXV0b1VwZGF0ZSIsInBsYXliYWNrUmF0ZSIsInJlYWR5U3RhdGUiLCJIQVZFX0VOT1VHSF9EQVRBIiwiSEFWRV9GVVRVUkVfREFUQSIsIl9vblBsYXlTdGFydCIsIl9vblBsYXlTdG9wIiwiX2lzU291cmNlUmVhZHkiLCJfaXNTb3VyY2VQbGF5aW5nIiwicGF1c2VkIiwiZW5kZWQiLCJwbGF5IiwicGF1c2UiLCJJbWFnZUJpdG1hcFJlc291cmNlIiwiSW1hZ2VCaXRtYXAiLCJEZXB0aFJlc291cmNlIiwiREVQVEhfQ09NUE9ORU5UMTYiLCJzdGVuY2lsIiwiZGlydHlGb3JtYXQiLCJkaXJ0eVNpemUiLCJkZXB0aFRleHR1cmUiLCJjb2xvclRleHR1cmVzIiwiZ2xGcmFtZWJ1ZmZlcnMiLCJkaXNwb3NlUnVubmVyIiwiY29sb3JUZXh0dXJlIiwiYWRkQ29sb3JUZXh0dXJlIiwiYWRkRGVwdGhUZXh0dXJlIiwiZW5hYmxlRGVwdGgiLCJlbmFibGVTdGVuY2lsIiwicmVzb2x1dGlvbiQxIiwiQmFzZVJlbmRlclRleHR1cmUiLCJ3aWR0aCQxIiwiaGVpZ2h0JDEiLCJfY2FudmFzUmVuZGVyVGFyZ2V0IiwiY2xlYXJDb2xvciIsImZyYW1lYnVmZmVyIiwic3RlbmNpbE1hc2tTdGFjayIsImZpbHRlclN0YWNrIiwiVGV4dHVyZVV2cyIsIngzIiwieTMiLCJ1dnNGbG9hdDMyIiwiZnJhbWUiLCJiYXNlRnJhbWUiLCJ0dyIsInRoIiwidzIiLCJoMiIsImNYIiwiY1kiLCJERUZBVUxUX1VWUyIsIm9yaWciLCJub0ZyYW1lIiwiX2ZyYW1lIiwicmVxdWlyZXNVcGRhdGUiLCJfdXZzIiwidXZNYXRyaXgiLCJfcm90YXRlIiwiZGVmYXVsdEFuY2hvciIsIl91cGRhdGVJRCIsIm9uQmFzZVRleHR1cmVVcGRhdGVkIiwidXBkYXRlVXZzIiwiZGVzdHJveUJhc2UiLCJmcm9tTG9hZGVyIiwiaW1hZ2VVcmwiLCJ0ZXh0dXJlRnJvbUNhY2hlIiwieE5vdEZpdCIsInlOb3RGaXQiLCJyZWxhdGlvbnNoaXAiLCJlcnJvclgiLCJlcnJvclkiLCJyZW1vdmVBbGxIYW5kbGVycyIsInRleCIsIldISVRFIiwiY3JlYXRlV2hpdGVUZXh0dXJlIiwiUmVuZGVyVGV4dHVyZSIsImJhc2VSZW5kZXJUZXh0dXJlIiwiX2xlZ2FjeVJlbmRlcmVyIiwibGVnYWN5UmVuZGVyZXIiLCJmaWx0ZXJGcmFtZSIsImZpbHRlclBvb2xLZXkiLCJyZXNpemVCYXNlVGV4dHVyZSIsIlJlbmRlclRleHR1cmVQb29sIiwidGV4dHVyZU9wdGlvbnMiLCJ0ZXh0dXJlUG9vbCIsImVuYWJsZUZ1bGxTY3JlZW4iLCJfcGl4ZWxzV2lkdGgiLCJfcGl4ZWxzSGVpZ2h0IiwiY3JlYXRlVGV4dHVyZSIsImdldE9wdGltYWxUZXh0dXJlIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJTQ1JFRU5fS0VZIiwicmVuZGVyVGV4dHVyZSIsImdldEZpbHRlclRleHR1cmUiLCJmaWx0ZXJUZXh0dXJlIiwicmV0dXJuVGV4dHVyZSIsInJldHVybkZpbHRlclRleHR1cmUiLCJkZXN0cm95VGV4dHVyZXMiLCJzZXRTY3JlZW5TaXplIiwic2NyZWVuS2V5IiwiQXR0cmlidXRlIiwibm9ybWFsaXplZCIsInN0cmlkZSIsIlVJRCIsIl9zdGF0aWMiLCJfZ2xCdWZmZXJzIiwic3RhdGljIiwiZ2V0QnVmZmVyVHlwZSIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiVWludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiYnl0ZVNpemVNYXAiLCI1MTI2IiwiNTEyMyIsIjUxMjEiLCJVSUQkMSIsIm1hcCQxIiwiYnVmZmVycyIsImF0dHJpYnV0ZXMiLCJpbmRleEJ1ZmZlciIsImdsVmVydGV4QXJyYXlPYmplY3RzIiwiaW5zdGFuY2VkIiwiaW5zdGFuY2VDb3VudCIsInJlZkNvdW50IiwiYWRkQXR0cmlidXRlIiwiYnVmZmVySW5kZXgiLCJnZXRCdWZmZXIiLCJhZGRJbmRleCIsImdldEluZGV4IiwiaW50ZXJsZWF2ZSIsImFycmF5cyIsInNpemVzIiwiaW50ZXJsZWF2ZWRCdWZmZXIiLCJhdHRyaWJ1dGUiLCJvdXRTaXplIiwidmlld3MiLCJBcnJheUJ1ZmZlciIsImxpdHRsZU9mZnNldCIsImludGVybGVhdmVUeXBlZEFycmF5cyIsImdlb21ldHJ5IiwiYXR0cmliIiwiZ2VvbWV0cmllcyIsImdlb21ldHJ5T3V0Iiwib2Zmc2V0cyIsImkkMiIsImokMSIsIm9mZnNldDIiLCJidWZmZXJJbmRleFRvQ291bnQiLCJpJDMiLCJpJDQiLCJpJDUiLCJpbmRleEJ1ZmZlckRhdGEiLCJqJDIiLCJRdWFkIiwiR2VvbWV0cnkiLCJRdWFkVXYiLCJ1dnMiLCJ2ZXJ0ZXhCdWZmZXIiLCJ1dkJ1ZmZlciIsInRhcmdldFRleHR1cmVGcmFtZSIsImRlc3RpbmF0aW9uRnJhbWUiLCJpbnZhbGlkYXRlIiwiVUlEJDIiLCJVbmlmb3JtR3JvdXAiLCJ1bmlmb3JtcyIsInN5bmNVbmlmb3JtcyIsInNvdXJjZUZyYW1lIiwiU3lzdGVtIiwiRmlsdGVyU3lzdGVtIiwiZGVmYXVsdEZpbHRlclN0YWNrIiwic3RhdGVQb29sIiwicXVhZCIsInF1YWRVdiIsInRlbXBSZWN0IiwiYWN0aXZlU3RhdGUiLCJnbG9iYWxVbmlmb3JtcyIsIm91dHB1dEZyYW1lIiwiaW5wdXRTaXplIiwiaW5wdXRQaXhlbCIsImlucHV0Q2xhbXAiLCJmaWx0ZXJDbGFtcCIsInN0YXRlIiwicGFkZGluZyIsImF1dG9GaXQiLCJnZXRPcHRpbWFsRmlsdGVyVGV4dHVyZSIsImxhc3RTdGF0ZSIsImZsaXAiLCJmbG9wIiwiYXBwbHlGaWx0ZXIiLCJ1U2FtcGxlciIsImZpbHRlckdsb2JhbHMiLCJzaGFkZXIiLCJkcmF3IiwiY2FsY3VsYXRlU3ByaXRlTWF0cml4Iiwib3V0cHV0TWF0cml4IiwiX3RleHR1cmUiLCJtYXBwZWRNYXRyaXgiLCJzd2FwIiwiZW1wdHlQb29sIiwiQmF0Y2hTeXN0ZW0iLCJlbXB0eVJlbmRlcmVyIiwiY3VycmVudFJlbmRlcmVyIiwic2V0T2JqZWN0UmVuZGVyZXIiLCJvYmplY3RSZW5kZXJlciIsInJlc2V0IiwiUFJFRkVSX0VOViIsIkNPTlRFWFRfVUlEIiwiQ29udGV4dFN5c3RlbSIsIndlYkdMVmVyc2lvbiIsImV4dGVuc2lvbnMiLCJoYW5kbGVDb250ZXh0TG9zdCIsImhhbmRsZUNvbnRleHRSZXN0b3JlZCIsImlzTG9zdCIsImlzQ29udGV4dExvc3QiLCJjb250ZXh0Q2hhbmdlIiwiZ2V0RXh0ZW5zaW9uIiwicmVzdG9yZUNvbnRleHQiLCJpbml0RnJvbUNvbnRleHQiLCJ2YWxpZGF0ZUNvbnRleHQiLCJydW5uZXJzIiwiaW5pdEZyb21PcHRpb25zIiwiY3JlYXRlQ29udGV4dCIsImdldEV4dGVuc2lvbnMiLCJkcmF3QnVmZmVycyIsImxvc2VDb250ZXh0IiwidmVydGV4QXJyYXlPYmplY3QiLCJhbmlzb3Ryb3BpY0ZpbHRlcmluZyIsInVpbnQzMkVsZW1lbnRJbmRleCIsImZsb2F0VGV4dHVyZSIsImZsb2F0VGV4dHVyZUxpbmVhciIsInRleHR1cmVIYWxmRmxvYXQiLCJ0ZXh0dXJlSGFsZkZsb2F0TGluZWFyIiwiY29sb3JCdWZmZXJGbG9hdCIsInVzZVByb2dyYW0iLCJwb3N0cmVuZGVyIiwiZ2V0Q29udGV4dEF0dHJpYnV0ZXMiLCJGcmFtZWJ1ZmZlclN5c3RlbSIsIm1hbmFnZWRGcmFtZWJ1ZmZlcnMiLCJ1bmtub3duRnJhbWVidWZmZXIiLCJ2aWV3cG9ydCIsImhhc01SVCIsIndyaXRlRGVwdGhUZXh0dXJlIiwiZGlzcG9zZUFsbCIsIm5hdGl2ZURyYXdCdWZmZXJzRXh0ZW5zaW9uIiwibmF0aXZlRGVwdGhUZXh0dXJlRXh0ZW5zaW9uIiwiYWN0aXZlVGV4dHVyZXMiLCJkcmF3QnVmZmVyc1dFQkdMIiwiZmJvIiwiaW5pdEZyYW1lYnVmZmVyIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJ1cGRhdGVGcmFtZWJ1ZmZlciIsInJlc2l6ZUZyYW1lYnVmZmVyIiwidGV4dHVyZVBhcnQiLCJzZXRWaWV3cG9ydCIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJiaW5kUmVuZGVyYnVmZmVyIiwiUkVOREVSQlVGRkVSIiwicmVuZGVyYnVmZmVyU3RvcmFnZSIsIkRFUFRIX1NURU5DSUwiLCJjb3VudCIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1giLCJERVBUSF9BVFRBQ0hNRU5UIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQiLCJkaXNwb3NlRnJhbWVidWZmZXIiLCJjb250ZXh0TG9zdCIsImRlbGV0ZUZyYW1lYnVmZmVyIiwiZGVsZXRlUmVuZGVyYnVmZmVyIiwiZm9yY2VTdGVuY2lsIiwiR0xCdWZmZXIiLCJieXRlTGVuZ3RoIiwiYnl0ZVNpemVNYXAkMSIsIkdlb21ldHJ5U3lzdGVtIiwiX2FjdGl2ZUdlb21ldHJ5IiwiX2FjdGl2ZVZhbyIsImhhc1ZhbyIsImhhc0luc3RhbmNlIiwiY2FuVXNlVUludDMyRWxlbWVudEluZGV4IiwiYm91bmRCdWZmZXJzIiwibWFuYWdlZEdlb21ldHJpZXMiLCJtYW5hZ2VkQnVmZmVycyIsImNyZWF0ZVZlcnRleEFycmF5IiwibmF0aXZlVmFvRXh0ZW5zaW9uIiwiY3JlYXRlVmVydGV4QXJyYXlPRVMiLCJiaW5kVmVydGV4QXJyYXkiLCJ2YW8iLCJiaW5kVmVydGV4QXJyYXlPRVMiLCJkZWxldGVWZXJ0ZXhBcnJheSIsImRlbGV0ZVZlcnRleEFycmF5T0VTIiwidmVydGV4QXR0cmliRGl2aXNvciIsImluc3RhbmNlRXh0IiwidmVydGV4QXR0cmliRGl2aXNvckFOR0xFIiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkIiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUiLCJkcmF3QXJyYXlzSW5zdGFuY2VkIiwiZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFIiwidmFvcyIsInByb2dyYW0iLCJpbml0R2VvbWV0cnlWYW8iLCJhY3RpdmF0ZVZhbyIsInVwZGF0ZUJ1ZmZlcnMiLCJnbEJ1ZmZlciIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiQVJSQVlfQlVGRkVSIiwiYmluZEJ1ZmZlciIsIl9ib3VuZEJ1ZmZlciIsImJ1ZmZlclN1YkRhdGEiLCJkcmF3VHlwZSIsIlNUQVRJQ19EUkFXIiwiRFlOQU1JQ19EUkFXIiwiYnVmZmVyRGF0YSIsImNoZWNrQ29tcGF0aWJpbGl0eSIsImdlb21ldHJ5QXR0cmlidXRlcyIsInNoYWRlckF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVEYXRhIiwiZ2V0U2lnbmF0dXJlIiwiYXR0cmlicyIsInN0cmluZ3MiLCJzaWduYXR1cmUiLCJ2YW9PYmplY3RIYXNoIiwidGVtcFN0cmlkZSIsInRlbXBTdGFydCIsImF0dHJpYlNpemUiLCJjcmVhdGVCdWZmZXIiLCJkaXNwb3NlQnVmZmVyIiwiZGVsZXRlQnVmZmVyIiwiZGlzcG9zZUdlb21ldHJ5IiwiYnVmIiwidmFvSWQiLCJsYXN0QnVmZmVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiRkxPQVQiLCJieXRlU2l6ZSIsImdsVHlwZSIsIlVOU0lHTkVEX1NIT1JUIiwiVU5TSUdORURfSU5UIiwiZHJhd0VsZW1lbnRzIiwiZHJhd0FycmF5cyIsImNvbXBpbGVQcm9ncmFtIiwidmVydGV4U3JjIiwiZnJhZ21lbnRTcmMiLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJnbFZlcnRTaGFkZXIiLCJjb21waWxlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsImdsRnJhZ1NoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJiaW5kQXR0cmliTG9jYXRpb24iLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsIlZBTElEQVRFX1NUQVRVUyIsImdldEVycm9yIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJkZWxldGVQcm9ncmFtIiwiZGVsZXRlU2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiYm9vbGVhbkFycmF5IiwibWF4RnJhZ21lbnRQcmVjaXNpb24iLCJ1bmtub3duQ29udGV4dCIsImdldFRlc3RDb250ZXh0Iiwic2V0UHJlY2lzaW9uIiwicmVxdWVzdGVkUHJlY2lzaW9uIiwibWF4U3VwcG9ydGVkUHJlY2lzaW9uIiwic3Vic3RyaW5nIiwicHJlY2lzaW9uIiwiR0xTTF9UT19TSVpFIiwiZmxvYXQiLCJ2ZWMyIiwidmVjMyIsInZlYzQiLCJpbnQiLCJpdmVjMiIsIml2ZWMzIiwiaXZlYzQiLCJib29sIiwiYnZlYzIiLCJidmVjMyIsImJ2ZWM0IiwibWF0MiIsIm1hdDMiLCJtYXQ0Iiwic2FtcGxlcjJEIiwibWFwU2l6ZSIsIkdMX1RBQkxFIiwiR0xfVE9fR0xTTF9UWVBFUyIsIkZMT0FUX1ZFQzIiLCJGTE9BVF9WRUMzIiwiRkxPQVRfVkVDNCIsIklOVCIsIklOVF9WRUMyIiwiSU5UX1ZFQzMiLCJJTlRfVkVDNCIsIkJPT0wiLCJCT09MX1ZFQzIiLCJCT09MX1ZFQzMiLCJCT09MX1ZFQzQiLCJGTE9BVF9NQVQyIiwiRkxPQVRfTUFUMyIsIkZMT0FUX01BVDQiLCJTQU1QTEVSXzJEIiwiU0FNUExFUl9DVUJFIiwiU0FNUExFUl8yRF9BUlJBWSIsIm1hcFR5cGUiLCJ0eXBlTmFtZXMiLCJ0biIsIkdMU0xfVE9fU0lOR0xFX1NFVFRFUlNfQ0FDSEVEIiwic2FtcGxlckN1YmUiLCJzYW1wbGVyMkRBcnJheSIsIkdMU0xfVE9fQVJSQVlfU0VUVEVSUyIsInVuc2FmZUV2YWwiLCJmcmFnVGVtcGxhdGUiLCJnZW5lcmF0ZUlmVGVzdFNyYyIsIm1heElmcyIsIlVJRCQzIiwibmFtZUNhY2hlIiwiUHJvZ3JhbSIsImRlZmF1bHRWZXJ0ZXhTcmMiLCJkZWZhdWx0RnJhZ21lbnRTcmMiLCJnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQiLCJzaGFkZXJGcmFnbWVudCIsIkhJR0hfRkxPQVQiLCJnZXRNYXhGcmFnbWVudFByZWNpc2lvbiIsImV4dHJhY3REYXRhIiwiZ2xQcm9ncmFtcyIsImdldEF0dHJpYnV0ZURhdGEiLCJ1bmlmb3JtRGF0YSIsImdldFVuaWZvcm1EYXRhIiwiYXR0cmlidXRlc0FycmF5IiwidG90YWxBdHRyaWJ1dGVzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJhdHRyaWJEYXRhIiwiZ2V0QWN0aXZlQXR0cmliIiwidG90YWxVbmlmb3JtcyIsIkFDVElWRV9VTklGT1JNUyIsImdldEFjdGl2ZVVuaWZvcm0iLCJ1bmlmb3JtR3JvdXAiLCJjaGVja1VuaWZvcm1FeGlzdHMiLCJ1bmlmb3JtIiwiYmxlbmRNb2RlIiwicG9seWdvbk9mZnNldCIsImJsZW5kIiwicHJvdG90eXBlQWNjZXNzb3JzJDMiLCJjdWxsaW5nIiwiZGVwdGhUZXN0IiwiY2xvY2t3aXNlRnJvbnRGYWNlIiwiX2JsZW5kTW9kZSIsIl9wb2x5Z29uT2Zmc2V0IiwiZm9yMmQiLCJTaGFkZXIiLCJGaWx0ZXIiLCJhVGV4dHVyZUNvb3JkIiwic3RhdGljQWNjZXNzb3JzIiwiZmlsdGVyTWFuYWdlciIsImN1cnJlbnRTdGF0ZSIsIlNPVVJDRV9LRVlfTUFQIiwidGVtcE1hdCIsImNsYW1wTWFyZ2luIiwibWFwQ29vcmQiLCJ1Q2xhbXBGcmFtZSIsInVDbGFtcE9mZnNldCIsImNsYW1wT2Zmc2V0IiwiaXNTaW1wbGUiLCJwcm90b3R5cGVBY2Nlc3NvcnMkNCIsIm11bHRpcGx5VXZzIiwiZm9yY2VVcGRhdGUiLCJ0ZXhCYXNlIiwibWFyZ2luIiwiU3ByaXRlTWFza0ZpbHRlciIsIm1hc2tNYXRyaXgiLCJtYXNrU3ByaXRlIiwibnBtQWxwaGEiLCJvdGhlck1hdHJpeCIsIm1hc2tDbGFtcCIsIk1hc2tTeXN0ZW0iLCJzY2lzc29yIiwic2Npc3NvckRhdGEiLCJzY2lzc29yUmVuZGVyVGFyZ2V0IiwiZW5hYmxlU2Npc3NvciIsImFscGhhTWFza1Bvb2wiLCJhbHBoYU1hc2tJbmRleCIsIm1hc2tEYXRhIiwicHVzaFNwcml0ZU1hc2siLCJfYWN0aXZlUmVuZGVyVGFyZ2V0IiwiaXNGYXN0UmVjdCIsInJvdCIsInB1c2hTdGVuY2lsTWFzayIsInB1c2hTY2lzc29yTWFzayIsInBvcFNwcml0ZU1hc2siLCJwb3BTY2lzc29yTWFzayIsInBvcFN0ZW5jaWxNYXNrIiwiYWxwaGFNYXNrRmlsdGVyIiwic3Rhc2hGaWx0ZXJBcmVhIiwicHVzaFN0ZW5jaWwiLCJwb3BTdGVuY2lsIiwicmVuZGVyVGFyZ2V0IiwiZW5hYmxlIiwiU0NJU1NPUl9URVNUIiwiZGlzYWJsZSIsIlN0ZW5jaWxTeXN0ZW0iLCJzZXRNYXNrU3RhY2siLCJjdXJTdGFja0xlbiIsIlNURU5DSUxfVEVTVCIsIl91c2VDdXJyZW50IiwiZ3JhcGhpY3MiLCJwcmV2TWFza0NvdW50IiwiY29sb3JNYXNrIiwic3RlbmNpbEZ1bmMiLCJFUVVBTCIsIl9nZXRCaXR3aXNlTWFzayIsInN0ZW5jaWxPcCIsIktFRVAiLCJJTkNSIiwiU1RFTkNJTF9CVUZGRVJfQklUIiwiY2xlYXJTdGVuY2lsIiwiREVDUiIsIlByb2plY3Rpb25TeXN0ZW0iLCJkZWZhdWx0RnJhbWUiLCJwcm9qZWN0aW9uTWF0cml4IiwiY2FsY3VsYXRlUHJvamVjdGlvbiIsInN5bmNVbmlmb3JtR3JvdXAiLCJnbG9iYWxzIiwiUmVuZGVyVGV4dHVyZVN5c3RlbSIsIl9iYWNrZ3JvdW5kQ29sb3JSZ2JhIiwiZGVmYXVsdE1hc2tTdGFjayIsInByb2plY3Rpb24iLCJHTFByb2dyYW0iLCJ1bmlmb3JtR3JvdXBzIiwiVUlEJDQiLCJTaGFkZXJTeXN0ZW0iLCJzeXN0ZW1DaGVjayIsImNhY2hlIiwiZnVuYyIsInVuc2FmZUV2YWxTdXBwb3J0ZWQiLCJkb250U3luYyIsImdsUHJvZ3JhbSIsImdlbmVyYXRlU2hhZGVyIiwic2V0VW5pZm9ybXMiLCJnZXRnbFByb2dyYW0iLCJjcmVhdGVTeW5jR3JvdXBzIiwidGV4dHVyZUNvdW50IiwiZ2VuZXJhdGVVbmlmb3Jtc1N5bmMiLCJhdHRyaWJNYXAiLCJzaGFkZXJQcm9ncmFtIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiU3RhdGVTeXN0ZW0iLCJzdGF0ZUlkIiwiX2JsZW5kRXEiLCJzZXRCbGVuZCIsInNldEN1bGxGYWNlIiwic2V0RGVwdGhUZXN0Iiwic2V0RnJvbnRGYWNlIiwiY2hlY2tzIiwiZGVmYXVsdFN0YXRlIiwiYmxlbmRNb2RlcyIsIk9ORSIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJEU1RfQ09MT1IiLCJPTkVfTUlOVVNfU1JDX0NPTE9SIiwiU1JDX0FMUEhBIiwiRFNUX0FMUEhBIiwiWkVSTyIsIk9ORV9NSU5VU19EU1RfQUxQSEEiLCJGVU5DX1JFVkVSU0VfU1VCVFJBQ1QiLCJGVU5DX0FERCIsIm1hcFdlYkdMQmxlbmRNb2Rlc1RvUGl4aSIsImRpZmYiLCJmb3JjZVN0YXRlIiwidXBkYXRlQ2hlY2siLCJjaGVja0JsZW5kTW9kZSIsIkJMRU5EIiwiY2hlY2tQb2x5Z29uT2Zmc2V0IiwiUE9MWUdPTl9PRkZTRVRfRklMTCIsIkRFUFRIX1RFU1QiLCJDVUxMX0ZBQ0UiLCJmcm9udEZhY2UiLCJzZXRCbGVuZE1vZGUiLCJibGVuZEZ1bmMiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsInNldFBvbHlnb25PZmZzZXQiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVGV4dHVyZUdDU3lzdGVtIiwiY2hlY2tDb3VudCIsIm1heElkbGUiLCJjaGVja0NvdW50TWF4IiwidG0iLCJtYW5hZ2VkVGV4dHVyZXMiLCJ3YXNSZW1vdmVkIiwiZGVzdHJveVRleHR1cmUiLCJ1bmxvYWQiLCJkaXNwbGF5T2JqZWN0IiwidGV4dHVyZVN5c3RlbSIsIl9nbFJlbmRlclRhcmdldHMiLCJHTFRleHR1cmUiLCJUZXh0dXJlU3lzdGVtIiwiYm91bmRUZXh0dXJlcyIsImN1cnJlbnRMb2NhdGlvbiIsIl91bmtub3duQm91bmRUZXh0dXJlcyIsInVua25vd25UZXh0dXJlIiwibWF4VGV4dHVyZXMiLCJnZXRQYXJhbWV0ZXIiLCJNQVhfVEVYVFVSRV9JTUFHRV9VTklUUyIsImVtcHR5VGV4dHVyZXMiLCJlbXB0eVRleHR1cmUyRCIsImJpbmRUZXh0dXJlIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJURVhUVVJFX0NVQkVfTUFQIiwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIkxJTkVBUiIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsInRleHR1cmVHQyIsImluaXRUZXh0dXJlIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwidXBkYXRlVGV4dHVyZSIsImluaXRUZXh0dXJlVHlwZSIsIlJHQkEzMkYiLCJIQUxGX0ZMT0FUIiwiUkdCQTE2RiIsInVwZGF0ZVRleHR1cmVTdHlsZSIsInNraXBSZW1vdmUiLCJkZWxldGVUZXh0dXJlIiwiZ2VuZXJhdGVNaXBtYXAiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwiTElORUFSX01JUE1BUF9MSU5FQVIiLCJORUFSRVNUX01JUE1BUF9ORUFSRVNUIiwiYW5pc290cm9waWNFeHQiLCJsZXZlbCIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsInRleFBhcmFtZXRlcmYiLCJURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIk5FQVJFU1QiLCJ0ZW1wTWF0cml4IiwiQmF0Y2hEcmF3Q2FsbCIsIlZpZXdhYmxlQnVmZmVyIiwicmF3QmluYXJ5RGF0YSIsInVpbnQzMlZpZXciLCJmbG9hdDMyVmlldyIsInByb3RvdHlwZUFjY2Vzc29ycyQ1IiwiaW50OFZpZXciLCJ1aW50OFZpZXciLCJpbnQxNlZpZXciLCJ1aW50MTZWaWV3IiwiaW50MzJWaWV3IiwiX2ludDhWaWV3IiwiSW50OEFycmF5IiwiX3VpbnQ4VmlldyIsIl9pbnQxNlZpZXciLCJJbnQxNkFycmF5IiwiX3VpbnQxNlZpZXciLCJfaW50MzJWaWV3Iiwic2l6ZU9mIiwiT2JqZWN0UmVuZGVyZXIiLCJBYnN0cmFjdEJhdGNoUmVuZGVyZXIiLCJzaGFkZXJHZW5lcmF0b3IiLCJnZW9tZXRyeUNsYXNzIiwidmVydGV4U2l6ZSIsIl92ZXJ0ZXhDb3VudCIsIl9pbmRleENvdW50IiwiX2J1ZmZlcmVkRWxlbWVudHMiLCJfYnVmZmVyU2l6ZSIsIl9zaGFkZXIiLCJfcGFja2VkR2VvbWV0cmllcyIsIl9wYWNrZWRHZW9tZXRyeVBvb2xTaXplIiwiX2ZsdXNoSWQiLCJfZHJhd0NhbGxzIiwiX2FCdWZmZXJzIiwiX2lCdWZmZXJzIiwiTUFYX1RFWFRVUkVTIiwib25QcmVyZW5kZXIiLCJjaGVja01heElmU3RhdGVtZW50c0luU2hhZGVyIiwiaW5kaWNlcyIsIm5leHRUZXh0dXJlIiwiY3VycmVudFRleHR1cmUiLCJhdHRyaWJ1dGVCdWZmZXIiLCJnZXRBdHRyaWJ1dGVCdWZmZXIiLCJnZXRJbmRleEJ1ZmZlciIsImVsZW1lbnRzIiwiZHJhd0NhbGxzIiwicGFja2VkR2VvbWV0cmllcyIsInRvdWNoIiwiY3VycmVudEdyb3VwIiwiZ3JvdXBDb3VudCIsIlRJQ0siLCJzcHJpdGVCbGVuZE1vZGUiLCJfaWQiLCJwYWNrSW50ZXJsZWF2ZWRHZW9tZXRyeSIsIl9idWZmZXIiLCJfaW5kZXhCdWZmZXIiLCJzdGF0ZVN5c3RlbSIsImdyb3VwVGV4dHVyZUNvdW50Iiwicm91bmRlZFAyIiwicm91bmRlZFNpemVJbmRleCIsInJvdW5kZWRTaXplIiwiYUluZGV4IiwiaUluZGV4IiwicGFja2VkVmVydGljZXMiLCJpbmRpY2llcyIsInRleHR1cmVJZCIsImFyZ2IiLCJ0aW50IiwiRyIsInByZW11bHRpcGx5VGludCIsIl90aW50UkdCIiwiQmF0Y2hTaGFkZXJHZW5lcmF0b3IiLCJwcm9ncmFtQ2FjaGUiLCJkZWZhdWx0R3JvdXBDYWNoZSIsInNhbXBsZVZhbHVlcyIsInVTYW1wbGVycyIsImdlbmVyYXRlU2FtcGxlU3JjIiwidHJhbnNsYXRpb25NYXRyaXgiLCJCYXRjaEdlb21ldHJ5IiwiZGVmYXVsdFZlcnRleCQyIiwiZGVmYXVsdEZyYWdtZW50JDIiLCJCYXRjaFBsdWdpbkZhY3RvcnkiLCJkZWZhdWx0RnJhZ21lbnRUZW1wbGF0ZSIsImZyYWdtZW50IiwiQmF0Y2hQbHVnaW4iLCJQaXhlbGF0ZUZpbHRlciIsIkNvbG9yUmVwbGFjZUZpbHRlciIsIm9yaWdpbmFsQ29sb3IiLCJuZXdDb2xvciIsImVwc2lsb24iLCJfb3JpZ2luYWxDb2xvciIsIl9uZXdDb2xvciIsImxlZnRMZWRnZSIsInJpZ2h0TGVkZ2UiLCJoYXNXYWxrQm94IiwiQ29sbGlkZXIiLCJlZGdlQm94ZXMiLCJlZGdlQm94V2lkdGgiLCJlZGdlQm94SGVpZ2h0Iiwid2Fsa0JveEhlaWdodCIsInRyaWdnZXJjb2xsaWRlciIsImlzRWRnZUJveCIsImlzUmlnaHQiLCJ3YWxrQm94IiwiZGVidWdHcmFwaGljcyIsImRyYXdSZWN0IiwiaXNFZGdlIiwiZW5kcG9pbnQiLCJkaXIiLCJjbG9zZXN0UG9pbnQiLCJkaXJWZWN0b3IiLCJsaW5lIiwid2FsbCIsIng0IiwieTQiLCJkZW4iLCJzZWdtZW50cyIsImVuZHBvaW50cyIsInJheXMiLCJjb3JuZXJSYXlzIiwiaGFuZ1JheSIsInNldERpciIsInRyaXMiLCJyYXlEaXIiLCJuZXdSYXkiLCJhdXRvRGV0ZWN0UmVuZGVyZXIiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJ2ZXJ0IiwiZnJhZyIsImxvb2siLCJhdXhMb29rIiwiY2FzdCIsImNsb3Nlc3QiLCJyZWNvcmQiLCJyYXkxIiwicmF5MiIsImF1eENhc3QiLCJjb21wYXJlIiwiZHJhd0NpcmNsZSIsImRyYXdQb2x5Z29uIiwidHJpYW5nbGUiLCJ0cmlNZXNoIiwiTWVzaCIsImZpcnN0VHJpIiwiZmlyc3RUcmlNZXNoIiwiY2FzdFNlZ21lbnRzIiwidG9yY2hGcmFtZXMiLCJ2aXNpb25Tb3VyY2UiLCJudW1TdGF0aWNSYXlzIiwidmVsIiwibGlnaHRDb250YWluZXIiLCJ0b3JjaCIsIlRvcmNoQW5pbWF0aW9uIiwidGltZXNjYWxlIiwiZHJhd01lc2giLCJmcmFtZXMiLCJhbmltYXRpb24iLCJBbmltYXRlZFNwcml0ZSIsImFuaW1hdGlvblNwZWVkIiwiZ290b0FuZFBsYXkiLCJtYXhPZmZzZXQiLCJUaWNrZXIiLCJEaXNzb2x2ZVZhbHVlIiwiY29sbGlkZXIiLCJpc0NhdG5pcCIsInNwcml0ZVJlZmVyZW5jZSIsInRpY2tzIiwic2NhbGVkVGlja3MiLCJEaXNzb2x2ZVZhbCIsInRpbGVTaXplIiwibnVtTGlnaHRzIiwidGlsZXNldCIsInRpbGVNYXAiLCJmcmVlQ2VsbHMiLCJncm91bmRUaWxlcyIsInRlcnJhaW4iLCJsaWdodHMiLCJ0b3JjaFNwcml0ZXMiLCJ0aWxlQ29udGFpbmVyIiwiYmFja2dyb3VuZENvbnRhaW5lciIsInRvcmNoQ29udGFpbmVyIiwiZWRnZXMiLCJTZXQiLCJwb3dlcnVwcyIsIlJPVCIsIlJORyIsImdldFVuaWZvcm0iLCJsaWdodCIsImNhbWVyYUNlbnRlciIsInhTcGVlZCIsInlTcGVlZCIsInN1cGVyIiwiY2VsbE1hcCIsIk1hcCIsIkNlbGx1bGFyIiwiYm9ybiIsInN1cnZpdmUiLCJyYW5kb21pemUiLCJnZW5lcmF0ZUxpZ2h0cyIsImNhdmVXYWxscyIsImdlbmVyYXRlQ2F0bmlwIiwiYmFja2dyb3VuZFRpbGluZyIsImFkZEZlYXR1cmVzIiwiYWRkQ2F0bmlwIiwiYWRkTGlnaHRzIiwicGxheWVyU3Bhd24iLCJkb2VzQ29sbGlzaW9ucyIsInRpbGVUeXBlIiwibGVmdE5laWdoYm9yIiwicmlnaHROZWlnaGJvciIsInRvcE5laWdoYm9yIiwiYm90TmVpZ2hib3IiLCJUTE5laWdoYm9yIiwiVFJOZWlnaGJvciIsIkJSTmVpZ2hib3IiLCJCTE5laWdoYm9yIiwibmV3VGlsZSIsInZlcnRzIiwiYmdTY2FsZSIsImJnU3ByaXRlIiwiVGlsaW5nU3ByaXRlIiwidGlsZVNjYWxlIiwidGlsZVNwcml0ZUluaXQiLCJudW1TcGF3bnMiLCJjYXRuaXAiLCJNeVRpbWVyIiwiaXNSdW5uaW5nIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsImVsYXBzZWRUaW1lIiwiY2xvY2siLCJpbml0VGltZSIsImdldFRpbWUiLCJhbmltYXRpb25NYXAiLCJsYXN0SW5wdXQiLCJwcmV2VGltZVNjYWxlIiwicHJldlZlbCIsIm1heFZlbCIsImRlZmF1bHRNYXhWZWwiLCJ0cmlwTWF4VmVsIiwianVtcFZlbCIsImRlZmF1bHRKdW1wVmVsIiwidHJpcEp1bXBWZWwiLCJ1blNjYWxlZEp1bXBWZWwiLCJ4VmVsIiwiaXNHcm91bmRlZCIsImluU2xpZGUiLCJpblNsb3dEb3duIiwianVtcElucHV0IiwiaXNIYW5naW5nIiwiY2FtZXJhU25hcHBlZCIsImJvdW5jeUJ1ZyIsImNvbGxpc2lvblRpbWVyIiwid2FsbEp1bXBUaW1lciIsImxhdGVKdW1wRHVyYXRpb24iLCJmYWxsRGFtYWdlTVMiLCJncmFwcGxlTVMiLCJmYWxsRGFtYWdlVmVsIiwiaWRsZUZyYW1lQ291bnQiLCJtYXhJZGxlRnJhbWVzIiwiY2xpbWJUcmFuc2xhdGlvbiIsImNhbWVyYU1vdmVtZW50IiwiYW5pbWF0aW9ucyIsImN1cnJlbnRBbmltYXRpb24iLCJjb2xsaWRlcldpZHRoIiwiY29sbGlkZXJIZWlnaHQiLCJnZXRFbGFwc2VkVGltZSIsImhhbmRsZUV2ZW50IiwicGxheWluZyIsInNldEFuaW1hdGlvbiIsImN1cnJlbnRGcmFtZSIsInNldEZsaXAiLCJsb2NrQ2FtZXJhIiwic2xvd1ZlbG9jaXR5Iiwid2FpdFRpbWUiLCJmYWxsQW5pbWF0aW9uVGltZSIsIml4IiwiaXkiLCJvdmVycmlkZSIsImFjdGl2ZUFuaW0iLCJsb2NhbFNjYWxlIiwidG90YWxGcmFtZXMiLCJsZWRnZVBvc2l0aW9uIiwiaXNSaWdodExlZGdlIiwieENsaW1iT2Zmc2V0IiwiaGFuZ1Bvc2l0aW9uIiwiZ2V0Q2xpbWJEaXN0YW5jZSIsIktCQ29udHJvbGxlciIsImNhdFBsYXllciIsImNhdEJvZHkiLCJnYW1lVGlja2VyIiwiY2FtZXJhIiwicGF1c2VNZW51IiwicmlnaHREb3duIiwibGVmdERvd24iLCJvbmtleWRvd24iLCJteUV2ZW50Iiwia2V5Q29kZSIsImlzT3BlbiIsImFkZFRyYXVtYSIsIm9uQ2xpY2siLCJvbmtleXVwIiwiU2hhZG93TWFwIiwic2hhcGVyIiwiZ2VuZXJhdGVUZXh0dXJlIiwiZm9jdXMiLCJwbGF5ZXJQb3NpdGlvbiIsInRhcmdldFBvcyIsImFuZ2xlT2Zmc2V0IiwibWF4QW5nbGVPZmZzZXQiLCJmbGlwT2Zmc2V0Iiwic2hha2UiLCJ0cmF1bWEiLCJiYXNlU2VlZCIsInhOb2lzZSIsInlOb2lzZSIsInJOb2lzZSIsIm5vaXNlSW5jcmVtZW50Iiwic2ltcGxleFNoYWtlIiwidGFyZ2V0UG9zaXRpb24iLCJhc3ltcHRvdGljQXZlcmFnZSIsIndlaWdodCIsImludmVyc2VXZWlnaHQiLCJQbGF5ZXJCdXR0b24iLCJwcmVzc2VkIiwiaW50ZXJhY3Rpb25SZWN0YW5nbGUiLCJldmVudENhbGxiYWNrIiwicGF1c2VDYWxsYmFjayIsImluUGF1c2UiLCJzd2FwQnV0dG9ucyIsIm9uRW5kIiwib25QcmVzcyIsIm5ld1Bvc2l0aW9uIiwiQnV0dG9uQ29udHJvbGxlciIsImJ1dHRvbkZyYW1lcyIsInBsYXllclBvcyIsImNhbnZhc0NvbnRleHQiLCJjbGllbnRUb3BMZWZ0IiwiaGFuZGxlVG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwiYnV0dG9uQ29udGFpbmVyIiwibGVmdEJ1dHRvbk9mZnNldCIsInJpZ2h0QnV0dG9uT2Zmc2V0IiwidXBCdXR0b25PZmZzZXQiLCJsZWZ0QnV0dG9uIiwidG91Y2hJbkJ1dHRvbiIsImNhbWVyYVBvcyIsIlBhdXNlVG9nZ2xlQnV0dG9uIiwiUGF1c2VNZW51IiwiYnV0dG9uVGV4dHVyZXMiLCJhbmltYXRpb25Db250YWluZXIiLCJzb3VuZCIsInRvZ2dsZUJ1dHRvbiIsInBhdXNlZFRleHQiLCJzdGF0aWNUZXh0IiwicGF1c2VUaWNrZXIiLCJwYXVzZUJsaW5rZXIiLCJQQVVTRV9CTElOS0VSX0lOVEVSVkFMIiwicGF1c2VCbGlua2VyTGFnIiwidG9nZ2xlQnV0dG9uT2Zmc2V0IiwibWVudUxpc3QiLCJNZW51TGlzdCIsImluYWN0aXZlU3ByaXRlIiwiYWN0aXZlU3ByaXRlIiwib25Ub2dnbGUiLCJub1VwZGF0ZSIsImN1cnJlbnRLZXkiLCJvblJlcm9sbCIsInVwZGF0ZU9wdGlvbnMiLCJyZWxvYWQiLCJwYXVzZVRleHQiLCJUZXh0IiwiZm9udFNpemUiLCJmb250RmFtaWx5IiwibW92ZUJ1dHRvbnMiLCJtb3ZlRWxlbWVudHMiLCJNZW51TGlzdEVsZW1lbnQiLCJpc1BhdXNlTWVudU9wZW4iLCJjYWxsYmFjayIsImNhY2hlQXNCaXRtYXAiLCJEaXNzb2x2ZUZpbHRlciIsIm1hcFNhbXBsZXIiLCJmaWx0ZXJNYXRyaXgiLCJCZXppZXJEaXNwbGFjZW1lbnRGaWx0ZXIiLCJiZXppZXJWYWwiLCJsZW5YIiwibGVuWSIsIkJlemllckN1cnZlIiwicGxheWVyIiwicGxheWVyRGVmYXVsdFZlbCIsInBsYXllclRyaXBWZWwiLCJwbGF5ZXJEZWZhdWx0SnVtcCIsInBsYXllclRyaXBKdW1wIiwiY2FtZXJhUm90YXRpb24iLCJiZXppZXJUaW1lIiwiZmlsdGVyVGltZSIsImZpbHRlclRyYW5zaXRpb25NUyIsImZpbHRlclN0YXRpY01TIiwiZGlzcGxhY2VtZW50SW5jcmVtZW50IiwiYmV6aWVySW5jcmVtZW50IiwiYmV6aWVyQ3VydmUiLCJ0aW1lciIsInBvd2VydXBUaW1lciIsImZvcmVncm91bmROb2lzZSIsIlJFUEVBVCIsImJhY2tncm91bmROb2lzZSIsImZvcmVncm91bmRGaWx0ZXIiLCJiYWNrZ3JvdW5kRmlsdGVyIiwiYmFkRmlsdGVyU29sdXRpb24iLCJmb3JlZ3JvdW5kRmlsdGVycyIsImJhY2tncm91bmRGaWx0ZXJzIiwiYmV6aWVyWSIsImdldFkiLCJwb3dlcnVwIiwiZm9yZWdyb3VuZENvbnRhaW5lciIsIm15R2FtZSIsImFwcCIsIndvcmxkQ29udGFpbmVyIiwicGF1c2VNdXNpYyIsImRpc3NvbHZlU3ByaXRlIiwiZGlzc29sdmVTaGFkZXIiLCJiZXppZXJEaXNwbGFjZW1lbnRTaGFkZXIiLCJkaXNwbGFjZW1lbnRTaGFkZXIiLCJ1cGRhdGVMYWciLCJsaWdodFNoYWRlciIsImFsbExpZ2h0cyIsImNhdEFuaW1hdGlvbnMiLCJjYXRuaXBUcmlwIiwibWVudUJ1dHRvbnMiLCJtZW51Rm9udCIsImJ1dHRvbkNvbnRyb2xsZXIiLCJhdHRhY2hDb250cm9sbGVyIiwiS0JJbnB1dCIsIm9uV2luZG93UmVzaXplIiwiY29sbGlzaW9uRXZlbnRTZXR1cCIsInN0YWdlIiwic2NyZWVuIiwiaW5pdExheWVycyIsImxvb3AiLCJGaXhlZFVwZGF0ZSIsInBhcmFsbGF4U2Nyb2xsIiwic2hhZG93TWFwIiwiY29sb3JTd2FwcGVyIiwiaW5XYWxrQm94IiwiY2F0Q29sbGlzaW9uIiwicGh5c2ljc0NvbGxpc2lvbnMiLCJvdGhlckJvZHkiLCJwYWlyIiwiaW1wYWN0VmVsIiwic3RhcnRMZWRnZUNsaW1iIiwic2xpZGVBbmltYXRpb24iLCJmb250cyIsImxvYWRlZEZvbnRzIiwibm9kZSIsImlubmVySFRNTCIsImZvbnRWYXJpYW50IiwiZm9udFN0eWxlIiwiZm9udFdlaWdodCIsImxldHRlclNwYWNpbmciLCJpbnRlcnZhbCIsIm9mZnNldFdpZHRoIiwiY2hlY2tGb250Iiwid2FpdEZvcldlYmZvbnRzIiwiQXBwbGljYXRpb24iLCJnZXRFbGVtZW50QnlJZCIsImN1c3RvbUxvYWRlciIsInNldHVwRnVuY3Rpb24iLCJkb25lTG9hZGluZyIsImxvYWRlckZpbGVzIiwib25Mb2FkIiwibG9hZFNoYWRlcnMiLCJsb2FkRGlzc29sdmVTaGFkZXIiLCJsb2FkRGlzcGxhY2VtZW50U2hhZGVyIiwiY2F0bmlwRmlsdGVyIiwibG9hZEZpbHRlcnMiLCJhbmltYXRpb25zSW5pdCIsImxvYWRUaWxlcyIsImxvYWRUb3JjaCIsImxvYWRCdXR0b25zIiwibG9hZE1lbnUiLCJsb2FkU291bmQiLCJsb2FkRm9udCIsImxvYWRTcHJpdGUiLCJmcmFtZUNvdW50IiwiZG9lc0xvb3AiLCJrZXlTdHJpbmciLCJuZXdTcHJpdGUiLCJBUkNBREVDTEFTU0lDIiwib250b3VjaGVuZCIsIm9udG91Y2htb3ZlIiwib250b3VjaHN0YXJ0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFP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QUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDekUsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN6RSxDQUNJLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FFSixDQUNJLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsSUFHUnIzQixFQUFRbTJCLFlBQWMsQ0FDbEIsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEdBQ0MsRUFDRCxFQUNBLEdBQ0MsRUFDRCxHQUNDLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FFTG4yQixFQUFRaTNCLFlBQWMsRUFDakIsR0FDRCxFQUNBLEdBQ0MsRUFDRCxHQUNBLEdBQ0MsRUFDRCxFQUNBLEdBQ0EsR0FDQSxFQUNBLEVBQ0EsRUFDQSxHQUNBLEVBQ0EsRUFDQSxFQUNBLElBQ0MsSUFDQSxFQUNELEdBQ0MsR0FDQSxHQUNELEdBQ0MsR0FDQSxFQUNELEdBQ0EsSUFDQyxFQUNELEVBQ0EsR0FDQyxHQUNELEVBQ0EsR0FDQyxFQUNELElBQ0MsR0FDRCxHQUNDLEdBQ0EsRUFDRCxJQUNDLEdBQ0EsRUFDRCxHQUNDLEdBQ0QsR0FDQSxHQUNDLEVBQ0QsRUFDQSxJQUNDLEVBQ0QsRUFDQSxHQUNDLElBQ0EsSUFDQSxHQUNBLEdBQ0EsR0FDQSxJQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0QsSUFDQyxHQUNBLEVBQ0QsR0FDQyxJQUNBLEVBQ0QsR0FDQyxHQUNBLElBRUxqM0IsRUFBUTgzQixZQUFjLENBQ2xCLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxHQUNDLEdBQ0EsRUFDRCxFQUNBLEdBQ0MsR0FDQSxFQUNELEVBQ0EsR0FDQyxHQUNBLEVBQ0QsRUFDQSxHQUNDLEdBQ0EsRUFDRCxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxHQUNDLEVBQ0QsR0FDQyxFQUNELEdBQ0MsRUFDRCxHQUNDLEVBQ0QsR0FDQyxFQUNELEdBQ0MsRUFDRCxHQUNDLEVBQ0QsR0FDQyxFQUNELEdBQ0MsRUFDRCxFQUNBLEdBQ0MsR0FDQSxFQUNELEVBQ0EsR0FDQyxHQUNBLEVBQ0QsRUFDQSxHQUNDLEdBQ0EsRUFDRCxFQUNBLEdBQ0MsR0FDQSxFQUNELEdBQ0MsR0FDQSxHQUNBLEVBQ0QsR0FDQyxHQUNBLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDQSxFQUNELEdBQ0MsR0FDQSxHQUNBLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsR0FDQyxHQUNBLEVBQ0QsRUFDQSxHQUNDLEdBQ0EsRUFDRCxFQUNBLEdBQ0MsR0FDQSxFQUNELEVBQ0EsR0FDQyxHQUNBLEVBQ0QsRUFDQSxHQUNDLEVBQ0QsR0FDQyxFQUNELEdBQ0MsRUFDRCxHQUNDLEVBQ0QsR0FDQyxFQUNELEdBQ0MsRUFDRCxHQUNDLEVBQ0QsR0FDQyxFQUNELEdBQ0MsR0FDQSxHQUNBLEVBQ0QsR0FDQyxHQUNBLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDQSxFQUNELEdBQ0MsR0FDQSxHQUNBLEVBQ0QsR0FDQyxFQUNELEVBQ0EsR0FDQyxHQUNBLEVBQ0QsRUFDQSxHQUNDLEdBQ0EsRUFDRCxFQUNBLEdBQ0MsR0FDQSxFQUNELEVBQ0EsR0FDQyxHQUNBLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDQSxFQUNELEdBQ0MsR0FDQSxHQUNBLEVBQ0QsR0FDQyxHQUNBLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDQSxFQUNELEdBQ0MsR0FDQSxHQUNBLEVBQ0QsR0FDQyxHQUNBLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBRUw5M0IsRUFBUWcxQixjQUFnQixDQUNwQixFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsR0FFSmgxQixFQUFRdzJCLGNBQWdCLENBQ3BCLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxHQUVKeDJCLEVBQVFzM0IsY0FBZ0IsQ0FDcEIsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE1BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsSUFFSnQzQixFQUFReTBCLElBQU0sQ0FDVixFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FFSnowQixFQUFRczJCLElBQU0sQ0FDVixFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsR0FFSnQyQixFQUFRbzNCLElBQU0sQ0FDVixFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxF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WXdCLFdBQWNodkYsSUFDaERBLEVBQUUyWCxrQkFFSlgsU0FBU3cyRSxlQUFlLFlBQVl5QixZQUFlanZGLElBQ2pEQSxFQUFFMlgsa0JBRUpYLFNBQVN3MkUsZUFBZSxZQUFZMEIsYUFBZ0JsdkYsSUFDbERBLEVBQUUyWCxtQkF2Q2dDblksVUFBSyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTUpO1xuIiwiLyoqXG4qIG1hdHRlci1qcyAwLjE0LjIgYnkgQGxpYWJydSAyMDE4LTA2LTExXG4qIGh0dHA6Ly9icm0uaW8vbWF0dGVyLWpzL1xuKiBMaWNlbnNlIE1JVFxuKi9cbiFmdW5jdGlvbihlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz1lKCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGUpO2Vsc2V7dmFyIHQ7dD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsdC5NYXR0ZXI9ZSgpfX0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixvKXtmdW5jdGlvbiBpKHMsYSl7aWYoIW5bc10pe2lmKCF0W3NdKXt2YXIgbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFhJiZsKXJldHVybiBsKHMsITApO2lmKHIpcmV0dXJuIHIocywhMCk7dmFyIGM9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitzK1wiJ1wiKTt0aHJvdyBjLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsY312YXIgZD1uW3NdPXtleHBvcnRzOnt9fTt0W3NdWzBdLmNhbGwoZC5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiBpKHRbc11bMV1bZV18fGUpfSxkLGQuZXhwb3J0cyxlLHQsbixvKX1yZXR1cm4gbltzXS5leHBvcnRzfWZvcih2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLHM9MDtzPG8ubGVuZ3RoO3MrKylpKG9bc10pO3JldHVybiBpfXJldHVybiBlfSgpKHsxOltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCIpLHI9ZShcIi4uL2dlb21ldHJ5L1ZlY3RvclwiKSxzPWUoXCIuLi9jb3JlL1NsZWVwaW5nXCIpLGE9KGUoXCIuLi9yZW5kZXIvUmVuZGVyXCIpLGUoXCIuLi9jb3JlL0NvbW1vblwiKSksbD1lKFwiLi4vZ2VvbWV0cnkvQm91bmRzXCIpLGM9ZShcIi4uL2dlb21ldHJ5L0F4ZXNcIik7IWZ1bmN0aW9uKCl7by5faW5lcnRpYVNjYWxlPTQsXG5vLl9uZXh0Q29sbGlkaW5nR3JvdXBJZD0xLG8uX25leHROb25Db2xsaWRpbmdHcm91cElkPS0xLG8uX25leHRDYXRlZ29yeT0xLG8uY3JlYXRlPWZ1bmN0aW9uKHQpe3ZhciBuPXtpZDphLm5leHRJZCgpLHR5cGU6XCJib2R5XCIsbGFiZWw6XCJCb2R5XCIscGFydHM6W10scGx1Z2luOnt9LGFuZ2xlOjAsdmVydGljZXM6aS5mcm9tUGF0aChcIkwgMCAwIEwgNDAgMCBMIDQwIDQwIEwgMCA0MFwiKSxwb3NpdGlvbjp7eDowLHk6MH0sZm9yY2U6e3g6MCx5OjB9LHRvcnF1ZTowLHBvc2l0aW9uSW1wdWxzZTp7eDowLHk6MH0sY29uc3RyYWludEltcHVsc2U6e3g6MCx5OjAsYW5nbGU6MH0sdG90YWxDb250YWN0czowLHNwZWVkOjAsYW5ndWxhclNwZWVkOjAsdmVsb2NpdHk6e3g6MCx5OjB9LGFuZ3VsYXJWZWxvY2l0eTowLGlzU2Vuc29yOiExLGlzU3RhdGljOiExLGlzU2xlZXBpbmc6ITEsbW90aW9uOjAsc2xlZXBUaHJlc2hvbGQ6NjAsZGVuc2l0eTouMDAxLHJlc3RpdHV0aW9uOjAsZnJpY3Rpb246LjEsZnJpY3Rpb25TdGF0aWM6LjUsZnJpY3Rpb25BaXI6LjAxLGNvbGxpc2lvbkZpbHRlcjp7Y2F0ZWdvcnk6MSxtYXNrOjQyOTQ5NjcyOTUsZ3JvdXA6MH0sc2xvcDouMDUsdGltZVNjYWxlOjEscmVuZGVyOnt2aXNpYmxlOiEwLG9wYWNpdHk6MSxzcHJpdGU6e3hTY2FsZToxLHlTY2FsZToxLHhPZmZzZXQ6MCx5T2Zmc2V0OjB9LGxpbmVXaWR0aDowfX0sbz1hLmV4dGVuZChuLHQpO3JldHVybiBlKG8sdCksb30sby5uZXh0R3JvdXA9ZnVuY3Rpb24oZSl7cmV0dXJuIGU/by5fbmV4dE5vbkNvbGxpZGluZ0dyb3VwSWQtLTpvLl9uZXh0Q29sbGlkaW5nR3JvdXBJZCsrfSxvLm5leHRDYXRlZ29yeT1mdW5jdGlvbigpe3JldHVybiBvLl9uZXh0Q2F0ZWdvcnk9by5fbmV4dENhdGVnb3J5PDwxLG8uX25leHRDYXRlZ29yeX07dmFyIGU9ZnVuY3Rpb24oZSx0KXt0PXR8fHt9LG8uc2V0KGUse2JvdW5kczplLmJvdW5kc3x8bC5jcmVhdGUoZS52ZXJ0aWNlcyksXG5wb3NpdGlvblByZXY6ZS5wb3NpdGlvblByZXZ8fHIuY2xvbmUoZS5wb3NpdGlvbiksYW5nbGVQcmV2OmUuYW5nbGVQcmV2fHxlLmFuZ2xlLHZlcnRpY2VzOmUudmVydGljZXMscGFydHM6ZS5wYXJ0c3x8W2VdLGlzU3RhdGljOmUuaXNTdGF0aWMsaXNTbGVlcGluZzplLmlzU2xlZXBpbmcscGFyZW50OmUucGFyZW50fHxlfSksaS5yb3RhdGUoZS52ZXJ0aWNlcyxlLmFuZ2xlLGUucG9zaXRpb24pLGMucm90YXRlKGUuYXhlcyxlLmFuZ2xlKSxsLnVwZGF0ZShlLmJvdW5kcyxlLnZlcnRpY2VzLGUudmVsb2NpdHkpLG8uc2V0KGUse2F4ZXM6dC5heGVzfHxlLmF4ZXMsYXJlYTp0LmFyZWF8fGUuYXJlYSxtYXNzOnQubWFzc3x8ZS5tYXNzLGluZXJ0aWE6dC5pbmVydGlhfHxlLmluZXJ0aWF9KTt2YXIgbj1lLmlzU3RhdGljP1wiIzJlMmI0NFwiOmEuY2hvb3NlKFtcIiMwMDZCQTZcIixcIiMwNDk2RkZcIixcIiNGRkJDNDJcIixcIiNEODExNTlcIixcIiM4RjJENTZcIl0pO2UucmVuZGVyLmZpbGxTdHlsZT1lLnJlbmRlci5maWxsU3R5bGV8fG4sZS5yZW5kZXIuc3Ryb2tlU3R5bGU9ZS5yZW5kZXIuc3Ryb2tlU3R5bGV8fFwiIzAwMFwiLGUucmVuZGVyLnNwcml0ZS54T2Zmc2V0Kz0tKGUuYm91bmRzLm1pbi54LWUucG9zaXRpb24ueCkvKGUuYm91bmRzLm1heC54LWUuYm91bmRzLm1pbi54KSxlLnJlbmRlci5zcHJpdGUueU9mZnNldCs9LShlLmJvdW5kcy5taW4ueS1lLnBvc2l0aW9uLnkpLyhlLmJvdW5kcy5tYXgueS1lLmJvdW5kcy5taW4ueSl9O28uc2V0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgaTtcInN0cmluZ1wiPT10eXBlb2YgdCYmKGk9dCx0PXt9LHRbaV09bik7Zm9yKGkgaW4gdClpZihuPXRbaV0sdC5oYXNPd25Qcm9wZXJ0eShpKSlzd2l0Y2goaSl7Y2FzZVwiaXNTdGF0aWNcIjpvLnNldFN0YXRpYyhlLG4pO2JyZWFrO2Nhc2VcImlzU2xlZXBpbmdcIjpzLnNldChlLG4pO2JyZWFrO2Nhc2VcIm1hc3NcIjpvLnNldE1hc3MoZSxuKTticmVhaztjYXNlXCJkZW5zaXR5XCI6by5zZXREZW5zaXR5KGUsbilcbjticmVhaztjYXNlXCJpbmVydGlhXCI6by5zZXRJbmVydGlhKGUsbik7YnJlYWs7Y2FzZVwidmVydGljZXNcIjpvLnNldFZlcnRpY2VzKGUsbik7YnJlYWs7Y2FzZVwicG9zaXRpb25cIjpvLnNldFBvc2l0aW9uKGUsbik7YnJlYWs7Y2FzZVwiYW5nbGVcIjpvLnNldEFuZ2xlKGUsbik7YnJlYWs7Y2FzZVwidmVsb2NpdHlcIjpvLnNldFZlbG9jaXR5KGUsbik7YnJlYWs7Y2FzZVwiYW5ndWxhclZlbG9jaXR5XCI6by5zZXRBbmd1bGFyVmVsb2NpdHkoZSxuKTticmVhaztjYXNlXCJwYXJ0c1wiOm8uc2V0UGFydHMoZSxuKTticmVhaztkZWZhdWx0OmVbaV09bn19LG8uc2V0U3RhdGljPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTA7bjxlLnBhcnRzLmxlbmd0aDtuKyspe3ZhciBvPWUucGFydHNbbl07by5pc1N0YXRpYz10LHQ/KG8uX29yaWdpbmFsPXtyZXN0aXR1dGlvbjpvLnJlc3RpdHV0aW9uLGZyaWN0aW9uOm8uZnJpY3Rpb24sbWFzczpvLm1hc3MsaW5lcnRpYTpvLmluZXJ0aWEsZGVuc2l0eTpvLmRlbnNpdHksaW52ZXJzZU1hc3M6by5pbnZlcnNlTWFzcyxpbnZlcnNlSW5lcnRpYTpvLmludmVyc2VJbmVydGlhfSxvLnJlc3RpdHV0aW9uPTAsby5mcmljdGlvbj0xLG8ubWFzcz1vLmluZXJ0aWE9by5kZW5zaXR5PTEvMCxvLmludmVyc2VNYXNzPW8uaW52ZXJzZUluZXJ0aWE9MCxvLnBvc2l0aW9uUHJldi54PW8ucG9zaXRpb24ueCxvLnBvc2l0aW9uUHJldi55PW8ucG9zaXRpb24ueSxvLmFuZ2xlUHJldj1vLmFuZ2xlLG8uYW5ndWxhclZlbG9jaXR5PTAsby5zcGVlZD0wLG8uYW5ndWxhclNwZWVkPTAsby5tb3Rpb249MCk6by5fb3JpZ2luYWwmJihvLnJlc3RpdHV0aW9uPW8uX29yaWdpbmFsLnJlc3RpdHV0aW9uLG8uZnJpY3Rpb249by5fb3JpZ2luYWwuZnJpY3Rpb24sby5tYXNzPW8uX29yaWdpbmFsLm1hc3Msby5pbmVydGlhPW8uX29yaWdpbmFsLmluZXJ0aWEsby5kZW5zaXR5PW8uX29yaWdpbmFsLmRlbnNpdHksXG5vLmludmVyc2VNYXNzPW8uX29yaWdpbmFsLmludmVyc2VNYXNzLG8uaW52ZXJzZUluZXJ0aWE9by5fb3JpZ2luYWwuaW52ZXJzZUluZXJ0aWEsZGVsZXRlIG8uX29yaWdpbmFsKX19LG8uc2V0TWFzcz1mdW5jdGlvbihlLHQpe3ZhciBuPWUuaW5lcnRpYS8oZS5tYXNzLzYpO2UuaW5lcnRpYT1uKih0LzYpLGUuaW52ZXJzZUluZXJ0aWE9MS9lLmluZXJ0aWEsZS5tYXNzPXQsZS5pbnZlcnNlTWFzcz0xL2UubWFzcyxlLmRlbnNpdHk9ZS5tYXNzL2UuYXJlYX0sby5zZXREZW5zaXR5PWZ1bmN0aW9uKGUsdCl7by5zZXRNYXNzKGUsdCplLmFyZWEpLGUuZGVuc2l0eT10fSxvLnNldEluZXJ0aWE9ZnVuY3Rpb24oZSx0KXtlLmluZXJ0aWE9dCxlLmludmVyc2VJbmVydGlhPTEvZS5pbmVydGlhfSxvLnNldFZlcnRpY2VzPWZ1bmN0aW9uKGUsdCl7dFswXS5ib2R5PT09ZT9lLnZlcnRpY2VzPXQ6ZS52ZXJ0aWNlcz1pLmNyZWF0ZSh0LGUpLGUuYXhlcz1jLmZyb21WZXJ0aWNlcyhlLnZlcnRpY2VzKSxlLmFyZWE9aS5hcmVhKGUudmVydGljZXMpLG8uc2V0TWFzcyhlLGUuZGVuc2l0eSplLmFyZWEpO3ZhciBuPWkuY2VudHJlKGUudmVydGljZXMpO2kudHJhbnNsYXRlKGUudmVydGljZXMsbiwtMSksby5zZXRJbmVydGlhKGUsby5faW5lcnRpYVNjYWxlKmkuaW5lcnRpYShlLnZlcnRpY2VzLGUubWFzcykpLGkudHJhbnNsYXRlKGUudmVydGljZXMsZS5wb3NpdGlvbiksbC51cGRhdGUoZS5ib3VuZHMsZS52ZXJ0aWNlcyxlLnZlbG9jaXR5KX0sby5zZXRQYXJ0cz1mdW5jdGlvbihlLHQsbil7dmFyIHI7Zm9yKHQ9dC5zbGljZSgwKSxlLnBhcnRzLmxlbmd0aD0wLGUucGFydHMucHVzaChlKSxlLnBhcmVudD1lLHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIHM9dFtyXTtzIT09ZSYmKHMucGFyZW50PWUsZS5wYXJ0cy5wdXNoKHMpKX1pZigxIT09ZS5wYXJ0cy5sZW5ndGgpe2lmKG49dm9pZCAwPT09bnx8bil7dmFyIGE9W11cbjtmb3Iocj0wO3I8dC5sZW5ndGg7cisrKWE9YS5jb25jYXQodFtyXS52ZXJ0aWNlcyk7aS5jbG9ja3dpc2VTb3J0KGEpO3ZhciBsPWkuaHVsbChhKSxjPWkuY2VudHJlKGwpO28uc2V0VmVydGljZXMoZSxsKSxpLnRyYW5zbGF0ZShlLnZlcnRpY2VzLGMpfXZhciBkPW8uX3RvdGFsUHJvcGVydGllcyhlKTtlLmFyZWE9ZC5hcmVhLGUucGFyZW50PWUsZS5wb3NpdGlvbi54PWQuY2VudHJlLngsZS5wb3NpdGlvbi55PWQuY2VudHJlLnksZS5wb3NpdGlvblByZXYueD1kLmNlbnRyZS54LGUucG9zaXRpb25QcmV2Lnk9ZC5jZW50cmUueSxvLnNldE1hc3MoZSxkLm1hc3MpLG8uc2V0SW5lcnRpYShlLGQuaW5lcnRpYSksby5zZXRQb3NpdGlvbihlLGQuY2VudHJlKX19LG8uc2V0UG9zaXRpb249ZnVuY3Rpb24oZSx0KXt2YXIgbj1yLnN1Yih0LGUucG9zaXRpb24pO2UucG9zaXRpb25QcmV2LngrPW4ueCxlLnBvc2l0aW9uUHJldi55Kz1uLnk7Zm9yKHZhciBvPTA7bzxlLnBhcnRzLmxlbmd0aDtvKyspe3ZhciBzPWUucGFydHNbb107cy5wb3NpdGlvbi54Kz1uLngscy5wb3NpdGlvbi55Kz1uLnksaS50cmFuc2xhdGUocy52ZXJ0aWNlcyxuKSxsLnVwZGF0ZShzLmJvdW5kcyxzLnZlcnRpY2VzLGUudmVsb2NpdHkpfX0sby5zZXRBbmdsZT1mdW5jdGlvbihlLHQpe3ZhciBuPXQtZS5hbmdsZTtlLmFuZ2xlUHJldis9bjtmb3IodmFyIG89MDtvPGUucGFydHMubGVuZ3RoO28rKyl7dmFyIHM9ZS5wYXJ0c1tvXTtzLmFuZ2xlKz1uLGkucm90YXRlKHMudmVydGljZXMsbixlLnBvc2l0aW9uKSxjLnJvdGF0ZShzLmF4ZXMsbiksbC51cGRhdGUocy5ib3VuZHMscy52ZXJ0aWNlcyxlLnZlbG9jaXR5KSxvPjAmJnIucm90YXRlQWJvdXQocy5wb3NpdGlvbixuLGUucG9zaXRpb24scy5wb3NpdGlvbil9fSxvLnNldFZlbG9jaXR5PWZ1bmN0aW9uKGUsdCl7ZS5wb3NpdGlvblByZXYueD1lLnBvc2l0aW9uLngtdC54LGUucG9zaXRpb25QcmV2Lnk9ZS5wb3NpdGlvbi55LXQueSxcbmUudmVsb2NpdHkueD10LngsZS52ZWxvY2l0eS55PXQueSxlLnNwZWVkPXIubWFnbml0dWRlKGUudmVsb2NpdHkpfSxvLnNldEFuZ3VsYXJWZWxvY2l0eT1mdW5jdGlvbihlLHQpe2UuYW5nbGVQcmV2PWUuYW5nbGUtdCxlLmFuZ3VsYXJWZWxvY2l0eT10LGUuYW5ndWxhclNwZWVkPU1hdGguYWJzKGUuYW5ndWxhclZlbG9jaXR5KX0sby50cmFuc2xhdGU9ZnVuY3Rpb24oZSx0KXtvLnNldFBvc2l0aW9uKGUsci5hZGQoZS5wb3NpdGlvbix0KSl9LG8ucm90YXRlPWZ1bmN0aW9uKGUsdCxuKXtpZihuKXt2YXIgaT1NYXRoLmNvcyh0KSxyPU1hdGguc2luKHQpLHM9ZS5wb3NpdGlvbi54LW4ueCxhPWUucG9zaXRpb24ueS1uLnk7by5zZXRQb3NpdGlvbihlLHt4Om4ueCsocyppLWEqcikseTpuLnkrKHMqcithKmkpfSksby5zZXRBbmdsZShlLGUuYW5nbGUrdCl9ZWxzZSBvLnNldEFuZ2xlKGUsZS5hbmdsZSt0KX0sby5zY2FsZT1mdW5jdGlvbihlLHQsbixyKXt2YXIgcz0wLGE9MDtyPXJ8fGUucG9zaXRpb247Zm9yKHZhciBkPTA7ZDxlLnBhcnRzLmxlbmd0aDtkKyspe3ZhciB1PWUucGFydHNbZF07aS5zY2FsZSh1LnZlcnRpY2VzLHQsbixyKSx1LmF4ZXM9Yy5mcm9tVmVydGljZXModS52ZXJ0aWNlcyksdS5hcmVhPWkuYXJlYSh1LnZlcnRpY2VzKSxvLnNldE1hc3ModSxlLmRlbnNpdHkqdS5hcmVhKSxpLnRyYW5zbGF0ZSh1LnZlcnRpY2VzLHt4Oi11LnBvc2l0aW9uLngseTotdS5wb3NpdGlvbi55fSksby5zZXRJbmVydGlhKHUsby5faW5lcnRpYVNjYWxlKmkuaW5lcnRpYSh1LnZlcnRpY2VzLHUubWFzcykpLGkudHJhbnNsYXRlKHUudmVydGljZXMse3g6dS5wb3NpdGlvbi54LHk6dS5wb3NpdGlvbi55fSksZD4wJiYocys9dS5hcmVhLGErPXUuaW5lcnRpYSksdS5wb3NpdGlvbi54PXIueCsodS5wb3NpdGlvbi54LXIueCkqdCx1LnBvc2l0aW9uLnk9ci55Kyh1LnBvc2l0aW9uLnktci55KSpuLGwudXBkYXRlKHUuYm91bmRzLHUudmVydGljZXMsZS52ZWxvY2l0eSlcbn1lLnBhcnRzLmxlbmd0aD4xJiYoZS5hcmVhPXMsZS5pc1N0YXRpY3x8KG8uc2V0TWFzcyhlLGUuZGVuc2l0eSpzKSxvLnNldEluZXJ0aWEoZSxhKSkpLGUuY2lyY2xlUmFkaXVzJiYodD09PW4/ZS5jaXJjbGVSYWRpdXMqPXQ6ZS5jaXJjbGVSYWRpdXM9bnVsbCl9LG8udXBkYXRlPWZ1bmN0aW9uKGUsdCxuLG8pe3ZhciBzPU1hdGgucG93KHQqbiplLnRpbWVTY2FsZSwyKSxhPTEtZS5mcmljdGlvbkFpcipuKmUudGltZVNjYWxlLGQ9ZS5wb3NpdGlvbi54LWUucG9zaXRpb25QcmV2LngsdT1lLnBvc2l0aW9uLnktZS5wb3NpdGlvblByZXYueTtlLnZlbG9jaXR5Lng9ZCphKm8rZS5mb3JjZS54L2UubWFzcypzLGUudmVsb2NpdHkueT11KmEqbytlLmZvcmNlLnkvZS5tYXNzKnMsZS5wb3NpdGlvblByZXYueD1lLnBvc2l0aW9uLngsZS5wb3NpdGlvblByZXYueT1lLnBvc2l0aW9uLnksZS5wb3NpdGlvbi54Kz1lLnZlbG9jaXR5LngsZS5wb3NpdGlvbi55Kz1lLnZlbG9jaXR5LnksZS5hbmd1bGFyVmVsb2NpdHk9KGUuYW5nbGUtZS5hbmdsZVByZXYpKmEqbytlLnRvcnF1ZS9lLmluZXJ0aWEqcyxlLmFuZ2xlUHJldj1lLmFuZ2xlLGUuYW5nbGUrPWUuYW5ndWxhclZlbG9jaXR5LGUuc3BlZWQ9ci5tYWduaXR1ZGUoZS52ZWxvY2l0eSksZS5hbmd1bGFyU3BlZWQ9TWF0aC5hYnMoZS5hbmd1bGFyVmVsb2NpdHkpO2Zvcih2YXIgcD0wO3A8ZS5wYXJ0cy5sZW5ndGg7cCsrKXt2YXIgZj1lLnBhcnRzW3BdO2kudHJhbnNsYXRlKGYudmVydGljZXMsZS52ZWxvY2l0eSkscD4wJiYoZi5wb3NpdGlvbi54Kz1lLnZlbG9jaXR5LngsZi5wb3NpdGlvbi55Kz1lLnZlbG9jaXR5LnkpLDAhPT1lLmFuZ3VsYXJWZWxvY2l0eSYmKGkucm90YXRlKGYudmVydGljZXMsZS5hbmd1bGFyVmVsb2NpdHksZS5wb3NpdGlvbiksYy5yb3RhdGUoZi5heGVzLGUuYW5ndWxhclZlbG9jaXR5KSxcbnA+MCYmci5yb3RhdGVBYm91dChmLnBvc2l0aW9uLGUuYW5ndWxhclZlbG9jaXR5LGUucG9zaXRpb24sZi5wb3NpdGlvbikpLGwudXBkYXRlKGYuYm91bmRzLGYudmVydGljZXMsZS52ZWxvY2l0eSl9fSxvLmFwcGx5Rm9yY2U9ZnVuY3Rpb24oZSx0LG4pe2UuZm9yY2UueCs9bi54LGUuZm9yY2UueSs9bi55O3ZhciBvPXt4OnQueC1lLnBvc2l0aW9uLngseTp0LnktZS5wb3NpdGlvbi55fTtlLnRvcnF1ZSs9by54Km4ueS1vLnkqbi54fSxvLl90b3RhbFByb3BlcnRpZXM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXttYXNzOjAsYXJlYTowLGluZXJ0aWE6MCxjZW50cmU6e3g6MCx5OjB9fSxuPTE9PT1lLnBhcnRzLmxlbmd0aD8wOjE7bjxlLnBhcnRzLmxlbmd0aDtuKyspe3ZhciBvPWUucGFydHNbbl0saT1vLm1hc3MhPT0xLzA/by5tYXNzOjE7dC5tYXNzKz1pLHQuYXJlYSs9by5hcmVhLHQuaW5lcnRpYSs9by5pbmVydGlhLHQuY2VudHJlPXIuYWRkKHQuY2VudHJlLHIubXVsdChvLnBvc2l0aW9uLGkpKX1yZXR1cm4gdC5jZW50cmU9ci5kaXYodC5jZW50cmUsdC5tYXNzKSx0fX0oKX0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2NvcmUvU2xlZXBpbmdcIjoyMixcIi4uL2dlb21ldHJ5L0F4ZXNcIjoyNSxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjgsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI5LFwiLi4vcmVuZGVyL1JlbmRlclwiOjMxfV0sMjpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuLi9jb3JlL0V2ZW50c1wiKSxyPWUoXCIuLi9jb3JlL0NvbW1vblwiKSxzPWUoXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIiksYT1lKFwiLi9Cb2R5XCIpOyFmdW5jdGlvbigpe28uY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiByLmV4dGVuZCh7aWQ6ci5uZXh0SWQoKSx0eXBlOlwiY29tcG9zaXRlXCIscGFyZW50Om51bGwsaXNNb2RpZmllZDohMSxib2RpZXM6W10sY29uc3RyYWludHM6W10sY29tcG9zaXRlczpbXSxcbmxhYmVsOlwiQ29tcG9zaXRlXCIscGx1Z2luOnt9fSxlKX0sby5zZXRNb2RpZmllZD1mdW5jdGlvbihlLHQsbixpKXtpZihlLmlzTW9kaWZpZWQ9dCxuJiZlLnBhcmVudCYmby5zZXRNb2RpZmllZChlLnBhcmVudCx0LG4saSksaSlmb3IodmFyIHI9MDtyPGUuY29tcG9zaXRlcy5sZW5ndGg7cisrKXt2YXIgcz1lLmNvbXBvc2l0ZXNbcl07by5zZXRNb2RpZmllZChzLHQsbixpKX19LG8uYWRkPWZ1bmN0aW9uKGUsdCl7dmFyIG49W10uY29uY2F0KHQpO2kudHJpZ2dlcihlLFwiYmVmb3JlQWRkXCIse29iamVjdDp0fSk7Zm9yKHZhciBzPTA7czxuLmxlbmd0aDtzKyspe3ZhciBhPW5bc107c3dpdGNoKGEudHlwZSl7Y2FzZVwiYm9keVwiOmlmKGEucGFyZW50IT09YSl7ci53YXJuKFwiQ29tcG9zaXRlLmFkZDogc2tpcHBlZCBhZGRpbmcgYSBjb21wb3VuZCBib2R5IHBhcnQgKHlvdSBtdXN0IGFkZCBpdHMgcGFyZW50IGluc3RlYWQpXCIpO2JyZWFrfW8uYWRkQm9keShlLGEpO2JyZWFrO2Nhc2VcImNvbnN0cmFpbnRcIjpvLmFkZENvbnN0cmFpbnQoZSxhKTticmVhaztjYXNlXCJjb21wb3NpdGVcIjpvLmFkZENvbXBvc2l0ZShlLGEpO2JyZWFrO2Nhc2VcIm1vdXNlQ29uc3RyYWludFwiOm8uYWRkQ29uc3RyYWludChlLGEuY29uc3RyYWludCl9fXJldHVybiBpLnRyaWdnZXIoZSxcImFmdGVyQWRkXCIse29iamVjdDp0fSksZX0sby5yZW1vdmU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPVtdLmNvbmNhdCh0KTtpLnRyaWdnZXIoZSxcImJlZm9yZVJlbW92ZVwiLHtvYmplY3Q6dH0pO2Zvcih2YXIgcz0wO3M8ci5sZW5ndGg7cysrKXt2YXIgYT1yW3NdO3N3aXRjaChhLnR5cGUpe2Nhc2VcImJvZHlcIjpvLnJlbW92ZUJvZHkoZSxhLG4pO2JyZWFrO2Nhc2VcImNvbnN0cmFpbnRcIjpvLnJlbW92ZUNvbnN0cmFpbnQoZSxhLG4pO2JyZWFrO2Nhc2VcImNvbXBvc2l0ZVwiOm8ucmVtb3ZlQ29tcG9zaXRlKGUsYSxuKTticmVhaztjYXNlXCJtb3VzZUNvbnN0cmFpbnRcIjpcbm8ucmVtb3ZlQ29uc3RyYWludChlLGEuY29uc3RyYWludCl9fXJldHVybiBpLnRyaWdnZXIoZSxcImFmdGVyUmVtb3ZlXCIse29iamVjdDp0fSksZX0sby5hZGRDb21wb3NpdGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5jb21wb3NpdGVzLnB1c2godCksdC5wYXJlbnQ9ZSxvLnNldE1vZGlmaWVkKGUsITAsITAsITEpLGV9LG8ucmVtb3ZlQ29tcG9zaXRlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaT1yLmluZGV4T2YoZS5jb21wb3NpdGVzLHQpO2lmKC0xIT09aSYmKG8ucmVtb3ZlQ29tcG9zaXRlQXQoZSxpKSxvLnNldE1vZGlmaWVkKGUsITAsITAsITEpKSxuKWZvcih2YXIgcz0wO3M8ZS5jb21wb3NpdGVzLmxlbmd0aDtzKyspby5yZW1vdmVDb21wb3NpdGUoZS5jb21wb3NpdGVzW3NdLHQsITApO3JldHVybiBlfSxvLnJlbW92ZUNvbXBvc2l0ZUF0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuY29tcG9zaXRlcy5zcGxpY2UodCwxKSxvLnNldE1vZGlmaWVkKGUsITAsITAsITEpLGV9LG8uYWRkQm9keT1mdW5jdGlvbihlLHQpe3JldHVybiBlLmJvZGllcy5wdXNoKHQpLG8uc2V0TW9kaWZpZWQoZSwhMCwhMCwhMSksZX0sby5yZW1vdmVCb2R5PWZ1bmN0aW9uKGUsdCxuKXt2YXIgaT1yLmluZGV4T2YoZS5ib2RpZXMsdCk7aWYoLTEhPT1pJiYoby5yZW1vdmVCb2R5QXQoZSxpKSxvLnNldE1vZGlmaWVkKGUsITAsITAsITEpKSxuKWZvcih2YXIgcz0wO3M8ZS5jb21wb3NpdGVzLmxlbmd0aDtzKyspby5yZW1vdmVCb2R5KGUuY29tcG9zaXRlc1tzXSx0LCEwKTtyZXR1cm4gZX0sby5yZW1vdmVCb2R5QXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5ib2RpZXMuc3BsaWNlKHQsMSksby5zZXRNb2RpZmllZChlLCEwLCEwLCExKSxlfSxvLmFkZENvbnN0cmFpbnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5jb25zdHJhaW50cy5wdXNoKHQpLG8uc2V0TW9kaWZpZWQoZSwhMCwhMCwhMSksZX0sby5yZW1vdmVDb25zdHJhaW50PWZ1bmN0aW9uKGUsdCxuKXtcbnZhciBpPXIuaW5kZXhPZihlLmNvbnN0cmFpbnRzLHQpO2lmKC0xIT09aSYmby5yZW1vdmVDb25zdHJhaW50QXQoZSxpKSxuKWZvcih2YXIgcz0wO3M8ZS5jb21wb3NpdGVzLmxlbmd0aDtzKyspby5yZW1vdmVDb25zdHJhaW50KGUuY29tcG9zaXRlc1tzXSx0LCEwKTtyZXR1cm4gZX0sby5yZW1vdmVDb25zdHJhaW50QXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5jb25zdHJhaW50cy5zcGxpY2UodCwxKSxvLnNldE1vZGlmaWVkKGUsITAsITAsITEpLGV9LG8uY2xlYXI9ZnVuY3Rpb24oZSx0LG4pe2lmKG4pZm9yKHZhciBpPTA7aTxlLmNvbXBvc2l0ZXMubGVuZ3RoO2krKylvLmNsZWFyKGUuY29tcG9zaXRlc1tpXSx0LCEwKTtyZXR1cm4gdD9lLmJvZGllcz1lLmJvZGllcy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaXNTdGF0aWN9KTplLmJvZGllcy5sZW5ndGg9MCxlLmNvbnN0cmFpbnRzLmxlbmd0aD0wLGUuY29tcG9zaXRlcy5sZW5ndGg9MCxvLnNldE1vZGlmaWVkKGUsITAsITAsITEpLGV9LG8uYWxsQm9kaWVzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXS5jb25jYXQoZS5ib2RpZXMpLG49MDtuPGUuY29tcG9zaXRlcy5sZW5ndGg7bisrKXQ9dC5jb25jYXQoby5hbGxCb2RpZXMoZS5jb21wb3NpdGVzW25dKSk7cmV0dXJuIHR9LG8uYWxsQ29uc3RyYWludHM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLmNvbmNhdChlLmNvbnN0cmFpbnRzKSxuPTA7bjxlLmNvbXBvc2l0ZXMubGVuZ3RoO24rKyl0PXQuY29uY2F0KG8uYWxsQ29uc3RyYWludHMoZS5jb21wb3NpdGVzW25dKSk7cmV0dXJuIHR9LG8uYWxsQ29tcG9zaXRlcz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10uY29uY2F0KGUuY29tcG9zaXRlcyksbj0wO248ZS5jb21wb3NpdGVzLmxlbmd0aDtuKyspdD10LmNvbmNhdChvLmFsbENvbXBvc2l0ZXMoZS5jb21wb3NpdGVzW25dKSk7cmV0dXJuIHR9LG8uZ2V0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgaSxyO3N3aXRjaChuKXtjYXNlXCJib2R5XCI6XG5pPW8uYWxsQm9kaWVzKGUpO2JyZWFrO2Nhc2VcImNvbnN0cmFpbnRcIjppPW8uYWxsQ29uc3RyYWludHMoZSk7YnJlYWs7Y2FzZVwiY29tcG9zaXRlXCI6aT1vLmFsbENvbXBvc2l0ZXMoZSkuY29uY2F0KGUpfXJldHVybiBpPyhyPWkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkLnRvU3RyaW5nKCk9PT10LnRvU3RyaW5nKCl9KSwwPT09ci5sZW5ndGg/bnVsbDpyWzBdKTpudWxsfSxvLm1vdmU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBvLnJlbW92ZShlLHQpLG8uYWRkKG4sdCksZX0sby5yZWJhc2U9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PW8uYWxsQm9kaWVzKGUpLmNvbmNhdChvLmFsbENvbnN0cmFpbnRzKGUpKS5jb25jYXQoby5hbGxDb21wb3NpdGVzKGUpKSxuPTA7bjx0Lmxlbmd0aDtuKyspdFtuXS5pZD1yLm5leHRJZCgpO3JldHVybiBvLnNldE1vZGlmaWVkKGUsITAsITAsITEpLGV9LG8udHJhbnNsYXRlPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIGk9bj9vLmFsbEJvZGllcyhlKTplLmJvZGllcyxyPTA7cjxpLmxlbmd0aDtyKyspYS50cmFuc2xhdGUoaVtyXSx0KTtyZXR1cm4gby5zZXRNb2RpZmllZChlLCEwLCEwLCExKSxlfSxvLnJvdGF0ZT1mdW5jdGlvbihlLHQsbixpKXtmb3IodmFyIHI9TWF0aC5jb3ModCkscz1NYXRoLnNpbih0KSxsPWk/by5hbGxCb2RpZXMoZSk6ZS5ib2RpZXMsYz0wO2M8bC5sZW5ndGg7YysrKXt2YXIgZD1sW2NdLHU9ZC5wb3NpdGlvbi54LW4ueCxwPWQucG9zaXRpb24ueS1uLnk7YS5zZXRQb3NpdGlvbihkLHt4Om4ueCsodSpyLXAqcykseTpuLnkrKHUqcytwKnIpfSksYS5yb3RhdGUoZCx0KX1yZXR1cm4gby5zZXRNb2RpZmllZChlLCEwLCEwLCExKSxlfSxvLnNjYWxlPWZ1bmN0aW9uKGUsdCxuLGkscil7Zm9yKHZhciBzPXI/by5hbGxCb2RpZXMoZSk6ZS5ib2RpZXMsbD0wO2w8cy5sZW5ndGg7bCsrKXt2YXIgYz1zW2xdLGQ9Yy5wb3NpdGlvbi54LWkueCx1PWMucG9zaXRpb24ueS1pLnlcbjthLnNldFBvc2l0aW9uKGMse3g6aS54K2QqdCx5OmkueSt1Km59KSxhLnNjYWxlKGMsdCxuKX1yZXR1cm4gby5zZXRNb2RpZmllZChlLCEwLCEwLCExKSxlfSxvLmJvdW5kcz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9by5hbGxCb2RpZXMoZSksbj1bXSxpPTA7aTx0Lmxlbmd0aDtpKz0xKXt2YXIgcj10W2ldO24ucHVzaChyLmJvdW5kcy5taW4sci5ib3VuZHMubWF4KX1yZXR1cm4gcy5jcmVhdGUobil9fSgpfSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FdmVudHNcIjoxNixcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi9Cb2R5XCI6MX1dLDM6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9bzt2YXIgaT1lKFwiLi9Db21wb3NpdGVcIikscj0oZShcIi4uL2NvbnN0cmFpbnQvQ29uc3RyYWludFwiKSxlKFwiLi4vY29yZS9Db21tb25cIikpOyFmdW5jdGlvbigpe28uY3JlYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PWkuY3JlYXRlKCksbj17bGFiZWw6XCJXb3JsZFwiLGdyYXZpdHk6e3g6MCx5OjEsc2NhbGU6LjAwMX0sYm91bmRzOnttaW46e3g6LTEvMCx5Oi0xLzB9LG1heDp7eDoxLzAseToxLzB9fX07cmV0dXJuIHIuZXh0ZW5kKHQsbixlKX19KCl9LHtcIi4uL2NvbnN0cmFpbnQvQ29uc3RyYWludFwiOjEyLFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4vQ29tcG9zaXRlXCI6Mn1dLDQ6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9byxmdW5jdGlvbigpe28uY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybntpZDpvLmlkKGUpLHZlcnRleDplLG5vcm1hbEltcHVsc2U6MCx0YW5nZW50SW1wdWxzZTowfX0sby5pZD1mdW5jdGlvbihlKXtyZXR1cm4gZS5ib2R5LmlkK1wiX1wiK2UuaW5kZXh9fSgpfSx7fV0sNTpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuL1NBVFwiKSxyPWUoXCIuL1BhaXJcIikscz1lKFwiLi4vZ2VvbWV0cnkvQm91bmRzXCIpOyFmdW5jdGlvbigpe28uY29sbGlzaW9ucz1mdW5jdGlvbihlLHQpe1xuZm9yKHZhciBuPVtdLGE9dC5wYWlycy50YWJsZSxsPTA7bDxlLmxlbmd0aDtsKyspe3ZhciBjPWVbbF1bMF0sZD1lW2xdWzFdO2lmKCghYy5pc1N0YXRpYyYmIWMuaXNTbGVlcGluZ3x8IWQuaXNTdGF0aWMmJiFkLmlzU2xlZXBpbmcpJiYoby5jYW5Db2xsaWRlKGMuY29sbGlzaW9uRmlsdGVyLGQuY29sbGlzaW9uRmlsdGVyKSYmcy5vdmVybGFwcyhjLmJvdW5kcyxkLmJvdW5kcykpKWZvcih2YXIgdT1jLnBhcnRzLmxlbmd0aD4xPzE6MDt1PGMucGFydHMubGVuZ3RoO3UrKylmb3IodmFyIHA9Yy5wYXJ0c1t1XSxmPWQucGFydHMubGVuZ3RoPjE/MTowO2Y8ZC5wYXJ0cy5sZW5ndGg7ZisrKXt2YXIgbT1kLnBhcnRzW2ZdO2lmKHA9PT1jJiZtPT09ZHx8cy5vdmVybGFwcyhwLmJvdW5kcyxtLmJvdW5kcykpe3ZhciB2LHk9ci5pZChwLG0pLGc9YVt5XTt2PWcmJmcuaXNBY3RpdmU/Zy5jb2xsaXNpb246bnVsbDt2YXIgeD1pLmNvbGxpZGVzKHAsbSx2KTt4LmNvbGxpZGVkJiZuLnB1c2goeCl9fX1yZXR1cm4gbn0sby5jYW5Db2xsaWRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuZ3JvdXA9PT10Lmdyb3VwJiYwIT09ZS5ncm91cD9lLmdyb3VwPjA6MCE9KGUubWFzayZ0LmNhdGVnb3J5KSYmMCE9KHQubWFzayZlLmNhdGVnb3J5KX19KCl9LHtcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi9QYWlyXCI6NyxcIi4vU0FUXCI6MTF9XSw2OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4vUGFpclwiKSxyPWUoXCIuL0RldGVjdG9yXCIpLHM9ZShcIi4uL2NvcmUvQ29tbW9uXCIpOyFmdW5jdGlvbigpe28uY3JlYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PXtjb250cm9sbGVyOm8sZGV0ZWN0b3I6ci5jb2xsaXNpb25zLGJ1Y2tldHM6e30scGFpcnM6e30scGFpcnNMaXN0OltdLGJ1Y2tldFdpZHRoOjQ4LGJ1Y2tldEhlaWdodDo0OH07cmV0dXJuIHMuZXh0ZW5kKHQsZSl9LG8udXBkYXRlPWZ1bmN0aW9uKGUsdCxuLGkpe1xudmFyIHIscyxhLGwsYyxkPW4ud29ybGQsdT1lLmJ1Y2tldHMscD0hMTtmb3Iocj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgZj10W3JdO2lmKCghZi5pc1NsZWVwaW5nfHxpKSYmIShmLmJvdW5kcy5tYXgueDxkLmJvdW5kcy5taW4ueHx8Zi5ib3VuZHMubWluLng+ZC5ib3VuZHMubWF4Lnh8fGYuYm91bmRzLm1heC55PGQuYm91bmRzLm1pbi55fHxmLmJvdW5kcy5taW4ueT5kLmJvdW5kcy5tYXgueSkpe3ZhciBtPW8uX2dldFJlZ2lvbihlLGYpO2lmKCFmLnJlZ2lvbnx8bS5pZCE9PWYucmVnaW9uLmlkfHxpKXtmLnJlZ2lvbiYmIWl8fChmLnJlZ2lvbj1tKTt2YXIgdj1vLl9yZWdpb25VbmlvbihtLGYucmVnaW9uKTtmb3Iocz12LnN0YXJ0Q29sO3M8PXYuZW5kQ29sO3MrKylmb3IoYT12LnN0YXJ0Um93O2E8PXYuZW5kUm93O2ErKyl7Yz1vLl9nZXRCdWNrZXRJZChzLGEpLGw9dVtjXTt2YXIgeT1zPj1tLnN0YXJ0Q29sJiZzPD1tLmVuZENvbCYmYT49bS5zdGFydFJvdyYmYTw9bS5lbmRSb3csZz1zPj1mLnJlZ2lvbi5zdGFydENvbCYmczw9Zi5yZWdpb24uZW5kQ29sJiZhPj1mLnJlZ2lvbi5zdGFydFJvdyYmYTw9Zi5yZWdpb24uZW5kUm93OyF5JiZnJiZnJiZsJiZvLl9idWNrZXRSZW1vdmVCb2R5KGUsbCxmKSwoZi5yZWdpb249PT1tfHx5JiYhZ3x8aSkmJihsfHwobD1vLl9jcmVhdGVCdWNrZXQodSxjKSksby5fYnVja2V0QWRkQm9keShlLGwsZikpfWYucmVnaW9uPW0scD0hMH19fXAmJihlLnBhaXJzTGlzdD1vLl9jcmVhdGVBY3RpdmVQYWlyc0xpc3QoZSkpfSxvLmNsZWFyPWZ1bmN0aW9uKGUpe2UuYnVja2V0cz17fSxlLnBhaXJzPXt9LGUucGFpcnNMaXN0PVtdfSxvLl9yZWdpb25Vbmlvbj1mdW5jdGlvbihlLHQpe3ZhciBuPU1hdGgubWluKGUuc3RhcnRDb2wsdC5zdGFydENvbCksaT1NYXRoLm1heChlLmVuZENvbCx0LmVuZENvbCkscj1NYXRoLm1pbihlLnN0YXJ0Um93LHQuc3RhcnRSb3cpLHM9TWF0aC5tYXgoZS5lbmRSb3csdC5lbmRSb3cpXG47cmV0dXJuIG8uX2NyZWF0ZVJlZ2lvbihuLGkscixzKX0sby5fZ2V0UmVnaW9uPWZ1bmN0aW9uKGUsdCl7dmFyIG49dC5ib3VuZHMsaT1NYXRoLmZsb29yKG4ubWluLngvZS5idWNrZXRXaWR0aCkscj1NYXRoLmZsb29yKG4ubWF4LngvZS5idWNrZXRXaWR0aCkscz1NYXRoLmZsb29yKG4ubWluLnkvZS5idWNrZXRIZWlnaHQpLGE9TWF0aC5mbG9vcihuLm1heC55L2UuYnVja2V0SGVpZ2h0KTtyZXR1cm4gby5fY3JlYXRlUmVnaW9uKGkscixzLGEpfSxvLl9jcmVhdGVSZWdpb249ZnVuY3Rpb24oZSx0LG4sbyl7cmV0dXJue2lkOmUrXCIsXCIrdCtcIixcIituK1wiLFwiK28sc3RhcnRDb2w6ZSxlbmRDb2w6dCxzdGFydFJvdzpuLGVuZFJvdzpvfX0sby5fZ2V0QnVja2V0SWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cIkNcIitlK1wiUlwiK3R9LG8uX2NyZWF0ZUJ1Y2tldD1mdW5jdGlvbihlLHQpe3JldHVybiBlW3RdPVtdfSxvLl9idWNrZXRBZGRCb2R5PWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIHI9dFtvXTtpZighKG4uaWQ9PT1yLmlkfHxuLmlzU3RhdGljJiZyLmlzU3RhdGljKSl7dmFyIHM9aS5pZChuLHIpLGE9ZS5wYWlyc1tzXTthP2FbMl0rPTE6ZS5wYWlyc1tzXT1bbixyLDFdfX10LnB1c2gobil9LG8uX2J1Y2tldFJlbW92ZUJvZHk9ZnVuY3Rpb24oZSx0LG4pe3Quc3BsaWNlKHMuaW5kZXhPZih0LG4pLDEpO2Zvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXt2YXIgcj10W29dLGE9aS5pZChuLHIpLGw9ZS5wYWlyc1thXTtsJiYobFsyXS09MSl9fSxvLl9jcmVhdGVBY3RpdmVQYWlyc0xpc3Q9ZnVuY3Rpb24oZSl7dmFyIHQsbixvPVtdO3Q9cy5rZXlzKGUucGFpcnMpO2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKW49ZS5wYWlyc1t0W2ldXSxuWzJdPjA/by5wdXNoKG4pOmRlbGV0ZSBlLnBhaXJzW3RbaV1dO3JldHVybiBvfX0oKX0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4vRGV0ZWN0b3JcIjo1LFwiLi9QYWlyXCI6N31dLFxuNzpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuL0NvbnRhY3RcIik7IWZ1bmN0aW9uKCl7by5jcmVhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmJvZHlBLGk9ZS5ib2R5QixyPWUucGFyZW50QSxzPWUucGFyZW50QixhPXtpZDpvLmlkKG4saSksYm9keUE6bixib2R5QjppLGNvbnRhY3RzOnt9LGFjdGl2ZUNvbnRhY3RzOltdLHNlcGFyYXRpb246MCxpc0FjdGl2ZTohMCxpc1NlbnNvcjpuLmlzU2Vuc29yfHxpLmlzU2Vuc29yLHRpbWVDcmVhdGVkOnQsdGltZVVwZGF0ZWQ6dCxpbnZlcnNlTWFzczpyLmludmVyc2VNYXNzK3MuaW52ZXJzZU1hc3MsZnJpY3Rpb246TWF0aC5taW4oci5mcmljdGlvbixzLmZyaWN0aW9uKSxmcmljdGlvblN0YXRpYzpNYXRoLm1heChyLmZyaWN0aW9uU3RhdGljLHMuZnJpY3Rpb25TdGF0aWMpLHJlc3RpdHV0aW9uOk1hdGgubWF4KHIucmVzdGl0dXRpb24scy5yZXN0aXR1dGlvbiksc2xvcDpNYXRoLm1heChyLnNsb3Ascy5zbG9wKX07cmV0dXJuIG8udXBkYXRlKGEsZSx0KSxhfSxvLnVwZGF0ZT1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZS5jb250YWN0cyxzPXQuc3VwcG9ydHMsYT1lLmFjdGl2ZUNvbnRhY3RzLGw9dC5wYXJlbnRBLGM9dC5wYXJlbnRCO2lmKGUuY29sbGlzaW9uPXQsZS5pbnZlcnNlTWFzcz1sLmludmVyc2VNYXNzK2MuaW52ZXJzZU1hc3MsZS5mcmljdGlvbj1NYXRoLm1pbihsLmZyaWN0aW9uLGMuZnJpY3Rpb24pLGUuZnJpY3Rpb25TdGF0aWM9TWF0aC5tYXgobC5mcmljdGlvblN0YXRpYyxjLmZyaWN0aW9uU3RhdGljKSxlLnJlc3RpdHV0aW9uPU1hdGgubWF4KGwucmVzdGl0dXRpb24sYy5yZXN0aXR1dGlvbiksZS5zbG9wPU1hdGgubWF4KGwuc2xvcCxjLnNsb3ApLGEubGVuZ3RoPTAsdC5jb2xsaWRlZCl7Zm9yKHZhciBkPTA7ZDxzLmxlbmd0aDtkKyspe3ZhciB1PXNbZF0scD1pLmlkKHUpLGY9cltwXTtmP2EucHVzaChmKTphLnB1c2gocltwXT1pLmNyZWF0ZSh1KSl9XG5lLnNlcGFyYXRpb249dC5kZXB0aCxvLnNldEFjdGl2ZShlLCEwLG4pfWVsc2UhMD09PWUuaXNBY3RpdmUmJm8uc2V0QWN0aXZlKGUsITEsbil9LG8uc2V0QWN0aXZlPWZ1bmN0aW9uKGUsdCxuKXt0PyhlLmlzQWN0aXZlPSEwLGUudGltZVVwZGF0ZWQ9bik6KGUuaXNBY3RpdmU9ITEsZS5hY3RpdmVDb250YWN0cy5sZW5ndGg9MCl9LG8uaWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5pZDx0LmlkP1wiQVwiK2UuaWQrXCJCXCIrdC5pZDpcIkFcIit0LmlkK1wiQlwiK2UuaWR9fSgpfSx7XCIuL0NvbnRhY3RcIjo0fV0sODpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuL1BhaXJcIikscj1lKFwiLi4vY29yZS9Db21tb25cIik7IWZ1bmN0aW9uKCl7by5fcGFpck1heElkbGVMaWZlPTFlMyxvLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gci5leHRlbmQoe3RhYmxlOnt9LGxpc3Q6W10sY29sbGlzaW9uU3RhcnQ6W10sY29sbGlzaW9uQWN0aXZlOltdLGNvbGxpc2lvbkVuZDpbXX0sZSl9LG8udXBkYXRlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxzLGEsbCxjPWUubGlzdCxkPWUudGFibGUsdT1lLmNvbGxpc2lvblN0YXJ0LHA9ZS5jb2xsaXNpb25FbmQsZj1lLmNvbGxpc2lvbkFjdGl2ZSxtPVtdO2Zvcih1Lmxlbmd0aD0wLHAubGVuZ3RoPTAsZi5sZW5ndGg9MCxsPTA7bDx0Lmxlbmd0aDtsKyspbz10W2xdLG8uY29sbGlkZWQmJihzPWkuaWQoby5ib2R5QSxvLmJvZHlCKSxtLnB1c2gocyksYT1kW3NdLGE/KGEuaXNBY3RpdmU/Zi5wdXNoKGEpOnUucHVzaChhKSxpLnVwZGF0ZShhLG8sbikpOihhPWkuY3JlYXRlKG8sbiksZFtzXT1hLHUucHVzaChhKSxjLnB1c2goYSkpKTtmb3IobD0wO2w8Yy5sZW5ndGg7bCsrKWE9Y1tsXSxhLmlzQWN0aXZlJiYtMT09PXIuaW5kZXhPZihtLGEuaWQpJiYoaS5zZXRBY3RpdmUoYSwhMSxuKSxwLnB1c2goYSkpfSxvLnJlbW92ZU9sZD1mdW5jdGlvbihlLHQpe1xudmFyIG4saSxyLHMsYT1lLmxpc3QsbD1lLnRhYmxlLGM9W107Zm9yKHM9MDtzPGEubGVuZ3RoO3MrKyluPWFbc10saT1uLmNvbGxpc2lvbixpLmJvZHlBLmlzU2xlZXBpbmd8fGkuYm9keUIuaXNTbGVlcGluZz9uLnRpbWVVcGRhdGVkPXQ6dC1uLnRpbWVVcGRhdGVkPm8uX3BhaXJNYXhJZGxlTGlmZSYmYy5wdXNoKHMpO2ZvcihzPTA7czxjLmxlbmd0aDtzKyspcj1jW3NdLXMsbj1hW3JdLGRlbGV0ZSBsW24uaWRdLGEuc3BsaWNlKHIsMSl9LG8uY2xlYXI9ZnVuY3Rpb24oZSl7cmV0dXJuIGUudGFibGU9e30sZS5saXN0Lmxlbmd0aD0wLGUuY29sbGlzaW9uU3RhcnQubGVuZ3RoPTAsZS5jb2xsaXNpb25BY3RpdmUubGVuZ3RoPTAsZS5jb2xsaXNpb25FbmQubGVuZ3RoPTAsZX19KCl9LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuL1BhaXJcIjo3fV0sOTpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuLi9nZW9tZXRyeS9WZWN0b3JcIikscj1lKFwiLi9TQVRcIikscz1lKFwiLi4vZ2VvbWV0cnkvQm91bmRzXCIpLGE9ZShcIi4uL2ZhY3RvcnkvQm9kaWVzXCIpLGw9ZShcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCIpOyFmdW5jdGlvbigpe28uY29sbGlkZXM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W10sbz0wO288dC5sZW5ndGg7bysrKXt2YXIgaT10W29dO2lmKHMub3ZlcmxhcHMoaS5ib3VuZHMsZS5ib3VuZHMpKWZvcih2YXIgYT0xPT09aS5wYXJ0cy5sZW5ndGg/MDoxO2E8aS5wYXJ0cy5sZW5ndGg7YSsrKXt2YXIgbD1pLnBhcnRzW2FdO2lmKHMub3ZlcmxhcHMobC5ib3VuZHMsZS5ib3VuZHMpKXt2YXIgYz1yLmNvbGxpZGVzKGwsZSk7aWYoYy5jb2xsaWRlZCl7bi5wdXNoKGMpO2JyZWFrfX19fXJldHVybiBufSxvLnJheT1mdW5jdGlvbihlLHQsbixyKXtyPXJ8fDFlLTEwMFxuO2Zvcih2YXIgcz1pLmFuZ2xlKHQsbiksbD1pLm1hZ25pdHVkZShpLnN1Yih0LG4pKSxjPS41KihuLngrdC54KSxkPS41KihuLnkrdC55KSx1PWEucmVjdGFuZ2xlKGMsZCxsLHIse2FuZ2xlOnN9KSxwPW8uY29sbGlkZXModSxlKSxmPTA7ZjxwLmxlbmd0aDtmKz0xKXt2YXIgbT1wW2ZdO20uYm9keT1tLmJvZHlCPW0uYm9keUF9cmV0dXJuIHB9LG8ucmVnaW9uPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIG89W10saT0wO2k8ZS5sZW5ndGg7aSsrKXt2YXIgcj1lW2ldLGE9cy5vdmVybGFwcyhyLmJvdW5kcyx0KTsoYSYmIW58fCFhJiZuKSYmby5wdXNoKHIpfXJldHVybiBvfSxvLnBvaW50PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtdLG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIGk9ZVtvXTtpZihzLmNvbnRhaW5zKGkuYm91bmRzLHQpKWZvcih2YXIgcj0xPT09aS5wYXJ0cy5sZW5ndGg/MDoxO3I8aS5wYXJ0cy5sZW5ndGg7cisrKXt2YXIgYT1pLnBhcnRzW3JdO2lmKHMuY29udGFpbnMoYS5ib3VuZHMsdCkmJmwuY29udGFpbnMoYS52ZXJ0aWNlcyx0KSl7bi5wdXNoKGkpO2JyZWFrfX19cmV0dXJuIG59fSgpfSx7XCIuLi9mYWN0b3J5L0JvZGllc1wiOjIzLFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOCxcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCI6MjksXCIuL1NBVFwiOjExfV0sMTA6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9bzt2YXIgaT1lKFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIikscj1lKFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCIpLHM9ZShcIi4uL2NvcmUvQ29tbW9uXCIpLGE9ZShcIi4uL2dlb21ldHJ5L0JvdW5kc1wiKTshZnVuY3Rpb24oKXtvLl9yZXN0aW5nVGhyZXNoPTQsby5fcmVzdGluZ1RocmVzaFRhbmdlbnQ9NixvLl9wb3NpdGlvbkRhbXBlbj0uOSxvLl9wb3NpdGlvbldhcm1pbmc9Ljgsby5fZnJpY3Rpb25Ob3JtYWxNdWx0aXBsaWVyPTUsby5wcmVTb2x2ZVBvc2l0aW9uPWZ1bmN0aW9uKGUpe1xudmFyIHQsbixvO2Zvcih0PTA7dDxlLmxlbmd0aDt0Kyspbj1lW3RdLG4uaXNBY3RpdmUmJihvPW4uYWN0aXZlQ29udGFjdHMubGVuZ3RoLG4uY29sbGlzaW9uLnBhcmVudEEudG90YWxDb250YWN0cys9byxuLmNvbGxpc2lvbi5wYXJlbnRCLnRvdGFsQ29udGFjdHMrPW8pfSxvLnNvbHZlUG9zaXRpb249ZnVuY3Rpb24oZSx0KXt2YXIgbixpLHMsYSxsLGMsZCx1LHAsZj1yLl90ZW1wWzBdLG09ci5fdGVtcFsxXSx2PXIuX3RlbXBbMl0seT1yLl90ZW1wWzNdO2ZvcihuPTA7bjxlLmxlbmd0aDtuKyspaT1lW25dLGkuaXNBY3RpdmUmJiFpLmlzU2Vuc29yJiYocz1pLmNvbGxpc2lvbixhPXMucGFyZW50QSxsPXMucGFyZW50QixjPXMubm9ybWFsLGQ9ci5zdWIoci5hZGQobC5wb3NpdGlvbkltcHVsc2UsbC5wb3NpdGlvbixmKSxyLmFkZChhLnBvc2l0aW9uSW1wdWxzZSxyLnN1YihsLnBvc2l0aW9uLHMucGVuZXRyYXRpb24sbSksdikseSksaS5zZXBhcmF0aW9uPXIuZG90KGMsZCkpO2ZvcihuPTA7bjxlLmxlbmd0aDtuKyspaT1lW25dLGkuaXNBY3RpdmUmJiFpLmlzU2Vuc29yJiYocz1pLmNvbGxpc2lvbixhPXMucGFyZW50QSxsPXMucGFyZW50QixjPXMubm9ybWFsLHA9KGkuc2VwYXJhdGlvbi1pLnNsb3ApKnQsKGEuaXNTdGF0aWN8fGwuaXNTdGF0aWMpJiYocCo9MiksYS5pc1N0YXRpY3x8YS5pc1NsZWVwaW5nfHwodT1vLl9wb3NpdGlvbkRhbXBlbi9hLnRvdGFsQ29udGFjdHMsYS5wb3NpdGlvbkltcHVsc2UueCs9Yy54KnAqdSxhLnBvc2l0aW9uSW1wdWxzZS55Kz1jLnkqcCp1KSxsLmlzU3RhdGljfHxsLmlzU2xlZXBpbmd8fCh1PW8uX3Bvc2l0aW9uRGFtcGVuL2wudG90YWxDb250YWN0cyxsLnBvc2l0aW9uSW1wdWxzZS54LT1jLngqcCp1LGwucG9zaXRpb25JbXB1bHNlLnktPWMueSpwKnUpKX0sby5wb3N0U29sdmVQb3NpdGlvbj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG49ZVt0XVxuO2lmKG4udG90YWxDb250YWN0cz0wLDAhPT1uLnBvc2l0aW9uSW1wdWxzZS54fHwwIT09bi5wb3NpdGlvbkltcHVsc2UueSl7Zm9yKHZhciBzPTA7czxuLnBhcnRzLmxlbmd0aDtzKyspe3ZhciBsPW4ucGFydHNbc107aS50cmFuc2xhdGUobC52ZXJ0aWNlcyxuLnBvc2l0aW9uSW1wdWxzZSksYS51cGRhdGUobC5ib3VuZHMsbC52ZXJ0aWNlcyxuLnZlbG9jaXR5KSxsLnBvc2l0aW9uLngrPW4ucG9zaXRpb25JbXB1bHNlLngsbC5wb3NpdGlvbi55Kz1uLnBvc2l0aW9uSW1wdWxzZS55fW4ucG9zaXRpb25QcmV2LngrPW4ucG9zaXRpb25JbXB1bHNlLngsbi5wb3NpdGlvblByZXYueSs9bi5wb3NpdGlvbkltcHVsc2UueSxyLmRvdChuLnBvc2l0aW9uSW1wdWxzZSxuLnZlbG9jaXR5KTwwPyhuLnBvc2l0aW9uSW1wdWxzZS54PTAsbi5wb3NpdGlvbkltcHVsc2UueT0wKToobi5wb3NpdGlvbkltcHVsc2UueCo9by5fcG9zaXRpb25XYXJtaW5nLG4ucG9zaXRpb25JbXB1bHNlLnkqPW8uX3Bvc2l0aW9uV2FybWluZyl9fX0sby5wcmVTb2x2ZVZlbG9jaXR5PWZ1bmN0aW9uKGUpe3ZhciB0LG4sbyxpLHMsYSxsLGMsZCx1LHAsZixtLHYseT1yLl90ZW1wWzBdLGc9ci5fdGVtcFsxXTtmb3IodD0wO3Q8ZS5sZW5ndGg7dCsrKWlmKG89ZVt0XSxvLmlzQWN0aXZlJiYhby5pc1NlbnNvcilmb3IoaT1vLmFjdGl2ZUNvbnRhY3RzLHM9by5jb2xsaXNpb24sYT1zLnBhcmVudEEsbD1zLnBhcmVudEIsYz1zLm5vcm1hbCxkPXMudGFuZ2VudCxuPTA7bjxpLmxlbmd0aDtuKyspdT1pW25dLHA9dS52ZXJ0ZXgsZj11Lm5vcm1hbEltcHVsc2UsbT11LnRhbmdlbnRJbXB1bHNlLDA9PT1mJiYwPT09bXx8KHkueD1jLngqZitkLngqbSx5Lnk9Yy55KmYrZC55Km0sYS5pc1N0YXRpY3x8YS5pc1NsZWVwaW5nfHwodj1yLnN1YihwLGEucG9zaXRpb24sZyksYS5wb3NpdGlvblByZXYueCs9eS54KmEuaW52ZXJzZU1hc3MsYS5wb3NpdGlvblByZXYueSs9eS55KmEuaW52ZXJzZU1hc3MsXG5hLmFuZ2xlUHJldis9ci5jcm9zcyh2LHkpKmEuaW52ZXJzZUluZXJ0aWEpLGwuaXNTdGF0aWN8fGwuaXNTbGVlcGluZ3x8KHY9ci5zdWIocCxsLnBvc2l0aW9uLGcpLGwucG9zaXRpb25QcmV2LngtPXkueCpsLmludmVyc2VNYXNzLGwucG9zaXRpb25QcmV2LnktPXkueSpsLmludmVyc2VNYXNzLGwuYW5nbGVQcmV2LT1yLmNyb3NzKHYseSkqbC5pbnZlcnNlSW5lcnRpYSkpfSxvLnNvbHZlVmVsb2NpdHk9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dCp0LGk9ci5fdGVtcFswXSxhPXIuX3RlbXBbMV0sbD1yLl90ZW1wWzJdLGM9ci5fdGVtcFszXSxkPXIuX3RlbXBbNF0sdT1yLl90ZW1wWzVdLHA9MDtwPGUubGVuZ3RoO3ArKyl7dmFyIGY9ZVtwXTtpZihmLmlzQWN0aXZlJiYhZi5pc1NlbnNvcil7dmFyIG09Zi5jb2xsaXNpb24sdj1tLnBhcmVudEEseT1tLnBhcmVudEIsZz1tLm5vcm1hbCx4PW0udGFuZ2VudCxoPWYuYWN0aXZlQ29udGFjdHMsYj0xL2gubGVuZ3RoO3YudmVsb2NpdHkueD12LnBvc2l0aW9uLngtdi5wb3NpdGlvblByZXYueCx2LnZlbG9jaXR5Lnk9di5wb3NpdGlvbi55LXYucG9zaXRpb25QcmV2LnkseS52ZWxvY2l0eS54PXkucG9zaXRpb24ueC15LnBvc2l0aW9uUHJldi54LHkudmVsb2NpdHkueT15LnBvc2l0aW9uLnkteS5wb3NpdGlvblByZXYueSx2LmFuZ3VsYXJWZWxvY2l0eT12LmFuZ2xlLXYuYW5nbGVQcmV2LHkuYW5ndWxhclZlbG9jaXR5PXkuYW5nbGUteS5hbmdsZVByZXY7Zm9yKHZhciB3PTA7dzxoLmxlbmd0aDt3Kyspe1xudmFyIFM9aFt3XSxDPVMudmVydGV4LEE9ci5zdWIoQyx2LnBvc2l0aW9uLGEpLFA9ci5zdWIoQyx5LnBvc2l0aW9uLGwpLEI9ci5hZGQodi52ZWxvY2l0eSxyLm11bHQoci5wZXJwKEEpLHYuYW5ndWxhclZlbG9jaXR5KSxjKSxNPXIuYWRkKHkudmVsb2NpdHksci5tdWx0KHIucGVycChQKSx5LmFuZ3VsYXJWZWxvY2l0eSksZCksaz1yLnN1YihCLE0sdSksST1yLmRvdChnLGspLF89ci5kb3QoeCxrKSxUPU1hdGguYWJzKF8pLFI9cy5zaWduKF8pLFY9KDErZi5yZXN0aXR1dGlvbikqSSxFPXMuY2xhbXAoZi5zZXBhcmF0aW9uK0ksMCwxKSpvLl9mcmljdGlvbk5vcm1hbE11bHRpcGxpZXIsTD1fLEY9MS8wO1Q+Zi5mcmljdGlvbipmLmZyaWN0aW9uU3RhdGljKkUqbiYmKEY9VCxMPXMuY2xhbXAoZi5mcmljdGlvbipSKm4sLUYsRikpO3ZhciBPPXIuY3Jvc3MoQSxnKSxxPXIuY3Jvc3MoUCxnKSxXPWIvKHYuaW52ZXJzZU1hc3MreS5pbnZlcnNlTWFzcyt2LmludmVyc2VJbmVydGlhKk8qTyt5LmludmVyc2VJbmVydGlhKnEqcSk7aWYoVio9VyxMKj1XLEk8MCYmSSpJPm8uX3Jlc3RpbmdUaHJlc2gqbilTLm5vcm1hbEltcHVsc2U9MDtlbHNle3ZhciBEPVMubm9ybWFsSW1wdWxzZTtTLm5vcm1hbEltcHVsc2U9TWF0aC5taW4oUy5ub3JtYWxJbXB1bHNlK1YsMCksVj1TLm5vcm1hbEltcHVsc2UtRH1pZihfKl8+by5fcmVzdGluZ1RocmVzaFRhbmdlbnQqbilTLnRhbmdlbnRJbXB1bHNlPTA7ZWxzZXt2YXIgTj1TLnRhbmdlbnRJbXB1bHNlO1MudGFuZ2VudEltcHVsc2U9cy5jbGFtcChTLnRhbmdlbnRJbXB1bHNlK0wsLUYsRiksTD1TLnRhbmdlbnRJbXB1bHNlLU59aS54PWcueCpWK3gueCpMLGkueT1nLnkqVit4LnkqTCx2LmlzU3RhdGljfHx2LmlzU2xlZXBpbmd8fCh2LnBvc2l0aW9uUHJldi54Kz1pLngqdi5pbnZlcnNlTWFzcyx2LnBvc2l0aW9uUHJldi55Kz1pLnkqdi5pbnZlcnNlTWFzcyxcbnYuYW5nbGVQcmV2Kz1yLmNyb3NzKEEsaSkqdi5pbnZlcnNlSW5lcnRpYSkseS5pc1N0YXRpY3x8eS5pc1NsZWVwaW5nfHwoeS5wb3NpdGlvblByZXYueC09aS54KnkuaW52ZXJzZU1hc3MseS5wb3NpdGlvblByZXYueS09aS55KnkuaW52ZXJzZU1hc3MseS5hbmdsZVByZXYtPXIuY3Jvc3MoUCxpKSp5LmludmVyc2VJbmVydGlhKX19fX19KCl9LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOX1dLDExOltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCIpLHI9ZShcIi4uL2dlb21ldHJ5L1ZlY3RvclwiKTshZnVuY3Rpb24oKXtvLmNvbGxpZGVzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcyxhLGwsYyxkPSExO2lmKG4pe3ZhciB1PWUucGFyZW50LHA9dC5wYXJlbnQsZj11LnNwZWVkKnUuc3BlZWQrdS5hbmd1bGFyU3BlZWQqdS5hbmd1bGFyU3BlZWQrcC5zcGVlZCpwLnNwZWVkK3AuYW5ndWxhclNwZWVkKnAuYW5ndWxhclNwZWVkO2Q9biYmbi5jb2xsaWRlZCYmZjwuMixjPW59ZWxzZSBjPXtjb2xsaWRlZDohMSxib2R5QTplLGJvZHlCOnR9O2lmKG4mJmQpe3ZhciBtPWMuYXhpc0JvZHksdj1tPT09ZT90OmUseT1bbS5heGVzW24uYXhpc051bWJlcl1dO2lmKGw9by5fb3ZlcmxhcEF4ZXMobS52ZXJ0aWNlcyx2LnZlcnRpY2VzLHkpLGMucmV1c2VkPSEwLGwub3ZlcmxhcDw9MClyZXR1cm4gYy5jb2xsaWRlZD0hMSxjfWVsc2V7aWYocz1vLl9vdmVybGFwQXhlcyhlLnZlcnRpY2VzLHQudmVydGljZXMsZS5heGVzKSxzLm92ZXJsYXA8PTApcmV0dXJuIGMuY29sbGlkZWQ9ITEsYztpZihhPW8uX292ZXJsYXBBeGVzKHQudmVydGljZXMsZS52ZXJ0aWNlcyx0LmF4ZXMpLGEub3ZlcmxhcDw9MClyZXR1cm4gYy5jb2xsaWRlZD0hMSxjO3Mub3ZlcmxhcDxhLm92ZXJsYXA/KGw9cyxcbmMuYXhpc0JvZHk9ZSk6KGw9YSxjLmF4aXNCb2R5PXQpLGMuYXhpc051bWJlcj1sLmF4aXNOdW1iZXJ9Yy5ib2R5QT1lLmlkPHQuaWQ/ZTp0LGMuYm9keUI9ZS5pZDx0LmlkP3Q6ZSxjLmNvbGxpZGVkPSEwLGMuZGVwdGg9bC5vdmVybGFwLGMucGFyZW50QT1jLmJvZHlBLnBhcmVudCxjLnBhcmVudEI9Yy5ib2R5Qi5wYXJlbnQsZT1jLmJvZHlBLHQ9Yy5ib2R5QixyLmRvdChsLmF4aXMsci5zdWIodC5wb3NpdGlvbixlLnBvc2l0aW9uKSk8MD9jLm5vcm1hbD17eDpsLmF4aXMueCx5OmwuYXhpcy55fTpjLm5vcm1hbD17eDotbC5heGlzLngseTotbC5heGlzLnl9LGMudGFuZ2VudD1yLnBlcnAoYy5ub3JtYWwpLGMucGVuZXRyYXRpb249Yy5wZW5ldHJhdGlvbnx8e30sYy5wZW5ldHJhdGlvbi54PWMubm9ybWFsLngqYy5kZXB0aCxjLnBlbmV0cmF0aW9uLnk9Yy5ub3JtYWwueSpjLmRlcHRoO3ZhciBnPW8uX2ZpbmRTdXBwb3J0cyhlLHQsYy5ub3JtYWwpLHg9W107aWYoaS5jb250YWlucyhlLnZlcnRpY2VzLGdbMF0pJiZ4LnB1c2goZ1swXSksaS5jb250YWlucyhlLnZlcnRpY2VzLGdbMV0pJiZ4LnB1c2goZ1sxXSkseC5sZW5ndGg8Mil7dmFyIGg9by5fZmluZFN1cHBvcnRzKHQsZSxyLm5lZyhjLm5vcm1hbCkpO2kuY29udGFpbnModC52ZXJ0aWNlcyxoWzBdKSYmeC5wdXNoKGhbMF0pLHgubGVuZ3RoPDImJmkuY29udGFpbnModC52ZXJ0aWNlcyxoWzFdKSYmeC5wdXNoKGhbMV0pfXJldHVybiB4Lmxlbmd0aDwxJiYoeD1bZ1swXV0pLGMuc3VwcG9ydHM9eCxjfSxvLl9vdmVybGFwQXhlcz1mdW5jdGlvbihlLHQsbil7Zm9yKHZhciBpLHMsYT1yLl90ZW1wWzBdLGw9ci5fdGVtcFsxXSxjPXtvdmVybGFwOk51bWJlci5NQVhfVkFMVUV9LGQ9MDtkPG4ubGVuZ3RoO2QrKyl7aWYocz1uW2RdLG8uX3Byb2plY3RUb0F4aXMoYSxlLHMpLG8uX3Byb2plY3RUb0F4aXMobCx0LHMpLFxuKGk9TWF0aC5taW4oYS5tYXgtbC5taW4sbC5tYXgtYS5taW4pKTw9MClyZXR1cm4gYy5vdmVybGFwPWksYztpPGMub3ZlcmxhcCYmKGMub3ZlcmxhcD1pLGMuYXhpcz1zLGMuYXhpc051bWJlcj1kKX1yZXR1cm4gY30sby5fcHJvamVjdFRvQXhpcz1mdW5jdGlvbihlLHQsbil7Zm9yKHZhciBvPXIuZG90KHRbMF0sbiksaT1vLHM9MTtzPHQubGVuZ3RoO3MrPTEpe3ZhciBhPXIuZG90KHRbc10sbik7YT5pP2k9YTphPG8mJihvPWEpfWUubWluPW8sZS5tYXg9aX0sby5fZmluZFN1cHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIG8saSxzLGEsbD1OdW1iZXIuTUFYX1ZBTFVFLGM9ci5fdGVtcFswXSxkPXQudmVydGljZXMsdT1lLnBvc2l0aW9uLHA9MDtwPGQubGVuZ3RoO3ArKylpPWRbcF0sYy54PWkueC11LngsYy55PWkueS11LnksKG89LXIuZG90KG4sYykpPGwmJihsPW8scz1pKTtyZXR1cm4gaT1kW3MuaW5kZXgtMT49MD9zLmluZGV4LTE6ZC5sZW5ndGgtMV0sYy54PWkueC11LngsYy55PWkueS11LnksbD0tci5kb3QobixjKSxhPWksaT1kWyhzLmluZGV4KzEpJWQubGVuZ3RoXSxjLng9aS54LXUueCxjLnk9aS55LXUueSxvPS1yLmRvdChuLGMpLG88bCYmKGE9aSksW3MsYV19fSgpfSx7XCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOCxcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCI6Mjl9XSwxMjpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiKSxyPWUoXCIuLi9nZW9tZXRyeS9WZWN0b3JcIikscz1lKFwiLi4vY29yZS9TbGVlcGluZ1wiKSxhPWUoXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIiksbD1lKFwiLi4vZ2VvbWV0cnkvQXhlc1wiKSxjPWUoXCIuLi9jb3JlL0NvbW1vblwiKTshZnVuY3Rpb24oKXtvLl93YXJtaW5nPS40LG8uX3RvcnF1ZURhbXBlbj0xLG8uX21pbkxlbmd0aD0xZS02LG8uY3JlYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PWU7dC5ib2R5QSYmIXQucG9pbnRBJiYodC5wb2ludEE9e3g6MCx5OjB9KSxcbnQuYm9keUImJiF0LnBvaW50QiYmKHQucG9pbnRCPXt4OjAseTowfSk7dmFyIG49dC5ib2R5QT9yLmFkZCh0LmJvZHlBLnBvc2l0aW9uLHQucG9pbnRBKTp0LnBvaW50QSxvPXQuYm9keUI/ci5hZGQodC5ib2R5Qi5wb3NpdGlvbix0LnBvaW50Qik6dC5wb2ludEIsaT1yLm1hZ25pdHVkZShyLnN1YihuLG8pKTt0Lmxlbmd0aD12b2lkIDAhPT10Lmxlbmd0aD90Lmxlbmd0aDppLHQuaWQ9dC5pZHx8Yy5uZXh0SWQoKSx0LmxhYmVsPXQubGFiZWx8fFwiQ29uc3RyYWludFwiLHQudHlwZT1cImNvbnN0cmFpbnRcIix0LnN0aWZmbmVzcz10LnN0aWZmbmVzc3x8KHQubGVuZ3RoPjA/MTouNyksdC5kYW1waW5nPXQuZGFtcGluZ3x8MCx0LmFuZ3VsYXJTdGlmZm5lc3M9dC5hbmd1bGFyU3RpZmZuZXNzfHwwLHQuYW5nbGVBPXQuYm9keUE/dC5ib2R5QS5hbmdsZTp0LmFuZ2xlQSx0LmFuZ2xlQj10LmJvZHlCP3QuYm9keUIuYW5nbGU6dC5hbmdsZUIsdC5wbHVnaW49e307dmFyIHM9e3Zpc2libGU6ITAsbGluZVdpZHRoOjIsc3Ryb2tlU3R5bGU6XCIjZmZmZmZmXCIsdHlwZTpcImxpbmVcIixhbmNob3JzOiEwfTtyZXR1cm4gMD09PXQubGVuZ3RoJiZ0LnN0aWZmbmVzcz4uMT8ocy50eXBlPVwicGluXCIscy5hbmNob3JzPSExKTp0LnN0aWZmbmVzczwuOSYmKHMudHlwZT1cInNwcmluZ1wiKSx0LnJlbmRlcj1jLmV4dGVuZChzLHQucmVuZGVyKSx0fSxvLnByZVNvbHZlQWxsPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCs9MSl7dmFyIG49ZVt0XSxvPW4uY29uc3RyYWludEltcHVsc2U7bi5pc1N0YXRpY3x8MD09PW8ueCYmMD09PW8ueSYmMD09PW8uYW5nbGV8fChuLnBvc2l0aW9uLngrPW8ueCxuLnBvc2l0aW9uLnkrPW8ueSxuLmFuZ2xlKz1vLmFuZ2xlKX19LG8uc29sdmVBbGw9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rPTEpe1xudmFyIGk9ZVtuXSxyPSFpLmJvZHlBfHxpLmJvZHlBJiZpLmJvZHlBLmlzU3RhdGljLHM9IWkuYm9keUJ8fGkuYm9keUImJmkuYm9keUIuaXNTdGF0aWM7KHJ8fHMpJiZvLnNvbHZlKGVbbl0sdCl9Zm9yKG49MDtuPGUubGVuZ3RoO24rPTEpaT1lW25dLHI9IWkuYm9keUF8fGkuYm9keUEmJmkuYm9keUEuaXNTdGF0aWMscz0haS5ib2R5Qnx8aS5ib2R5QiYmaS5ib2R5Qi5pc1N0YXRpYyxyfHxzfHxvLnNvbHZlKGVbbl0sdCl9LG8uc29sdmU9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmJvZHlBLGk9ZS5ib2R5QixzPWUucG9pbnRBLGE9ZS5wb2ludEI7aWYobnx8aSl7biYmIW4uaXNTdGF0aWMmJihyLnJvdGF0ZShzLG4uYW5nbGUtZS5hbmdsZUEscyksZS5hbmdsZUE9bi5hbmdsZSksaSYmIWkuaXNTdGF0aWMmJihyLnJvdGF0ZShhLGkuYW5nbGUtZS5hbmdsZUIsYSksZS5hbmdsZUI9aS5hbmdsZSk7dmFyIGw9cyxjPWE7aWYobiYmKGw9ci5hZGQobi5wb3NpdGlvbixzKSksaSYmKGM9ci5hZGQoaS5wb3NpdGlvbixhKSksbCYmYyl7dmFyIGQ9ci5zdWIobCxjKSx1PXIubWFnbml0dWRlKGQpO3U8by5fbWluTGVuZ3RoJiYodT1vLl9taW5MZW5ndGgpO3ZhciBwLGYsbSx2LHksZz0odS1lLmxlbmd0aCkvdSx4PWUuc3RpZmZuZXNzPDE/ZS5zdGlmZm5lc3MqdDplLnN0aWZmbmVzcyxoPXIubXVsdChkLGcqeCksYj0obj9uLmludmVyc2VNYXNzOjApKyhpP2kuaW52ZXJzZU1hc3M6MCksdz0obj9uLmludmVyc2VJbmVydGlhOjApKyhpP2kuaW52ZXJzZUluZXJ0aWE6MCksUz1iK3c7aWYoZS5kYW1waW5nKXt2YXIgQz1yLmNyZWF0ZSgpO209ci5kaXYoZCx1KSx5PXIuc3ViKGkmJnIuc3ViKGkucG9zaXRpb24saS5wb3NpdGlvblByZXYpfHxDLG4mJnIuc3ViKG4ucG9zaXRpb24sbi5wb3NpdGlvblByZXYpfHxDKSx2PXIuZG90KG0seSl9biYmIW4uaXNTdGF0aWMmJihmPW4uaW52ZXJzZU1hc3MvYixuLmNvbnN0cmFpbnRJbXB1bHNlLngtPWgueCpmLFxubi5jb25zdHJhaW50SW1wdWxzZS55LT1oLnkqZixuLnBvc2l0aW9uLngtPWgueCpmLG4ucG9zaXRpb24ueS09aC55KmYsZS5kYW1waW5nJiYobi5wb3NpdGlvblByZXYueC09ZS5kYW1waW5nKm0ueCp2KmYsbi5wb3NpdGlvblByZXYueS09ZS5kYW1waW5nKm0ueSp2KmYpLHA9ci5jcm9zcyhzLGgpL1Mqby5fdG9ycXVlRGFtcGVuKm4uaW52ZXJzZUluZXJ0aWEqKDEtZS5hbmd1bGFyU3RpZmZuZXNzKSxuLmNvbnN0cmFpbnRJbXB1bHNlLmFuZ2xlLT1wLG4uYW5nbGUtPXApLGkmJiFpLmlzU3RhdGljJiYoZj1pLmludmVyc2VNYXNzL2IsaS5jb25zdHJhaW50SW1wdWxzZS54Kz1oLngqZixpLmNvbnN0cmFpbnRJbXB1bHNlLnkrPWgueSpmLGkucG9zaXRpb24ueCs9aC54KmYsaS5wb3NpdGlvbi55Kz1oLnkqZixlLmRhbXBpbmcmJihpLnBvc2l0aW9uUHJldi54Kz1lLmRhbXBpbmcqbS54KnYqZixpLnBvc2l0aW9uUHJldi55Kz1lLmRhbXBpbmcqbS55KnYqZikscD1yLmNyb3NzKGEsaCkvUypvLl90b3JxdWVEYW1wZW4qaS5pbnZlcnNlSW5lcnRpYSooMS1lLmFuZ3VsYXJTdGlmZm5lc3MpLGkuY29uc3RyYWludEltcHVsc2UuYW5nbGUrPXAsaS5hbmdsZSs9cCl9fX0sby5wb3N0U29sdmVBbGw9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciBuPWVbdF0sYz1uLmNvbnN0cmFpbnRJbXB1bHNlO2lmKCEobi5pc1N0YXRpY3x8MD09PWMueCYmMD09PWMueSYmMD09PWMuYW5nbGUpKXtzLnNldChuLCExKTtmb3IodmFyIGQ9MDtkPG4ucGFydHMubGVuZ3RoO2QrKyl7dmFyIHU9bi5wYXJ0c1tkXTtpLnRyYW5zbGF0ZSh1LnZlcnRpY2VzLGMpLGQ+MCYmKHUucG9zaXRpb24ueCs9Yy54LHUucG9zaXRpb24ueSs9Yy55KSwwIT09Yy5hbmdsZSYmKGkucm90YXRlKHUudmVydGljZXMsYy5hbmdsZSxuLnBvc2l0aW9uKSxsLnJvdGF0ZSh1LmF4ZXMsYy5hbmdsZSksXG5kPjAmJnIucm90YXRlQWJvdXQodS5wb3NpdGlvbixjLmFuZ2xlLG4ucG9zaXRpb24sdS5wb3NpdGlvbikpLGEudXBkYXRlKHUuYm91bmRzLHUudmVydGljZXMsbi52ZWxvY2l0eSl9Yy5hbmdsZSo9by5fd2FybWluZyxjLngqPW8uX3dhcm1pbmcsYy55Kj1vLl93YXJtaW5nfX19fSgpfSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9TbGVlcGluZ1wiOjIyLFwiLi4vZ2VvbWV0cnkvQXhlc1wiOjI1LFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOCxcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCI6Mjl9XSwxMzpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiKSxyPWUoXCIuLi9jb3JlL1NsZWVwaW5nXCIpLHM9ZShcIi4uL2NvcmUvTW91c2VcIiksYT1lKFwiLi4vY29yZS9FdmVudHNcIiksbD1lKFwiLi4vY29sbGlzaW9uL0RldGVjdG9yXCIpLGM9ZShcIi4vQ29uc3RyYWludFwiKSxkPWUoXCIuLi9ib2R5L0NvbXBvc2l0ZVwiKSx1PWUoXCIuLi9jb3JlL0NvbW1vblwiKSxwPWUoXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIik7IWZ1bmN0aW9uKCl7by5jcmVhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj0oZT9lLm1vdXNlOm51bGwpfHwodD90Lm1vdXNlOm51bGwpO258fChlJiZlLnJlbmRlciYmZS5yZW5kZXIuY2FudmFzP249cy5jcmVhdGUoZS5yZW5kZXIuY2FudmFzKTp0JiZ0LmVsZW1lbnQ/bj1zLmNyZWF0ZSh0LmVsZW1lbnQpOihuPXMuY3JlYXRlKCksdS53YXJuKFwiTW91c2VDb25zdHJhaW50LmNyZWF0ZTogb3B0aW9ucy5tb3VzZSB3YXMgdW5kZWZpbmVkLCBvcHRpb25zLmVsZW1lbnQgd2FzIHVuZGVmaW5lZCwgbWF5IG5vdCBmdW5jdGlvbiBhcyBleHBlY3RlZFwiKSkpO3ZhciBpPWMuY3JlYXRlKHtsYWJlbDpcIk1vdXNlIENvbnN0cmFpbnRcIixwb2ludEE6bi5wb3NpdGlvbixwb2ludEI6e3g6MCx5OjB9LGxlbmd0aDouMDEsc3RpZmZuZXNzOi4xLGFuZ3VsYXJTdGlmZm5lc3M6MSxcbnJlbmRlcjp7c3Ryb2tlU3R5bGU6XCIjOTBFRTkwXCIsbGluZVdpZHRoOjN9fSkscj17dHlwZTpcIm1vdXNlQ29uc3RyYWludFwiLG1vdXNlOm4sZWxlbWVudDpudWxsLGJvZHk6bnVsbCxjb25zdHJhaW50OmksY29sbGlzaW9uRmlsdGVyOntjYXRlZ29yeToxLG1hc2s6NDI5NDk2NzI5NSxncm91cDowfX0sbD11LmV4dGVuZChyLHQpO3JldHVybiBhLm9uKGUsXCJiZWZvcmVVcGRhdGVcIixmdW5jdGlvbigpe3ZhciB0PWQuYWxsQm9kaWVzKGUud29ybGQpO28udXBkYXRlKGwsdCksby5fdHJpZ2dlckV2ZW50cyhsKX0pLGx9LG8udXBkYXRlPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5tb3VzZSxvPWUuY29uc3RyYWludCxzPWUuYm9keTtpZigwPT09bi5idXR0b24pe2lmKG8uYm9keUIpci5zZXQoby5ib2R5QiwhMSksby5wb2ludEE9bi5wb3NpdGlvbjtlbHNlIGZvcih2YXIgYz0wO2M8dC5sZW5ndGg7YysrKWlmKHM9dFtjXSxwLmNvbnRhaW5zKHMuYm91bmRzLG4ucG9zaXRpb24pJiZsLmNhbkNvbGxpZGUocy5jb2xsaXNpb25GaWx0ZXIsZS5jb2xsaXNpb25GaWx0ZXIpKWZvcih2YXIgZD1zLnBhcnRzLmxlbmd0aD4xPzE6MDtkPHMucGFydHMubGVuZ3RoO2QrKyl7dmFyIHU9cy5wYXJ0c1tkXTtpZihpLmNvbnRhaW5zKHUudmVydGljZXMsbi5wb3NpdGlvbikpe28ucG9pbnRBPW4ucG9zaXRpb24sby5ib2R5Qj1lLmJvZHk9cyxvLnBvaW50Qj17eDpuLnBvc2l0aW9uLngtcy5wb3NpdGlvbi54LHk6bi5wb3NpdGlvbi55LXMucG9zaXRpb24ueX0sby5hbmdsZUI9cy5hbmdsZSxyLnNldChzLCExKSxhLnRyaWdnZXIoZSxcInN0YXJ0ZHJhZ1wiLHttb3VzZTpuLGJvZHk6c30pO2JyZWFrfX19ZWxzZSBvLmJvZHlCPWUuYm9keT1udWxsLG8ucG9pbnRCPW51bGwscyYmYS50cmlnZ2VyKGUsXCJlbmRkcmFnXCIse21vdXNlOm4sYm9keTpzfSl9LG8uX3RyaWdnZXJFdmVudHM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5tb3VzZSxuPXQuc291cmNlRXZlbnRzXG47bi5tb3VzZW1vdmUmJmEudHJpZ2dlcihlLFwibW91c2Vtb3ZlXCIse21vdXNlOnR9KSxuLm1vdXNlZG93biYmYS50cmlnZ2VyKGUsXCJtb3VzZWRvd25cIix7bW91c2U6dH0pLG4ubW91c2V1cCYmYS50cmlnZ2VyKGUsXCJtb3VzZXVwXCIse21vdXNlOnR9KSxzLmNsZWFyU291cmNlRXZlbnRzKHQpfX0oKX0se1wiLi4vYm9keS9Db21wb3NpdGVcIjoyLFwiLi4vY29sbGlzaW9uL0RldGVjdG9yXCI6NSxcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL0V2ZW50c1wiOjE2LFwiLi4vY29yZS9Nb3VzZVwiOjE5LFwiLi4vY29yZS9TbGVlcGluZ1wiOjIyLFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI5LFwiLi9Db25zdHJhaW50XCI6MTJ9XSwxNDpbZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbihuKXt2YXIgbz17fTt0LmV4cG9ydHM9byxmdW5jdGlvbigpe28uX25leHRJZD0wLG8uX3NlZWQ9MCxvLl9ub3dTdGFydFRpbWU9K25ldyBEYXRlLG8uZXh0ZW5kPWZ1bmN0aW9uKGUsdCl7dmFyIG4saTtcImJvb2xlYW5cIj09dHlwZW9mIHQ/KG49MixpPXQpOihuPTEsaT0hMCk7Zm9yKHZhciByPW47cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl7dmFyIHM9YXJndW1lbnRzW3JdO2lmKHMpZm9yKHZhciBhIGluIHMpaSYmc1thXSYmc1thXS5jb25zdHJ1Y3Rvcj09PU9iamVjdD9lW2FdJiZlW2FdLmNvbnN0cnVjdG9yIT09T2JqZWN0P2VbYV09c1thXTooZVthXT1lW2FdfHx7fSxvLmV4dGVuZChlW2FdLGksc1thXSkpOmVbYV09c1thXX1yZXR1cm4gZX0sby5jbG9uZT1mdW5jdGlvbihlLHQpe3JldHVybiBvLmV4dGVuZCh7fSx0LGUpfSxvLmtleXM9ZnVuY3Rpb24oZSl7aWYoT2JqZWN0LmtleXMpcmV0dXJuIE9iamVjdC5rZXlzKGUpO3ZhciB0PVtdO2Zvcih2YXIgbiBpbiBlKXQucHVzaChuKTtyZXR1cm4gdH0sby52YWx1ZXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107aWYoT2JqZWN0LmtleXMpe1xuZm9yKHZhciBuPU9iamVjdC5rZXlzKGUpLG89MDtvPG4ubGVuZ3RoO28rKyl0LnB1c2goZVtuW29dXSk7cmV0dXJuIHR9Zm9yKHZhciBpIGluIGUpdC5wdXNoKGVbaV0pO3JldHVybiB0fSxvLmdldD1mdW5jdGlvbihlLHQsbixvKXt0PXQuc3BsaXQoXCIuXCIpLnNsaWNlKG4sbyk7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKz0xKWU9ZVt0W2ldXTtyZXR1cm4gZX0sby5zZXQ9ZnVuY3Rpb24oZSx0LG4saSxyKXt2YXIgcz10LnNwbGl0KFwiLlwiKS5zbGljZShpLHIpO3JldHVybiBvLmdldChlLHQsMCwtMSlbc1tzLmxlbmd0aC0xXV09bixufSxvLnNodWZmbGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUubGVuZ3RoLTE7dD4wO3QtLSl7dmFyIG49TWF0aC5mbG9vcihvLnJhbmRvbSgpKih0KzEpKSxpPWVbdF07ZVt0XT1lW25dLGVbbl09aX1yZXR1cm4gZX0sby5jaG9vc2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGVbTWF0aC5mbG9vcihvLnJhbmRvbSgpKmUubGVuZ3RoKV19LG8uaXNFbGVtZW50PWZ1bmN0aW9uKGUpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MRWxlbWVudD9lIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ6ISEoZSYmZS5ub2RlVHlwZSYmZS5ub2RlTmFtZSl9LG8uaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9LG8uaXNGdW5jdGlvbj1mdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfSxvLmlzUGxhaW5PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJmUuY29uc3RydWN0b3I9PT1PYmplY3R9LG8uaXNTdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IFN0cmluZ11cIj09PXRvU3RyaW5nLmNhbGwoZSl9LG8uY2xhbXA9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPHQ/dDplPm4/bjplfSxvLnNpZ249ZnVuY3Rpb24oZSl7cmV0dXJuIGU8MD8tMToxfSxvLm5vdz1mdW5jdGlvbigpe1xuaWYod2luZG93LnBlcmZvcm1hbmNlKXtpZih3aW5kb3cucGVyZm9ybWFuY2Uubm93KXJldHVybiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7aWYod2luZG93LnBlcmZvcm1hbmNlLndlYmtpdE5vdylyZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlLndlYmtpdE5vdygpfXJldHVybiBuZXcgRGF0ZS1vLl9ub3dTdGFydFRpbWV9LG8ucmFuZG9tPWZ1bmN0aW9uKGUsbil7cmV0dXJuIGU9dm9pZCAwIT09ZT9lOjAsbj12b2lkIDAhPT1uP246MSxlK3QoKSoobi1lKX07dmFyIHQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5fc2VlZD0oOTMwMSpvLl9zZWVkKzQ5Mjk3KSUyMzMyODAsby5fc2VlZC8yMzMyODB9O28uY29sb3JUb051bWJlcj1mdW5jdGlvbihlKXtyZXR1cm4gZT1lLnJlcGxhY2UoXCIjXCIsXCJcIiksMz09ZS5sZW5ndGgmJihlPWUuY2hhckF0KDApK2UuY2hhckF0KDApK2UuY2hhckF0KDEpK2UuY2hhckF0KDEpK2UuY2hhckF0KDIpK2UuY2hhckF0KDIpKSxwYXJzZUludChlLDE2KX0sby5sb2dMZXZlbD0xLG8ubG9nPWZ1bmN0aW9uKCl7Y29uc29sZSYmby5sb2dMZXZlbD4wJiZvLmxvZ0xldmVsPD0zJiZjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLFtcIm1hdHRlci1qczpcIl0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKX0sby5pbmZvPWZ1bmN0aW9uKCl7Y29uc29sZSYmby5sb2dMZXZlbD4wJiZvLmxvZ0xldmVsPD0yJiZjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSxbXCJtYXR0ZXItanM6XCJdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSl9LG8ud2Fybj1mdW5jdGlvbigpe2NvbnNvbGUmJm8ubG9nTGV2ZWw+MCYmby5sb2dMZXZlbDw9MyYmY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsW1wibWF0dGVyLWpzOlwiXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpfSxvLm5leHRJZD1mdW5jdGlvbigpe3JldHVybiBvLl9uZXh0SWQrK30sXG5vLmluZGV4T2Y9ZnVuY3Rpb24oZSx0KXtpZihlLmluZGV4T2YpcmV0dXJuIGUuaW5kZXhPZih0KTtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKylpZihlW25dPT09dClyZXR1cm4gbjtyZXR1cm4tMX0sby5tYXA9ZnVuY3Rpb24oZSx0KXtpZihlLm1hcClyZXR1cm4gZS5tYXAodCk7Zm9yKHZhciBuPVtdLG89MDtvPGUubGVuZ3RoO28rPTEpbi5wdXNoKHQoZVtvXSkpO3JldHVybiBufSxvLnRvcG9sb2dpY2FsU29ydD1mdW5jdGlvbihlKXt2YXIgdD1bXSxuPVtdLGk9W107Zm9yKHZhciByIGluIGUpbltyXXx8aVtyXXx8by5fdG9wb2xvZ2ljYWxTb3J0KHIsbixpLGUsdCk7cmV0dXJuIHR9LG8uX3RvcG9sb2dpY2FsU29ydD1mdW5jdGlvbihlLHQsbixpLHIpe3ZhciBzPWlbZV18fFtdO25bZV09ITA7Zm9yKHZhciBhPTA7YTxzLmxlbmd0aDthKz0xKXt2YXIgbD1zW2FdO25bbF18fCh0W2xdfHxvLl90b3BvbG9naWNhbFNvcnQobCx0LG4saSxyKSl9bltlXT0hMSx0W2VdPSEwLHIucHVzaChlKX0sby5jaGFpbj1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrPTEpe3ZhciBuPWFyZ3VtZW50c1t0XTtuLl9jaGFpbmVkP2UucHVzaC5hcHBseShlLG4uX2NoYWluZWQpOmUucHVzaChuKX12YXIgbz1mdW5jdGlvbigpe2Zvcih2YXIgdCxuPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxvPTAsaT1hcmd1bWVudHMubGVuZ3RoO288aTtvKyspbltvXT1hcmd1bWVudHNbb107Zm9yKG89MDtvPGUubGVuZ3RoO28rPTEpe3ZhciByPWVbb10uYXBwbHkodCxuKTt2b2lkIDAhPT1yJiYodD1yKX1yZXR1cm4gdH07cmV0dXJuIG8uX2NoYWluZWQ9ZSxvfSxvLmNoYWluUGF0aEJlZm9yZT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG8uc2V0KGUsdCxvLmNoYWluKG4sby5nZXQoZSx0KSkpfSxvLmNoYWluUGF0aEFmdGVyPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gby5zZXQoZSx0LG8uY2hhaW4oby5nZXQoZSx0KSxuKSl9LFxuby5fcmVxdWlyZUdsb2JhbD1mdW5jdGlvbih0LG8pe3JldHVybihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvd1t0XTp2b2lkIDAhPT1uP25bdF06bnVsbCl8fGUobyl9fSgpfSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV0sMTU6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9bzt2YXIgaT1lKFwiLi4vYm9keS9Xb3JsZFwiKSxyPWUoXCIuL1NsZWVwaW5nXCIpLHM9ZShcIi4uL2NvbGxpc2lvbi9SZXNvbHZlclwiKSxhPWUoXCIuLi9yZW5kZXIvUmVuZGVyXCIpLGw9ZShcIi4uL2NvbGxpc2lvbi9QYWlyc1wiKSxjPShlKFwiLi9NZXRyaWNzXCIpLGUoXCIuLi9jb2xsaXNpb24vR3JpZFwiKSksZD1lKFwiLi9FdmVudHNcIiksdT1lKFwiLi4vYm9keS9Db21wb3NpdGVcIikscD1lKFwiLi4vY29uc3RyYWludC9Db25zdHJhaW50XCIpLGY9ZShcIi4vQ29tbW9uXCIpLG09ZShcIi4uL2JvZHkvQm9keVwiKTshZnVuY3Rpb24oKXtvLmNyZWF0ZT1mdW5jdGlvbihlLHQpe3Q9Zi5pc0VsZW1lbnQoZSk/dDplLGU9Zi5pc0VsZW1lbnQoZSk/ZTpudWxsLHQ9dHx8e30sKGV8fHQucmVuZGVyKSYmZi53YXJuKFwiRW5naW5lLmNyZWF0ZTogZW5naW5lLnJlbmRlciBpcyBkZXByZWNhdGVkIChzZWUgZG9jcylcIik7dmFyIG49e3Bvc2l0aW9uSXRlcmF0aW9uczo2LHZlbG9jaXR5SXRlcmF0aW9uczo0LGNvbnN0cmFpbnRJdGVyYXRpb25zOjIsZW5hYmxlU2xlZXBpbmc6ITEsZXZlbnRzOltdLHBsdWdpbjp7fSx0aW1pbmc6e3RpbWVzdGFtcDowLHRpbWVTY2FsZToxfSxicm9hZHBoYXNlOntjb250cm9sbGVyOmN9fSxvPWYuZXh0ZW5kKG4sdCk7aWYoZXx8by5yZW5kZXIpe3ZhciByPXtlbGVtZW50OmUsY29udHJvbGxlcjphfTtvLnJlbmRlcj1mLmV4dGVuZChyLG8ucmVuZGVyKX1cbnJldHVybiBvLnJlbmRlciYmby5yZW5kZXIuY29udHJvbGxlciYmKG8ucmVuZGVyPW8ucmVuZGVyLmNvbnRyb2xsZXIuY3JlYXRlKG8ucmVuZGVyKSksby5yZW5kZXImJihvLnJlbmRlci5lbmdpbmU9byksby53b3JsZD10LndvcmxkfHxpLmNyZWF0ZShvLndvcmxkKSxvLnBhaXJzPWwuY3JlYXRlKCksby5icm9hZHBoYXNlPW8uYnJvYWRwaGFzZS5jb250cm9sbGVyLmNyZWF0ZShvLmJyb2FkcGhhc2UpLG8ubWV0cmljcz1vLm1ldHJpY3N8fHtleHRlbmRlZDohMX0sb30sby51cGRhdGU9ZnVuY3Rpb24oZSx0LG4pe3Q9dHx8MWUzLzYwLG49bnx8MTt2YXIgaSxhPWUud29ybGQsYz1lLnRpbWluZyxmPWUuYnJvYWRwaGFzZSxtPVtdO2MudGltZXN0YW1wKz10KmMudGltZVNjYWxlO3ZhciB2PXt0aW1lc3RhbXA6Yy50aW1lc3RhbXB9O2QudHJpZ2dlcihlLFwiYmVmb3JlVXBkYXRlXCIsdik7dmFyIHk9dS5hbGxCb2RpZXMoYSksZz11LmFsbENvbnN0cmFpbnRzKGEpO2ZvcihlLmVuYWJsZVNsZWVwaW5nJiZyLnVwZGF0ZSh5LGMudGltZVNjYWxlKSxvLl9ib2RpZXNBcHBseUdyYXZpdHkoeSxhLmdyYXZpdHkpLG8uX2JvZGllc1VwZGF0ZSh5LHQsYy50aW1lU2NhbGUsbixhLmJvdW5kcykscC5wcmVTb2x2ZUFsbCh5KSxpPTA7aTxlLmNvbnN0cmFpbnRJdGVyYXRpb25zO2krKylwLnNvbHZlQWxsKGcsYy50aW1lU2NhbGUpO3AucG9zdFNvbHZlQWxsKHkpLGYuY29udHJvbGxlcj8oYS5pc01vZGlmaWVkJiZmLmNvbnRyb2xsZXIuY2xlYXIoZiksZi5jb250cm9sbGVyLnVwZGF0ZShmLHksZSxhLmlzTW9kaWZpZWQpLG09Zi5wYWlyc0xpc3QpOm09eSxhLmlzTW9kaWZpZWQmJnUuc2V0TW9kaWZpZWQoYSwhMSwhMSwhMCk7dmFyIHg9Zi5kZXRlY3RvcihtLGUpLGg9ZS5wYWlycyxiPWMudGltZXN0YW1wO2ZvcihsLnVwZGF0ZShoLHgsYiksbC5yZW1vdmVPbGQoaCxiKSxlLmVuYWJsZVNsZWVwaW5nJiZyLmFmdGVyQ29sbGlzaW9ucyhoLmxpc3QsYy50aW1lU2NhbGUpLFxuaC5jb2xsaXNpb25TdGFydC5sZW5ndGg+MCYmZC50cmlnZ2VyKGUsXCJjb2xsaXNpb25TdGFydFwiLHtwYWlyczpoLmNvbGxpc2lvblN0YXJ0fSkscy5wcmVTb2x2ZVBvc2l0aW9uKGgubGlzdCksaT0wO2k8ZS5wb3NpdGlvbkl0ZXJhdGlvbnM7aSsrKXMuc29sdmVQb3NpdGlvbihoLmxpc3QsYy50aW1lU2NhbGUpO2ZvcihzLnBvc3RTb2x2ZVBvc2l0aW9uKHkpLHAucHJlU29sdmVBbGwoeSksaT0wO2k8ZS5jb25zdHJhaW50SXRlcmF0aW9ucztpKyspcC5zb2x2ZUFsbChnLGMudGltZVNjYWxlKTtmb3IocC5wb3N0U29sdmVBbGwoeSkscy5wcmVTb2x2ZVZlbG9jaXR5KGgubGlzdCksaT0wO2k8ZS52ZWxvY2l0eUl0ZXJhdGlvbnM7aSsrKXMuc29sdmVWZWxvY2l0eShoLmxpc3QsYy50aW1lU2NhbGUpO3JldHVybiBoLmNvbGxpc2lvbkFjdGl2ZS5sZW5ndGg+MCYmZC50cmlnZ2VyKGUsXCJjb2xsaXNpb25BY3RpdmVcIix7cGFpcnM6aC5jb2xsaXNpb25BY3RpdmV9KSxoLmNvbGxpc2lvbkVuZC5sZW5ndGg+MCYmZC50cmlnZ2VyKGUsXCJjb2xsaXNpb25FbmRcIix7cGFpcnM6aC5jb2xsaXNpb25FbmR9KSxvLl9ib2RpZXNDbGVhckZvcmNlcyh5KSxkLnRyaWdnZXIoZSxcImFmdGVyVXBkYXRlXCIsdiksZX0sby5tZXJnZT1mdW5jdGlvbihlLHQpe2lmKGYuZXh0ZW5kKGUsdCksdC53b3JsZCl7ZS53b3JsZD10LndvcmxkLG8uY2xlYXIoZSk7Zm9yKHZhciBuPXUuYWxsQm9kaWVzKGUud29ybGQpLGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIHM9bltpXTtyLnNldChzLCExKSxzLmlkPWYubmV4dElkKCl9fX0sby5jbGVhcj1mdW5jdGlvbihlKXt2YXIgdD1lLndvcmxkO2wuY2xlYXIoZS5wYWlycyk7dmFyIG49ZS5icm9hZHBoYXNlO2lmKG4uY29udHJvbGxlcil7dmFyIG89dS5hbGxCb2RpZXModCk7bi5jb250cm9sbGVyLmNsZWFyKG4pLG4uY29udHJvbGxlci51cGRhdGUobixvLGUsITApfX0sby5fYm9kaWVzQ2xlYXJGb3JjZXM9ZnVuY3Rpb24oZSl7XG5mb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG49ZVt0XTtuLmZvcmNlLng9MCxuLmZvcmNlLnk9MCxuLnRvcnF1ZT0wfX0sby5fYm9kaWVzQXBwbHlHcmF2aXR5PWZ1bmN0aW9uKGUsdCl7dmFyIG49dm9pZCAwIT09dC5zY2FsZT90LnNjYWxlOi4wMDE7aWYoKDAhPT10Lnh8fDAhPT10LnkpJiYwIT09bilmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIGk9ZVtvXTtpLmlzU3RhdGljfHxpLmlzU2xlZXBpbmd8fChpLmZvcmNlLnkrPWkubWFzcyp0LnkqbixpLmZvcmNlLngrPWkubWFzcyp0Lngqbil9fSxvLl9ib2RpZXNVcGRhdGU9ZnVuY3Rpb24oZSx0LG4sbyxpKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIHM9ZVtyXTtzLmlzU3RhdGljfHxzLmlzU2xlZXBpbmd8fG0udXBkYXRlKHMsdCxuLG8pfX19KCl9LHtcIi4uL2JvZHkvQm9keVwiOjEsXCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9ib2R5L1dvcmxkXCI6MyxcIi4uL2NvbGxpc2lvbi9HcmlkXCI6NixcIi4uL2NvbGxpc2lvbi9QYWlyc1wiOjgsXCIuLi9jb2xsaXNpb24vUmVzb2x2ZXJcIjoxMCxcIi4uL2NvbnN0cmFpbnQvQ29uc3RyYWludFwiOjEyLFwiLi4vcmVuZGVyL1JlbmRlclwiOjMxLFwiLi9Db21tb25cIjoxNCxcIi4vRXZlbnRzXCI6MTYsXCIuL01ldHJpY3NcIjoxOCxcIi4vU2xlZXBpbmdcIjoyMn1dLDE2OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4vQ29tbW9uXCIpOyFmdW5jdGlvbigpe28ub249ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgbyxpPXQuc3BsaXQoXCIgXCIpLHI9MDtyPGkubGVuZ3RoO3IrKylvPWlbcl0sZS5ldmVudHM9ZS5ldmVudHN8fHt9LGUuZXZlbnRzW29dPWUuZXZlbnRzW29dfHxbXSxlLmV2ZW50c1tvXS5wdXNoKG4pO3JldHVybiBufSxvLm9mZj1mdW5jdGlvbihlLHQsbil7aWYoIXQpcmV0dXJuIHZvaWQoZS5ldmVudHM9e30pO1wiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihuPXQsdD1pLmtleXMoZS5ldmVudHMpLmpvaW4oXCIgXCIpKVxuO2Zvcih2YXIgbz10LnNwbGl0KFwiIFwiKSxyPTA7cjxvLmxlbmd0aDtyKyspe3ZhciBzPWUuZXZlbnRzW29bcl1dLGE9W107aWYobiYmcylmb3IodmFyIGw9MDtsPHMubGVuZ3RoO2wrKylzW2xdIT09biYmYS5wdXNoKHNbbF0pO2UuZXZlbnRzW29bcl1dPWF9fSxvLnRyaWdnZXI9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLHIscyxhO2lmKGUuZXZlbnRzKXtufHwobj17fSksbz10LnNwbGl0KFwiIFwiKTtmb3IodmFyIGw9MDtsPG8ubGVuZ3RoO2wrKylpZihyPW9bbF0scz1lLmV2ZW50c1tyXSl7YT1pLmNsb25lKG4sITEpLGEubmFtZT1yLGEuc291cmNlPWU7Zm9yKHZhciBjPTA7YzxzLmxlbmd0aDtjKyspc1tjXS5hcHBseShlLFthXSl9fX19KCl9LHtcIi4vQ29tbW9uXCI6MTR9XSwxNzpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuL1BsdWdpblwiKSxyPWUoXCIuL0NvbW1vblwiKTshZnVuY3Rpb24oKXtvLm5hbWU9XCJtYXR0ZXItanNcIixvLnZlcnNpb249XCIwLjE0LjJcIixvLnVzZXM9W10sby51c2VkPVtdLG8udXNlPWZ1bmN0aW9uKCl7aS51c2UobyxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKX0sby5iZWZvcmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1lLnJlcGxhY2UoL15NYXR0ZXIuLyxcIlwiKSxyLmNoYWluUGF0aEJlZm9yZShvLGUsdCl9LG8uYWZ0ZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1lLnJlcGxhY2UoL15NYXR0ZXIuLyxcIlwiKSxyLmNoYWluUGF0aEFmdGVyKG8sZSx0KX19KCl9LHtcIi4vQ29tbW9uXCI6MTQsXCIuL1BsdWdpblwiOjIwfV0sMTg6W2Z1bmN0aW9uKGUsdCxuKXt9LHtcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4vQ29tbW9uXCI6MTR9XSwxOTpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuLi9jb3JlL0NvbW1vblwiKTshZnVuY3Rpb24oKXtvLmNyZWF0ZT1mdW5jdGlvbihlKXt2YXIgdD17fVxuO3JldHVybiBlfHxpLmxvZyhcIk1vdXNlLmNyZWF0ZTogZWxlbWVudCB3YXMgdW5kZWZpbmVkLCBkZWZhdWx0aW5nIHRvIGRvY3VtZW50LmJvZHlcIixcIndhcm5cIiksdC5lbGVtZW50PWV8fGRvY3VtZW50LmJvZHksdC5hYnNvbHV0ZT17eDowLHk6MH0sdC5wb3NpdGlvbj17eDowLHk6MH0sdC5tb3VzZWRvd25Qb3NpdGlvbj17eDowLHk6MH0sdC5tb3VzZXVwUG9zaXRpb249e3g6MCx5OjB9LHQub2Zmc2V0PXt4OjAseTowfSx0LnNjYWxlPXt4OjEseToxfSx0LndoZWVsRGVsdGE9MCx0LmJ1dHRvbj0tMSx0LnBpeGVsUmF0aW89dC5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtcGl4ZWwtcmF0aW9cIil8fDEsdC5zb3VyY2VFdmVudHM9e21vdXNlbW92ZTpudWxsLG1vdXNlZG93bjpudWxsLG1vdXNldXA6bnVsbCxtb3VzZXdoZWVsOm51bGx9LHQubW91c2Vtb3ZlPWZ1bmN0aW9uKGUpe3ZhciBuPW8uX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvbihlLHQuZWxlbWVudCx0LnBpeGVsUmF0aW8pO2UuY2hhbmdlZFRvdWNoZXMmJih0LmJ1dHRvbj0wLGUucHJldmVudERlZmF1bHQoKSksdC5hYnNvbHV0ZS54PW4ueCx0LmFic29sdXRlLnk9bi55LHQucG9zaXRpb24ueD10LmFic29sdXRlLngqdC5zY2FsZS54K3Qub2Zmc2V0LngsdC5wb3NpdGlvbi55PXQuYWJzb2x1dGUueSp0LnNjYWxlLnkrdC5vZmZzZXQueSx0LnNvdXJjZUV2ZW50cy5tb3VzZW1vdmU9ZX0sdC5tb3VzZWRvd249ZnVuY3Rpb24oZSl7dmFyIG49by5fZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uKGUsdC5lbGVtZW50LHQucGl4ZWxSYXRpbyk7ZS5jaGFuZ2VkVG91Y2hlcz8odC5idXR0b249MCxlLnByZXZlbnREZWZhdWx0KCkpOnQuYnV0dG9uPWUuYnV0dG9uLHQuYWJzb2x1dGUueD1uLngsdC5hYnNvbHV0ZS55PW4ueSx0LnBvc2l0aW9uLng9dC5hYnNvbHV0ZS54KnQuc2NhbGUueCt0Lm9mZnNldC54LHQucG9zaXRpb24ueT10LmFic29sdXRlLnkqdC5zY2FsZS55K3Qub2Zmc2V0LnksXG50Lm1vdXNlZG93blBvc2l0aW9uLng9dC5wb3NpdGlvbi54LHQubW91c2Vkb3duUG9zaXRpb24ueT10LnBvc2l0aW9uLnksdC5zb3VyY2VFdmVudHMubW91c2Vkb3duPWV9LHQubW91c2V1cD1mdW5jdGlvbihlKXt2YXIgbj1vLl9nZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24oZSx0LmVsZW1lbnQsdC5waXhlbFJhdGlvKTtlLmNoYW5nZWRUb3VjaGVzJiZlLnByZXZlbnREZWZhdWx0KCksdC5idXR0b249LTEsdC5hYnNvbHV0ZS54PW4ueCx0LmFic29sdXRlLnk9bi55LHQucG9zaXRpb24ueD10LmFic29sdXRlLngqdC5zY2FsZS54K3Qub2Zmc2V0LngsdC5wb3NpdGlvbi55PXQuYWJzb2x1dGUueSp0LnNjYWxlLnkrdC5vZmZzZXQueSx0Lm1vdXNldXBQb3NpdGlvbi54PXQucG9zaXRpb24ueCx0Lm1vdXNldXBQb3NpdGlvbi55PXQucG9zaXRpb24ueSx0LnNvdXJjZUV2ZW50cy5tb3VzZXVwPWV9LHQubW91c2V3aGVlbD1mdW5jdGlvbihlKXt0LndoZWVsRGVsdGE9TWF0aC5tYXgoLTEsTWF0aC5taW4oMSxlLndoZWVsRGVsdGF8fC1lLmRldGFpbCkpLGUucHJldmVudERlZmF1bHQoKX0sby5zZXRFbGVtZW50KHQsdC5lbGVtZW50KSx0fSxvLnNldEVsZW1lbnQ9ZnVuY3Rpb24oZSx0KXtlLmVsZW1lbnQ9dCx0LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixlLm1vdXNlbW92ZSksdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsZS5tb3VzZWRvd24pLHQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixlLm1vdXNldXApLHQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNld2hlZWxcIixlLm1vdXNld2hlZWwpLHQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTU1vdXNlU2Nyb2xsXCIsZS5tb3VzZXdoZWVsKSx0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIixlLm1vdXNlbW92ZSksdC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLGUubW91c2Vkb3duKSx0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLGUubW91c2V1cCl9LFxuby5jbGVhclNvdXJjZUV2ZW50cz1mdW5jdGlvbihlKXtlLnNvdXJjZUV2ZW50cy5tb3VzZW1vdmU9bnVsbCxlLnNvdXJjZUV2ZW50cy5tb3VzZWRvd249bnVsbCxlLnNvdXJjZUV2ZW50cy5tb3VzZXVwPW51bGwsZS5zb3VyY2VFdmVudHMubW91c2V3aGVlbD1udWxsLGUud2hlZWxEZWx0YT0wfSxvLnNldE9mZnNldD1mdW5jdGlvbihlLHQpe2Uub2Zmc2V0Lng9dC54LGUub2Zmc2V0Lnk9dC55LGUucG9zaXRpb24ueD1lLmFic29sdXRlLngqZS5zY2FsZS54K2Uub2Zmc2V0LngsZS5wb3NpdGlvbi55PWUuYWJzb2x1dGUueSplLnNjYWxlLnkrZS5vZmZzZXQueX0sby5zZXRTY2FsZT1mdW5jdGlvbihlLHQpe2Uuc2NhbGUueD10LngsZS5zY2FsZS55PXQueSxlLnBvc2l0aW9uLng9ZS5hYnNvbHV0ZS54KmUuc2NhbGUueCtlLm9mZnNldC54LGUucG9zaXRpb24ueT1lLmFic29sdXRlLnkqZS5zY2FsZS55K2Uub2Zmc2V0Lnl9LG8uX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvbj1mdW5jdGlvbihlLHQsbil7dmFyIG8saSxyPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkscz1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnR8fGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZXx8ZG9jdW1lbnQuYm9keSxhPXZvaWQgMCE9PXdpbmRvdy5wYWdlWE9mZnNldD93aW5kb3cucGFnZVhPZmZzZXQ6cy5zY3JvbGxMZWZ0LGw9dm9pZCAwIT09d2luZG93LnBhZ2VZT2Zmc2V0P3dpbmRvdy5wYWdlWU9mZnNldDpzLnNjcm9sbFRvcCxjPWUuY2hhbmdlZFRvdWNoZXM7cmV0dXJuIGM/KG89Y1swXS5wYWdlWC1yLmxlZnQtYSxpPWNbMF0ucGFnZVktci50b3AtbCk6KG89ZS5wYWdlWC1yLmxlZnQtYSxpPWUucGFnZVktci50b3AtbCkse3g6by8odC5jbGllbnRXaWR0aC8odC53aWR0aHx8dC5jbGllbnRXaWR0aCkqbikseTppLyh0LmNsaWVudEhlaWdodC8odC5oZWlnaHR8fHQuY2xpZW50SGVpZ2h0KSpuKX19fSgpfSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0fV0sMjA6W2Z1bmN0aW9uKGUsdCxuKXtcbnZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuL0NvbW1vblwiKTshZnVuY3Rpb24oKXtvLl9yZWdpc3RyeT17fSxvLnJlZ2lzdGVyPWZ1bmN0aW9uKGUpe2lmKG8uaXNQbHVnaW4oZSl8fGkud2FybihcIlBsdWdpbi5yZWdpc3RlcjpcIixvLnRvU3RyaW5nKGUpLFwiZG9lcyBub3QgaW1wbGVtZW50IGFsbCByZXF1aXJlZCBmaWVsZHMuXCIpLGUubmFtZSBpbiBvLl9yZWdpc3RyeSl7dmFyIHQ9by5fcmVnaXN0cnlbZS5uYW1lXSxuPW8udmVyc2lvblBhcnNlKGUudmVyc2lvbikubnVtYmVyLHI9by52ZXJzaW9uUGFyc2UodC52ZXJzaW9uKS5udW1iZXI7bj5yPyhpLndhcm4oXCJQbHVnaW4ucmVnaXN0ZXI6XCIsby50b1N0cmluZyh0KSxcIndhcyB1cGdyYWRlZCB0b1wiLG8udG9TdHJpbmcoZSkpLG8uX3JlZ2lzdHJ5W2UubmFtZV09ZSk6bjxyP2kud2FybihcIlBsdWdpbi5yZWdpc3RlcjpcIixvLnRvU3RyaW5nKHQpLFwiY2FuIG5vdCBiZSBkb3duZ3JhZGVkIHRvXCIsby50b1N0cmluZyhlKSk6ZSE9PXQmJmkud2FybihcIlBsdWdpbi5yZWdpc3RlcjpcIixvLnRvU3RyaW5nKGUpLFwiaXMgYWxyZWFkeSByZWdpc3RlcmVkIHRvIGRpZmZlcmVudCBwbHVnaW4gb2JqZWN0XCIpfWVsc2Ugby5fcmVnaXN0cnlbZS5uYW1lXT1lO3JldHVybiBlfSxvLnJlc29sdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uX3JlZ2lzdHJ5W28uZGVwZW5kZW5jeVBhcnNlKGUpLm5hbWVdfSxvLnRvU3RyaW5nPWZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP2U6KGUubmFtZXx8XCJhbm9ueW1vdXNcIikrXCJAXCIrKGUudmVyc2lvbnx8ZS5yYW5nZXx8XCIwLjAuMFwiKX0sby5pc1BsdWdpbj1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5uYW1lJiZlLnZlcnNpb24mJmUuaW5zdGFsbH0sby5pc1VzZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS51c2VkLmluZGV4T2YodCk+LTF9LG8uaXNGb3I9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmZvciYmby5kZXBlbmRlbmN5UGFyc2UoZS5mb3IpXG47cmV0dXJuIWUuZm9yfHx0Lm5hbWU9PT1uLm5hbWUmJm8udmVyc2lvblNhdGlzZmllcyh0LnZlcnNpb24sbi5yYW5nZSl9LG8udXNlPWZ1bmN0aW9uKGUsdCl7aWYoZS51c2VzPShlLnVzZXN8fFtdKS5jb25jYXQodHx8W10pLDA9PT1lLnVzZXMubGVuZ3RoKXJldHVybiB2b2lkIGkud2FybihcIlBsdWdpbi51c2U6XCIsby50b1N0cmluZyhlKSxcImRvZXMgbm90IHNwZWNpZnkgYW55IGRlcGVuZGVuY2llcyB0byBpbnN0YWxsLlwiKTtmb3IodmFyIG49by5kZXBlbmRlbmNpZXMoZSkscj1pLnRvcG9sb2dpY2FsU29ydChuKSxzPVtdLGE9MDthPHIubGVuZ3RoO2ErPTEpaWYoclthXSE9PWUubmFtZSl7dmFyIGw9by5yZXNvbHZlKHJbYV0pO2w/by5pc1VzZWQoZSxsLm5hbWUpfHwoby5pc0ZvcihsLGUpfHwoaS53YXJuKFwiUGx1Z2luLnVzZTpcIixvLnRvU3RyaW5nKGwpLFwiaXMgZm9yXCIsbC5mb3IsXCJidXQgaW5zdGFsbGVkIG9uXCIsby50b1N0cmluZyhlKStcIi5cIiksbC5fd2FybmVkPSEwKSxsLmluc3RhbGw/bC5pbnN0YWxsKGUpOihpLndhcm4oXCJQbHVnaW4udXNlOlwiLG8udG9TdHJpbmcobCksXCJkb2VzIG5vdCBzcGVjaWZ5IGFuIGluc3RhbGwgZnVuY3Rpb24uXCIpLGwuX3dhcm5lZD0hMCksbC5fd2FybmVkPyhzLnB1c2goXCLwn5S2IFwiK28udG9TdHJpbmcobCkpLGRlbGV0ZSBsLl93YXJuZWQpOnMucHVzaChcIuKchSBcIitvLnRvU3RyaW5nKGwpKSxlLnVzZWQucHVzaChsLm5hbWUpKTpzLnB1c2goXCLinYwgXCIrclthXSl9cy5sZW5ndGg+MCYmaS5pbmZvKHMuam9pbihcIiAgXCIpKX0sby5kZXBlbmRlbmNpZXM9ZnVuY3Rpb24oZSx0KXt2YXIgbj1vLmRlcGVuZGVuY3lQYXJzZShlKSxyPW4ubmFtZTtpZih0PXR8fHt9LCEociBpbiB0KSl7ZT1vLnJlc29sdmUoZSl8fGUsdFtyXT1pLm1hcChlLnVzZXN8fFtdLGZ1bmN0aW9uKHQpe28uaXNQbHVnaW4odCkmJm8ucmVnaXN0ZXIodCk7dmFyIHI9by5kZXBlbmRlbmN5UGFyc2UodCkscz1vLnJlc29sdmUodClcbjtyZXR1cm4gcyYmIW8udmVyc2lvblNhdGlzZmllcyhzLnZlcnNpb24sci5yYW5nZSk/KGkud2FybihcIlBsdWdpbi5kZXBlbmRlbmNpZXM6XCIsby50b1N0cmluZyhzKSxcImRvZXMgbm90IHNhdGlzZnlcIixvLnRvU3RyaW5nKHIpLFwidXNlZCBieVwiLG8udG9TdHJpbmcobikrXCIuXCIpLHMuX3dhcm5lZD0hMCxlLl93YXJuZWQ9ITApOnN8fChpLndhcm4oXCJQbHVnaW4uZGVwZW5kZW5jaWVzOlwiLG8udG9TdHJpbmcodCksXCJ1c2VkIGJ5XCIsby50b1N0cmluZyhuKSxcImNvdWxkIG5vdCBiZSByZXNvbHZlZC5cIiksZS5fd2FybmVkPSEwKSxyLm5hbWV9KTtmb3IodmFyIHM9MDtzPHRbcl0ubGVuZ3RoO3MrPTEpby5kZXBlbmRlbmNpZXModFtyXVtzXSx0KTtyZXR1cm4gdH19LG8uZGVwZW5kZW5jeVBhcnNlPWZ1bmN0aW9uKGUpe2lmKGkuaXNTdHJpbmcoZSkpe3JldHVybi9eW1xcdy1dKyhAKFxcKnxbXFxefl0/XFxkK1xcLlxcZCtcXC5cXGQrKC1bMC05QS1aYS16LV0rKT8pKT8kLy50ZXN0KGUpfHxpLndhcm4oXCJQbHVnaW4uZGVwZW5kZW5jeVBhcnNlOlwiLGUsXCJpcyBub3QgYSB2YWxpZCBkZXBlbmRlbmN5IHN0cmluZy5cIikse25hbWU6ZS5zcGxpdChcIkBcIilbMF0scmFuZ2U6ZS5zcGxpdChcIkBcIilbMV18fFwiKlwifX1yZXR1cm57bmFtZTplLm5hbWUscmFuZ2U6ZS5yYW5nZXx8ZS52ZXJzaW9ufX0sby52ZXJzaW9uUGFyc2U9ZnVuY3Rpb24oZSl7L15cXCp8W1xcXn5dP1xcZCtcXC5cXGQrXFwuXFxkKygtWzAtOUEtWmEtei1dKyk/JC8udGVzdChlKXx8aS53YXJuKFwiUGx1Z2luLnZlcnNpb25QYXJzZTpcIixlLFwiaXMgbm90IGEgdmFsaWQgdmVyc2lvbiBvciByYW5nZS5cIik7dmFyIHQ9ZS5zcGxpdChcIi1cIik7ZT10WzBdO3ZhciBuPWlzTmFOKE51bWJlcihlWzBdKSksbz1uP2Uuc3Vic3RyKDEpOmUscj1pLm1hcChvLnNwbGl0KFwiLlwiKSxmdW5jdGlvbihlKXtyZXR1cm4gTnVtYmVyKGUpfSk7cmV0dXJue2lzUmFuZ2U6bix2ZXJzaW9uOm8scmFuZ2U6ZSxvcGVyYXRvcjpuP2VbMF06XCJcIixwYXJ0czpyLFxucHJlcmVsZWFzZTp0WzFdLG51bWJlcjoxZTgqclswXSsxZTQqclsxXStyWzJdfX0sby52ZXJzaW9uU2F0aXNmaWVzPWZ1bmN0aW9uKGUsdCl7dD10fHxcIipcIjt2YXIgbj1vLnZlcnNpb25QYXJzZSh0KSxpPW4ucGFydHMscj1vLnZlcnNpb25QYXJzZShlKSxzPXIucGFydHM7aWYobi5pc1JhbmdlKXtpZihcIipcIj09PW4ub3BlcmF0b3J8fFwiKlwiPT09ZSlyZXR1cm4hMDtpZihcIn5cIj09PW4ub3BlcmF0b3IpcmV0dXJuIHNbMF09PT1pWzBdJiZzWzFdPT09aVsxXSYmc1syXT49aVsyXTtpZihcIl5cIj09PW4ub3BlcmF0b3IpcmV0dXJuIGlbMF0+MD9zWzBdPT09aVswXSYmci5udW1iZXI+PW4ubnVtYmVyOmlbMV0+MD9zWzFdPT09aVsxXSYmc1syXT49aVsyXTpzWzJdPT09aVsyXX1yZXR1cm4gZT09PXR8fFwiKlwiPT09ZX19KCl9LHtcIi4vQ29tbW9uXCI6MTR9XSwyMTpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuL0V2ZW50c1wiKSxyPWUoXCIuL0VuZ2luZVwiKSxzPWUoXCIuL0NvbW1vblwiKTshZnVuY3Rpb24oKXt2YXIgZSx0O2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJihlPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSx0PXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tc0NhbmNlbEFuaW1hdGlvbkZyYW1lKSwhZSl7dmFyIG47ZT1mdW5jdGlvbihlKXtuPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKHMubm93KCkpfSwxZTMvNjApfSx0PWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KG4pfX1vLmNyZWF0ZT1mdW5jdGlvbihlKXt2YXIgdD17ZnBzOjYwLGNvcnJlY3Rpb246MSxkZWx0YVNhbXBsZVNpemU6NjAsXG5jb3VudGVyVGltZXN0YW1wOjAsZnJhbWVDb3VudGVyOjAsZGVsdGFIaXN0b3J5OltdLHRpbWVQcmV2Om51bGwsdGltZVNjYWxlUHJldjoxLGZyYW1lUmVxdWVzdElkOm51bGwsaXNGaXhlZDohMSxlbmFibGVkOiEwfSxuPXMuZXh0ZW5kKHQsZSk7cmV0dXJuIG4uZGVsdGE9bi5kZWx0YXx8MWUzL24uZnBzLG4uZGVsdGFNaW49bi5kZWx0YU1pbnx8MWUzL24uZnBzLG4uZGVsdGFNYXg9bi5kZWx0YU1heHx8MWUzLyguNSpuLmZwcyksbi5mcHM9MWUzL24uZGVsdGEsbn0sby5ydW49ZnVuY3Rpb24odCxuKXtyZXR1cm4gdm9pZCAwIT09dC5wb3NpdGlvbkl0ZXJhdGlvbnMmJihuPXQsdD1vLmNyZWF0ZSgpKSxmdW5jdGlvbiBpKHIpe3QuZnJhbWVSZXF1ZXN0SWQ9ZShpKSxyJiZ0LmVuYWJsZWQmJm8udGljayh0LG4scil9KCksdH0sby50aWNrPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxzPXQudGltaW5nLGE9MSxsPXt0aW1lc3RhbXA6cy50aW1lc3RhbXB9O2kudHJpZ2dlcihlLFwiYmVmb3JlVGlja1wiLGwpLGkudHJpZ2dlcih0LFwiYmVmb3JlVGlja1wiLGwpLGUuaXNGaXhlZD9vPWUuZGVsdGE6KG89bi1lLnRpbWVQcmV2fHxlLmRlbHRhLGUudGltZVByZXY9bixlLmRlbHRhSGlzdG9yeS5wdXNoKG8pLGUuZGVsdGFIaXN0b3J5PWUuZGVsdGFIaXN0b3J5LnNsaWNlKC1lLmRlbHRhU2FtcGxlU2l6ZSksbz1NYXRoLm1pbi5hcHBseShudWxsLGUuZGVsdGFIaXN0b3J5KSxvPW88ZS5kZWx0YU1pbj9lLmRlbHRhTWluOm8sbz1vPmUuZGVsdGFNYXg/ZS5kZWx0YU1heDpvLGE9by9lLmRlbHRhLGUuZGVsdGE9byksMCE9PWUudGltZVNjYWxlUHJldiYmKGEqPXMudGltZVNjYWxlL2UudGltZVNjYWxlUHJldiksMD09PXMudGltZVNjYWxlJiYoYT0wKSxlLnRpbWVTY2FsZVByZXY9cy50aW1lU2NhbGUsZS5jb3JyZWN0aW9uPWEsZS5mcmFtZUNvdW50ZXIrPTEsXG5uLWUuY291bnRlclRpbWVzdGFtcD49MWUzJiYoZS5mcHM9ZS5mcmFtZUNvdW50ZXIqKChuLWUuY291bnRlclRpbWVzdGFtcCkvMWUzKSxlLmNvdW50ZXJUaW1lc3RhbXA9bixlLmZyYW1lQ291bnRlcj0wKSxpLnRyaWdnZXIoZSxcInRpY2tcIixsKSxpLnRyaWdnZXIodCxcInRpY2tcIixsKSx0LndvcmxkLmlzTW9kaWZpZWQmJnQucmVuZGVyJiZ0LnJlbmRlci5jb250cm9sbGVyJiZ0LnJlbmRlci5jb250cm9sbGVyLmNsZWFyJiZ0LnJlbmRlci5jb250cm9sbGVyLmNsZWFyKHQucmVuZGVyKSxpLnRyaWdnZXIoZSxcImJlZm9yZVVwZGF0ZVwiLGwpLHIudXBkYXRlKHQsbyxhKSxpLnRyaWdnZXIoZSxcImFmdGVyVXBkYXRlXCIsbCksdC5yZW5kZXImJnQucmVuZGVyLmNvbnRyb2xsZXImJihpLnRyaWdnZXIoZSxcImJlZm9yZVJlbmRlclwiLGwpLGkudHJpZ2dlcih0LFwiYmVmb3JlUmVuZGVyXCIsbCksdC5yZW5kZXIuY29udHJvbGxlci53b3JsZCh0LnJlbmRlciksaS50cmlnZ2VyKGUsXCJhZnRlclJlbmRlclwiLGwpLGkudHJpZ2dlcih0LFwiYWZ0ZXJSZW5kZXJcIixsKSksaS50cmlnZ2VyKGUsXCJhZnRlclRpY2tcIixsKSxpLnRyaWdnZXIodCxcImFmdGVyVGlja1wiLGwpfSxvLnN0b3A9ZnVuY3Rpb24oZSl7dChlLmZyYW1lUmVxdWVzdElkKX0sby5zdGFydD1mdW5jdGlvbihlLHQpe28ucnVuKGUsdCl9fSgpfSx7XCIuL0NvbW1vblwiOjE0LFwiLi9FbmdpbmVcIjoxNSxcIi4vRXZlbnRzXCI6MTZ9XSwyMjpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuL0V2ZW50c1wiKTshZnVuY3Rpb24oKXtvLl9tb3Rpb25XYWtlVGhyZXNob2xkPS4xOCxvLl9tb3Rpb25TbGVlcFRocmVzaG9sZD0uMDgsby5fbWluQmlhcz0uOSxvLnVwZGF0ZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10KnQqdCxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciByPWVbaV0scz1yLnNwZWVkKnIuc3BlZWQrci5hbmd1bGFyU3BlZWQqci5hbmd1bGFyU3BlZWRcbjtpZigwPT09ci5mb3JjZS54JiYwPT09ci5mb3JjZS55KXt2YXIgYT1NYXRoLm1pbihyLm1vdGlvbixzKSxsPU1hdGgubWF4KHIubW90aW9uLHMpO3IubW90aW9uPW8uX21pbkJpYXMqYSsoMS1vLl9taW5CaWFzKSpsLHIuc2xlZXBUaHJlc2hvbGQ+MCYmci5tb3Rpb248by5fbW90aW9uU2xlZXBUaHJlc2hvbGQqbj8oci5zbGVlcENvdW50ZXIrPTEsci5zbGVlcENvdW50ZXI+PXIuc2xlZXBUaHJlc2hvbGQmJm8uc2V0KHIsITApKTpyLnNsZWVwQ291bnRlcj4wJiYoci5zbGVlcENvdW50ZXItPTEpfWVsc2Ugby5zZXQociwhMSl9fSxvLmFmdGVyQ29sbGlzaW9ucz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10KnQqdCxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciByPWVbaV07aWYoci5pc0FjdGl2ZSl7dmFyIHM9ci5jb2xsaXNpb24sYT1zLmJvZHlBLnBhcmVudCxsPXMuYm9keUIucGFyZW50O2lmKCEoYS5pc1NsZWVwaW5nJiZsLmlzU2xlZXBpbmd8fGEuaXNTdGF0aWN8fGwuaXNTdGF0aWMpJiYoYS5pc1NsZWVwaW5nfHxsLmlzU2xlZXBpbmcpKXt2YXIgYz1hLmlzU2xlZXBpbmcmJiFhLmlzU3RhdGljP2E6bCxkPWM9PT1hP2w6YTshYy5pc1N0YXRpYyYmZC5tb3Rpb24+by5fbW90aW9uV2FrZVRocmVzaG9sZCpuJiZvLnNldChjLCExKX19fX0sby5zZXQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmlzU2xlZXBpbmc7dD8oZS5pc1NsZWVwaW5nPSEwLGUuc2xlZXBDb3VudGVyPWUuc2xlZXBUaHJlc2hvbGQsZS5wb3NpdGlvbkltcHVsc2UueD0wLGUucG9zaXRpb25JbXB1bHNlLnk9MCxlLnBvc2l0aW9uUHJldi54PWUucG9zaXRpb24ueCxlLnBvc2l0aW9uUHJldi55PWUucG9zaXRpb24ueSxlLmFuZ2xlUHJldj1lLmFuZ2xlLGUuc3BlZWQ9MCxlLmFuZ3VsYXJTcGVlZD0wLGUubW90aW9uPTAsbnx8aS50cmlnZ2VyKGUsXCJzbGVlcFN0YXJ0XCIpKTooZS5pc1NsZWVwaW5nPSExLGUuc2xlZXBDb3VudGVyPTAsbiYmaS50cmlnZ2VyKGUsXCJzbGVlcEVuZFwiKSl9fSgpfSx7XG5cIi4vRXZlbnRzXCI6MTZ9XSwyMzpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpLHI9ZShcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCIpLHM9ZShcIi4uL2NvcmUvQ29tbW9uXCIpLGE9ZShcIi4uL2JvZHkvQm9keVwiKSxsPWUoXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIiksYz1lKFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCIpOyFmdW5jdGlvbigpe28ucmVjdGFuZ2xlPWZ1bmN0aW9uKGUsdCxuLG8saSl7aT1pfHx7fTt2YXIgbD17bGFiZWw6XCJSZWN0YW5nbGUgQm9keVwiLHBvc2l0aW9uOnt4OmUseTp0fSx2ZXJ0aWNlczpyLmZyb21QYXRoKFwiTCAwIDAgTCBcIituK1wiIDAgTCBcIituK1wiIFwiK28rXCIgTCAwIFwiK28pfTtpZihpLmNoYW1mZXIpe3ZhciBjPWkuY2hhbWZlcjtsLnZlcnRpY2VzPXIuY2hhbWZlcihsLnZlcnRpY2VzLGMucmFkaXVzLGMucXVhbGl0eSxjLnF1YWxpdHlNaW4sYy5xdWFsaXR5TWF4KSxkZWxldGUgaS5jaGFtZmVyfXJldHVybiBhLmNyZWF0ZShzLmV4dGVuZCh7fSxsLGkpKX0sby50cmFwZXpvaWQ9ZnVuY3Rpb24oZSx0LG4sbyxpLGwpe2w9bHx8e30saSo9LjU7dmFyIGMsZD0oMS0yKmkpKm4sdT1uKmkscD11K2QsZj1wK3U7Yz1pPC41P1wiTCAwIDAgTCBcIit1K1wiIFwiKy1vK1wiIEwgXCIrcCtcIiBcIistbytcIiBMIFwiK2YrXCIgMFwiOlwiTCAwIDAgTCBcIitwK1wiIFwiKy1vK1wiIEwgXCIrZitcIiAwXCI7dmFyIG09e2xhYmVsOlwiVHJhcGV6b2lkIEJvZHlcIixwb3NpdGlvbjp7eDplLHk6dH0sdmVydGljZXM6ci5mcm9tUGF0aChjKX07aWYobC5jaGFtZmVyKXt2YXIgdj1sLmNoYW1mZXI7bS52ZXJ0aWNlcz1yLmNoYW1mZXIobS52ZXJ0aWNlcyx2LnJhZGl1cyx2LnF1YWxpdHksdi5xdWFsaXR5TWluLHYucXVhbGl0eU1heCksZGVsZXRlIGwuY2hhbWZlcn1yZXR1cm4gYS5jcmVhdGUocy5leHRlbmQoe30sbSxsKSl9LG8uY2lyY2xlPWZ1bmN0aW9uKGUsdCxuLGkscil7aT1pfHx7fTt2YXIgYT17bGFiZWw6XCJDaXJjbGUgQm9keVwiLGNpcmNsZVJhZGl1czpufTtyPXJ8fDI1XG47dmFyIGw9TWF0aC5jZWlsKE1hdGgubWF4KDEwLE1hdGgubWluKHIsbikpKTtyZXR1cm4gbCUyPT0xJiYobCs9MSksby5wb2x5Z29uKGUsdCxsLG4scy5leHRlbmQoe30sYSxpKSl9LG8ucG9seWdvbj1mdW5jdGlvbihlLHQsbixpLGwpe2lmKGw9bHx8e30sbjwzKXJldHVybiBvLmNpcmNsZShlLHQsaSxsKTtmb3IodmFyIGM9MipNYXRoLlBJL24sZD1cIlwiLHU9LjUqYyxwPTA7cDxuO3ArPTEpe3ZhciBmPXUrcCpjLG09TWF0aC5jb3MoZikqaSx2PU1hdGguc2luKGYpKmk7ZCs9XCJMIFwiK20udG9GaXhlZCgzKStcIiBcIit2LnRvRml4ZWQoMykrXCIgXCJ9dmFyIHk9e2xhYmVsOlwiUG9seWdvbiBCb2R5XCIscG9zaXRpb246e3g6ZSx5OnR9LHZlcnRpY2VzOnIuZnJvbVBhdGgoZCl9O2lmKGwuY2hhbWZlcil7dmFyIGc9bC5jaGFtZmVyO3kudmVydGljZXM9ci5jaGFtZmVyKHkudmVydGljZXMsZy5yYWRpdXMsZy5xdWFsaXR5LGcucXVhbGl0eU1pbixnLnF1YWxpdHlNYXgpLGRlbGV0ZSBsLmNoYW1mZXJ9cmV0dXJuIGEuY3JlYXRlKHMuZXh0ZW5kKHt9LHksbCkpfSxvLmZyb21WZXJ0aWNlcz1mdW5jdGlvbihlLHQsbixvLGQsdSxwKXtpfHwoaT1zLl9yZXF1aXJlR2xvYmFsKFwiZGVjb21wXCIsXCJwb2x5LWRlY29tcFwiKSk7dmFyIGYsbSx2LHksZyx4LGgsYix3O2ZvcihvPW98fHt9LG09W10sZD12b2lkIDAhPT1kJiZkLHU9dm9pZCAwIT09dT91Oi4wMSxwPXZvaWQgMCE9PXA/cDoxMCxpfHxzLndhcm4oXCJCb2RpZXMuZnJvbVZlcnRpY2VzOiBwb2x5LWRlY29tcC5qcyByZXF1aXJlZC4gQ291bGQgbm90IGRlY29tcG9zZSB2ZXJ0aWNlcy4gRmFsbGJhY2sgdG8gY29udmV4IGh1bGwuXCIpLHMuaXNBcnJheShuWzBdKXx8KG49W25dKSxiPTA7YjxuLmxlbmd0aDtiKz0xKWlmKHk9bltiXSwodj1yLmlzQ29udmV4KHkpKXx8IWkpeT12P3IuY2xvY2t3aXNlU29ydCh5KTpyLmh1bGwoeSksbS5wdXNoKHtwb3NpdGlvbjp7eDplLHk6dH0sdmVydGljZXM6eX0pO2Vsc2V7XG52YXIgUz15Lm1hcChmdW5jdGlvbihlKXtyZXR1cm5bZS54LGUueV19KTtpLm1ha2VDQ1coUyksITEhPT11JiZpLnJlbW92ZUNvbGxpbmVhclBvaW50cyhTLHUpO3ZhciBDPWkucXVpY2tEZWNvbXAoUyk7Zm9yKGc9MDtnPEMubGVuZ3RoO2crKyl7dmFyIEE9Q1tnXSxQPUEubWFwKGZ1bmN0aW9uKGUpe3JldHVybnt4OmVbMF0seTplWzFdfX0pO3A+MCYmci5hcmVhKFApPHB8fG0ucHVzaCh7cG9zaXRpb246ci5jZW50cmUoUCksdmVydGljZXM6UH0pfX1mb3IoZz0wO2c8bS5sZW5ndGg7ZysrKW1bZ109YS5jcmVhdGUocy5leHRlbmQobVtnXSxvKSk7aWYoZCl7Zm9yKGc9MDtnPG0ubGVuZ3RoO2crKyl7dmFyIEI9bVtnXTtmb3IoeD1nKzE7eDxtLmxlbmd0aDt4Kyspe3ZhciBNPW1beF07aWYobC5vdmVybGFwcyhCLmJvdW5kcyxNLmJvdW5kcykpe3ZhciBrPUIudmVydGljZXMsST1NLnZlcnRpY2VzO2ZvcihoPTA7aDxCLnZlcnRpY2VzLmxlbmd0aDtoKyspZm9yKHc9MDt3PE0udmVydGljZXMubGVuZ3RoO3crKyl7dmFyIF89Yy5tYWduaXR1ZGVTcXVhcmVkKGMuc3ViKGtbKGgrMSklay5sZW5ndGhdLElbd10pKSxUPWMubWFnbml0dWRlU3F1YXJlZChjLnN1YihrW2hdLElbKHcrMSklSS5sZW5ndGhdKSk7Xzw1JiZUPDUmJihrW2hdLmlzSW50ZXJuYWw9ITAsSVt3XS5pc0ludGVybmFsPSEwKX19fX19cmV0dXJuIG0ubGVuZ3RoPjE/KGY9YS5jcmVhdGUocy5leHRlbmQoe3BhcnRzOm0uc2xpY2UoMCl9LG8pKSxhLnNldFBvc2l0aW9uKGYse3g6ZSx5OnR9KSxmKTptWzBdfX0oKX0se1wiLi4vYm9keS9Cb2R5XCI6MSxcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOX1dLDI0OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW9cbjt2YXIgaT1lKFwiLi4vYm9keS9Db21wb3NpdGVcIikscj1lKFwiLi4vY29uc3RyYWludC9Db25zdHJhaW50XCIpLHM9ZShcIi4uL2NvcmUvQ29tbW9uXCIpLGE9ZShcIi4uL2JvZHkvQm9keVwiKSxsPWUoXCIuL0JvZGllc1wiKTshZnVuY3Rpb24oKXtvLnN0YWNrPWZ1bmN0aW9uKGUsdCxuLG8scixzLGwpe2Zvcih2YXIgYyxkPWkuY3JlYXRlKHtsYWJlbDpcIlN0YWNrXCJ9KSx1PWUscD10LGY9MCxtPTA7bTxvO20rKyl7Zm9yKHZhciB2PTAseT0wO3k8bjt5Kyspe3ZhciBnPWwodSxwLHksbSxjLGYpO2lmKGcpe3ZhciB4PWcuYm91bmRzLm1heC55LWcuYm91bmRzLm1pbi55LGg9Zy5ib3VuZHMubWF4LngtZy5ib3VuZHMubWluLng7eD52JiYodj14KSxhLnRyYW5zbGF0ZShnLHt4Oi41KmgseTouNSp4fSksdT1nLmJvdW5kcy5tYXgueCtyLGkuYWRkQm9keShkLGcpLGM9ZyxmKz0xfWVsc2UgdSs9cn1wKz12K3MsdT1lfXJldHVybiBkfSxvLmNoYWluPWZ1bmN0aW9uKGUsdCxuLG8sYSxsKXtmb3IodmFyIGM9ZS5ib2RpZXMsZD0xO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgdT1jW2QtMV0scD1jW2RdLGY9dS5ib3VuZHMubWF4LnktdS5ib3VuZHMubWluLnksbT11LmJvdW5kcy5tYXgueC11LmJvdW5kcy5taW4ueCx2PXAuYm91bmRzLm1heC55LXAuYm91bmRzLm1pbi55LHk9cC5ib3VuZHMubWF4LngtcC5ib3VuZHMubWluLngsZz17Ym9keUE6dSxwb2ludEE6e3g6bSp0LHk6ZipufSxib2R5QjpwLHBvaW50Qjp7eDp5Km8seTp2KmF9fSx4PXMuZXh0ZW5kKGcsbCk7aS5hZGRDb25zdHJhaW50KGUsci5jcmVhdGUoeCkpfXJldHVybiBlLmxhYmVsKz1cIiBDaGFpblwiLGV9LG8ubWVzaD1mdW5jdGlvbihlLHQsbixvLGEpe3ZhciBsLGMsZCx1LHAsZj1lLmJvZGllcztmb3IobD0wO2w8bjtsKyspe2ZvcihjPTE7Yzx0O2MrKylkPWZbYy0xK2wqdF0sdT1mW2MrbCp0XSxpLmFkZENvbnN0cmFpbnQoZSxyLmNyZWF0ZShzLmV4dGVuZCh7Ym9keUE6ZCxib2R5Qjp1fSxhKSkpXG47aWYobD4wKWZvcihjPTA7Yzx0O2MrKylkPWZbYysobC0xKSp0XSx1PWZbYytsKnRdLGkuYWRkQ29uc3RyYWludChlLHIuY3JlYXRlKHMuZXh0ZW5kKHtib2R5QTpkLGJvZHlCOnV9LGEpKSksbyYmYz4wJiYocD1mW2MtMSsobC0xKSp0XSxpLmFkZENvbnN0cmFpbnQoZSxyLmNyZWF0ZShzLmV4dGVuZCh7Ym9keUE6cCxib2R5Qjp1fSxhKSkpKSxvJiZjPHQtMSYmKHA9ZltjKzErKGwtMSkqdF0saS5hZGRDb25zdHJhaW50KGUsci5jcmVhdGUocy5leHRlbmQoe2JvZHlBOnAsYm9keUI6dX0sYSkpKSl9cmV0dXJuIGUubGFiZWwrPVwiIE1lc2hcIixlfSxvLnB5cmFtaWQ9ZnVuY3Rpb24oZSx0LG4saSxyLHMsbCl7cmV0dXJuIG8uc3RhY2soZSx0LG4saSxyLHMsZnVuY3Rpb24odCxvLHMsYyxkLHUpe3ZhciBwPU1hdGgubWluKGksTWF0aC5jZWlsKG4vMikpLGY9ZD9kLmJvdW5kcy5tYXgueC1kLmJvdW5kcy5taW4ueDowO2lmKCEoYz5wKSl7Yz1wLWM7dmFyIG09Yyx2PW4tMS1jO2lmKCEoczxtfHxzPnYpKXsxPT09dSYmYS50cmFuc2xhdGUoZCx7eDoocysobiUyPT0xPzE6LTEpKSpmLHk6MH0pO3JldHVybiBsKGUrKGQ/cypmOjApK3MqcixvLHMsYyxkLHUpfX19KX0sby5uZXd0b25zQ3JhZGxlPWZ1bmN0aW9uKGUsdCxuLG8scyl7Zm9yKHZhciBhPWkuY3JlYXRlKHtsYWJlbDpcIk5ld3RvbnMgQ3JhZGxlXCJ9KSxjPTA7YzxuO2MrKyl7dmFyIGQ9bC5jaXJjbGUoZStjKigxLjkqbyksdCtzLG8se2luZXJ0aWE6MS8wLHJlc3RpdHV0aW9uOjEsZnJpY3Rpb246MCxmcmljdGlvbkFpcjoxZS00LHNsb3A6MX0pLHU9ci5jcmVhdGUoe3BvaW50QTp7eDplK2MqKDEuOSpvKSx5OnR9LGJvZHlCOmR9KTtpLmFkZEJvZHkoYSxkKSxpLmFkZENvbnN0cmFpbnQoYSx1KX1yZXR1cm4gYX0sby5jYXI9ZnVuY3Rpb24oZSx0LG4sbyxzKXt2YXIgYz1hLm5leHRHcm91cCghMCksZD0uNSotbisyMCx1PS41Km4tMjAscD1pLmNyZWF0ZSh7bGFiZWw6XCJDYXJcIlxufSksZj1sLnJlY3RhbmdsZShlLHQsbixvLHtjb2xsaXNpb25GaWx0ZXI6e2dyb3VwOmN9LGNoYW1mZXI6e3JhZGl1czouNSpvfSxkZW5zaXR5OjJlLTR9KSxtPWwuY2lyY2xlKGUrZCx0KzAscyx7Y29sbGlzaW9uRmlsdGVyOntncm91cDpjfSxmcmljdGlvbjouOH0pLHY9bC5jaXJjbGUoZSt1LHQrMCxzLHtjb2xsaXNpb25GaWx0ZXI6e2dyb3VwOmN9LGZyaWN0aW9uOi44fSkseT1yLmNyZWF0ZSh7Ym9keUI6Zixwb2ludEI6e3g6ZCx5OjB9LGJvZHlBOm0sc3RpZmZuZXNzOjEsbGVuZ3RoOjB9KSxnPXIuY3JlYXRlKHtib2R5QjpmLHBvaW50Qjp7eDp1LHk6MH0sYm9keUE6dixzdGlmZm5lc3M6MSxsZW5ndGg6MH0pO3JldHVybiBpLmFkZEJvZHkocCxmKSxpLmFkZEJvZHkocCxtKSxpLmFkZEJvZHkocCx2KSxpLmFkZENvbnN0cmFpbnQocCx5KSxpLmFkZENvbnN0cmFpbnQocCxnKSxwfSxvLnNvZnRCb2R5PWZ1bmN0aW9uKGUsdCxuLGkscixhLGMsZCx1LHApe3U9cy5leHRlbmQoe2luZXJ0aWE6MS8wfSx1KSxwPXMuZXh0ZW5kKHtzdGlmZm5lc3M6LjIscmVuZGVyOnt0eXBlOlwibGluZVwiLGFuY2hvcnM6ITF9fSxwKTt2YXIgZj1vLnN0YWNrKGUsdCxuLGkscixhLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGwuY2lyY2xlKGUsdCxkLHUpfSk7cmV0dXJuIG8ubWVzaChmLG4saSxjLHApLGYubGFiZWw9XCJTb2Z0IEJvZHlcIixmfX0oKX0se1wiLi4vYm9keS9Cb2R5XCI6MSxcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4uL2NvbnN0cmFpbnQvQ29uc3RyYWludFwiOjEyLFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4vQm9kaWVzXCI6MjN9XSwyNTpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuLi9nZW9tZXRyeS9WZWN0b3JcIikscj1lKFwiLi4vY29yZS9Db21tb25cIik7IWZ1bmN0aW9uKCl7by5mcm9tVmVydGljZXM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXt9LG49MDtuPGUubGVuZ3RoO24rKyl7XG52YXIgbz0obisxKSVlLmxlbmd0aCxzPWkubm9ybWFsaXNlKHt4OmVbb10ueS1lW25dLnkseTplW25dLngtZVtvXS54fSksYT0wPT09cy55PzEvMDpzLngvcy55O2E9YS50b0ZpeGVkKDMpLnRvU3RyaW5nKCksdFthXT1zfXJldHVybiByLnZhbHVlcyh0KX0sby5yb3RhdGU9ZnVuY3Rpb24oZSx0KXtpZigwIT09dClmb3IodmFyIG49TWF0aC5jb3ModCksbz1NYXRoLnNpbih0KSxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciByLHM9ZVtpXTtyPXMueCpuLXMueSpvLHMueT1zLngqbytzLnkqbixzLng9cn19fSgpfSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6Mjh9XSwyNjpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vLGZ1bmN0aW9uKCl7by5jcmVhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9e21pbjp7eDowLHk6MH0sbWF4Ont4OjAseTowfX07cmV0dXJuIGUmJm8udXBkYXRlKHQsZSksdH0sby51cGRhdGU9ZnVuY3Rpb24oZSx0LG4pe2UubWluLng9MS8wLGUubWF4Lng9LTEvMCxlLm1pbi55PTEvMCxlLm1heC55PS0xLzA7Zm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBpPXRbb107aS54PmUubWF4LngmJihlLm1heC54PWkueCksaS54PGUubWluLngmJihlLm1pbi54PWkueCksaS55PmUubWF4LnkmJihlLm1heC55PWkueSksaS55PGUubWluLnkmJihlLm1pbi55PWkueSl9biYmKG4ueD4wP2UubWF4LngrPW4ueDplLm1pbi54Kz1uLngsbi55PjA/ZS5tYXgueSs9bi55OmUubWluLnkrPW4ueSl9LG8uY29udGFpbnM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC54Pj1lLm1pbi54JiZ0Lng8PWUubWF4LngmJnQueT49ZS5taW4ueSYmdC55PD1lLm1heC55fSxvLm92ZXJsYXBzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUubWluLng8PXQubWF4LngmJmUubWF4Lng+PXQubWluLngmJmUubWF4Lnk+PXQubWluLnkmJmUubWluLnk8PXQubWF4Lnl9LG8udHJhbnNsYXRlPWZ1bmN0aW9uKGUsdCl7ZS5taW4ueCs9dC54LFxuZS5tYXgueCs9dC54LGUubWluLnkrPXQueSxlLm1heC55Kz10Lnl9LG8uc2hpZnQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLm1heC54LWUubWluLngsbz1lLm1heC55LWUubWluLnk7ZS5taW4ueD10LngsZS5tYXgueD10LngrbixlLm1pbi55PXQueSxlLm1heC55PXQueStvfX0oKX0se31dLDI3OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9KGUoXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIiksZShcIi4uL2NvcmUvQ29tbW9uXCIpKTshZnVuY3Rpb24oKXtvLnBhdGhUb1ZlcnRpY2VzPWZ1bmN0aW9uKGUsdCl7XCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvd3x8XCJTVkdQYXRoU2VnXCJpbiB3aW5kb3d8fGkud2FybihcIlN2Zy5wYXRoVG9WZXJ0aWNlczogU1ZHUGF0aFNlZyBub3QgZGVmaW5lZCwgYSBwb2x5ZmlsbCBpcyByZXF1aXJlZC5cIik7dmFyIG4scixzLGEsbCxjLGQsdSxwLGYsbSx2LHk9W10sZz0wLHg9MCxoPTA7dD10fHwxNTt2YXIgYj1mdW5jdGlvbihlLHQsbil7dmFyIG89biUyPT0xJiZuPjE7aWYoIXB8fGUhPXAueHx8dCE9cC55KXtwJiZvPyhtPXAueCx2PXAueSk6KG09MCx2PTApO3ZhciBpPXt4Om0rZSx5OnYrdH07IW8mJnB8fChwPWkpLHkucHVzaChpKSx4PW0rZSxoPXYrdH19LHc9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXRoU2VnVHlwZUFzTGV0dGVyLnRvVXBwZXJDYXNlKCk7aWYoXCJaXCIhPT10KXtzd2l0Y2godCl7Y2FzZVwiTVwiOmNhc2VcIkxcIjpjYXNlXCJUXCI6Y2FzZVwiQ1wiOmNhc2VcIlNcIjpjYXNlXCJRXCI6eD1lLngsaD1lLnk7YnJlYWs7Y2FzZVwiSFwiOng9ZS54O2JyZWFrO2Nhc2VcIlZcIjpoPWUueX1iKHgsaCxlLnBhdGhTZWdUeXBlKX19O2ZvcihvLl9zdmdQYXRoVG9BYnNvbHV0ZShlKSxzPWUuZ2V0VG90YWxMZW5ndGgoKSxjPVtdLG49MDtuPGUucGF0aFNlZ0xpc3QubnVtYmVyT2ZJdGVtcztuKz0xKWMucHVzaChlLnBhdGhTZWdMaXN0LmdldEl0ZW0obikpO2ZvcihkPWMuY29uY2F0KCk7ZzxzOyl7XG5pZihmPWUuZ2V0UGF0aFNlZ0F0TGVuZ3RoKGcpLChsPWNbZl0pIT11KXtmb3IoO2QubGVuZ3RoJiZkWzBdIT1sOyl3KGQuc2hpZnQoKSk7dT1sfXN3aXRjaChsLnBhdGhTZWdUeXBlQXNMZXR0ZXIudG9VcHBlckNhc2UoKSl7Y2FzZVwiQ1wiOmNhc2VcIlRcIjpjYXNlXCJTXCI6Y2FzZVwiUVwiOmNhc2VcIkFcIjphPWUuZ2V0UG9pbnRBdExlbmd0aChnKSxiKGEueCxhLnksMCl9Zys9dH1mb3Iobj0wLHI9ZC5sZW5ndGg7bjxyOysrbil3KGRbbl0pO3JldHVybiB5fSxvLl9zdmdQYXRoVG9BYnNvbHV0ZT1mdW5jdGlvbihlKXtmb3IodmFyIHQsbixvLGkscixzLGE9ZS5wYXRoU2VnTGlzdCxsPTAsYz0wLGQ9YS5udW1iZXJPZkl0ZW1zLHU9MDt1PGQ7Kyt1KXt2YXIgcD1hLmdldEl0ZW0odSksZj1wLnBhdGhTZWdUeXBlQXNMZXR0ZXI7aWYoL1tNTEhWQ1NRVEFdLy50ZXN0KGYpKVwieFwiaW4gcCYmKGw9cC54KSxcInlcImluIHAmJihjPXAueSk7ZWxzZSBzd2l0Y2goXCJ4MVwiaW4gcCYmKG89bCtwLngxKSxcIngyXCJpbiBwJiYocj1sK3AueDIpLFwieTFcImluIHAmJihpPWMrcC55MSksXCJ5MlwiaW4gcCYmKHM9YytwLnkyKSxcInhcImluIHAmJihsKz1wLngpLFwieVwiaW4gcCYmKGMrPXAueSksZil7Y2FzZVwibVwiOmEucmVwbGFjZUl0ZW0oZS5jcmVhdGVTVkdQYXRoU2VnTW92ZXRvQWJzKGwsYyksdSk7YnJlYWs7Y2FzZVwibFwiOmEucmVwbGFjZUl0ZW0oZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvQWJzKGwsYyksdSk7YnJlYWs7Y2FzZVwiaFwiOmEucmVwbGFjZUl0ZW0oZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicyhsKSx1KTticmVhaztjYXNlXCJ2XCI6YS5yZXBsYWNlSXRlbShlLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyhjKSx1KTticmVhaztjYXNlXCJjXCI6YS5yZXBsYWNlSXRlbShlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMobCxjLG8saSxyLHMpLHUpO2JyZWFrO2Nhc2VcInNcIjpcbmEucmVwbGFjZUl0ZW0oZS5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzKGwsYyxyLHMpLHUpO2JyZWFrO2Nhc2VcInFcIjphLnJlcGxhY2VJdGVtKGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMobCxjLG8saSksdSk7YnJlYWs7Y2FzZVwidFwiOmEucmVwbGFjZUl0ZW0oZS5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicyhsLGMpLHUpO2JyZWFrO2Nhc2VcImFcIjphLnJlcGxhY2VJdGVtKGUuY3JlYXRlU1ZHUGF0aFNlZ0FyY0FicyhsLGMscC5yMSxwLnIyLHAuYW5nbGUscC5sYXJnZUFyY0ZsYWcscC5zd2VlcEZsYWcpLHUpO2JyZWFrO2Nhc2VcInpcIjpjYXNlXCJaXCI6bD10LGM9bn1cIk1cIiE9ZiYmXCJtXCIhPWZ8fCh0PWwsbj1jKX19fSgpfSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjZ9XSwyODpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vLGZ1bmN0aW9uKCl7by5jcmVhdGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm57eDplfHwwLHk6dHx8MH19LG8uY2xvbmU9ZnVuY3Rpb24oZSl7cmV0dXJue3g6ZS54LHk6ZS55fX0sby5tYWduaXR1ZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIE1hdGguc3FydChlLngqZS54K2UueSplLnkpfSxvLm1hZ25pdHVkZVNxdWFyZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUueCplLngrZS55KmUueX0sby5yb3RhdGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPU1hdGguY29zKHQpLGk9TWF0aC5zaW4odCk7bnx8KG49e30pO3ZhciByPWUueCpvLWUueSppO3JldHVybiBuLnk9ZS54KmkrZS55Km8sbi54PXIsbn0sby5yb3RhdGVBYm91dD1mdW5jdGlvbihlLHQsbixvKXt2YXIgaT1NYXRoLmNvcyh0KSxyPU1hdGguc2luKHQpO298fChvPXt9KTt2YXIgcz1uLngrKChlLngtbi54KSppLShlLnktbi55KSpyKTtyZXR1cm4gby55PW4ueSsoKGUueC1uLngpKnIrKGUueS1uLnkpKmkpLG8ueD1zLG99LG8ubm9ybWFsaXNlPWZ1bmN0aW9uKGUpe1xudmFyIHQ9by5tYWduaXR1ZGUoZSk7cmV0dXJuIDA9PT10P3t4OjAseTowfTp7eDplLngvdCx5OmUueS90fX0sby5kb3Q9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS54KnQueCtlLnkqdC55fSxvLmNyb3NzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUueCp0LnktZS55KnQueH0sby5jcm9zczM9ZnVuY3Rpb24oZSx0LG4pe3JldHVybih0LngtZS54KSoobi55LWUueSktKHQueS1lLnkpKihuLngtZS54KX0sby5hZGQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBufHwobj17fSksbi54PWUueCt0Lngsbi55PWUueSt0Lnksbn0sby5zdWI9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBufHwobj17fSksbi54PWUueC10Lngsbi55PWUueS10Lnksbn0sby5tdWx0PWZ1bmN0aW9uKGUsdCl7cmV0dXJue3g6ZS54KnQseTplLnkqdH19LG8uZGl2PWZ1bmN0aW9uKGUsdCl7cmV0dXJue3g6ZS54L3QseTplLnkvdH19LG8ucGVycD1mdW5jdGlvbihlLHQpe3JldHVybiB0PSEwPT09dD8tMToxLHt4OnQqLWUueSx5OnQqZS54fX0sby5uZWc9ZnVuY3Rpb24oZSl7cmV0dXJue3g6LWUueCx5Oi1lLnl9fSxvLmFuZ2xlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE1hdGguYXRhbjIodC55LWUueSx0LngtZS54KX0sby5fdGVtcD1bby5jcmVhdGUoKSxvLmNyZWF0ZSgpLG8uY3JlYXRlKCksby5jcmVhdGUoKSxvLmNyZWF0ZSgpLG8uY3JlYXRlKCldfSgpfSx7fV0sMjk6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9bzt2YXIgaT1lKFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCIpLHI9ZShcIi4uL2NvcmUvQ29tbW9uXCIpOyFmdW5jdGlvbigpe28uY3JlYXRlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtdLG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIGk9ZVtvXSxyPXt4OmkueCx5OmkueSxpbmRleDpvLGJvZHk6dCxpc0ludGVybmFsOiExfTtuLnB1c2gocil9cmV0dXJuIG59LG8uZnJvbVBhdGg9ZnVuY3Rpb24oZSx0KXtcbnZhciBuPS9MP1xccyooW1xcLVxcZFxcLmVdKylbXFxzLF0qKFtcXC1cXGRcXC5lXSspKi9naSxpPVtdO3JldHVybiBlLnJlcGxhY2UobixmdW5jdGlvbihlLHQsbil7aS5wdXNoKHt4OnBhcnNlRmxvYXQodCkseTpwYXJzZUZsb2F0KG4pfSl9KSxvLmNyZWF0ZShpLHQpfSxvLmNlbnRyZT1mdW5jdGlvbihlKXtmb3IodmFyIHQsbixyLHM9by5hcmVhKGUsITApLGE9e3g6MCx5OjB9LGw9MDtsPGUubGVuZ3RoO2wrKylyPShsKzEpJWUubGVuZ3RoLHQ9aS5jcm9zcyhlW2xdLGVbcl0pLG49aS5tdWx0KGkuYWRkKGVbbF0sZVtyXSksdCksYT1pLmFkZChhLG4pO3JldHVybiBpLmRpdihhLDYqcyl9LG8ubWVhbj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9e3g6MCx5OjB9LG49MDtuPGUubGVuZ3RoO24rKyl0LngrPWVbbl0ueCx0LnkrPWVbbl0ueTtyZXR1cm4gaS5kaXYodCxlLmxlbmd0aCl9LG8uYXJlYT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLG89ZS5sZW5ndGgtMSxpPTA7aTxlLmxlbmd0aDtpKyspbis9KGVbb10ueC1lW2ldLngpKihlW29dLnkrZVtpXS55KSxvPWk7cmV0dXJuIHQ/bi8yOk1hdGguYWJzKG4pLzJ9LG8uaW5lcnRpYT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbixvLHI9MCxzPTAsYT1lLGw9MDtsPGEubGVuZ3RoO2wrKylvPShsKzEpJWEubGVuZ3RoLG49TWF0aC5hYnMoaS5jcm9zcyhhW29dLGFbbF0pKSxyKz1uKihpLmRvdChhW29dLGFbb10pK2kuZG90KGFbb10sYVtsXSkraS5kb3QoYVtsXSxhW2xdKSkscys9bjtyZXR1cm4gdC82KihyL3MpfSxvLnRyYW5zbGF0ZT1mdW5jdGlvbihlLHQsbil7dmFyIG87aWYobilmb3Iobz0wO288ZS5sZW5ndGg7bysrKWVbb10ueCs9dC54Km4sZVtvXS55Kz10LnkqbjtlbHNlIGZvcihvPTA7bzxlLmxlbmd0aDtvKyspZVtvXS54Kz10LngsZVtvXS55Kz10Lnk7cmV0dXJuIGV9LG8ucm90YXRlPWZ1bmN0aW9uKGUsdCxuKXtpZigwIT09dCl7XG5mb3IodmFyIG89TWF0aC5jb3ModCksaT1NYXRoLnNpbih0KSxyPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBzPWVbcl0sYT1zLngtbi54LGw9cy55LW4ueTtzLng9bi54KyhhKm8tbCppKSxzLnk9bi55KyhhKmkrbCpvKX1yZXR1cm4gZX19LG8uY29udGFpbnM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIG89ZVtuXSxpPWVbKG4rMSklZS5sZW5ndGhdO2lmKCh0Lngtby54KSooaS55LW8ueSkrKHQueS1vLnkpKihvLngtaS54KT4wKXJldHVybiExfXJldHVybiEwfSxvLnNjYWxlPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKDE9PT10JiYxPT09bilyZXR1cm4gZTtyPXJ8fG8uY2VudHJlKGUpO2Zvcih2YXIgcyxhLGw9MDtsPGUubGVuZ3RoO2wrKylzPWVbbF0sYT1pLnN1YihzLHIpLGVbbF0ueD1yLngrYS54KnQsZVtsXS55PXIueSthLnkqbjtyZXR1cm4gZX0sby5jaGFtZmVyPWZ1bmN0aW9uKGUsdCxuLG8scyl7dD1cIm51bWJlclwiPT10eXBlb2YgdD9bdF06dHx8WzhdLG49dm9pZCAwIT09bj9uOi0xLG89b3x8MixzPXN8fDE0O2Zvcih2YXIgYT1bXSxsPTA7bDxlLmxlbmd0aDtsKyspe3ZhciBjPWVbbC0xPj0wP2wtMTplLmxlbmd0aC0xXSxkPWVbbF0sdT1lWyhsKzEpJWUubGVuZ3RoXSxwPXRbbDx0Lmxlbmd0aD9sOnQubGVuZ3RoLTFdO2lmKDAhPT1wKXt2YXIgZj1pLm5vcm1hbGlzZSh7eDpkLnktYy55LHk6Yy54LWQueH0pLG09aS5ub3JtYWxpc2Uoe3g6dS55LWQueSx5OmQueC11Lnh9KSx2PU1hdGguc3FydCgyKk1hdGgucG93KHAsMikpLHk9aS5tdWx0KHIuY2xvbmUoZikscCksZz1pLm5vcm1hbGlzZShpLm11bHQoaS5hZGQoZixtKSwuNSkpLHg9aS5zdWIoZCxpLm11bHQoZyx2KSksaD1uOy0xPT09biYmKGg9MS43NSpNYXRoLnBvdyhwLC4zMikpLGg9ci5jbGFtcChoLG8scyksaCUyPT0xJiYoaCs9MSlcbjtmb3IodmFyIGI9TWF0aC5hY29zKGkuZG90KGYsbSkpLHc9Yi9oLFM9MDtTPGg7UysrKWEucHVzaChpLmFkZChpLnJvdGF0ZSh5LHcqUykseCkpfWVsc2UgYS5wdXNoKGQpfXJldHVybiBhfSxvLmNsb2Nrd2lzZVNvcnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9by5tZWFuKGUpO3JldHVybiBlLnNvcnQoZnVuY3Rpb24oZSxuKXtyZXR1cm4gaS5hbmdsZSh0LGUpLWkuYW5nbGUodCxuKX0pLGV9LG8uaXNDb252ZXg9ZnVuY3Rpb24oZSl7dmFyIHQsbixvLGkscj0wLHM9ZS5sZW5ndGg7aWYoczwzKXJldHVybiBudWxsO2Zvcih0PTA7dDxzO3QrKylpZihuPSh0KzEpJXMsbz0odCsyKSVzLGk9KGVbbl0ueC1lW3RdLngpKihlW29dLnktZVtuXS55KSxpLT0oZVtuXS55LWVbdF0ueSkqKGVbb10ueC1lW25dLngpLGk8MD9yfD0xOmk+MCYmKHJ8PTIpLDM9PT1yKXJldHVybiExO3JldHVybiAwIT09cnx8bnVsbH0sby5odWxsPWZ1bmN0aW9uKGUpe3ZhciB0LG4sbz1bXSxyPVtdO2ZvcihlPWUuc2xpY2UoMCksZS5zb3J0KGZ1bmN0aW9uKGUsdCl7dmFyIG49ZS54LXQueDtyZXR1cm4gMCE9PW4/bjplLnktdC55fSksbj0wO248ZS5sZW5ndGg7bis9MSl7Zm9yKHQ9ZVtuXTtyLmxlbmd0aD49MiYmaS5jcm9zczMocltyLmxlbmd0aC0yXSxyW3IubGVuZ3RoLTFdLHQpPD0wOylyLnBvcCgpO3IucHVzaCh0KX1mb3Iobj1lLmxlbmd0aC0xO24+PTA7bi09MSl7Zm9yKHQ9ZVtuXTtvLmxlbmd0aD49MiYmaS5jcm9zczMob1tvLmxlbmd0aC0yXSxvW28ubGVuZ3RoLTFdLHQpPD0wOylvLnBvcCgpO28ucHVzaCh0KX1yZXR1cm4gby5wb3AoKSxyLnBvcCgpLG8uY29uY2F0KHIpfX0oKX0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4fV0sMzA6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz10LmV4cG9ydHM9ZShcIi4uL2NvcmUvTWF0dGVyXCIpO28uQm9keT1lKFwiLi4vYm9keS9Cb2R5XCIpLG8uQ29tcG9zaXRlPWUoXCIuLi9ib2R5L0NvbXBvc2l0ZVwiKSxcbm8uV29ybGQ9ZShcIi4uL2JvZHkvV29ybGRcIiksby5Db250YWN0PWUoXCIuLi9jb2xsaXNpb24vQ29udGFjdFwiKSxvLkRldGVjdG9yPWUoXCIuLi9jb2xsaXNpb24vRGV0ZWN0b3JcIiksby5HcmlkPWUoXCIuLi9jb2xsaXNpb24vR3JpZFwiKSxvLlBhaXJzPWUoXCIuLi9jb2xsaXNpb24vUGFpcnNcIiksby5QYWlyPWUoXCIuLi9jb2xsaXNpb24vUGFpclwiKSxvLlF1ZXJ5PWUoXCIuLi9jb2xsaXNpb24vUXVlcnlcIiksby5SZXNvbHZlcj1lKFwiLi4vY29sbGlzaW9uL1Jlc29sdmVyXCIpLG8uU0FUPWUoXCIuLi9jb2xsaXNpb24vU0FUXCIpLG8uQ29uc3RyYWludD1lKFwiLi4vY29uc3RyYWludC9Db25zdHJhaW50XCIpLG8uTW91c2VDb25zdHJhaW50PWUoXCIuLi9jb25zdHJhaW50L01vdXNlQ29uc3RyYWludFwiKSxvLkNvbW1vbj1lKFwiLi4vY29yZS9Db21tb25cIiksby5FbmdpbmU9ZShcIi4uL2NvcmUvRW5naW5lXCIpLG8uRXZlbnRzPWUoXCIuLi9jb3JlL0V2ZW50c1wiKSxvLk1vdXNlPWUoXCIuLi9jb3JlL01vdXNlXCIpLG8uUnVubmVyPWUoXCIuLi9jb3JlL1J1bm5lclwiKSxvLlNsZWVwaW5nPWUoXCIuLi9jb3JlL1NsZWVwaW5nXCIpLG8uUGx1Z2luPWUoXCIuLi9jb3JlL1BsdWdpblwiKSxvLkJvZGllcz1lKFwiLi4vZmFjdG9yeS9Cb2RpZXNcIiksby5Db21wb3NpdGVzPWUoXCIuLi9mYWN0b3J5L0NvbXBvc2l0ZXNcIiksby5BeGVzPWUoXCIuLi9nZW9tZXRyeS9BeGVzXCIpLG8uQm91bmRzPWUoXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIiksby5Tdmc9ZShcIi4uL2dlb21ldHJ5L1N2Z1wiKSxvLlZlY3Rvcj1lKFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCIpLG8uVmVydGljZXM9ZShcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCIpLG8uUmVuZGVyPWUoXCIuLi9yZW5kZXIvUmVuZGVyXCIpLG8uUmVuZGVyUGl4aT1lKFwiLi4vcmVuZGVyL1JlbmRlclBpeGlcIiksby5Xb3JsZC5hZGQ9by5Db21wb3NpdGUuYWRkLG8uV29ybGQucmVtb3ZlPW8uQ29tcG9zaXRlLnJlbW92ZSxcbm8uV29ybGQuYWRkQ29tcG9zaXRlPW8uQ29tcG9zaXRlLmFkZENvbXBvc2l0ZSxvLldvcmxkLmFkZEJvZHk9by5Db21wb3NpdGUuYWRkQm9keSxvLldvcmxkLmFkZENvbnN0cmFpbnQ9by5Db21wb3NpdGUuYWRkQ29uc3RyYWludCxvLldvcmxkLmNsZWFyPW8uQ29tcG9zaXRlLmNsZWFyLG8uRW5naW5lLnJ1bj1vLlJ1bm5lci5ydW59LHtcIi4uL2JvZHkvQm9keVwiOjEsXCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9ib2R5L1dvcmxkXCI6MyxcIi4uL2NvbGxpc2lvbi9Db250YWN0XCI6NCxcIi4uL2NvbGxpc2lvbi9EZXRlY3RvclwiOjUsXCIuLi9jb2xsaXNpb24vR3JpZFwiOjYsXCIuLi9jb2xsaXNpb24vUGFpclwiOjcsXCIuLi9jb2xsaXNpb24vUGFpcnNcIjo4LFwiLi4vY29sbGlzaW9uL1F1ZXJ5XCI6OSxcIi4uL2NvbGxpc2lvbi9SZXNvbHZlclwiOjEwLFwiLi4vY29sbGlzaW9uL1NBVFwiOjExLFwiLi4vY29uc3RyYWludC9Db25zdHJhaW50XCI6MTIsXCIuLi9jb25zdHJhaW50L01vdXNlQ29uc3RyYWludFwiOjEzLFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2NvcmUvRW5naW5lXCI6MTUsXCIuLi9jb3JlL0V2ZW50c1wiOjE2LFwiLi4vY29yZS9NYXR0ZXJcIjoxNyxcIi4uL2NvcmUvTWV0cmljc1wiOjE4LFwiLi4vY29yZS9Nb3VzZVwiOjE5LFwiLi4vY29yZS9QbHVnaW5cIjoyMCxcIi4uL2NvcmUvUnVubmVyXCI6MjEsXCIuLi9jb3JlL1NsZWVwaW5nXCI6MjIsXCIuLi9mYWN0b3J5L0JvZGllc1wiOjIzLFwiLi4vZmFjdG9yeS9Db21wb3NpdGVzXCI6MjQsXCIuLi9nZW9tZXRyeS9BeGVzXCI6MjUsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1N2Z1wiOjI3LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjgsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI5LFwiLi4vcmVuZGVyL1JlbmRlclwiOjMxLFwiLi4vcmVuZGVyL1JlbmRlclBpeGlcIjozMn1dLDMxOltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW9cbjt2YXIgaT1lKFwiLi4vY29yZS9Db21tb25cIikscj1lKFwiLi4vYm9keS9Db21wb3NpdGVcIikscz1lKFwiLi4vZ2VvbWV0cnkvQm91bmRzXCIpLGE9ZShcIi4uL2NvcmUvRXZlbnRzXCIpLGw9ZShcIi4uL2NvbGxpc2lvbi9HcmlkXCIpLGM9ZShcIi4uL2dlb21ldHJ5L1ZlY3RvclwiKSxkPWUoXCIuLi9jb3JlL01vdXNlXCIpOyFmdW5jdGlvbigpe3ZhciBlLHQ7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKGU9d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxmdW5jdGlvbihlKXt3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2UoaS5ub3coKSl9LDFlMy82MCl9LHQ9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWV8fHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93Lm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWUpLG8uY3JlYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PXtjb250cm9sbGVyOm8sZW5naW5lOm51bGwsZWxlbWVudDpudWxsLGNhbnZhczpudWxsLG1vdXNlOm51bGwsZnJhbWVSZXF1ZXN0SWQ6bnVsbCxvcHRpb25zOnt3aWR0aDo4MDAsaGVpZ2h0OjYwMCxwaXhlbFJhdGlvOjEsYmFja2dyb3VuZDpcIiMxODE4MWRcIix3aXJlZnJhbWVCYWNrZ3JvdW5kOlwiIzBmMGYxM1wiLGhhc0JvdW5kczohIWUuYm91bmRzLGVuYWJsZWQ6ITAsd2lyZWZyYW1lczohMCxzaG93U2xlZXBpbmc6ITAsc2hvd0RlYnVnOiExLHNob3dCcm9hZHBoYXNlOiExLHNob3dCb3VuZHM6ITEsc2hvd1ZlbG9jaXR5OiExLHNob3dDb2xsaXNpb25zOiExLHNob3dTZXBhcmF0aW9uczohMSxzaG93QXhlczohMSxzaG93UG9zaXRpb25zOiExLHNob3dBbmdsZUluZGljYXRvcjohMSxzaG93SWRzOiExLHNob3dTaGFkb3dzOiExLFxuc2hvd1ZlcnRleE51bWJlcnM6ITEsc2hvd0NvbnZleEh1bGxzOiExLHNob3dJbnRlcm5hbEVkZ2VzOiExLHNob3dNb3VzZVBvc2l0aW9uOiExfX0scj1pLmV4dGVuZCh0LGUpO3JldHVybiByLmNhbnZhcyYmKHIuY2FudmFzLndpZHRoPXIub3B0aW9ucy53aWR0aHx8ci5jYW52YXMud2lkdGgsci5jYW52YXMuaGVpZ2h0PXIub3B0aW9ucy5oZWlnaHR8fHIuY2FudmFzLmhlaWdodCksci5tb3VzZT1lLm1vdXNlLHIuZW5naW5lPWUuZW5naW5lLHIuY2FudmFzPXIuY2FudmFzfHxuKHIub3B0aW9ucy53aWR0aCxyLm9wdGlvbnMuaGVpZ2h0KSxyLmNvbnRleHQ9ci5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLHIudGV4dHVyZXM9e30sci5ib3VuZHM9ci5ib3VuZHN8fHttaW46e3g6MCx5OjB9LG1heDp7eDpyLmNhbnZhcy53aWR0aCx5OnIuY2FudmFzLmhlaWdodH19LDEhPT1yLm9wdGlvbnMucGl4ZWxSYXRpbyYmby5zZXRQaXhlbFJhdGlvKHIsci5vcHRpb25zLnBpeGVsUmF0aW8pLGkuaXNFbGVtZW50KHIuZWxlbWVudCk/ci5lbGVtZW50LmFwcGVuZENoaWxkKHIuY2FudmFzKTpyLmNhbnZhcy5wYXJlbnROb2RlfHxpLmxvZyhcIlJlbmRlci5jcmVhdGU6IG9wdGlvbnMuZWxlbWVudCB3YXMgdW5kZWZpbmVkLCByZW5kZXIuY2FudmFzIHdhcyBjcmVhdGVkIGJ1dCBub3QgYXBwZW5kZWRcIixcIndhcm5cIikscn0sby5ydW49ZnVuY3Rpb24odCl7IWZ1bmN0aW9uIG4oaSl7dC5mcmFtZVJlcXVlc3RJZD1lKG4pLG8ud29ybGQodCl9KCl9LG8uc3RvcD1mdW5jdGlvbihlKXt0KGUuZnJhbWVSZXF1ZXN0SWQpfSxvLnNldFBpeGVsUmF0aW89ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLm9wdGlvbnMsbz1lLmNhbnZhcztcImF1dG9cIj09PXQmJih0PXUobykpLG4ucGl4ZWxSYXRpbz10LG8uc2V0QXR0cmlidXRlKFwiZGF0YS1waXhlbC1yYXRpb1wiLHQpLG8ud2lkdGg9bi53aWR0aCp0LG8uaGVpZ2h0PW4uaGVpZ2h0KnQsby5zdHlsZS53aWR0aD1uLndpZHRoK1wicHhcIixcbm8uc3R5bGUuaGVpZ2h0PW4uaGVpZ2h0K1wicHhcIixlLmNvbnRleHQuc2NhbGUodCx0KX0sby5sb29rQXQ9ZnVuY3Rpb24oZSx0LG4sbyl7bz12b2lkIDA9PT1vfHxvLHQ9aS5pc0FycmF5KHQpP3Q6W3RdLG49bnx8e3g6MCx5OjB9O2Zvcih2YXIgcj17bWluOnt4OjEvMCx5OjEvMH0sbWF4Ont4Oi0xLzAseTotMS8wfX0scz0wO3M8dC5sZW5ndGg7cys9MSl7dmFyIGE9dFtzXSxsPWEuYm91bmRzP2EuYm91bmRzLm1pbjphLm1pbnx8YS5wb3NpdGlvbnx8YSxjPWEuYm91bmRzP2EuYm91bmRzLm1heDphLm1heHx8YS5wb3NpdGlvbnx8YTtsJiZjJiYobC54PHIubWluLngmJihyLm1pbi54PWwueCksYy54PnIubWF4LngmJihyLm1heC54PWMueCksbC55PHIubWluLnkmJihyLm1pbi55PWwueSksYy55PnIubWF4LnkmJihyLm1heC55PWMueSkpfXZhciB1PXIubWF4Lngtci5taW4ueCsyKm4ueCxwPXIubWF4Lnktci5taW4ueSsyKm4ueSxmPWUuY2FudmFzLmhlaWdodCxtPWUuY2FudmFzLndpZHRoLHY9bS9mLHk9dS9wLGc9MSx4PTE7eT52P3g9eS92Omc9di95LGUub3B0aW9ucy5oYXNCb3VuZHM9ITAsZS5ib3VuZHMubWluLng9ci5taW4ueCxlLmJvdW5kcy5tYXgueD1yLm1pbi54K3UqZyxlLmJvdW5kcy5taW4ueT1yLm1pbi55LGUuYm91bmRzLm1heC55PXIubWluLnkrcCp4LG8mJihlLmJvdW5kcy5taW4ueCs9LjUqdS11KmcqLjUsZS5ib3VuZHMubWF4LngrPS41KnUtdSpnKi41LGUuYm91bmRzLm1pbi55Kz0uNSpwLXAqeCouNSxlLmJvdW5kcy5tYXgueSs9LjUqcC1wKngqLjUpLGUuYm91bmRzLm1pbi54LT1uLngsZS5ib3VuZHMubWF4LngtPW4ueCxlLmJvdW5kcy5taW4ueS09bi55LGUuYm91bmRzLm1heC55LT1uLnksZS5tb3VzZSYmKGQuc2V0U2NhbGUoZS5tb3VzZSx7eDooZS5ib3VuZHMubWF4LngtZS5ib3VuZHMubWluLngpL2UuY2FudmFzLndpZHRoLHk6KGUuYm91bmRzLm1heC55LWUuYm91bmRzLm1pbi55KS9lLmNhbnZhcy5oZWlnaHR9KSxcbmQuc2V0T2Zmc2V0KGUubW91c2UsZS5ib3VuZHMubWluKSl9LG8uc3RhcnRWaWV3VHJhbnNmb3JtPWZ1bmN0aW9uKGUpe3ZhciB0PWUuYm91bmRzLm1heC54LWUuYm91bmRzLm1pbi54LG49ZS5ib3VuZHMubWF4LnktZS5ib3VuZHMubWluLnksbz10L2Uub3B0aW9ucy53aWR0aCxpPW4vZS5vcHRpb25zLmhlaWdodDtlLmNvbnRleHQuc2NhbGUoMS9vLDEvaSksZS5jb250ZXh0LnRyYW5zbGF0ZSgtZS5ib3VuZHMubWluLngsLWUuYm91bmRzLm1pbi55KX0sby5lbmRWaWV3VHJhbnNmb3JtPWZ1bmN0aW9uKGUpe2UuY29udGV4dC5zZXRUcmFuc2Zvcm0oZS5vcHRpb25zLnBpeGVsUmF0aW8sMCwwLGUub3B0aW9ucy5waXhlbFJhdGlvLDAsMCl9LG8ud29ybGQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj1lLmVuZ2luZSxpPW4ud29ybGQsdT1lLmNhbnZhcyxwPWUuY29udGV4dCxtPWUub3B0aW9ucyx2PXIuYWxsQm9kaWVzKGkpLHk9ci5hbGxDb25zdHJhaW50cyhpKSxnPW0ud2lyZWZyYW1lcz9tLndpcmVmcmFtZUJhY2tncm91bmQ6bS5iYWNrZ3JvdW5kLHg9W10saD1bXSxiPXt0aW1lc3RhbXA6bi50aW1pbmcudGltZXN0YW1wfTtpZihhLnRyaWdnZXIoZSxcImJlZm9yZVJlbmRlclwiLGIpLGUuY3VycmVudEJhY2tncm91bmQhPT1nJiZmKGUsZykscC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249XCJzb3VyY2UtaW5cIixwLmZpbGxTdHlsZT1cInRyYW5zcGFyZW50XCIscC5maWxsUmVjdCgwLDAsdS53aWR0aCx1LmhlaWdodCkscC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249XCJzb3VyY2Utb3ZlclwiLG0uaGFzQm91bmRzKXtmb3IodD0wO3Q8di5sZW5ndGg7dCsrKXt2YXIgdz12W3RdO3Mub3ZlcmxhcHMody5ib3VuZHMsZS5ib3VuZHMpJiZ4LnB1c2godyl9Zm9yKHQ9MDt0PHkubGVuZ3RoO3QrKyl7dmFyIFM9eVt0XSxDPVMuYm9keUEsQT1TLmJvZHlCLFA9Uy5wb2ludEEsQj1TLnBvaW50QjtDJiYoUD1jLmFkZChDLnBvc2l0aW9uLFMucG9pbnRBKSksXG5BJiYoQj1jLmFkZChBLnBvc2l0aW9uLFMucG9pbnRCKSksUCYmQiYmKChzLmNvbnRhaW5zKGUuYm91bmRzLFApfHxzLmNvbnRhaW5zKGUuYm91bmRzLEIpKSYmaC5wdXNoKFMpKX1vLnN0YXJ0Vmlld1RyYW5zZm9ybShlKSxlLm1vdXNlJiYoZC5zZXRTY2FsZShlLm1vdXNlLHt4OihlLmJvdW5kcy5tYXgueC1lLmJvdW5kcy5taW4ueCkvZS5jYW52YXMud2lkdGgseTooZS5ib3VuZHMubWF4LnktZS5ib3VuZHMubWluLnkpL2UuY2FudmFzLmhlaWdodH0pLGQuc2V0T2Zmc2V0KGUubW91c2UsZS5ib3VuZHMubWluKSl9ZWxzZSBoPXkseD12OyFtLndpcmVmcmFtZXN8fG4uZW5hYmxlU2xlZXBpbmcmJm0uc2hvd1NsZWVwaW5nP28uYm9kaWVzKGUseCxwKToobS5zaG93Q29udmV4SHVsbHMmJm8uYm9keUNvbnZleEh1bGxzKGUseCxwKSxvLmJvZHlXaXJlZnJhbWVzKGUseCxwKSksbS5zaG93Qm91bmRzJiZvLmJvZHlCb3VuZHMoZSx4LHApLChtLnNob3dBeGVzfHxtLnNob3dBbmdsZUluZGljYXRvcikmJm8uYm9keUF4ZXMoZSx4LHApLG0uc2hvd1Bvc2l0aW9ucyYmby5ib2R5UG9zaXRpb25zKGUseCxwKSxtLnNob3dWZWxvY2l0eSYmby5ib2R5VmVsb2NpdHkoZSx4LHApLG0uc2hvd0lkcyYmby5ib2R5SWRzKGUseCxwKSxtLnNob3dTZXBhcmF0aW9ucyYmby5zZXBhcmF0aW9ucyhlLG4ucGFpcnMubGlzdCxwKSxtLnNob3dDb2xsaXNpb25zJiZvLmNvbGxpc2lvbnMoZSxuLnBhaXJzLmxpc3QscCksbS5zaG93VmVydGV4TnVtYmVycyYmby52ZXJ0ZXhOdW1iZXJzKGUseCxwKSxtLnNob3dNb3VzZVBvc2l0aW9uJiZvLm1vdXNlUG9zaXRpb24oZSxlLm1vdXNlLHApLG8uY29uc3RyYWludHMoaCxwKSxtLnNob3dCcm9hZHBoYXNlJiZuLmJyb2FkcGhhc2UuY29udHJvbGxlcj09PWwmJm8uZ3JpZChlLG4uYnJvYWRwaGFzZSxwKSxtLnNob3dEZWJ1ZyYmby5kZWJ1ZyhlLHApLG0uaGFzQm91bmRzJiZvLmVuZFZpZXdUcmFuc2Zvcm0oZSksXG5hLnRyaWdnZXIoZSxcImFmdGVyUmVuZGVyXCIsYil9LG8uZGVidWc9ZnVuY3Rpb24oZSx0KXt2YXIgbj10LG89ZS5lbmdpbmUsaT1vLndvcmxkLHM9by5tZXRyaWNzLGE9ZS5vcHRpb25zO3IuYWxsQm9kaWVzKGkpO2lmKG8udGltaW5nLnRpbWVzdGFtcC0oZS5kZWJ1Z1RpbWVzdGFtcHx8MCk+PTUwMCl7dmFyIGw9XCJcIjtzLnRpbWluZyYmKGwrPVwiZnBzOiBcIitNYXRoLnJvdW5kKHMudGltaW5nLmZwcykrXCIgICAgXCIpLGUuZGVidWdTdHJpbmc9bCxlLmRlYnVnVGltZXN0YW1wPW8udGltaW5nLnRpbWVzdGFtcH1pZihlLmRlYnVnU3RyaW5nKXtuLmZvbnQ9XCIxMnB4IEFyaWFsXCIsYS53aXJlZnJhbWVzP24uZmlsbFN0eWxlPVwicmdiYSgyNTUsMjU1LDI1NSwwLjUpXCI6bi5maWxsU3R5bGU9XCJyZ2JhKDAsMCwwLDAuNSlcIjtmb3IodmFyIGM9ZS5kZWJ1Z1N0cmluZy5zcGxpdChcIlxcblwiKSxkPTA7ZDxjLmxlbmd0aDtkKyspbi5maWxsVGV4dChjW2RdLDUwLDUwKzE4KmQpfX0sby5jb25zdHJhaW50cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10LG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHI9ZVtvXTtpZihyLnJlbmRlci52aXNpYmxlJiZyLnBvaW50QSYmci5wb2ludEIpe3ZhciBzLGEsbD1yLmJvZHlBLGQ9ci5ib2R5QjtpZihzPWw/Yy5hZGQobC5wb3NpdGlvbixyLnBvaW50QSk6ci5wb2ludEEsXCJwaW5cIj09PXIucmVuZGVyLnR5cGUpbi5iZWdpblBhdGgoKSxuLmFyYyhzLngscy55LDMsMCwyKk1hdGguUEkpLG4uY2xvc2VQYXRoKCk7ZWxzZXtpZihhPWQ/Yy5hZGQoZC5wb3NpdGlvbixyLnBvaW50Qik6ci5wb2ludEIsbi5iZWdpblBhdGgoKSxuLm1vdmVUbyhzLngscy55KSxcInNwcmluZ1wiPT09ci5yZW5kZXIudHlwZSlmb3IodmFyIHUscD1jLnN1YihhLHMpLGY9Yy5wZXJwKGMubm9ybWFsaXNlKHApKSxtPU1hdGguY2VpbChpLmNsYW1wKHIubGVuZ3RoLzUsMTIsMjApKSx2PTE7djxtO3YrPTEpdT12JTI9PTA/MTotMSxcbm4ubGluZVRvKHMueCtwLngqKHYvbSkrZi54KnUqNCxzLnkrcC55Kih2L20pK2YueSp1KjQpO24ubGluZVRvKGEueCxhLnkpfXIucmVuZGVyLmxpbmVXaWR0aCYmKG4ubGluZVdpZHRoPXIucmVuZGVyLmxpbmVXaWR0aCxuLnN0cm9rZVN0eWxlPXIucmVuZGVyLnN0cm9rZVN0eWxlLG4uc3Ryb2tlKCkpLHIucmVuZGVyLmFuY2hvcnMmJihuLmZpbGxTdHlsZT1yLnJlbmRlci5zdHJva2VTdHlsZSxuLmJlZ2luUGF0aCgpLG4uYXJjKHMueCxzLnksMywwLDIqTWF0aC5QSSksbi5hcmMoYS54LGEueSwzLDAsMipNYXRoLlBJKSxuLmNsb3NlUGF0aCgpLG4uZmlsbCgpKX19fSxvLmJvZHlTaGFkb3dzPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIG89bixpPShlLmVuZ2luZSwwKTtpPHQubGVuZ3RoO2krKyl7dmFyIHI9dFtpXTtpZihyLnJlbmRlci52aXNpYmxlKXtpZihyLmNpcmNsZVJhZGl1cylvLmJlZ2luUGF0aCgpLG8uYXJjKHIucG9zaXRpb24ueCxyLnBvc2l0aW9uLnksci5jaXJjbGVSYWRpdXMsMCwyKk1hdGguUEkpLG8uY2xvc2VQYXRoKCk7ZWxzZXtvLmJlZ2luUGF0aCgpLG8ubW92ZVRvKHIudmVydGljZXNbMF0ueCxyLnZlcnRpY2VzWzBdLnkpO2Zvcih2YXIgcz0xO3M8ci52ZXJ0aWNlcy5sZW5ndGg7cysrKW8ubGluZVRvKHIudmVydGljZXNbc10ueCxyLnZlcnRpY2VzW3NdLnkpO28uY2xvc2VQYXRoKCl9dmFyIGE9ci5wb3NpdGlvbi54LS41KmUub3B0aW9ucy53aWR0aCxsPXIucG9zaXRpb24ueS0uMiplLm9wdGlvbnMuaGVpZ2h0LGM9TWF0aC5hYnMoYSkrTWF0aC5hYnMobCk7by5zaGFkb3dDb2xvcj1cInJnYmEoMCwwLDAsMC4xNSlcIixvLnNoYWRvd09mZnNldFg9LjA1KmEsby5zaGFkb3dPZmZzZXRZPS4wNSpsLG8uc2hhZG93Qmx1cj0xKzEyKk1hdGgubWluKDEsYy8xZTMpLG8uZmlsbCgpLG8uc2hhZG93Q29sb3I9bnVsbCxvLnNoYWRvd09mZnNldFg9bnVsbCxvLnNoYWRvd09mZnNldFk9bnVsbCxvLnNoYWRvd0JsdXI9bnVsbH19fSxcbm8uYm9kaWVzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpLHIscyxhPW4sbD0oZS5lbmdpbmUsZS5vcHRpb25zKSxjPWwuc2hvd0ludGVybmFsRWRnZXN8fCFsLndpcmVmcmFtZXM7Zm9yKHI9MDtyPHQubGVuZ3RoO3IrKylpZihvPXRbcl0sby5yZW5kZXIudmlzaWJsZSlmb3Iocz1vLnBhcnRzLmxlbmd0aD4xPzE6MDtzPG8ucGFydHMubGVuZ3RoO3MrKylpZihpPW8ucGFydHNbc10saS5yZW5kZXIudmlzaWJsZSl7aWYobC5zaG93U2xlZXBpbmcmJm8uaXNTbGVlcGluZz9hLmdsb2JhbEFscGhhPS41KmkucmVuZGVyLm9wYWNpdHk6MSE9PWkucmVuZGVyLm9wYWNpdHkmJihhLmdsb2JhbEFscGhhPWkucmVuZGVyLm9wYWNpdHkpLGkucmVuZGVyLnNwcml0ZSYmaS5yZW5kZXIuc3ByaXRlLnRleHR1cmUmJiFsLndpcmVmcmFtZXMpe3ZhciBkPWkucmVuZGVyLnNwcml0ZSx1PXAoZSxkLnRleHR1cmUpO2EudHJhbnNsYXRlKGkucG9zaXRpb24ueCxpLnBvc2l0aW9uLnkpLGEucm90YXRlKGkuYW5nbGUpLGEuZHJhd0ltYWdlKHUsdS53aWR0aCotZC54T2Zmc2V0KmQueFNjYWxlLHUuaGVpZ2h0Ki1kLnlPZmZzZXQqZC55U2NhbGUsdS53aWR0aCpkLnhTY2FsZSx1LmhlaWdodCpkLnlTY2FsZSksYS5yb3RhdGUoLWkuYW5nbGUpLGEudHJhbnNsYXRlKC1pLnBvc2l0aW9uLngsLWkucG9zaXRpb24ueSl9ZWxzZXtpZihpLmNpcmNsZVJhZGl1cylhLmJlZ2luUGF0aCgpLGEuYXJjKGkucG9zaXRpb24ueCxpLnBvc2l0aW9uLnksaS5jaXJjbGVSYWRpdXMsMCwyKk1hdGguUEkpO2Vsc2V7YS5iZWdpblBhdGgoKSxhLm1vdmVUbyhpLnZlcnRpY2VzWzBdLngsaS52ZXJ0aWNlc1swXS55KTtmb3IodmFyIGY9MTtmPGkudmVydGljZXMubGVuZ3RoO2YrKykhaS52ZXJ0aWNlc1tmLTFdLmlzSW50ZXJuYWx8fGM/YS5saW5lVG8oaS52ZXJ0aWNlc1tmXS54LGkudmVydGljZXNbZl0ueSk6YS5tb3ZlVG8oaS52ZXJ0aWNlc1tmXS54LGkudmVydGljZXNbZl0ueSksXG5pLnZlcnRpY2VzW2ZdLmlzSW50ZXJuYWwmJiFjJiZhLm1vdmVUbyhpLnZlcnRpY2VzWyhmKzEpJWkudmVydGljZXMubGVuZ3RoXS54LGkudmVydGljZXNbKGYrMSklaS52ZXJ0aWNlcy5sZW5ndGhdLnkpO2EubGluZVRvKGkudmVydGljZXNbMF0ueCxpLnZlcnRpY2VzWzBdLnkpLGEuY2xvc2VQYXRoKCl9bC53aXJlZnJhbWVzPyhhLmxpbmVXaWR0aD0xLGEuc3Ryb2tlU3R5bGU9XCIjYmJiXCIsYS5zdHJva2UoKSk6KGEuZmlsbFN0eWxlPWkucmVuZGVyLmZpbGxTdHlsZSxpLnJlbmRlci5saW5lV2lkdGgmJihhLmxpbmVXaWR0aD1pLnJlbmRlci5saW5lV2lkdGgsYS5zdHJva2VTdHlsZT1pLnJlbmRlci5zdHJva2VTdHlsZSxhLnN0cm9rZSgpKSxhLmZpbGwoKSl9YS5nbG9iYWxBbHBoYT0xfX0sby5ib2R5V2lyZWZyYW1lcz1mdW5jdGlvbihlLHQsbil7dmFyIG8saSxyLHMsYSxsPW4sYz1lLm9wdGlvbnMuc2hvd0ludGVybmFsRWRnZXM7Zm9yKGwuYmVnaW5QYXRoKCkscj0wO3I8dC5sZW5ndGg7cisrKWlmKG89dFtyXSxvLnJlbmRlci52aXNpYmxlKWZvcihhPW8ucGFydHMubGVuZ3RoPjE/MTowO2E8by5wYXJ0cy5sZW5ndGg7YSsrKXtmb3IoaT1vLnBhcnRzW2FdLGwubW92ZVRvKGkudmVydGljZXNbMF0ueCxpLnZlcnRpY2VzWzBdLnkpLHM9MTtzPGkudmVydGljZXMubGVuZ3RoO3MrKykhaS52ZXJ0aWNlc1tzLTFdLmlzSW50ZXJuYWx8fGM/bC5saW5lVG8oaS52ZXJ0aWNlc1tzXS54LGkudmVydGljZXNbc10ueSk6bC5tb3ZlVG8oaS52ZXJ0aWNlc1tzXS54LGkudmVydGljZXNbc10ueSksaS52ZXJ0aWNlc1tzXS5pc0ludGVybmFsJiYhYyYmbC5tb3ZlVG8oaS52ZXJ0aWNlc1socysxKSVpLnZlcnRpY2VzLmxlbmd0aF0ueCxpLnZlcnRpY2VzWyhzKzEpJWkudmVydGljZXMubGVuZ3RoXS55KTtsLmxpbmVUbyhpLnZlcnRpY2VzWzBdLngsaS52ZXJ0aWNlc1swXS55KX1sLmxpbmVXaWR0aD0xLGwuc3Ryb2tlU3R5bGU9XCIjYmJiXCIsbC5zdHJva2UoKX0sXG5vLmJvZHlDb252ZXhIdWxscz1mdW5jdGlvbihlLHQsbil7dmFyIG8saSxyLHM9bjtmb3Iocy5iZWdpblBhdGgoKSxpPTA7aTx0Lmxlbmd0aDtpKyspaWYobz10W2ldLG8ucmVuZGVyLnZpc2libGUmJjEhPT1vLnBhcnRzLmxlbmd0aCl7Zm9yKHMubW92ZVRvKG8udmVydGljZXNbMF0ueCxvLnZlcnRpY2VzWzBdLnkpLHI9MTtyPG8udmVydGljZXMubGVuZ3RoO3IrKylzLmxpbmVUbyhvLnZlcnRpY2VzW3JdLngsby52ZXJ0aWNlc1tyXS55KTtzLmxpbmVUbyhvLnZlcnRpY2VzWzBdLngsby52ZXJ0aWNlc1swXS55KX1zLmxpbmVXaWR0aD0xLHMuc3Ryb2tlU3R5bGU9XCJyZ2JhKDI1NSwyNTUsMjU1LDAuMilcIixzLnN0cm9rZSgpfSxvLnZlcnRleE51bWJlcnM9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLGkscixzPW47Zm9yKG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGE9dFtvXS5wYXJ0cztmb3Iocj1hLmxlbmd0aD4xPzE6MDtyPGEubGVuZ3RoO3IrKyl7dmFyIGw9YVtyXTtmb3IoaT0wO2k8bC52ZXJ0aWNlcy5sZW5ndGg7aSsrKXMuZmlsbFN0eWxlPVwicmdiYSgyNTUsMjU1LDI1NSwwLjIpXCIscy5maWxsVGV4dChvK1wiX1wiK2ksbC5wb3NpdGlvbi54Ky44KihsLnZlcnRpY2VzW2ldLngtbC5wb3NpdGlvbi54KSxsLnBvc2l0aW9uLnkrLjgqKGwudmVydGljZXNbaV0ueS1sLnBvc2l0aW9uLnkpKX19fSxvLm1vdXNlUG9zaXRpb249ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPW47by5maWxsU3R5bGU9XCJyZ2JhKDI1NSwyNTUsMjU1LDAuOClcIixvLmZpbGxUZXh0KHQucG9zaXRpb24ueCtcIiAgXCIrdC5wb3NpdGlvbi55LHQucG9zaXRpb24ueCs1LHQucG9zaXRpb24ueS01KX0sby5ib2R5Qm91bmRzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1uLGk9KGUuZW5naW5lLGUub3B0aW9ucyk7by5iZWdpblBhdGgoKTtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7XG5pZih0W3JdLnJlbmRlci52aXNpYmxlKWZvcih2YXIgcz10W3JdLnBhcnRzLGE9cy5sZW5ndGg+MT8xOjA7YTxzLmxlbmd0aDthKyspe3ZhciBsPXNbYV07by5yZWN0KGwuYm91bmRzLm1pbi54LGwuYm91bmRzLm1pbi55LGwuYm91bmRzLm1heC54LWwuYm91bmRzLm1pbi54LGwuYm91bmRzLm1heC55LWwuYm91bmRzLm1pbi55KX19aS53aXJlZnJhbWVzP28uc3Ryb2tlU3R5bGU9XCJyZ2JhKDI1NSwyNTUsMjU1LDAuMDgpXCI6by5zdHJva2VTdHlsZT1cInJnYmEoMCwwLDAsMC4xKVwiLG8ubGluZVdpZHRoPTEsby5zdHJva2UoKX0sby5ib2R5QXhlcz1mdW5jdGlvbihlLHQsbil7dmFyIG8saSxyLHMsYT1uLGw9KGUuZW5naW5lLGUub3B0aW9ucyk7Zm9yKGEuYmVnaW5QYXRoKCksaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgYz10W2ldLGQ9Yy5wYXJ0cztpZihjLnJlbmRlci52aXNpYmxlKWlmKGwuc2hvd0F4ZXMpZm9yKHI9ZC5sZW5ndGg+MT8xOjA7cjxkLmxlbmd0aDtyKyspZm9yKG89ZFtyXSxzPTA7czxvLmF4ZXMubGVuZ3RoO3MrKyl7dmFyIHU9by5heGVzW3NdO2EubW92ZVRvKG8ucG9zaXRpb24ueCxvLnBvc2l0aW9uLnkpLGEubGluZVRvKG8ucG9zaXRpb24ueCsyMCp1Lngsby5wb3NpdGlvbi55KzIwKnUueSl9ZWxzZSBmb3Iocj1kLmxlbmd0aD4xPzE6MDtyPGQubGVuZ3RoO3IrKylmb3Iobz1kW3JdLHM9MDtzPG8uYXhlcy5sZW5ndGg7cysrKWEubW92ZVRvKG8ucG9zaXRpb24ueCxvLnBvc2l0aW9uLnkpLGEubGluZVRvKChvLnZlcnRpY2VzWzBdLngrby52ZXJ0aWNlc1tvLnZlcnRpY2VzLmxlbmd0aC0xXS54KS8yLChvLnZlcnRpY2VzWzBdLnkrby52ZXJ0aWNlc1tvLnZlcnRpY2VzLmxlbmd0aC0xXS55KS8yKX1sLndpcmVmcmFtZXM/KGEuc3Ryb2tlU3R5bGU9XCJpbmRpYW5yZWRcIixhLmxpbmVXaWR0aD0xKTooYS5zdHJva2VTdHlsZT1cInJnYmEoMjU1LCAyNTUsIDI1NSwgMC40KVwiLGEuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uPVwib3ZlcmxheVwiLFxuYS5saW5lV2lkdGg9MiksYS5zdHJva2UoKSxhLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj1cInNvdXJjZS1vdmVyXCJ9LG8uYm9keVBvc2l0aW9ucz1mdW5jdGlvbihlLHQsbil7dmFyIG8saSxyLHMsYT1uLGw9KGUuZW5naW5lLGUub3B0aW9ucyk7Zm9yKGEuYmVnaW5QYXRoKCkscj0wO3I8dC5sZW5ndGg7cisrKWlmKG89dFtyXSxvLnJlbmRlci52aXNpYmxlKWZvcihzPTA7czxvLnBhcnRzLmxlbmd0aDtzKyspaT1vLnBhcnRzW3NdLGEuYXJjKGkucG9zaXRpb24ueCxpLnBvc2l0aW9uLnksMywwLDIqTWF0aC5QSSwhMSksYS5jbG9zZVBhdGgoKTtmb3IobC53aXJlZnJhbWVzP2EuZmlsbFN0eWxlPVwiaW5kaWFucmVkXCI6YS5maWxsU3R5bGU9XCJyZ2JhKDAsMCwwLDAuNSlcIixhLmZpbGwoKSxhLmJlZ2luUGF0aCgpLHI9MDtyPHQubGVuZ3RoO3IrKylvPXRbcl0sby5yZW5kZXIudmlzaWJsZSYmKGEuYXJjKG8ucG9zaXRpb25QcmV2Lngsby5wb3NpdGlvblByZXYueSwyLDAsMipNYXRoLlBJLCExKSxhLmNsb3NlUGF0aCgpKTthLmZpbGxTdHlsZT1cInJnYmEoMjU1LDE2NSwwLDAuOClcIixhLmZpbGwoKX0sby5ib2R5VmVsb2NpdHk9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPW47by5iZWdpblBhdGgoKTtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIHI9dFtpXTtyLnJlbmRlci52aXNpYmxlJiYoby5tb3ZlVG8oci5wb3NpdGlvbi54LHIucG9zaXRpb24ueSksby5saW5lVG8oci5wb3NpdGlvbi54KzIqKHIucG9zaXRpb24ueC1yLnBvc2l0aW9uUHJldi54KSxyLnBvc2l0aW9uLnkrMiooci5wb3NpdGlvbi55LXIucG9zaXRpb25QcmV2LnkpKSl9by5saW5lV2lkdGg9MyxvLnN0cm9rZVN0eWxlPVwiY29ybmZsb3dlcmJsdWVcIixvLnN0cm9rZSgpfSxvLmJvZHlJZHM9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLGkscj1uO2ZvcihvPTA7bzx0Lmxlbmd0aDtvKyspaWYodFtvXS5yZW5kZXIudmlzaWJsZSl7dmFyIHM9dFtvXS5wYXJ0c1xuO2ZvcihpPXMubGVuZ3RoPjE/MTowO2k8cy5sZW5ndGg7aSsrKXt2YXIgYT1zW2ldO3IuZm9udD1cIjEycHggQXJpYWxcIixyLmZpbGxTdHlsZT1cInJnYmEoMjU1LDI1NSwyNTUsMC41KVwiLHIuZmlsbFRleHQoYS5pZCxhLnBvc2l0aW9uLngrMTAsYS5wb3NpdGlvbi55LTEwKX19fSxvLmNvbGxpc2lvbnM9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLGkscixzLGE9bixsPWUub3B0aW9ucztmb3IoYS5iZWdpblBhdGgoKSxyPTA7cjx0Lmxlbmd0aDtyKyspaWYobz10W3JdLG8uaXNBY3RpdmUpZm9yKGk9by5jb2xsaXNpb24scz0wO3M8by5hY3RpdmVDb250YWN0cy5sZW5ndGg7cysrKXt2YXIgYz1vLmFjdGl2ZUNvbnRhY3RzW3NdLGQ9Yy52ZXJ0ZXg7YS5yZWN0KGQueC0xLjUsZC55LTEuNSwzLjUsMy41KX1mb3IobC53aXJlZnJhbWVzP2EuZmlsbFN0eWxlPVwicmdiYSgyNTUsMjU1LDI1NSwwLjcpXCI6YS5maWxsU3R5bGU9XCJvcmFuZ2VcIixhLmZpbGwoKSxhLmJlZ2luUGF0aCgpLHI9MDtyPHQubGVuZ3RoO3IrKylpZihvPXRbcl0sby5pc0FjdGl2ZSYmKGk9by5jb2xsaXNpb24sby5hY3RpdmVDb250YWN0cy5sZW5ndGg+MCkpe3ZhciB1PW8uYWN0aXZlQ29udGFjdHNbMF0udmVydGV4LngscD1vLmFjdGl2ZUNvbnRhY3RzWzBdLnZlcnRleC55OzI9PT1vLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aCYmKHU9KG8uYWN0aXZlQ29udGFjdHNbMF0udmVydGV4Lngrby5hY3RpdmVDb250YWN0c1sxXS52ZXJ0ZXgueCkvMixwPShvLmFjdGl2ZUNvbnRhY3RzWzBdLnZlcnRleC55K28uYWN0aXZlQ29udGFjdHNbMV0udmVydGV4LnkpLzIpLGkuYm9keUI9PT1pLnN1cHBvcnRzWzBdLmJvZHl8fCEwPT09aS5ib2R5QS5pc1N0YXRpYz9hLm1vdmVUbyh1LTgqaS5ub3JtYWwueCxwLTgqaS5ub3JtYWwueSk6YS5tb3ZlVG8odSs4Kmkubm9ybWFsLngscCs4Kmkubm9ybWFsLnkpLGEubGluZVRvKHUscCl9XG5sLndpcmVmcmFtZXM/YS5zdHJva2VTdHlsZT1cInJnYmEoMjU1LDE2NSwwLDAuNylcIjphLnN0cm9rZVN0eWxlPVwib3JhbmdlXCIsYS5saW5lV2lkdGg9MSxhLnN0cm9rZSgpfSxvLnNlcGFyYXRpb25zPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpLHIscyxhLGw9bixjPWUub3B0aW9ucztmb3IobC5iZWdpblBhdGgoKSxhPTA7YTx0Lmxlbmd0aDthKyspaWYobz10W2FdLG8uaXNBY3RpdmUpe2k9by5jb2xsaXNpb24scj1pLmJvZHlBLHM9aS5ib2R5Qjt2YXIgZD0xO3MuaXNTdGF0aWN8fHIuaXNTdGF0aWN8fChkPS41KSxzLmlzU3RhdGljJiYoZD0wKSxsLm1vdmVUbyhzLnBvc2l0aW9uLngscy5wb3NpdGlvbi55KSxsLmxpbmVUbyhzLnBvc2l0aW9uLngtaS5wZW5ldHJhdGlvbi54KmQscy5wb3NpdGlvbi55LWkucGVuZXRyYXRpb24ueSpkKSxkPTEscy5pc1N0YXRpY3x8ci5pc1N0YXRpY3x8KGQ9LjUpLHIuaXNTdGF0aWMmJihkPTApLGwubW92ZVRvKHIucG9zaXRpb24ueCxyLnBvc2l0aW9uLnkpLGwubGluZVRvKHIucG9zaXRpb24ueCtpLnBlbmV0cmF0aW9uLngqZCxyLnBvc2l0aW9uLnkraS5wZW5ldHJhdGlvbi55KmQpfWMud2lyZWZyYW1lcz9sLnN0cm9rZVN0eWxlPVwicmdiYSgyNTUsMTY1LDAsMC41KVwiOmwuc3Ryb2tlU3R5bGU9XCJvcmFuZ2VcIixsLnN0cm9rZSgpfSxvLmdyaWQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPW47ZS5vcHRpb25zLndpcmVmcmFtZXM/by5zdHJva2VTdHlsZT1cInJnYmEoMjU1LDE4MCwwLDAuMSlcIjpvLnN0cm9rZVN0eWxlPVwicmdiYSgyNTUsMTgwLDAsMC41KVwiLG8uYmVnaW5QYXRoKCk7Zm9yKHZhciByPWkua2V5cyh0LmJ1Y2tldHMpLHM9MDtzPHIubGVuZ3RoO3MrKyl7dmFyIGE9cltzXTtpZighKHQuYnVja2V0c1thXS5sZW5ndGg8Mikpe3ZhciBsPWEuc3BsaXQoL0N8Ui8pXG47by5yZWN0KC41K3BhcnNlSW50KGxbMV0sMTApKnQuYnVja2V0V2lkdGgsLjUrcGFyc2VJbnQobFsyXSwxMCkqdC5idWNrZXRIZWlnaHQsdC5idWNrZXRXaWR0aCx0LmJ1Y2tldEhlaWdodCl9fW8ubGluZVdpZHRoPTEsby5zdHJva2UoKX0sby5pbnNwZWN0b3I9ZnVuY3Rpb24oZSx0KXt2YXIgbixvPShlLmVuZ2luZSxlLnNlbGVjdGVkKSxpPWUucmVuZGVyLHI9aS5vcHRpb25zO2lmKHIuaGFzQm91bmRzKXt2YXIgcz1pLmJvdW5kcy5tYXgueC1pLmJvdW5kcy5taW4ueCxhPWkuYm91bmRzLm1heC55LWkuYm91bmRzLm1pbi55LGw9cy9pLm9wdGlvbnMud2lkdGgsYz1hL2kub3B0aW9ucy5oZWlnaHQ7dC5zY2FsZSgxL2wsMS9jKSx0LnRyYW5zbGF0ZSgtaS5ib3VuZHMubWluLngsLWkuYm91bmRzLm1pbi55KX1mb3IodmFyIGQ9MDtkPG8ubGVuZ3RoO2QrKyl7dmFyIHU9b1tkXS5kYXRhO3N3aXRjaCh0LnRyYW5zbGF0ZSguNSwuNSksdC5saW5lV2lkdGg9MSx0LnN0cm9rZVN0eWxlPVwicmdiYSgyNTUsMTY1LDAsMC45KVwiLHQuc2V0TGluZURhc2goWzEsMl0pLHUudHlwZSl7Y2FzZVwiYm9keVwiOm49dS5ib3VuZHMsdC5iZWdpblBhdGgoKSx0LnJlY3QoTWF0aC5mbG9vcihuLm1pbi54LTMpLE1hdGguZmxvb3Iobi5taW4ueS0zKSxNYXRoLmZsb29yKG4ubWF4Lngtbi5taW4ueCs2KSxNYXRoLmZsb29yKG4ubWF4Lnktbi5taW4ueSs2KSksdC5jbG9zZVBhdGgoKSx0LnN0cm9rZSgpO2JyZWFrO2Nhc2VcImNvbnN0cmFpbnRcIjp2YXIgcD11LnBvaW50QTt1LmJvZHlBJiYocD11LnBvaW50QiksdC5iZWdpblBhdGgoKSx0LmFyYyhwLngscC55LDEwLDAsMipNYXRoLlBJKSx0LmNsb3NlUGF0aCgpLHQuc3Ryb2tlKCl9dC5zZXRMaW5lRGFzaChbXSksdC50cmFuc2xhdGUoLS41LC0uNSl9bnVsbCE9PWUuc2VsZWN0U3RhcnQmJih0LnRyYW5zbGF0ZSguNSwuNSksdC5saW5lV2lkdGg9MSx0LnN0cm9rZVN0eWxlPVwicmdiYSgyNTUsMTY1LDAsMC42KVwiLFxudC5maWxsU3R5bGU9XCJyZ2JhKDI1NSwxNjUsMCwwLjEpXCIsbj1lLnNlbGVjdEJvdW5kcyx0LmJlZ2luUGF0aCgpLHQucmVjdChNYXRoLmZsb29yKG4ubWluLngpLE1hdGguZmxvb3Iobi5taW4ueSksTWF0aC5mbG9vcihuLm1heC54LW4ubWluLngpLE1hdGguZmxvb3Iobi5tYXgueS1uLm1pbi55KSksdC5jbG9zZVBhdGgoKSx0LnN0cm9rZSgpLHQuZmlsbCgpLHQudHJhbnNsYXRlKC0uNSwtLjUpKSxyLmhhc0JvdW5kcyYmdC5zZXRUcmFuc2Zvcm0oMSwwLDAsMSwwLDApfTt2YXIgbj1mdW5jdGlvbihlLHQpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cmV0dXJuIG4ud2lkdGg9ZSxuLmhlaWdodD10LG4ub25jb250ZXh0bWVudT1mdW5jdGlvbigpe3JldHVybiExfSxuLm9uc2VsZWN0c3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX0sbn0sdT1mdW5jdGlvbihlKXt2YXIgdD1lLmdldENvbnRleHQoXCIyZFwiKTtyZXR1cm4od2luZG93LmRldmljZVBpeGVsUmF0aW98fDEpLyh0LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW98fHQubW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8dC5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW98fHQub0JhY2tpbmdTdG9yZVBpeGVsUmF0aW98fHQuYmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8MSl9LHA9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnRleHR1cmVzW3RdO3JldHVybiBufHwobj1lLnRleHR1cmVzW3RdPW5ldyBJbWFnZSxuLnNyYz10LG4pfSxmPWZ1bmN0aW9uKGUsdCl7dmFyIG49dDsvKGpwZ3xnaWZ8cG5nKSQvLnRlc3QodCkmJihuPVwidXJsKFwiK3QrXCIpXCIpLGUuY2FudmFzLnN0eWxlLmJhY2tncm91bmQ9bixlLmNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kU2l6ZT1cImNvbnRhaW5cIixlLmN1cnJlbnRCYWNrZ3JvdW5kPXR9fSgpfSx7XCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9jb2xsaXNpb24vR3JpZFwiOjYsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FdmVudHNcIjoxNixcblwiLi4vY29yZS9Nb3VzZVwiOjE5LFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOH1dLDMyOltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4uL2dlb21ldHJ5L0JvdW5kc1wiKSxyPWUoXCIuLi9ib2R5L0NvbXBvc2l0ZVwiKSxzPWUoXCIuLi9jb3JlL0NvbW1vblwiKSxhPWUoXCIuLi9jb3JlL0V2ZW50c1wiKSxsPWUoXCIuLi9nZW9tZXRyeS9WZWN0b3JcIik7IWZ1bmN0aW9uKCl7dmFyIGUsdDtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYoZT13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKGUpe3dpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShzLm5vdygpKX0sMWUzLzYwKX0sdD13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZSksby5jcmVhdGU9ZnVuY3Rpb24oZSl7cy53YXJuKFwiUmVuZGVyUGl4aS5jcmVhdGU6IE1hdHRlci5SZW5kZXJQaXhpIGlzIGRlcHJlY2F0ZWQgKHNlZSBkb2NzKVwiKTt2YXIgdD17Y29udHJvbGxlcjpvLGVuZ2luZTpudWxsLGVsZW1lbnQ6bnVsbCxmcmFtZVJlcXVlc3RJZDpudWxsLGNhbnZhczpudWxsLHJlbmRlcmVyOm51bGwsY29udGFpbmVyOm51bGwsc3ByaXRlQ29udGFpbmVyOm51bGwscGl4aU9wdGlvbnM6bnVsbCxvcHRpb25zOnt3aWR0aDo4MDAsaGVpZ2h0OjYwMCxiYWNrZ3JvdW5kOlwiI2ZhZmFmYVwiLHdpcmVmcmFtZUJhY2tncm91bmQ6XCIjMjIyXCIsaGFzQm91bmRzOiExLGVuYWJsZWQ6ITAsd2lyZWZyYW1lczohMCxzaG93U2xlZXBpbmc6ITAsc2hvd0RlYnVnOiExLFxuc2hvd0Jyb2FkcGhhc2U6ITEsc2hvd0JvdW5kczohMSxzaG93VmVsb2NpdHk6ITEsc2hvd0NvbGxpc2lvbnM6ITEsc2hvd0F4ZXM6ITEsc2hvd1Bvc2l0aW9uczohMSxzaG93QW5nbGVJbmRpY2F0b3I6ITEsc2hvd0lkczohMSxzaG93U2hhZG93czohMX19LG49cy5leHRlbmQodCxlKSxpPSFuLm9wdGlvbnMud2lyZWZyYW1lcyYmXCJ0cmFuc3BhcmVudFwiPT09bi5vcHRpb25zLmJhY2tncm91bmQ7cmV0dXJuIG4ucGl4aU9wdGlvbnM9bi5waXhpT3B0aW9uc3x8e3ZpZXc6bi5jYW52YXMsdHJhbnNwYXJlbnQ6aSxhbnRpYWxpYXM6ITAsYmFja2dyb3VuZENvbG9yOmUuYmFja2dyb3VuZH0sbi5tb3VzZT1lLm1vdXNlLG4uZW5naW5lPWUuZW5naW5lLG4ucmVuZGVyZXI9bi5yZW5kZXJlcnx8bmV3IFBJWEkuV2ViR0xSZW5kZXJlcihuLm9wdGlvbnMud2lkdGgsbi5vcHRpb25zLmhlaWdodCxuLnBpeGlPcHRpb25zKSxuLmNvbnRhaW5lcj1uLmNvbnRhaW5lcnx8bmV3IFBJWEkuQ29udGFpbmVyLG4uc3ByaXRlQ29udGFpbmVyPW4uc3ByaXRlQ29udGFpbmVyfHxuZXcgUElYSS5Db250YWluZXIsbi5jYW52YXM9bi5jYW52YXN8fG4ucmVuZGVyZXIudmlldyxuLmJvdW5kcz1uLmJvdW5kc3x8e21pbjp7eDowLHk6MH0sbWF4Ont4Om4ub3B0aW9ucy53aWR0aCx5Om4ub3B0aW9ucy5oZWlnaHR9fSxhLm9uKG4uZW5naW5lLFwiYmVmb3JlVXBkYXRlXCIsZnVuY3Rpb24oKXtvLmNsZWFyKG4pfSksbi50ZXh0dXJlcz17fSxuLnNwcml0ZXM9e30sbi5wcmltaXRpdmVzPXt9LG4uY29udGFpbmVyLmFkZENoaWxkKG4uc3ByaXRlQ29udGFpbmVyKSxzLmlzRWxlbWVudChuLmVsZW1lbnQpP24uZWxlbWVudC5hcHBlbmRDaGlsZChuLmNhbnZhcyk6cy53YXJuKCdObyBcInJlbmRlci5lbGVtZW50XCIgcGFzc2VkLCBcInJlbmRlci5jYW52YXNcIiB3YXMgbm90IGluc2VydGVkIGludG8gZG9jdW1lbnQuJyksbi5jYW52YXMub25jb250ZXh0bWVudT1mdW5jdGlvbigpe3JldHVybiExfSxcbm4uY2FudmFzLm9uc2VsZWN0c3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX0sbn0sby5ydW49ZnVuY3Rpb24odCl7IWZ1bmN0aW9uIG4oaSl7dC5mcmFtZVJlcXVlc3RJZD1lKG4pLG8ud29ybGQodCl9KCl9LG8uc3RvcD1mdW5jdGlvbihlKXt0KGUuZnJhbWVSZXF1ZXN0SWQpfSxvLmNsZWFyPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmNvbnRhaW5lcixuPWUuc3ByaXRlQ29udGFpbmVyO3QuY2hpbGRyZW5bMF07KXQucmVtb3ZlQ2hpbGQodC5jaGlsZHJlblswXSk7Zm9yKDtuLmNoaWxkcmVuWzBdOyluLnJlbW92ZUNoaWxkKG4uY2hpbGRyZW5bMF0pO3ZhciBvPWUuc3ByaXRlc1tcImJnLTBcIl07ZS50ZXh0dXJlcz17fSxlLnNwcml0ZXM9e30sZS5wcmltaXRpdmVzPXt9LGUuc3ByaXRlc1tcImJnLTBcIl09byxvJiZ0LmFkZENoaWxkQXQobywwKSxlLmNvbnRhaW5lci5hZGRDaGlsZChlLnNwcml0ZUNvbnRhaW5lciksZS5jdXJyZW50QmFja2dyb3VuZD1udWxsLHQuc2NhbGUuc2V0KDEsMSksdC5wb3NpdGlvbi5zZXQoMCwwKX0sby5zZXRCYWNrZ3JvdW5kPWZ1bmN0aW9uKGUsdCl7aWYoZS5jdXJyZW50QmFja2dyb3VuZCE9PXQpe3ZhciBuPXQuaW5kZXhPZiYmLTEhPT10LmluZGV4T2YoXCIjXCIpLG89ZS5zcHJpdGVzW1wiYmctMFwiXTtpZihuKXt2YXIgaT1zLmNvbG9yVG9OdW1iZXIodCk7ZS5yZW5kZXJlci5iYWNrZ3JvdW5kQ29sb3I9aSxvJiZlLmNvbnRhaW5lci5yZW1vdmVDaGlsZChvKX1lbHNlIGlmKCFvKXt2YXIgcj1kKGUsdCk7bz1lLnNwcml0ZXNbXCJiZy0wXCJdPW5ldyBQSVhJLlNwcml0ZShyKSxvLnBvc2l0aW9uLng9MCxvLnBvc2l0aW9uLnk9MCxlLmNvbnRhaW5lci5hZGRDaGlsZEF0KG8sMCl9ZS5jdXJyZW50QmFja2dyb3VuZD10fX0sby53b3JsZD1mdW5jdGlvbihlKXtcbnZhciB0LG49ZS5lbmdpbmUscz1uLndvcmxkLGE9ZS5yZW5kZXJlcixjPWUuY29udGFpbmVyLGQ9ZS5vcHRpb25zLHU9ci5hbGxCb2RpZXMocykscD1yLmFsbENvbnN0cmFpbnRzKHMpLGY9W107ZC53aXJlZnJhbWVzP28uc2V0QmFja2dyb3VuZChlLGQud2lyZWZyYW1lQmFja2dyb3VuZCk6by5zZXRCYWNrZ3JvdW5kKGUsZC5iYWNrZ3JvdW5kKTt2YXIgbT1lLmJvdW5kcy5tYXgueC1lLmJvdW5kcy5taW4ueCx2PWUuYm91bmRzLm1heC55LWUuYm91bmRzLm1pbi55LHk9bS9lLm9wdGlvbnMud2lkdGgsZz12L2Uub3B0aW9ucy5oZWlnaHQ7aWYoZC5oYXNCb3VuZHMpe2Zvcih0PTA7dDx1Lmxlbmd0aDt0Kyspe3ZhciB4PXVbdF07eC5yZW5kZXIuc3ByaXRlLnZpc2libGU9aS5vdmVybGFwcyh4LmJvdW5kcyxlLmJvdW5kcyl9Zm9yKHQ9MDt0PHAubGVuZ3RoO3QrKyl7dmFyIGg9cFt0XSxiPWguYm9keUEsdz1oLmJvZHlCLFM9aC5wb2ludEEsQz1oLnBvaW50QjtiJiYoUz1sLmFkZChiLnBvc2l0aW9uLGgucG9pbnRBKSksdyYmKEM9bC5hZGQody5wb3NpdGlvbixoLnBvaW50QikpLFMmJkMmJigoaS5jb250YWlucyhlLmJvdW5kcyxTKXx8aS5jb250YWlucyhlLmJvdW5kcyxDKSkmJmYucHVzaChoKSl9Yy5zY2FsZS5zZXQoMS95LDEvZyksYy5wb3NpdGlvbi5zZXQoLWUuYm91bmRzLm1pbi54KigxL3kpLC1lLmJvdW5kcy5taW4ueSooMS9nKSl9ZWxzZSBmPXA7Zm9yKHQ9MDt0PHUubGVuZ3RoO3QrKylvLmJvZHkoZSx1W3RdKTtmb3IodD0wO3Q8Zi5sZW5ndGg7dCsrKW8uY29uc3RyYWludChlLGZbdF0pO2EucmVuZGVyKGMpfSxvLmNvbnN0cmFpbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj0oZS5lbmdpbmUsdC5ib2R5QSksbz10LmJvZHlCLGk9dC5wb2ludEEscj10LnBvaW50QixhPWUuY29udGFpbmVyLGw9dC5yZW5kZXIsYz1cImMtXCIrdC5pZCxkPWUucHJpbWl0aXZlc1tjXTtpZihkfHwoZD1lLnByaW1pdGl2ZXNbY109bmV3IFBJWEkuR3JhcGhpY3MpLFxuIWwudmlzaWJsZXx8IXQucG9pbnRBfHwhdC5wb2ludEIpcmV0dXJuIHZvaWQgZC5jbGVhcigpOy0xPT09cy5pbmRleE9mKGEuY2hpbGRyZW4sZCkmJmEuYWRkQ2hpbGQoZCksZC5jbGVhcigpLGQuYmVnaW5GaWxsKDAsMCksZC5saW5lU3R5bGUobC5saW5lV2lkdGgscy5jb2xvclRvTnVtYmVyKGwuc3Ryb2tlU3R5bGUpLDEpLG4/ZC5tb3ZlVG8obi5wb3NpdGlvbi54K2kueCxuLnBvc2l0aW9uLnkraS55KTpkLm1vdmVUbyhpLngsaS55KSxvP2QubGluZVRvKG8ucG9zaXRpb24ueCtyLngsby5wb3NpdGlvbi55K3IueSk6ZC5saW5lVG8oci54LHIueSksZC5lbmRGaWxsKCl9LG8uYm9keT1mdW5jdGlvbihlLHQpe3ZhciBvPShlLmVuZ2luZSx0LnJlbmRlcik7aWYoby52aXNpYmxlKWlmKG8uc3ByaXRlJiZvLnNwcml0ZS50ZXh0dXJlKXt2YXIgaT1cImItXCIrdC5pZCxyPWUuc3ByaXRlc1tpXSxhPWUuc3ByaXRlQ29udGFpbmVyO3J8fChyPWUuc3ByaXRlc1tpXT1uKGUsdCkpLC0xPT09cy5pbmRleE9mKGEuY2hpbGRyZW4scikmJmEuYWRkQ2hpbGQociksci5wb3NpdGlvbi54PXQucG9zaXRpb24ueCxyLnBvc2l0aW9uLnk9dC5wb3NpdGlvbi55LHIucm90YXRpb249dC5hbmdsZSxyLnNjYWxlLng9by5zcHJpdGUueFNjYWxlfHwxLHIuc2NhbGUueT1vLnNwcml0ZS55U2NhbGV8fDF9ZWxzZXt2YXIgbD1cImItXCIrdC5pZCxkPWUucHJpbWl0aXZlc1tsXSx1PWUuY29udGFpbmVyO2R8fChkPWUucHJpbWl0aXZlc1tsXT1jKGUsdCksZC5pbml0aWFsQW5nbGU9dC5hbmdsZSksLTE9PT1zLmluZGV4T2YodS5jaGlsZHJlbixkKSYmdS5hZGRDaGlsZChkKSxkLnBvc2l0aW9uLng9dC5wb3NpdGlvbi54LGQucG9zaXRpb24ueT10LnBvc2l0aW9uLnksZC5yb3RhdGlvbj10LmFuZ2xlLWQuaW5pdGlhbEFuZ2xlfX07dmFyIG49ZnVuY3Rpb24oZSx0KXt2YXIgbj10LnJlbmRlcixvPW4uc3ByaXRlLnRleHR1cmUsaT1kKGUsbykscj1uZXcgUElYSS5TcHJpdGUoaSlcbjtyZXR1cm4gci5hbmNob3IueD10LnJlbmRlci5zcHJpdGUueE9mZnNldCxyLmFuY2hvci55PXQucmVuZGVyLnNwcml0ZS55T2Zmc2V0LHJ9LGM9ZnVuY3Rpb24oZSx0KXt2YXIgbixvPXQucmVuZGVyLGk9ZS5vcHRpb25zLHI9bmV3IFBJWEkuR3JhcGhpY3MsYT1zLmNvbG9yVG9OdW1iZXIoby5maWxsU3R5bGUpLGw9cy5jb2xvclRvTnVtYmVyKG8uc3Ryb2tlU3R5bGUpLGM9cy5jb2xvclRvTnVtYmVyKG8uc3Ryb2tlU3R5bGUpLGQ9cy5jb2xvclRvTnVtYmVyKFwiI2JiYlwiKSx1PXMuY29sb3JUb051bWJlcihcIiNDRDVDNUNcIik7ci5jbGVhcigpO2Zvcih2YXIgcD10LnBhcnRzLmxlbmd0aD4xPzE6MDtwPHQucGFydHMubGVuZ3RoO3ArKyl7bj10LnBhcnRzW3BdLGkud2lyZWZyYW1lcz8oci5iZWdpbkZpbGwoMCwwKSxyLmxpbmVTdHlsZSgxLGQsMSkpOihyLmJlZ2luRmlsbChhLDEpLHIubGluZVN0eWxlKG8ubGluZVdpZHRoLGwsMSkpLHIubW92ZVRvKG4udmVydGljZXNbMF0ueC10LnBvc2l0aW9uLngsbi52ZXJ0aWNlc1swXS55LXQucG9zaXRpb24ueSk7Zm9yKHZhciBmPTE7ZjxuLnZlcnRpY2VzLmxlbmd0aDtmKyspci5saW5lVG8obi52ZXJ0aWNlc1tmXS54LXQucG9zaXRpb24ueCxuLnZlcnRpY2VzW2ZdLnktdC5wb3NpdGlvbi55KTtyLmxpbmVUbyhuLnZlcnRpY2VzWzBdLngtdC5wb3NpdGlvbi54LG4udmVydGljZXNbMF0ueS10LnBvc2l0aW9uLnkpLHIuZW5kRmlsbCgpLChpLnNob3dBbmdsZUluZGljYXRvcnx8aS5zaG93QXhlcykmJihyLmJlZ2luRmlsbCgwLDApLGkud2lyZWZyYW1lcz9yLmxpbmVTdHlsZSgxLHUsMSk6ci5saW5lU3R5bGUoMSxjKSxyLm1vdmVUbyhuLnBvc2l0aW9uLngtdC5wb3NpdGlvbi54LG4ucG9zaXRpb24ueS10LnBvc2l0aW9uLnkpLFxuci5saW5lVG8oKG4udmVydGljZXNbMF0ueCtuLnZlcnRpY2VzW24udmVydGljZXMubGVuZ3RoLTFdLngpLzItdC5wb3NpdGlvbi54LChuLnZlcnRpY2VzWzBdLnkrbi52ZXJ0aWNlc1tuLnZlcnRpY2VzLmxlbmd0aC0xXS55KS8yLXQucG9zaXRpb24ueSksci5lbmRGaWxsKCkpfXJldHVybiByfSxkPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZS50ZXh0dXJlc1t0XTtyZXR1cm4gbnx8KG49ZS50ZXh0dXJlc1t0XT1QSVhJLlRleHR1cmUuZnJvbUltYWdlKHQpKSxufX0oKX0se1wiLi4vYm9keS9Db21wb3NpdGVcIjoyLFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2NvcmUvRXZlbnRzXCI6MTYsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4fV19LHt9LFszMF0pKDMwKX0pOyIsIiFmdW5jdGlvbihlKXt2YXIgbj0vaVBob25lL2ksdD0vaVBvZC9pLHI9L2lQYWQvaSxhPS9cXGJBbmRyb2lkKD86LispTW9iaWxlXFxiL2kscD0vQW5kcm9pZC9pLGI9L1xcYkFuZHJvaWQoPzouKylTRDQ5MzBVUlxcYi9pLGw9L1xcYkFuZHJvaWQoPzouKykoPzpLRltBLVpdezIsNH0pXFxiL2ksZj0vV2luZG93cyBQaG9uZS9pLHM9L1xcYldpbmRvd3MoPzouKylBUk1cXGIvaSx1PS9CbGFja0JlcnJ5L2ksYz0vQkIxMC9pLGg9L09wZXJhIE1pbmkvaSx2PS9cXGIoQ3JpT1N8Q2hyb21lKSg/Oi4rKU1vYmlsZS9pLHc9L01vYmlsZSg/Oi4rKUZpcmVmb3hcXGIvaTtmdW5jdGlvbiBtKGUsaSl7cmV0dXJuIGUudGVzdChpKX1mdW5jdGlvbiBpKGUpe3ZhciBpPWV8fChcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yP25hdmlnYXRvci51c2VyQWdlbnQ6XCJcIiksbz1pLnNwbGl0KFwiW0ZCQU5cIik7dm9pZCAwIT09b1sxXSYmKGk9b1swXSksdm9pZCAwIT09KG89aS5zcGxpdChcIlR3aXR0ZXJcIikpWzFdJiYoaT1vWzBdKTt2YXIgZD17YXBwbGU6e3Bob25lOm0obixpKSYmIW0oZixpKSxpcG9kOm0odCxpKSx0YWJsZXQ6IW0obixpKSYmbShyLGkpJiYhbShmLGkpLGRldmljZToobShuLGkpfHxtKHQsaSl8fG0ocixpKSkmJiFtKGYsaSl9LGFtYXpvbjp7cGhvbmU6bShiLGkpLHRhYmxldDohbShiLGkpJiZtKGwsaSksZGV2aWNlOm0oYixpKXx8bShsLGkpfSxhbmRyb2lkOntwaG9uZTohbShmLGkpJiZtKGIsaSl8fCFtKGYsaSkmJm0oYSxpKSx0YWJsZXQ6IW0oZixpKSYmIW0oYixpKSYmIW0oYSxpKSYmKG0obCxpKXx8bShwLGkpKSxkZXZpY2U6IW0oZixpKSYmKG0oYixpKXx8bShsLGkpfHxtKGEsaSl8fG0ocCxpKSl8fG0oL1xcYm9raHR0cFxcYi9pLGkpfSx3aW5kb3dzOntwaG9uZTptKGYsaSksdGFibGV0Om0ocyxpKSxkZXZpY2U6bShmLGkpfHxtKHMsaSl9LG90aGVyOntibGFja2JlcnJ5Om0odSxpKSxibGFja2JlcnJ5MTA6bShjLGkpLG9wZXJhOm0oaCxpKSxmaXJlZm94Om0odyxpKSxjaHJvbWU6bSh2LGkpLGRldmljZTptKHUsaSl8fG0oYyxpKXx8bShoLGkpfHxtKHcsaSl8fG0odixpKX19O3JldHVybiBkLmFueT1kLmFwcGxlLmRldmljZXx8ZC5hbmRyb2lkLmRldmljZXx8ZC53aW5kb3dzLmRldmljZXx8ZC5vdGhlci5kZXZpY2UsZC5waG9uZT1kLmFwcGxlLnBob25lfHxkLmFuZHJvaWQucGhvbmV8fGQud2luZG93cy5waG9uZSxkLnRhYmxldD1kLmFwcGxlLnRhYmxldHx8ZC5hbmRyb2lkLnRhYmxldHx8ZC53aW5kb3dzLnRhYmxldCxkfVwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzJiZcInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93P21vZHVsZS5leHBvcnRzPWk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/KG1vZHVsZS5leHBvcnRzPWkoKSxtb2R1bGUuZXhwb3J0cy5pc01vYmlsZT1pKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLGUuaXNNb2JpbGU9aSgpKTplLmlzTW9iaWxlPWkoKX0odGhpcyk7IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHB1bnljb2RlID0gcmVxdWlyZSgncHVueWNvZGUnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbmV4cG9ydHMucGFyc2UgPSB1cmxQYXJzZTtcbmV4cG9ydHMucmVzb2x2ZSA9IHVybFJlc29sdmU7XG5leHBvcnRzLnJlc29sdmVPYmplY3QgPSB1cmxSZXNvbHZlT2JqZWN0O1xuZXhwb3J0cy5mb3JtYXQgPSB1cmxGb3JtYXQ7XG5cbmV4cG9ydHMuVXJsID0gVXJsO1xuXG5mdW5jdGlvbiBVcmwoKSB7XG4gIHRoaXMucHJvdG9jb2wgPSBudWxsO1xuICB0aGlzLnNsYXNoZXMgPSBudWxsO1xuICB0aGlzLmF1dGggPSBudWxsO1xuICB0aGlzLmhvc3QgPSBudWxsO1xuICB0aGlzLnBvcnQgPSBudWxsO1xuICB0aGlzLmhvc3RuYW1lID0gbnVsbDtcbiAgdGhpcy5oYXNoID0gbnVsbDtcbiAgdGhpcy5zZWFyY2ggPSBudWxsO1xuICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgdGhpcy5wYXRobmFtZSA9IG51bGw7XG4gIHRoaXMucGF0aCA9IG51bGw7XG4gIHRoaXMuaHJlZiA9IG51bGw7XG59XG5cbi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NlxuXG4vLyBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZVxuLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuXG52YXIgcHJvdG9jb2xQYXR0ZXJuID0gL14oW2EtejAtOS4rLV0rOikvaSxcbiAgICBwb3J0UGF0dGVybiA9IC86WzAtOV0qJC8sXG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGEgc2ltcGxlIHBhdGggVVJMXG4gICAgc2ltcGxlUGF0aFBhdHRlcm4gPSAvXihcXC9cXC8/KD8hXFwvKVteXFw/XFxzXSopKFxcP1teXFxzXSopPyQvLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgcmVzZXJ2ZWQgZm9yIGRlbGltaXRpbmcgVVJMcy5cbiAgICAvLyBXZSBhY3R1YWxseSBqdXN0IGF1dG8tZXNjYXBlIHRoZXNlLlxuICAgIGRlbGltcyA9IFsnPCcsICc+JywgJ1wiJywgJ2AnLCAnICcsICdcXHInLCAnXFxuJywgJ1xcdCddLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgbm90IGFsbG93ZWQgZm9yIHZhcmlvdXMgcmVhc29ucy5cbiAgICB1bndpc2UgPSBbJ3snLCAnfScsICd8JywgJ1xcXFwnLCAnXicsICdgJ10uY29uY2F0KGRlbGltcyksXG5cbiAgICAvLyBBbGxvd2VkIGJ5IFJGQ3MsIGJ1dCBjYXVzZSBvZiBYU1MgYXR0YWNrcy4gIEFsd2F5cyBlc2NhcGUgdGhlc2UuXG4gICAgYXV0b0VzY2FwZSA9IFsnXFwnJ10uY29uY2F0KHVud2lzZSksXG4gICAgLy8gQ2hhcmFjdGVycyB0aGF0IGFyZSBuZXZlciBldmVyIGFsbG93ZWQgaW4gYSBob3N0bmFtZS5cbiAgICAvLyBOb3RlIHRoYXQgYW55IGludmFsaWQgY2hhcnMgYXJlIGFsc28gaGFuZGxlZCwgYnV0IHRoZXNlXG4gICAgLy8gYXJlIHRoZSBvbmVzIHRoYXQgYXJlICpleHBlY3RlZCogdG8gYmUgc2Vlbiwgc28gd2UgZmFzdC1wYXRoXG4gICAgLy8gdGhlbS5cbiAgICBub25Ib3N0Q2hhcnMgPSBbJyUnLCAnLycsICc/JywgJzsnLCAnIyddLmNvbmNhdChhdXRvRXNjYXBlKSxcbiAgICBob3N0RW5kaW5nQ2hhcnMgPSBbJy8nLCAnPycsICcjJ10sXG4gICAgaG9zdG5hbWVNYXhMZW4gPSAyNTUsXG4gICAgaG9zdG5hbWVQYXJ0UGF0dGVybiA9IC9eWythLXowLTlBLVpfLV17MCw2M30kLyxcbiAgICBob3N0bmFtZVBhcnRTdGFydCA9IC9eKFsrYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBjYW4gYWxsb3cgXCJ1bnNhZmVcIiBhbmQgXCJ1bndpc2VcIiBjaGFycy5cbiAgICB1bnNhZmVQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IG5ldmVyIGhhdmUgYSBob3N0bmFtZS5cbiAgICBob3N0bGVzc1Byb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgYWx3YXlzIGNvbnRhaW4gYSAvLyBiaXQuXG4gICAgc2xhc2hlZFByb3RvY29sID0ge1xuICAgICAgJ2h0dHAnOiB0cnVlLFxuICAgICAgJ2h0dHBzJzogdHJ1ZSxcbiAgICAgICdmdHAnOiB0cnVlLFxuICAgICAgJ2dvcGhlcic6IHRydWUsXG4gICAgICAnZmlsZSc6IHRydWUsXG4gICAgICAnaHR0cDonOiB0cnVlLFxuICAgICAgJ2h0dHBzOic6IHRydWUsXG4gICAgICAnZnRwOic6IHRydWUsXG4gICAgICAnZ29waGVyOic6IHRydWUsXG4gICAgICAnZmlsZTonOiB0cnVlXG4gICAgfSxcbiAgICBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5cbmZ1bmN0aW9uIHVybFBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKHVybCAmJiB1dGlsLmlzT2JqZWN0KHVybCkgJiYgdXJsIGluc3RhbmNlb2YgVXJsKSByZXR1cm4gdXJsO1xuXG4gIHZhciB1ID0gbmV3IFVybDtcbiAgdS5wYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KTtcbiAgcmV0dXJuIHU7XG59XG5cblVybC5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbih1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICghdXRpbC5pc1N0cmluZyh1cmwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlBhcmFtZXRlciAndXJsJyBtdXN0IGJlIGEgc3RyaW5nLCBub3QgXCIgKyB0eXBlb2YgdXJsKTtcbiAgfVxuXG4gIC8vIENvcHkgY2hyb21lLCBJRSwgb3BlcmEgYmFja3NsYXNoLWhhbmRsaW5nIGJlaGF2aW9yLlxuICAvLyBCYWNrIHNsYXNoZXMgYmVmb3JlIHRoZSBxdWVyeSBzdHJpbmcgZ2V0IGNvbnZlcnRlZCB0byBmb3J3YXJkIHNsYXNoZXNcbiAgLy8gU2VlOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjU5MTZcbiAgdmFyIHF1ZXJ5SW5kZXggPSB1cmwuaW5kZXhPZignPycpLFxuICAgICAgc3BsaXR0ZXIgPVxuICAgICAgICAgIChxdWVyeUluZGV4ICE9PSAtMSAmJiBxdWVyeUluZGV4IDwgdXJsLmluZGV4T2YoJyMnKSkgPyAnPycgOiAnIycsXG4gICAgICB1U3BsaXQgPSB1cmwuc3BsaXQoc3BsaXR0ZXIpLFxuICAgICAgc2xhc2hSZWdleCA9IC9cXFxcL2c7XG4gIHVTcGxpdFswXSA9IHVTcGxpdFswXS5yZXBsYWNlKHNsYXNoUmVnZXgsICcvJyk7XG4gIHVybCA9IHVTcGxpdC5qb2luKHNwbGl0dGVyKTtcblxuICB2YXIgcmVzdCA9IHVybDtcblxuICAvLyB0cmltIGJlZm9yZSBwcm9jZWVkaW5nLlxuICAvLyBUaGlzIGlzIHRvIHN1cHBvcnQgcGFyc2Ugc3R1ZmYgbGlrZSBcIiAgaHR0cDovL2Zvby5jb20gIFxcblwiXG4gIHJlc3QgPSByZXN0LnRyaW0oKTtcblxuICBpZiAoIXNsYXNoZXNEZW5vdGVIb3N0ICYmIHVybC5zcGxpdCgnIycpLmxlbmd0aCA9PT0gMSkge1xuICAgIC8vIFRyeSBmYXN0IHBhdGggcmVnZXhwXG4gICAgdmFyIHNpbXBsZVBhdGggPSBzaW1wbGVQYXRoUGF0dGVybi5leGVjKHJlc3QpO1xuICAgIGlmIChzaW1wbGVQYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSByZXN0O1xuICAgICAgdGhpcy5ocmVmID0gcmVzdDtcbiAgICAgIHRoaXMucGF0aG5hbWUgPSBzaW1wbGVQYXRoWzFdO1xuICAgICAgaWYgKHNpbXBsZVBhdGhbMl0pIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSBzaW1wbGVQYXRoWzJdO1xuICAgICAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnNlYXJjaC5zdWJzdHIoMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucXVlcnkgPSB0aGlzLnNlYXJjaC5zdWJzdHIoMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0ge307XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvdG8gPSBwcm90b2NvbFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgaWYgKHByb3RvKSB7XG4gICAgcHJvdG8gPSBwcm90b1swXTtcbiAgICB2YXIgbG93ZXJQcm90byA9IHByb3RvLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5wcm90b2NvbCA9IGxvd2VyUHJvdG87XG4gICAgcmVzdCA9IHJlc3Quc3Vic3RyKHByb3RvLmxlbmd0aCk7XG4gIH1cblxuICAvLyBmaWd1cmUgb3V0IGlmIGl0J3MgZ290IGEgaG9zdFxuICAvLyB1c2VyQHNlcnZlciBpcyAqYWx3YXlzKiBpbnRlcnByZXRlZCBhcyBhIGhvc3RuYW1lLCBhbmQgdXJsXG4gIC8vIHJlc29sdXRpb24gd2lsbCB0cmVhdCAvL2Zvby9iYXIgYXMgaG9zdD1mb28scGF0aD1iYXIgYmVjYXVzZSB0aGF0J3NcbiAgLy8gaG93IHRoZSBicm93c2VyIHJlc29sdmVzIHJlbGF0aXZlIFVSTHMuXG4gIGlmIChzbGFzaGVzRGVub3RlSG9zdCB8fCBwcm90byB8fCByZXN0Lm1hdGNoKC9eXFwvXFwvW15AXFwvXStAW15AXFwvXSsvKSkge1xuICAgIHZhciBzbGFzaGVzID0gcmVzdC5zdWJzdHIoMCwgMikgPT09ICcvLyc7XG4gICAgaWYgKHNsYXNoZXMgJiYgIShwcm90byAmJiBob3N0bGVzc1Byb3RvY29sW3Byb3RvXSkpIHtcbiAgICAgIHJlc3QgPSByZXN0LnN1YnN0cigyKTtcbiAgICAgIHRoaXMuc2xhc2hlcyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFob3N0bGVzc1Byb3RvY29sW3Byb3RvXSAmJlxuICAgICAgKHNsYXNoZXMgfHwgKHByb3RvICYmICFzbGFzaGVkUHJvdG9jb2xbcHJvdG9dKSkpIHtcblxuICAgIC8vIHRoZXJlJ3MgYSBob3N0bmFtZS5cbiAgICAvLyB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgLywgPywgOywgb3IgIyBlbmRzIHRoZSBob3N0LlxuICAgIC8vXG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gQCBpbiB0aGUgaG9zdG5hbWUsIHRoZW4gbm9uLWhvc3QgY2hhcnMgKmFyZSogYWxsb3dlZFxuICAgIC8vIHRvIHRoZSBsZWZ0IG9mIHRoZSBsYXN0IEAgc2lnbiwgdW5sZXNzIHNvbWUgaG9zdC1lbmRpbmcgY2hhcmFjdGVyXG4gICAgLy8gY29tZXMgKmJlZm9yZSogdGhlIEAtc2lnbi5cbiAgICAvLyBVUkxzIGFyZSBvYm5veGlvdXMuXG4gICAgLy9cbiAgICAvLyBleDpcbiAgICAvLyBodHRwOi8vYUBiQGMvID0+IHVzZXI6YUBiIGhvc3Q6Y1xuICAgIC8vIGh0dHA6Ly9hQGI/QGMgPT4gdXNlcjphIGhvc3Q6YyBwYXRoOi8/QGNcblxuICAgIC8vIHYwLjEyIFRPRE8oaXNhYWNzKTogVGhpcyBpcyBub3QgcXVpdGUgaG93IENocm9tZSBkb2VzIHRoaW5ncy5cbiAgICAvLyBSZXZpZXcgb3VyIHRlc3QgY2FzZSBhZ2FpbnN0IGJyb3dzZXJzIG1vcmUgY29tcHJlaGVuc2l2ZWx5LlxuXG4gICAgLy8gZmluZCB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IGhvc3RFbmRpbmdDaGFyc1xuICAgIHZhciBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob3N0RW5kaW5nQ2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2YoaG9zdEVuZGluZ0NoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG5cbiAgICAvLyBhdCB0aGlzIHBvaW50LCBlaXRoZXIgd2UgaGF2ZSBhbiBleHBsaWNpdCBwb2ludCB3aGVyZSB0aGVcbiAgICAvLyBhdXRoIHBvcnRpb24gY2Fubm90IGdvIHBhc3QsIG9yIHRoZSBsYXN0IEAgY2hhciBpcyB0aGUgZGVjaWRlci5cbiAgICB2YXIgYXV0aCwgYXRTaWduO1xuICAgIGlmIChob3N0RW5kID09PSAtMSkge1xuICAgICAgLy8gYXRTaWduIGNhbiBiZSBhbnl3aGVyZS5cbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYXRTaWduIG11c3QgYmUgaW4gYXV0aCBwb3J0aW9uLlxuICAgICAgLy8gaHR0cDovL2FAYi9jQGQgPT4gaG9zdDpiIGF1dGg6YSBwYXRoOi9jQGRcbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnLCBob3N0RW5kKTtcbiAgICB9XG5cbiAgICAvLyBOb3cgd2UgaGF2ZSBhIHBvcnRpb24gd2hpY2ggaXMgZGVmaW5pdGVseSB0aGUgYXV0aC5cbiAgICAvLyBQdWxsIHRoYXQgb2ZmLlxuICAgIGlmIChhdFNpZ24gIT09IC0xKSB7XG4gICAgICBhdXRoID0gcmVzdC5zbGljZSgwLCBhdFNpZ24pO1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoYXRTaWduICsgMSk7XG4gICAgICB0aGlzLmF1dGggPSBkZWNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgfVxuXG4gICAgLy8gdGhlIGhvc3QgaXMgdGhlIHJlbWFpbmluZyB0byB0aGUgbGVmdCBvZiB0aGUgZmlyc3Qgbm9uLWhvc3QgY2hhclxuICAgIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vbkhvc3RDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihub25Ib3N0Q2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKVxuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgIH1cbiAgICAvLyBpZiB3ZSBzdGlsbCBoYXZlIG5vdCBoaXQgaXQsIHRoZW4gdGhlIGVudGlyZSB0aGluZyBpcyBhIGhvc3QuXG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKVxuICAgICAgaG9zdEVuZCA9IHJlc3QubGVuZ3RoO1xuXG4gICAgdGhpcy5ob3N0ID0gcmVzdC5zbGljZSgwLCBob3N0RW5kKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZShob3N0RW5kKTtcblxuICAgIC8vIHB1bGwgb3V0IHBvcnQuXG4gICAgdGhpcy5wYXJzZUhvc3QoKTtcblxuICAgIC8vIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsXG4gICAgLy8gc28gZXZlbiBpZiBpdCdzIGVtcHR5LCBpdCBoYXMgdG8gYmUgcHJlc2VudC5cbiAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcblxuICAgIC8vIGlmIGhvc3RuYW1lIGJlZ2lucyB3aXRoIFsgYW5kIGVuZHMgd2l0aCBdXG4gICAgLy8gYXNzdW1lIHRoYXQgaXQncyBhbiBJUHY2IGFkZHJlc3MuXG4gICAgdmFyIGlwdjZIb3N0bmFtZSA9IHRoaXMuaG9zdG5hbWVbMF0gPT09ICdbJyAmJlxuICAgICAgICB0aGlzLmhvc3RuYW1lW3RoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMV0gPT09ICddJztcblxuICAgIC8vIHZhbGlkYXRlIGEgbGl0dGxlLlxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB2YXIgaG9zdHBhcnRzID0gdGhpcy5ob3N0bmFtZS5zcGxpdCgvXFwuLyk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGhvc3RwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcnQgPSBob3N0cGFydHNbaV07XG4gICAgICAgIGlmICghcGFydCkgY29udGludWU7XG4gICAgICAgIGlmICghcGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgIHZhciBuZXdwYXJ0ID0gJyc7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGsgPSBwYXJ0Lmxlbmd0aDsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgaWYgKHBhcnQuY2hhckNvZGVBdChqKSA+IDEyNykge1xuICAgICAgICAgICAgICAvLyB3ZSByZXBsYWNlIG5vbi1BU0NJSSBjaGFyIHdpdGggYSB0ZW1wb3JhcnkgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGlzIHRvIG1ha2Ugc3VyZSBzaXplIG9mIGhvc3RuYW1lIGlzIG5vdFxuICAgICAgICAgICAgICAvLyBicm9rZW4gYnkgcmVwbGFjaW5nIG5vbi1BU0NJSSBieSBub3RoaW5nXG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gJ3gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3cGFydCArPSBwYXJ0W2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB3ZSB0ZXN0IGFnYWluIHdpdGggQVNDSUkgY2hhciBvbmx5XG4gICAgICAgICAgaWYgKCFuZXdwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRQYXJ0cyA9IGhvc3RwYXJ0cy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIHZhciBub3RIb3N0ID0gaG9zdHBhcnRzLnNsaWNlKGkgKyAxKTtcbiAgICAgICAgICAgIHZhciBiaXQgPSBwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChiaXQpIHtcbiAgICAgICAgICAgICAgdmFsaWRQYXJ0cy5wdXNoKGJpdFsxXSk7XG4gICAgICAgICAgICAgIG5vdEhvc3QudW5zaGlmdChiaXRbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdEhvc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlc3QgPSAnLycgKyBub3RIb3N0LmpvaW4oJy4nKSArIHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhvc3RuYW1lID0gdmFsaWRQYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5ob3N0bmFtZS5sZW5ndGggPiBob3N0bmFtZU1heExlbikge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBob3N0bmFtZXMgYXJlIGFsd2F5cyBsb3dlciBjYXNlLlxuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgLy8gSUROQSBTdXBwb3J0OiBSZXR1cm5zIGEgcHVueWNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIFwiZG9tYWluXCIuXG4gICAgICAvLyBJdCBvbmx5IGNvbnZlcnRzIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB0aGF0XG4gICAgICAvLyBoYXZlIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmXG4gICAgICAvLyB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQgYWxyZWFkeSBpcyBBU0NJSS1vbmx5LlxuICAgICAgdGhpcy5ob3N0bmFtZSA9IHB1bnljb2RlLnRvQVNDSUkodGhpcy5ob3N0bmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHAgPSB0aGlzLnBvcnQgPyAnOicgKyB0aGlzLnBvcnQgOiAnJztcbiAgICB2YXIgaCA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG4gICAgdGhpcy5ob3N0ID0gaCArIHA7XG4gICAgdGhpcy5ocmVmICs9IHRoaXMuaG9zdDtcblxuICAgIC8vIHN0cmlwIFsgYW5kIF0gZnJvbSB0aGUgaG9zdG5hbWVcbiAgICAvLyB0aGUgaG9zdCBmaWVsZCBzdGlsbCByZXRhaW5zIHRoZW0sIHRob3VnaFxuICAgIGlmIChpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnN1YnN0cigxLCB0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgaWYgKHJlc3RbMF0gIT09ICcvJykge1xuICAgICAgICByZXN0ID0gJy8nICsgcmVzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBub3cgcmVzdCBpcyBzZXQgdG8gdGhlIHBvc3QtaG9zdCBzdHVmZi5cbiAgLy8gY2hvcCBvZmYgYW55IGRlbGltIGNoYXJzLlxuICBpZiAoIXVuc2FmZVByb3RvY29sW2xvd2VyUHJvdG9dKSB7XG5cbiAgICAvLyBGaXJzdCwgbWFrZSAxMDAlIHN1cmUgdGhhdCBhbnkgXCJhdXRvRXNjYXBlXCIgY2hhcnMgZ2V0XG4gICAgLy8gZXNjYXBlZCwgZXZlbiBpZiBlbmNvZGVVUklDb21wb25lbnQgZG9lc24ndCB0aGluayB0aGV5XG4gICAgLy8gbmVlZCB0byBiZS5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGF1dG9Fc2NhcGUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYWUgPSBhdXRvRXNjYXBlW2ldO1xuICAgICAgaWYgKHJlc3QuaW5kZXhPZihhZSkgPT09IC0xKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIHZhciBlc2MgPSBlbmNvZGVVUklDb21wb25lbnQoYWUpO1xuICAgICAgaWYgKGVzYyA9PT0gYWUpIHtcbiAgICAgICAgZXNjID0gZXNjYXBlKGFlKTtcbiAgICAgIH1cbiAgICAgIHJlc3QgPSByZXN0LnNwbGl0KGFlKS5qb2luKGVzYyk7XG4gICAgfVxuICB9XG5cblxuICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LlxuICB2YXIgaGFzaCA9IHJlc3QuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaCAhPT0gLTEpIHtcbiAgICAvLyBnb3QgYSBmcmFnbWVudCBzdHJpbmcuXG4gICAgdGhpcy5oYXNoID0gcmVzdC5zdWJzdHIoaGFzaCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgaGFzaCk7XG4gIH1cbiAgdmFyIHFtID0gcmVzdC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxbSAhPT0gLTEpIHtcbiAgICB0aGlzLnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKTtcbiAgICB0aGlzLnF1ZXJ5ID0gcmVzdC5zdWJzdHIocW0gKyAxKTtcbiAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMucXVlcnkpO1xuICAgIH1cbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBxbSk7XG4gIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgIC8vIG5vIHF1ZXJ5IHN0cmluZywgYnV0IHBhcnNlUXVlcnlTdHJpbmcgc3RpbGwgcmVxdWVzdGVkXG4gICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICB0aGlzLnF1ZXJ5ID0ge307XG4gIH1cbiAgaWYgKHJlc3QpIHRoaXMucGF0aG5hbWUgPSByZXN0O1xuICBpZiAoc2xhc2hlZFByb3RvY29sW2xvd2VyUHJvdG9dICYmXG4gICAgICB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7XG4gICAgdGhpcy5wYXRobmFtZSA9ICcvJztcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgaWYgKHRoaXMucGF0aG5hbWUgfHwgdGhpcy5zZWFyY2gpIHtcbiAgICB2YXIgcCA9IHRoaXMucGF0aG5hbWUgfHwgJyc7XG4gICAgdmFyIHMgPSB0aGlzLnNlYXJjaCB8fCAnJztcbiAgICB0aGlzLnBhdGggPSBwICsgcztcbiAgfVxuXG4gIC8vIGZpbmFsbHksIHJlY29uc3RydWN0IHRoZSBocmVmIGJhc2VkIG9uIHdoYXQgaGFzIGJlZW4gdmFsaWRhdGVkLlxuICB0aGlzLmhyZWYgPSB0aGlzLmZvcm1hdCgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGZvcm1hdCBhIHBhcnNlZCBvYmplY3QgaW50byBhIHVybCBzdHJpbmdcbmZ1bmN0aW9uIHVybEZvcm1hdChvYmopIHtcbiAgLy8gZW5zdXJlIGl0J3MgYW4gb2JqZWN0LCBhbmQgbm90IGEgc3RyaW5nIHVybC5cbiAgLy8gSWYgaXQncyBhbiBvYmosIHRoaXMgaXMgYSBuby1vcC5cbiAgLy8gdGhpcyB3YXksIHlvdSBjYW4gY2FsbCB1cmxfZm9ybWF0KCkgb24gc3RyaW5nc1xuICAvLyB0byBjbGVhbiB1cCBwb3RlbnRpYWxseSB3b25reSB1cmxzLlxuICBpZiAodXRpbC5pc1N0cmluZyhvYmopKSBvYmogPSB1cmxQYXJzZShvYmopO1xuICBpZiAoIShvYmogaW5zdGFuY2VvZiBVcmwpKSByZXR1cm4gVXJsLnByb3RvdHlwZS5mb3JtYXQuY2FsbChvYmopO1xuICByZXR1cm4gb2JqLmZvcm1hdCgpO1xufVxuXG5VcmwucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYXV0aCA9IHRoaXMuYXV0aCB8fCAnJztcbiAgaWYgKGF1dGgpIHtcbiAgICBhdXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCAnOicpO1xuICAgIGF1dGggKz0gJ0AnO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gdGhpcy5wcm90b2NvbCB8fCAnJyxcbiAgICAgIHBhdGhuYW1lID0gdGhpcy5wYXRobmFtZSB8fCAnJyxcbiAgICAgIGhhc2ggPSB0aGlzLmhhc2ggfHwgJycsXG4gICAgICBob3N0ID0gZmFsc2UsXG4gICAgICBxdWVyeSA9ICcnO1xuXG4gIGlmICh0aGlzLmhvc3QpIHtcbiAgICBob3N0ID0gYXV0aCArIHRoaXMuaG9zdDtcbiAgfSBlbHNlIGlmICh0aGlzLmhvc3RuYW1lKSB7XG4gICAgaG9zdCA9IGF1dGggKyAodGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgPT09IC0xID9cbiAgICAgICAgdGhpcy5ob3N0bmFtZSA6XG4gICAgICAgICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScpO1xuICAgIGlmICh0aGlzLnBvcnQpIHtcbiAgICAgIGhvc3QgKz0gJzonICsgdGhpcy5wb3J0O1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLnF1ZXJ5ICYmXG4gICAgICB1dGlsLmlzT2JqZWN0KHRoaXMucXVlcnkpICYmXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnF1ZXJ5KS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSh0aGlzLnF1ZXJ5KTtcbiAgfVxuXG4gIHZhciBzZWFyY2ggPSB0aGlzLnNlYXJjaCB8fCAocXVlcnkgJiYgKCc/JyArIHF1ZXJ5KSkgfHwgJyc7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIC8vIG9ubHkgdGhlIHNsYXNoZWRQcm90b2NvbHMgZ2V0IHRoZSAvLy4gIE5vdCBtYWlsdG86LCB4bXBwOiwgZXRjLlxuICAvLyB1bmxlc3MgdGhleSBoYWQgdGhlbSB0byBiZWdpbiB3aXRoLlxuICBpZiAodGhpcy5zbGFzaGVzIHx8XG4gICAgICAoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbFtwcm90b2NvbF0pICYmIGhvc3QgIT09IGZhbHNlKSB7XG4gICAgaG9zdCA9ICcvLycgKyAoaG9zdCB8fCAnJyk7XG4gICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSBwYXRobmFtZSA9ICcvJyArIHBhdGhuYW1lO1xuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9ICcnO1xuICB9XG5cbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgaGFzaCA9ICcjJyArIGhhc2g7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBzZWFyY2ggPSAnPycgKyBzZWFyY2g7XG5cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgnIycsICclMjMnKTtcblxuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZShzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlKHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgcmV0dXJuIHRoaXMucmVzb2x2ZU9iamVjdCh1cmxQYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpKS5mb3JtYXQoKTtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmVPYmplY3Qoc291cmNlLCByZWxhdGl2ZSkge1xuICBpZiAoIXNvdXJjZSkgcmV0dXJuIHJlbGF0aXZlO1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZU9iamVjdChyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZU9iamVjdCA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIGlmICh1dGlsLmlzU3RyaW5nKHJlbGF0aXZlKSkge1xuICAgIHZhciByZWwgPSBuZXcgVXJsKCk7XG4gICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcmVsYXRpdmUgPSByZWw7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gbmV3IFVybCgpO1xuICB2YXIgdGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgZm9yICh2YXIgdGsgPSAwOyB0ayA8IHRrZXlzLmxlbmd0aDsgdGsrKykge1xuICAgIHZhciB0a2V5ID0gdGtleXNbdGtdO1xuICAgIHJlc3VsdFt0a2V5XSA9IHRoaXNbdGtleV07XG4gIH1cblxuICAvLyBoYXNoIGlzIGFsd2F5cyBvdmVycmlkZGVuLCBubyBtYXR0ZXIgd2hhdC5cbiAgLy8gZXZlbiBocmVmPVwiXCIgd2lsbCByZW1vdmUgaXQuXG4gIHJlc3VsdC5oYXNoID0gcmVsYXRpdmUuaGFzaDtcblxuICAvLyBpZiB0aGUgcmVsYXRpdmUgdXJsIGlzIGVtcHR5LCB0aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvIGhlcmUuXG4gIGlmIChyZWxhdGl2ZS5ocmVmID09PSAnJykge1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBocmVmcyBsaWtlIC8vZm9vL2JhciBhbHdheXMgY3V0IHRvIHRoZSBwcm90b2NvbC5cbiAgaWYgKHJlbGF0aXZlLnNsYXNoZXMgJiYgIXJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgLy8gdGFrZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgcHJvdG9jb2wgZnJvbSByZWxhdGl2ZVxuICAgIHZhciBya2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICBmb3IgKHZhciByayA9IDA7IHJrIDwgcmtleXMubGVuZ3RoOyByaysrKSB7XG4gICAgICB2YXIgcmtleSA9IHJrZXlzW3JrXTtcbiAgICAgIGlmIChya2V5ICE9PSAncHJvdG9jb2wnKVxuICAgICAgICByZXN1bHRbcmtleV0gPSByZWxhdGl2ZVtya2V5XTtcbiAgICB9XG5cbiAgICAvL3VybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbVxuICAgIGlmIChzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXSAmJlxuICAgICAgICByZXN1bHQuaG9zdG5hbWUgJiYgIXJlc3VsdC5wYXRobmFtZSkge1xuICAgICAgcmVzdWx0LnBhdGggPSByZXN1bHQucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuXG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChyZWxhdGl2ZS5wcm90b2NvbCAmJiByZWxhdGl2ZS5wcm90b2NvbCAhPT0gcmVzdWx0LnByb3RvY29sKSB7XG4gICAgLy8gaWYgaXQncyBhIGtub3duIHVybCBwcm90b2NvbCwgdGhlbiBjaGFuZ2luZ1xuICAgIC8vIHRoZSBwcm90b2NvbCBkb2VzIHdlaXJkIHRoaW5nc1xuICAgIC8vIGZpcnN0LCBpZiBpdCdzIG5vdCBmaWxlOiwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBob3N0LFxuICAgIC8vIGFuZCBpZiB0aGVyZSB3YXMgYSBwYXRoXG4gICAgLy8gdG8gYmVnaW4gd2l0aCwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBwYXRoLlxuICAgIC8vIGlmIGl0IGlzIGZpbGU6LCB0aGVuIHRoZSBob3N0IGlzIGRyb3BwZWQsXG4gICAgLy8gYmVjYXVzZSB0aGF0J3Mga25vd24gdG8gYmUgaG9zdGxlc3MuXG4gICAgLy8gYW55dGhpbmcgZWxzZSBpcyBhc3N1bWVkIHRvIGJlIGFic29sdXRlLlxuICAgIGlmICghc2xhc2hlZFByb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICAgICAgdmFyIGsgPSBrZXlzW3ZdO1xuICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXN1bHQucHJvdG9jb2wgPSByZWxhdGl2ZS5wcm90b2NvbDtcbiAgICBpZiAoIXJlbGF0aXZlLmhvc3QgJiYgIWhvc3RsZXNzUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIgcmVsUGF0aCA9IChyZWxhdGl2ZS5wYXRobmFtZSB8fCAnJykuc3BsaXQoJy8nKTtcbiAgICAgIHdoaWxlIChyZWxQYXRoLmxlbmd0aCAmJiAhKHJlbGF0aXZlLmhvc3QgPSByZWxQYXRoLnNoaWZ0KCkpKTtcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdCkgcmVsYXRpdmUuaG9zdCA9ICcnO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0bmFtZSkgcmVsYXRpdmUuaG9zdG5hbWUgPSAnJztcbiAgICAgIGlmIChyZWxQYXRoWzBdICE9PSAnJykgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIGlmIChyZWxQYXRoLmxlbmd0aCA8IDIpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxQYXRoLmpvaW4oJy8nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsYXRpdmUucGF0aG5hbWU7XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgcmVzdWx0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0IHx8ICcnO1xuICAgIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0O1xuICAgIHJlc3VsdC5wb3J0ID0gcmVsYXRpdmUucG9ydDtcbiAgICAvLyB0byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQucGF0aG5hbWUgfHwgcmVzdWx0LnNlYXJjaCkge1xuICAgICAgdmFyIHAgPSByZXN1bHQucGF0aG5hbWUgfHwgJyc7XG4gICAgICB2YXIgcyA9IHJlc3VsdC5zZWFyY2ggfHwgJyc7XG4gICAgICByZXN1bHQucGF0aCA9IHAgKyBzO1xuICAgIH1cbiAgICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHZhciBpc1NvdXJjZUFicyA9IChyZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSxcbiAgICAgIGlzUmVsQWJzID0gKFxuICAgICAgICAgIHJlbGF0aXZlLmhvc3QgfHxcbiAgICAgICAgICByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJ1xuICAgICAgKSxcbiAgICAgIG11c3RFbmRBYnMgPSAoaXNSZWxBYnMgfHwgaXNTb3VyY2VBYnMgfHxcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5ob3N0ICYmIHJlbGF0aXZlLnBhdGhuYW1lKSksXG4gICAgICByZW1vdmVBbGxEb3RzID0gbXVzdEVuZEFicyxcbiAgICAgIHNyY1BhdGggPSByZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICByZWxQYXRoID0gcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICAgIHBzeWNob3RpYyA9IHJlc3VsdC5wcm90b2NvbCAmJiAhc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF07XG5cbiAgLy8gaWYgdGhlIHVybCBpcyBhIG5vbi1zbGFzaGVkIHVybCwgdGhlbiByZWxhdGl2ZVxuICAvLyBsaW5rcyBsaWtlIC4uLy4uIHNob3VsZCBiZSBhYmxlXG4gIC8vIHRvIGNyYXdsIHVwIHRvIHRoZSBob3N0bmFtZSwgYXMgd2VsbC4gIFRoaXMgaXMgc3RyYW5nZS5cbiAgLy8gcmVzdWx0LnByb3RvY29sIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IG5vdy5cbiAgLy8gTGF0ZXIgb24sIHB1dCB0aGUgZmlyc3QgcGF0aCBwYXJ0IGludG8gdGhlIGhvc3QgZmllbGQuXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAnJztcbiAgICByZXN1bHQucG9ydCA9IG51bGw7XG4gICAgaWYgKHJlc3VsdC5ob3N0KSB7XG4gICAgICBpZiAoc3JjUGF0aFswXSA9PT0gJycpIHNyY1BhdGhbMF0gPSByZXN1bHQuaG9zdDtcbiAgICAgIGVsc2Ugc3JjUGF0aC51bnNoaWZ0KHJlc3VsdC5ob3N0KTtcbiAgICB9XG4gICAgcmVzdWx0Lmhvc3QgPSAnJztcbiAgICBpZiAocmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAgIHJlbGF0aXZlLmhvc3RuYW1lID0gbnVsbDtcbiAgICAgIHJlbGF0aXZlLnBvcnQgPSBudWxsO1xuICAgICAgaWYgKHJlbGF0aXZlLmhvc3QpIHtcbiAgICAgICAgaWYgKHJlbFBhdGhbMF0gPT09ICcnKSByZWxQYXRoWzBdID0gcmVsYXRpdmUuaG9zdDtcbiAgICAgICAgZWxzZSByZWxQYXRoLnVuc2hpZnQocmVsYXRpdmUuaG9zdCk7XG4gICAgICB9XG4gICAgICByZWxhdGl2ZS5ob3N0ID0gbnVsbDtcbiAgICB9XG4gICAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgJiYgKHJlbFBhdGhbMF0gPT09ICcnIHx8IHNyY1BhdGhbMF0gPT09ICcnKTtcbiAgfVxuXG4gIGlmIChpc1JlbEFicykge1xuICAgIC8vIGl0J3MgYWJzb2x1dGUuXG4gICAgcmVzdWx0Lmhvc3QgPSAocmVsYXRpdmUuaG9zdCB8fCByZWxhdGl2ZS5ob3N0ID09PSAnJykgP1xuICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdCA6IHJlc3VsdC5ob3N0O1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IChyZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0bmFtZSA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0bmFtZSA6IHJlc3VsdC5ob3N0bmFtZTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHNyY1BhdGggPSByZWxQYXRoO1xuICAgIC8vIGZhbGwgdGhyb3VnaCB0byB0aGUgZG90LWhhbmRsaW5nIGJlbG93LlxuICB9IGVsc2UgaWYgKHJlbFBhdGgubGVuZ3RoKSB7XG4gICAgLy8gaXQncyByZWxhdGl2ZVxuICAgIC8vIHRocm93IGF3YXkgdGhlIGV4aXN0aW5nIGZpbGUsIGFuZCB0YWtlIHRoZSBuZXcgcGF0aCBpbnN0ZWFkLlxuICAgIGlmICghc3JjUGF0aCkgc3JjUGF0aCA9IFtdO1xuICAgIHNyY1BhdGgucG9wKCk7XG4gICAgc3JjUGF0aCA9IHNyY1BhdGguY29uY2F0KHJlbFBhdGgpO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gIH0gZWxzZSBpZiAoIXV0aWwuaXNOdWxsT3JVbmRlZmluZWQocmVsYXRpdmUuc2VhcmNoKSkge1xuICAgIC8vIGp1c3QgcHVsbCBvdXQgdGhlIHNlYXJjaC5cbiAgICAvLyBsaWtlIGhyZWY9Jz9mb28nLlxuICAgIC8vIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFuc1xuICAgIGlmIChwc3ljaG90aWMpIHtcbiAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gc3JjUGF0aC5zaGlmdCgpO1xuICAgICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAoIXV0aWwuaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIXV0aWwuaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgLy8gbm8gcGF0aCBhdCBhbGwuICBlYXN5LlxuICAgIC8vIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgb3RoZXIgc3R1ZmYgYWJvdmUuXG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gJy8nICsgcmVzdWx0LnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaWYgYSB1cmwgRU5EcyBpbiAuIG9yIC4uLCB0aGVuIGl0IG11c3QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIC8vIGhvd2V2ZXIsIGlmIGl0IGVuZHMgaW4gYW55dGhpbmcgZWxzZSBub24tc2xhc2h5LFxuICAvLyB0aGVuIGl0IG11c3QgTk9UIGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICB2YXIgbGFzdCA9IHNyY1BhdGguc2xpY2UoLTEpWzBdO1xuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IChcbiAgICAgIChyZXN1bHQuaG9zdCB8fCByZWxhdGl2ZS5ob3N0IHx8IHNyY1BhdGgubGVuZ3RoID4gMSkgJiZcbiAgICAgIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgfHwgbGFzdCA9PT0gJycpO1xuXG4gIC8vIHN0cmlwIHNpbmdsZSBkb3RzLCByZXNvbHZlIGRvdWJsZSBkb3RzIHRvIHBhcmVudCBkaXJcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHNyY1BhdGgubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIGxhc3QgPSBzcmNQYXRoW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmICghbXVzdEVuZEFicyAmJiAhcmVtb3ZlQWxsRG90cykge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgc3JjUGF0aC51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtdXN0RW5kQWJzICYmIHNyY1BhdGhbMF0gIT09ICcnICYmXG4gICAgICAoIXNyY1BhdGhbMF0gfHwgc3JjUGF0aFswXS5jaGFyQXQoMCkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgKHNyY1BhdGguam9pbignLycpLnN1YnN0cigtMSkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnB1c2goJycpO1xuICB9XG5cbiAgdmFyIGlzQWJzb2x1dGUgPSBzcmNQYXRoWzBdID09PSAnJyB8fFxuICAgICAgKHNyY1BhdGhbMF0gJiYgc3JjUGF0aFswXS5jaGFyQXQoMCkgPT09ICcvJyk7XG5cbiAgLy8gcHV0IHRoZSBob3N0IGJhY2tcbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gaXNBYnNvbHV0ZSA/ICcnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1BhdGgubGVuZ3RoID8gc3JjUGF0aC5zaGlmdCgpIDogJyc7XG4gICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyB8fCAocmVzdWx0Lmhvc3QgJiYgc3JjUGF0aC5sZW5ndGgpO1xuXG4gIGlmIChtdXN0RW5kQWJzICYmICFpc0Fic29sdXRlKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBzcmNQYXRoLmpvaW4oJy8nKTtcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCByZXF1ZXN0Lmh0dHBcbiAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gIH1cbiAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoIHx8IHJlc3VsdC5hdXRoO1xuICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gIHZhciBwb3J0ID0gcG9ydFBhdHRlcm4uZXhlYyhob3N0KTtcbiAgaWYgKHBvcnQpIHtcbiAgICBwb3J0ID0gcG9ydFswXTtcbiAgICBpZiAocG9ydCAhPT0gJzonKSB7XG4gICAgICB0aGlzLnBvcnQgPSBwb3J0LnN1YnN0cigxKTtcbiAgICB9XG4gICAgaG9zdCA9IGhvc3Quc3Vic3RyKDAsIGhvc3QubGVuZ3RoIC0gcG9ydC5sZW5ndGgpO1xuICB9XG4gIGlmIChob3N0KSB0aGlzLmhvc3RuYW1lID0gaG9zdDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmZ1bmN0aW9uIGNvbnRyaWJ1dGlvbjJEKG11bHRpcGxpZXIsIHhzYiwgeXNiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZHg6IC14c2IgLSBtdWx0aXBsaWVyICogY29uc3RhbnRzXzEuU1FVSVNIXzJELFxuICAgICAgICBkeTogLXlzYiAtIG11bHRpcGxpZXIgKiBjb25zdGFudHNfMS5TUVVJU0hfMkQsXG4gICAgICAgIHhzYjogeHNiLFxuICAgICAgICB5c2I6IHlzYlxuICAgIH07XG59XG5mdW5jdGlvbiBjb250cmlidXRpb24zRChtdWx0aXBsaWVyLCB4c2IsIHlzYiwgenNiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZHg6IC14c2IgLSBtdWx0aXBsaWVyICogY29uc3RhbnRzXzEuU1FVSVNIXzNELFxuICAgICAgICBkeTogLXlzYiAtIG11bHRpcGxpZXIgKiBjb25zdGFudHNfMS5TUVVJU0hfM0QsXG4gICAgICAgIGR6OiAtenNiIC0gbXVsdGlwbGllciAqIGNvbnN0YW50c18xLlNRVUlTSF8zRCxcbiAgICAgICAgeHNiOiB4c2IsXG4gICAgICAgIHlzYjogeXNiLFxuICAgICAgICB6c2I6IHpzYlxuICAgIH07XG59XG5mdW5jdGlvbiBjb250cmlidXRpb240RChtdWx0aXBsaWVyLCB4c2IsIHlzYiwgenNiLCB3c2IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkeDogLXhzYiAtIG11bHRpcGxpZXIgKiBjb25zdGFudHNfMS5TUVVJU0hfNEQsXG4gICAgICAgIGR5OiAteXNiIC0gbXVsdGlwbGllciAqIGNvbnN0YW50c18xLlNRVUlTSF80RCxcbiAgICAgICAgZHo6IC16c2IgLSBtdWx0aXBsaWVyICogY29uc3RhbnRzXzEuU1FVSVNIXzRELFxuICAgICAgICBkdzogLXdzYiAtIG11bHRpcGxpZXIgKiBjb25zdGFudHNfMS5TUVVJU0hfNEQsXG4gICAgICAgIHhzYjogeHNiLFxuICAgICAgICB5c2I6IHlzYixcbiAgICAgICAgenNiOiB6c2IsXG4gICAgICAgIHdzYjogd3NiXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG1ha2VOb2lzZTJEKGNsaWVudFNlZWQpIHtcbiAgICB2YXIgY29udHJpYnV0aW9ucyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29uc3RhbnRzXzEucDJELmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgIHZhciBiYXNlU2V0ID0gY29uc3RhbnRzXzEuYmFzZTJEW2NvbnN0YW50c18xLnAyRFtpXV07XG4gICAgICAgIHZhciBwcmV2aW91cyA9IG51bGw7XG4gICAgICAgIHZhciBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBiYXNlU2V0Lmxlbmd0aDsgayArPSAzKSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gY29udHJpYnV0aW9uMkQoYmFzZVNldFtrXSwgYmFzZVNldFtrICsgMV0sIGJhc2VTZXRbayArIDJdKTtcbiAgICAgICAgICAgIGlmIChwcmV2aW91cyA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICBjb250cmlidXRpb25zW2kgLyA0XSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IGN1cnJlbnQ7XG4gICAgICAgICAgICBwcmV2aW91cyA9IGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudC5uZXh0ID0gY29udHJpYnV0aW9uMkQoY29uc3RhbnRzXzEucDJEW2kgKyAxXSwgY29uc3RhbnRzXzEucDJEW2kgKyAyXSwgY29uc3RhbnRzXzEucDJEW2kgKyAzXSk7XG4gICAgfVxuICAgIHZhciBsb29rdXAgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0YW50c18xLmxvb2t1cFBhaXJzMkQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgbG9va3VwW2NvbnN0YW50c18xLmxvb2t1cFBhaXJzMkRbaV1dID0gY29udHJpYnV0aW9uc1tjb25zdGFudHNfMS5sb29rdXBQYWlyczJEW2kgKyAxXV07XG4gICAgfVxuICAgIHZhciBwZXJtID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgICB2YXIgcGVybTJEID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgICB2YXIgc291cmNlID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKVxuICAgICAgICBzb3VyY2VbaV0gPSBpO1xuICAgIHZhciBzZWVkID0gbmV3IFVpbnQzMkFycmF5KDEpO1xuICAgIHNlZWRbMF0gPSBjbGllbnRTZWVkO1xuICAgIHNlZWQgPSBzaHVmZmxlU2VlZChzaHVmZmxlU2VlZChzaHVmZmxlU2VlZChzZWVkKSkpO1xuICAgIGZvciAodmFyIGkgPSAyNTU7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHNlZWQgPSBzaHVmZmxlU2VlZChzZWVkKTtcbiAgICAgICAgdmFyIHIgPSBuZXcgVWludDMyQXJyYXkoMSk7XG4gICAgICAgIHJbMF0gPSAoc2VlZFswXSArIDMxKSAlIChpICsgMSk7XG4gICAgICAgIGlmIChyWzBdIDwgMClcbiAgICAgICAgICAgIHJbMF0gKz0gaSArIDE7XG4gICAgICAgIHBlcm1baV0gPSBzb3VyY2VbclswXV07XG4gICAgICAgIHBlcm0yRFtpXSA9IHBlcm1baV0gJiAweDBlO1xuICAgICAgICBzb3VyY2VbclswXV0gPSBzb3VyY2VbaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICB2YXIgc3RyZXRjaE9mZnNldCA9ICh4ICsgeSkgKiBjb25zdGFudHNfMS5TVFJFVENIXzJEO1xuICAgICAgICB2YXIgeHMgPSB4ICsgc3RyZXRjaE9mZnNldDtcbiAgICAgICAgdmFyIHlzID0geSArIHN0cmV0Y2hPZmZzZXQ7XG4gICAgICAgIHZhciB4c2IgPSBNYXRoLmZsb29yKHhzKTtcbiAgICAgICAgdmFyIHlzYiA9IE1hdGguZmxvb3IoeXMpO1xuICAgICAgICB2YXIgc3F1aXNoT2Zmc2V0ID0gKHhzYiArIHlzYikgKiBjb25zdGFudHNfMS5TUVVJU0hfMkQ7XG4gICAgICAgIHZhciBkeDAgPSB4IC0gKHhzYiArIHNxdWlzaE9mZnNldCk7XG4gICAgICAgIHZhciBkeTAgPSB5IC0gKHlzYiArIHNxdWlzaE9mZnNldCk7XG4gICAgICAgIHZhciB4aW5zID0geHMgLSB4c2I7XG4gICAgICAgIHZhciB5aW5zID0geXMgLSB5c2I7XG4gICAgICAgIHZhciBpblN1bSA9IHhpbnMgKyB5aW5zO1xuICAgICAgICB2YXIgaGFzaCA9ICh4aW5zIC0geWlucyArIDEpIHxcbiAgICAgICAgICAgIChpblN1bSA8PCAxKSB8XG4gICAgICAgICAgICAoKGluU3VtICsgeWlucykgPDwgMikgfFxuICAgICAgICAgICAgKChpblN1bSArIHhpbnMpIDw8IDQpO1xuICAgICAgICB2YXIgdmFsdWUgPSAwO1xuICAgICAgICBmb3IgKHZhciBjID0gbG9va3VwW2hhc2hdOyBjICE9PSB1bmRlZmluZWQ7IGMgPSBjLm5leHQpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IGR4MCArIGMuZHg7XG4gICAgICAgICAgICB2YXIgZHkgPSBkeTAgKyBjLmR5O1xuICAgICAgICAgICAgdmFyIGF0dG4gPSAyIC0gZHggKiBkeCAtIGR5ICogZHk7XG4gICAgICAgICAgICBpZiAoYXR0biA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgcHggPSB4c2IgKyBjLnhzYjtcbiAgICAgICAgICAgICAgICB2YXIgcHkgPSB5c2IgKyBjLnlzYjtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhQYXJ0QSA9IHBlcm1bcHggJiAweGZmXTtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBwZXJtMkRbKGluZGV4UGFydEEgKyBweSkgJiAweGZmXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVQYXJ0ID0gY29uc3RhbnRzXzEuZ3JhZGllbnRzMkRbaW5kZXhdICogZHggKyBjb25zdGFudHNfMS5ncmFkaWVudHMyRFtpbmRleCArIDFdICogZHk7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gYXR0biAqIGF0dG4gKiBhdHRuICogYXR0biAqIHZhbHVlUGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWUgKiBjb25zdGFudHNfMS5OT1JNXzJEO1xuICAgIH07XG59XG5leHBvcnRzLm1ha2VOb2lzZTJEID0gbWFrZU5vaXNlMkQ7XG5mdW5jdGlvbiBtYWtlTm9pc2UzRChjbGllbnRTZWVkKSB7XG4gICAgdmFyIGNvbnRyaWJ1dGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0YW50c18xLnAzRC5sZW5ndGg7IGkgKz0gOSkge1xuICAgICAgICB2YXIgYmFzZVNldCA9IGNvbnN0YW50c18xLmJhc2UzRFtjb25zdGFudHNfMS5wM0RbaV1dO1xuICAgICAgICB2YXIgcHJldmlvdXMgPSBudWxsO1xuICAgICAgICB2YXIgY3VycmVudCA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgYmFzZVNldC5sZW5ndGg7IGsgKz0gNCkge1xuICAgICAgICAgICAgY3VycmVudCA9IGNvbnRyaWJ1dGlvbjNEKGJhc2VTZXRba10sIGJhc2VTZXRbayArIDFdLCBiYXNlU2V0W2sgKyAyXSwgYmFzZVNldFtrICsgM10pO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzID09PSBudWxsKVxuICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNbaSAvIDldID0gY3VycmVudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwcmV2aW91cy5uZXh0ID0gY3VycmVudDtcbiAgICAgICAgICAgIHByZXZpb3VzID0gY3VycmVudDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50Lm5leHQgPSBjb250cmlidXRpb24zRChjb25zdGFudHNfMS5wM0RbaSArIDFdLCBjb25zdGFudHNfMS5wM0RbaSArIDJdLCBjb25zdGFudHNfMS5wM0RbaSArIDNdLCBjb25zdGFudHNfMS5wM0RbaSArIDRdKTtcbiAgICAgICAgY3VycmVudC5uZXh0Lm5leHQgPSBjb250cmlidXRpb24zRChjb25zdGFudHNfMS5wM0RbaSArIDVdLCBjb25zdGFudHNfMS5wM0RbaSArIDZdLCBjb25zdGFudHNfMS5wM0RbaSArIDddLCBjb25zdGFudHNfMS5wM0RbaSArIDhdKTtcbiAgICB9XG4gICAgdmFyIGxvb2t1cCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29uc3RhbnRzXzEubG9va3VwUGFpcnMzRC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBsb29rdXBbY29uc3RhbnRzXzEubG9va3VwUGFpcnMzRFtpXV0gPSBjb250cmlidXRpb25zW2NvbnN0YW50c18xLmxvb2t1cFBhaXJzM0RbaSArIDFdXTtcbiAgICB9XG4gICAgdmFyIHBlcm0gPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgIHZhciBwZXJtM0QgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgIHZhciBzb3VyY2UgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspXG4gICAgICAgIHNvdXJjZVtpXSA9IGk7XG4gICAgdmFyIHNlZWQgPSBuZXcgVWludDMyQXJyYXkoMSk7XG4gICAgc2VlZFswXSA9IGNsaWVudFNlZWQ7XG4gICAgc2VlZCA9IHNodWZmbGVTZWVkKHNodWZmbGVTZWVkKHNodWZmbGVTZWVkKHNlZWQpKSk7XG4gICAgZm9yICh2YXIgaSA9IDI1NTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgc2VlZCA9IHNodWZmbGVTZWVkKHNlZWQpO1xuICAgICAgICB2YXIgciA9IG5ldyBVaW50MzJBcnJheSgxKTtcbiAgICAgICAgclswXSA9IChzZWVkWzBdICsgMzEpICUgKGkgKyAxKTtcbiAgICAgICAgaWYgKHJbMF0gPCAwKVxuICAgICAgICAgICAgclswXSArPSBpICsgMTtcbiAgICAgICAgcGVybVtpXSA9IHNvdXJjZVtyWzBdXTtcbiAgICAgICAgcGVybTNEW2ldID0gKHBlcm1baV0gJSAyNCkgKiAzO1xuICAgICAgICBzb3VyY2VbclswXV0gPSBzb3VyY2VbaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoeCwgeSwgeikge1xuICAgICAgICB2YXIgc3RyZXRjaE9mZnNldCA9ICh4ICsgeSArIHopICogY29uc3RhbnRzXzEuU1RSRVRDSF8zRDtcbiAgICAgICAgdmFyIHhzID0geCArIHN0cmV0Y2hPZmZzZXQ7XG4gICAgICAgIHZhciB5cyA9IHkgKyBzdHJldGNoT2Zmc2V0O1xuICAgICAgICB2YXIgenMgPSB6ICsgc3RyZXRjaE9mZnNldDtcbiAgICAgICAgdmFyIHhzYiA9IE1hdGguZmxvb3IoeHMpO1xuICAgICAgICB2YXIgeXNiID0gTWF0aC5mbG9vcih5cyk7XG4gICAgICAgIHZhciB6c2IgPSBNYXRoLmZsb29yKHpzKTtcbiAgICAgICAgdmFyIHNxdWlzaE9mZnNldCA9ICh4c2IgKyB5c2IgKyB6c2IpICogY29uc3RhbnRzXzEuU1FVSVNIXzNEO1xuICAgICAgICB2YXIgZHgwID0geCAtICh4c2IgKyBzcXVpc2hPZmZzZXQpO1xuICAgICAgICB2YXIgZHkwID0geSAtICh5c2IgKyBzcXVpc2hPZmZzZXQpO1xuICAgICAgICB2YXIgZHowID0geiAtICh6c2IgKyBzcXVpc2hPZmZzZXQpO1xuICAgICAgICB2YXIgeGlucyA9IHhzIC0geHNiO1xuICAgICAgICB2YXIgeWlucyA9IHlzIC0geXNiO1xuICAgICAgICB2YXIgemlucyA9IHpzIC0genNiO1xuICAgICAgICB2YXIgaW5TdW0gPSB4aW5zICsgeWlucyArIHppbnM7XG4gICAgICAgIHZhciBoYXNoID0gKHlpbnMgLSB6aW5zICsgMSkgfFxuICAgICAgICAgICAgKCh4aW5zIC0geWlucyArIDEpIDw8IDEpIHxcbiAgICAgICAgICAgICgoeGlucyAtIHppbnMgKyAxKSA8PCAyKSB8XG4gICAgICAgICAgICAoaW5TdW0gPDwgMykgfFxuICAgICAgICAgICAgKChpblN1bSArIHppbnMpIDw8IDUpIHxcbiAgICAgICAgICAgICgoaW5TdW0gKyB5aW5zKSA8PCA3KSB8XG4gICAgICAgICAgICAoKGluU3VtICsgeGlucykgPDwgOSk7XG4gICAgICAgIHZhciB2YWx1ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGMgPSBsb29rdXBbaGFzaF07IGMgIT09IHVuZGVmaW5lZDsgYyA9IGMubmV4dCkge1xuICAgICAgICAgICAgdmFyIGR4ID0gZHgwICsgYy5keDtcbiAgICAgICAgICAgIHZhciBkeSA9IGR5MCArIGMuZHk7XG4gICAgICAgICAgICB2YXIgZHogPSBkejAgKyBjLmR6O1xuICAgICAgICAgICAgdmFyIGF0dG4gPSAyIC0gZHggKiBkeCAtIGR5ICogZHkgLSBkeiAqIGR6O1xuICAgICAgICAgICAgaWYgKGF0dG4gPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHB4ID0geHNiICsgYy54c2I7XG4gICAgICAgICAgICAgICAgdmFyIHB5ID0geXNiICsgYy55c2I7XG4gICAgICAgICAgICAgICAgdmFyIHB6ID0genNiICsgYy56c2I7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4UGFydEEgPSBwZXJtW3B4ICYgMHhmZl07XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4UGFydEIgPSBwZXJtWyhpbmRleFBhcnRBICsgcHkpICYgMHhmZl07XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gcGVybTNEWyhpbmRleFBhcnRCICsgcHopICYgMHhmZl07XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlUGFydCA9IGNvbnN0YW50c18xLmdyYWRpZW50czNEW2luZGV4XSAqIGR4ICtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuZ3JhZGllbnRzM0RbaW5kZXggKyAxXSAqIGR5ICtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuZ3JhZGllbnRzM0RbaW5kZXggKyAyXSAqIGR6O1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IGF0dG4gKiBhdHRuICogYXR0biAqIGF0dG4gKiB2YWx1ZVBhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlICogY29uc3RhbnRzXzEuTk9STV8zRDtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlTm9pc2UzRCA9IG1ha2VOb2lzZTNEO1xuZnVuY3Rpb24gbWFrZU5vaXNlNEQoY2xpZW50U2VlZCkge1xuICAgIHZhciBjb250cmlidXRpb25zID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25zdGFudHNfMS5wNEQubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICAgIHZhciBiYXNlU2V0ID0gY29uc3RhbnRzXzEuYmFzZTREW2NvbnN0YW50c18xLnA0RFtpXV07XG4gICAgICAgIHZhciBwcmV2aW91cyA9IG51bGw7XG4gICAgICAgIHZhciBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBiYXNlU2V0Lmxlbmd0aDsgayArPSA1KSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gY29udHJpYnV0aW9uNEQoYmFzZVNldFtrXSwgYmFzZVNldFtrICsgMV0sIGJhc2VTZXRbayArIDJdLCBiYXNlU2V0W2sgKyAzXSwgYmFzZVNldFtrICsgNF0pO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzID09PSBudWxsKVxuICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNbaSAvIDE2XSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IGN1cnJlbnQ7XG4gICAgICAgICAgICBwcmV2aW91cyA9IGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudC5uZXh0ID0gY29udHJpYnV0aW9uNEQoY29uc3RhbnRzXzEucDREW2kgKyAxXSwgY29uc3RhbnRzXzEucDREW2kgKyAyXSwgY29uc3RhbnRzXzEucDREW2kgKyAzXSwgY29uc3RhbnRzXzEucDREW2kgKyA0XSwgY29uc3RhbnRzXzEucDREW2kgKyA1XSk7XG4gICAgICAgIGN1cnJlbnQubmV4dC5uZXh0ID0gY29udHJpYnV0aW9uNEQoY29uc3RhbnRzXzEucDREW2kgKyA2XSwgY29uc3RhbnRzXzEucDREW2kgKyA3XSwgY29uc3RhbnRzXzEucDREW2kgKyA4XSwgY29uc3RhbnRzXzEucDREW2kgKyA5XSwgY29uc3RhbnRzXzEucDREW2kgKyAxMF0pO1xuICAgICAgICBjdXJyZW50Lm5leHQubmV4dC5uZXh0ID0gY29udHJpYnV0aW9uNEQoY29uc3RhbnRzXzEucDREW2kgKyAxMV0sIGNvbnN0YW50c18xLnA0RFtpICsgMTJdLCBjb25zdGFudHNfMS5wNERbaSArIDEzXSwgY29uc3RhbnRzXzEucDREW2kgKyAxNF0sIGNvbnN0YW50c18xLnA0RFtpICsgMTVdKTtcbiAgICB9XG4gICAgdmFyIGxvb2t1cCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29uc3RhbnRzXzEubG9va3VwUGFpcnM0RC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBsb29rdXBbY29uc3RhbnRzXzEubG9va3VwUGFpcnM0RFtpXV0gPSBjb250cmlidXRpb25zW2NvbnN0YW50c18xLmxvb2t1cFBhaXJzNERbaSArIDFdXTtcbiAgICB9XG4gICAgdmFyIHBlcm0gPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgIHZhciBwZXJtNEQgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgIHZhciBzb3VyY2UgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspXG4gICAgICAgIHNvdXJjZVtpXSA9IGk7XG4gICAgdmFyIHNlZWQgPSBuZXcgVWludDMyQXJyYXkoMSk7XG4gICAgc2VlZFswXSA9IGNsaWVudFNlZWQ7XG4gICAgc2VlZCA9IHNodWZmbGVTZWVkKHNodWZmbGVTZWVkKHNodWZmbGVTZWVkKHNlZWQpKSk7XG4gICAgZm9yICh2YXIgaSA9IDI1NTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgc2VlZCA9IHNodWZmbGVTZWVkKHNlZWQpO1xuICAgICAgICB2YXIgciA9IG5ldyBVaW50MzJBcnJheSgxKTtcbiAgICAgICAgclswXSA9IChzZWVkWzBdICsgMzEpICUgKGkgKyAxKTtcbiAgICAgICAgaWYgKHJbMF0gPCAwKVxuICAgICAgICAgICAgclswXSArPSBpICsgMTtcbiAgICAgICAgcGVybVtpXSA9IHNvdXJjZVtyWzBdXTtcbiAgICAgICAgcGVybTREW2ldID0gcGVybVtpXSAmIDB4ZmM7XG4gICAgICAgIHNvdXJjZVtyWzBdXSA9IHNvdXJjZVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5LCB6LCB3KSB7XG4gICAgICAgIHZhciBzdHJldGNoT2Zmc2V0ID0gKHggKyB5ICsgeiArIHcpICogY29uc3RhbnRzXzEuU1RSRVRDSF80RDtcbiAgICAgICAgdmFyIHhzID0geCArIHN0cmV0Y2hPZmZzZXQ7XG4gICAgICAgIHZhciB5cyA9IHkgKyBzdHJldGNoT2Zmc2V0O1xuICAgICAgICB2YXIgenMgPSB6ICsgc3RyZXRjaE9mZnNldDtcbiAgICAgICAgdmFyIHdzID0gdyArIHN0cmV0Y2hPZmZzZXQ7XG4gICAgICAgIHZhciB4c2IgPSBNYXRoLmZsb29yKHhzKTtcbiAgICAgICAgdmFyIHlzYiA9IE1hdGguZmxvb3IoeXMpO1xuICAgICAgICB2YXIgenNiID0gTWF0aC5mbG9vcih6cyk7XG4gICAgICAgIHZhciB3c2IgPSBNYXRoLmZsb29yKHdzKTtcbiAgICAgICAgdmFyIHNxdWlzaE9mZnNldCA9ICh4c2IgKyB5c2IgKyB6c2IgKyB3c2IpICogY29uc3RhbnRzXzEuU1FVSVNIXzREO1xuICAgICAgICB2YXIgZHgwID0geCAtICh4c2IgKyBzcXVpc2hPZmZzZXQpO1xuICAgICAgICB2YXIgZHkwID0geSAtICh5c2IgKyBzcXVpc2hPZmZzZXQpO1xuICAgICAgICB2YXIgZHowID0geiAtICh6c2IgKyBzcXVpc2hPZmZzZXQpO1xuICAgICAgICB2YXIgZHcwID0gdyAtICh3c2IgKyBzcXVpc2hPZmZzZXQpO1xuICAgICAgICB2YXIgeGlucyA9IHhzIC0geHNiO1xuICAgICAgICB2YXIgeWlucyA9IHlzIC0geXNiO1xuICAgICAgICB2YXIgemlucyA9IHpzIC0genNiO1xuICAgICAgICB2YXIgd2lucyA9IHdzIC0gd3NiO1xuICAgICAgICB2YXIgaW5TdW0gPSB4aW5zICsgeWlucyArIHppbnMgKyB3aW5zO1xuICAgICAgICB2YXIgaGFzaCA9ICh6aW5zIC0gd2lucyArIDEpIHxcbiAgICAgICAgICAgICgoeWlucyAtIHppbnMgKyAxKSA8PCAxKSB8XG4gICAgICAgICAgICAoKHlpbnMgLSB3aW5zICsgMSkgPDwgMikgfFxuICAgICAgICAgICAgKCh4aW5zIC0geWlucyArIDEpIDw8IDMpIHxcbiAgICAgICAgICAgICgoeGlucyAtIHppbnMgKyAxKSA8PCA0KSB8XG4gICAgICAgICAgICAoKHhpbnMgLSB3aW5zICsgMSkgPDwgNSkgfFxuICAgICAgICAgICAgKGluU3VtIDw8IDYpIHxcbiAgICAgICAgICAgICgoaW5TdW0gKyB3aW5zKSA8PCA4KSB8XG4gICAgICAgICAgICAoKGluU3VtICsgemlucykgPDwgMTEpIHxcbiAgICAgICAgICAgICgoaW5TdW0gKyB5aW5zKSA8PCAxNCkgfFxuICAgICAgICAgICAgKChpblN1bSArIHhpbnMpIDw8IDE3KTtcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcbiAgICAgICAgZm9yICh2YXIgYyA9IGxvb2t1cFtoYXNoXTsgYyAhPT0gdW5kZWZpbmVkOyBjID0gYy5uZXh0KSB7XG4gICAgICAgICAgICB2YXIgZHggPSBkeDAgKyBjLmR4O1xuICAgICAgICAgICAgdmFyIGR5ID0gZHkwICsgYy5keTtcbiAgICAgICAgICAgIHZhciBkeiA9IGR6MCArIGMuZHo7XG4gICAgICAgICAgICB2YXIgZHcgPSBkdzAgKyBjLmR3O1xuICAgICAgICAgICAgdmFyIGF0dG4gPSAyIC0gZHggKiBkeCAtIGR5ICogZHkgLSBkeiAqIGR6IC0gZHcgKiBkdztcbiAgICAgICAgICAgIGlmIChhdHRuID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBweCA9IHhzYiArIGMueHNiO1xuICAgICAgICAgICAgICAgIHZhciBweSA9IHlzYiArIGMueXNiO1xuICAgICAgICAgICAgICAgIHZhciBweiA9IHpzYiArIGMuenNiO1xuICAgICAgICAgICAgICAgIHZhciBwdyA9IHdzYiArIGMud3NiO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleFBhcnRBID0gcGVybVtweCAmIDB4ZmZdO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleFBhcnRCID0gcGVybVsoaW5kZXhQYXJ0QSArIHB5KSAmIDB4ZmZdO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleFBhcnRDID0gcGVybVsoaW5kZXhQYXJ0QiArIHB6KSAmIDB4ZmZdO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHBlcm00RFsoaW5kZXhQYXJ0QyArIHB3KSAmIDB4ZmZdO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZVBhcnQgPSBjb25zdGFudHNfMS5ncmFkaWVudHM0RFtpbmRleF0gKiBkeCArXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLmdyYWRpZW50czREW2luZGV4ICsgMV0gKiBkeSArXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLmdyYWRpZW50czREW2luZGV4ICsgMl0gKiBkeiArXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLmdyYWRpZW50czREW2luZGV4ICsgM10gKiBkdztcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSBhdHRuICogYXR0biAqIGF0dG4gKiBhdHRuICogdmFsdWVQYXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZSAqIGNvbnN0YW50c18xLk5PUk1fNEQ7XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZU5vaXNlNEQgPSBtYWtlTm9pc2U0RDtcbmZ1bmN0aW9uIHNodWZmbGVTZWVkKHNlZWQpIHtcbiAgICB2YXIgbmV3U2VlZCA9IG5ldyBVaW50MzJBcnJheSgxKTtcbiAgICBuZXdTZWVkWzBdID0gc2VlZFswXSAqIDE2NjQ1MjUgKyAxMDEzOTA0MjIzO1xuICAgIHJldHVybiBuZXdTZWVkO1xufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHByZWZpeCA9ICd+JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBzdG9yYWdlIGZvciBvdXIgYEVFYCBvYmplY3RzLlxuICogQW4gYEV2ZW50c2AgaW5zdGFuY2UgaXMgYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFdmVudHMoKSB7fVxuXG4vL1xuLy8gV2UgdHJ5IHRvIG5vdCBpbmhlcml0IGZyb20gYE9iamVjdC5wcm90b3R5cGVgLiBJbiBzb21lIGVuZ2luZXMgY3JlYXRpbmcgYW5cbi8vIGluc3RhbmNlIGluIHRoaXMgd2F5IGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIGRpcmVjdGx5LlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGNoYXJhY3RlciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdFxuLy8gb3ZlcnJpZGRlbiBvciB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vL1xuaWYgKE9iamVjdC5jcmVhdGUpIHtcbiAgRXZlbnRzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy9cbiAgLy8gVGhpcyBoYWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBgX19wcm90b19fYCBwcm9wZXJ0eSBpcyBzdGlsbCBpbmhlcml0ZWQgaW5cbiAgLy8gc29tZSBvbGQgYnJvd3NlcnMgbGlrZSBBbmRyb2lkIDQsIGlQaG9uZSA1LjEsIE9wZXJhIDExIGFuZCBTYWZhcmkgNS5cbiAgLy9cbiAgaWYgKCFuZXcgRXZlbnRzKCkuX19wcm90b19fKSBwcmVmaXggPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBbb25jZT1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgZW1pdHRlciwgb25jZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XSkgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgZW1pdHRlci5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdLmZuKSBlbWl0dGVyLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IFtlbWl0dGVyLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiBlbWl0dGVyO1xufVxuXG4vKipcbiAqIENsZWFyIGV2ZW50IGJ5IG5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldnQgVGhlIEV2ZW50IG5hbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjbGVhckV2ZW50KGVtaXR0ZXIsIGV2dCkge1xuICBpZiAoLS1lbWl0dGVyLl9ldmVudHNDb3VudCA9PT0gMCkgZW1pdHRlci5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICBlbHNlIGRlbGV0ZSBlbWl0dGVyLl9ldmVudHNbZXZ0XTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZSB0aGF0IGlzIG1vbGRlZCBhZ2FpbnN0IHRoZSBOb2RlLmpzXG4gKiBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHZhciBuYW1lcyA9IFtdXG4gICAgLCBldmVudHNcbiAgICAsIG5hbWU7XG5cbiAgaWYgKHRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSByZXR1cm4gbmFtZXM7XG5cbiAgZm9yIChuYW1lIGluIChldmVudHMgPSB0aGlzLl9ldmVudHMpKSB7XG4gICAgaWYgKGhhcy5jYWxsKGV2ZW50cywgbmFtZSkpIG5hbWVzLnB1c2gocHJlZml4ID8gbmFtZS5zbGljZSgxKSA6IG5hbWUpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICByZXR1cm4gbmFtZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZXZlbnRzKSk7XG4gIH1cblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBoYW5kbGVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghaGFuZGxlcnMpIHJldHVybiBbXTtcbiAgaWYgKGhhbmRsZXJzLmZuKSByZXR1cm4gW2hhbmRsZXJzLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGhhbmRsZXJzW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIG51bWJlciBvZiBsaXN0ZW5lcnMgbGlzdGVuaW5nIHRvIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWJlciBvZiBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIGxpc3RlbmVyQ291bnQoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghbGlzdGVuZXJzKSByZXR1cm4gMDtcbiAgaWYgKGxpc3RlbmVycy5mbikgcmV0dXJuIDE7XG4gIHJldHVybiBsaXN0ZW5lcnMubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBDYWxscyBlYWNoIG9mIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBldmVudCBoYWQgbGlzdGVuZXJzLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMiwgYTMpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIEFkZCBhIG9uZS10aW1lIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCB0cnVlKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhpcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgaGF2ZSB0aGlzIGNvbnRleHQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25lLXRpbWUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuICBpZiAoIWZuKSB7XG4gICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAoXG4gICAgICBsaXN0ZW5lcnMuZm4gPT09IGZuICYmXG4gICAgICAoIW9uY2UgfHwgbGlzdGVuZXJzLm9uY2UpICYmXG4gICAgICAoIWNvbnRleHQgfHwgbGlzdGVuZXJzLmNvbnRleHQgPT09IGNvbnRleHQpXG4gICAgKSB7XG4gICAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBldmVudHMgPSBbXSwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGxpc3RlbmVyc1tpXS5mbiAhPT0gZm4gfHxcbiAgICAgICAgKG9uY2UgJiYgIWxpc3RlbmVyc1tpXS5vbmNlKSB8fFxuICAgICAgICAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICkge1xuICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gUmVzZXQgdGhlIGFycmF5LCBvciByZW1vdmUgaXQgY29tcGxldGVseSBpZiB3ZSBoYXZlIG5vIG1vcmUgbGlzdGVuZXJzLlxuICAgIC8vXG4gICAgaWYgKGV2ZW50cy5sZW5ndGgpIHRoaXMuX2V2ZW50c1tldnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcbiAgICBlbHNlIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIGxpc3RlbmVycywgb3IgdGhvc2Ugb2YgdGhlIHNwZWNpZmllZCBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gW2V2ZW50XSBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dDtcblxuICBpZiAoZXZlbnQpIHtcbiAgICBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuICAgIGlmICh0aGlzLl9ldmVudHNbZXZ0XSkgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gQWxsb3cgYEV2ZW50RW1pdHRlcmAgdG8gYmUgaW1wb3J0ZWQgYXMgbW9kdWxlIG5hbWVzcGFjZS5cbi8vXG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVhcmN1dDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBlYXJjdXQ7XG5cbmZ1bmN0aW9uIGVhcmN1dChkYXRhLCBob2xlSW5kaWNlcywgZGltKSB7XG5cbiAgICBkaW0gPSBkaW0gfHwgMjtcblxuICAgIHZhciBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aCxcbiAgICAgICAgb3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWzBdICogZGltIDogZGF0YS5sZW5ndGgsXG4gICAgICAgIG91dGVyTm9kZSA9IGxpbmtlZExpc3QoZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSwgdHJ1ZSksXG4gICAgICAgIHRyaWFuZ2xlcyA9IFtdO1xuXG4gICAgaWYgKCFvdXRlck5vZGUgfHwgb3V0ZXJOb2RlLm5leHQgPT09IG91dGVyTm9kZS5wcmV2KSByZXR1cm4gdHJpYW5nbGVzO1xuXG4gICAgdmFyIG1pblgsIG1pblksIG1heFgsIG1heFksIHgsIHksIGludlNpemU7XG5cbiAgICBpZiAoaGFzSG9sZXMpIG91dGVyTm9kZSA9IGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSk7XG5cbiAgICAvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcbiAgICBpZiAoZGF0YS5sZW5ndGggPiA4MCAqIGRpbSkge1xuICAgICAgICBtaW5YID0gbWF4WCA9IGRhdGFbMF07XG4gICAgICAgIG1pblkgPSBtYXhZID0gZGF0YVsxXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gZGltOyBpIDwgb3V0ZXJMZW47IGkgKz0gZGltKSB7XG4gICAgICAgICAgICB4ID0gZGF0YVtpXTtcbiAgICAgICAgICAgIHkgPSBkYXRhW2kgKyAxXTtcbiAgICAgICAgICAgIGlmICh4IDwgbWluWCkgbWluWCA9IHg7XG4gICAgICAgICAgICBpZiAoeSA8IG1pblkpIG1pblkgPSB5O1xuICAgICAgICAgICAgaWYgKHggPiBtYXhYKSBtYXhYID0geDtcbiAgICAgICAgICAgIGlmICh5ID4gbWF4WSkgbWF4WSA9IHk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtaW5YLCBtaW5ZIGFuZCBpbnZTaXplIGFyZSBsYXRlciB1c2VkIHRvIHRyYW5zZm9ybSBjb29yZHMgaW50byBpbnRlZ2VycyBmb3Igei1vcmRlciBjYWxjdWxhdGlvblxuICAgICAgICBpbnZTaXplID0gTWF0aC5tYXgobWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZKTtcbiAgICAgICAgaW52U2l6ZSA9IGludlNpemUgIT09IDAgPyAxIC8gaW52U2l6ZSA6IDA7XG4gICAgfVxuXG4gICAgZWFyY3V0TGlua2VkKG91dGVyTm9kZSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUpO1xuXG4gICAgcmV0dXJuIHRyaWFuZ2xlcztcbn1cblxuLy8gY3JlYXRlIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0IGZyb20gcG9seWdvbiBwb2ludHMgaW4gdGhlIHNwZWNpZmllZCB3aW5kaW5nIG9yZGVyXG5mdW5jdGlvbiBsaW5rZWRMaXN0KGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSwgY2xvY2t3aXNlKSB7XG4gICAgdmFyIGksIGxhc3Q7XG5cbiAgICBpZiAoY2xvY2t3aXNlID09PSAoc2lnbmVkQXJlYShkYXRhLCBzdGFydCwgZW5kLCBkaW0pID4gMCkpIHtcbiAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gZGltKSBsYXN0ID0gaW5zZXJ0Tm9kZShpLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgbGFzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSkgbGFzdCA9IGluc2VydE5vZGUoaSwgZGF0YVtpXSwgZGF0YVtpICsgMV0sIGxhc3QpO1xuICAgIH1cblxuICAgIGlmIChsYXN0ICYmIGVxdWFscyhsYXN0LCBsYXN0Lm5leHQpKSB7XG4gICAgICAgIHJlbW92ZU5vZGUobGFzdCk7XG4gICAgICAgIGxhc3QgPSBsYXN0Lm5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhc3Q7XG59XG5cbi8vIGVsaW1pbmF0ZSBjb2xpbmVhciBvciBkdXBsaWNhdGUgcG9pbnRzXG5mdW5jdGlvbiBmaWx0ZXJQb2ludHMoc3RhcnQsIGVuZCkge1xuICAgIGlmICghc3RhcnQpIHJldHVybiBzdGFydDtcbiAgICBpZiAoIWVuZCkgZW5kID0gc3RhcnQ7XG5cbiAgICB2YXIgcCA9IHN0YXJ0LFxuICAgICAgICBhZ2FpbjtcbiAgICBkbyB7XG4gICAgICAgIGFnYWluID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCFwLnN0ZWluZXIgJiYgKGVxdWFscyhwLCBwLm5leHQpIHx8IGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID09PSAwKSkge1xuICAgICAgICAgICAgcmVtb3ZlTm9kZShwKTtcbiAgICAgICAgICAgIHAgPSBlbmQgPSBwLnByZXY7XG4gICAgICAgICAgICBpZiAocCA9PT0gcC5uZXh0KSBicmVhaztcbiAgICAgICAgICAgIGFnYWluID0gdHJ1ZTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcCA9IHAubmV4dDtcbiAgICAgICAgfVxuICAgIH0gd2hpbGUgKGFnYWluIHx8IHAgIT09IGVuZCk7XG5cbiAgICByZXR1cm4gZW5kO1xufVxuXG4vLyBtYWluIGVhciBzbGljaW5nIGxvb3Agd2hpY2ggdHJpYW5ndWxhdGVzIGEgcG9seWdvbiAoZ2l2ZW4gYXMgYSBsaW5rZWQgbGlzdClcbmZ1bmN0aW9uIGVhcmN1dExpbmtlZChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCBwYXNzKSB7XG4gICAgaWYgKCFlYXIpIHJldHVybjtcblxuICAgIC8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXJcbiAgICBpZiAoIXBhc3MgJiYgaW52U2l6ZSkgaW5kZXhDdXJ2ZShlYXIsIG1pblgsIG1pblksIGludlNpemUpO1xuXG4gICAgdmFyIHN0b3AgPSBlYXIsXG4gICAgICAgIHByZXYsIG5leHQ7XG5cbiAgICAvLyBpdGVyYXRlIHRocm91Z2ggZWFycywgc2xpY2luZyB0aGVtIG9uZSBieSBvbmVcbiAgICB3aGlsZSAoZWFyLnByZXYgIT09IGVhci5uZXh0KSB7XG4gICAgICAgIHByZXYgPSBlYXIucHJldjtcbiAgICAgICAgbmV4dCA9IGVhci5uZXh0O1xuXG4gICAgICAgIGlmIChpbnZTaXplID8gaXNFYXJIYXNoZWQoZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSA6IGlzRWFyKGVhcikpIHtcbiAgICAgICAgICAgIC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChwcmV2LmkgLyBkaW0pO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goZWFyLmkgLyBkaW0pO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gobmV4dC5pIC8gZGltKTtcblxuICAgICAgICAgICAgcmVtb3ZlTm9kZShlYXIpO1xuXG4gICAgICAgICAgICAvLyBza2lwcGluZyB0aGUgbmV4dCB2ZXJ0ZXggbGVhZHMgdG8gbGVzcyBzbGl2ZXIgdHJpYW5nbGVzXG4gICAgICAgICAgICBlYXIgPSBuZXh0Lm5leHQ7XG4gICAgICAgICAgICBzdG9wID0gbmV4dC5uZXh0O1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVhciA9IG5leHQ7XG5cbiAgICAgICAgLy8gaWYgd2UgbG9vcGVkIHRocm91Z2ggdGhlIHdob2xlIHJlbWFpbmluZyBwb2x5Z29uIGFuZCBjYW4ndCBmaW5kIGFueSBtb3JlIGVhcnNcbiAgICAgICAgaWYgKGVhciA9PT0gc3RvcCkge1xuICAgICAgICAgICAgLy8gdHJ5IGZpbHRlcmluZyBwb2ludHMgYW5kIHNsaWNpbmcgYWdhaW5cbiAgICAgICAgICAgIGlmICghcGFzcykge1xuICAgICAgICAgICAgICAgIGVhcmN1dExpbmtlZChmaWx0ZXJQb2ludHMoZWFyKSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDEpO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGlzIGRpZG4ndCB3b3JrLCB0cnkgY3VyaW5nIGFsbCBzbWFsbCBzZWxmLWludGVyc2VjdGlvbnMgbG9jYWxseVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXNzID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZWFyID0gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyhmaWx0ZXJQb2ludHMoZWFyKSwgdHJpYW5nbGVzLCBkaW0pO1xuICAgICAgICAgICAgICAgIGVhcmN1dExpbmtlZChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAyKTtcblxuICAgICAgICAgICAgLy8gYXMgYSBsYXN0IHJlc29ydCwgdHJ5IHNwbGl0dGluZyB0aGUgcmVtYWluaW5nIHBvbHlnb24gaW50byB0d29cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFzcyA9PT0gMikge1xuICAgICAgICAgICAgICAgIHNwbGl0RWFyY3V0KGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gY2hlY2sgd2hldGhlciBhIHBvbHlnb24gbm9kZSBmb3JtcyBhIHZhbGlkIGVhciB3aXRoIGFkamFjZW50IG5vZGVzXG5mdW5jdGlvbiBpc0VhcihlYXIpIHtcbiAgICB2YXIgYSA9IGVhci5wcmV2LFxuICAgICAgICBiID0gZWFyLFxuICAgICAgICBjID0gZWFyLm5leHQ7XG5cbiAgICBpZiAoYXJlYShhLCBiLCBjKSA+PSAwKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cbiAgICAvLyBub3cgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgb3RoZXIgcG9pbnRzIGluc2lkZSB0aGUgcG90ZW50aWFsIGVhclxuICAgIHZhciBwID0gZWFyLm5leHQubmV4dDtcblxuICAgIHdoaWxlIChwICE9PSBlYXIucHJldikge1xuICAgICAgICBpZiAocG9pbnRJblRyaWFuZ2xlKGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIHAueCwgcC55KSAmJlxuICAgICAgICAgICAgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc0Vhckhhc2hlZChlYXIsIG1pblgsIG1pblksIGludlNpemUpIHtcbiAgICB2YXIgYSA9IGVhci5wcmV2LFxuICAgICAgICBiID0gZWFyLFxuICAgICAgICBjID0gZWFyLm5leHQ7XG5cbiAgICBpZiAoYXJlYShhLCBiLCBjKSA+PSAwKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cbiAgICAvLyB0cmlhbmdsZSBiYm94OyBtaW4gJiBtYXggYXJlIGNhbGN1bGF0ZWQgbGlrZSB0aGlzIGZvciBzcGVlZFxuICAgIHZhciBtaW5UWCA9IGEueCA8IGIueCA/IChhLnggPCBjLnggPyBhLnggOiBjLngpIDogKGIueCA8IGMueCA/IGIueCA6IGMueCksXG4gICAgICAgIG1pblRZID0gYS55IDwgYi55ID8gKGEueSA8IGMueSA/IGEueSA6IGMueSkgOiAoYi55IDwgYy55ID8gYi55IDogYy55KSxcbiAgICAgICAgbWF4VFggPSBhLnggPiBiLnggPyAoYS54ID4gYy54ID8gYS54IDogYy54KSA6IChiLnggPiBjLnggPyBiLnggOiBjLngpLFxuICAgICAgICBtYXhUWSA9IGEueSA+IGIueSA/IChhLnkgPiBjLnkgPyBhLnkgOiBjLnkpIDogKGIueSA+IGMueSA/IGIueSA6IGMueSk7XG5cbiAgICAvLyB6LW9yZGVyIHJhbmdlIGZvciB0aGUgY3VycmVudCB0cmlhbmdsZSBiYm94O1xuICAgIHZhciBtaW5aID0gek9yZGVyKG1pblRYLCBtaW5UWSwgbWluWCwgbWluWSwgaW52U2l6ZSksXG4gICAgICAgIG1heFogPSB6T3JkZXIobWF4VFgsIG1heFRZLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcblxuICAgIHZhciBwID0gZWFyLnByZXZaLFxuICAgICAgICBuID0gZWFyLm5leHRaO1xuXG4gICAgLy8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgaW4gYm90aCBkaXJlY3Rpb25zXG4gICAgd2hpbGUgKHAgJiYgcC56ID49IG1pblogJiYgbiAmJiBuLnogPD0gbWF4Wikge1xuICAgICAgICBpZiAocCAhPT0gZWFyLnByZXYgJiYgcCAhPT0gZWFyLm5leHQgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSkgJiZcbiAgICAgICAgICAgIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcCA9IHAucHJldlo7XG5cbiAgICAgICAgaWYgKG4gIT09IGVhci5wcmV2ICYmIG4gIT09IGVhci5uZXh0ICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgbi54LCBuLnkpICYmXG4gICAgICAgICAgICBhcmVhKG4ucHJldiwgbiwgbi5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIG4gPSBuLm5leHRaO1xuICAgIH1cblxuICAgIC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gZGVjcmVhc2luZyB6LW9yZGVyXG4gICAgd2hpbGUgKHAgJiYgcC56ID49IG1pblopIHtcbiAgICAgICAgaWYgKHAgIT09IGVhci5wcmV2ICYmIHAgIT09IGVhci5uZXh0ICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkpICYmXG4gICAgICAgICAgICBhcmVhKHAucHJldiwgcCwgcC5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHAgPSBwLnByZXZaO1xuICAgIH1cblxuICAgIC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gaW5jcmVhc2luZyB6LW9yZGVyXG4gICAgd2hpbGUgKG4gJiYgbi56IDw9IG1heFopIHtcbiAgICAgICAgaWYgKG4gIT09IGVhci5wcmV2ICYmIG4gIT09IGVhci5uZXh0ICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgbi54LCBuLnkpICYmXG4gICAgICAgICAgICBhcmVhKG4ucHJldiwgbiwgbi5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIG4gPSBuLm5leHRaO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9uc1xuZnVuY3Rpb24gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyhzdGFydCwgdHJpYW5nbGVzLCBkaW0pIHtcbiAgICB2YXIgcCA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgdmFyIGEgPSBwLnByZXYsXG4gICAgICAgICAgICBiID0gcC5uZXh0Lm5leHQ7XG5cbiAgICAgICAgaWYgKCFlcXVhbHMoYSwgYikgJiYgaW50ZXJzZWN0cyhhLCBwLCBwLm5leHQsIGIpICYmIGxvY2FsbHlJbnNpZGUoYSwgYikgJiYgbG9jYWxseUluc2lkZShiLCBhKSkge1xuXG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChhLmkgLyBkaW0pO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gocC5pIC8gZGltKTtcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGIuaSAvIGRpbSk7XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSB0d28gbm9kZXMgaW52b2x2ZWRcbiAgICAgICAgICAgIHJlbW92ZU5vZGUocCk7XG4gICAgICAgICAgICByZW1vdmVOb2RlKHAubmV4dCk7XG5cbiAgICAgICAgICAgIHAgPSBzdGFydCA9IGI7XG4gICAgICAgIH1cbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdGFydCk7XG5cbiAgICByZXR1cm4gZmlsdGVyUG9pbnRzKHApO1xufVxuXG4vLyB0cnkgc3BsaXR0aW5nIHBvbHlnb24gaW50byB0d28gYW5kIHRyaWFuZ3VsYXRlIHRoZW0gaW5kZXBlbmRlbnRseVxuZnVuY3Rpb24gc3BsaXRFYXJjdXQoc3RhcnQsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XG4gICAgLy8gbG9vayBmb3IgYSB2YWxpZCBkaWFnb25hbCB0aGF0IGRpdmlkZXMgdGhlIHBvbHlnb24gaW50byB0d29cbiAgICB2YXIgYSA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgdmFyIGIgPSBhLm5leHQubmV4dDtcbiAgICAgICAgd2hpbGUgKGIgIT09IGEucHJldikge1xuICAgICAgICAgICAgaWYgKGEuaSAhPT0gYi5pICYmIGlzVmFsaWREaWFnb25hbChhLCBiKSkge1xuICAgICAgICAgICAgICAgIC8vIHNwbGl0IHRoZSBwb2x5Z29uIGluIHR3byBieSB0aGUgZGlhZ29uYWxcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHNwbGl0UG9seWdvbihhLCBiKTtcblxuICAgICAgICAgICAgICAgIC8vIGZpbHRlciBjb2xpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG4gICAgICAgICAgICAgICAgYSA9IGZpbHRlclBvaW50cyhhLCBhLm5leHQpO1xuICAgICAgICAgICAgICAgIGMgPSBmaWx0ZXJQb2ludHMoYywgYy5uZXh0KTtcblxuICAgICAgICAgICAgICAgIC8vIHJ1biBlYXJjdXQgb24gZWFjaCBoYWxmXG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGEsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoYywgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGIgPSBiLm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgYSA9IGEubmV4dDtcbiAgICB9IHdoaWxlIChhICE9PSBzdGFydCk7XG59XG5cbi8vIGxpbmsgZXZlcnkgaG9sZSBpbnRvIHRoZSBvdXRlciBsb29wLCBwcm9kdWNpbmcgYSBzaW5nbGUtcmluZyBwb2x5Z29uIHdpdGhvdXQgaG9sZXNcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSkge1xuICAgIHZhciBxdWV1ZSA9IFtdLFxuICAgICAgICBpLCBsZW4sIHN0YXJ0LCBlbmQsIGxpc3Q7XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBob2xlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdGFydCA9IGhvbGVJbmRpY2VzW2ldICogZGltO1xuICAgICAgICBlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzW2kgKyAxXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICBsaXN0ID0gbGlua2VkTGlzdChkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGZhbHNlKTtcbiAgICAgICAgaWYgKGxpc3QgPT09IGxpc3QubmV4dCkgbGlzdC5zdGVpbmVyID0gdHJ1ZTtcbiAgICAgICAgcXVldWUucHVzaChnZXRMZWZ0bW9zdChsaXN0KSk7XG4gICAgfVxuXG4gICAgcXVldWUuc29ydChjb21wYXJlWCk7XG5cbiAgICAvLyBwcm9jZXNzIGhvbGVzIGZyb20gbGVmdCB0byByaWdodFxuICAgIGZvciAoaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGltaW5hdGVIb2xlKHF1ZXVlW2ldLCBvdXRlck5vZGUpO1xuICAgICAgICBvdXRlck5vZGUgPSBmaWx0ZXJQb2ludHMob3V0ZXJOb2RlLCBvdXRlck5vZGUubmV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dGVyTm9kZTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZVgoYSwgYikge1xuICAgIHJldHVybiBhLnggLSBiLng7XG59XG5cbi8vIGZpbmQgYSBicmlkZ2UgYmV0d2VlbiB2ZXJ0aWNlcyB0aGF0IGNvbm5lY3RzIGhvbGUgd2l0aCBhbiBvdXRlciByaW5nIGFuZCBhbmQgbGluayBpdFxuZnVuY3Rpb24gZWxpbWluYXRlSG9sZShob2xlLCBvdXRlck5vZGUpIHtcbiAgICBvdXRlck5vZGUgPSBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpO1xuICAgIGlmIChvdXRlck5vZGUpIHtcbiAgICAgICAgdmFyIGIgPSBzcGxpdFBvbHlnb24ob3V0ZXJOb2RlLCBob2xlKTtcbiAgICAgICAgZmlsdGVyUG9pbnRzKGIsIGIubmV4dCk7XG4gICAgfVxufVxuXG4vLyBEYXZpZCBFYmVybHkncyBhbGdvcml0aG0gZm9yIGZpbmRpbmcgYSBicmlkZ2UgYmV0d2VlbiBob2xlIGFuZCBvdXRlciBwb2x5Z29uXG5mdW5jdGlvbiBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpIHtcbiAgICB2YXIgcCA9IG91dGVyTm9kZSxcbiAgICAgICAgaHggPSBob2xlLngsXG4gICAgICAgIGh5ID0gaG9sZS55LFxuICAgICAgICBxeCA9IC1JbmZpbml0eSxcbiAgICAgICAgbTtcblxuICAgIC8vIGZpbmQgYSBzZWdtZW50IGludGVyc2VjdGVkIGJ5IGEgcmF5IGZyb20gdGhlIGhvbGUncyBsZWZ0bW9zdCBwb2ludCB0byB0aGUgbGVmdDtcbiAgICAvLyBzZWdtZW50J3MgZW5kcG9pbnQgd2l0aCBsZXNzZXIgeCB3aWxsIGJlIHBvdGVudGlhbCBjb25uZWN0aW9uIHBvaW50XG4gICAgZG8ge1xuICAgICAgICBpZiAoaHkgPD0gcC55ICYmIGh5ID49IHAubmV4dC55ICYmIHAubmV4dC55ICE9PSBwLnkpIHtcbiAgICAgICAgICAgIHZhciB4ID0gcC54ICsgKGh5IC0gcC55KSAqIChwLm5leHQueCAtIHAueCkgLyAocC5uZXh0LnkgLSBwLnkpO1xuICAgICAgICAgICAgaWYgKHggPD0gaHggJiYgeCA+IHF4KSB7XG4gICAgICAgICAgICAgICAgcXggPSB4O1xuICAgICAgICAgICAgICAgIGlmICh4ID09PSBoeCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaHkgPT09IHAueSkgcmV0dXJuIHA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoeSA9PT0gcC5uZXh0LnkpIHJldHVybiBwLm5leHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG0gPSBwLnggPCBwLm5leHQueCA/IHAgOiBwLm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBvdXRlck5vZGUpO1xuXG4gICAgaWYgKCFtKSByZXR1cm4gbnVsbDtcblxuICAgIGlmIChoeCA9PT0gcXgpIHJldHVybiBtOyAvLyBob2xlIHRvdWNoZXMgb3V0ZXIgc2VnbWVudDsgcGljayBsZWZ0bW9zdCBlbmRwb2ludFxuXG4gICAgLy8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgb2YgaG9sZSBwb2ludCwgc2VnbWVudCBpbnRlcnNlY3Rpb24gYW5kIGVuZHBvaW50O1xuICAgIC8vIGlmIHRoZXJlIGFyZSBubyBwb2ludHMgZm91bmQsIHdlIGhhdmUgYSB2YWxpZCBjb25uZWN0aW9uO1xuICAgIC8vIG90aGVyd2lzZSBjaG9vc2UgdGhlIHBvaW50IG9mIHRoZSBtaW5pbXVtIGFuZ2xlIHdpdGggdGhlIHJheSBhcyBjb25uZWN0aW9uIHBvaW50XG5cbiAgICB2YXIgc3RvcCA9IG0sXG4gICAgICAgIG14ID0gbS54LFxuICAgICAgICBteSA9IG0ueSxcbiAgICAgICAgdGFuTWluID0gSW5maW5pdHksXG4gICAgICAgIHRhbjtcblxuICAgIHAgPSBtO1xuXG4gICAgZG8ge1xuICAgICAgICBpZiAoaHggPj0gcC54ICYmIHAueCA+PSBteCAmJiBoeCAhPT0gcC54ICYmXG4gICAgICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55KSkge1xuXG4gICAgICAgICAgICB0YW4gPSBNYXRoLmFicyhoeSAtIHAueSkgLyAoaHggLSBwLngpOyAvLyB0YW5nZW50aWFsXG5cbiAgICAgICAgICAgIGlmIChsb2NhbGx5SW5zaWRlKHAsIGhvbGUpICYmXG4gICAgICAgICAgICAgICAgKHRhbiA8IHRhbk1pbiB8fCAodGFuID09PSB0YW5NaW4gJiYgKHAueCA+IG0ueCB8fCAocC54ID09PSBtLnggJiYgc2VjdG9yQ29udGFpbnNTZWN0b3IobSwgcCkpKSkpKSB7XG4gICAgICAgICAgICAgICAgbSA9IHA7XG4gICAgICAgICAgICAgICAgdGFuTWluID0gdGFuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdG9wKTtcblxuICAgIHJldHVybiBtO1xufVxuXG4vLyB3aGV0aGVyIHNlY3RvciBpbiB2ZXJ0ZXggbSBjb250YWlucyBzZWN0b3IgaW4gdmVydGV4IHAgaW4gdGhlIHNhbWUgY29vcmRpbmF0ZXNcbmZ1bmN0aW9uIHNlY3RvckNvbnRhaW5zU2VjdG9yKG0sIHApIHtcbiAgICByZXR1cm4gYXJlYShtLnByZXYsIG0sIHAucHJldikgPCAwICYmIGFyZWEocC5uZXh0LCBtLCBtLm5leHQpIDwgMDtcbn1cblxuLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuZnVuY3Rpb24gaW5kZXhDdXJ2ZShzdGFydCwgbWluWCwgbWluWSwgaW52U2l6ZSkge1xuICAgIHZhciBwID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICBpZiAocC56ID09PSBudWxsKSBwLnogPSB6T3JkZXIocC54LCBwLnksIG1pblgsIG1pblksIGludlNpemUpO1xuICAgICAgICBwLnByZXZaID0gcC5wcmV2O1xuICAgICAgICBwLm5leHRaID0gcC5uZXh0O1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHAucHJldloubmV4dFogPSBudWxsO1xuICAgIHAucHJldlogPSBudWxsO1xuXG4gICAgc29ydExpbmtlZChwKTtcbn1cblxuLy8gU2ltb24gVGF0aGFtJ3MgbGlua2VkIGxpc3QgbWVyZ2Ugc29ydCBhbGdvcml0aG1cbi8vIGh0dHA6Ly93d3cuY2hpYXJrLmdyZWVuZW5kLm9yZy51ay9+c2d0YXRoYW0vYWxnb3JpdGhtcy9saXN0c29ydC5odG1sXG5mdW5jdGlvbiBzb3J0TGlua2VkKGxpc3QpIHtcbiAgICB2YXIgaSwgcCwgcSwgZSwgdGFpbCwgbnVtTWVyZ2VzLCBwU2l6ZSwgcVNpemUsXG4gICAgICAgIGluU2l6ZSA9IDE7XG5cbiAgICBkbyB7XG4gICAgICAgIHAgPSBsaXN0O1xuICAgICAgICBsaXN0ID0gbnVsbDtcbiAgICAgICAgdGFpbCA9IG51bGw7XG4gICAgICAgIG51bU1lcmdlcyA9IDA7XG5cbiAgICAgICAgd2hpbGUgKHApIHtcbiAgICAgICAgICAgIG51bU1lcmdlcysrO1xuICAgICAgICAgICAgcSA9IHA7XG4gICAgICAgICAgICBwU2l6ZSA9IDA7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5TaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwU2l6ZSsrO1xuICAgICAgICAgICAgICAgIHEgPSBxLm5leHRaO1xuICAgICAgICAgICAgICAgIGlmICghcSkgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxU2l6ZSA9IGluU2l6ZTtcblxuICAgICAgICAgICAgd2hpbGUgKHBTaXplID4gMCB8fCAocVNpemUgPiAwICYmIHEpKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocFNpemUgIT09IDAgJiYgKHFTaXplID09PSAwIHx8ICFxIHx8IHAueiA8PSBxLnopKSB7XG4gICAgICAgICAgICAgICAgICAgIGUgPSBwO1xuICAgICAgICAgICAgICAgICAgICBwID0gcC5uZXh0WjtcbiAgICAgICAgICAgICAgICAgICAgcFNpemUtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlID0gcTtcbiAgICAgICAgICAgICAgICAgICAgcSA9IHEubmV4dFo7XG4gICAgICAgICAgICAgICAgICAgIHFTaXplLS07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRhaWwpIHRhaWwubmV4dFogPSBlO1xuICAgICAgICAgICAgICAgIGVsc2UgbGlzdCA9IGU7XG5cbiAgICAgICAgICAgICAgICBlLnByZXZaID0gdGFpbDtcbiAgICAgICAgICAgICAgICB0YWlsID0gZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcCA9IHE7XG4gICAgICAgIH1cblxuICAgICAgICB0YWlsLm5leHRaID0gbnVsbDtcbiAgICAgICAgaW5TaXplICo9IDI7XG5cbiAgICB9IHdoaWxlIChudW1NZXJnZXMgPiAxKTtcblxuICAgIHJldHVybiBsaXN0O1xufVxuXG4vLyB6LW9yZGVyIG9mIGEgcG9pbnQgZ2l2ZW4gY29vcmRzIGFuZCBpbnZlcnNlIG9mIHRoZSBsb25nZXIgc2lkZSBvZiBkYXRhIGJib3hcbmZ1bmN0aW9uIHpPcmRlcih4LCB5LCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XG4gICAgLy8gY29vcmRzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvIG5vbi1uZWdhdGl2ZSAxNS1iaXQgaW50ZWdlciByYW5nZVxuICAgIHggPSAzMjc2NyAqICh4IC0gbWluWCkgKiBpbnZTaXplO1xuICAgIHkgPSAzMjc2NyAqICh5IC0gbWluWSkgKiBpbnZTaXplO1xuXG4gICAgeCA9ICh4IHwgKHggPDwgOCkpICYgMHgwMEZGMDBGRjtcbiAgICB4ID0gKHggfCAoeCA8PCA0KSkgJiAweDBGMEYwRjBGO1xuICAgIHggPSAoeCB8ICh4IDw8IDIpKSAmIDB4MzMzMzMzMzM7XG4gICAgeCA9ICh4IHwgKHggPDwgMSkpICYgMHg1NTU1NTU1NTtcblxuICAgIHkgPSAoeSB8ICh5IDw8IDgpKSAmIDB4MDBGRjAwRkY7XG4gICAgeSA9ICh5IHwgKHkgPDwgNCkpICYgMHgwRjBGMEYwRjtcbiAgICB5ID0gKHkgfCAoeSA8PCAyKSkgJiAweDMzMzMzMzMzO1xuICAgIHkgPSAoeSB8ICh5IDw8IDEpKSAmIDB4NTU1NTU1NTU7XG5cbiAgICByZXR1cm4geCB8ICh5IDw8IDEpO1xufVxuXG4vLyBmaW5kIHRoZSBsZWZ0bW9zdCBub2RlIG9mIGEgcG9seWdvbiByaW5nXG5mdW5jdGlvbiBnZXRMZWZ0bW9zdChzdGFydCkge1xuICAgIHZhciBwID0gc3RhcnQsXG4gICAgICAgIGxlZnRtb3N0ID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICBpZiAocC54IDwgbGVmdG1vc3QueCB8fCAocC54ID09PSBsZWZ0bW9zdC54ICYmIHAueSA8IGxlZnRtb3N0LnkpKSBsZWZ0bW9zdCA9IHA7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gc3RhcnQpO1xuXG4gICAgcmV0dXJuIGxlZnRtb3N0O1xufVxuXG4vLyBjaGVjayBpZiBhIHBvaW50IGxpZXMgd2l0aGluIGEgY29udmV4IHRyaWFuZ2xlXG5mdW5jdGlvbiBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcHgsIHB5KSB7XG4gICAgcmV0dXJuIChjeCAtIHB4KSAqIChheSAtIHB5KSAtIChheCAtIHB4KSAqIChjeSAtIHB5KSA+PSAwICYmXG4gICAgICAgICAgIChheCAtIHB4KSAqIChieSAtIHB5KSAtIChieCAtIHB4KSAqIChheSAtIHB5KSA+PSAwICYmXG4gICAgICAgICAgIChieCAtIHB4KSAqIChjeSAtIHB5KSAtIChjeCAtIHB4KSAqIChieSAtIHB5KSA+PSAwO1xufVxuXG4vLyBjaGVjayBpZiBhIGRpYWdvbmFsIGJldHdlZW4gdHdvIHBvbHlnb24gbm9kZXMgaXMgdmFsaWQgKGxpZXMgaW4gcG9seWdvbiBpbnRlcmlvcilcbmZ1bmN0aW9uIGlzVmFsaWREaWFnb25hbChhLCBiKSB7XG4gICAgcmV0dXJuIGEubmV4dC5pICE9PSBiLmkgJiYgYS5wcmV2LmkgIT09IGIuaSAmJiAhaW50ZXJzZWN0c1BvbHlnb24oYSwgYikgJiYgLy8gZG9uZXMndCBpbnRlcnNlY3Qgb3RoZXIgZWRnZXNcbiAgICAgICAgICAgKGxvY2FsbHlJbnNpZGUoYSwgYikgJiYgbG9jYWxseUluc2lkZShiLCBhKSAmJiBtaWRkbGVJbnNpZGUoYSwgYikgJiYgLy8gbG9jYWxseSB2aXNpYmxlXG4gICAgICAgICAgICAoYXJlYShhLnByZXYsIGEsIGIucHJldikgfHwgYXJlYShhLCBiLnByZXYsIGIpKSB8fCAvLyBkb2VzIG5vdCBjcmVhdGUgb3Bwb3NpdGUtZmFjaW5nIHNlY3RvcnNcbiAgICAgICAgICAgIGVxdWFscyhhLCBiKSAmJiBhcmVhKGEucHJldiwgYSwgYS5uZXh0KSA+IDAgJiYgYXJlYShiLnByZXYsIGIsIGIubmV4dCkgPiAwKTsgLy8gc3BlY2lhbCB6ZXJvLWxlbmd0aCBjYXNlXG59XG5cbi8vIHNpZ25lZCBhcmVhIG9mIGEgdHJpYW5nbGVcbmZ1bmN0aW9uIGFyZWEocCwgcSwgcikge1xuICAgIHJldHVybiAocS55IC0gcC55KSAqIChyLnggLSBxLngpIC0gKHEueCAtIHAueCkgKiAoci55IC0gcS55KTtcbn1cblxuLy8gY2hlY2sgaWYgdHdvIHBvaW50cyBhcmUgZXF1YWxcbmZ1bmN0aW9uIGVxdWFscyhwMSwgcDIpIHtcbiAgICByZXR1cm4gcDEueCA9PT0gcDIueCAmJiBwMS55ID09PSBwMi55O1xufVxuXG4vLyBjaGVjayBpZiB0d28gc2VnbWVudHMgaW50ZXJzZWN0XG5mdW5jdGlvbiBpbnRlcnNlY3RzKHAxLCBxMSwgcDIsIHEyKSB7XG4gICAgdmFyIG8xID0gc2lnbihhcmVhKHAxLCBxMSwgcDIpKTtcbiAgICB2YXIgbzIgPSBzaWduKGFyZWEocDEsIHExLCBxMikpO1xuICAgIHZhciBvMyA9IHNpZ24oYXJlYShwMiwgcTIsIHAxKSk7XG4gICAgdmFyIG80ID0gc2lnbihhcmVhKHAyLCBxMiwgcTEpKTtcblxuICAgIGlmIChvMSAhPT0gbzIgJiYgbzMgIT09IG80KSByZXR1cm4gdHJ1ZTsgLy8gZ2VuZXJhbCBjYXNlXG5cbiAgICBpZiAobzEgPT09IDAgJiYgb25TZWdtZW50KHAxLCBwMiwgcTEpKSByZXR1cm4gdHJ1ZTsgLy8gcDEsIHExIGFuZCBwMiBhcmUgY29sbGluZWFyIGFuZCBwMiBsaWVzIG9uIHAxcTFcbiAgICBpZiAobzIgPT09IDAgJiYgb25TZWdtZW50KHAxLCBxMiwgcTEpKSByZXR1cm4gdHJ1ZTsgLy8gcDEsIHExIGFuZCBxMiBhcmUgY29sbGluZWFyIGFuZCBxMiBsaWVzIG9uIHAxcTFcbiAgICBpZiAobzMgPT09IDAgJiYgb25TZWdtZW50KHAyLCBwMSwgcTIpKSByZXR1cm4gdHJ1ZTsgLy8gcDIsIHEyIGFuZCBwMSBhcmUgY29sbGluZWFyIGFuZCBwMSBsaWVzIG9uIHAycTJcbiAgICBpZiAobzQgPT09IDAgJiYgb25TZWdtZW50KHAyLCBxMSwgcTIpKSByZXR1cm4gdHJ1ZTsgLy8gcDIsIHEyIGFuZCBxMSBhcmUgY29sbGluZWFyIGFuZCBxMSBsaWVzIG9uIHAycTJcblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8gZm9yIGNvbGxpbmVhciBwb2ludHMgcCwgcSwgciwgY2hlY2sgaWYgcG9pbnQgcSBsaWVzIG9uIHNlZ21lbnQgcHJcbmZ1bmN0aW9uIG9uU2VnbWVudChwLCBxLCByKSB7XG4gICAgcmV0dXJuIHEueCA8PSBNYXRoLm1heChwLngsIHIueCkgJiYgcS54ID49IE1hdGgubWluKHAueCwgci54KSAmJiBxLnkgPD0gTWF0aC5tYXgocC55LCByLnkpICYmIHEueSA+PSBNYXRoLm1pbihwLnksIHIueSk7XG59XG5cbmZ1bmN0aW9uIHNpZ24obnVtKSB7XG4gICAgcmV0dXJuIG51bSA+IDAgPyAxIDogbnVtIDwgMCA/IC0xIDogMDtcbn1cblxuLy8gY2hlY2sgaWYgYSBwb2x5Z29uIGRpYWdvbmFsIGludGVyc2VjdHMgYW55IHBvbHlnb24gc2VnbWVudHNcbmZ1bmN0aW9uIGludGVyc2VjdHNQb2x5Z29uKGEsIGIpIHtcbiAgICB2YXIgcCA9IGE7XG4gICAgZG8ge1xuICAgICAgICBpZiAocC5pICE9PSBhLmkgJiYgcC5uZXh0LmkgIT09IGEuaSAmJiBwLmkgIT09IGIuaSAmJiBwLm5leHQuaSAhPT0gYi5pICYmXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0cyhwLCBwLm5leHQsIGEsIGIpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBhKTtcblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8gY2hlY2sgaWYgYSBwb2x5Z29uIGRpYWdvbmFsIGlzIGxvY2FsbHkgaW5zaWRlIHRoZSBwb2x5Z29uXG5mdW5jdGlvbiBsb2NhbGx5SW5zaWRlKGEsIGIpIHtcbiAgICByZXR1cm4gYXJlYShhLnByZXYsIGEsIGEubmV4dCkgPCAwID9cbiAgICAgICAgYXJlYShhLCBiLCBhLm5leHQpID49IDAgJiYgYXJlYShhLCBhLnByZXYsIGIpID49IDAgOlxuICAgICAgICBhcmVhKGEsIGIsIGEucHJldikgPCAwIHx8IGFyZWEoYSwgYS5uZXh0LCBiKSA8IDA7XG59XG5cbi8vIGNoZWNrIGlmIHRoZSBtaWRkbGUgcG9pbnQgb2YgYSBwb2x5Z29uIGRpYWdvbmFsIGlzIGluc2lkZSB0aGUgcG9seWdvblxuZnVuY3Rpb24gbWlkZGxlSW5zaWRlKGEsIGIpIHtcbiAgICB2YXIgcCA9IGEsXG4gICAgICAgIGluc2lkZSA9IGZhbHNlLFxuICAgICAgICBweCA9IChhLnggKyBiLngpIC8gMixcbiAgICAgICAgcHkgPSAoYS55ICsgYi55KSAvIDI7XG4gICAgZG8ge1xuICAgICAgICBpZiAoKChwLnkgPiBweSkgIT09IChwLm5leHQueSA+IHB5KSkgJiYgcC5uZXh0LnkgIT09IHAueSAmJlxuICAgICAgICAgICAgICAgIChweCA8IChwLm5leHQueCAtIHAueCkgKiAocHkgLSBwLnkpIC8gKHAubmV4dC55IC0gcC55KSArIHAueCkpXG4gICAgICAgICAgICBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IGEpO1xuXG4gICAgcmV0dXJuIGluc2lkZTtcbn1cblxuLy8gbGluayB0d28gcG9seWdvbiB2ZXJ0aWNlcyB3aXRoIGEgYnJpZGdlOyBpZiB0aGUgdmVydGljZXMgYmVsb25nIHRvIHRoZSBzYW1lIHJpbmcsIGl0IHNwbGl0cyBwb2x5Z29uIGludG8gdHdvO1xuLy8gaWYgb25lIGJlbG9uZ3MgdG8gdGhlIG91dGVyIHJpbmcgYW5kIGFub3RoZXIgdG8gYSBob2xlLCBpdCBtZXJnZXMgaXQgaW50byBhIHNpbmdsZSByaW5nXG5mdW5jdGlvbiBzcGxpdFBvbHlnb24oYSwgYikge1xuICAgIHZhciBhMiA9IG5ldyBOb2RlKGEuaSwgYS54LCBhLnkpLFxuICAgICAgICBiMiA9IG5ldyBOb2RlKGIuaSwgYi54LCBiLnkpLFxuICAgICAgICBhbiA9IGEubmV4dCxcbiAgICAgICAgYnAgPSBiLnByZXY7XG5cbiAgICBhLm5leHQgPSBiO1xuICAgIGIucHJldiA9IGE7XG5cbiAgICBhMi5uZXh0ID0gYW47XG4gICAgYW4ucHJldiA9IGEyO1xuXG4gICAgYjIubmV4dCA9IGEyO1xuICAgIGEyLnByZXYgPSBiMjtcblxuICAgIGJwLm5leHQgPSBiMjtcbiAgICBiMi5wcmV2ID0gYnA7XG5cbiAgICByZXR1cm4gYjI7XG59XG5cbi8vIGNyZWF0ZSBhIG5vZGUgYW5kIG9wdGlvbmFsbHkgbGluayBpdCB3aXRoIHByZXZpb3VzIG9uZSAoaW4gYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QpXG5mdW5jdGlvbiBpbnNlcnROb2RlKGksIHgsIHksIGxhc3QpIHtcbiAgICB2YXIgcCA9IG5ldyBOb2RlKGksIHgsIHkpO1xuXG4gICAgaWYgKCFsYXN0KSB7XG4gICAgICAgIHAucHJldiA9IHA7XG4gICAgICAgIHAubmV4dCA9IHA7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBwLm5leHQgPSBsYXN0Lm5leHQ7XG4gICAgICAgIHAucHJldiA9IGxhc3Q7XG4gICAgICAgIGxhc3QubmV4dC5wcmV2ID0gcDtcbiAgICAgICAgbGFzdC5uZXh0ID0gcDtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5vZGUocCkge1xuICAgIHAubmV4dC5wcmV2ID0gcC5wcmV2O1xuICAgIHAucHJldi5uZXh0ID0gcC5uZXh0O1xuXG4gICAgaWYgKHAucHJldlopIHAucHJldloubmV4dFogPSBwLm5leHRaO1xuICAgIGlmIChwLm5leHRaKSBwLm5leHRaLnByZXZaID0gcC5wcmV2Wjtcbn1cblxuZnVuY3Rpb24gTm9kZShpLCB4LCB5KSB7XG4gICAgLy8gdmVydGV4IGluZGV4IGluIGNvb3JkaW5hdGVzIGFycmF5XG4gICAgdGhpcy5pID0gaTtcblxuICAgIC8vIHZlcnRleCBjb29yZGluYXRlc1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcblxuICAgIC8vIHByZXZpb3VzIGFuZCBuZXh0IHZlcnRleCBub2RlcyBpbiBhIHBvbHlnb24gcmluZ1xuICAgIHRoaXMucHJldiA9IG51bGw7XG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcblxuICAgIC8vIHotb3JkZXIgY3VydmUgdmFsdWVcbiAgICB0aGlzLnogPSBudWxsO1xuXG4gICAgLy8gcHJldmlvdXMgYW5kIG5leHQgbm9kZXMgaW4gei1vcmRlclxuICAgIHRoaXMucHJldlogPSBudWxsO1xuICAgIHRoaXMubmV4dFogPSBudWxsO1xuXG4gICAgLy8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhIHN0ZWluZXIgcG9pbnRcbiAgICB0aGlzLnN0ZWluZXIgPSBmYWxzZTtcbn1cblxuLy8gcmV0dXJuIGEgcGVyY2VudGFnZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHBvbHlnb24gYXJlYSBhbmQgaXRzIHRyaWFuZ3VsYXRpb24gYXJlYTtcbi8vIHVzZWQgdG8gdmVyaWZ5IGNvcnJlY3RuZXNzIG9mIHRyaWFuZ3VsYXRpb25cbmVhcmN1dC5kZXZpYXRpb24gPSBmdW5jdGlvbiAoZGF0YSwgaG9sZUluZGljZXMsIGRpbSwgdHJpYW5nbGVzKSB7XG4gICAgdmFyIGhhc0hvbGVzID0gaG9sZUluZGljZXMgJiYgaG9sZUluZGljZXMubGVuZ3RoO1xuICAgIHZhciBvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbMF0gKiBkaW0gOiBkYXRhLmxlbmd0aDtcblxuICAgIHZhciBwb2x5Z29uQXJlYSA9IE1hdGguYWJzKHNpZ25lZEFyZWEoZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSkpO1xuICAgIGlmIChoYXNIb2xlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaG9sZUluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IGhvbGVJbmRpY2VzW2ldICogZGltO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbaSArIDFdICogZGltIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICBwb2x5Z29uQXJlYSAtPSBNYXRoLmFicyhzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRyaWFuZ2xlc0FyZWEgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdmFyIGEgPSB0cmlhbmdsZXNbaV0gKiBkaW07XG4gICAgICAgIHZhciBiID0gdHJpYW5nbGVzW2kgKyAxXSAqIGRpbTtcbiAgICAgICAgdmFyIGMgPSB0cmlhbmdsZXNbaSArIDJdICogZGltO1xuICAgICAgICB0cmlhbmdsZXNBcmVhICs9IE1hdGguYWJzKFxuICAgICAgICAgICAgKGRhdGFbYV0gLSBkYXRhW2NdKSAqIChkYXRhW2IgKyAxXSAtIGRhdGFbYSArIDFdKSAtXG4gICAgICAgICAgICAoZGF0YVthXSAtIGRhdGFbYl0pICogKGRhdGFbYyArIDFdIC0gZGF0YVthICsgMV0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9seWdvbkFyZWEgPT09IDAgJiYgdHJpYW5nbGVzQXJlYSA9PT0gMCA/IDAgOlxuICAgICAgICBNYXRoLmFicygodHJpYW5nbGVzQXJlYSAtIHBvbHlnb25BcmVhKSAvIHBvbHlnb25BcmVhKTtcbn07XG5cbmZ1bmN0aW9uIHNpZ25lZEFyZWEoZGF0YSwgc3RhcnQsIGVuZCwgZGltKSB7XG4gICAgdmFyIHN1bSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0LCBqID0gZW5kIC0gZGltOyBpIDwgZW5kOyBpICs9IGRpbSkge1xuICAgICAgICBzdW0gKz0gKGRhdGFbal0gLSBkYXRhW2ldKSAqIChkYXRhW2kgKyAxXSArIGRhdGFbaiArIDFdKTtcbiAgICAgICAgaiA9IGk7XG4gICAgfVxuICAgIHJldHVybiBzdW07XG59XG5cbi8vIHR1cm4gYSBwb2x5Z29uIGluIGEgbXVsdGktZGltZW5zaW9uYWwgYXJyYXkgZm9ybSAoZS5nLiBhcyBpbiBHZW9KU09OKSBpbnRvIGEgZm9ybSBFYXJjdXQgYWNjZXB0c1xuZWFyY3V0LmZsYXR0ZW4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBkaW0gPSBkYXRhWzBdWzBdLmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0ge3ZlcnRpY2VzOiBbXSwgaG9sZXM6IFtdLCBkaW1lbnNpb25zOiBkaW19LFxuICAgICAgICBob2xlSW5kZXggPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YVtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkaW07IGQrKykgcmVzdWx0LnZlcnRpY2VzLnB1c2goZGF0YVtpXVtqXVtkXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICBob2xlSW5kZXggKz0gZGF0YVtpIC0gMV0ubGVuZ3RoO1xuICAgICAgICAgICAgcmVzdWx0LmhvbGVzLnB1c2goaG9sZUluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIiFmdW5jdGlvbih0LGkpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWkoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwibmlwcGxlanNcIixbXSxpKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLm5pcHBsZWpzPWkoKTp0Lm5pcHBsZWpzPWkoKX0od2luZG93LGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBpPXt9O2Z1bmN0aW9uIGUobyl7aWYoaVtvXSlyZXR1cm4gaVtvXS5leHBvcnRzO3ZhciBuPWlbb109e2k6byxsOiExLGV4cG9ydHM6e319O3JldHVybiB0W29dLmNhbGwobi5leHBvcnRzLG4sbi5leHBvcnRzLGUpLG4ubD0hMCxuLmV4cG9ydHN9cmV0dXJuIGUubT10LGUuYz1pLGUuZD1mdW5jdGlvbih0LGksbyl7ZS5vKHQsaSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkse2VudW1lcmFibGU6ITAsZ2V0Om99KX0sZS5yPWZ1bmN0aW9uKHQpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LGUudD1mdW5jdGlvbih0LGkpe2lmKDEmaSYmKHQ9ZSh0KSksOCZpKXJldHVybiB0O2lmKDQmaSYmXCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJnQuX19lc01vZHVsZSlyZXR1cm4gdDt2YXIgbz1PYmplY3QuY3JlYXRlKG51bGwpO2lmKGUucihvKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTp0fSksMiZpJiZcInN0cmluZ1wiIT10eXBlb2YgdClmb3IodmFyIG4gaW4gdCllLmQobyxuLGZ1bmN0aW9uKGkpe3JldHVybiB0W2ldfS5iaW5kKG51bGwsbikpO3JldHVybiBvfSxlLm49ZnVuY3Rpb24odCl7dmFyIGk9dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHQuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIGUuZChpLFwiYVwiLGkpLGl9LGUubz1mdW5jdGlvbih0LGkpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxpKX0sZS5wPVwiXCIsZShlLnM9MCl9KFtmdW5jdGlvbih0LGksZSl7XCJ1c2Ugc3RyaWN0XCI7ZS5yKGkpO3ZhciBvLG49ZnVuY3Rpb24odCxpKXt2YXIgZT1pLngtdC54LG89aS55LXQueTtyZXR1cm4gTWF0aC5zcXJ0KGUqZStvKm8pfSxzPWZ1bmN0aW9uKHQpe3JldHVybiB0KihNYXRoLlBJLzE4MCl9LHI9ZnVuY3Rpb24odCl7cmV0dXJuIHQqKDE4MC9NYXRoLlBJKX0sZD1mdW5jdGlvbih0LGksZSl7Zm9yKHZhciBvLG49aS5zcGxpdCgvWyAsXSsvZykscz0wO3M8bi5sZW5ndGg7cys9MSlvPW5bc10sdC5hZGRFdmVudExpc3RlbmVyP3QuYWRkRXZlbnRMaXN0ZW5lcihvLGUsITEpOnQuYXR0YWNoRXZlbnQmJnQuYXR0YWNoRXZlbnQobyxlKX0sYT1mdW5jdGlvbih0LGksZSl7Zm9yKHZhciBvLG49aS5zcGxpdCgvWyAsXSsvZykscz0wO3M8bi5sZW5ndGg7cys9MSlvPW5bc10sdC5yZW1vdmVFdmVudExpc3RlbmVyP3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLGUpOnQuZGV0YWNoRXZlbnQmJnQuZGV0YWNoRXZlbnQobyxlKX0scD1mdW5jdGlvbih0KXtyZXR1cm4gdC5wcmV2ZW50RGVmYXVsdCgpLHQudHlwZS5tYXRjaCgvXnRvdWNoLyk/dC5jaGFuZ2VkVG91Y2hlczp0fSxjPWZ1bmN0aW9uKCl7cmV0dXJue3g6dm9pZCAwIT09d2luZG93LnBhZ2VYT2Zmc2V0P3dpbmRvdy5wYWdlWE9mZnNldDooZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fHxkb2N1bWVudC5ib2R5LnBhcmVudE5vZGV8fGRvY3VtZW50LmJvZHkpLnNjcm9sbExlZnQseTp2b2lkIDAhPT13aW5kb3cucGFnZVlPZmZzZXQ/d2luZG93LnBhZ2VZT2Zmc2V0Oihkb2N1bWVudC5kb2N1bWVudEVsZW1lbnR8fGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZXx8ZG9jdW1lbnQuYm9keSkuc2Nyb2xsVG9wfX0saD1mdW5jdGlvbih0LGkpe2kudG9wfHxpLnJpZ2h0fHxpLmJvdHRvbXx8aS5sZWZ0Pyh0LnN0eWxlLnRvcD1pLnRvcCx0LnN0eWxlLnJpZ2h0PWkucmlnaHQsdC5zdHlsZS5ib3R0b209aS5ib3R0b20sdC5zdHlsZS5sZWZ0PWkubGVmdCk6KHQuc3R5bGUubGVmdD1pLngrXCJweFwiLHQuc3R5bGUudG9wPWkueStcInB4XCIpfSxsPWZ1bmN0aW9uKHQsaSxlKXt2YXIgbz11KHQpO2Zvcih2YXIgbiBpbiBvKWlmKG8uaGFzT3duUHJvcGVydHkobikpaWYoXCJzdHJpbmdcIj09dHlwZW9mIGkpb1tuXT1pK1wiIFwiK2U7ZWxzZXtmb3IodmFyIHM9XCJcIixyPTAsZD1pLmxlbmd0aDtyPGQ7cis9MSlzKz1pW3JdK1wiIFwiK2UrXCIsIFwiO29bbl09cy5zbGljZSgwLC0yKX1yZXR1cm4gb30sdT1mdW5jdGlvbih0KXt2YXIgaT17fTtpW3RdPVwiXCI7cmV0dXJuW1wid2Via2l0XCIsXCJNb3pcIixcIm9cIl0uZm9yRWFjaChmdW5jdGlvbihlKXtpW2UrdC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpXT1cIlwifSksaX0sZj1mdW5jdGlvbih0LGkpe2Zvcih2YXIgZSBpbiBpKWkuaGFzT3duUHJvcGVydHkoZSkmJih0W2VdPWlbZV0pO3JldHVybiB0fSx5PWZ1bmN0aW9uKHQsaSl7aWYodC5sZW5ndGgpZm9yKHZhciBlPTAsbz10Lmxlbmd0aDtlPG87ZSs9MSlpKHRbZV0pO2Vsc2UgaSh0KX0sbT0hIShcIm9udG91Y2hzdGFydFwiaW4gd2luZG93KSx2PSEhd2luZG93LlBvaW50ZXJFdmVudCxnPSEhd2luZG93Lk1TUG9pbnRlckV2ZW50LGI9e3N0YXJ0OlwibW91c2Vkb3duXCIsbW92ZTpcIm1vdXNlbW92ZVwiLGVuZDpcIm1vdXNldXBcIn0seD17fTtmdW5jdGlvbiBPKCl7fXY/bz17c3RhcnQ6XCJwb2ludGVyZG93blwiLG1vdmU6XCJwb2ludGVybW92ZVwiLGVuZDpcInBvaW50ZXJ1cCwgcG9pbnRlcmNhbmNlbFwifTpnP289e3N0YXJ0OlwiTVNQb2ludGVyRG93blwiLG1vdmU6XCJNU1BvaW50ZXJNb3ZlXCIsZW5kOlwiTVNQb2ludGVyVXBcIn06bT8obz17c3RhcnQ6XCJ0b3VjaHN0YXJ0XCIsbW92ZTpcInRvdWNobW92ZVwiLGVuZDpcInRvdWNoZW5kLCB0b3VjaGNhbmNlbFwifSx4PWIpOm89YixPLnByb3RvdHlwZS5vbj1mdW5jdGlvbih0LGkpe3ZhciBlLG89dC5zcGxpdCgvWyAsXSsvZyk7dGhpcy5faGFuZGxlcnNfPXRoaXMuX2hhbmRsZXJzX3x8e307Zm9yKHZhciBuPTA7bjxvLmxlbmd0aDtuKz0xKWU9b1tuXSx0aGlzLl9oYW5kbGVyc19bZV09dGhpcy5faGFuZGxlcnNfW2VdfHxbXSx0aGlzLl9oYW5kbGVyc19bZV0ucHVzaChpKTtyZXR1cm4gdGhpc30sTy5wcm90b3R5cGUub2ZmPWZ1bmN0aW9uKHQsaSl7cmV0dXJuIHRoaXMuX2hhbmRsZXJzXz10aGlzLl9oYW5kbGVyc198fHt9LHZvaWQgMD09PXQ/dGhpcy5faGFuZGxlcnNfPXt9OnZvaWQgMD09PWk/dGhpcy5faGFuZGxlcnNfW3RdPW51bGw6dGhpcy5faGFuZGxlcnNfW3RdJiZ0aGlzLl9oYW5kbGVyc19bdF0uaW5kZXhPZihpKT49MCYmdGhpcy5faGFuZGxlcnNfW3RdLnNwbGljZSh0aGlzLl9oYW5kbGVyc19bdF0uaW5kZXhPZihpKSwxKSx0aGlzfSxPLnByb3RvdHlwZS50cmlnZ2VyPWZ1bmN0aW9uKHQsaSl7dmFyIGUsbz10aGlzLG49dC5zcGxpdCgvWyAsXSsvZyk7by5faGFuZGxlcnNfPW8uX2hhbmRsZXJzX3x8e307Zm9yKHZhciBzPTA7czxuLmxlbmd0aDtzKz0xKWU9bltzXSxvLl9oYW5kbGVyc19bZV0mJm8uX2hhbmRsZXJzX1tlXS5sZW5ndGgmJm8uX2hhbmRsZXJzX1tlXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuY2FsbChvLHt0eXBlOmUsdGFyZ2V0Om99LGkpfSl9LE8ucHJvdG90eXBlLmNvbmZpZz1mdW5jdGlvbih0KXt0aGlzLm9wdGlvbnM9dGhpcy5kZWZhdWx0c3x8e30sdCYmKHRoaXMub3B0aW9ucz1mdW5jdGlvbih0LGkpe3ZhciBlPXt9O2Zvcih2YXIgbyBpbiB0KXQuaGFzT3duUHJvcGVydHkobykmJmkuaGFzT3duUHJvcGVydHkobyk/ZVtvXT1pW29dOnQuaGFzT3duUHJvcGVydHkobykmJihlW29dPXRbb10pO3JldHVybiBlfSh0aGlzLm9wdGlvbnMsdCkpfSxPLnByb3RvdHlwZS5iaW5kRXZ0PWZ1bmN0aW9uKHQsaSl7dmFyIGU9dGhpcztyZXR1cm4gZS5fZG9tSGFuZGxlcnNfPWUuX2RvbUhhbmRsZXJzX3x8e30sZS5fZG9tSGFuZGxlcnNfW2ldPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZVtcIm9uXCIraV0/ZVtcIm9uXCIraV0uYXBwbHkoZSxhcmd1bWVudHMpOmNvbnNvbGUud2FybignW1dBUk5JTkddIDogTWlzc2luZyBcIm9uJytpKydcIiBoYW5kbGVyLicpfSxkKHQsb1tpXSxlLl9kb21IYW5kbGVyc19baV0pLHhbaV0mJmQodCx4W2ldLGUuX2RvbUhhbmRsZXJzX1tpXSksZX0sTy5wcm90b3R5cGUudW5iaW5kRXZ0PWZ1bmN0aW9uKHQsaSl7cmV0dXJuIHRoaXMuX2RvbUhhbmRsZXJzXz10aGlzLl9kb21IYW5kbGVyc198fHt9LGEodCxvW2ldLHRoaXMuX2RvbUhhbmRsZXJzX1tpXSkseFtpXSYmYSh0LHhbaV0sdGhpcy5fZG9tSGFuZGxlcnNfW2ldKSxkZWxldGUgdGhpcy5fZG9tSGFuZGxlcnNfW2ldLHRoaXN9O3ZhciBfPU87ZnVuY3Rpb24gdyh0LGkpe3JldHVybiB0aGlzLmlkZW50aWZpZXI9aS5pZGVudGlmaWVyLHRoaXMucG9zaXRpb249aS5wb3NpdGlvbix0aGlzLmZyb250UG9zaXRpb249aS5mcm9udFBvc2l0aW9uLHRoaXMuY29sbGVjdGlvbj10LHRoaXMuZGVmYXVsdHM9e3NpemU6MTAwLHRocmVzaG9sZDouMSxjb2xvcjpcIndoaXRlXCIsZmFkZVRpbWU6MjUwLGRhdGFPbmx5OiExLHJlc3RKb3lzdGljazohMCxyZXN0T3BhY2l0eTouNSxtb2RlOlwiZHluYW1pY1wiLHpvbmU6ZG9jdW1lbnQuYm9keSxsb2NrWDohMSxsb2NrWTohMX0sdGhpcy5jb25maWcoaSksXCJkeW5hbWljXCI9PT10aGlzLm9wdGlvbnMubW9kZSYmKHRoaXMub3B0aW9ucy5yZXN0T3BhY2l0eT0wKSx0aGlzLmlkPXcuaWQsdy5pZCs9MSx0aGlzLmJ1aWxkRWwoKS5zdHlsaXplKCksdGhpcy5pbnN0YW5jZT17ZWw6dGhpcy51aS5lbCxvbjp0aGlzLm9uLmJpbmQodGhpcyksb2ZmOnRoaXMub2ZmLmJpbmQodGhpcyksc2hvdzp0aGlzLnNob3cuYmluZCh0aGlzKSxoaWRlOnRoaXMuaGlkZS5iaW5kKHRoaXMpLGFkZDp0aGlzLmFkZFRvRG9tLmJpbmQodGhpcykscmVtb3ZlOnRoaXMucmVtb3ZlRnJvbURvbS5iaW5kKHRoaXMpLGRlc3Ryb3k6dGhpcy5kZXN0cm95LmJpbmQodGhpcykscmVzZXREaXJlY3Rpb246dGhpcy5yZXNldERpcmVjdGlvbi5iaW5kKHRoaXMpLGNvbXB1dGVEaXJlY3Rpb246dGhpcy5jb21wdXRlRGlyZWN0aW9uLmJpbmQodGhpcyksdHJpZ2dlcjp0aGlzLnRyaWdnZXIuYmluZCh0aGlzKSxwb3NpdGlvbjp0aGlzLnBvc2l0aW9uLGZyb250UG9zaXRpb246dGhpcy5mcm9udFBvc2l0aW9uLHVpOnRoaXMudWksaWRlbnRpZmllcjp0aGlzLmlkZW50aWZpZXIsaWQ6dGhpcy5pZCxvcHRpb25zOnRoaXMub3B0aW9uc30sdGhpcy5pbnN0YW5jZX13LnByb3RvdHlwZT1uZXcgXyx3LmNvbnN0cnVjdG9yPXcsdy5pZD0wLHcucHJvdG90eXBlLmJ1aWxkRWw9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudWk9e30sdGhpcy5vcHRpb25zLmRhdGFPbmx5P3RoaXM6KHRoaXMudWkuZWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLnVpLmJhY2s9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLnVpLmZyb250PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy51aS5lbC5jbGFzc05hbWU9XCJuaXBwbGUgY29sbGVjdGlvbl9cIit0aGlzLmNvbGxlY3Rpb24uaWQsdGhpcy51aS5iYWNrLmNsYXNzTmFtZT1cImJhY2tcIix0aGlzLnVpLmZyb250LmNsYXNzTmFtZT1cImZyb250XCIsdGhpcy51aS5lbC5zZXRBdHRyaWJ1dGUoXCJpZFwiLFwibmlwcGxlX1wiK3RoaXMuY29sbGVjdGlvbi5pZCtcIl9cIit0aGlzLmlkKSx0aGlzLnVpLmVsLmFwcGVuZENoaWxkKHRoaXMudWkuYmFjayksdGhpcy51aS5lbC5hcHBlbmRDaGlsZCh0aGlzLnVpLmZyb250KSx0aGlzKX0sdy5wcm90b3R5cGUuc3R5bGl6ZT1mdW5jdGlvbigpe2lmKHRoaXMub3B0aW9ucy5kYXRhT25seSlyZXR1cm4gdGhpczt2YXIgdD10aGlzLm9wdGlvbnMuZmFkZVRpbWUrXCJtc1wiLGk9ZnVuY3Rpb24odCxpKXt2YXIgZT11KHQpO2Zvcih2YXIgbyBpbiBlKWUuaGFzT3duUHJvcGVydHkobykmJihlW29dPWkpO3JldHVybiBlfShcImJvcmRlclJhZGl1c1wiLFwiNTAlXCIpLGU9bChcInRyYW5zaXRpb25cIixcIm9wYWNpdHlcIix0KSxvPXt9O3JldHVybiBvLmVsPXtwb3NpdGlvbjpcImFic29sdXRlXCIsb3BhY2l0eTp0aGlzLm9wdGlvbnMucmVzdE9wYWNpdHksZGlzcGxheTpcImJsb2NrXCIsekluZGV4Ojk5OX0sby5iYWNrPXtwb3NpdGlvbjpcImFic29sdXRlXCIsZGlzcGxheTpcImJsb2NrXCIsd2lkdGg6dGhpcy5vcHRpb25zLnNpemUrXCJweFwiLGhlaWdodDp0aGlzLm9wdGlvbnMuc2l6ZStcInB4XCIsbWFyZ2luTGVmdDotdGhpcy5vcHRpb25zLnNpemUvMitcInB4XCIsbWFyZ2luVG9wOi10aGlzLm9wdGlvbnMuc2l6ZS8yK1wicHhcIixiYWNrZ3JvdW5kOnRoaXMub3B0aW9ucy5jb2xvcixvcGFjaXR5OlwiLjVcIn0sby5mcm9udD17d2lkdGg6dGhpcy5vcHRpb25zLnNpemUvMitcInB4XCIsaGVpZ2h0OnRoaXMub3B0aW9ucy5zaXplLzIrXCJweFwiLHBvc2l0aW9uOlwiYWJzb2x1dGVcIixkaXNwbGF5OlwiYmxvY2tcIixtYXJnaW5MZWZ0Oi10aGlzLm9wdGlvbnMuc2l6ZS80K1wicHhcIixtYXJnaW5Ub3A6LXRoaXMub3B0aW9ucy5zaXplLzQrXCJweFwiLGJhY2tncm91bmQ6dGhpcy5vcHRpb25zLmNvbG9yLG9wYWNpdHk6XCIuNVwifSxmKG8uZWwsZSksZihvLmJhY2ssaSksZihvLmZyb250LGkpLHRoaXMuYXBwbHlTdHlsZXMobyksdGhpc30sdy5wcm90b3R5cGUuYXBwbHlTdHlsZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBpIGluIHRoaXMudWkpaWYodGhpcy51aS5oYXNPd25Qcm9wZXJ0eShpKSlmb3IodmFyIGUgaW4gdFtpXSl0aGlzLnVpW2ldLnN0eWxlW2VdPXRbaV1bZV07cmV0dXJuIHRoaXN9LHcucHJvdG90eXBlLmFkZFRvRG9tPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy5kYXRhT25seXx8ZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLnVpLmVsKT90aGlzOih0aGlzLm9wdGlvbnMuem9uZS5hcHBlbmRDaGlsZCh0aGlzLnVpLmVsKSx0aGlzKX0sdy5wcm90b3R5cGUucmVtb3ZlRnJvbURvbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm9wdGlvbnMuZGF0YU9ubHl8fCFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMudWkuZWwpP3RoaXM6KHRoaXMub3B0aW9ucy56b25lLnJlbW92ZUNoaWxkKHRoaXMudWkuZWwpLHRoaXMpfSx3LnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMucmVtb3ZlVGltZW91dCksY2xlYXJUaW1lb3V0KHRoaXMuc2hvd1RpbWVvdXQpLGNsZWFyVGltZW91dCh0aGlzLnJlc3RUaW1lb3V0KSx0aGlzLnRyaWdnZXIoXCJkZXN0cm95ZWRcIix0aGlzLmluc3RhbmNlKSx0aGlzLnJlbW92ZUZyb21Eb20oKSx0aGlzLm9mZigpfSx3LnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKHQpe3ZhciBpPXRoaXM7cmV0dXJuIGkub3B0aW9ucy5kYXRhT25seT9pOihjbGVhclRpbWVvdXQoaS5yZW1vdmVUaW1lb3V0KSxjbGVhclRpbWVvdXQoaS5zaG93VGltZW91dCksY2xlYXJUaW1lb3V0KGkucmVzdFRpbWVvdXQpLGkuYWRkVG9Eb20oKSxpLnJlc3RDYWxsYmFjaygpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLnVpLmVsLnN0eWxlLm9wYWNpdHk9MX0sMCksaS5zaG93VGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS50cmlnZ2VyKFwic2hvd25cIixpLmluc3RhbmNlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZ0LmNhbGwodGhpcyl9LGkub3B0aW9ucy5mYWRlVGltZSksaSl9LHcucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24odCl7dmFyIGk9dGhpcztyZXR1cm4gaS5vcHRpb25zLmRhdGFPbmx5P2k6KGkudWkuZWwuc3R5bGUub3BhY2l0eT1pLm9wdGlvbnMucmVzdE9wYWNpdHksY2xlYXJUaW1lb3V0KGkucmVtb3ZlVGltZW91dCksY2xlYXJUaW1lb3V0KGkuc2hvd1RpbWVvdXQpLGNsZWFyVGltZW91dChpLnJlc3RUaW1lb3V0KSxpLnJlbW92ZVRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBlPVwiZHluYW1pY1wiPT09aS5vcHRpb25zLm1vZGU/XCJub25lXCI6XCJibG9ja1wiO2kudWkuZWwuc3R5bGUuZGlzcGxheT1lLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQuY2FsbChpKSxpLnRyaWdnZXIoXCJoaWRkZW5cIixpLmluc3RhbmNlKX0saS5vcHRpb25zLmZhZGVUaW1lKSxpLm9wdGlvbnMucmVzdEpveXN0aWNrJiZpLnJlc3RQb3NpdGlvbigpLGkpfSx3LnByb3RvdHlwZS5yZXN0UG9zaXRpb249ZnVuY3Rpb24odCl7dmFyIGk9dGhpcztpLmZyb250UG9zaXRpb249e3g6MCx5OjB9O3ZhciBlPWkub3B0aW9ucy5mYWRlVGltZStcIm1zXCIsbz17fTtvLmZyb250PWwoXCJ0cmFuc2l0aW9uXCIsW1widG9wXCIsXCJsZWZ0XCJdLGUpO3ZhciBuPXtmcm9udDp7fX07bi5mcm9udD17bGVmdDppLmZyb250UG9zaXRpb24ueCtcInB4XCIsdG9wOmkuZnJvbnRQb3NpdGlvbi55K1wicHhcIn0saS5hcHBseVN0eWxlcyhvKSxpLmFwcGx5U3R5bGVzKG4pLGkucmVzdFRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQuY2FsbChpKSxpLnJlc3RDYWxsYmFjaygpfSxpLm9wdGlvbnMuZmFkZVRpbWUpfSx3LnByb3RvdHlwZS5yZXN0Q2FsbGJhY2s9ZnVuY3Rpb24oKXt2YXIgdD17fTt0LmZyb250PWwoXCJ0cmFuc2l0aW9uXCIsXCJub25lXCIsXCJcIiksdGhpcy5hcHBseVN0eWxlcyh0KSx0aGlzLnRyaWdnZXIoXCJyZXN0ZWRcIix0aGlzLmluc3RhbmNlKX0sdy5wcm90b3R5cGUucmVzZXREaXJlY3Rpb249ZnVuY3Rpb24oKXt0aGlzLmRpcmVjdGlvbj17eDohMSx5OiExLGFuZ2xlOiExfX0sdy5wcm90b3R5cGUuY29tcHV0ZURpcmVjdGlvbj1mdW5jdGlvbih0KXt2YXIgaSxlLG8sbj10LmFuZ2xlLnJhZGlhbixzPU1hdGguUEkvNCxyPU1hdGguUEkvMjtpZihuPnMmJm48MypzJiYhdC5sb2NrWD9pPVwidXBcIjpuPi1zJiZuPD1zJiYhdC5sb2NrWT9pPVwibGVmdFwiOm4+MyotcyYmbjw9LXMmJiF0LmxvY2tYP2k9XCJkb3duXCI6dC5sb2NrWXx8KGk9XCJyaWdodFwiKSx0LmxvY2tZfHwoZT1uPi1yJiZuPHI/XCJsZWZ0XCI6XCJyaWdodFwiKSx0LmxvY2tYfHwobz1uPjA/XCJ1cFwiOlwiZG93blwiKSx0LmZvcmNlPnRoaXMub3B0aW9ucy50aHJlc2hvbGQpe3ZhciBkLGE9e307Zm9yKGQgaW4gdGhpcy5kaXJlY3Rpb24pdGhpcy5kaXJlY3Rpb24uaGFzT3duUHJvcGVydHkoZCkmJihhW2RdPXRoaXMuZGlyZWN0aW9uW2RdKTt2YXIgcD17fTtmb3IoZCBpbiB0aGlzLmRpcmVjdGlvbj17eDplLHk6byxhbmdsZTppfSx0LmRpcmVjdGlvbj10aGlzLmRpcmVjdGlvbixhKWFbZF09PT10aGlzLmRpcmVjdGlvbltkXSYmKHBbZF09ITApO2lmKHAueCYmcC55JiZwLmFuZ2xlKXJldHVybiB0O3AueCYmcC55fHx0aGlzLnRyaWdnZXIoXCJwbGFpblwiLHQpLHAueHx8dGhpcy50cmlnZ2VyKFwicGxhaW46XCIrZSx0KSxwLnl8fHRoaXMudHJpZ2dlcihcInBsYWluOlwiK28sdCkscC5hbmdsZXx8dGhpcy50cmlnZ2VyKFwiZGlyIGRpcjpcIitpLHQpfWVsc2UgdGhpcy5yZXNldERpcmVjdGlvbigpO3JldHVybiB0fTt2YXIgVD13O2Z1bmN0aW9uIGsodCxpKXtyZXR1cm4gdGhpcy5uaXBwbGVzPVtdLHRoaXMuaWRsZXM9W10sdGhpcy5hY3RpdmVzPVtdLHRoaXMuaWRzPVtdLHRoaXMucHJlc3N1cmVJbnRlcnZhbHM9e30sdGhpcy5tYW5hZ2VyPXQsdGhpcy5pZD1rLmlkLGsuaWQrPTEsdGhpcy5kZWZhdWx0cz17em9uZTpkb2N1bWVudC5ib2R5LG11bHRpdG91Y2g6ITEsbWF4TnVtYmVyT2ZOaXBwbGVzOjEwLG1vZGU6XCJkeW5hbWljXCIscG9zaXRpb246e3RvcDowLGxlZnQ6MH0sY2F0Y2hEaXN0YW5jZToyMDAsc2l6ZToxMDAsdGhyZXNob2xkOi4xLGNvbG9yOlwid2hpdGVcIixmYWRlVGltZToyNTAsZGF0YU9ubHk6ITEscmVzdEpveXN0aWNrOiEwLHJlc3RPcGFjaXR5Oi41LGxvY2tYOiExLGxvY2tZOiExLGR5bmFtaWNQYWdlOiExfSx0aGlzLmNvbmZpZyhpKSxcInN0YXRpY1wiIT09dGhpcy5vcHRpb25zLm1vZGUmJlwic2VtaVwiIT09dGhpcy5vcHRpb25zLm1vZGV8fCh0aGlzLm9wdGlvbnMubXVsdGl0b3VjaD0hMSksdGhpcy5vcHRpb25zLm11bHRpdG91Y2h8fCh0aGlzLm9wdGlvbnMubWF4TnVtYmVyT2ZOaXBwbGVzPTEpLHRoaXMudXBkYXRlQm94KCksdGhpcy5wcmVwYXJlTmlwcGxlcygpLHRoaXMuYmluZGluZ3MoKSx0aGlzLmJlZ2luKCksdGhpcy5uaXBwbGVzfWsucHJvdG90eXBlPW5ldyBfLGsuY29uc3RydWN0b3I9ayxrLmlkPTAsay5wcm90b3R5cGUucHJlcGFyZU5pcHBsZXM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm5pcHBsZXM7dC5vbj10aGlzLm9uLmJpbmQodGhpcyksdC5vZmY9dGhpcy5vZmYuYmluZCh0aGlzKSx0Lm9wdGlvbnM9dGhpcy5vcHRpb25zLHQuZGVzdHJveT10aGlzLmRlc3Ryb3kuYmluZCh0aGlzKSx0Lmlkcz10aGlzLmlkcyx0LmlkPXRoaXMuaWQsdC5wcm9jZXNzT25Nb3ZlPXRoaXMucHJvY2Vzc09uTW92ZS5iaW5kKHRoaXMpLHQucHJvY2Vzc09uRW5kPXRoaXMucHJvY2Vzc09uRW5kLmJpbmQodGhpcyksdC5nZXQ9ZnVuY3Rpb24oaSl7aWYodm9pZCAwPT09aSlyZXR1cm4gdFswXTtmb3IodmFyIGU9MCxvPXQubGVuZ3RoO2U8bztlKz0xKWlmKHRbZV0uaWRlbnRpZmllcj09PWkpcmV0dXJuIHRbZV07cmV0dXJuITF9fSxrLnByb3RvdHlwZS5iaW5kaW5ncz1mdW5jdGlvbigpe3RoaXMuYmluZEV2dCh0aGlzLm9wdGlvbnMuem9uZSxcInN0YXJ0XCIpLHRoaXMub3B0aW9ucy56b25lLnN0eWxlLnRvdWNoQWN0aW9uPVwibm9uZVwiLHRoaXMub3B0aW9ucy56b25lLnN0eWxlLm1zVG91Y2hBY3Rpb249XCJub25lXCJ9LGsucHJvdG90eXBlLmJlZ2luPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zO2lmKFwic3RhdGljXCI9PT10Lm1vZGUpe3ZhciBpPXRoaXMuY3JlYXRlTmlwcGxlKHQucG9zaXRpb24sdGhpcy5tYW5hZ2VyLmdldElkZW50aWZpZXIoKSk7aS5hZGQoKSx0aGlzLmlkbGVzLnB1c2goaSl9fSxrLnByb3RvdHlwZS5jcmVhdGVOaXBwbGU9ZnVuY3Rpb24odCxpKXt2YXIgZT1jKCksbz17fSxuPXRoaXMub3B0aW9ucztpZih0LngmJnQueSlvPXt4OnQueC0oZS54K3RoaXMuYm94LmxlZnQpLHk6dC55LShlLnkrdGhpcy5ib3gudG9wKX07ZWxzZSBpZih0LnRvcHx8dC5yaWdodHx8dC5ib3R0b218fHQubGVmdCl7dmFyIHM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTtzLnN0eWxlLmRpc3BsYXk9XCJoaWRkZW5cIixzLnN0eWxlLnRvcD10LnRvcCxzLnN0eWxlLnJpZ2h0PXQucmlnaHQscy5zdHlsZS5ib3R0b209dC5ib3R0b20scy5zdHlsZS5sZWZ0PXQubGVmdCxzLnN0eWxlLnBvc2l0aW9uPVwiYWJzb2x1dGVcIixuLnpvbmUuYXBwZW5kQ2hpbGQocyk7dmFyIHI9cy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtuLnpvbmUucmVtb3ZlQ2hpbGQocyksbz10LHQ9e3g6ci5sZWZ0K2UueCx5OnIudG9wK2UueX19dmFyIGQ9bmV3IFQodGhpcyx7Y29sb3I6bi5jb2xvcixzaXplOm4uc2l6ZSx0aHJlc2hvbGQ6bi50aHJlc2hvbGQsZmFkZVRpbWU6bi5mYWRlVGltZSxkYXRhT25seTpuLmRhdGFPbmx5LHJlc3RKb3lzdGljazpuLnJlc3RKb3lzdGljayxyZXN0T3BhY2l0eTpuLnJlc3RPcGFjaXR5LG1vZGU6bi5tb2RlLGlkZW50aWZpZXI6aSxwb3NpdGlvbjp0LHpvbmU6bi56b25lLGZyb250UG9zaXRpb246e3g6MCx5OjB9fSk7cmV0dXJuIG4uZGF0YU9ubHl8fChoKGQudWkuZWwsbyksaChkLnVpLmZyb250LGQuZnJvbnRQb3NpdGlvbikpLHRoaXMubmlwcGxlcy5wdXNoKGQpLHRoaXMudHJpZ2dlcihcImFkZGVkIFwiK2QuaWRlbnRpZmllcitcIjphZGRlZFwiLGQpLHRoaXMubWFuYWdlci50cmlnZ2VyKFwiYWRkZWQgXCIrZC5pZGVudGlmaWVyK1wiOmFkZGVkXCIsZCksdGhpcy5iaW5kTmlwcGxlKGQpLGR9LGsucHJvdG90eXBlLnVwZGF0ZUJveD1mdW5jdGlvbigpe3RoaXMuYm94PXRoaXMub3B0aW9ucy56b25lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpfSxrLnByb3RvdHlwZS5iaW5kTmlwcGxlPWZ1bmN0aW9uKHQpe3ZhciBpLGU9dGhpcyxvPWZ1bmN0aW9uKHQsbyl7aT10LnR5cGUrXCIgXCIrby5pZCtcIjpcIit0LnR5cGUsZS50cmlnZ2VyKGksbyl9O3Qub24oXCJkZXN0cm95ZWRcIixlLm9uRGVzdHJveWVkLmJpbmQoZSkpLHQub24oXCJzaG93biBoaWRkZW4gcmVzdGVkIGRpciBwbGFpblwiLG8pLHQub24oXCJkaXI6dXAgZGlyOnJpZ2h0IGRpcjpkb3duIGRpcjpsZWZ0XCIsbyksdC5vbihcInBsYWluOnVwIHBsYWluOnJpZ2h0IHBsYWluOmRvd24gcGxhaW46bGVmdFwiLG8pfSxrLnByb3RvdHlwZS5wcmVzc3VyZUZuPWZ1bmN0aW9uKHQsaSxlKXt2YXIgbz10aGlzLG49MDtjbGVhckludGVydmFsKG8ucHJlc3N1cmVJbnRlcnZhbHNbZV0pLG8ucHJlc3N1cmVJbnRlcnZhbHNbZV09c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXt2YXIgZT10LmZvcmNlfHx0LnByZXNzdXJlfHx0LndlYmtpdEZvcmNlfHwwO2UhPT1uJiYoaS50cmlnZ2VyKFwicHJlc3N1cmVcIixlKSxvLnRyaWdnZXIoXCJwcmVzc3VyZSBcIitpLmlkZW50aWZpZXIrXCI6cHJlc3N1cmVcIixlKSxuPWUpfS5iaW5kKG8pLDEwMCl9LGsucHJvdG90eXBlLm9uc3RhcnQ9ZnVuY3Rpb24odCl7dmFyIGk9dGhpcyxlPWkub3B0aW9ucyxvPXQ7dD1wKHQpLGkudXBkYXRlQm94KCk7cmV0dXJuIHkodCxmdW5jdGlvbihuKXtpLmFjdGl2ZXMubGVuZ3RoPGUubWF4TnVtYmVyT2ZOaXBwbGVzP2kucHJvY2Vzc09uU3RhcnQobik6by50eXBlLm1hdGNoKC9edG91Y2gvKSYmKE9iamVjdC5rZXlzKGkubWFuYWdlci5pZHMpLmZvckVhY2goZnVuY3Rpb24oZSl7aWYoT2JqZWN0LnZhbHVlcyhvLnRvdWNoZXMpLmZpbmRJbmRleChmdW5jdGlvbih0KXtyZXR1cm4gdC5pZGVudGlmaWVyPT09ZX0pPDApe3ZhciBuPVt0WzBdXTtuLmlkZW50aWZpZXI9ZSxpLnByb2Nlc3NPbkVuZChuKX19KSxpLmFjdGl2ZXMubGVuZ3RoPGUubWF4TnVtYmVyT2ZOaXBwbGVzJiZpLnByb2Nlc3NPblN0YXJ0KG4pKX0pLGkubWFuYWdlci5iaW5kRG9jdW1lbnQoKSwhMX0say5wcm90b3R5cGUucHJvY2Vzc09uU3RhcnQ9ZnVuY3Rpb24odCl7dmFyIGksZT10aGlzLG89ZS5vcHRpb25zLHM9ZS5tYW5hZ2VyLmdldElkZW50aWZpZXIodCkscj10LmZvcmNlfHx0LnByZXNzdXJlfHx0LndlYmtpdEZvcmNlfHwwLGQ9e3g6dC5wYWdlWCx5OnQucGFnZVl9LGE9ZS5nZXRPckNyZWF0ZShzLGQpO2EuaWRlbnRpZmllciE9PXMmJmUubWFuYWdlci5yZW1vdmVJZGVudGlmaWVyKGEuaWRlbnRpZmllciksYS5pZGVudGlmaWVyPXM7dmFyIHA9ZnVuY3Rpb24oaSl7aS50cmlnZ2VyKFwic3RhcnRcIixpKSxlLnRyaWdnZXIoXCJzdGFydCBcIitpLmlkK1wiOnN0YXJ0XCIsaSksaS5zaG93KCkscj4wJiZlLnByZXNzdXJlRm4odCxpLGkuaWRlbnRpZmllciksZS5wcm9jZXNzT25Nb3ZlKHQpfTtpZigoaT1lLmlkbGVzLmluZGV4T2YoYSkpPj0wJiZlLmlkbGVzLnNwbGljZShpLDEpLGUuYWN0aXZlcy5wdXNoKGEpLGUuaWRzLnB1c2goYS5pZGVudGlmaWVyKSxcInNlbWlcIiE9PW8ubW9kZSlwKGEpO2Vsc2V7aWYoIShuKGQsYS5wb3NpdGlvbik8PW8uY2F0Y2hEaXN0YW5jZSkpcmV0dXJuIGEuZGVzdHJveSgpLHZvaWQgZS5wcm9jZXNzT25TdGFydCh0KTtwKGEpfXJldHVybiBhfSxrLnByb3RvdHlwZS5nZXRPckNyZWF0ZT1mdW5jdGlvbih0LGkpe3ZhciBlLG89dGhpcy5vcHRpb25zO3JldHVybi8oc2VtaXxzdGF0aWMpLy50ZXN0KG8ubW9kZSk/KGU9dGhpcy5pZGxlc1swXSk/KHRoaXMuaWRsZXMuc3BsaWNlKDAsMSksZSk6XCJzZW1pXCI9PT1vLm1vZGU/dGhpcy5jcmVhdGVOaXBwbGUoaSx0KTooY29uc29sZS53YXJuKFwiQ291ZGxuJ3QgZmluZCB0aGUgbmVlZGVkIG5pcHBsZS5cIiksITEpOmU9dGhpcy5jcmVhdGVOaXBwbGUoaSx0KX0say5wcm90b3R5cGUucHJvY2Vzc09uTW92ZT1mdW5jdGlvbih0KXt2YXIgaT10aGlzLm9wdGlvbnMsZT10aGlzLm1hbmFnZXIuZ2V0SWRlbnRpZmllcih0KSxvPXRoaXMubmlwcGxlcy5nZXQoZSk7aWYoZnVuY3Rpb24odCl7cmV0dXJuIGlzTmFOKHQuYnV0dG9ucyk/MCE9PXQucHJlc3N1cmU6MCE9PXQuYnV0dG9uc30odCkpe2lmKCFvKXJldHVybiBjb25zb2xlLmVycm9yKFwiRm91bmQgem9tYmllIGpveXN0aWNrIHdpdGggSUQgXCIrZSksdm9pZCB0aGlzLm1hbmFnZXIucmVtb3ZlSWRlbnRpZmllcihlKTtpZihpLmR5bmFtaWNQYWdlKXt2YXIgZD1jKCk7cD1vLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG8ucG9zaXRpb249e3g6ZC54K3AubGVmdCx5OmQueStwLnRvcH19by5pZGVudGlmaWVyPWU7dmFyIGE9by5vcHRpb25zLnNpemUvMixwPXt4OnQucGFnZVgseTp0LnBhZ2VZfTtpLmxvY2tYJiYocC55PW8ucG9zaXRpb24ueSksaS5sb2NrWSYmKHAueD1vLnBvc2l0aW9uLngpO3ZhciBsLHUsZix5LG0sdixnLGIseD1uKHAsby5wb3NpdGlvbiksTz0obD1wLHU9by5wb3NpdGlvbixmPXUueC1sLngseT11LnktbC55LHIoTWF0aC5hdGFuMih5LGYpKSksXz1zKE8pLHc9eC9hLFQ9e2Rpc3RhbmNlOngscG9zaXRpb246cH07eD5hJiYoeD1hLG09by5wb3NpdGlvbix2PXgsYj17eDowLHk6MH0sZz1zKGc9TyksYi54PW0ueC12Kk1hdGguY29zKGcpLGIueT1tLnktdipNYXRoLnNpbihnKSxwPWIpO3ZhciBrPXAueC1vLnBvc2l0aW9uLngsRT1wLnktby5wb3NpdGlvbi55O28uZnJvbnRQb3NpdGlvbj17eDprLHk6RX0saS5kYXRhT25seXx8aChvLnVpLmZyb250LG8uZnJvbnRQb3NpdGlvbik7dmFyIFA9e2lkZW50aWZpZXI6by5pZGVudGlmaWVyLHBvc2l0aW9uOnAsZm9yY2U6dyxwcmVzc3VyZTp0LmZvcmNlfHx0LnByZXNzdXJlfHx0LndlYmtpdEZvcmNlfHwwLGRpc3RhbmNlOngsYW5nbGU6e3JhZGlhbjpfLGRlZ3JlZTpPfSx2ZWN0b3I6e3g6ay9hLHk6LUUvYX0scmF3OlQsaW5zdGFuY2U6byxsb2NrWDppLmxvY2tYLGxvY2tZOmkubG9ja1l9OyhQPW8uY29tcHV0ZURpcmVjdGlvbihQKSkuYW5nbGU9e3JhZGlhbjpzKDE4MC1PKSxkZWdyZWU6MTgwLU99LG8udHJpZ2dlcihcIm1vdmVcIixQKSx0aGlzLnRyaWdnZXIoXCJtb3ZlIFwiK28uaWQrXCI6bW92ZVwiLFApfWVsc2UgdGhpcy5wcm9jZXNzT25FbmQodCl9LGsucHJvdG90eXBlLnByb2Nlc3NPbkVuZD1mdW5jdGlvbih0KXt2YXIgaT10aGlzLGU9aS5vcHRpb25zLG89aS5tYW5hZ2VyLmdldElkZW50aWZpZXIodCksbj1pLm5pcHBsZXMuZ2V0KG8pLHM9aS5tYW5hZ2VyLnJlbW92ZUlkZW50aWZpZXIobi5pZGVudGlmaWVyKTtuJiYoZS5kYXRhT25seXx8bi5oaWRlKGZ1bmN0aW9uKCl7XCJkeW5hbWljXCI9PT1lLm1vZGUmJihuLnRyaWdnZXIoXCJyZW1vdmVkXCIsbiksaS50cmlnZ2VyKFwicmVtb3ZlZCBcIituLmlkK1wiOnJlbW92ZWRcIixuKSxpLm1hbmFnZXIudHJpZ2dlcihcInJlbW92ZWQgXCIrbi5pZCtcIjpyZW1vdmVkXCIsbiksbi5kZXN0cm95KCkpfSksY2xlYXJJbnRlcnZhbChpLnByZXNzdXJlSW50ZXJ2YWxzW24uaWRlbnRpZmllcl0pLG4ucmVzZXREaXJlY3Rpb24oKSxuLnRyaWdnZXIoXCJlbmRcIixuKSxpLnRyaWdnZXIoXCJlbmQgXCIrbi5pZCtcIjplbmRcIixuKSxpLmlkcy5pbmRleE9mKG4uaWRlbnRpZmllcik+PTAmJmkuaWRzLnNwbGljZShpLmlkcy5pbmRleE9mKG4uaWRlbnRpZmllciksMSksaS5hY3RpdmVzLmluZGV4T2Yobik+PTAmJmkuYWN0aXZlcy5zcGxpY2UoaS5hY3RpdmVzLmluZGV4T2YobiksMSksLyhzZW1pfHN0YXRpYykvLnRlc3QoZS5tb2RlKT9pLmlkbGVzLnB1c2gobik6aS5uaXBwbGVzLmluZGV4T2Yobik+PTAmJmkubmlwcGxlcy5zcGxpY2UoaS5uaXBwbGVzLmluZGV4T2YobiksMSksaS5tYW5hZ2VyLnVuYmluZERvY3VtZW50KCksLyhzZW1pfHN0YXRpYykvLnRlc3QoZS5tb2RlKSYmKGkubWFuYWdlci5pZHNbcy5pZF09cy5pZGVudGlmaWVyKSl9LGsucHJvdG90eXBlLm9uRGVzdHJveWVkPWZ1bmN0aW9uKHQsaSl7dGhpcy5uaXBwbGVzLmluZGV4T2YoaSk+PTAmJnRoaXMubmlwcGxlcy5zcGxpY2UodGhpcy5uaXBwbGVzLmluZGV4T2YoaSksMSksdGhpcy5hY3RpdmVzLmluZGV4T2YoaSk+PTAmJnRoaXMuYWN0aXZlcy5zcGxpY2UodGhpcy5hY3RpdmVzLmluZGV4T2YoaSksMSksdGhpcy5pZGxlcy5pbmRleE9mKGkpPj0wJiZ0aGlzLmlkbGVzLnNwbGljZSh0aGlzLmlkbGVzLmluZGV4T2YoaSksMSksdGhpcy5pZHMuaW5kZXhPZihpLmlkZW50aWZpZXIpPj0wJiZ0aGlzLmlkcy5zcGxpY2UodGhpcy5pZHMuaW5kZXhPZihpLmlkZW50aWZpZXIpLDEpLHRoaXMubWFuYWdlci5yZW1vdmVJZGVudGlmaWVyKGkuaWRlbnRpZmllciksdGhpcy5tYW5hZ2VyLnVuYmluZERvY3VtZW50KCl9LGsucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy51bmJpbmRFdnQodGhpcy5vcHRpb25zLnpvbmUsXCJzdGFydFwiKSx0aGlzLm5pcHBsZXMuZm9yRWFjaChmdW5jdGlvbih0KXt0LmRlc3Ryb3koKX0pLHRoaXMucHJlc3N1cmVJbnRlcnZhbHMpdGhpcy5wcmVzc3VyZUludGVydmFscy5oYXNPd25Qcm9wZXJ0eSh0KSYmY2xlYXJJbnRlcnZhbCh0aGlzLnByZXNzdXJlSW50ZXJ2YWxzW3RdKTt0aGlzLnRyaWdnZXIoXCJkZXN0cm95ZWRcIix0aGlzLm5pcHBsZXMpLHRoaXMubWFuYWdlci51bmJpbmREb2N1bWVudCgpLHRoaXMub2ZmKCl9O3ZhciBFPWs7ZnVuY3Rpb24gUCh0KXt2YXIgaSxlPXRoaXM7cmV0dXJuIGUuaWRzPXt9LGUuaW5kZXg9MCxlLmNvbGxlY3Rpb25zPVtdLGUuY29uZmlnKHQpLGUucHJlcGFyZUNvbGxlY3Rpb25zKCksZCh3aW5kb3csXCJyZXNpemVcIixmdW5jdGlvbih0KXtjbGVhclRpbWVvdXQoaSksaT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIHQsaT1jKCk7ZS5jb2xsZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuZm9yRWFjaChmdW5jdGlvbihlKXt0PWUuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksZS5wb3NpdGlvbj17eDppLngrdC5sZWZ0LHk6aS55K3QudG9wfX0pfSl9LDEwMCl9KSxlLmNvbGxlY3Rpb25zfVAucHJvdG90eXBlPW5ldyBfLFAuY29uc3RydWN0b3I9UCxQLnByb3RvdHlwZS5wcmVwYXJlQ29sbGVjdGlvbnM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3QuY29sbGVjdGlvbnMuY3JlYXRlPXQuY3JlYXRlLmJpbmQodCksdC5jb2xsZWN0aW9ucy5vbj10Lm9uLmJpbmQodCksdC5jb2xsZWN0aW9ucy5vZmY9dC5vZmYuYmluZCh0KSx0LmNvbGxlY3Rpb25zLmRlc3Ryb3k9dC5kZXN0cm95LmJpbmQodCksdC5jb2xsZWN0aW9ucy5nZXQ9ZnVuY3Rpb24oaSl7dmFyIGU7cmV0dXJuIHQuY29sbGVjdGlvbnMuZXZlcnkoZnVuY3Rpb24odCl7cmV0dXJuIShlPXQuZ2V0KGkpKX0pLGV9fSxQLnByb3RvdHlwZS5jcmVhdGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY3JlYXRlQ29sbGVjdGlvbih0KX0sUC5wcm90b3R5cGUuY3JlYXRlQ29sbGVjdGlvbj1mdW5jdGlvbih0KXt2YXIgaT1uZXcgRSh0aGlzLHQpO3JldHVybiB0aGlzLmJpbmRDb2xsZWN0aW9uKGkpLHRoaXMuY29sbGVjdGlvbnMucHVzaChpKSxpfSxQLnByb3RvdHlwZS5iaW5kQ29sbGVjdGlvbj1mdW5jdGlvbih0KXt2YXIgaSxlPXRoaXMsbz1mdW5jdGlvbih0LG8pe2k9dC50eXBlK1wiIFwiK28uaWQrXCI6XCIrdC50eXBlLGUudHJpZ2dlcihpLG8pfTt0Lm9uKFwiZGVzdHJveWVkXCIsZS5vbkRlc3Ryb3llZC5iaW5kKGUpKSx0Lm9uKFwic2hvd24gaGlkZGVuIHJlc3RlZCBkaXIgcGxhaW5cIixvKSx0Lm9uKFwiZGlyOnVwIGRpcjpyaWdodCBkaXI6ZG93biBkaXI6bGVmdFwiLG8pLHQub24oXCJwbGFpbjp1cCBwbGFpbjpyaWdodCBwbGFpbjpkb3duIHBsYWluOmxlZnRcIixvKX0sUC5wcm90b3R5cGUuYmluZERvY3VtZW50PWZ1bmN0aW9uKCl7dGhpcy5iaW5kZWR8fCh0aGlzLmJpbmRFdnQoZG9jdW1lbnQsXCJtb3ZlXCIpLmJpbmRFdnQoZG9jdW1lbnQsXCJlbmRcIiksdGhpcy5iaW5kZWQ9ITApfSxQLnByb3RvdHlwZS51bmJpbmREb2N1bWVudD1mdW5jdGlvbih0KXtPYmplY3Qua2V5cyh0aGlzLmlkcykubGVuZ3RoJiYhMCE9PXR8fCh0aGlzLnVuYmluZEV2dChkb2N1bWVudCxcIm1vdmVcIikudW5iaW5kRXZ0KGRvY3VtZW50LFwiZW5kXCIpLHRoaXMuYmluZGVkPSExKX0sUC5wcm90b3R5cGUuZ2V0SWRlbnRpZmllcj1mdW5jdGlvbih0KXt2YXIgaTtyZXR1cm4gdD92b2lkIDA9PT0oaT12b2lkIDA9PT10LmlkZW50aWZpZXI/dC5wb2ludGVySWQ6dC5pZGVudGlmaWVyKSYmKGk9dGhpcy5sYXRlc3R8fDApOmk9dGhpcy5pbmRleCx2b2lkIDA9PT10aGlzLmlkc1tpXSYmKHRoaXMuaWRzW2ldPXRoaXMuaW5kZXgsdGhpcy5pbmRleCs9MSksdGhpcy5sYXRlc3Q9aSx0aGlzLmlkc1tpXX0sUC5wcm90b3R5cGUucmVtb3ZlSWRlbnRpZmllcj1mdW5jdGlvbih0KXt2YXIgaT17fTtmb3IodmFyIGUgaW4gdGhpcy5pZHMpaWYodGhpcy5pZHNbZV09PT10KXtpLmlkPWUsaS5pZGVudGlmaWVyPXRoaXMuaWRzW2VdLGRlbGV0ZSB0aGlzLmlkc1tlXTticmVha31yZXR1cm4gaX0sUC5wcm90b3R5cGUub25tb3ZlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm9uQW55KFwibW92ZVwiLHQpLCExfSxQLnByb3RvdHlwZS5vbmVuZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5vbkFueShcImVuZFwiLHQpLCExfSxQLnByb3RvdHlwZS5vbmNhbmNlbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5vbkFueShcImVuZFwiLHQpLCExfSxQLnByb3RvdHlwZS5vbkFueT1mdW5jdGlvbih0LGkpe3ZhciBlLG89dGhpcyxuPVwicHJvY2Vzc09uXCIrdC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpO2k9cChpKTtyZXR1cm4geShpLGZ1bmN0aW9uKHQpe2U9by5nZXRJZGVudGlmaWVyKHQpLHkoby5jb2xsZWN0aW9ucyxmdW5jdGlvbih0LGksZSl7ZS5pZHMuaW5kZXhPZihpKT49MCYmKGVbbl0odCksdC5fZm91bmRfPSEwKX0uYmluZChudWxsLHQsZSkpLHQuX2ZvdW5kX3x8by5yZW1vdmVJZGVudGlmaWVyKGUpfSksITF9LFAucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLnVuYmluZERvY3VtZW50KCEwKSx0aGlzLmlkcz17fSx0aGlzLmluZGV4PTAsdGhpcy5jb2xsZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuZGVzdHJveSgpfSksdGhpcy5vZmYoKX0sUC5wcm90b3R5cGUub25EZXN0cm95ZWQ9ZnVuY3Rpb24odCxpKXtpZih0aGlzLmNvbGxlY3Rpb25zLmluZGV4T2YoaSk8MClyZXR1cm4hMTt0aGlzLmNvbGxlY3Rpb25zLnNwbGljZSh0aGlzLmNvbGxlY3Rpb25zLmluZGV4T2YoaSksMSl9O3ZhciBJPW5ldyBQO2kuZGVmYXVsdD17Y3JlYXRlOmZ1bmN0aW9uKHQpe3JldHVybiBJLmNyZWF0ZSh0KX0sZmFjdG9yeTpJfX1dKS5kZWZhdWx0fSk7IiwiLyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS40LjEgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJlxuXHRcdCFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHQhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKFxuXHRcdGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLnNlbGYgPT09IGZyZWVHbG9iYWxcblx0KSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGBwdW55Y29kZWAgb2JqZWN0LlxuXHQgKiBAbmFtZSBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdHZhciBwdW55Y29kZSxcblxuXHQvKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5cdG1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuXHQvKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG5cdGJhc2UgPSAzNixcblx0dE1pbiA9IDEsXG5cdHRNYXggPSAyNixcblx0c2tldyA9IDM4LFxuXHRkYW1wID0gNzAwLFxuXHRpbml0aWFsQmlhcyA9IDcyLFxuXHRpbml0aWFsTiA9IDEyOCwgLy8gMHg4MFxuXHRkZWxpbWl0ZXIgPSAnLScsIC8vICdcXHgyRCdcblxuXHQvKiogUmVndWxhciBleHByZXNzaW9ucyAqL1xuXHRyZWdleFB1bnljb2RlID0gL154bi0tLyxcblx0cmVnZXhOb25BU0NJSSA9IC9bXlxceDIwLVxceDdFXS8sIC8vIHVucHJpbnRhYmxlIEFTQ0lJIGNoYXJzICsgbm9uLUFTQ0lJIGNoYXJzXG5cdHJlZ2V4U2VwYXJhdG9ycyA9IC9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2csIC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcblxuXHQvKiogRXJyb3IgbWVzc2FnZXMgKi9cblx0ZXJyb3JzID0ge1xuXHRcdCdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG5cdFx0J25vdC1iYXNpYyc6ICdJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpJyxcblx0XHQnaW52YWxpZC1pbnB1dCc6ICdJbnZhbGlkIGlucHV0J1xuXHR9LFxuXG5cdC8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi9cblx0YmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluLFxuXHRmbG9vciA9IE1hdGguZmxvb3IsXG5cdHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUsXG5cblx0LyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqL1xuXHRrZXk7XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBlcnJvciB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cblx0ICogQHJldHVybnMge0Vycm9yfSBUaHJvd3MgYSBgUmFuZ2VFcnJvcmAgd2l0aCB0aGUgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlLlxuXHQgKi9cblx0ZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuXHRcdHRocm93IG5ldyBSYW5nZUVycm9yKGVycm9yc1t0eXBlXSk7XG5cdH1cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGBBcnJheSNtYXBgIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeSBhcnJheVxuXHQgKiBpdGVtLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IG9mIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXAoYXJyYXksIGZuKSB7XG5cdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0d2hpbGUgKGxlbmd0aC0tKSB7XG5cdFx0XHRyZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgc2ltcGxlIGBBcnJheSNtYXBgLWxpa2Ugd3JhcHBlciB0byB3b3JrIHdpdGggZG9tYWluIG5hbWUgc3RyaW5ncyBvciBlbWFpbFxuXHQgKiBhZGRyZXNzZXMuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeVxuXHQgKiBjaGFyYWN0ZXIuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgc3RyaW5nIG9mIGNoYXJhY3RlcnMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrXG5cdCAqIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwRG9tYWluKHN0cmluZywgZm4pIHtcblx0XHR2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoJ0AnKTtcblx0XHR2YXIgcmVzdWx0ID0gJyc7XG5cdFx0aWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdC8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmVcblx0XHRcdC8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuXG5cdFx0XHRyZXN1bHQgPSBwYXJ0c1swXSArICdAJztcblx0XHRcdHN0cmluZyA9IHBhcnRzWzFdO1xuXHRcdH1cblx0XHQvLyBBdm9pZCBgc3BsaXQocmVnZXgpYCBmb3IgSUU4IGNvbXBhdGliaWxpdHkuIFNlZSAjMTcuXG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx4MkUnKTtcblx0XHR2YXIgbGFiZWxzID0gc3RyaW5nLnNwbGl0KCcuJyk7XG5cdFx0dmFyIGVuY29kZWQgPSBtYXAobGFiZWxzLCBmbikuam9pbignLicpO1xuXHRcdHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcblx0ICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuXHQgKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuXHQgKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcblx0ICogbWF0Y2hpbmcgVVRGLTE2LlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmVuY29kZWBcblx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGRlY29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgY291bnRlciA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICBleHRyYTtcblx0XHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZW5jb2RlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBuZXcgVW5pY29kZSBzdHJpbmcgKFVDUy0yKS5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHRyZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0fSkuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLlxuXHQgKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZlxuXHQgKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHtcblx0XHRpZiAoY29kZVBvaW50IC0gNDggPCAxMCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDIyO1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gNjUgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDY1O1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gOTcgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDk3O1xuXHRcdH1cblx0XHRyZXR1cm4gYmFzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gZGlnaXQgVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZVxuXHQgKiBgMGAgdG8gYGJhc2UgLSAxYC4gSWYgYGZsYWdgIGlzIG5vbi16ZXJvLCB0aGUgdXBwZXJjYXNlIGZvcm0gaXNcblx0ICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcblx0ICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS5cblx0ICovXG5cdGZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuXHRcdC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG5cdFx0Ly8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG5cdFx0cmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuXHQgKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdFx0dmFyIGsgPSAwO1xuXHRcdGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG5cdFx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRcdGZvciAoLyogbm8gaW5pdGlhbGl6YXRpb24gKi87IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG5cdFx0XHRkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG5cdFx0fVxuXHRcdHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHRcdC8vIERvbid0IHVzZSBVQ1MtMlxuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG5cdFx0ICAgIG91dCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIG4gPSBpbml0aWFsTixcblx0XHQgICAgYmlhcyA9IGluaXRpYWxCaWFzLFxuXHRcdCAgICBiYXNpYyxcblx0XHQgICAgaixcblx0XHQgICAgaW5kZXgsXG5cdFx0ICAgIG9sZGksXG5cdFx0ICAgIHcsXG5cdFx0ICAgIGssXG5cdFx0ICAgIGRpZ2l0LFxuXHRcdCAgICB0LFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgYmFzZU1pbnVzVDtcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHM6IGxldCBgYmFzaWNgIGJlIHRoZSBudW1iZXIgb2YgaW5wdXQgY29kZVxuXHRcdC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG5cdFx0Ly8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cblx0XHRiYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7XG5cdFx0aWYgKGJhc2ljIDwgMCkge1xuXHRcdFx0YmFzaWMgPSAwO1xuXHRcdH1cblxuXHRcdGZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7XG5cdFx0XHQvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcblx0XHRcdGlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHtcblx0XHRcdFx0ZXJyb3IoJ25vdC1iYXNpYycpO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZVxuXHRcdC8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuXG5cblx0XHRmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLykge1xuXG5cdFx0XHQvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuXG5cdFx0XHQvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG5cdFx0XHQvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuXHRcdFx0Ly8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmdcblx0XHRcdC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG5cdFx0XHRmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cblx0XHRcdFx0aWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGkgKz0gZGlnaXQgKiB3O1xuXHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPCB0KSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblxuXHRcdFx0fVxuXG5cdFx0XHRvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTtcblx0XHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0XHQvLyBgaWAgd2FzIHN1cHBvc2VkIHRvIHdyYXAgYXJvdW5kIGZyb20gYG91dGAgdG8gYDBgLFxuXHRcdFx0Ly8gaW5jcmVtZW50aW5nIGBuYCBlYWNoIHRpbWUsIHNvIHdlJ2xsIGZpeCB0aGF0IG5vdzpcblx0XHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdG4gKz0gZmxvb3IoaSAvIG91dCk7XG5cdFx0XHRpICU9IG91dDtcblxuXHRcdFx0Ly8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dFxuXHRcdFx0b3V0cHV0LnNwbGljZShpKyssIDAsIG4pO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuXHQgKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcblx0XHR2YXIgbixcblx0XHQgICAgZGVsdGEsXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50LFxuXHRcdCAgICBiYXNpY0xlbmd0aCxcblx0XHQgICAgYmlhcyxcblx0XHQgICAgaixcblx0XHQgICAgbSxcblx0XHQgICAgcSxcblx0XHQgICAgayxcblx0XHQgICAgdCxcblx0XHQgICAgY3VycmVudFZhbHVlLFxuXHRcdCAgICBvdXRwdXQgPSBbXSxcblx0XHQgICAgLyoqIGBpbnB1dExlbmd0aGAgd2lsbCBob2xkIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgaW4gYGlucHV0YC4gKi9cblx0XHQgICAgaW5wdXRMZW5ndGgsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsXG5cdFx0ICAgIGJhc2VNaW51c1QsXG5cdFx0ICAgIHFNaW51c1Q7XG5cblx0XHQvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBVbmljb2RlXG5cdFx0aW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuXHRcdC8vIENhY2hlIHRoZSBsZW5ndGhcblx0XHRpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuXHRcdC8vIEluaXRpYWxpemUgdGhlIHN0YXRlXG5cdFx0biA9IGluaXRpYWxOO1xuXHRcdGRlbHRhID0gMDtcblx0XHRiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzXG5cdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcblx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXG5cdFx0Ly8gYGhhbmRsZWRDUENvdW50YCBpcyB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cdFx0Ly8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG5cdFx0Ly8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgLSBpZiBpdCBpcyBub3QgZW1wdHkgLSB3aXRoIGEgZGVsaW1pdGVyXG5cdFx0aWYgKGJhc2ljTGVuZ3RoKSB7XG5cdFx0XHRvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcblx0XHR3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG5cdFx0XHQvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG5cdFx0XHQvLyBsYXJnZXIgb25lOlxuXHRcdFx0Zm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG5cdFx0XHRcdFx0bSA9IGN1cnJlbnRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG5cdFx0XHQvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvd1xuXHRcdFx0aGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuXHRcdFx0aWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG5cdFx0XHRuID0gbTtcblxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG5cdFx0XHRcdFx0Ly8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXJcblx0XHRcdFx0XHRmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cdFx0XHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblx0XHRcdFx0XHRcdGlmIChxIDwgdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHFNaW51c1QgPSBxIC0gdDtcblx0XHRcdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKFxuXHRcdFx0XHRcdFx0XHRzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7XG5cdFx0XHRcdFx0YmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcblx0XHRcdFx0XHRkZWx0YSA9IDA7XG5cdFx0XHRcdFx0KytoYW5kbGVkQ1BDb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQrK2RlbHRhO1xuXHRcdFx0KytuO1xuXG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzc1xuXHQgKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuXG5cdCAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuXHQgKiBjb252ZXJ0ZWQgdG8gVW5pY29kZS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogY29udmVydCB0byBVbmljb2RlLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcblx0ICogc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgVW5pY29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcblx0ICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluXG5cdCAqIEFTQ0lJLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGFcblx0ICogVW5pY29kZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3Jcblx0ICogZW1haWwgYWRkcmVzcy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xuXHRwdW55Y29kZSA9IHtcblx0XHQvKipcblx0XHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICovXG5cdFx0J3ZlcnNpb24nOiAnMS40LjEnLFxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG5cdFx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0XHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBPYmplY3Rcblx0XHQgKi9cblx0XHQndWNzMic6IHtcblx0XHRcdCdkZWNvZGUnOiB1Y3MyZGVjb2RlLFxuXHRcdFx0J2VuY29kZSc6IHVjczJlbmNvZGVcblx0XHR9LFxuXHRcdCdkZWNvZGUnOiBkZWNvZGUsXG5cdFx0J2VuY29kZSc6IGVuY29kZSxcblx0XHQndG9BU0NJSSc6IHRvQVNDSUksXG5cdFx0J3RvVW5pY29kZSc6IHRvVW5pY29kZVxuXHR9O1xuXG5cdC8qKiBFeHBvc2UgYHB1bnljb2RlYCAqL1xuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZSgncHVueWNvZGUnLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBwdW55Y29kZTtcblx0XHR9KTtcblx0fSBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG5cdFx0aWYgKG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzKSB7XG5cdFx0XHQvLyBpbiBOb2RlLmpzLCBpby5qcywgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdGZvciAoa2V5IGluIHB1bnljb2RlKSB7XG5cdFx0XHRcdHB1bnljb2RlLmhhc093blByb3BlcnR5KGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBwdW55Y29kZVtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Ly8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KHRoaXMpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3RyaW5nOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdzdHJpbmcnO1xuICB9LFxuICBpc09iamVjdDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT0gbnVsbDtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBtYXAob2JqZWN0S2V5cyhvYmopLCBmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gbWFwKG9ialtrXSwgZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuZnVuY3Rpb24gbWFwICh4cywgZikge1xuICBpZiAoeHMubWFwKSByZXR1cm4geHMubWFwKGYpO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXMucHVzaChmKHhzW2ldLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5PUk1fMkQgPSAxLjAgLyA0Ny4wO1xuZXhwb3J0cy5OT1JNXzNEID0gMS4wIC8gMTAzLjA7XG5leHBvcnRzLk5PUk1fNEQgPSAxLjAgLyAzMC4wO1xuZXhwb3J0cy5TUVVJU0hfMkQgPSAoTWF0aC5zcXJ0KDIgKyAxKSAtIDEpIC8gMjtcbmV4cG9ydHMuU1FVSVNIXzNEID0gKE1hdGguc3FydCgzICsgMSkgLSAxKSAvIDM7XG5leHBvcnRzLlNRVUlTSF80RCA9IChNYXRoLnNxcnQoNCArIDEpIC0gMSkgLyA0O1xuZXhwb3J0cy5TVFJFVENIXzJEID0gKDEgLyBNYXRoLnNxcnQoMiArIDEpIC0gMSkgLyAyO1xuZXhwb3J0cy5TVFJFVENIXzNEID0gKDEgLyBNYXRoLnNxcnQoMyArIDEpIC0gMSkgLyAzO1xuZXhwb3J0cy5TVFJFVENIXzREID0gKDEgLyBNYXRoLnNxcnQoNCArIDEpIC0gMSkgLyA0O1xuZXhwb3J0cy5iYXNlMkQgPSBbXG4gICAgWzEsIDEsIDAsIDEsIDAsIDEsIDAsIDAsIDBdLFxuICAgIFsxLCAxLCAwLCAxLCAwLCAxLCAyLCAxLCAxXVxuXTtcbmV4cG9ydHMuYmFzZTNEID0gW1xuICAgIFswLCAwLCAwLCAwLCAxLCAxLCAwLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAwLCAxXSxcbiAgICBbMiwgMSwgMSwgMCwgMiwgMSwgMCwgMSwgMiwgMCwgMSwgMSwgMywgMSwgMSwgMV0sXG4gICAgWzEsIDEsIDAsIDAsIDEsIDAsIDEsIDAsIDEsIDAsIDAsIDEsIDIsIDEsIDEsIDAsIDIsIDEsIDAsIDEsIDIsIDAsIDEsIDFdXG5dO1xuZXhwb3J0cy5iYXNlNEQgPSBbXG4gICAgWzAsIDAsIDAsIDAsIDAsIDEsIDEsIDAsIDAsIDAsIDEsIDAsIDEsIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDEsIDAsIDAsIDAsIDFdLFxuICAgIFszLCAxLCAxLCAxLCAwLCAzLCAxLCAxLCAwLCAxLCAzLCAxLCAwLCAxLCAxLCAzLCAwLCAxLCAxLCAxLCA0LCAxLCAxLCAxLCAxXSxcbiAgICBbXG4gICAgICAgIDEsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDIsXG4gICAgICAgIDEsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDIsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDIsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDIsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDIsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDIsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDFcbiAgICBdLFxuICAgIFtcbiAgICAgICAgMyxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMyxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMyxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMyxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMixcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMixcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMixcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMixcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMixcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMixcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMVxuICAgIF1cbl07XG5leHBvcnRzLmdyYWRpZW50czJEID0gW1xuICAgIDUsXG4gICAgMixcbiAgICAyLFxuICAgIDUsXG4gICAgLTUsXG4gICAgMixcbiAgICAtMixcbiAgICA1LFxuICAgIDUsXG4gICAgLTIsXG4gICAgMixcbiAgICAtNSxcbiAgICAtNSxcbiAgICAtMixcbiAgICAtMixcbiAgICAtNVxuXTtcbmV4cG9ydHMuZ3JhZGllbnRzM0QgPSBbXG4gICAgLTExLFxuICAgIDQsXG4gICAgNCxcbiAgICAtNCxcbiAgICAxMSxcbiAgICA0LFxuICAgIC00LFxuICAgIDQsXG4gICAgMTEsXG4gICAgMTEsXG4gICAgNCxcbiAgICA0LFxuICAgIDQsXG4gICAgMTEsXG4gICAgNCxcbiAgICA0LFxuICAgIDQsXG4gICAgMTEsXG4gICAgLTExLFxuICAgIC00LFxuICAgIDQsXG4gICAgLTQsXG4gICAgLTExLFxuICAgIDQsXG4gICAgLTQsXG4gICAgLTQsXG4gICAgMTEsXG4gICAgMTEsXG4gICAgLTQsXG4gICAgNCxcbiAgICA0LFxuICAgIC0xMSxcbiAgICA0LFxuICAgIDQsXG4gICAgLTQsXG4gICAgMTEsXG4gICAgLTExLFxuICAgIDQsXG4gICAgLTQsXG4gICAgLTQsXG4gICAgMTEsXG4gICAgLTQsXG4gICAgLTQsXG4gICAgNCxcbiAgICAtMTEsXG4gICAgMTEsXG4gICAgNCxcbiAgICAtNCxcbiAgICA0LFxuICAgIDExLFxuICAgIC00LFxuICAgIDQsXG4gICAgNCxcbiAgICAtMTEsXG4gICAgLTExLFxuICAgIC00LFxuICAgIC00LFxuICAgIC00LFxuICAgIC0xMSxcbiAgICAtNCxcbiAgICAtNCxcbiAgICAtNCxcbiAgICAtMTEsXG4gICAgMTEsXG4gICAgLTQsXG4gICAgLTQsXG4gICAgNCxcbiAgICAtMTEsXG4gICAgLTQsXG4gICAgNCxcbiAgICAtNCxcbiAgICAtMTFcbl07XG5leHBvcnRzLmdyYWRpZW50czREID0gW1xuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgLTMsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgLTMsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0zLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAzLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAzLFxuICAgIDMsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAzLFxuICAgIC0zLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAzLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAtMyxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMyxcbiAgICAzLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTMsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDMsXG4gICAgLTMsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAtMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0zLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMyxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMyxcbiAgICAtMyxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMyxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTMsXG4gICAgMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTMsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgLTEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0zLFxuICAgIC0zLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgLTMsXG4gICAgMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAzLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTMsXG4gICAgMyxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTMsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0zLFxuICAgIC0zLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0zLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTMsXG4gICAgMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0zLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTMsXG4gICAgLTEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMyxcbiAgICAtMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtM1xuXTtcbmV4cG9ydHMubG9va3VwUGFpcnMyRCA9IFtcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDQsXG4gICAgMSxcbiAgICAxNyxcbiAgICAwLFxuICAgIDIwLFxuICAgIDIsXG4gICAgMjEsXG4gICAgMixcbiAgICAyMixcbiAgICA1LFxuICAgIDIzLFxuICAgIDUsXG4gICAgMjYsXG4gICAgNCxcbiAgICAzOSxcbiAgICAzLFxuICAgIDQyLFxuICAgIDQsXG4gICAgNDMsXG4gICAgM1xuXTtcbmV4cG9ydHMubG9va3VwUGFpcnMzRCA9IFtcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICA1LFxuICAgIDEsXG4gICAgNixcbiAgICAwLFxuICAgIDcsXG4gICAgMCxcbiAgICAzMixcbiAgICAyLFxuICAgIDM0LFxuICAgIDIsXG4gICAgMTI5LFxuICAgIDEsXG4gICAgMTMzLFxuICAgIDEsXG4gICAgMTYwLFxuICAgIDUsXG4gICAgMTYxLFxuICAgIDUsXG4gICAgNTE4LFxuICAgIDAsXG4gICAgNTE5LFxuICAgIDAsXG4gICAgNTQ2LFxuICAgIDQsXG4gICAgNTUwLFxuICAgIDQsXG4gICAgNjQ1LFxuICAgIDMsXG4gICAgNjQ3LFxuICAgIDMsXG4gICAgNjcyLFxuICAgIDUsXG4gICAgNjczLFxuICAgIDUsXG4gICAgNjc0LFxuICAgIDQsXG4gICAgNjc3LFxuICAgIDMsXG4gICAgNjc4LFxuICAgIDQsXG4gICAgNjc5LFxuICAgIDMsXG4gICAgNjgwLFxuICAgIDEzLFxuICAgIDY4MSxcbiAgICAxMyxcbiAgICA2ODIsXG4gICAgMTIsXG4gICAgNjg1LFxuICAgIDE0LFxuICAgIDY4NixcbiAgICAxMixcbiAgICA2ODcsXG4gICAgMTQsXG4gICAgNzEyLFxuICAgIDIwLFxuICAgIDcxNCxcbiAgICAxOCxcbiAgICA4MDksXG4gICAgMjEsXG4gICAgODEzLFxuICAgIDIzLFxuICAgIDg0MCxcbiAgICAyMCxcbiAgICA4NDEsXG4gICAgMjEsXG4gICAgMTE5OCxcbiAgICAxOSxcbiAgICAxMTk5LFxuICAgIDIyLFxuICAgIDEyMjYsXG4gICAgMTgsXG4gICAgMTIzMCxcbiAgICAxOSxcbiAgICAxMzI1LFxuICAgIDIzLFxuICAgIDEzMjcsXG4gICAgMjIsXG4gICAgMTM1MixcbiAgICAxNSxcbiAgICAxMzUzLFxuICAgIDE3LFxuICAgIDEzNTQsXG4gICAgMTUsXG4gICAgMTM1NyxcbiAgICAxNyxcbiAgICAxMzU4LFxuICAgIDE2LFxuICAgIDEzNTksXG4gICAgMTYsXG4gICAgMTM2MCxcbiAgICAxMSxcbiAgICAxMzYxLFxuICAgIDEwLFxuICAgIDEzNjIsXG4gICAgMTEsXG4gICAgMTM2NSxcbiAgICAxMCxcbiAgICAxMzY2LFxuICAgIDksXG4gICAgMTM2NyxcbiAgICA5LFxuICAgIDEzOTIsXG4gICAgMTEsXG4gICAgMTM5NCxcbiAgICAxMSxcbiAgICAxNDg5LFxuICAgIDEwLFxuICAgIDE0OTMsXG4gICAgMTAsXG4gICAgMTUyMCxcbiAgICA4LFxuICAgIDE1MjEsXG4gICAgOCxcbiAgICAxODc4LFxuICAgIDksXG4gICAgMTg3OSxcbiAgICA5LFxuICAgIDE5MDYsXG4gICAgNyxcbiAgICAxOTEwLFxuICAgIDcsXG4gICAgMjAwNSxcbiAgICA2LFxuICAgIDIwMDcsXG4gICAgNixcbiAgICAyMDMyLFxuICAgIDgsXG4gICAgMjAzMyxcbiAgICA4LFxuICAgIDIwMzQsXG4gICAgNyxcbiAgICAyMDM3LFxuICAgIDYsXG4gICAgMjAzOCxcbiAgICA3LFxuICAgIDIwMzksXG4gICAgNlxuXTtcbmV4cG9ydHMubG9va3VwUGFpcnM0RCA9IFtcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICA1LFxuICAgIDIsXG4gICAgNixcbiAgICAxLFxuICAgIDcsXG4gICAgMSxcbiAgICA4LFxuICAgIDMsXG4gICAgOSxcbiAgICAyLFxuICAgIDEwLFxuICAgIDMsXG4gICAgMTMsXG4gICAgMixcbiAgICAxNixcbiAgICAzLFxuICAgIDE4LFxuICAgIDMsXG4gICAgMjIsXG4gICAgMSxcbiAgICAyMyxcbiAgICAxLFxuICAgIDI0LFxuICAgIDMsXG4gICAgMjYsXG4gICAgMyxcbiAgICAzMyxcbiAgICAyLFxuICAgIDM3LFxuICAgIDIsXG4gICAgMzgsXG4gICAgMSxcbiAgICAzOSxcbiAgICAxLFxuICAgIDQxLFxuICAgIDIsXG4gICAgNDUsXG4gICAgMixcbiAgICA1NCxcbiAgICAxLFxuICAgIDU1LFxuICAgIDEsXG4gICAgNTYsXG4gICAgMCxcbiAgICA1NyxcbiAgICAwLFxuICAgIDU4LFxuICAgIDAsXG4gICAgNTksXG4gICAgMCxcbiAgICA2MCxcbiAgICAwLFxuICAgIDYxLFxuICAgIDAsXG4gICAgNjIsXG4gICAgMCxcbiAgICA2MyxcbiAgICAwLFxuICAgIDI1NixcbiAgICAzLFxuICAgIDI1OCxcbiAgICAzLFxuICAgIDI2NCxcbiAgICAzLFxuICAgIDI2NixcbiAgICAzLFxuICAgIDI3MixcbiAgICAzLFxuICAgIDI3NCxcbiAgICAzLFxuICAgIDI4MCxcbiAgICAzLFxuICAgIDI4MixcbiAgICAzLFxuICAgIDIwNDksXG4gICAgMixcbiAgICAyMDUzLFxuICAgIDIsXG4gICAgMjA1NyxcbiAgICAyLFxuICAgIDIwNjEsXG4gICAgMixcbiAgICAyMDgxLFxuICAgIDIsXG4gICAgMjA4NSxcbiAgICAyLFxuICAgIDIwODksXG4gICAgMixcbiAgICAyMDkzLFxuICAgIDIsXG4gICAgMjMwNCxcbiAgICA5LFxuICAgIDIzMDUsXG4gICAgOSxcbiAgICAyMzEyLFxuICAgIDksXG4gICAgMjMxMyxcbiAgICA5LFxuICAgIDE2MzkwLFxuICAgIDEsXG4gICAgMTYzOTEsXG4gICAgMSxcbiAgICAxNjQwNixcbiAgICAxLFxuICAgIDE2NDA3LFxuICAgIDEsXG4gICAgMTY0MjIsXG4gICAgMSxcbiAgICAxNjQyMyxcbiAgICAxLFxuICAgIDE2NDM4LFxuICAgIDEsXG4gICAgMTY0MzksXG4gICAgMSxcbiAgICAxNjY0MixcbiAgICA4LFxuICAgIDE2NjQ2LFxuICAgIDgsXG4gICAgMTY2NTgsXG4gICAgOCxcbiAgICAxNjY2MixcbiAgICA4LFxuICAgIDE4NDM3LFxuICAgIDYsXG4gICAgMTg0MzksXG4gICAgNixcbiAgICAxODQ2OSxcbiAgICA2LFxuICAgIDE4NDcxLFxuICAgIDYsXG4gICAgMTg2ODgsXG4gICAgOSxcbiAgICAxODY4OSxcbiAgICA5LFxuICAgIDE4NjkwLFxuICAgIDgsXG4gICAgMTg2OTMsXG4gICAgNixcbiAgICAxODY5NCxcbiAgICA4LFxuICAgIDE4Njk1LFxuICAgIDYsXG4gICAgMTg2OTYsXG4gICAgOSxcbiAgICAxODY5NyxcbiAgICA5LFxuICAgIDE4NzA2LFxuICAgIDgsXG4gICAgMTg3MTAsXG4gICAgOCxcbiAgICAxODcyNSxcbiAgICA2LFxuICAgIDE4NzI3LFxuICAgIDYsXG4gICAgMTMxMTI4LFxuICAgIDAsXG4gICAgMTMxMTI5LFxuICAgIDAsXG4gICAgMTMxMTMwLFxuICAgIDAsXG4gICAgMTMxMTMxLFxuICAgIDAsXG4gICAgMTMxMTMyLFxuICAgIDAsXG4gICAgMTMxMTMzLFxuICAgIDAsXG4gICAgMTMxMTM0LFxuICAgIDAsXG4gICAgMTMxMTM1LFxuICAgIDAsXG4gICAgMTMxMzUyLFxuICAgIDcsXG4gICAgMTMxMzU0LFxuICAgIDcsXG4gICAgMTMxMzg0LFxuICAgIDcsXG4gICAgMTMxMzg2LFxuICAgIDcsXG4gICAgMTMzMTYxLFxuICAgIDUsXG4gICAgMTMzMTY1LFxuICAgIDUsXG4gICAgMTMzMTc3LFxuICAgIDUsXG4gICAgMTMzMTgxLFxuICAgIDUsXG4gICAgMTMzMzc2LFxuICAgIDksXG4gICAgMTMzMzc3LFxuICAgIDksXG4gICAgMTMzMzg0LFxuICAgIDksXG4gICAgMTMzMzg1LFxuICAgIDksXG4gICAgMTMzNDAwLFxuICAgIDcsXG4gICAgMTMzNDAyLFxuICAgIDcsXG4gICAgMTMzNDE3LFxuICAgIDUsXG4gICAgMTMzNDIxLFxuICAgIDUsXG4gICAgMTMzNDMyLFxuICAgIDcsXG4gICAgMTMzNDMzLFxuICAgIDUsXG4gICAgMTMzNDM0LFxuICAgIDcsXG4gICAgMTMzNDM3LFxuICAgIDUsXG4gICAgMTQ3NTEwLFxuICAgIDQsXG4gICAgMTQ3NTExLFxuICAgIDQsXG4gICAgMTQ3NTE4LFxuICAgIDQsXG4gICAgMTQ3NTE5LFxuICAgIDQsXG4gICAgMTQ3NzE0LFxuICAgIDgsXG4gICAgMTQ3NzE4LFxuICAgIDgsXG4gICAgMTQ3NzMwLFxuICAgIDgsXG4gICAgMTQ3NzM0LFxuICAgIDgsXG4gICAgMTQ3NzM2LFxuICAgIDcsXG4gICAgMTQ3NzM4LFxuICAgIDcsXG4gICAgMTQ3NzY2LFxuICAgIDQsXG4gICAgMTQ3NzY3LFxuICAgIDQsXG4gICAgMTQ3NzY4LFxuICAgIDcsXG4gICAgMTQ3NzcwLFxuICAgIDcsXG4gICAgMTQ3Nzc0LFxuICAgIDQsXG4gICAgMTQ3Nzc1LFxuICAgIDQsXG4gICAgMTQ5NTA5LFxuICAgIDYsXG4gICAgMTQ5NTExLFxuICAgIDYsXG4gICAgMTQ5NTQxLFxuICAgIDYsXG4gICAgMTQ5NTQzLFxuICAgIDYsXG4gICAgMTQ5NTQ1LFxuICAgIDUsXG4gICAgMTQ5NTQ5LFxuICAgIDUsXG4gICAgMTQ5NTU4LFxuICAgIDQsXG4gICAgMTQ5NTU5LFxuICAgIDQsXG4gICAgMTQ5NTYxLFxuICAgIDUsXG4gICAgMTQ5NTY1LFxuICAgIDUsXG4gICAgMTQ5NTY2LFxuICAgIDQsXG4gICAgMTQ5NTY3LFxuICAgIDQsXG4gICAgMTQ5NzYwLFxuICAgIDksXG4gICAgMTQ5NzYxLFxuICAgIDksXG4gICAgMTQ5NzYyLFxuICAgIDgsXG4gICAgMTQ5NzY1LFxuICAgIDYsXG4gICAgMTQ5NzY2LFxuICAgIDgsXG4gICAgMTQ5NzY3LFxuICAgIDYsXG4gICAgMTQ5NzY4LFxuICAgIDksXG4gICAgMTQ5NzY5LFxuICAgIDksXG4gICAgMTQ5Nzc4LFxuICAgIDgsXG4gICAgMTQ5NzgyLFxuICAgIDgsXG4gICAgMTQ5Nzg0LFxuICAgIDcsXG4gICAgMTQ5Nzg2LFxuICAgIDcsXG4gICAgMTQ5Nzk3LFxuICAgIDYsXG4gICAgMTQ5Nzk5LFxuICAgIDYsXG4gICAgMTQ5ODAxLFxuICAgIDUsXG4gICAgMTQ5ODA1LFxuICAgIDUsXG4gICAgMTQ5ODE0LFxuICAgIDQsXG4gICAgMTQ5ODE1LFxuICAgIDQsXG4gICAgMTQ5ODE2LFxuICAgIDcsXG4gICAgMTQ5ODE3LFxuICAgIDUsXG4gICAgMTQ5ODE4LFxuICAgIDcsXG4gICAgMTQ5ODIxLFxuICAgIDUsXG4gICAgMTQ5ODIyLFxuICAgIDQsXG4gICAgMTQ5ODIzLFxuICAgIDQsXG4gICAgMTQ5ODI0LFxuICAgIDM3LFxuICAgIDE0OTgyNSxcbiAgICAzNyxcbiAgICAxNDk4MjYsXG4gICAgMzYsXG4gICAgMTQ5ODI5LFxuICAgIDM0LFxuICAgIDE0OTgzMCxcbiAgICAzNixcbiAgICAxNDk4MzEsXG4gICAgMzQsXG4gICAgMTQ5ODMyLFxuICAgIDM3LFxuICAgIDE0OTgzMyxcbiAgICAzNyxcbiAgICAxNDk4NDIsXG4gICAgMzYsXG4gICAgMTQ5ODQ2LFxuICAgIDM2LFxuICAgIDE0OTg0OCxcbiAgICAzNSxcbiAgICAxNDk4NTAsXG4gICAgMzUsXG4gICAgMTQ5ODYxLFxuICAgIDM0LFxuICAgIDE0OTg2MyxcbiAgICAzNCxcbiAgICAxNDk4NjUsXG4gICAgMzMsXG4gICAgMTQ5ODY5LFxuICAgIDMzLFxuICAgIDE0OTg3OCxcbiAgICAzMixcbiAgICAxNDk4NzksXG4gICAgMzIsXG4gICAgMTQ5ODgwLFxuICAgIDM1LFxuICAgIDE0OTg4MSxcbiAgICAzMyxcbiAgICAxNDk4ODIsXG4gICAgMzUsXG4gICAgMTQ5ODg1LFxuICAgIDMzLFxuICAgIDE0OTg4NixcbiAgICAzMixcbiAgICAxNDk4ODcsXG4gICAgMzIsXG4gICAgMTUwMDgwLFxuICAgIDQ5LFxuICAgIDE1MDA4MixcbiAgICA0OCxcbiAgICAxNTAwODgsXG4gICAgNDksXG4gICAgMTUwMDk4LFxuICAgIDQ4LFxuICAgIDE1MDEwNCxcbiAgICA0NyxcbiAgICAxNTAxMDYsXG4gICAgNDcsXG4gICAgMTUxODczLFxuICAgIDQ2LFxuICAgIDE1MTg3NyxcbiAgICA0NSxcbiAgICAxNTE4ODEsXG4gICAgNDYsXG4gICAgMTUxOTA5LFxuICAgIDQ1LFxuICAgIDE1MTkxMyxcbiAgICA0NCxcbiAgICAxNTE5MTcsXG4gICAgNDQsXG4gICAgMTUyMTI4LFxuICAgIDQ5LFxuICAgIDE1MjEyOSxcbiAgICA0NixcbiAgICAxNTIxMzYsXG4gICAgNDksXG4gICAgMTUyMTM3LFxuICAgIDQ2LFxuICAgIDE2NjIxNCxcbiAgICA0MyxcbiAgICAxNjYyMTUsXG4gICAgNDIsXG4gICAgMTY2MjMwLFxuICAgIDQzLFxuICAgIDE2NjI0NyxcbiAgICA0MixcbiAgICAxNjYyNjIsXG4gICAgNDEsXG4gICAgMTY2MjYzLFxuICAgIDQxLFxuICAgIDE2NjQ2NixcbiAgICA0OCxcbiAgICAxNjY0NzAsXG4gICAgNDMsXG4gICAgMTY2NDgyLFxuICAgIDQ4LFxuICAgIDE2NjQ4NixcbiAgICA0MyxcbiAgICAxNjgyNjEsXG4gICAgNDUsXG4gICAgMTY4MjYzLFxuICAgIDQyLFxuICAgIDE2ODI5MyxcbiAgICA0NSxcbiAgICAxNjgyOTUsXG4gICAgNDIsXG4gICAgMTY4NTEyLFxuICAgIDMxLFxuICAgIDE2ODUxMyxcbiAgICAyOCxcbiAgICAxNjg1MTQsXG4gICAgMzEsXG4gICAgMTY4NTE3LFxuICAgIDI4LFxuICAgIDE2ODUxOCxcbiAgICAyNSxcbiAgICAxNjg1MTksXG4gICAgMjUsXG4gICAgMjgwOTUyLFxuICAgIDQwLFxuICAgIDI4MDk1MyxcbiAgICAzOSxcbiAgICAyODA5NTQsXG4gICAgNDAsXG4gICAgMjgwOTU3LFxuICAgIDM5LFxuICAgIDI4MDk1OCxcbiAgICAzOCxcbiAgICAyODA5NTksXG4gICAgMzgsXG4gICAgMjgxMTc2LFxuICAgIDQ3LFxuICAgIDI4MTE3OCxcbiAgICA0NyxcbiAgICAyODEyMDgsXG4gICAgNDAsXG4gICAgMjgxMjEwLFxuICAgIDQwLFxuICAgIDI4Mjk4NSxcbiAgICA0NCxcbiAgICAyODI5ODksXG4gICAgNDQsXG4gICAgMjgzMDAxLFxuICAgIDM5LFxuICAgIDI4MzAwNSxcbiAgICAzOSxcbiAgICAyODMyMDgsXG4gICAgMzAsXG4gICAgMjgzMjA5LFxuICAgIDI3LFxuICAgIDI4MzIyNCxcbiAgICAzMCxcbiAgICAyODMyNDEsXG4gICAgMjcsXG4gICAgMjgzMjU2LFxuICAgIDIyLFxuICAgIDI4MzI1NyxcbiAgICAyMixcbiAgICAyOTczMzQsXG4gICAgNDEsXG4gICAgMjk3MzM1LFxuICAgIDQxLFxuICAgIDI5NzM0MixcbiAgICAzOCxcbiAgICAyOTczNDMsXG4gICAgMzgsXG4gICAgMjk3NTU0LFxuICAgIDI5LFxuICAgIDI5NzU1OCxcbiAgICAyNCxcbiAgICAyOTc1NjIsXG4gICAgMjksXG4gICAgMjk3NTkwLFxuICAgIDI0LFxuICAgIDI5NzU5NCxcbiAgICAyMSxcbiAgICAyOTc1OTgsXG4gICAgMjEsXG4gICAgMjk5MzY1LFxuICAgIDI2LFxuICAgIDI5OTM2NyxcbiAgICAyMyxcbiAgICAyOTkzNzMsXG4gICAgMjYsXG4gICAgMjk5MzgzLFxuICAgIDIzLFxuICAgIDI5OTM4OSxcbiAgICAyMCxcbiAgICAyOTkzOTEsXG4gICAgMjAsXG4gICAgMjk5NTg0LFxuICAgIDMxLFxuICAgIDI5OTU4NSxcbiAgICAyOCxcbiAgICAyOTk1ODYsXG4gICAgMzEsXG4gICAgMjk5NTg5LFxuICAgIDI4LFxuICAgIDI5OTU5MCxcbiAgICAyNSxcbiAgICAyOTk1OTEsXG4gICAgMjUsXG4gICAgMjk5NTkyLFxuICAgIDMwLFxuICAgIDI5OTU5MyxcbiAgICAyNyxcbiAgICAyOTk2MDIsXG4gICAgMjksXG4gICAgMjk5NjA2LFxuICAgIDI0LFxuICAgIDI5OTYwOCxcbiAgICAzMCxcbiAgICAyOTk2MTAsXG4gICAgMjksXG4gICAgMjk5NjIxLFxuICAgIDI2LFxuICAgIDI5OTYyMyxcbiAgICAyMyxcbiAgICAyOTk2MjUsXG4gICAgMjcsXG4gICAgMjk5NjI5LFxuICAgIDI2LFxuICAgIDI5OTYzOCxcbiAgICAyNCxcbiAgICAyOTk2MzksXG4gICAgMjMsXG4gICAgMjk5NjQwLFxuICAgIDIyLFxuICAgIDI5OTY0MSxcbiAgICAyMixcbiAgICAyOTk2NDIsXG4gICAgMjEsXG4gICAgMjk5NjQ1LFxuICAgIDIwLFxuICAgIDI5OTY0NixcbiAgICAyMSxcbiAgICAyOTk2NDcsXG4gICAgMjAsXG4gICAgMjk5NjQ4LFxuICAgIDYxLFxuICAgIDI5OTY0OSxcbiAgICA2MCxcbiAgICAyOTk2NTAsXG4gICAgNjEsXG4gICAgMjk5NjUzLFxuICAgIDYwLFxuICAgIDI5OTY1NCxcbiAgICA1OSxcbiAgICAyOTk2NTUsXG4gICAgNTksXG4gICAgMjk5NjU2LFxuICAgIDU4LFxuICAgIDI5OTY1NyxcbiAgICA1NyxcbiAgICAyOTk2NjYsXG4gICAgNTUsXG4gICAgMjk5NjcwLFxuICAgIDU0LFxuICAgIDI5OTY3MixcbiAgICA1OCxcbiAgICAyOTk2NzQsXG4gICAgNTUsXG4gICAgMjk5Njg1LFxuICAgIDUyLFxuICAgIDI5OTY4NyxcbiAgICA1MSxcbiAgICAyOTk2ODksXG4gICAgNTcsXG4gICAgMjk5NjkzLFxuICAgIDUyLFxuICAgIDI5OTcwMixcbiAgICA1NCxcbiAgICAyOTk3MDMsXG4gICAgNTEsXG4gICAgMjk5NzA0LFxuICAgIDU2LFxuICAgIDI5OTcwNSxcbiAgICA1NixcbiAgICAyOTk3MDYsXG4gICAgNTMsXG4gICAgMjk5NzA5LFxuICAgIDUwLFxuICAgIDI5OTcxMCxcbiAgICA1MyxcbiAgICAyOTk3MTEsXG4gICAgNTAsXG4gICAgMjk5OTA0LFxuICAgIDYxLFxuICAgIDI5OTkwNixcbiAgICA2MSxcbiAgICAyOTk5MTIsXG4gICAgNTgsXG4gICAgMjk5OTIyLFxuICAgIDU1LFxuICAgIDI5OTkyOCxcbiAgICA1OCxcbiAgICAyOTk5MzAsXG4gICAgNTUsXG4gICAgMzAxNjk3LFxuICAgIDYwLFxuICAgIDMwMTcwMSxcbiAgICA2MCxcbiAgICAzMDE3MDUsXG4gICAgNTcsXG4gICAgMzAxNzMzLFxuICAgIDUyLFxuICAgIDMwMTczNyxcbiAgICA1NyxcbiAgICAzMDE3NDEsXG4gICAgNTIsXG4gICAgMzAxOTUyLFxuICAgIDc5LFxuICAgIDMwMTk1MyxcbiAgICA3OSxcbiAgICAzMDE5NjAsXG4gICAgNzYsXG4gICAgMzAxOTYxLFxuICAgIDc2LFxuICAgIDMxNjAzOCxcbiAgICA1OSxcbiAgICAzMTYwMzksXG4gICAgNTksXG4gICAgMzE2MDU0LFxuICAgIDU0LFxuICAgIDMxNjA3MSxcbiAgICA1MSxcbiAgICAzMTYwODYsXG4gICAgNTQsXG4gICAgMzE2MDg3LFxuICAgIDUxLFxuICAgIDMxNjI5MCxcbiAgICA3OCxcbiAgICAzMTYyOTQsXG4gICAgNzgsXG4gICAgMzE2MzA2LFxuICAgIDczLFxuICAgIDMxNjMxMCxcbiAgICA3MyxcbiAgICAzMTgwODUsXG4gICAgNzcsXG4gICAgMzE4MDg3LFxuICAgIDc3LFxuICAgIDMxODExNyxcbiAgICA3MCxcbiAgICAzMTgxMTksXG4gICAgNzAsXG4gICAgMzE4MzM2LFxuICAgIDc5LFxuICAgIDMxODMzNyxcbiAgICA3OSxcbiAgICAzMTgzMzgsXG4gICAgNzgsXG4gICAgMzE4MzQxLFxuICAgIDc3LFxuICAgIDMxODM0MixcbiAgICA3OCxcbiAgICAzMTgzNDMsXG4gICAgNzcsXG4gICAgNDMwNzc2LFxuICAgIDU2LFxuICAgIDQzMDc3NyxcbiAgICA1NixcbiAgICA0MzA3NzgsXG4gICAgNTMsXG4gICAgNDMwNzgxLFxuICAgIDUwLFxuICAgIDQzMDc4MixcbiAgICA1MyxcbiAgICA0MzA3ODMsXG4gICAgNTAsXG4gICAgNDMxMDAwLFxuICAgIDc1LFxuICAgIDQzMTAwMixcbiAgICA3MixcbiAgICA0MzEwMzIsXG4gICAgNzUsXG4gICAgNDMxMDM0LFxuICAgIDcyLFxuICAgIDQzMjgwOSxcbiAgICA3NCxcbiAgICA0MzI4MTMsXG4gICAgNjksXG4gICAgNDMyODI1LFxuICAgIDc0LFxuICAgIDQzMjgyOSxcbiAgICA2OSxcbiAgICA0MzMwMzIsXG4gICAgNzYsXG4gICAgNDMzMDMzLFxuICAgIDc2LFxuICAgIDQzMzA0OCxcbiAgICA3NSxcbiAgICA0MzMwNjUsXG4gICAgNzQsXG4gICAgNDMzMDgwLFxuICAgIDc1LFxuICAgIDQzMzA4MSxcbiAgICA3NCxcbiAgICA0NDcxNTgsXG4gICAgNzEsXG4gICAgNDQ3MTU5LFxuICAgIDY4LFxuICAgIDQ0NzE2NixcbiAgICA3MSxcbiAgICA0NDcxNjcsXG4gICAgNjgsXG4gICAgNDQ3Mzc4LFxuICAgIDczLFxuICAgIDQ0NzM4MixcbiAgICA3MyxcbiAgICA0NDczODYsXG4gICAgNzIsXG4gICAgNDQ3NDE0LFxuICAgIDcxLFxuICAgIDQ0NzQxOCxcbiAgICA3MixcbiAgICA0NDc0MjIsXG4gICAgNzEsXG4gICAgNDQ5MTg5LFxuICAgIDcwLFxuICAgIDQ0OTE5MSxcbiAgICA3MCxcbiAgICA0NDkxOTcsXG4gICAgNjksXG4gICAgNDQ5MjA3LFxuICAgIDY4LFxuICAgIDQ0OTIxMyxcbiAgICA2OSxcbiAgICA0NDkyMTUsXG4gICAgNjgsXG4gICAgNDQ5NDA4LFxuICAgIDY3LFxuICAgIDQ0OTQwOSxcbiAgICA2NyxcbiAgICA0NDk0MTAsXG4gICAgNjYsXG4gICAgNDQ5NDEzLFxuICAgIDY0LFxuICAgIDQ0OTQxNCxcbiAgICA2NixcbiAgICA0NDk0MTUsXG4gICAgNjQsXG4gICAgNDQ5NDE2LFxuICAgIDY3LFxuICAgIDQ0OTQxNyxcbiAgICA2NyxcbiAgICA0NDk0MjYsXG4gICAgNjYsXG4gICAgNDQ5NDMwLFxuICAgIDY2LFxuICAgIDQ0OTQzMixcbiAgICA2NSxcbiAgICA0NDk0MzQsXG4gICAgNjUsXG4gICAgNDQ5NDQ1LFxuICAgIDY0LFxuICAgIDQ0OTQ0NyxcbiAgICA2NCxcbiAgICA0NDk0NDksXG4gICAgNjMsXG4gICAgNDQ5NDUzLFxuICAgIDYzLFxuICAgIDQ0OTQ2MixcbiAgICA2MixcbiAgICA0NDk0NjMsXG4gICAgNjIsXG4gICAgNDQ5NDY0LFxuICAgIDY1LFxuICAgIDQ0OTQ2NSxcbiAgICA2MyxcbiAgICA0NDk0NjYsXG4gICAgNjUsXG4gICAgNDQ5NDY5LFxuICAgIDYzLFxuICAgIDQ0OTQ3MCxcbiAgICA2MixcbiAgICA0NDk0NzEsXG4gICAgNjIsXG4gICAgNDQ5NDcyLFxuICAgIDE5LFxuICAgIDQ0OTQ3MyxcbiAgICAxOSxcbiAgICA0NDk0NzQsXG4gICAgMTgsXG4gICAgNDQ5NDc3LFxuICAgIDE2LFxuICAgIDQ0OTQ3OCxcbiAgICAxOCxcbiAgICA0NDk0NzksXG4gICAgMTYsXG4gICAgNDQ5NDgwLFxuICAgIDE5LFxuICAgIDQ0OTQ4MSxcbiAgICAxOSxcbiAgICA0NDk0OTAsXG4gICAgMTgsXG4gICAgNDQ5NDk0LFxuICAgIDE4LFxuICAgIDQ0OTQ5NixcbiAgICAxNyxcbiAgICA0NDk0OTgsXG4gICAgMTcsXG4gICAgNDQ5NTA5LFxuICAgIDE2LFxuICAgIDQ0OTUxMSxcbiAgICAxNixcbiAgICA0NDk1MTMsXG4gICAgMTUsXG4gICAgNDQ5NTE3LFxuICAgIDE1LFxuICAgIDQ0OTUyNixcbiAgICAxNCxcbiAgICA0NDk1MjcsXG4gICAgMTQsXG4gICAgNDQ5NTI4LFxuICAgIDE3LFxuICAgIDQ0OTUyOSxcbiAgICAxNSxcbiAgICA0NDk1MzAsXG4gICAgMTcsXG4gICAgNDQ5NTMzLFxuICAgIDE1LFxuICAgIDQ0OTUzNCxcbiAgICAxNCxcbiAgICA0NDk1MzUsXG4gICAgMTQsXG4gICAgNDQ5NzI4LFxuICAgIDE5LFxuICAgIDQ0OTcyOSxcbiAgICAxOSxcbiAgICA0NDk3MzAsXG4gICAgMTgsXG4gICAgNDQ5NzM0LFxuICAgIDE4LFxuICAgIDQ0OTczNixcbiAgICAxOSxcbiAgICA0NDk3MzcsXG4gICAgMTksXG4gICAgNDQ5NzQ2LFxuICAgIDE4LFxuICAgIDQ0OTc1MCxcbiAgICAxOCxcbiAgICA0NDk3NTIsXG4gICAgMTcsXG4gICAgNDQ5NzU0LFxuICAgIDE3LFxuICAgIDQ0OTc4NCxcbiAgICAxNyxcbiAgICA0NDk3ODYsXG4gICAgMTcsXG4gICAgNDUxNTIwLFxuICAgIDE5LFxuICAgIDQ1MTUyMSxcbiAgICAxOSxcbiAgICA0NTE1MjUsXG4gICAgMTYsXG4gICAgNDUxNTI3LFxuICAgIDE2LFxuICAgIDQ1MTUyOCxcbiAgICAxOSxcbiAgICA0NTE1MjksXG4gICAgMTksXG4gICAgNDUxNTU3LFxuICAgIDE2LFxuICAgIDQ1MTU1OSxcbiAgICAxNixcbiAgICA0NTE1NjEsXG4gICAgMTUsXG4gICAgNDUxNTY1LFxuICAgIDE1LFxuICAgIDQ1MTU3NyxcbiAgICAxNSxcbiAgICA0NTE1ODEsXG4gICAgMTUsXG4gICAgNDUxNzc2LFxuICAgIDE5LFxuICAgIDQ1MTc3NyxcbiAgICAxOSxcbiAgICA0NTE3ODQsXG4gICAgMTksXG4gICAgNDUxNzg1LFxuICAgIDE5LFxuICAgIDQ2NTg1OCxcbiAgICAxOCxcbiAgICA0NjU4NjEsXG4gICAgMTYsXG4gICAgNDY1ODYyLFxuICAgIDE4LFxuICAgIDQ2NTg2MyxcbiAgICAxNixcbiAgICA0NjU4NzQsXG4gICAgMTgsXG4gICAgNDY1ODc4LFxuICAgIDE4LFxuICAgIDQ2NTg5MyxcbiAgICAxNixcbiAgICA0NjU4OTUsXG4gICAgMTYsXG4gICAgNDY1OTEwLFxuICAgIDE0LFxuICAgIDQ2NTkxMSxcbiAgICAxNCxcbiAgICA0NjU5MTgsXG4gICAgMTQsXG4gICAgNDY1OTE5LFxuICAgIDE0LFxuICAgIDQ2NjExNCxcbiAgICAxOCxcbiAgICA0NjYxMTgsXG4gICAgMTgsXG4gICAgNDY2MTMwLFxuICAgIDE4LFxuICAgIDQ2NjEzNCxcbiAgICAxOCxcbiAgICA0Njc5MDksXG4gICAgMTYsXG4gICAgNDY3OTExLFxuICAgIDE2LFxuICAgIDQ2Nzk0MSxcbiAgICAxNixcbiAgICA0Njc5NDMsXG4gICAgMTYsXG4gICAgNDY4MTYwLFxuICAgIDEzLFxuICAgIDQ2ODE2MSxcbiAgICAxMyxcbiAgICA0NjgxNjIsXG4gICAgMTMsXG4gICAgNDY4MTYzLFxuICAgIDEzLFxuICAgIDQ2ODE2NCxcbiAgICAxMyxcbiAgICA0NjgxNjUsXG4gICAgMTMsXG4gICAgNDY4MTY2LFxuICAgIDEzLFxuICAgIDQ2ODE2NyxcbiAgICAxMyxcbiAgICA1ODA1NjgsXG4gICAgMTcsXG4gICAgNTgwNTcwLFxuICAgIDE3LFxuICAgIDU4MDU4NSxcbiAgICAxNSxcbiAgICA1ODA1ODksXG4gICAgMTUsXG4gICAgNTgwNTk4LFxuICAgIDE0LFxuICAgIDU4MDU5OSxcbiAgICAxNCxcbiAgICA1ODA2MDAsXG4gICAgMTcsXG4gICAgNTgwNjAxLFxuICAgIDE1LFxuICAgIDU4MDYwMixcbiAgICAxNyxcbiAgICA1ODA2MDUsXG4gICAgMTUsXG4gICAgNTgwNjA2LFxuICAgIDE0LFxuICAgIDU4MDYwNyxcbiAgICAxNCxcbiAgICA1ODA4MjQsXG4gICAgMTcsXG4gICAgNTgwODI2LFxuICAgIDE3LFxuICAgIDU4MDg1NixcbiAgICAxNyxcbiAgICA1ODA4NTgsXG4gICAgMTcsXG4gICAgNTgyNjMzLFxuICAgIDE1LFxuICAgIDU4MjYzNyxcbiAgICAxNSxcbiAgICA1ODI2NDksXG4gICAgMTUsXG4gICAgNTgyNjUzLFxuICAgIDE1LFxuICAgIDU4Mjg1NixcbiAgICAxMixcbiAgICA1ODI4NTcsXG4gICAgMTIsXG4gICAgNTgyODcyLFxuICAgIDEyLFxuICAgIDU4Mjg3MyxcbiAgICAxMixcbiAgICA1ODI4ODgsXG4gICAgMTIsXG4gICAgNTgyODg5LFxuICAgIDEyLFxuICAgIDU4MjkwNCxcbiAgICAxMixcbiAgICA1ODI5MDUsXG4gICAgMTIsXG4gICAgNTk2OTgyLFxuICAgIDE0LFxuICAgIDU5Njk4MyxcbiAgICAxNCxcbiAgICA1OTY5OTAsXG4gICAgMTQsXG4gICAgNTk2OTkxLFxuICAgIDE0LFxuICAgIDU5NzIwMixcbiAgICAxMSxcbiAgICA1OTcyMDYsXG4gICAgMTEsXG4gICAgNTk3MjEwLFxuICAgIDExLFxuICAgIDU5NzIxNCxcbiAgICAxMSxcbiAgICA1OTcyMzQsXG4gICAgMTEsXG4gICAgNTk3MjM4LFxuICAgIDExLFxuICAgIDU5NzI0MixcbiAgICAxMSxcbiAgICA1OTcyNDYsXG4gICAgMTEsXG4gICAgNTk5MDEzLFxuICAgIDEwLFxuICAgIDU5OTAxNSxcbiAgICAxMCxcbiAgICA1OTkwMjEsXG4gICAgMTAsXG4gICAgNTk5MDIzLFxuICAgIDEwLFxuICAgIDU5OTAyOSxcbiAgICAxMCxcbiAgICA1OTkwMzEsXG4gICAgMTAsXG4gICAgNTk5MDM3LFxuICAgIDEwLFxuICAgIDU5OTAzOSxcbiAgICAxMCxcbiAgICA1OTkyMzIsXG4gICAgMTMsXG4gICAgNTk5MjMzLFxuICAgIDEzLFxuICAgIDU5OTIzNCxcbiAgICAxMyxcbiAgICA1OTkyMzUsXG4gICAgMTMsXG4gICAgNTk5MjM2LFxuICAgIDEzLFxuICAgIDU5OTIzNyxcbiAgICAxMyxcbiAgICA1OTkyMzgsXG4gICAgMTMsXG4gICAgNTk5MjM5LFxuICAgIDEzLFxuICAgIDU5OTI0MCxcbiAgICAxMixcbiAgICA1OTkyNDEsXG4gICAgMTIsXG4gICAgNTk5MjUwLFxuICAgIDExLFxuICAgIDU5OTI1NCxcbiAgICAxMSxcbiAgICA1OTkyNTYsXG4gICAgMTIsXG4gICAgNTk5MjU3LFxuICAgIDEyLFxuICAgIDU5OTI1OCxcbiAgICAxMSxcbiAgICA1OTkyNjIsXG4gICAgMTEsXG4gICAgNTk5MjY5LFxuICAgIDEwLFxuICAgIDU5OTI3MSxcbiAgICAxMCxcbiAgICA1OTkyNzIsXG4gICAgMTIsXG4gICAgNTk5MjczLFxuICAgIDEyLFxuICAgIDU5OTI3NyxcbiAgICAxMCxcbiAgICA1OTkyNzksXG4gICAgMTAsXG4gICAgNTk5MjgyLFxuICAgIDExLFxuICAgIDU5OTI4NSxcbiAgICAxMCxcbiAgICA1OTkyODYsXG4gICAgMTEsXG4gICAgNTk5Mjg3LFxuICAgIDEwLFxuICAgIDU5OTI4OCxcbiAgICAxMixcbiAgICA1OTkyODksXG4gICAgMTIsXG4gICAgNTk5MjkwLFxuICAgIDExLFxuICAgIDU5OTI5MyxcbiAgICAxMCxcbiAgICA1OTkyOTQsXG4gICAgMTEsXG4gICAgNTk5Mjk1LFxuICAgIDEwXG5dO1xuZXhwb3J0cy5wMkQgPSBbXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMFxuXTtcbmV4cG9ydHMucDNEID0gW1xuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAtMSxcbiAgICAwLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAzLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAwXG5dO1xuZXhwb3J0cy5wNEQgPSBbXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAtMSxcbiAgICAwLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMCxcbiAgICAtMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAtMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDQsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICA0LFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDAsXG4gICAgNCxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgNCxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDQsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICA0LFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICA0LFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgNCxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDQsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDQsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICA0LFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgNCxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDMsXG4gICAgMixcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAzLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAzLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDAsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMixcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAtMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAtMSxcbiAgICAyLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIC0xLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICA0LFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAzLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMyxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDQsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDMsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAzLFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgNCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICA0LFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAzLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDQsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDMsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgNCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAwLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAwLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxXG5dO1xuIiwiY2xhc3MgRmlsZVBhdGhzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZmlsZVBhdGhzID0gW1xyXG4gICAgICAgICAgICAvLyBzcHJpdGVzXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9jYXRXYWxrMS5qc29uXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9jYXRTdG9wLmpzb25cIixcclxuICAgICAgICAgICAgXCJzcHJpdGVzL2NhdElkbGUuanNvblwiLFxyXG4gICAgICAgICAgICBcInNwcml0ZXMvY2F0SnVtcC5qc29uXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy93YWxsU2xpZGUuanNvblwiLFxyXG4gICAgICAgICAgICBcInNwcml0ZXMvY2F0SGFuZy5qc29uXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9jYXRDbGltYkZ1bGwuanNvblwiLFxyXG4gICAgICAgICAgICBcInNwcml0ZXMvY2F0RmFsbC5qc29uXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9jYXRob3VzZV9yMS5wbmdcIixcclxuICAgICAgICAgICAgXCJzcHJpdGVzL3RpbGVTZXQyLmpzb25cIixcclxuICAgICAgICAgICAgXCJzcHJpdGVzL3RvcmNoU3ByaXRlcy5qc29uXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9rZXlzLmpzb25cIixcclxuICAgICAgICAgICAgXCJzcHJpdGVzL21lbnVCdXR0b25zLmpzb25cIixcclxuXHJcbiAgICAgICAgICAgIC8vIHNoYWRlcnNcclxuICAgICAgICAgICAgXCJzaGFkZXJzL2xpZ2h0RmlsdGVyVmVydC5HTFNMXCIsXHJcbiAgICAgICAgICAgIFwic2hhZGVycy9saWdodEZpbHRlckZyYWcuR0xTTFwiLFxyXG4gICAgICAgICAgICBcInNoYWRlcnMvbGlnaHRWZXJ0LkdMU0xcIixcclxuICAgICAgICAgICAgXCJzaGFkZXJzL2xpZ2h0RnJhZy5HTFNMXCIsXHJcbiAgICAgICAgICAgIFwic2hhZGVycy9jYXRuaXAtZWZmZWN0L2NhdG5pcFZlcnQuR0xTTFwiLFxyXG4gICAgICAgICAgICBcInNoYWRlcnMvY2F0bmlwLWVmZmVjdC9jYXRuaXBGcmFnLkdMU0xcIixcclxuICAgICAgICAgICAgXCJzaGFkZXJzL2Rpc3NvbHZlL2Rpc3NvbHZlVmVydC5HTFNMXCIsXHJcbiAgICAgICAgICAgIFwic2hhZGVycy9kaXNzb2x2ZS9kaXNzb2x2ZUZyYWcuR0xTTFwiLFxyXG4gICAgICAgICAgICBcInNoYWRlcnMvQmV6aWVyRGlzcGxhY2VtZW50RmlsdGVyL0JlemllckRpc3BWZXJ0LkdMU0xcIixcclxuICAgICAgICAgICAgXCJzaGFkZXJzL0JlemllckRpc3BsYWNlbWVudEZpbHRlci9CZXppZXJEaXNwRnJhZy5HTFNMXCIsXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuICAgIGFycmF5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVQYXRocztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHtGaWxlUGF0aHN9IiwiaW1wb3J0IHtGaWxlUGF0aHN9IGZyb20gJy4vRmlsZVBhdGhzJ1xyXG5cclxuLy8gQWxpYXNlc1xyXG5sZXQgbG9hZGVyID0gUElYSS5sb2FkZXIsXHJcbiAgICByZXNvdXJjZXMgPSBQSVhJLmxvYWRlci5yZXNvdXJjZXM7XHJcblxyXG4vLyBMb2FkcyB0ZXh0dXJlcyBhbmQgc2hhZGVycyBmcm9tIGZpbGVzLCBzdG9yZXMgdGhlbSBhcyBvYmplY3QgcHJvcGVydGllc1xyXG5leHBvcnQgY2xhc3MgTXlMb2FkZXIge1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dXBGdW5jdGlvbilcclxuICAgIHtcclxuICAgICAgICB0aGlzLmRvbmVMb2FkaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGxldCBsb2FkZXJGaWxlcyA9IG5ldyBGaWxlUGF0aHMoKTtcclxuXHJcbiAgICAgICAgUElYSS5zZXR0aW5ncy5TQ0FMRV9NT0RFID0gUElYSS5TQ0FMRV9NT0RFUy5ORUFSRVNUO1xyXG5cclxuICAgICAgICBsb2FkZXJcclxuICAgICAgICAgICAgLmFkZChsb2FkZXJGaWxlcy5hcnJheSgpKVxyXG4gICAgICAgICAgICAuYWRkKCdwYXVzZU11c2ljJywgJ3NvdW5kL3Ryb3BpY2FsIGphbS5tcDMnKVxyXG4gICAgICAgICAgICAuYWRkKCdBUkNBREVDTEFTU0lDJywgJ2ZvbnRzL0FSQ0FERUNMQVNTSUMuVFRGJylcclxuICAgICAgICAgICAgLmxvYWQodGhpcy5vbkxvYWQuYmluZCh0aGlzLCBzZXR1cEZ1bmN0aW9uKSk7ICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gb3JnYW5pemUgZGF0YSBpbnRvIG9iamVjdHMgYWZ0ZXIgZmlsZXMgbG9hZFxyXG4gICAgb25Mb2FkKHNldHVwRnVuY3Rpb24pXHJcbiAgICB7XHJcbiAgICAgICB0aGlzLmxpZ2h0U2hhZGVyID0gdGhpcy5sb2FkU2hhZGVycygpO1xyXG4gICAgICAgdGhpcy5kaXNzb2x2ZVNoYWRlciA9IHRoaXMubG9hZERpc3NvbHZlU2hhZGVyKCk7XHJcbiAgICAgICB0aGlzLmRpc3BsYWNlbWVudFNoYWRlciA9IHRoaXMubG9hZERpc3BsYWNlbWVudFNoYWRlcigpO1xyXG5cclxuICAgICAgIHRoaXMuY2F0bmlwRmlsdGVyID0gdGhpcy5sb2FkRmlsdGVycygpO1xyXG5cclxuICAgICAgIC8vdGhpcy5jYXRGcmFtZU1hcCA9IHRoaXMubG9hZEZyYW1lcygpO1xyXG4gICAgICAgdGhpcy5jYXRBbmltYXRpb25zID0gdGhpcy5hbmltYXRpb25zSW5pdCgpO1xyXG5cclxuICAgICAgIHRoaXMudGlsZXNldCA9IHRoaXMubG9hZFRpbGVzKCk7XHJcblxyXG4gICAgICAgdGhpcy50b3JjaEZyYW1lcyA9IHRoaXMubG9hZFRvcmNoKCk7XHJcblxyXG4gICAgICAgdGhpcy5kb25lTG9hZGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgdGhpcy5idXR0b25GcmFtZXMgPSB0aGlzLmxvYWRCdXR0b25zKCk7XHJcblxyXG4gICAgICAgdGhpcy5tZW51QnV0dG9ucyA9IHRoaXMubG9hZE1lbnUoKTtcclxuXHJcbiAgICAgICB0aGlzLnBhdXNlTXVzaWMgPSB0aGlzLmxvYWRTb3VuZCgpO1xyXG4gICAgICAgdGhpcy5wYXVzZU11c2ljLmxvb3AgPSB0cnVlO1xyXG5cclxuICAgICAgIHRoaXMubWVudUZvbnQgPSB0aGlzLmxvYWRGb250KCk7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5tZW51Rm9udC5kYXRhKTtcclxuXHJcbiAgICAgICAvLyB0aGlzLmNoZWNrTG9hZCgpO1xyXG5cclxuICAgICAgIHNldHVwRnVuY3Rpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBkZWJ1Z2dpbmcgZm9yIGR1bW1pZXNcclxuICAgIGNoZWNrTG9hZCgpIFxyXG4gICAge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMubGlnaHRTaGFkZXIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY2F0QW5pbWF0aW9ucyk7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5kb25lTG9hZGluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbG9hZCBsaWdodCBzaGFkZXJzIGludG8gYSB7c3RyaW5nOnN0cmluZ30gbWFwXHJcbiAgICBsb2FkU2hhZGVycygpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHZlcnQgPSByZXNvdXJjZXNbXCJzaGFkZXJzL2xpZ2h0VmVydC5HTFNMXCJdLmRhdGEsXHJcbiAgICAgICAgICAgIGZyYWcgPSByZXNvdXJjZXNbXCJzaGFkZXJzL2xpZ2h0RnJhZy5HTFNMXCJdLmRhdGE7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBcInZlcnRcIjogdmVydCxcclxuICAgICAgICAgICAgICAgIFwiZnJhZ1wiOiBmcmFnLFxyXG4gICAgICAgICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGxvYWQgZGlzc29sdmUgc2hhZGVycyBpbnRvIGEge3N0cmluZzpzdHJpbmd9IG1hcFxyXG4gICAgbG9hZERpc3NvbHZlU2hhZGVyKClcclxuICAgIHtcclxuICAgICAgICBsZXQgdmVydCA9IHJlc291cmNlc1tcInNoYWRlcnMvZGlzc29sdmUvZGlzc29sdmVWZXJ0LkdMU0xcIl0uZGF0YSxcclxuICAgICAgICBmcmFnID0gcmVzb3VyY2VzW1wic2hhZGVycy9kaXNzb2x2ZS9kaXNzb2x2ZUZyYWcuR0xTTFwiXS5kYXRhO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwidmVydFwiOiB2ZXJ0LFxyXG4gICAgICAgICAgICBcImZyYWdcIjogZnJhZyxcclxuICAgICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWREaXNwbGFjZW1lbnRTaGFkZXIoKXtcclxuICAgICAgICBsZXQgdmVydCA9IHJlc291cmNlc1tcInNoYWRlcnMvQmV6aWVyRGlzcGxhY2VtZW50RmlsdGVyL0JlemllckRpc3BWZXJ0LkdMU0xcIl0uZGF0YSxcclxuICAgICAgICBmcmFnID0gcmVzb3VyY2VzW1wic2hhZGVycy9CZXppZXJEaXNwbGFjZW1lbnRGaWx0ZXIvQmV6aWVyRGlzcEZyYWcuR0xTTFwiXS5kYXRhO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwidmVydFwiOiB2ZXJ0LFxyXG4gICAgICAgICAgICBcImZyYWdcIjogZnJhZyxcclxuICAgICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWRGaWx0ZXJzKCl7XHJcbiAgICAgICAgbGV0IHZlcnQgPSByZXNvdXJjZXNbXCJzaGFkZXJzL2NhdG5pcC1lZmZlY3QvY2F0bmlwVmVydC5HTFNMXCJdLmRhdGEsXHJcbiAgICAgICAgZnJhZyA9IHJlc291cmNlc1tcInNoYWRlcnMvY2F0bmlwLWVmZmVjdC9jYXRuaXBGcmFnLkdMU0xcIl0uZGF0YTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBcInZlcnRcIjogdmVydCxcclxuICAgICAgICAgICAgXCJmcmFnXCI6IGZyYWcsXHJcbiAgICAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLypcclxuICAgICAgICBJbml0IGFuaW1hdGVkIHNwcml0ZSBvYmplY3RzLCBsb2FkIGludG8gYSBoYXNobWFwXHJcbiAgICAgICAgXHJcbiAgICAgICAgVGhlIHRleHR1cmUgYXRsYXMgbXVzdCBoYXZlIGtleXMgb2YgdGhlIGZvcm0gOlxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBge2tleX0gKHtmcmFtZU51bWJlcn0pLnBuZ2AgXHJcbiAgICAgICAgXHJcbiAgICAgICAgd2hlcmUgdGhlIHtrZXl9IGZvciBlYWNoIGFuaW1hdGlvbiBtYXRjaGVzIHRoZSBzdHJpbmdzIHRoYXQgd2UgcHJvdmlkZSBpbiB0aGlzIGZ1bmN0aW9uIGFzIGtleXMgdG8gZWFjaCBhbmltYXRpb24gb2YgdGhlIG1hcFxyXG4gICAgICAgIFxyXG4gICAgICAgIFRoZSB7ZnJhbWVOdW1iZXJ9IG11c3Qgc3RhcnQgYXQgMSwgdGhpcyBpcyBvbmx5IGJlY2F1c2UgdGhhdCdzIGhvdyBiYXRjaCByZW5hbWluZyB3b3JrcyBpbiB3aW5kb3dzIGJ5IGRlZmF1bHQuXHJcbiAgICAqL1xyXG4gICAgYW5pbWF0aW9uc0luaXQoKXtcclxuICAgICAgICBsZXQgYW5pbWF0aW9uTWFwID0gbmV3IE1hcChbWyd3YWxrJywgdGhpcy5sb2FkU3ByaXRlKFwid2Fsa1wiLCAxMCwgdHJ1ZSldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3N0b3AnLCB0aGlzLmxvYWRTcHJpdGUoXCJzdG9wXCIsIDQsIGZhbHNlKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnaWRsZScsIHRoaXMubG9hZFNwcml0ZShcImlkbGVcIiwgOSwgZmFsc2UpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydqdW1wJywgdGhpcy5sb2FkU3ByaXRlKFwianVtcFwiLCA4LCBmYWxzZSldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3NsaWRlJyx0aGlzLmxvYWRTcHJpdGUoXCJzbGlkZVwiLCA0LCBmYWxzZSldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ2hhbmcnLCB0aGlzLmxvYWRTcHJpdGUoXCJoYW5nXCIsIDMsIGZhbHNlKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnY2xpbWInLCB0aGlzLmxvYWRTcHJpdGUoXCJjbGltYlwiLCA5LCBmYWxzZSldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ2ZhbGwnLCB0aGlzLmxvYWRTcHJpdGUoXCJmYWxsXCIsIDYsIHRydWUpXV0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHNldCB1bmlxdWUgcHJvcGVydGllcyBmb3Igc29tZSBhbmltYXRpb25zXHJcbiAgICAgICAgYW5pbWF0aW9uTWFwLmdldChcInNsaWRlXCIpLmFuY2hvci55ID0gMC4zO1xyXG4gICAgICAgIGFuaW1hdGlvbk1hcC5nZXQoXCJoYW5nXCIpLmFuY2hvci55ID0gMC4zO1xyXG4gICAgICAgIGFuaW1hdGlvbk1hcC5nZXQoXCJjbGltYlwiKS5hbmNob3IueSA9IDAuNjU7XHJcbiAgICAgICAgYW5pbWF0aW9uTWFwLmdldChcImNsaW1iXCIpLmFuY2hvci54ID0gMC44NTtcclxuXHJcbiAgICAgICAgYW5pbWF0aW9uTWFwLmdldChcImlkbGVcIikuYW5pbWF0aW9uU3BlZWQgPSAwLjE1O1xyXG5cclxuICAgICAgICBhbmltYXRpb25NYXAuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIGtleSAhPSBcImp1bXBcIilcclxuICAgICAgICAgICAgICAgIHZhbHVlLnZpc2libGUgPSBmYWxzZTsgLy8gc2luY2UgdGhlIGdhbWUgc3RhcnRzIHdpdGggdGhlIGNhdCBmYWxsaW5nLCBoaWRlIG90aGVyIGFuaW1hdGlvbnNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYW5pbWF0aW9uTWFwLmdldChcImp1bXBcIikucGxheSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gYW5pbWF0aW9uTWFwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGxvYWQgdGV4dHVyZXMgZnJvbSBtZW1vcnkgaW50byBhbmltYXRlZCBzcHJpdGUgb2JqZWN0c1xyXG4gICAgbG9hZFNwcml0ZShrZXksIGZyYW1lQ291bnQsIGRvZXNMb29wLCBhbmltYXRpb25TcGVlZCA9IDAuMiApe1xyXG4gICAgICAgIGxldCBmcmFtZXMgPSBbXTtcclxuICAgICAgICBmb3IgKCBsZXQgaSA9IDE7IGkgPCAoZnJhbWVDb3VudCsxKTsgaSsrICkge1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSBpO1xyXG4gICAgICAgICAgICBjb25zdCBrZXlTdHJpbmcgPSBgJHtrZXl9ICgke3ZhbH0pLnBuZ2A7XHJcbiAgICAgICAgICAgIGZyYW1lcy5wdXNoKFBJWEkuVGV4dHVyZS5mcm9tKGtleVN0cmluZykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG5ld1Nwcml0ZSA9IG5ldyBQSVhJLkFuaW1hdGVkU3ByaXRlKGZyYW1lcyk7XHJcbiAgICAgICAgbmV3U3ByaXRlLnggPSB3aW5kb3cuaW5uZXJXaWR0aCAvIDI7XHJcbiAgICAgICAgbmV3U3ByaXRlLnkgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyO1xyXG4gICAgICAgIG5ld1Nwcml0ZS52eCA9IDA7XHJcbiAgICAgICAgbmV3U3ByaXRlLnZ5ID0gMDtcclxuICAgICAgICBuZXdTcHJpdGUuc2NhbGUuc2V0KDMuNSwgMy41KTtcclxuICAgICAgICBuZXdTcHJpdGUuYW5jaG9yLnNldCgwLjUpO1xyXG4gICAgICAgIG5ld1Nwcml0ZS5hbmltYXRpb25TcGVlZCA9IGFuaW1hdGlvblNwZWVkO1xyXG4gICAgICAgIG5ld1Nwcml0ZS5sb29wID0gZG9lc0xvb3A7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG5ld1Nwcml0ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld1Nwcml0ZTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkVG9yY2goKXtcclxuICAgICAgICBsZXQgZnJhbWVzID0gW107XHJcbiAgICAgICAgZm9yICggbGV0IGkgPSAxOyBpIDwgMTA7IGkrKyl7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGk7XHJcbiAgICAgICAgICAgIGZyYW1lcy5wdXNoKFBJWEkuVGV4dHVyZS5mcm9tKGB0b3JjaCAoJHt2YWx9KS5wbmdgKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmcmFtZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbXVzdCBjaGFuZ2UgdGhlIGZvciBsb29wIHdoZW4gbmV3IHRpbGVzIGFyZSBhZGRlZFxyXG4gICAgbG9hZFRpbGVzKCl7XHJcbiAgICAgICAgbGV0IHRleHR1cmVzID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yICggbGV0IGkgPSAxOyBpIDwgMjQ7IGkrKyApIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsID0gaTsgICAgICAgXHJcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlID0gUElYSS5UZXh0dXJlLmZyb20oYGNhdmVUaWxlICgke3ZhbH0pLnBuZ2ApOyBcclxuICAgICAgICAgICAgdGV4dHVyZXMucHVzaCggdGV4dHVyZSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gbmV3IE1hcChbWydCYWNrZ3JvdW5kJywgdGV4dHVyZXNbMF1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ1RMQ29ybmVyJywgdGV4dHVyZXNbMV1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ1RvcEVkZ2UnLCB0ZXh0dXJlc1syXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnVFJDb3JuZXInLCB0ZXh0dXJlc1szXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnTGVmdEVkZ2UnLCB0ZXh0dXJlc1s0XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSW50ZXJpb3InLCB0ZXh0dXJlc1s1XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnUmlnaHRFZGdlJywgdGV4dHVyZXNbNl1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0JMQ29ybmVyJywgdGV4dHVyZXNbN11dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0JvdHRvbUVkZ2UnLCB0ZXh0dXJlc1s4XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnQlJDb3JuZXInLCB0ZXh0dXJlc1s5XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnV2FuZycsIHRleHR1cmVzWzEwXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnU2hhZnQnLCB0ZXh0dXJlc1sxMV1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0xvbmVyJywgdGV4dHVyZXNbMTNdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydTcGlrZXMnLCB0ZXh0dXJlc1sxNF1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ01vb24nLCB0ZXh0dXJlc1sxNV1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ1NreScsIHRleHR1cmVzWzE2XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnU3RhcnMtMScsIHRleHR1cmVzWzE3XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnU3RhcnMtMicsIHRleHR1cmVzWzE4XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnU3RhcnMtMycsIHRleHR1cmVzWzE5XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnR3Jhc3MtMScsIHRleHR1cmVzWzIwXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnR3Jhc3MtMicsIHRleHR1cmVzWzIxXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnY2F0bmlwJywgdGV4dHVyZXNbMjJdXSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZEJ1dHRvbnMoKXtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhQSVhJLlRleHR1cmUuZnJvbSgncmlnaHQta2V5ICgxKS5wbmcnKSlcclxuICAgICAgICBsZXQgYnV0dG9uRnJhbWVzID0gbmV3IE1hcChbWydyaWdodCcsIFtQSVhJLlRleHR1cmUuZnJvbSgncmlnaHQta2V5ICgxKS5wbmcnKSwgUElYSS5UZXh0dXJlLmZyb20oJ3JpZ2h0LWtleSAoMikucG5nJyldXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydsZWZ0JywgW1BJWEkuVGV4dHVyZS5mcm9tKCdsZWZ0LWtleSAoMSkucG5nJyksIFBJWEkuVGV4dHVyZS5mcm9tKCdsZWZ0LWtleSAoMikucG5nJyldXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyd1cCcsIFtQSVhJLlRleHR1cmUuZnJvbSgnYS1rZXkgKDEpLnBuZycpLCBQSVhJLlRleHR1cmUuZnJvbSgnYS1rZXkgKDIpLnBuZycpXV0sXSk7XHJcbiAgICAgICAgcmV0dXJuIGJ1dHRvbkZyYW1lcztcclxuICAgIH1cclxuXHJcbiAgICBsb2FkTWVudSgpe1xyXG4gICAgICAgIGxldCBidXR0b25GcmFtZXMgPSBuZXcgTWFwKFtbJ3BhdXNlJywgUElYSS5UZXh0dXJlLmZyb20oXCJwYXVzZS5wbmdcIildLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ2V4aXQnLCBQSVhJLlRleHR1cmUuZnJvbShcImV4aXQtYnV0dG9uLnBuZ1wiKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsncGF1c2VkLXRleHQnLCBQSVhJLlRleHR1cmUuZnJvbShcInBhdXNlZC10ZXh0LnBuZ1wiKV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJ1dHRvbkZyYW1lcztcclxuICAgIH1cclxuXHJcbiAgICBsb2FkU291bmQoKXtcclxuICAgICAgICByZXR1cm4gcmVzb3VyY2VzLnBhdXNlTXVzaWMuZGF0YTtcclxuXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGxvYWRGb250KCkge1xyXG4gICAgICAgIHJldHVybiByZXNvdXJjZXMuQVJDQURFQ0xBU1NJQztcclxuICAgIH1cclxufSIsIi8qIVxuICogQHBpeGkvcnVubmVyIC0gdjUuMS4xXG4gKiBDb21waWxlZCBGcmksIDAyIEF1ZyAyMDE5IDIzOjIwOjIzIFVUQ1xuICpcbiAqIEBwaXhpL3J1bm5lciBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbi8qKlxuICogQSBSdW5uZXIgaXMgYSBoaWdobHkgcGVyZm9ybWFudCBhbmQgc2ltcGxlIGFsdGVybmF0aXZlIHRvIHNpZ25hbHMuIEJlc3QgdXNlZCBpbiBzaXR1YXRpb25zXG4gKiB3aGVyZSBldmVudHMgYXJlIGRpc3BhdGNoZWQgdG8gbWFueSBvYmplY3RzIGF0IGhpZ2ggZnJlcXVlbmN5IChzYXkgZXZlcnkgZnJhbWUhKVxuICpcbiAqXG4gKiBsaWtlIGEgc2lnbmFsLi5cbiAqIGBgYFxuICogY29uc3QgbXlPYmplY3QgPSB7XG4gKiAgICAgbG9hZGVkOiBuZXcgUElYSS5SdW5uZXIoJ2xvYWRlZCcpXG4gKiB9XG4gKlxuICogY29uc3QgbGlzdGVuZXIgPSB7XG4gKiAgICAgbG9hZGVkOiBmdW5jdGlvbigpe1xuICogICAgICAgICAvLyB0aGluXG4gKiAgICAgfVxuICogfVxuICpcbiAqIG15T2JqZWN0LnVwZGF0ZS5hZGQobGlzdGVuZXIpO1xuICpcbiAqIG15T2JqZWN0LmxvYWRlZC5lbWl0KCk7XG4gKiBgYGBcbiAqXG4gKiBPciBmb3IgaGFuZGxpbmcgY2FsbGluZyB0aGUgc2FtZSBmdW5jdGlvbiBvbiBtYW55IGl0ZW1zXG4gKiBgYGBcbiAqIGNvbnN0IG15R2FtZSA9IHtcbiAqICAgICB1cGRhdGU6IG5ldyBQSVhJLlJ1bm5lcigndXBkYXRlJylcbiAqIH1cbiAqXG4gKiBjb25zdCBnYW1lT2JqZWN0ID0ge1xuICogICAgIHVwZGF0ZTogZnVuY3Rpb24odGltZSl7XG4gKiAgICAgICAgIC8vIHVwZGF0ZSBteSBnYW1leSBzdGF0ZVxuICogICAgIH1cbiAqIH1cbiAqXG4gKiBteUdhbWUudXBkYXRlLmFkZChnYW1lT2JqZWN0MSk7XG4gKlxuICogbXlHYW1lLnVwZGF0ZS5lbWl0KHRpbWUpO1xuICogYGBgXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBSdW5uZXIgPSBmdW5jdGlvbiBSdW5uZXIobmFtZSlcbntcbiAgICB0aGlzLml0ZW1zID0gW107XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgdGhpcy5fYWxpYXNDb3VudCA9IDA7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBlbXB0eTogeyBjb25maWd1cmFibGU6IHRydWUgfSxuYW1lOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qKlxuICogRGlzcGF0Y2gvQnJvYWRjYXN0IFJ1bm5lciB0byBhbGwgbGlzdGVuZXJzIGFkZGVkIHRvIHRoZSBxdWV1ZS5cbiAqIEBwYXJhbSB7Li4uYW55fSBwYXJhbXMgLSBvcHRpb25hbCBwYXJhbWV0ZXJzIHRvIHBhc3MgdG8gZWFjaCBsaXN0ZW5lclxuICovXG5SdW5uZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0IChhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpXG57XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiA4KVxuICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXggYXJndW1lbnRzIHJlYWNoZWQnKTtcbiAgICB9XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIG5hbWUgPSByZWYubmFtZTtcbiAgICAgICAgdmFyIGl0ZW1zID0gcmVmLml0ZW1zO1xuXG4gICAgdGhpcy5fYWxpYXNDb3VudCsrO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKVxuICAgIHtcbiAgICAgICAgaXRlbXNbaV1bbmFtZV0oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbXMgPT09IHRoaXMuaXRlbXMpXG4gICAge1xuICAgICAgICB0aGlzLl9hbGlhc0NvdW50LS07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5SdW5uZXIucHJvdG90eXBlLmVuc3VyZU5vbkFsaWFzZWRJdGVtcyA9IGZ1bmN0aW9uIGVuc3VyZU5vbkFsaWFzZWRJdGVtcyAoKVxue1xuICAgIGlmICh0aGlzLl9hbGlhc0NvdW50ID4gMCAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IDEpXG4gICAge1xuICAgICAgICB0aGlzLl9hbGlhc0NvdW50ID0gMDtcbiAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UoMCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciB0byB0aGUgUnVubmVyXG4gKlxuICogUnVubmVycyBkbyBub3QgbmVlZCB0byBoYXZlIHNjb3BlIG9yIGZ1bmN0aW9ucyBwYXNzZWQgdG8gdGhlbS5cbiAqIEFsbCB0aGF0IGlzIHJlcXVpcmVkIGlzIHRvIHBhc3MgdGhlIGxpc3RlbmluZyBvYmplY3QgYW5kIGVuc3VyZSB0aGF0IGl0IGhhcyBjb250YWlucyBhIGZ1bmN0aW9uIHRoYXQgaGFzIHRoZSBzYW1lIG5hbWVcbiAqIGFzIHRoZSBuYW1lIHByb3ZpZGVkIHRvIHRoZSBSdW5uZXIgd2hlbiBpdCB3YXMgY3JlYXRlZC5cbiAqXG4gKiBFZyBBIGxpc3RlbmVyIHBhc3NlZCB0byB0aGlzIFJ1bm5lciB3aWxsIHJlcXVpcmUgYSAnY29tcGxldGUnIGZ1bmN0aW9uLlxuICpcbiAqIGBgYFxuICogY29uc3QgY29tcGxldGUgPSBuZXcgUElYSS5SdW5uZXIoJ2NvbXBsZXRlJyk7XG4gKiBgYGBcbiAqXG4gKiBUaGUgc2NvcGUgdXNlZCB3aWxsIGJlIHRoZSBvYmplY3QgaXRzZWxmLlxuICpcbiAqIEBwYXJhbSB7YW55fSBpdGVtIC0gVGhlIG9iamVjdCB0aGF0IHdpbGwgYmUgbGlzdGVuaW5nLlxuICovXG5SdW5uZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoaXRlbSlcbntcbiAgICBpZiAoaXRlbVt0aGlzLl9uYW1lXSlcbiAgICB7XG4gICAgICAgIHRoaXMuZW5zdXJlTm9uQWxpYXNlZEl0ZW1zKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlKGl0ZW0pO1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHNpbmdsZSBsaXN0ZW5lciBmcm9tIHRoZSBkaXNwYXRjaCBxdWV1ZS5cbiAqIEBwYXJhbSB7YW55fSBpdGVtIC0gVGhlIGxpc3RlbnIgdGhhdCB5b3Ugd291bGQgbGlrZSB0byByZW1vdmUuXG4gKi9cblJ1bm5lci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlIChpdGVtKVxue1xuICAgIHZhciBpbmRleCA9IHRoaXMuaXRlbXMuaW5kZXhPZihpdGVtKTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAge1xuICAgICAgICB0aGlzLmVuc3VyZU5vbkFsaWFzZWRJdGVtcygpO1xuICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiB0aGUgbGlzdGVuZXIgaXMgYWxyZWFkeSBpbiB0aGUgUnVubmVyXG4gKiBAcGFyYW0ge2FueX0gaXRlbSAtIFRoZSBsaXN0ZW5lciB0aGF0IHlvdSB3b3VsZCBsaWtlIHRvIGNoZWNrLlxuICovXG5SdW5uZXIucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gY29udGFpbnMgKGl0ZW0pXG57XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuaW5kZXhPZihpdGVtKSAhPT0gLTE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzIGZyb20gdGhlIFJ1bm5lclxuICovXG5SdW5uZXIucHJvdG90eXBlLnJlbW92ZUFsbCA9IGZ1bmN0aW9uIHJlbW92ZUFsbCAoKVxue1xuICAgIHRoaXMuZW5zdXJlTm9uQWxpYXNlZEl0ZW1zKCk7XG4gICAgdGhpcy5pdGVtcy5sZW5ndGggPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgcmVmZXJlbmNlcywgZG9uJ3QgdXNlIGFmdGVyIHRoaXMuXG4gKi9cblJ1bm5lci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbntcbiAgICB0aGlzLnJlbW92ZUFsbCgpO1xuICAgIHRoaXMuaXRlbXMgPSBudWxsO1xuICAgIHRoaXMuX25hbWUgPSBudWxsO1xufTtcblxuLyoqXG4gKiBgdHJ1ZWAgaWYgdGhlcmUgYXJlIG5vIHRoaXMgUnVubmVyIGNvbnRhaW5zIG5vIGxpc3RlbmVyc1xuICpcbiAqIEBtZW1iZXIge2Jvb2xlYW59XG4gKiBAcmVhZG9ubHlcbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmVtcHR5LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RoID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgbmFtZSBvZiB0aGUgcnVubmVyLlxuICpcbiAqIEBtZW1iZXIge3N0cmluZ31cbiAqIEByZWFkb25seVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMubmFtZS5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiB0aGlzLl9uYW1lO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFJ1bm5lci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4vKipcbiAqIEFsaWFzIGZvciBgZW1pdGBcbiAqIEBtZW1iZXJvZiBQSVhJLlJ1bm5lciNcbiAqIEBtZXRob2QgZGlzcGF0Y2hcbiAqIEBzZWUgUElYSS5SdW5uZXIjZW1pdFxuICovXG5SdW5uZXIucHJvdG90eXBlLmRpc3BhdGNoID0gUnVubmVyLnByb3RvdHlwZS5lbWl0O1xuXG4vKipcbiAqIEFsaWFzIGZvciBgZW1pdGBcbiAqIEBtZW1iZXJvZiBQSVhJLlJ1bm5lciNcbiAqIEBtZXRob2QgcnVuXG4gKiBAc2VlIFBJWEkuUnVubmVyI2VtaXRcbiAqL1xuUnVubmVyLnByb3RvdHlwZS5ydW4gPSBSdW5uZXIucHJvdG90eXBlLmVtaXQ7XG5cbmV4cG9ydCB7IFJ1bm5lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVubmVyLmVzLmpzLm1hcFxuIiwiLyohXG4gKiBAcGl4aS9zZXR0aW5ncyAtIHY1LjEuM1xuICogQ29tcGlsZWQgTW9uLCAwOSBTZXAgMjAxOSAwNDo1MTo1MyBVVENcbiAqXG4gKiBAcGl4aS9zZXR0aW5ncyBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbmltcG9ydCBpc01vYmlsZSBmcm9tICdpc21vYmlsZWpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNNb2JpbGUgfSBmcm9tICdpc21vYmlsZWpzJztcblxuLyoqXG4gKiBUaGUgbWF4aW11bSByZWNvbW1lbmRlZCB0ZXh0dXJlIHVuaXRzIHRvIHVzZS5cbiAqIEluIHRoZW9yeSB0aGUgYmlnZ2VyIHRoZSBiZXR0ZXIsIGFuZCBmb3IgZGVza3RvcCB3ZSdsbCB1c2UgYXMgbWFueSBhcyB3ZSBjYW4uXG4gKiBCdXQgc29tZSBtb2JpbGUgZGV2aWNlcyBzbG93IGRvd24gaWYgdGhlcmUgaXMgdG8gbWFueSBicmFuY2hlcyBpbiB0aGUgc2hhZGVyLlxuICogU28gaW4gcHJhY3RpY2UgdGhlcmUgc2VlbXMgdG8gYmUgYSBzd2VldCBzcG90IHNpemUgdGhhdCB2YXJpZXMgZGVwZW5kaW5nIG9uIHRoZSBkZXZpY2UuXG4gKlxuICogSW4gdjQsIGFsbCBtb2JpbGUgZGV2aWNlcyB3ZXJlIGxpbWl0ZWQgdG8gNCB0ZXh0dXJlIHVuaXRzIGJlY2F1c2UgZm9yIHRoaXMuXG4gKiBJbiB2NSwgd2UgYWxsb3cgYWxsIHRleHR1cmUgdW5pdHMgdG8gYmUgdXNlZCBvbiBtb2Rlcm4gQXBwbGUgb3IgQW5kcm9pZCBkZXZpY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBtYXhSZWNvbW1lbmRlZFRleHR1cmVzKG1heClcbntcbiAgICB2YXIgYWxsb3dNYXggPSB0cnVlO1xuXG4gICAgaWYgKGlzTW9iaWxlLnRhYmxldCB8fCBpc01vYmlsZS5waG9uZSlcbiAgICB7XG4gICAgICAgIGFsbG93TWF4ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzTW9iaWxlLmFwcGxlLmRldmljZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIG1hdGNoID0gKG5hdmlnYXRvci51c2VyQWdlbnQpLm1hdGNoKC9PUyAoXFxkKylfKFxcZCspPy8pO1xuXG4gICAgICAgICAgICBpZiAobWF0Y2gpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIG1ham9yVmVyc2lvbiA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG5cbiAgICAgICAgICAgICAgICAvLyBBbGwgdGV4dHVyZSB1bml0cyBjYW4gYmUgdXNlZCBvbiBkZXZpY2VzIHRoYXQgc3VwcG9ydCBpb3MgMTEgb3IgYWJvdmVcbiAgICAgICAgICAgICAgICBpZiAobWFqb3JWZXJzaW9uID49IDExKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNYXggPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNNb2JpbGUuYW5kcm9pZC5kZXZpY2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQxID0gKG5hdmlnYXRvci51c2VyQWdlbnQpLm1hdGNoKC9BbmRyb2lkXFxzKFswLTkuXSopLyk7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaCQxKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBtYWpvclZlcnNpb24kMSA9IHBhcnNlSW50KG1hdGNoJDFbMV0sIDEwKTtcblxuICAgICAgICAgICAgICAgIC8vIEFsbCB0ZXh0dXJlIHVuaXRzIGNhbiBiZSB1c2VkIG9uIGRldmljZXMgdGhhdCBzdXBwb3J0IEFuZHJvaWQgNyAoTm91Z2F0KSBvciBhYm92ZVxuICAgICAgICAgICAgICAgIGlmIChtYWpvclZlcnNpb24kMSA+PSA3KVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNYXggPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhbGxvd01heCA/IG1heCA6IDQ7XG59XG5cbi8qKlxuICogVXBsb2FkaW5nIHRoZSBzYW1lIGJ1ZmZlciBtdWx0aXBsZSB0aW1lcyBpbiBhIHNpbmdsZSBmcmFtZSBjYW4gY2F1c2UgcGVyZm9ybWFuY2UgaXNzdWVzLlxuICogQXBwYXJlbnQgb24gaU9TIHNvIG9ubHkgY2hlY2sgZm9yIHRoYXQgYXQgdGhlIG1vbWVudFxuICogVGhpcyBjaGVjayBtYXkgYmVjb21lIG1vcmUgY29tcGxleCBpZiB0aGlzIGlzc3VlIHBvcHMgdXAgZWxzZXdoZXJlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY2FuVXBsb2FkU2FtZUJ1ZmZlcigpXG57XG4gICAgcmV0dXJuICFpc01vYmlsZS5hcHBsZS5kZXZpY2U7XG59XG5cbi8qKlxuICogVXNlcidzIGN1c3RvbWl6YWJsZSBnbG9iYWxzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0IFBJWEkgc2V0dGluZ3MsIHN1Y2hcbiAqIGFzIGEgcmVuZGVyZXIncyBkZWZhdWx0IHJlc29sdXRpb24sIGZyYW1lcmF0ZSwgZmxvYXQgcHJlY2lzaW9uLCBldGMuXG4gKiBAZXhhbXBsZVxuICogLy8gVXNlIHRoZSBuYXRpdmUgd2luZG93IHJlc29sdXRpb24gYXMgdGhlIGRlZmF1bHQgcmVzb2x1dGlvblxuICogLy8gd2lsbCBzdXBwb3J0IGhpZ2gtZGVuc2l0eSBkaXNwbGF5cyB3aGVuIHJlbmRlcmluZ1xuICogUElYSS5zZXR0aW5ncy5SRVNPTFVUSU9OID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gKlxuICogLy8gRGlzYWJsZSBpbnRlcnBvbGF0aW9uIHdoZW4gc2NhbGluZywgd2lsbCBtYWtlIHRleHR1cmUgYmUgcGl4ZWxhdGVkXG4gKiBQSVhJLnNldHRpbmdzLlNDQUxFX01PREUgPSBQSVhJLlNDQUxFX01PREVTLk5FQVJFU1Q7XG4gKiBAbmFtZXNwYWNlIFBJWEkuc2V0dGluZ3NcbiAqL1xudmFyIHNldHRpbmdzID0ge1xuXG4gICAgLyoqXG4gICAgICogSWYgc2V0IHRvIHRydWUgV2ViR0wgd2lsbCBhdHRlbXB0IG1ha2UgdGV4dHVyZXMgbWltcGFwZWQgYnkgZGVmYXVsdC5cbiAgICAgKiBNaXBtYXBwaW5nIHdpbGwgb25seSBzdWNjZWVkIGlmIHRoZSBiYXNlIHRleHR1cmUgdXBsb2FkZWQgaGFzIHBvd2VyIG9mIHR3byBkaW1lbnNpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIE1JUE1BUF9URVhUVVJFU1xuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge1BJWEkuTUlQTUFQX01PREVTfVxuICAgICAqIEBkZWZhdWx0IFBJWEkuTUlQTUFQX01PREVTLlBPVzJcbiAgICAgKi9cbiAgICBNSVBNQVBfVEVYVFVSRVM6IDEsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGFuaXNvdHJvcGljIGZpbHRlcmluZyBsZXZlbCBvZiB0ZXh0dXJlcy5cbiAgICAgKiBVc3VhbGx5IGZyb20gMCB0byAxNlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIEFOSVNPVFJPUElDX0xFVkVMXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBBTklTT1RST1BJQ19MRVZFTDogMCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgcmVzb2x1dGlvbiAvIGRldmljZSBwaXhlbCByYXRpbyBvZiB0aGUgcmVuZGVyZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgUkVTT0xVVElPTlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgUkVTT0xVVElPTjogMSxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgZmlsdGVyIHJlc29sdXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgRklMVEVSX1JFU09MVVRJT05cbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIEZJTFRFUl9SRVNPTFVUSU9OOiAxLFxuXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gdGV4dHVyZXMgdGhhdCB0aGlzIGRldmljZSBzdXBwb3J0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbmFtZSBTUFJJVEVfTUFYX1RFWFRVUkVTXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDMyXG4gICAgICovXG4gICAgU1BSSVRFX01BWF9URVhUVVJFUzogbWF4UmVjb21tZW5kZWRUZXh0dXJlcygzMiksXG5cbiAgICAvLyBUT0RPOiBtYXliZSBjaGFuZ2UgdG8gU1BSSVRFLkJBVENIX1NJWkU6IDIwMDBcbiAgICAvLyBUT0RPOiBtYXliZSBhZGQgUEFSVElDTEUuQkFUQ0hfU0laRTogMTUwMDBcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IHNwcml0ZSBiYXRjaCBzaXplLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgYWltcyB0byBiYWxhbmNlIGRlc2t0b3AgYW5kIG1vYmlsZSBkZXZpY2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIFNQUklURV9CQVRDSF9TSVpFXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDQwOTZcbiAgICAgKi9cbiAgICBTUFJJVEVfQkFUQ0hfU0laRTogNDA5NixcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IHJlbmRlciBvcHRpb25zIGlmIG5vbmUgYXJlIHN1cHBsaWVkIHRvIHtAbGluayBQSVhJLlJlbmRlcmVyfVxuICAgICAqIG9yIHtAbGluayBQSVhJLkNhbnZhc1JlbmRlcmVyfS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbmFtZSBSRU5ERVJfT1BUSU9OU1xuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge0hUTUxDYW52YXNFbGVtZW50fSB2aWV3PW51bGxcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gcmVzb2x1dGlvbj0xXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBhbnRpYWxpYXM9ZmFsc2VcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGZvcmNlRlhBQT1mYWxzZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYXV0b0RlbnNpdHk9ZmFsc2VcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IHRyYW5zcGFyZW50PWZhbHNlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJhY2tncm91bmRDb2xvcj0weDAwMDAwMFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY2xlYXJCZWZvcmVSZW5kZXI9dHJ1ZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcHJlc2VydmVEcmF3aW5nQnVmZmVyPWZhbHNlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHdpZHRoPTgwMFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoZWlnaHQ9NjAwXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBsZWdhY3k9ZmFsc2VcbiAgICAgKi9cbiAgICBSRU5ERVJfT1BUSU9OUzoge1xuICAgICAgICB2aWV3OiBudWxsLFxuICAgICAgICBhbnRpYWxpYXM6IGZhbHNlLFxuICAgICAgICBmb3JjZUZYQUE6IGZhbHNlLFxuICAgICAgICBhdXRvRGVuc2l0eTogZmFsc2UsXG4gICAgICAgIHRyYW5zcGFyZW50OiBmYWxzZSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAweDAwMDAwMCxcbiAgICAgICAgY2xlYXJCZWZvcmVSZW5kZXI6IHRydWUsXG4gICAgICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogZmFsc2UsXG4gICAgICAgIHdpZHRoOiA4MDAsXG4gICAgICAgIGhlaWdodDogNjAwLFxuICAgICAgICBsZWdhY3k6IGZhbHNlLFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IEdhcmJhZ2UgQ29sbGVjdGlvbiBtb2RlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIEdDX01PREVcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtQSVhJLkdDX01PREVTfVxuICAgICAqIEBkZWZhdWx0IFBJWEkuR0NfTU9ERVMuQVVUT1xuICAgICAqL1xuICAgIEdDX01PREU6IDAsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IEdhcmJhZ2UgQ29sbGVjdGlvbiBtYXggaWRsZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbmFtZSBHQ19NQVhfSURMRVxuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAzNjAwXG4gICAgICovXG4gICAgR0NfTUFYX0lETEU6IDYwICogNjAsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IEdhcmJhZ2UgQ29sbGVjdGlvbiBtYXhpbXVtIGNoZWNrIGNvdW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIEdDX01BWF9DSEVDS19DT1VOVFxuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCA2MDBcbiAgICAgKi9cbiAgICBHQ19NQVhfQ0hFQ0tfQ09VTlQ6IDYwICogMTAsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHdyYXAgbW9kZXMgdGhhdCBhcmUgc3VwcG9ydGVkIGJ5IHBpeGkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgV1JBUF9NT0RFXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7UElYSS5XUkFQX01PREVTfVxuICAgICAqIEBkZWZhdWx0IFBJWEkuV1JBUF9NT0RFUy5DTEFNUFxuICAgICAqL1xuICAgIFdSQVBfTU9ERTogMzMwNzEsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHNjYWxlIG1vZGUgZm9yIHRleHR1cmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIFNDQUxFX01PREVcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtQSVhJLlNDQUxFX01PREVTfVxuICAgICAqIEBkZWZhdWx0IFBJWEkuU0NBTEVfTU9ERVMuTElORUFSXG4gICAgICovXG4gICAgU0NBTEVfTU9ERTogMSxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgc3BlY2lmeSBmbG9hdCBwcmVjaXNpb24gaW4gdmVydGV4IHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbmFtZSBQUkVDSVNJT05fVkVSVEVYXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7UElYSS5QUkVDSVNJT059XG4gICAgICogQGRlZmF1bHQgUElYSS5QUkVDSVNJT04uSElHSFxuICAgICAqL1xuICAgIFBSRUNJU0lPTl9WRVJURVg6ICdoaWdocCcsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHNwZWNpZnkgZmxvYXQgcHJlY2lzaW9uIGluIGZyYWdtZW50IHNoYWRlci5cbiAgICAgKiBpT1MgaXMgYmVzdCBzZXQgYXQgaGlnaHAgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpanMvcGl4aS5qcy9pc3N1ZXMvMzc0MlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIFBSRUNJU0lPTl9GUkFHTUVOVFxuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge1BJWEkuUFJFQ0lTSU9OfVxuICAgICAqIEBkZWZhdWx0IFBJWEkuUFJFQ0lTSU9OLk1FRElVTVxuICAgICAqL1xuICAgIFBSRUNJU0lPTl9GUkFHTUVOVDogaXNNb2JpbGUuYXBwbGUuZGV2aWNlID8gJ2hpZ2hwJyA6ICdtZWRpdW1wJyxcblxuICAgIC8qKlxuICAgICAqIENhbiB3ZSB1cGxvYWQgdGhlIHNhbWUgYnVmZmVyIGluIGEgc2luZ2xlIGZyYW1lP1xuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIENBTl9VUExPQURfU0FNRV9CVUZGRVJcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIENBTl9VUExPQURfU0FNRV9CVUZGRVI6IGNhblVwbG9hZFNhbWVCdWZmZXIoKSxcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgYml0bWFwIGNyZWF0aW9uIGJlZm9yZSBpbWFnZSBsb2FkLiBUaGlzIGZlYXR1cmUgaXMgZXhwZXJpbWVudGFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIENSRUFURV9JTUFHRV9CSVRNQVBcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgQ1JFQVRFX0lNQUdFX0JJVE1BUDogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlIFBpeGlKUyB3aWxsIE1hdGguZmxvb3IoKSB4L3kgdmFsdWVzIHdoZW4gcmVuZGVyaW5nLCBzdG9wcGluZyBwaXhlbCBpbnRlcnBvbGF0aW9uLlxuICAgICAqIEFkdmFudGFnZXMgY2FuIGluY2x1ZGUgc2hhcnBlciBpbWFnZSBxdWFsaXR5IChsaWtlIHRleHQpIGFuZCBmYXN0ZXIgcmVuZGVyaW5nIG9uIGNhbnZhcy5cbiAgICAgKiBUaGUgbWFpbiBkaXNhZHZhbnRhZ2UgaXMgbW92ZW1lbnQgb2Ygb2JqZWN0cyBtYXkgYXBwZWFyIGxlc3Mgc21vb3RoLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBjb25zdGFudFxuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBST1VORF9QSVhFTFM6IGZhbHNlLFxufTtcblxuZXhwb3J0IHsgc2V0dGluZ3MgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldHRpbmdzLmVzLmpzLm1hcFxuIiwiLyohXG4gKiBAcGl4aS9jb25zdGFudHMgLSB2NS4xLjBcbiAqIENvbXBpbGVkIEZyaSwgMTkgSnVsIDIwMTkgMjE6NTQ6MzYgVVRDXG4gKlxuICogQHBpeGkvY29uc3RhbnRzIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuLyoqXG4gKiBEaWZmZXJlbnQgdHlwZXMgb2YgZW52aXJvbm1lbnRzIGZvciBXZWJHTC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQG5hbWUgRU5WXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFdFQkdMX0xFR0FDWSAtIFVzZWQgZm9yIG9sZGVyIHYxIFdlYkdMIGRldmljZXMuIFBpeGlKUyB3aWxsIGFpbSB0byBlbnN1cmUgY29tcGF0aWJpbGl0eVxuICogIHdpdGggb2xkZXIgLyBsZXNzIGFkdmFuY2VkIGRldmljZXMuIElmIHlvdSBleHBlcmllbmNlIHVuZXhwbGFpbmVkIGZsaWNrZXJpbmcgcHJlZmVyIHRoaXMgZW52aXJvbm1lbnQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gV0VCR0wgLSBWZXJzaW9uIDEgb2YgV2ViR0xcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBXRUJHTDIgLSBWZXJzaW9uIDIgb2YgV2ViR0xcbiAqL1xudmFyIEVOViA9IHtcbiAgICBXRUJHTF9MRUdBQ1k6IDAsXG4gICAgV0VCR0w6IDEsXG4gICAgV0VCR0wyOiAyLFxufTtcblxuLyoqXG4gKiBDb25zdGFudCB0byBpZGVudGlmeSB0aGUgUmVuZGVyZXIgVHlwZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQG5hbWUgUkVOREVSRVJfVFlQRVxuICogQGVudW0ge251bWJlcn1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBVTktOT1dOIC0gVW5rbm93biByZW5kZXIgdHlwZS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBXRUJHTCAtIFdlYkdMIHJlbmRlciB0eXBlLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IENBTlZBUyAtIENhbnZhcyByZW5kZXIgdHlwZS5cbiAqL1xudmFyIFJFTkRFUkVSX1RZUEUgPSB7XG4gICAgVU5LTk9XTjogICAgMCxcbiAgICBXRUJHTDogICAgICAxLFxuICAgIENBTlZBUzogICAgIDIsXG59O1xuXG4vKipcbiAqIFZhcmlvdXMgYmxlbmQgbW9kZXMgc3VwcG9ydGVkIGJ5IFBJWEkuXG4gKlxuICogSU1QT1JUQU5UIC0gVGhlIFdlYkdMIHJlbmRlcmVyIG9ubHkgc3VwcG9ydHMgdGhlIE5PUk1BTCwgQURELCBNVUxUSVBMWSBhbmQgU0NSRUVOIGJsZW5kIG1vZGVzLlxuICogQW55dGhpbmcgZWxzZSB3aWxsIHNpbGVudGx5IGFjdCBsaWtlIE5PUk1BTC5cbiAqXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQG5hbWUgQkxFTkRfTU9ERVNcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKiBAcHJvcGVydHkge251bWJlcn0gTk9STUFMXG4gKiBAcHJvcGVydHkge251bWJlcn0gQUREXG4gKiBAcHJvcGVydHkge251bWJlcn0gTVVMVElQTFlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBTQ1JFRU5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBPVkVSTEFZXG4gKiBAcHJvcGVydHkge251bWJlcn0gREFSS0VOXG4gKiBAcHJvcGVydHkge251bWJlcn0gTElHSFRFTlxuICogQHByb3BlcnR5IHtudW1iZXJ9IENPTE9SX0RPREdFXG4gKiBAcHJvcGVydHkge251bWJlcn0gQ09MT1JfQlVSTlxuICogQHByb3BlcnR5IHtudW1iZXJ9IEhBUkRfTElHSFRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBTT0ZUX0xJR0hUXG4gKiBAcHJvcGVydHkge251bWJlcn0gRElGRkVSRU5DRVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEVYQ0xVU0lPTlxuICogQHByb3BlcnR5IHtudW1iZXJ9IEhVRVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFNBVFVSQVRJT05cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBDT0xPUlxuICogQHByb3BlcnR5IHtudW1iZXJ9IExVTUlOT1NJVFlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBOT1JNQUxfTlBNXG4gKiBAcHJvcGVydHkge251bWJlcn0gQUREX05QTVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFNDUkVFTl9OUE1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBOT05FXG4gKiBAcHJvcGVydHkge251bWJlcn0gU1JDX0lOXG4gKiBAcHJvcGVydHkge251bWJlcn0gU1JDX09VVFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFNSQ19BVE9QXG4gKiBAcHJvcGVydHkge251bWJlcn0gRFNUX09WRVJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBEU1RfSU5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBEU1RfT1VUXG4gKiBAcHJvcGVydHkge251bWJlcn0gRFNUX0FUT1BcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBTVUJUUkFDVFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFNSQ19PVkVSXG4gKiBAcHJvcGVydHkge251bWJlcn0gRVJBU0VcbiAqL1xudmFyIEJMRU5EX01PREVTID0ge1xuICAgIE5PUk1BTDogICAgICAgICAwLFxuICAgIEFERDogICAgICAgICAgICAxLFxuICAgIE1VTFRJUExZOiAgICAgICAyLFxuICAgIFNDUkVFTjogICAgICAgICAzLFxuICAgIE9WRVJMQVk6ICAgICAgICA0LFxuICAgIERBUktFTjogICAgICAgICA1LFxuICAgIExJR0hURU46ICAgICAgICA2LFxuICAgIENPTE9SX0RPREdFOiAgICA3LFxuICAgIENPTE9SX0JVUk46ICAgICA4LFxuICAgIEhBUkRfTElHSFQ6ICAgICA5LFxuICAgIFNPRlRfTElHSFQ6ICAgICAxMCxcbiAgICBESUZGRVJFTkNFOiAgICAgMTEsXG4gICAgRVhDTFVTSU9OOiAgICAgIDEyLFxuICAgIEhVRTogICAgICAgICAgICAxMyxcbiAgICBTQVRVUkFUSU9OOiAgICAgMTQsXG4gICAgQ09MT1I6ICAgICAgICAgIDE1LFxuICAgIExVTUlOT1NJVFk6ICAgICAxNixcbiAgICBOT1JNQUxfTlBNOiAgICAgMTcsXG4gICAgQUREX05QTTogICAgICAgIDE4LFxuICAgIFNDUkVFTl9OUE06ICAgICAxOSxcbiAgICBOT05FOiAgICAgICAgICAgMjAsXG5cbiAgICBTUkNfT1ZFUjogICAgICAgMCxcbiAgICBTUkNfSU46ICAgICAgICAgMjEsXG4gICAgU1JDX09VVDogICAgICAgIDIyLFxuICAgIFNSQ19BVE9QOiAgICAgICAyMyxcbiAgICBEU1RfT1ZFUjogICAgICAgMjQsXG4gICAgRFNUX0lOOiAgICAgICAgIDI1LFxuICAgIERTVF9PVVQ6ICAgICAgICAyNixcbiAgICBEU1RfQVRPUDogICAgICAgMjcsXG4gICAgRVJBU0U6ICAgICAgICAgIDI2LFxuICAgIFNVQlRSQUNUOiAgICAgICAyOCxcbn07XG5cbi8qKlxuICogVmFyaW91cyB3ZWJnbCBkcmF3IG1vZGVzLiBUaGVzZSBjYW4gYmUgdXNlZCB0byBzcGVjaWZ5IHdoaWNoIEdMIGRyYXdNb2RlIHRvIHVzZVxuICogdW5kZXIgY2VydGFpbiBzaXR1YXRpb25zIGFuZCByZW5kZXJlcnMuXG4gKlxuICogQG1lbWJlcm9mIFBJWElcbiAqIEBzdGF0aWNcbiAqIEBuYW1lIERSQVdfTU9ERVNcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKiBAcHJvcGVydHkge251bWJlcn0gUE9JTlRTXG4gKiBAcHJvcGVydHkge251bWJlcn0gTElORVNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBMSU5FX0xPT1BcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBMSU5FX1NUUklQXG4gKiBAcHJvcGVydHkge251bWJlcn0gVFJJQU5HTEVTXG4gKiBAcHJvcGVydHkge251bWJlcn0gVFJJQU5HTEVfU1RSSVBcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBUUklBTkdMRV9GQU5cbiAqL1xudmFyIERSQVdfTU9ERVMgPSB7XG4gICAgUE9JTlRTOiAgICAgICAgIDAsXG4gICAgTElORVM6ICAgICAgICAgIDEsXG4gICAgTElORV9MT09QOiAgICAgIDIsXG4gICAgTElORV9TVFJJUDogICAgIDMsXG4gICAgVFJJQU5HTEVTOiAgICAgIDQsXG4gICAgVFJJQU5HTEVfU1RSSVA6IDUsXG4gICAgVFJJQU5HTEVfRkFOOiAgIDYsXG59O1xuXG4vKipcbiAqIFZhcmlvdXMgR0wgdGV4dHVyZS9yZXNvdXJjZXMgZm9ybWF0cy5cbiAqXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHN0YXRpY1xuICogQG5hbWUgRk9STUFUU1xuICogQGVudW0ge251bWJlcn1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBSR0JBPTY0MDhcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBSR0I9NjQwN1xuICogQHByb3BlcnR5IHtudW1iZXJ9IEFMUEhBPTY0MDZcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBMVU1JTkFOQ0U9NjQwOVxuICogQHByb3BlcnR5IHtudW1iZXJ9IExVTUlOQU5DRV9BTFBIQT02NDEwXG4gKiBAcHJvcGVydHkge251bWJlcn0gREVQVEhfQ09NUE9ORU5UPTY0MDJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBERVBUSF9TVEVOQ0lMPTM0MDQxXG4gKi9cbnZhciBGT1JNQVRTID0ge1xuICAgIFJHQkE6ICAgICAgICAgICAgIDY0MDgsXG4gICAgUkdCOiAgICAgICAgICAgICAgNjQwNyxcbiAgICBBTFBIQTogICAgICAgICAgICA2NDA2LFxuICAgIExVTUlOQU5DRTogICAgICAgIDY0MDksXG4gICAgTFVNSU5BTkNFX0FMUEhBOiAgNjQxMCxcbiAgICBERVBUSF9DT01QT05FTlQ6ICA2NDAyLFxuICAgIERFUFRIX1NURU5DSUw6ICAgIDM0MDQxLFxufTtcblxuLyoqXG4gKiBWYXJpb3VzIEdMIHRhcmdldCB0eXBlcy5cbiAqXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHN0YXRpY1xuICogQG5hbWUgVEFSR0VUU1xuICogQGVudW0ge251bWJlcn1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBURVhUVVJFXzJEPTM1NTNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBURVhUVVJFX0NVQkVfTUFQPTM0MDY3XG4gKiBAcHJvcGVydHkge251bWJlcn0gVEVYVFVSRV8yRF9BUlJBWT0zNTg2NlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWD0zNDA2OVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWD0zNDA3MFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWT0zNDA3MVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWT0zNDA3MlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWj0zNDA3M1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWj0zNDA3NFxuICovXG52YXIgVEFSR0VUUyA9IHtcbiAgICBURVhUVVJFXzJEOiAzNTUzLFxuICAgIFRFWFRVUkVfQ1VCRV9NQVA6IDM0MDY3LFxuICAgIFRFWFRVUkVfMkRfQVJSQVk6IDM1ODY2LFxuICAgIFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWDogMzQwNjksXG4gICAgVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YOiAzNDA3MCxcbiAgICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1k6IDM0MDcxLFxuICAgIFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWTogMzQwNzIsXG4gICAgVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aOiAzNDA3MyxcbiAgICBURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1o6IDM0MDc0LFxufTtcblxuLyoqXG4gKiBWYXJpb3VzIEdMIGRhdGEgZm9ybWF0IHR5cGVzLlxuICpcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBUWVBFU1xuICogQGVudW0ge251bWJlcn1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBVTlNJR05FRF9CWVRFPTUxMjFcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBVTlNJR05FRF9TSE9SVD01MTIzXG4gKiBAcHJvcGVydHkge251bWJlcn0gVU5TSUdORURfU0hPUlRfNV82XzU9MzM2MzVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBVTlNJR05FRF9TSE9SVF80XzRfNF80PTMyODE5XG4gKiBAcHJvcGVydHkge251bWJlcn0gVU5TSUdORURfU0hPUlRfNV81XzVfMT0zMjgyMFxuICogQHByb3BlcnR5IHtudW1iZXJ9IEZMT0FUPTUxMjZcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBIQUxGX0ZMT0FUPTM2MTkzXG4gKi9cbnZhciBUWVBFUyA9IHtcbiAgICBVTlNJR05FRF9CWVRFOiA1MTIxLFxuICAgIFVOU0lHTkVEX1NIT1JUOiA1MTIzLFxuICAgIFVOU0lHTkVEX1NIT1JUXzVfNl81OiAzMzYzNSxcbiAgICBVTlNJR05FRF9TSE9SVF80XzRfNF80OiAzMjgxOSxcbiAgICBVTlNJR05FRF9TSE9SVF81XzVfNV8xOiAzMjgyMCxcbiAgICBGTE9BVDogNTEyNixcbiAgICBIQUxGX0ZMT0FUOiAzNjE5Myxcbn07XG5cbi8qKlxuICogVGhlIHNjYWxlIG1vZGVzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSBwaXhpLlxuICpcbiAqIFRoZSB7QGxpbmsgUElYSS5zZXR0aW5ncy5TQ0FMRV9NT0RFfSBzY2FsZSBtb2RlIGFmZmVjdHMgdGhlIGRlZmF1bHQgc2NhbGluZyBtb2RlIG9mIGZ1dHVyZSBvcGVyYXRpb25zLlxuICogSXQgY2FuIGJlIHJlLWFzc2lnbmVkIHRvIGVpdGhlciBMSU5FQVIgb3IgTkVBUkVTVCwgZGVwZW5kaW5nIHVwb24gc3VpdGFiaWxpdHkuXG4gKlxuICogQG1lbWJlcm9mIFBJWElcbiAqIEBzdGF0aWNcbiAqIEBuYW1lIFNDQUxFX01PREVTXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IExJTkVBUiBTbW9vdGggc2NhbGluZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IE5FQVJFU1QgUGl4ZWxhdGluZyBzY2FsaW5nXG4gKi9cbnZhciBTQ0FMRV9NT0RFUyA9IHtcbiAgICBMSU5FQVI6ICAgICAxLFxuICAgIE5FQVJFU1Q6ICAgIDAsXG59O1xuXG4vKipcbiAqIFRoZSB3cmFwIG1vZGVzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSBwaXhpLlxuICpcbiAqIFRoZSB7QGxpbmsgUElYSS5zZXR0aW5ncy5XUkFQX01PREV9IHdyYXAgbW9kZSBhZmZlY3RzIHRoZSBkZWZhdWx0IHdyYXBwaW5nIG1vZGUgb2YgZnV0dXJlIG9wZXJhdGlvbnMuXG4gKiBJdCBjYW4gYmUgcmUtYXNzaWduZWQgdG8gZWl0aGVyIENMQU1QIG9yIFJFUEVBVCwgZGVwZW5kaW5nIHVwb24gc3VpdGFiaWxpdHkuXG4gKiBJZiB0aGUgdGV4dHVyZSBpcyBub24gcG93ZXIgb2YgdHdvIHRoZW4gY2xhbXAgd2lsbCBiZSB1c2VkIHJlZ2FyZGxlc3MgYXMgV2ViR0wgY2FuXG4gKiBvbmx5IHVzZSBSRVBFQVQgaWYgdGhlIHRleHR1cmUgaXMgcG8yLlxuICpcbiAqIFRoaXMgcHJvcGVydHkgb25seSBhZmZlY3RzIFdlYkdMLlxuICpcbiAqIEBuYW1lIFdSQVBfTU9ERVNcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAc3RhdGljXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IENMQU1QIC0gVGhlIHRleHR1cmVzIHV2cyBhcmUgY2xhbXBlZFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFJFUEVBVCAtIFRoZSB0ZXh0dXJlIHV2cyB0aWxlIGFuZCByZXBlYXRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBNSVJST1JFRF9SRVBFQVQgLSBUaGUgdGV4dHVyZSB1dnMgdGlsZSBhbmQgcmVwZWF0IHdpdGggbWlycm9yaW5nXG4gKi9cbnZhciBXUkFQX01PREVTID0ge1xuICAgIENMQU1QOiAgICAgICAgICAgMzMwNzEsXG4gICAgUkVQRUFUOiAgICAgICAgICAxMDQ5NyxcbiAgICBNSVJST1JFRF9SRVBFQVQ6IDMzNjQ4LFxufTtcblxuLyoqXG4gKiBNaXBtYXAgZmlsdGVyaW5nIG1vZGVzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSBwaXhpLlxuICpcbiAqIFRoZSB7QGxpbmsgUElYSS5zZXR0aW5ncy5NSVBNQVBfVEVYVFVSRVN9IGFmZmVjdHMgZGVmYXVsdCB0ZXh0dXJlIGZpbHRlcmluZy5cbiAqIE1pcG1hcHMgYXJlIGdlbmVyYXRlZCBmb3IgYSBiYXNlVGV4dHVyZSBpZiBpdHMgYG1pcG1hcGAgZmllbGQgaXMgYE9OYCxcbiAqIG9yIGl0cyBgUE9XMmAgYW5kIHRleHR1cmUgZGltZW5zaW9ucyBhcmUgcG93ZXJzIG9mIDIuXG4gKiBEdWUgdG8gcGxhdGZvcm0gcmVzdHJpY3Rpb24sIGBPTmAgb3B0aW9uIHdpbGwgd29yayBsaWtlIGBQT1cyYCBmb3Igd2ViZ2wtMS5cbiAqXG4gKiBUaGlzIHByb3BlcnR5IG9ubHkgYWZmZWN0cyBXZWJHTC5cbiAqXG4gKiBAbmFtZSBNSVBNQVBfTU9ERVNcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAc3RhdGljXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IE9GRiAtIE5vIG1pcG1hcHNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBQT1cyIC0gR2VuZXJhdGUgbWlwbWFwcyBpZiB0ZXh0dXJlIGRpbWVuc2lvbnMgYXJlIHBvdzJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBPTiAtIEFsd2F5cyBnZW5lcmF0ZSBtaXBtYXBzXG4gKi9cbnZhciBNSVBNQVBfTU9ERVMgPSB7XG4gICAgT0ZGOiAwLFxuICAgIFBPVzI6IDEsXG4gICAgT046IDIsXG59O1xuXG4vKipcbiAqIFRoZSBnYyBtb2RlcyB0aGF0IGFyZSBzdXBwb3J0ZWQgYnkgcGl4aS5cbiAqXG4gKiBUaGUge0BsaW5rIFBJWEkuc2V0dGluZ3MuR0NfTU9ERX0gR2FyYmFnZSBDb2xsZWN0aW9uIG1vZGUgZm9yIFBpeGlKUyB0ZXh0dXJlcyBpcyBBVVRPXG4gKiBJZiBzZXQgdG8gR0NfTU9ERSwgdGhlIHJlbmRlcmVyIHdpbGwgb2NjYXNpb25hbGx5IGNoZWNrIHRleHR1cmVzIHVzYWdlLiBJZiB0aGV5IGFyZSBub3RcbiAqIHVzZWQgZm9yIGEgc3BlY2lmaWVkIHBlcmlvZCBvZiB0aW1lIHRoZXkgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIEdQVS4gVGhleSB3aWxsIG9mIGNvdXJzZVxuICogYmUgdXBsb2FkZWQgYWdhaW4gd2hlbiB0aGV5IGFyZSByZXF1aXJlZC4gVGhpcyBpcyBhIHNpbGVudCBiZWhpbmQgdGhlIHNjZW5lcyBwcm9jZXNzIHRoYXRcbiAqIHNob3VsZCBlbnN1cmUgdGhhdCB0aGUgR1BVIGRvZXMgbm90ICBnZXQgZmlsbGVkIHVwLlxuICpcbiAqIEhhbmR5IGZvciBtb2JpbGUgZGV2aWNlcyFcbiAqIFRoaXMgcHJvcGVydHkgb25seSBhZmZlY3RzIFdlYkdMLlxuICpcbiAqIEBuYW1lIEdDX01PREVTXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBJWElcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBBVVRPIC0gR2FyYmFnZSBjb2xsZWN0aW9uIHdpbGwgaGFwcGVuIHBlcmlvZGljYWxseSBhdXRvbWF0aWNhbGx5XG4gKiBAcHJvcGVydHkge251bWJlcn0gTUFOVUFMIC0gR2FyYmFnZSBjb2xsZWN0aW9uIHdpbGwgbmVlZCB0byBiZSBjYWxsZWQgbWFudWFsbHlcbiAqL1xudmFyIEdDX01PREVTID0ge1xuICAgIEFVVE86ICAgICAgICAgICAwLFxuICAgIE1BTlVBTDogICAgICAgICAxLFxufTtcblxuLyoqXG4gKiBDb25zdGFudHMgdGhhdCBzcGVjaWZ5IGZsb2F0IHByZWNpc2lvbiBpbiBzaGFkZXJzLlxuICpcbiAqIEBuYW1lIFBSRUNJU0lPTlxuICogQG1lbWJlcm9mIFBJWElcbiAqIEBzdGF0aWNcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKiBAY29uc3RhbnRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBMT1c9J2xvd3AnXG4gKiBAcHJvcGVydHkge3N0cmluZ30gTUVESVVNPSdtZWRpdW1wJ1xuICogQHByb3BlcnR5IHtzdHJpbmd9IEhJR0g9J2hpZ2hwJ1xuICovXG52YXIgUFJFQ0lTSU9OID0ge1xuICAgIExPVzogJ2xvd3AnLFxuICAgIE1FRElVTTogJ21lZGl1bXAnLFxuICAgIEhJR0g6ICdoaWdocCcsXG59O1xuXG5leHBvcnQgeyBCTEVORF9NT0RFUywgRFJBV19NT0RFUywgRU5WLCBGT1JNQVRTLCBHQ19NT0RFUywgTUlQTUFQX01PREVTLCBQUkVDSVNJT04sIFJFTkRFUkVSX1RZUEUsIFNDQUxFX01PREVTLCBUQVJHRVRTLCBUWVBFUywgV1JBUF9NT0RFUyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmVzLmpzLm1hcFxuIiwiLyohXG4gKiBAcGl4aS91dGlscyAtIHY1LjEuM1xuICogQ29tcGlsZWQgTW9uLCAwOSBTZXAgMjAxOSAwNDo1MTo1MyBVVENcbiAqXG4gKiBAcGl4aS91dGlscyBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbmltcG9ydCB7IHNldHRpbmdzIH0gZnJvbSAnQHBpeGkvc2V0dGluZ3MnO1xuZXhwb3J0IHsgaXNNb2JpbGUgfSBmcm9tICdAcGl4aS9zZXR0aW5ncyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50ZW1pdHRlcjMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBlYXJjdXQgfSBmcm9tICdlYXJjdXQnO1xuaW1wb3J0IF91cmwgZnJvbSAndXJsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXJsIH0gZnJvbSAndXJsJztcbmltcG9ydCB7IEJMRU5EX01PREVTIH0gZnJvbSAnQHBpeGkvY29uc3RhbnRzJztcblxuLyoqXG4gKiBUaGUgcHJlZml4IHRoYXQgZGVub3RlcyBhIFVSTCBpcyBmb3IgYSByZXRpbmEgYXNzZXQuXG4gKlxuICogQHN0YXRpY1xuICogQG5hbWUgUkVUSU5BX1BSRUZJWFxuICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAZGVmYXVsdCAvQChbMC05XFwuXSspeC9cbiAqIEBleGFtcGxlIGBAMnhgXG4gKi9cbnNldHRpbmdzLlJFVElOQV9QUkVGSVggPSAvQChbMC05XFwuXSspeC87XG5cbi8qKlxuICogU2hvdWxkIHRoZSBgZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdGAgZmxhZyBiZSBlbmFibGVkIGFzIGEgY29udGV4dCBvcHRpb24gdXNlZCBpbiB0aGUgYGlzV2ViR0xTdXBwb3J0ZWRgIGZ1bmN0aW9uLlxuICogRm9yIG1vc3Qgc2NlbmFyaW9zIHRoaXMgc2hvdWxkIGJlIGxlZnQgYXMgdHJ1ZSwgYXMgb3RoZXJ3aXNlIHRoZSB1c2VyIG1heSBoYXZlIGEgcG9vciBleHBlcmllbmNlLlxuICogSG93ZXZlciwgaXQgY2FuIGJlIHVzZWZ1bCB0byBkaXNhYmxlIHVuZGVyIGNlcnRhaW4gc2NlbmFyaW9zLCBzdWNoIGFzIGhlYWRsZXNzIHVuaXQgdGVzdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG5hbWUgRkFJTF9JRl9NQUpPUl9QRVJGT1JNQU5DRV9DQVZFQVRcbiAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0IHRydWVcbiAqL1xuc2V0dGluZ3MuRkFJTF9JRl9NQUpPUl9QRVJGT1JNQU5DRV9DQVZFQVQgPSB0cnVlO1xuXG52YXIgc2FpZEhlbGxvID0gZmFsc2U7XG52YXIgVkVSU0lPTiA9ICc1LjEuMyc7XG5cbi8qKlxuICogU2tpcHMgdGhlIGhlbGxvIG1lc3NhZ2Ugb2YgcmVuZGVyZXJzIHRoYXQgYXJlIGNyZWF0ZWQgYWZ0ZXIgdGhpcyBpcyBydW4uXG4gKlxuICogQGZ1bmN0aW9uIHNraXBIZWxsb1xuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqL1xuZnVuY3Rpb24gc2tpcEhlbGxvKClcbntcbiAgICBzYWlkSGVsbG8gPSB0cnVlO1xufVxuXG4vKipcbiAqIExvZ3Mgb3V0IHRoZSB2ZXJzaW9uIGFuZCByZW5kZXJlciBpbmZvcm1hdGlvbiBmb3IgdGhpcyBydW5uaW5nIGluc3RhbmNlIG9mIFBJWEkuXG4gKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZWUgdGhpcyBtZXNzYWdlIHlvdSBjYW4gcnVuIGBQSVhJLnV0aWxzLnNraXBIZWxsbygpYCBiZWZvcmVcbiAqIGNyZWF0aW5nIHlvdXIgcmVuZGVyZXIuIEtlZXAgaW4gbWluZCB0aGF0IGRvaW5nIHRoYXQgd2lsbCBmb3JldmVyIG1ha2UgeW91IGEgamVyayBmYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBmdW5jdGlvbiBzYXlIZWxsb1xuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHN0cmluZyByZW5kZXJlciB0eXBlIHRvIGxvZy5cbiAqL1xuZnVuY3Rpb24gc2F5SGVsbG8odHlwZSlcbntcbiAgICBpZiAoc2FpZEhlbGxvKVxuICAgIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignY2hyb21lJykgPiAtMSlcbiAgICB7XG4gICAgICAgIHZhciBhcmdzID0gW1xuICAgICAgICAgICAgKFwiXFxuICVjICVjICVjIFBpeGlKUyBcIiArIFZFUlNJT04gKyBcIiAtIOKcsCBcIiArIHR5cGUgKyBcIiDinLAgICVjICAlYyAgaHR0cDovL3d3dy5waXhpanMuY29tLyAgJWMgJWMg4pmlJWPimaUlY+KZpSBcXG5cXG5cIiksXG4gICAgICAgICAgICAnYmFja2dyb3VuZDogI2ZmNjZhNTsgcGFkZGluZzo1cHggMDsnLFxuICAgICAgICAgICAgJ2JhY2tncm91bmQ6ICNmZjY2YTU7IHBhZGRpbmc6NXB4IDA7JyxcbiAgICAgICAgICAgICdjb2xvcjogI2ZmNjZhNTsgYmFja2dyb3VuZDogIzAzMDMwNzsgcGFkZGluZzo1cHggMDsnLFxuICAgICAgICAgICAgJ2JhY2tncm91bmQ6ICNmZjY2YTU7IHBhZGRpbmc6NXB4IDA7JyxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kOiAjZmZjM2RjOyBwYWRkaW5nOjVweCAwOycsXG4gICAgICAgICAgICAnYmFja2dyb3VuZDogI2ZmNjZhNTsgcGFkZGluZzo1cHggMDsnLFxuICAgICAgICAgICAgJ2NvbG9yOiAjZmYyNDI0OyBiYWNrZ3JvdW5kOiAjZmZmOyBwYWRkaW5nOjVweCAwOycsXG4gICAgICAgICAgICAnY29sb3I6ICNmZjI0MjQ7IGJhY2tncm91bmQ6ICNmZmY7IHBhZGRpbmc6NXB4IDA7JyxcbiAgICAgICAgICAgICdjb2xvcjogI2ZmMjQyNDsgYmFja2dyb3VuZDogI2ZmZjsgcGFkZGluZzo1cHggMDsnIF07XG5cbiAgICAgICAgd2luZG93LmNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgIH1cbiAgICBlbHNlIGlmICh3aW5kb3cuY29uc29sZSlcbiAgICB7XG4gICAgICAgIHdpbmRvdy5jb25zb2xlLmxvZygoXCJQaXhpSlMgXCIgKyBWRVJTSU9OICsgXCIgLSBcIiArIHR5cGUgKyBcIiAtIGh0dHA6Ly93d3cucGl4aWpzLmNvbS9cIikpO1xuICAgIH1cblxuICAgIHNhaWRIZWxsbyA9IHRydWU7XG59XG5cbnZhciBzdXBwb3J0ZWQ7XG5cbi8qKlxuICogSGVscGVyIGZvciBjaGVja2luZyBmb3IgV2ViR0wgc3VwcG9ydC5cbiAqXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIGlzV2ViR0xTdXBwb3J0ZWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IElzIFdlYkdMIHN1cHBvcnRlZC5cbiAqL1xuZnVuY3Rpb24gaXNXZWJHTFN1cHBvcnRlZCgpXG57XG4gICAgaWYgKHR5cGVvZiBzdXBwb3J0ZWQgPT09ICd1bmRlZmluZWQnKVxuICAgIHtcbiAgICAgICAgc3VwcG9ydGVkID0gKGZ1bmN0aW9uIHN1cHBvcnRlZCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBzdGVuY2lsOiB0cnVlLFxuICAgICAgICAgICAgICAgIGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ6IHNldHRpbmdzLkZBSUxfSUZfTUFKT1JfUEVSRk9STUFOQ0VfQ0FWRUFULFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdHJ5XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKCF3aW5kb3cuV2ViR0xSZW5kZXJpbmdDb250ZXh0KVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgICAgICB2YXIgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBjb250ZXh0T3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgfHwgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGNvbnRleHRPcHRpb25zKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gISEoZ2wgJiYgZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKS5zdGVuY2lsKTtcblxuICAgICAgICAgICAgICAgIGlmIChnbClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsb3NlQ29udGV4dCA9IGdsLmdldEV4dGVuc2lvbignV0VCR0xfbG9zZV9jb250ZXh0Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvc2VDb250ZXh0KVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3NlQ29udGV4dC5sb3NlQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZ2wgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGhleGFkZWNpbWFsIGNvbG9yIG51bWJlciB0byBhbiBbUiwgRywgQl0gYXJyYXkgb2Ygbm9ybWFsaXplZCBmbG9hdHMgKG51bWJlcnMgZnJvbSAwLjAgdG8gMS4wKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogUElYSS51dGlscy5oZXgycmdiKDB4ZmZmZmZmKTsgLy8gcmV0dXJucyBbMSwgMSwgMV1cbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAZnVuY3Rpb24gaGV4MnJnYlxuICogQHBhcmFtIHtudW1iZXJ9IGhleCAtIFRoZSBoZXhhZGVjaW1hbCBudW1iZXIgdG8gY29udmVydFxuICogQHBhcmFtICB7bnVtYmVyW119IFtvdXQ9W11dIElmIHN1cHBsaWVkLCB0aGlzIGFycmF5IHdpbGwgYmUgdXNlZCByYXRoZXIgdGhhbiByZXR1cm5pbmcgYSBuZXcgb25lXG4gKiBAcmV0dXJuIHtudW1iZXJbXX0gQW4gYXJyYXkgcmVwcmVzZW50aW5nIHRoZSBbUiwgRywgQl0gb2YgdGhlIGNvbG9yIHdoZXJlIGFsbCB2YWx1ZXMgYXJlIGZsb2F0cy5cbiAqL1xuZnVuY3Rpb24gaGV4MnJnYihoZXgsIG91dClcbntcbiAgICBvdXQgPSBvdXQgfHwgW107XG5cbiAgICBvdXRbMF0gPSAoKGhleCA+PiAxNikgJiAweEZGKSAvIDI1NTtcbiAgICBvdXRbMV0gPSAoKGhleCA+PiA4KSAmIDB4RkYpIC8gMjU1O1xuICAgIG91dFsyXSA9IChoZXggJiAweEZGKSAvIDI1NTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBoZXhhZGVjaW1hbCBjb2xvciBudW1iZXIgdG8gYSBzdHJpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqIFBJWEkudXRpbHMuaGV4MnN0cmluZygweGZmZmZmZik7IC8vIHJldHVybnMgXCIjZmZmZmZmXCJcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAZnVuY3Rpb24gaGV4MnN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IGhleCAtIE51bWJlciBpbiBoZXggKGUuZy4sIGAweGZmZmZmZmApXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmcgY29sb3IgKGUuZy4sIGBcIiNmZmZmZmZcImApLlxuICovXG5mdW5jdGlvbiBoZXgyc3RyaW5nKGhleClcbntcbiAgICBoZXggPSBoZXgudG9TdHJpbmcoMTYpO1xuICAgIGhleCA9ICcwMDAwMDAnLnN1YnN0cigwLCA2IC0gaGV4Lmxlbmd0aCkgKyBoZXg7XG5cbiAgICByZXR1cm4gKFwiI1wiICsgaGV4KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGhleGFkZWNpbWFsIHN0cmluZyB0byBhIGhleGFkZWNpbWFsIGNvbG9yIG51bWJlci5cbiAqXG4gKiBAZXhhbXBsZVxuICogUElYSS51dGlscy5zdHJpbmcyaGV4KFwiI2ZmZmZmZlwiKTsgLy8gcmV0dXJucyAweGZmZmZmZlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBzdHJpbmcyaGV4XG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyBjb2xvciAoZS5nLiwgYFwiI2ZmZmZmZlwiYClcbiAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIGluIGhleGFkZWNpbWFsLlxuICovXG5mdW5jdGlvbiBzdHJpbmcyaGV4KHN0cmluZylcbntcbiAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycgJiYgc3RyaW5nWzBdID09PSAnIycpXG4gICAge1xuICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyKDEpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZUludChzdHJpbmcsIDE2KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGFzIGFuIFtSLCBHLCBCXSBhcnJheSBvZiBub3JtYWxpemVkIGZsb2F0cyB0byBhIGhleGFkZWNpbWFsIG51bWJlci5cbiAqXG4gKiBAZXhhbXBsZVxuICogUElYSS51dGlscy5yZ2IyaGV4KFsxLCAxLCAxXSk7IC8vIHJldHVybnMgMHhmZmZmZmZcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAZnVuY3Rpb24gcmdiMmhleFxuICogQHBhcmFtIHtudW1iZXJbXX0gcmdiIC0gQXJyYXkgb2YgbnVtYmVycyB3aGVyZSBhbGwgdmFsdWVzIGFyZSBub3JtYWxpemVkIGZsb2F0cyBmcm9tIDAuMCB0byAxLjAuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE51bWJlciBpbiBoZXhhZGVjaW1hbC5cbiAqL1xuZnVuY3Rpb24gcmdiMmhleChyZ2IpXG57XG4gICAgcmV0dXJuICgoKHJnYlswXSAqIDI1NSkgPDwgMTYpICsgKChyZ2JbMV0gKiAyNTUpIDw8IDgpICsgKHJnYlsyXSAqIDI1NSB8IDApKTtcbn1cblxuLyoqXG4gKiBDb3JyZWN0cyBQaXhpSlMgYmxlbmQsIHRha2VzIHByZW11bHRpcGxpZWQgYWxwaGEgaW50byBhY2NvdW50XG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBtYXBQcmVtdWx0aXBsaWVkQmxlbmRNb2Rlc1xuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyW10+fSBbYXJyYXldIC0gVGhlIGFycmF5IHRvIG91dHB1dCBpbnRvLlxuICogQHJldHVybiB7QXJyYXk8bnVtYmVyW10+fSBNYXBwZWQgbW9kZXMuXG4gKi9cbmZ1bmN0aW9uIG1hcFByZW11bHRpcGxpZWRCbGVuZE1vZGVzKClcbntcbiAgICB2YXIgcG0gPSBbXTtcbiAgICB2YXIgbnBtID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspXG4gICAge1xuICAgICAgICBwbVtpXSA9IGk7XG4gICAgICAgIG5wbVtpXSA9IGk7XG4gICAgfVxuXG4gICAgcG1bQkxFTkRfTU9ERVMuTk9STUFMX05QTV0gPSBCTEVORF9NT0RFUy5OT1JNQUw7XG4gICAgcG1bQkxFTkRfTU9ERVMuQUREX05QTV0gPSBCTEVORF9NT0RFUy5BREQ7XG4gICAgcG1bQkxFTkRfTU9ERVMuU0NSRUVOX05QTV0gPSBCTEVORF9NT0RFUy5TQ1JFRU47XG5cbiAgICBucG1bQkxFTkRfTU9ERVMuTk9STUFMXSA9IEJMRU5EX01PREVTLk5PUk1BTF9OUE07XG4gICAgbnBtW0JMRU5EX01PREVTLkFERF0gPSBCTEVORF9NT0RFUy5BRERfTlBNO1xuICAgIG5wbVtCTEVORF9NT0RFUy5TQ1JFRU5dID0gQkxFTkRfTU9ERVMuU0NSRUVOX05QTTtcblxuICAgIHZhciBhcnJheSA9IFtdO1xuXG4gICAgYXJyYXkucHVzaChucG0pO1xuICAgIGFycmF5LnB1c2gocG0pO1xuXG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIG1hcHMgcHJlbXVsdGlwbHkgZmxhZyBhbmQgYmxlbmRNb2RlIHRvIGFkanVzdGVkIGJsZW5kTW9kZVxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBjb25zdCBwcmVtdWx0aXBseUJsZW5kTW9kZVxuICogQHR5cGUge0FycmF5PG51bWJlcltdPn1cbiAqL1xudmFyIHByZW11bHRpcGx5QmxlbmRNb2RlID0gbWFwUHJlbXVsdGlwbGllZEJsZW5kTW9kZXMoKTtcblxuLyoqXG4gKiBjaGFuZ2VzIGJsZW5kTW9kZSBhY2NvcmRpbmcgdG8gdGV4dHVyZSBmb3JtYXRcbiAqXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIGNvcnJlY3RCbGVuZE1vZGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBibGVuZE1vZGUgc3VwcG9zZWQgYmxlbmQgbW9kZVxuICogQHBhcmFtIHtib29sZWFufSBwcmVtdWx0aXBsaWVkICB3aGV0aGVyIHNvdXJjZSBpcyBwcmVtdWx0aXBsaWVkXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0cnVlIGJsZW5kIG1vZGUgZm9yIHRoaXMgdGV4dHVyZVxuICovXG5mdW5jdGlvbiBjb3JyZWN0QmxlbmRNb2RlKGJsZW5kTW9kZSwgcHJlbXVsdGlwbGllZClcbntcbiAgICByZXR1cm4gcHJlbXVsdGlwbHlCbGVuZE1vZGVbcHJlbXVsdGlwbGllZCA/IDEgOiAwXVtibGVuZE1vZGVdO1xufVxuXG4vKipcbiAqIGNvbWJpbmVzIHJnYiBhbmQgYWxwaGEgdG8gb3V0IGFycmF5XG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBwcmVtdWx0aXBseVJnYmFcbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fG51bWJlcltdfSByZ2IgaW5wdXQgcmdiXG4gKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgYWxwaGEgcGFyYW1cbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSBbb3V0XSBvdXRwdXRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZW11bHRpcGx5PXRydWVdIGRvIHByZW11bHRpcGx5IGl0XG4gKiBAcmV0dXJucyB7RmxvYXQzMkFycmF5fSB2ZWM0IHJnYmFcbiAqL1xuZnVuY3Rpb24gcHJlbXVsdGlwbHlSZ2JhKHJnYiwgYWxwaGEsIG91dCwgcHJlbXVsdGlwbHkpXG57XG4gICAgb3V0ID0gb3V0IHx8IG5ldyBGbG9hdDMyQXJyYXkoNCk7XG4gICAgaWYgKHByZW11bHRpcGx5IHx8IHByZW11bHRpcGx5ID09PSB1bmRlZmluZWQpXG4gICAge1xuICAgICAgICBvdXRbMF0gPSByZ2JbMF0gKiBhbHBoYTtcbiAgICAgICAgb3V0WzFdID0gcmdiWzFdICogYWxwaGE7XG4gICAgICAgIG91dFsyXSA9IHJnYlsyXSAqIGFscGhhO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICBvdXRbMF0gPSByZ2JbMF07XG4gICAgICAgIG91dFsxXSA9IHJnYlsxXTtcbiAgICAgICAgb3V0WzJdID0gcmdiWzJdO1xuICAgIH1cbiAgICBvdXRbM10gPSBhbHBoYTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogcHJlbXVsdGlwbGllcyB0aW50XG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBwcmVtdWx0aXBseVRpbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW50IGludGVnZXIgUkdCXG4gKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgZmxvYXRpbmcgcG9pbnQgYWxwaGEgKDAuMC0xLjApXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0aW50IG11bHRpcGxpZWQgYnkgYWxwaGFcbiAqL1xuZnVuY3Rpb24gcHJlbXVsdGlwbHlUaW50KHRpbnQsIGFscGhhKVxue1xuICAgIGlmIChhbHBoYSA9PT0gMS4wKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIChhbHBoYSAqIDI1NSA8PCAyNCkgKyB0aW50O1xuICAgIH1cbiAgICBpZiAoYWxwaGEgPT09IDAuMClcbiAgICB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICB2YXIgUiA9ICgodGludCA+PiAxNikgJiAweEZGKTtcbiAgICB2YXIgRyA9ICgodGludCA+PiA4KSAmIDB4RkYpO1xuICAgIHZhciBCID0gKHRpbnQgJiAweEZGKTtcblxuICAgIFIgPSAoKFIgKiBhbHBoYSkgKyAwLjUpIHwgMDtcbiAgICBHID0gKChHICogYWxwaGEpICsgMC41KSB8IDA7XG4gICAgQiA9ICgoQiAqIGFscGhhKSArIDAuNSkgfCAwO1xuXG4gICAgcmV0dXJuIChhbHBoYSAqIDI1NSA8PCAyNCkgKyAoUiA8PCAxNikgKyAoRyA8PCA4KSArIEI7XG59XG5cbi8qKlxuICogY29udmVydHMgaW50ZWdlciB0aW50IGFuZCBmbG9hdCBhbHBoYSB0byB2ZWM0IGZvcm0sIHByZW11bHRpcGxpZXMgYnkgZGVmYXVsdFxuICpcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAZnVuY3Rpb24gcHJlbXVsdGlwbHlUaW50VG9SZ2JhXG4gKiBAcGFyYW0ge251bWJlcn0gdGludCBpbnB1dCB0aW50XG4gKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgYWxwaGEgcGFyYW1cbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSBbb3V0XSBvdXRwdXRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZW11bHRpcGx5PXRydWVdIGRvIHByZW11bHRpcGx5IGl0XG4gKiBAcmV0dXJucyB7RmxvYXQzMkFycmF5fSB2ZWM0IHJnYmFcbiAqL1xuZnVuY3Rpb24gcHJlbXVsdGlwbHlUaW50VG9SZ2JhKHRpbnQsIGFscGhhLCBvdXQsIHByZW11bHRpcGx5KVxue1xuICAgIG91dCA9IG91dCB8fCBuZXcgRmxvYXQzMkFycmF5KDQpO1xuICAgIG91dFswXSA9ICgodGludCA+PiAxNikgJiAweEZGKSAvIDI1NS4wO1xuICAgIG91dFsxXSA9ICgodGludCA+PiA4KSAmIDB4RkYpIC8gMjU1LjA7XG4gICAgb3V0WzJdID0gKHRpbnQgJiAweEZGKSAvIDI1NS4wO1xuICAgIGlmIChwcmVtdWx0aXBseSB8fCBwcmVtdWx0aXBseSA9PT0gdW5kZWZpbmVkKVxuICAgIHtcbiAgICAgICAgb3V0WzBdICo9IGFscGhhO1xuICAgICAgICBvdXRbMV0gKj0gYWxwaGE7XG4gICAgICAgIG91dFsyXSAqPSBhbHBoYTtcbiAgICB9XG4gICAgb3V0WzNdID0gYWxwaGE7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyaWMgTWFzayBTdGFjayBkYXRhIHN0cnVjdHVyZVxuICpcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAZnVuY3Rpb24gY3JlYXRlSW5kaWNlc0ZvclF1YWRzXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIE51bWJlciBvZiBxdWFkc1xuICogQHBhcmFtIHtVaW50MTZBcnJheXxVaW50MzJBcnJheX0gW291dEJ1ZmZlcl0gLSBCdWZmZXIgZm9yIG91dHB1dCwgbGVuZ3RoIGhhcyB0byBiZSBgNiAqIHNpemVgXG4gKiBAcmV0dXJuIHtVaW50MTZBcnJheXxVaW50MzJBcnJheX0gLSBSZXN1bHRpbmcgaW5kZXggYnVmZmVyXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluZGljZXNGb3JRdWFkcyhzaXplLCBvdXRCdWZmZXIpXG57XG4gICAgaWYgKCBvdXRCdWZmZXIgPT09IHZvaWQgMCApIG91dEJ1ZmZlciA9IG51bGw7XG5cbiAgICAvLyB0aGUgdG90YWwgbnVtYmVyIG9mIGluZGljZXMgaW4gb3VyIGFycmF5LCB0aGVyZSBhcmUgNiBwb2ludHMgcGVyIHF1YWQuXG4gICAgdmFyIHRvdGFsSW5kaWNlcyA9IHNpemUgKiA2O1xuXG4gICAgb3V0QnVmZmVyID0gb3V0QnVmZmVyIHx8IG5ldyBVaW50MTZBcnJheSh0b3RhbEluZGljZXMpO1xuXG4gICAgaWYgKG91dEJ1ZmZlci5sZW5ndGggIT09IHRvdGFsSW5kaWNlcylcbiAgICB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigoXCJPdXQgYnVmZmVyIGxlbmd0aCBpcyBpbmNvcnJlY3QsIGdvdCBcIiArIChvdXRCdWZmZXIubGVuZ3RoKSArIFwiIGFuZCBleHBlY3RlZCBcIiArIHRvdGFsSW5kaWNlcykpO1xuICAgIH1cblxuICAgIC8vIGZpbGwgdGhlIGluZGljZXMgd2l0aCB0aGUgcXVhZHMgdG8gZHJhd1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IHRvdGFsSW5kaWNlczsgaSArPSA2LCBqICs9IDQpXG4gICAge1xuICAgICAgICBvdXRCdWZmZXJbaSArIDBdID0gaiArIDA7XG4gICAgICAgIG91dEJ1ZmZlcltpICsgMV0gPSBqICsgMTtcbiAgICAgICAgb3V0QnVmZmVyW2kgKyAyXSA9IGogKyAyO1xuICAgICAgICBvdXRCdWZmZXJbaSArIDNdID0gaiArIDA7XG4gICAgICAgIG91dEJ1ZmZlcltpICsgNF0gPSBqICsgMjtcbiAgICAgICAgb3V0QnVmZmVyW2kgKyA1XSA9IGogKyAzO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRCdWZmZXI7XG59XG5cbi8qKlxuICogUmVtb3ZlIGl0ZW1zIGZyb20gYSBqYXZhc2NyaXB0IGFycmF5IHdpdGhvdXQgZ2VuZXJhdGluZyBnYXJiYWdlXG4gKlxuICogQGZ1bmN0aW9uIHJlbW92ZUl0ZW1zXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgQXJyYXkgdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb21cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydElkeCBzdGFydGluZyBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IHJlbW92ZUNvdW50IGhvdyBtYW55IHRvIHJlbW92ZVxuICovXG5mdW5jdGlvbiByZW1vdmVJdGVtcyhhcnIsIHN0YXJ0SWR4LCByZW1vdmVDb3VudClcbntcbiAgICB2YXIgbGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICB2YXIgaTtcblxuICAgIGlmIChzdGFydElkeCA+PSBsZW5ndGggfHwgcmVtb3ZlQ291bnQgPT09IDApXG4gICAge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVtb3ZlQ291bnQgPSAoc3RhcnRJZHggKyByZW1vdmVDb3VudCA+IGxlbmd0aCA/IGxlbmd0aCAtIHN0YXJ0SWR4IDogcmVtb3ZlQ291bnQpO1xuXG4gICAgdmFyIGxlbiA9IGxlbmd0aCAtIHJlbW92ZUNvdW50O1xuXG4gICAgZm9yIChpID0gc3RhcnRJZHg7IGkgPCBsZW47ICsraSlcbiAgICB7XG4gICAgICAgIGFycltpXSA9IGFycltpICsgcmVtb3ZlQ291bnRdO1xuICAgIH1cblxuICAgIGFyci5sZW5ndGggPSBsZW47XG59XG5cbnZhciBuZXh0VWlkID0gMDtcblxuLyoqXG4gKiBHZXRzIHRoZSBuZXh0IHVuaXF1ZSBpZGVudGlmaWVyXG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiB1aWRcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG5leHQgdW5pcXVlIGlkZW50aWZpZXIgdG8gdXNlLlxuICovXG5mdW5jdGlvbiB1aWQoKVxue1xuICAgIHJldHVybiArK25leHRVaWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBzaWduIG9mIG51bWJlclxuICpcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAZnVuY3Rpb24gc2lnblxuICogQHBhcmFtIHtudW1iZXJ9IG4gLSB0aGUgbnVtYmVyIHRvIGNoZWNrIHRoZSBzaWduIG9mXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAwIGlmIGBuYCBpcyAwLCAtMSBpZiBgbmAgaXMgbmVnYXRpdmUsIDEgaWYgYG5gIGlzIHBvc2l0aXZlXG4gKi9cbmZ1bmN0aW9uIHNpZ24obilcbntcbiAgICBpZiAobiA9PT0gMCkgeyByZXR1cm4gMDsgfVxuXG4gICAgcmV0dXJuIG4gPCAwID8gLTEgOiAxO1xufVxuXG4vLyBUYWtlbiBmcm9tIHRoZSBiaXQtdHdpZGRsZSBwYWNrYWdlXG5cbi8qKlxuICogUm91bmRzIHRvIG5leHQgcG93ZXIgb2YgdHdvLlxuICpcbiAqIEBmdW5jdGlvbiBuZXh0UG93MlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBwYXJhbSB7bnVtYmVyfSB2IGlucHV0IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIG5leHRQb3cyKHYpXG57XG4gICAgdiArPSB2ID09PSAwO1xuICAgIC0tdjtcbiAgICB2IHw9IHYgPj4+IDE7XG4gICAgdiB8PSB2ID4+PiAyO1xuICAgIHYgfD0gdiA+Pj4gNDtcbiAgICB2IHw9IHYgPj4+IDg7XG4gICAgdiB8PSB2ID4+PiAxNjtcblxuICAgIHJldHVybiB2ICsgMTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBudW1iZXIgaXMgYSBwb3dlciBvZiB0d28uXG4gKlxuICogQGZ1bmN0aW9uIGlzUG93MlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBwYXJhbSB7bnVtYmVyfSB2IGlucHV0IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdmFsdWUgaXMgcG93ZXIgb2YgdHdvXG4gKi9cbmZ1bmN0aW9uIGlzUG93Mih2KVxue1xuICAgIHJldHVybiAhKHYgJiAodiAtIDEpKSAmJiAoISF2KTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBjZWlsIG9mIGxvZyBiYXNlIDJcbiAqXG4gKiBAZnVuY3Rpb24gbG9nMlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBwYXJhbSB7bnVtYmVyfSB2IGlucHV0IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGxvZ2FyaXRobSBiYXNlIDJcbiAqL1xuZnVuY3Rpb24gbG9nMih2KVxue1xuICAgIHZhciByID0gKHYgPiAweEZGRkYpIDw8IDQ7XG5cbiAgICB2ID4+Pj0gcjtcblxuICAgIHZhciBzaGlmdCA9ICh2ID4gMHhGRikgPDwgMztcblxuICAgIHYgPj4+PSBzaGlmdDsgciB8PSBzaGlmdDtcbiAgICBzaGlmdCA9ICh2ID4gMHhGKSA8PCAyO1xuICAgIHYgPj4+PSBzaGlmdDsgciB8PSBzaGlmdDtcbiAgICBzaGlmdCA9ICh2ID4gMHgzKSA8PCAxO1xuICAgIHYgPj4+PSBzaGlmdDsgciB8PSBzaGlmdDtcblxuICAgIHJldHVybiByIHwgKHYgPj4gMSk7XG59XG5cbi8qKlxuICogQHRvZG8gRGVzY3JpYmUgcHJvcGVydHkgdXNhZ2VcbiAqXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBQcm9ncmFtQ2FjaGVcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgUHJvZ3JhbUNhY2hlID0ge307XG5cbi8qKlxuICogQHRvZG8gRGVzY3JpYmUgcHJvcGVydHkgdXNhZ2VcbiAqXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBUZXh0dXJlQ2FjaGVcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgVGV4dHVyZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuLyoqXG4gKiBAdG9kbyBEZXNjcmliZSBwcm9wZXJ0eSB1c2FnZVxuICpcbiAqIEBzdGF0aWNcbiAqIEBuYW1lIEJhc2VUZXh0dXJlQ2FjaGVcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbnZhciBCYXNlVGV4dHVyZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKlxuICogRGVzdHJveXMgYWxsIHRleHR1cmUgaW4gdGhlIGNhY2hlXG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBkZXN0cm95VGV4dHVyZUNhY2hlXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3lUZXh0dXJlQ2FjaGUoKVxue1xuICAgIHZhciBrZXk7XG5cbiAgICBmb3IgKGtleSBpbiBUZXh0dXJlQ2FjaGUpXG4gICAge1xuICAgICAgICBUZXh0dXJlQ2FjaGVba2V5XS5kZXN0cm95KCk7XG4gICAgfVxuICAgIGZvciAoa2V5IGluIEJhc2VUZXh0dXJlQ2FjaGUpXG4gICAge1xuICAgICAgICBCYXNlVGV4dHVyZUNhY2hlW2tleV0uZGVzdHJveSgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCB0ZXh0dXJlcyBmcm9tIGNhY2hlLCBidXQgZG9lcyBub3QgZGVzdHJveSB0aGVtXG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBjbGVhclRleHR1cmVDYWNoZVxuICovXG5mdW5jdGlvbiBjbGVhclRleHR1cmVDYWNoZSgpXG57XG4gICAgdmFyIGtleTtcblxuICAgIGZvciAoa2V5IGluIFRleHR1cmVDYWNoZSlcbiAgICB7XG4gICAgICAgIGRlbGV0ZSBUZXh0dXJlQ2FjaGVba2V5XTtcbiAgICB9XG4gICAgZm9yIChrZXkgaW4gQmFzZVRleHR1cmVDYWNoZSlcbiAgICB7XG4gICAgICAgIGRlbGV0ZSBCYXNlVGV4dHVyZUNhY2hlW2tleV07XG4gICAgfVxufVxuXG4vKipcbiAqIFRyaW0gdHJhbnNwYXJlbnQgYm9yZGVycyBmcm9tIGEgY2FudmFzXG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiB0cmltQ2FudmFzXG4gKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMgLSB0aGUgY2FudmFzIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtvYmplY3R9IFRyaW0gZGF0YVxuICovXG5mdW5jdGlvbiB0cmltQ2FudmFzKGNhbnZhcylcbntcbiAgICAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9yZW15Lzc4NDUwOFxuXG4gICAgdmFyIHdpZHRoID0gY2FudmFzLndpZHRoO1xuICAgIHZhciBoZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuXG4gICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB2YXIgaW1hZ2VEYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgdmFyIHBpeGVscyA9IGltYWdlRGF0YS5kYXRhO1xuICAgIHZhciBsZW4gPSBwaXhlbHMubGVuZ3RoO1xuXG4gICAgdmFyIGJvdW5kID0ge1xuICAgICAgICB0b3A6IG51bGwsXG4gICAgICAgIGxlZnQ6IG51bGwsXG4gICAgICAgIHJpZ2h0OiBudWxsLFxuICAgICAgICBib3R0b206IG51bGwsXG4gICAgfTtcbiAgICB2YXIgZGF0YSA9IG51bGw7XG4gICAgdmFyIGk7XG4gICAgdmFyIHg7XG4gICAgdmFyIHk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpXG4gICAge1xuICAgICAgICBpZiAocGl4ZWxzW2kgKyAzXSAhPT0gMClcbiAgICAgICAge1xuICAgICAgICAgICAgeCA9IChpIC8gNCkgJSB3aWR0aDtcbiAgICAgICAgICAgIHkgPSB+figoaSAvIDQpIC8gd2lkdGgpO1xuXG4gICAgICAgICAgICBpZiAoYm91bmQudG9wID09PSBudWxsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJvdW5kLnRvcCA9IHk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChib3VuZC5sZWZ0ID09PSBudWxsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJvdW5kLmxlZnQgPSB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoeCA8IGJvdW5kLmxlZnQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYm91bmQubGVmdCA9IHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChib3VuZC5yaWdodCA9PT0gbnVsbClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBib3VuZC5yaWdodCA9IHggKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYm91bmQucmlnaHQgPCB4KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJvdW5kLnJpZ2h0ID0geCArIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChib3VuZC5ib3R0b20gPT09IG51bGwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYm91bmQuYm90dG9tID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJvdW5kLmJvdHRvbSA8IHkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYm91bmQuYm90dG9tID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChib3VuZC50b3AgIT09IG51bGwpXG4gICAge1xuICAgICAgICB3aWR0aCA9IGJvdW5kLnJpZ2h0IC0gYm91bmQubGVmdDtcbiAgICAgICAgaGVpZ2h0ID0gYm91bmQuYm90dG9tIC0gYm91bmQudG9wICsgMTtcbiAgICAgICAgZGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKGJvdW5kLmxlZnQsIGJvdW5kLnRvcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBDYW52YXMgZWxlbWVudCBvZiB0aGUgZ2l2ZW4gc2l6ZSB0byBiZSB1c2VkIGFzIGEgdGFyZ2V0IGZvciByZW5kZXJpbmcgdG8uXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICovXG52YXIgQ2FudmFzUmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gQ2FudmFzUmVuZGVyVGFyZ2V0KHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb24pXG57XG4gICAgLyoqXG4gICAgICogVGhlIENhbnZhcyBvYmplY3QgdGhhdCBiZWxvbmdzIHRvIHRoaXMgQ2FudmFzUmVuZGVyVGFyZ2V0LlxuICAgICAqXG4gICAgICogQG1lbWJlciB7SFRNTENhbnZhc0VsZW1lbnR9XG4gICAgICovXG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgIC8qKlxuICAgICAqIEEgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIG9iamVjdCByZXByZXNlbnRpbmcgYSB0d28tZGltZW5zaW9uYWwgcmVuZGVyaW5nIGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9XG4gICAgICovXG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIHRoaXMucmVzb2x1dGlvbiA9IHJlc29sdXRpb24gfHwgc2V0dGluZ3MuUkVTT0xVVElPTjtcblxuICAgIHRoaXMucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgd2lkdGg6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0saGVpZ2h0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qKlxuICogQ2xlYXJzIHRoZSBjYW52YXMgdGhhdCB3YXMgY3JlYXRlZCBieSB0aGUgQ2FudmFzUmVuZGVyVGFyZ2V0IGNsYXNzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNhbnZhc1JlbmRlclRhcmdldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKVxue1xuICAgIHRoaXMuY29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcbn07XG5cbi8qKlxuICogUmVzaXplcyB0aGUgY2FudmFzIHRvIHRoZSBzcGVjaWZpZWQgd2lkdGggYW5kIGhlaWdodC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSB0aGUgbmV3IHdpZHRoIG9mIHRoZSBjYW52YXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSB0aGUgbmV3IGhlaWdodCBvZiB0aGUgY2FudmFzXG4gKi9cbkNhbnZhc1JlbmRlclRhcmdldC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gcmVzaXplICh3aWR0aCwgaGVpZ2h0KVxue1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gd2lkdGggKiB0aGlzLnJlc29sdXRpb247XG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICogdGhpcy5yZXNvbHV0aW9uO1xufTtcblxuLyoqXG4gKiBEZXN0cm95cyB0aGlzIGNhbnZhcy5cbiAqXG4gKi9cbkNhbnZhc1JlbmRlclRhcmdldC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbntcbiAgICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbn07XG5cbi8qKlxuICogVGhlIHdpZHRoIG9mIHRoZSBjYW52YXMgYnVmZmVyIGluIHBpeGVscy5cbiAqXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycy53aWR0aC5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiB0aGlzLmNhbnZhcy53aWR0aDtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy53aWR0aC5zZXQgPSBmdW5jdGlvbiAodmFsKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHZhbDtcbn07XG5cbi8qKlxuICogVGhlIGhlaWdodCBvZiB0aGUgY2FudmFzIGJ1ZmZlciBpbiBwaXhlbHMuXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuaGVpZ2h0LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzLmhlaWdodDtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5oZWlnaHQuc2V0ID0gZnVuY3Rpb24gKHZhbCkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG57XG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdmFsO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIENhbnZhc1JlbmRlclRhcmdldC5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4vKipcbiAqIFJlZ2V4cCBmb3IgZGF0YSBVUkkuXG4gKiBCYXNlZCBvbjoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9yYWdpbmd3aW5kL2RhdGEtdXJpLXJlZ2V4fVxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudCB7UmVnRXhwfHN0cmluZ30gREFUQV9VUklcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAZXhhbXBsZSBkYXRhOmltYWdlL3BuZztiYXNlNjRcbiAqL1xudmFyIERBVEFfVVJJID0gL15cXHMqZGF0YTooPzooW1xcdy1dKylcXC8oW1xcdysuLV0rKSk/KD86O2NoYXJzZXQ9KFtcXHctXSspKT8oPzo7KGJhc2U2NCkpPywoLiopL2k7XG5cbi8qKlxuICogVHlwZWRlZiBmb3IgZGVjb21wb3NlRGF0YVVyaSByZXR1cm4gb2JqZWN0LlxuICpcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBEZWNvbXBvc2VkRGF0YVVyaVxuICogQHByb3BlcnR5IHtzdHJpbmd9IG1lZGlhVHlwZSBNZWRpYSB0eXBlLCBlZy4gYGltYWdlYFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN1YlR5cGUgU3ViIHR5cGUsIGVnLiBgcG5nYFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGVuY29kaW5nIERhdGEgZW5jb2RpbmcsIGVnLiBgYmFzZTY0YFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRhdGEgVGhlIGFjdHVhbCBkYXRhXG4gKi9cblxuLyoqXG4gKiBTcGxpdCBhIGRhdGEgVVJJIGludG8gY29tcG9uZW50cy4gUmV0dXJucyB1bmRlZmluZWQgaWZcbiAqIHBhcmFtZXRlciBgZGF0YVVyaWAgaXMgbm90IGEgdmFsaWQgZGF0YSBVUkkuXG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBkZWNvbXBvc2VEYXRhVXJpXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YVVyaSAtIHRoZSBkYXRhIFVSSSB0byBjaGVja1xuICogQHJldHVybiB7UElYSS51dGlscy5EZWNvbXBvc2VkRGF0YVVyaXx1bmRlZmluZWR9IFRoZSBkZWNvbXBvc2VkIGRhdGEgdXJpIG9yIHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBkZWNvbXBvc2VEYXRhVXJpKGRhdGFVcmkpXG57XG4gICAgdmFyIGRhdGFVcmlNYXRjaCA9IERBVEFfVVJJLmV4ZWMoZGF0YVVyaSk7XG5cbiAgICBpZiAoZGF0YVVyaU1hdGNoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1lZGlhVHlwZTogZGF0YVVyaU1hdGNoWzFdID8gZGF0YVVyaU1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdWJUeXBlOiBkYXRhVXJpTWF0Y2hbMl0gPyBkYXRhVXJpTWF0Y2hbMl0udG9Mb3dlckNhc2UoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNoYXJzZXQ6IGRhdGFVcmlNYXRjaFszXSA/IGRhdGFVcmlNYXRjaFszXS50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZW5jb2Rpbmc6IGRhdGFVcmlNYXRjaFs0XSA/IGRhdGFVcmlNYXRjaFs0XS50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGF0YTogZGF0YVVyaU1hdGNoWzVdLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbnZhciB0ZW1wQW5jaG9yO1xuXG4vKipcbiAqIFNldHMgdGhlIGBjcm9zc09yaWdpbmAgcHJvcGVydHkgZm9yIHRoaXMgcmVzb3VyY2UgYmFzZWQgb24gaWYgdGhlIHVybFxuICogZm9yIHRoaXMgcmVzb3VyY2UgaXMgY3Jvc3Mtb3JpZ2luLiBJZiBjcm9zc09yaWdpbiB3YXMgbWFudWFsbHkgc2V0LCB0aGlzXG4gKiBmdW5jdGlvbiBkb2VzIG5vdGhpbmcuXG4gKiBOaXBwZWQgZnJvbSB0aGUgcmVzb3VyY2UgbG9hZGVyIVxuICpcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgdXJsIHRvIHRlc3QuXG4gKiBAcGFyYW0ge29iamVjdH0gW2xvYz13aW5kb3cubG9jYXRpb25dIC0gVGhlIGxvY2F0aW9uIG9iamVjdCB0byB0ZXN0IGFnYWluc3QuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjcm9zc09yaWdpbiB2YWx1ZSB0byB1c2UgKG9yIGVtcHR5IHN0cmluZyBmb3Igbm9uZSkuXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZUNyb3NzT3JpZ2luKHVybCwgbG9jKVxue1xuICAgIGlmICggbG9jID09PSB2b2lkIDAgKSBsb2MgPSB3aW5kb3cubG9jYXRpb247XG5cbiAgICAvLyBkYXRhOiBhbmQgamF2YXNjcmlwdDogdXJscyBhcmUgY29uc2lkZXJlZCBzYW1lLW9yaWdpblxuICAgIGlmICh1cmwuaW5kZXhPZignZGF0YTonKSA9PT0gMClcbiAgICB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvLyBkZWZhdWx0IGlzIHdpbmRvdy5sb2NhdGlvblxuICAgIGxvYyA9IGxvYyB8fCB3aW5kb3cubG9jYXRpb247XG5cbiAgICBpZiAoIXRlbXBBbmNob3IpXG4gICAge1xuICAgICAgICB0ZW1wQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIH1cblxuICAgIC8vIGxldCB0aGUgYnJvd3NlciBkZXRlcm1pbmUgdGhlIGZ1bGwgaHJlZiBmb3IgdGhlIHVybCBvZiB0aGlzIHJlc291cmNlIGFuZCB0aGVuXG4gICAgLy8gcGFyc2Ugd2l0aCB0aGUgbm9kZSB1cmwgbGliLCB3ZSBjYW4ndCB1c2UgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGFuY2hvciBlbGVtZW50XG4gICAgLy8gYmVjYXVzZSB0aGV5IGRvbid0IHdvcmsgaW4gSUU5IDooXG4gICAgdGVtcEFuY2hvci5ocmVmID0gdXJsO1xuICAgIHVybCA9IF91cmwucGFyc2UodGVtcEFuY2hvci5ocmVmKTtcblxuICAgIHZhciBzYW1lUG9ydCA9ICghdXJsLnBvcnQgJiYgbG9jLnBvcnQgPT09ICcnKSB8fCAodXJsLnBvcnQgPT09IGxvYy5wb3J0KTtcblxuICAgIC8vIGlmIGNyb3NzIG9yaWdpblxuICAgIGlmICh1cmwuaG9zdG5hbWUgIT09IGxvYy5ob3N0bmFtZSB8fCAhc2FtZVBvcnQgfHwgdXJsLnByb3RvY29sICE9PSBsb2MucHJvdG9jb2wpXG4gICAge1xuICAgICAgICByZXR1cm4gJ2Fub255bW91cyc7XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIGdldCB0aGUgcmVzb2x1dGlvbiAvIGRldmljZSBwaXhlbCByYXRpbyBvZiBhbiBhc3NldCBieSBsb29raW5nIGZvciB0aGUgcHJlZml4XG4gKiB1c2VkIGJ5IHNwcml0ZXNoZWV0cyBhbmQgaW1hZ2UgdXJsc1xuICpcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAZnVuY3Rpb24gZ2V0UmVzb2x1dGlvbk9mVXJsXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gdGhlIGltYWdlIHBhdGhcbiAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlPTFdIC0gdGhlIGRlZmF1bHRWYWx1ZSBpZiBubyBmaWxlbmFtZSBwcmVmaXggaXMgc2V0LlxuICogQHJldHVybiB7bnVtYmVyfSByZXNvbHV0aW9uIC8gZGV2aWNlIHBpeGVsIHJhdGlvIG9mIGFuIGFzc2V0XG4gKi9cbmZ1bmN0aW9uIGdldFJlc29sdXRpb25PZlVybCh1cmwsIGRlZmF1bHRWYWx1ZSlcbntcbiAgICB2YXIgcmVzb2x1dGlvbiA9IHNldHRpbmdzLlJFVElOQV9QUkVGSVguZXhlYyh1cmwpO1xuXG4gICAgaWYgKHJlc29sdXRpb24pXG4gICAge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChyZXNvbHV0aW9uWzFdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiAxO1xufVxuXG4vLyBBIG1hcCBvZiB3YXJuaW5nIG1lc3NhZ2VzIGFscmVhZHkgZmlyZWRcbnZhciB3YXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIEhlbHBlciBmb3Igd2FybmluZyBkZXZlbG9wZXJzIGFib3V0IGRlcHJlY2F0ZWQgZmVhdHVyZXMgJiBzZXR0aW5ncy5cbiAqIEEgc3RhY2sgdHJhY2sgZm9yIHdhcm5pbmdzIGlzIGdpdmVuOyB1c2VmdWwgZm9yIHRyYWNraW5nLWRvd24gd2hlcmVcbiAqIGRlcHJlY2F0ZWQgbWV0aG9kcy9wcm9wZXJ0aWVzL2NsYXNzZXMgYXJlIGJlaW5nIHVzZWQgd2l0aGluIHRoZSBjb2RlLlxuICpcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAZnVuY3Rpb24gZGVwcmVjYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uIC0gVGhlIHZlcnNpb24gd2hlcmUgdGhlIGZlYXR1cmUgYmVjYW1lIGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gTWVzc2FnZSBzaG91bGQgaW5jbHVkZSB3aGF0IGlzIGRlcHJlY2F0ZWQsIHdoZXJlLCBhbmQgdGhlIG5ldyBzb2x1dGlvblxuICogQHBhcmFtIHtudW1iZXJ9IFtpZ25vcmVEZXB0aD0zXSAtIFRoZSBudW1iZXIgb2Ygc3RlcHMgdG8gaWdub3JlIGF0IHRoZSB0b3Agb2YgdGhlIGVycm9yIHN0YWNrXG4gKiAgICAgICAgdGhpcyBpcyBtb3N0bHkgdG8gaWdub3JlIGludGVybmFsIGRlcHJlY2F0aW9uIGNhbGxzLlxuICovXG5mdW5jdGlvbiBkZXByZWNhdGlvbih2ZXJzaW9uLCBtZXNzYWdlLCBpZ25vcmVEZXB0aClcbntcbiAgICBpZiAoIGlnbm9yZURlcHRoID09PSB2b2lkIDAgKSBpZ25vcmVEZXB0aCA9IDM7XG5cbiAgICAvLyBJZ25vcmUgZHVwbGljYXRcbiAgICBpZiAod2FybmluZ3NbbWVzc2FnZV0pXG4gICAge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgIHZhciBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuXG4gICAgLy8gSGFuZGxlIElFIDwgMTAgYW5kIFNhZmFyaSA8IDZcbiAgICBpZiAodHlwZW9mIHN0YWNrID09PSAndW5kZWZpbmVkJylcbiAgICB7XG4gICAgICAgIGNvbnNvbGUud2FybignUGl4aUpTIERlcHJlY2F0aW9uIFdhcm5pbmc6ICcsIChtZXNzYWdlICsgXCJcXG5EZXByZWNhdGVkIHNpbmNlIHZcIiArIHZlcnNpb24pKTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgLy8gY2hvcCBvZmYgdGhlIHN0YWNrIHRyYWNlIHdoaWNoIGluY2x1ZGVzIFBpeGlKUyBpbnRlcm5hbCBjYWxsc1xuICAgICAgICBzdGFjayA9IHN0YWNrLnNwbGl0KCdcXG4nKS5zcGxpY2UoaWdub3JlRGVwdGgpLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgIGlmIChjb25zb2xlLmdyb3VwQ29sbGFwc2VkKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKFxuICAgICAgICAgICAgICAgICclY1BpeGlKUyBEZXByZWNhdGlvbiBXYXJuaW5nOiAlYyVzJyxcbiAgICAgICAgICAgICAgICAnY29sb3I6IzYxNDEwODtiYWNrZ3JvdW5kOiNmZmZiZTYnLFxuICAgICAgICAgICAgICAgICdmb250LXdlaWdodDpub3JtYWw7Y29sb3I6IzYxNDEwODtiYWNrZ3JvdW5kOiNmZmZiZTYnLFxuICAgICAgICAgICAgICAgIChtZXNzYWdlICsgXCJcXG5EZXByZWNhdGVkIHNpbmNlIHZcIiArIHZlcnNpb24pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKHN0YWNrKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignUGl4aUpTIERlcHJlY2F0aW9uIFdhcm5pbmc6ICcsIChtZXNzYWdlICsgXCJcXG5EZXByZWNhdGVkIHNpbmNlIHZcIiArIHZlcnNpb24pKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihzdGFjayk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cbiAgICB3YXJuaW5nc1ttZXNzYWdlXSA9IHRydWU7XG59XG5cbi8qKlxuICogR2VuZXJhbGl6ZWQgY29udmVuaWVuY2UgdXRpbGl0aWVzIGZvciBQSVhJLlxuICogQGV4YW1wbGVcbiAqIC8vIEV4dGVuZCBQSVhJJ3MgaW50ZXJuYWwgRXZlbnQgRW1pdHRlci5cbiAqIGNsYXNzIE15RW1pdHRlciBleHRlbmRzIFBJWEkudXRpbHMuRXZlbnRFbWl0dGVyIHtcbiAqICAgY29uc3RydWN0b3IoKSB7XG4gKiAgICAgIHN1cGVyKCk7XG4gKiAgICAgIGNvbnNvbGUubG9nKFwiRW1pdHRlciBjcmVhdGVkIVwiKTtcbiAqICAgfVxuICogfVxuICpcbiAqIC8vIEdldCBpbmZvIG9uIGN1cnJlbnQgZGV2aWNlXG4gKiBjb25zb2xlLmxvZyhQSVhJLnV0aWxzLmlzTW9iaWxlKTtcbiAqXG4gKiAvLyBDb252ZXJ0IGhleCBjb2xvciB0byBzdHJpbmdcbiAqIGNvbnNvbGUubG9nKFBJWEkudXRpbHMuaGV4MnN0cmluZygweGZmMDBmZikpOyAvLyByZXR1cm5zOiBcIiNmZjAwZmZcIlxuICogQG5hbWVzcGFjZSBQSVhJLnV0aWxzXG4gKi9cblxuZXhwb3J0IHsgQmFzZVRleHR1cmVDYWNoZSwgQ2FudmFzUmVuZGVyVGFyZ2V0LCBEQVRBX1VSSSwgUHJvZ3JhbUNhY2hlLCBUZXh0dXJlQ2FjaGUsIGNsZWFyVGV4dHVyZUNhY2hlLCBjb3JyZWN0QmxlbmRNb2RlLCBjcmVhdGVJbmRpY2VzRm9yUXVhZHMsIGRlY29tcG9zZURhdGFVcmksIGRlcHJlY2F0aW9uLCBkZXN0cm95VGV4dHVyZUNhY2hlLCBkZXRlcm1pbmVDcm9zc09yaWdpbiwgZ2V0UmVzb2x1dGlvbk9mVXJsLCBoZXgycmdiLCBoZXgyc3RyaW5nLCBpc1BvdzIsIGlzV2ViR0xTdXBwb3J0ZWQsIGxvZzIsIG5leHRQb3cyLCBwcmVtdWx0aXBseUJsZW5kTW9kZSwgcHJlbXVsdGlwbHlSZ2JhLCBwcmVtdWx0aXBseVRpbnQsIHByZW11bHRpcGx5VGludFRvUmdiYSwgcmVtb3ZlSXRlbXMsIHJnYjJoZXgsIHNheUhlbGxvLCBzaWduLCBza2lwSGVsbG8sIHN0cmluZzJoZXgsIHRyaW1DYW52YXMsIHVpZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuZXMuanMubWFwXG4iLCIvKiFcbiAqIEBwaXhpL3RpY2tlciAtIHY1LjEuM1xuICogQ29tcGlsZWQgTW9uLCAwOSBTZXAgMjAxOSAwNDo1MTo1MyBVVENcbiAqXG4gKiBAcGl4aS90aWNrZXIgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovXG5pbXBvcnQgeyBzZXR0aW5ncyB9IGZyb20gJ0BwaXhpL3NldHRpbmdzJztcblxuLyoqXG4gKiBUYXJnZXQgZnJhbWVzIHBlciBtaWxsaXNlY29uZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBUQVJHRVRfRlBNU1xuICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdCAwLjA2XG4gKi9cbnNldHRpbmdzLlRBUkdFVF9GUE1TID0gMC4wNjtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSB1cGRhdGUgcHJpb3JpdGllcyB1c2VkIGJ5IGludGVybmFsIFBJWEkgY2xhc3NlcyB3aGVuIHJlZ2lzdGVyZWQgd2l0aFxuICogdGhlIHtAbGluayBQSVhJLlRpY2tlcn0gb2JqZWN0LiBIaWdoZXIgcHJpb3JpdHkgaXRlbXMgYXJlIHVwZGF0ZWQgZmlyc3QgYW5kIGxvd2VyXG4gKiBwcmlvcml0eSBpdGVtcywgc3VjaCBhcyByZW5kZXIsIHNob3VsZCBnbyBsYXRlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIFVQREFURV9QUklPUklUWVxuICogQG1lbWJlcm9mIFBJWElcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJvcGVydHkge251bWJlcn0gSU5URVJBQ1RJT049NTAgSGlnaGVzdCBwcmlvcml0eSwgdXNlZCBmb3Ige0BsaW5rIFBJWEkuaW50ZXJhY3Rpb24uSW50ZXJhY3Rpb25NYW5hZ2VyfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEhJR0g9MjUgSGlnaCBwcmlvcml0eSB1cGRhdGluZywge0BsaW5rIFBJWEkuVmlkZW9CYXNlVGV4dHVyZX0gYW5kIHtAbGluayBQSVhJLkFuaW1hdGVkU3ByaXRlfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IE5PUk1BTD0wIERlZmF1bHQgcHJpb3JpdHkgZm9yIHRpY2tlciBldmVudHMsIHNlZSB7QGxpbmsgUElYSS5UaWNrZXIjYWRkfS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBMT1c9LTI1IExvdyBwcmlvcml0eSB1c2VkIGZvciB7QGxpbmsgUElYSS5BcHBsaWNhdGlvbn0gcmVuZGVyaW5nLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFVUSUxJVFk9LTUwIExvd2VzdCBwcmlvcml0eSB1c2VkIGZvciB7QGxpbmsgUElYSS5wcmVwYXJlLkJhc2VQcmVwYXJlfSB1dGlsaXR5LlxuICovXG52YXIgVVBEQVRFX1BSSU9SSVRZID0ge1xuICAgIElOVEVSQUNUSU9OOiA1MCxcbiAgICBISUdIOiAyNSxcbiAgICBOT1JNQUw6IDAsXG4gICAgTE9XOiAtMjUsXG4gICAgVVRJTElUWTogLTUwLFxufTtcblxuLyoqXG4gKiBJbnRlcm5hbCBjbGFzcyBmb3IgaGFuZGxpbmcgdGhlIHByaW9yaXR5IHNvcnRpbmcgb2YgdGlja2VyIGhhbmRsZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBUaWNrZXJMaXN0ZW5lciA9IGZ1bmN0aW9uIFRpY2tlckxpc3RlbmVyKGZuLCBjb250ZXh0LCBwcmlvcml0eSwgb25jZSlcbntcbiAgICBpZiAoIGNvbnRleHQgPT09IHZvaWQgMCApIGNvbnRleHQgPSBudWxsO1xuICAgIGlmICggcHJpb3JpdHkgPT09IHZvaWQgMCApIHByaW9yaXR5ID0gMDtcbiAgICBpZiAoIG9uY2UgPT09IHZvaWQgMCApIG9uY2UgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGV4ZWN1dGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWVtYmVyIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLmZuID0gZm47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FsbGluZyB0byBleGVjdXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1lbWJlciB7Kn1cbiAgICAgKi9cbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgcHJpb3JpdHkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuXG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBzaG91bGQgb25seSBleGVjdXRlIG9uY2UuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMub25jZSA9IG9uY2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmV4dCBpdGVtIGluIGNoYWluLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1lbWJlciB7VGlja2VyTGlzdGVuZXJ9XG4gICAgICovXG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwcmV2aW91cyBpdGVtIGluIGNoYWluLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1lbWJlciB7VGlja2VyTGlzdGVuZXJ9XG4gICAgICovXG4gICAgdGhpcy5wcmV2aW91cyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBgdHJ1ZWAgaWYgdGhpcyBsaXN0ZW5lciBoYXMgYmVlbiBkZXN0cm95ZWQgYWxyZWFkeS5cbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIFNpbXBsZSBjb21wYXJlIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgaWYgYSBmdW5jdGlvbiBhbmQgY29udGV4dCBtYXRjaC5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBsaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBhZGRlZCBmb3Igb25lIHVwZGF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29udGV4dCAtIFRoZSBsaXN0ZW5lciBjb250ZXh0XG4gKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIGxpc3RlbmVyIG1hdGNoIHRoZSBhcmd1bWVudHNcbiAqL1xuVGlja2VyTGlzdGVuZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2ggKGZuLCBjb250ZXh0KVxue1xuICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IG51bGw7XG5cbiAgICByZXR1cm4gdGhpcy5mbiA9PT0gZm4gJiYgdGhpcy5jb250ZXh0ID09PSBjb250ZXh0O1xufTtcblxuLyoqXG4gKiBFbWl0IGJ5IGNhbGxpbmcgdGhlIGN1cnJlbnQgZnVuY3Rpb24uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZSAtIHRpbWUgc2luY2UgdGhlIGxhc3QgZW1pdC5cbiAqIEByZXR1cm4ge1RpY2tlckxpc3RlbmVyfSBOZXh0IHRpY2tlclxuICovXG5UaWNrZXJMaXN0ZW5lci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQgKGRlbHRhVGltZSlcbntcbiAgICBpZiAodGhpcy5mbilcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRleHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZm4uY2FsbCh0aGlzLmNvbnRleHQsIGRlbHRhVGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmZuKGRlbHRhVGltZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVkaXJlY3QgPSB0aGlzLm5leHQ7XG5cbiAgICBpZiAodGhpcy5vbmNlKVxuICAgIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KHRydWUpO1xuICAgIH1cblxuICAgIC8vIFNvZnQtZGVzdHJveWluZyBzaG91bGQgcmVtb3ZlXG4gICAgLy8gdGhlIG5leHQgcmVmZXJlbmNlXG4gICAgaWYgKHRoaXMuX2Rlc3Ryb3llZClcbiAgICB7XG4gICAgICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZGlyZWN0O1xufTtcblxuLyoqXG4gKiBDb25uZWN0IHRvIHRoZSBsaXN0LlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7VGlja2VyTGlzdGVuZXJ9IHByZXZpb3VzIC0gSW5wdXQgbm9kZSwgcHJldmlvdXMgbGlzdGVuZXJcbiAqL1xuVGlja2VyTGlzdGVuZXIucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0IChwcmV2aW91cylcbntcbiAgICB0aGlzLnByZXZpb3VzID0gcHJldmlvdXM7XG4gICAgaWYgKHByZXZpb3VzLm5leHQpXG4gICAge1xuICAgICAgICBwcmV2aW91cy5uZXh0LnByZXZpb3VzID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5uZXh0ID0gcHJldmlvdXMubmV4dDtcbiAgICBwcmV2aW91cy5uZXh0ID0gdGhpcztcbn07XG5cbi8qKlxuICogRGVzdHJveSBhbmQgZG9uJ3QgdXNlIGFmdGVyIHRoaXMuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbaGFyZCA9IGZhbHNlXSBgdHJ1ZWAgdG8gcmVtb3ZlIHRoZSBgbmV4dGAgcmVmZXJlbmNlLCB0aGlzXG4gKiAgICBpcyBjb25zaWRlcmVkIGEgaGFyZCBkZXN0cm95LiBTb2Z0IGRlc3Ryb3kgbWFpbnRhaW5zIHRoZSBuZXh0IHJlZmVyZW5jZS5cbiAqIEByZXR1cm4ge1RpY2tlckxpc3RlbmVyfSBUaGUgbGlzdGVuZXIgdG8gcmVkaXJlY3Qgd2hpbGUgZW1pdHRpbmcgb3IgcmVtb3ZpbmcuXG4gKi9cblRpY2tlckxpc3RlbmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoaGFyZClcbntcbiAgICAgICAgaWYgKCBoYXJkID09PSB2b2lkIDAgKSBoYXJkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHRoaXMuZm4gPSBudWxsO1xuICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG5cbiAgICAvLyBEaXNjb25uZWN0LCBob29rIHVwIG5leHQgYW5kIHByZXZpb3VzXG4gICAgaWYgKHRoaXMucHJldmlvdXMpXG4gICAge1xuICAgICAgICB0aGlzLnByZXZpb3VzLm5leHQgPSB0aGlzLm5leHQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmV4dClcbiAgICB7XG4gICAgICAgIHRoaXMubmV4dC5wcmV2aW91cyA9IHRoaXMucHJldmlvdXM7XG4gICAgfVxuXG4gICAgLy8gUmVkaXJlY3QgdG8gdGhlIG5leHQgaXRlbVxuICAgIHZhciByZWRpcmVjdCA9IHRoaXMubmV4dDtcblxuICAgIC8vIFJlbW92ZSByZWZlcmVuY2VzXG4gICAgdGhpcy5uZXh0ID0gaGFyZCA/IG51bGwgOiByZWRpcmVjdDtcbiAgICB0aGlzLnByZXZpb3VzID0gbnVsbDtcblxuICAgIHJldHVybiByZWRpcmVjdDtcbn07XG5cbi8qKlxuICogQSBUaWNrZXIgY2xhc3MgdGhhdCBydW5zIGFuIHVwZGF0ZSBsb29wIHRoYXQgb3RoZXIgb2JqZWN0cyBsaXN0ZW4gdG8uXG4gKlxuICogVGhpcyBjbGFzcyBpcyBjb21wb3NlZCBhcm91bmQgbGlzdGVuZXJzIG1lYW50IGZvciBleGVjdXRpb24gb24gdGhlIG5leHQgcmVxdWVzdGVkIGFuaW1hdGlvbiBmcmFtZS5cbiAqIEFuaW1hdGlvbiBmcmFtZXMgYXJlIHJlcXVlc3RlZCBvbmx5IHdoZW4gbmVjZXNzYXJ5LCBlLmcuIFdoZW4gdGhlIHRpY2tlciBpcyBzdGFydGVkIGFuZCB0aGUgZW1pdHRlciBoYXMgbGlzdGVuZXJzLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFRpY2tlciA9IGZ1bmN0aW9uIFRpY2tlcigpXG57XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmlyc3QgbGlzdGVuZXIuIEFsbCBuZXcgbGlzdGVuZXJzIGFkZGVkIGFyZSBjaGFpbmVkIG9uIHRoaXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7VGlja2VyTGlzdGVuZXJ9XG4gICAgICovXG4gICAgdGhpcy5faGVhZCA9IG5ldyBUaWNrZXJMaXN0ZW5lcihudWxsLCBudWxsLCBJbmZpbml0eSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBjdXJyZW50IGZyYW1lIHJlcXVlc3QgSURcbiAgICAgKiBAdHlwZSB7P251bWJlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3JlcXVlc3RJZCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCB2YWx1ZSBtYW5hZ2VkIGJ5IG1pbkZQUyBwcm9wZXJ0eSBzZXR0ZXIgYW5kIGdldHRlci5cbiAgICAgKiBUaGlzIGlzIHRoZSBtYXhpbXVtIGFsbG93ZWQgbWlsbGlzZWNvbmRzIGJldHdlZW4gdXBkYXRlcy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbWF4RWxhcHNlZE1TID0gMTAwO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgdmFsdWUgbWFuYWdlZCBieSBtYXhGUFMgcHJvcGVydHkgc2V0dGVyIGFuZCBnZXR0ZXIuXG4gICAgICogVGhpcyBpcyB0aGUgbWluaW11bSBhbGxvd2VkIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHVwZGF0ZXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9taW5FbGFwc2VkTVMgPSAwO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhpcyB0aWNrZXIgc2hvdWxkIGludm9rZSB0aGUgbWV0aG9kXG4gICAgICoge0BsaW5rIFBJWEkuVGlja2VyI3N0YXJ0fSBhdXRvbWF0aWNhbGx5XG4gICAgICogd2hlbiBhIGxpc3RlbmVyIGlzIGFkZGVkLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHRoaXMuYXV0b1N0YXJ0ID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTY2FsYXIgdGltZSB2YWx1ZSBmcm9tIGxhc3QgZnJhbWUgdG8gdGhpcyBmcmFtZS5cbiAgICAgKiBUaGlzIHZhbHVlIGlzIGNhcHBlZCBieSBzZXR0aW5nIHtAbGluayBQSVhJLlRpY2tlciNtaW5GUFN9XG4gICAgICogYW5kIGlzIHNjYWxlZCB3aXRoIHtAbGluayBQSVhJLlRpY2tlciNzcGVlZH0uXG4gICAgICogKipOb3RlOioqIFRoZSBjYXAgbWF5IGJlIGV4Y2VlZGVkIGJ5IHNjYWxpbmcuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIHRoaXMuZGVsdGFUaW1lID0gMTtcblxuICAgIC8qKlxuICAgICAqIFNjYWxlciB0aW1lIGVsYXBzZWQgaW4gbWlsbGlzZWNvbmRzIGZyb20gbGFzdCBmcmFtZSB0byB0aGlzIGZyYW1lLlxuICAgICAqIFRoaXMgdmFsdWUgaXMgY2FwcGVkIGJ5IHNldHRpbmcge0BsaW5rIFBJWEkuVGlja2VyI21pbkZQU31cbiAgICAgKiBhbmQgaXMgc2NhbGVkIHdpdGgge0BsaW5rIFBJWEkuVGlja2VyI3NwZWVkfS5cbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhcCBtYXkgYmUgZXhjZWVkZWQgYnkgc2NhbGluZy5cbiAgICAgKiBJZiB0aGUgcGxhdGZvcm0gc3VwcG9ydHMgRE9NSGlnaFJlc1RpbWVTdGFtcCxcbiAgICAgKiB0aGlzIHZhbHVlIHdpbGwgaGF2ZSBhIHByZWNpc2lvbiBvZiAxIMK1cy5cbiAgICAgKiBEZWZhdWx0cyB0byB0YXJnZXQgZnJhbWUgdGltZVxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDE2LjY2XG4gICAgICovXG4gICAgdGhpcy5kZWx0YU1TID0gMSAvIHNldHRpbmdzLlRBUkdFVF9GUE1TO1xuXG4gICAgLyoqXG4gICAgICogVGltZSBlbGFwc2VkIGluIG1pbGxpc2Vjb25kcyBmcm9tIGxhc3QgZnJhbWUgdG8gdGhpcyBmcmFtZS5cbiAgICAgKiBPcHBvc2VkIHRvIHdoYXQgdGhlIHNjYWxhciB7QGxpbmsgUElYSS5UaWNrZXIjZGVsdGFUaW1lfVxuICAgICAqIGlzIGJhc2VkLCB0aGlzIHZhbHVlIGlzIG5laXRoZXIgY2FwcGVkIG5vciBzY2FsZWQuXG4gICAgICogSWYgdGhlIHBsYXRmb3JtIHN1cHBvcnRzIERPTUhpZ2hSZXNUaW1lU3RhbXAsXG4gICAgICogdGhpcyB2YWx1ZSB3aWxsIGhhdmUgYSBwcmVjaXNpb24gb2YgMSDCtXMuXG4gICAgICogRGVmYXVsdHMgdG8gdGFyZ2V0IGZyYW1lIHRpbWVcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxNi42NlxuICAgICAqL1xuICAgIHRoaXMuZWxhcHNlZE1TID0gMSAvIHNldHRpbmdzLlRBUkdFVF9GUE1TO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhc3QgdGltZSB7QGxpbmsgUElYSS5UaWNrZXIjdXBkYXRlfSB3YXMgaW52b2tlZC5cbiAgICAgKiBUaGlzIHZhbHVlIGlzIGFsc28gcmVzZXQgaW50ZXJuYWxseSBvdXRzaWRlIG9mIGludm9raW5nXG4gICAgICogdXBkYXRlLCBidXQgb25seSB3aGVuIGEgbmV3IGFuaW1hdGlvbiBmcmFtZSBpcyByZXF1ZXN0ZWQuXG4gICAgICogSWYgdGhlIHBsYXRmb3JtIHN1cHBvcnRzIERPTUhpZ2hSZXNUaW1lU3RhbXAsXG4gICAgICogdGhpcyB2YWx1ZSB3aWxsIGhhdmUgYSBwcmVjaXNpb24gb2YgMSDCtXMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgLTFcbiAgICAgKi9cbiAgICB0aGlzLmxhc3RUaW1lID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBGYWN0b3Igb2YgY3VycmVudCB7QGxpbmsgUElYSS5UaWNrZXIjZGVsdGFUaW1lfS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIFNjYWxlcyB0aWNrZXIuZGVsdGFUaW1lIHRvIHdoYXQgd291bGQgYmVcbiAgICAgKiAvLyB0aGUgZXF1aXZhbGVudCBvZiBhcHByb3hpbWF0ZWx5IDEyMCBGUFNcbiAgICAgKiB0aWNrZXIuc3BlZWQgPSAyO1xuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICB0aGlzLnNwZWVkID0gMTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoaXMgdGlja2VyIGhhcyBiZWVuIHN0YXJ0ZWQuXG4gICAgICogYHRydWVgIGlmIHtAbGluayBQSVhJLlRpY2tlciNzdGFydH0gaGFzIGJlZW4gY2FsbGVkLlxuICAgICAqIGBmYWxzZWAgaWYge0BsaW5rIFBJWEkuVGlja2VyI3N0b3B9IGhhcyBiZWVuIGNhbGxlZC5cbiAgICAgKiBXaGlsZSBgZmFsc2VgLCB0aGlzIHZhbHVlIG1heSBjaGFuZ2UgdG8gYHRydWVgIGluIHRoZVxuICAgICAqIGV2ZW50IG9mIHtAbGluayBQSVhJLlRpY2tlciNhdXRvU3RhcnR9IGJlaW5nIGB0cnVlYFxuICAgICAqIGFuZCBhIGxpc3RlbmVyIGlzIGFkZGVkLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogSWYgZW5hYmxlZCwgZGVsZXRpbmcgaXMgZGlzYWJsZWQuXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcHJvdGVjdGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFzdCB0aW1lIGtleWZyYW1lIHdhcyBleGVjdXRlZC5cbiAgICAgKiBNYWludGFpbnMgYSByZWxhdGl2ZWx5IGZpeGVkIGludGVydmFsIHdpdGggdGhlIHByZXZpb3VzIHZhbHVlLlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAtMVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbGFzdEZyYW1lID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCB0aWNrIG1ldGhvZCBib3VuZCB0byB0aWNrZXIgaW5zdGFuY2UuXG4gICAgICogVGhpcyBpcyBiZWNhdXNlIGluIGVhcmx5IDIwMTUsIEZ1bmN0aW9uLmJpbmRcbiAgICAgKiBpcyBzdGlsbCA2MCUgc2xvd2VyIGluIGhpZ2ggcGVyZm9ybWFuY2Ugc2NlbmFyaW9zLlxuICAgICAqIEFsc28gc2VwYXJhdGluZyBmcmFtZSByZXF1ZXN0cyBmcm9tIHVwZGF0ZSBtZXRob2RcbiAgICAgKiBzbyBsaXN0ZW5lcnMgbWF5IGJlIGNhbGxlZCBhdCBhbnkgdGltZSBhbmQgd2l0aFxuICAgICAqIGFueSBhbmltYXRpb24gQVBJLCBqdXN0IGludm9rZSB0aWNrZXIudXBkYXRlKHRpbWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIFRpbWUgc2luY2UgbGFzdCB0aWNrLlxuICAgICAqL1xuICAgIHRoaXMuX3RpY2sgPSBmdW5jdGlvbiAodGltZSkge1xuICAgICAgICB0aGlzJDEuX3JlcXVlc3RJZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMkMS5zdGFydGVkKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBJbnZva2UgbGlzdGVuZXJzIG5vd1xuICAgICAgICAgICAgdGhpcyQxLnVwZGF0ZSh0aW1lKTtcbiAgICAgICAgICAgIC8vIExpc3RlbmVyIHNpZGUgZWZmZWN0cyBtYXkgaGF2ZSBtb2RpZmllZCB0aWNrZXIgc3RhdGUuXG4gICAgICAgICAgICBpZiAodGhpcyQxLnN0YXJ0ZWQgJiYgdGhpcyQxLl9yZXF1ZXN0SWQgPT09IG51bGwgJiYgdGhpcyQxLl9oZWFkLm5leHQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcyQxLl9yZXF1ZXN0SWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcyQxLl90aWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBGUFM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbWluRlBTOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG1heEZQUzogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xudmFyIHN0YXRpY0FjY2Vzc29ycyA9IHsgc2hhcmVkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHN5c3RlbTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vKipcbiAqIENvbmRpdGlvbmFsbHkgcmVxdWVzdHMgYSBuZXcgYW5pbWF0aW9uIGZyYW1lLlxuICogSWYgYSBmcmFtZSBoYXMgbm90IGFscmVhZHkgYmVlbiByZXF1ZXN0ZWQsIGFuZCBpZiB0aGUgaW50ZXJuYWxcbiAqIGVtaXR0ZXIgaGFzIGxpc3RlbmVycywgYSBuZXcgZnJhbWUgaXMgcmVxdWVzdGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblRpY2tlci5wcm90b3R5cGUuX3JlcXVlc3RJZk5lZWRlZCA9IGZ1bmN0aW9uIF9yZXF1ZXN0SWZOZWVkZWQgKClcbntcbiAgICBpZiAodGhpcy5fcmVxdWVzdElkID09PSBudWxsICYmIHRoaXMuX2hlYWQubmV4dClcbiAgICB7XG4gICAgICAgIC8vIGVuc3VyZSBjYWxsYmFja3MgZ2V0IGNvcnJlY3QgZGVsdGFcbiAgICAgICAgdGhpcy5sYXN0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB0aGlzLl9sYXN0RnJhbWUgPSB0aGlzLmxhc3RUaW1lO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0SWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5fdGljayk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDb25kaXRpb25hbGx5IGNhbmNlbHMgYSBwZW5kaW5nIGFuaW1hdGlvbiBmcmFtZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5UaWNrZXIucHJvdG90eXBlLl9jYW5jZWxJZk5lZWRlZCA9IGZ1bmN0aW9uIF9jYW5jZWxJZk5lZWRlZCAoKVxue1xuICAgIGlmICh0aGlzLl9yZXF1ZXN0SWQgIT09IG51bGwpXG4gICAge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9yZXF1ZXN0SWQpO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0SWQgPSBudWxsO1xuICAgIH1cbn07XG5cbi8qKlxuICogQ29uZGl0aW9uYWxseSByZXF1ZXN0cyBhIG5ldyBhbmltYXRpb24gZnJhbWUuXG4gKiBJZiB0aGUgdGlja2VyIGhhcyBiZWVuIHN0YXJ0ZWQgaXQgY2hlY2tzIGlmIGEgZnJhbWUgaGFzIG5vdCBhbHJlYWR5XG4gKiBiZWVuIHJlcXVlc3RlZCwgYW5kIGlmIHRoZSBpbnRlcm5hbCBlbWl0dGVyIGhhcyBsaXN0ZW5lcnMuIElmIHRoZXNlXG4gKiBjb25kaXRpb25zIGFyZSBtZXQsIGEgbmV3IGZyYW1lIGlzIHJlcXVlc3RlZC4gSWYgdGhlIHRpY2tlciBoYXMgbm90XG4gKiBiZWVuIHN0YXJ0ZWQsIGJ1dCBhdXRvU3RhcnQgaXMgYHRydWVgLCB0aGVuIHRoZSB0aWNrZXIgc3RhcnRzIG5vdyxcbiAqIGFuZCBjb250aW51ZXMgd2l0aCB0aGUgcHJldmlvdXMgY29uZGl0aW9ucyB0byByZXF1ZXN0IGEgbmV3IGZyYW1lLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblRpY2tlci5wcm90b3R5cGUuX3N0YXJ0SWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9zdGFydElmUG9zc2libGUgKClcbntcbiAgICBpZiAodGhpcy5zdGFydGVkKVxuICAgIHtcbiAgICAgICAgdGhpcy5fcmVxdWVzdElmTmVlZGVkKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuYXV0b1N0YXJ0KVxuICAgIHtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBoYW5kbGVyIGZvciB0aWNrIGV2ZW50cy4gQ2FsbHMgY29udGludW91c2x5IHVubGVzc1xuICogaXQgaXMgcmVtb3ZlZCBvciB0aGUgdGlja2VyIGlzIHN0b3BwZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgbGlzdGVuZXIgZnVuY3Rpb24gdG8gYmUgYWRkZWQgZm9yIHVwZGF0ZXNcbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHRdIC0gVGhlIGxpc3RlbmVyIGNvbnRleHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcHJpb3JpdHk9UElYSS5VUERBVEVfUFJJT1JJVFkuTk9STUFMXSAtIFRoZSBwcmlvcml0eSBmb3IgZW1pdHRpbmdcbiAqIEByZXR1cm5zIHtQSVhJLlRpY2tlcn0gVGhpcyBpbnN0YW5jZSBvZiBhIHRpY2tlclxuICovXG5UaWNrZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoZm4sIGNvbnRleHQsIHByaW9yaXR5KVxue1xuICAgICAgICBpZiAoIHByaW9yaXR5ID09PSB2b2lkIDAgKSBwcmlvcml0eSA9IFVQREFURV9QUklPUklUWS5OT1JNQUw7XG5cbiAgICByZXR1cm4gdGhpcy5fYWRkTGlzdGVuZXIobmV3IFRpY2tlckxpc3RlbmVyKGZuLCBjb250ZXh0LCBwcmlvcml0eSkpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBoYW5kbGVyIGZvciB0aGUgdGljayBldmVudCB3aGljaCBpcyBvbmx5IGV4ZWN1dGUgb25jZS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBsaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBhZGRlZCBmb3Igb25lIHVwZGF0ZVxuICogQHBhcmFtIHsqfSBbY29udGV4dF0gLSBUaGUgbGlzdGVuZXIgY29udGV4dFxuICogQHBhcmFtIHtudW1iZXJ9IFtwcmlvcml0eT1QSVhJLlVQREFURV9QUklPUklUWS5OT1JNQUxdIC0gVGhlIHByaW9yaXR5IGZvciBlbWl0dGluZ1xuICogQHJldHVybnMge1BJWEkuVGlja2VyfSBUaGlzIGluc3RhbmNlIG9mIGEgdGlja2VyXG4gKi9cblRpY2tlci5wcm90b3R5cGUuYWRkT25jZSA9IGZ1bmN0aW9uIGFkZE9uY2UgKGZuLCBjb250ZXh0LCBwcmlvcml0eSlcbntcbiAgICAgICAgaWYgKCBwcmlvcml0eSA9PT0gdm9pZCAwICkgcHJpb3JpdHkgPSBVUERBVEVfUFJJT1JJVFkuTk9STUFMO1xuXG4gICAgcmV0dXJuIHRoaXMuX2FkZExpc3RlbmVyKG5ldyBUaWNrZXJMaXN0ZW5lcihmbiwgY29udGV4dCwgcHJpb3JpdHksIHRydWUpKTtcbn07XG5cbi8qKlxuICogSW50ZXJuYWxseSBhZGRzIHRoZSBldmVudCBoYW5kbGVyIHNvIHRoYXQgaXQgY2FuIGJlIHNvcnRlZCBieSBwcmlvcml0eS5cbiAqIFByaW9yaXR5IGFsbG93cyBjZXJ0YWluIGhhbmRsZXIgKHVzZXIsIEFuaW1hdGVkU3ByaXRlLCBJbnRlcmFjdGlvbikgdG8gYmUgcnVuXG4gKiBiZWZvcmUgdGhlIHJlbmRlcmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtUaWNrZXJMaXN0ZW5lcn0gbGlzdGVuZXIgLSBDdXJyZW50IGxpc3RlbmVyIGJlaW5nIGFkZGVkLlxuICogQHJldHVybnMge1BJWEkuVGlja2VyfSBUaGlzIGluc3RhbmNlIG9mIGEgdGlja2VyXG4gKi9cblRpY2tlci5wcm90b3R5cGUuX2FkZExpc3RlbmVyID0gZnVuY3Rpb24gX2FkZExpc3RlbmVyIChsaXN0ZW5lcilcbntcbiAgICAvLyBGb3IgYXR0YWNoaW5nIHRvIGhlYWRcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuX2hlYWQubmV4dDtcbiAgICB2YXIgcHJldmlvdXMgPSB0aGlzLl9oZWFkO1xuXG4gICAgLy8gQWRkIHRoZSBmaXJzdCBpdGVtXG4gICAgaWYgKCFjdXJyZW50KVxuICAgIHtcbiAgICAgICAgbGlzdGVuZXIuY29ubmVjdChwcmV2aW91cyk7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIC8vIEdvIGZyb20gaGlnaGVzdCB0byBsb3dlc3QgcHJpb3JpdHlcbiAgICAgICAgd2hpbGUgKGN1cnJlbnQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lci5wcmlvcml0eSA+IGN1cnJlbnQucHJpb3JpdHkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuY29ubmVjdChwcmV2aW91cyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2aW91cyA9IGN1cnJlbnQ7XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm90IHlldCBjb25uZWN0ZWRcbiAgICAgICAgaWYgKCFsaXN0ZW5lci5wcmV2aW91cylcbiAgICAgICAge1xuICAgICAgICAgICAgbGlzdGVuZXIuY29ubmVjdChwcmV2aW91cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zdGFydElmUG9zc2libGUoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGFueSBoYW5kbGVycyBtYXRjaGluZyB0aGUgZnVuY3Rpb24gYW5kIGNvbnRleHQgcGFyYW1ldGVycy5cbiAqIElmIG5vIGhhbmRsZXJzIGFyZSBsZWZ0IGFmdGVyIHJlbW92aW5nLCB0aGVuIGl0IGNhbmNlbHMgdGhlIGFuaW1hdGlvbiBmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBsaXN0ZW5lciBmdW5jdGlvbiB0byBiZSByZW1vdmVkXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0XSAtIFRoZSBsaXN0ZW5lciBjb250ZXh0IHRvIGJlIHJlbW92ZWRcbiAqIEByZXR1cm5zIHtQSVhJLlRpY2tlcn0gVGhpcyBpbnN0YW5jZSBvZiBhIHRpY2tlclxuICovXG5UaWNrZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSAoZm4sIGNvbnRleHQpXG57XG4gICAgdmFyIGxpc3RlbmVyID0gdGhpcy5faGVhZC5uZXh0O1xuXG4gICAgd2hpbGUgKGxpc3RlbmVyKVxuICAgIHtcbiAgICAgICAgLy8gV2UgZm91bmQgYSBtYXRjaCwgbGV0cyByZW1vdmUgaXRcbiAgICAgICAgLy8gbm8gYnJlYWsgdG8gZGVsZXRlIGFsbCBwb3NzaWJsZSBtYXRjaGVzXG4gICAgICAgIC8vIGluY2FzZSBhIGxpc3RlbmVyIHdhcyBhZGRlZCAyKyB0aW1lc1xuICAgICAgICBpZiAobGlzdGVuZXIubWF0Y2goZm4sIGNvbnRleHQpKVxuICAgICAgICB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5faGVhZC5uZXh0KVxuICAgIHtcbiAgICAgICAgdGhpcy5fY2FuY2VsSWZOZWVkZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU3RhcnRzIHRoZSB0aWNrZXIuIElmIHRoZSB0aWNrZXIgaGFzIGxpc3RlbmVyc1xuICogYSBuZXcgYW5pbWF0aW9uIGZyYW1lIGlzIHJlcXVlc3RlZCBhdCB0aGlzIHBvaW50LlxuICovXG5UaWNrZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQgKClcbntcbiAgICBpZiAoIXRoaXMuc3RhcnRlZClcbiAgICB7XG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RJZk5lZWRlZCgpO1xuICAgIH1cbn07XG5cbi8qKlxuICogU3RvcHMgdGhlIHRpY2tlci4gSWYgdGhlIHRpY2tlciBoYXMgcmVxdWVzdGVkXG4gKiBhbiBhbmltYXRpb24gZnJhbWUgaXQgaXMgY2FuY2VsZWQgYXQgdGhpcyBwb2ludC5cbiAqL1xuVGlja2VyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gc3RvcCAoKVxue1xuICAgIGlmICh0aGlzLnN0YXJ0ZWQpXG4gICAge1xuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fY2FuY2VsSWZOZWVkZWQoKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIERlc3Ryb3kgdGhlIHRpY2tlciBhbmQgZG9uJ3QgdXNlIGFmdGVyIHRoaXMuIENhbGxpbmdcbiAqIHRoaXMgbWV0aG9kIHJlbW92ZXMgYWxsIHJlZmVyZW5jZXMgdG8gaW50ZXJuYWwgZXZlbnRzLlxuICovXG5UaWNrZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG57XG4gICAgaWYgKCF0aGlzLl9wcm90ZWN0ZWQpXG4gICAge1xuICAgICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgICB2YXIgbGlzdGVuZXIgPSB0aGlzLl9oZWFkLm5leHQ7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLmRlc3Ryb3kodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9oZWFkLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5faGVhZCA9IG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gKiBUcmlnZ2VycyBhbiB1cGRhdGUuIEFuIHVwZGF0ZSBlbnRhaWxzIHNldHRpbmcgdGhlXG4gKiBjdXJyZW50IHtAbGluayBQSVhJLlRpY2tlciNlbGFwc2VkTVN9LFxuICogdGhlIGN1cnJlbnQge0BsaW5rIFBJWEkuVGlja2VyI2RlbHRhVGltZX0sXG4gKiBpbnZva2luZyBhbGwgbGlzdGVuZXJzIHdpdGggY3VycmVudCBkZWx0YVRpbWUsXG4gKiBhbmQgdGhlbiBmaW5hbGx5IHNldHRpbmcge0BsaW5rIFBJWEkuVGlja2VyI2xhc3RUaW1lfVxuICogd2l0aCB0aGUgdmFsdWUgb2YgY3VycmVudFRpbWUgdGhhdCB3YXMgcHJvdmlkZWQuXG4gKiBUaGlzIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGJ5IGFuaW1hdGlvblxuICogZnJhbWUgY2FsbGJhY2tzIGlmIHRoZSB0aWNrZXIgaW5zdGFuY2UgaGFzIGJlZW4gc3RhcnRlZFxuICogYW5kIGxpc3RlbmVycyBhcmUgYWRkZWQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtjdXJyZW50VGltZT1wZXJmb3JtYW5jZS5ub3coKV0gLSB0aGUgY3VycmVudCB0aW1lIG9mIGV4ZWN1dGlvblxuICovXG5UaWNrZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoY3VycmVudFRpbWUpXG57XG4gICAgICAgIGlmICggY3VycmVudFRpbWUgPT09IHZvaWQgMCApIGN1cnJlbnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICB2YXIgZWxhcHNlZE1TO1xuXG4gICAgLy8gSWYgdGhlIGRpZmZlcmVuY2UgaW4gdGltZSBpcyB6ZXJvIG9yIG5lZ2F0aXZlLCB3ZSBpZ25vcmUgbW9zdCBvZiB0aGUgd29yayBkb25lIGhlcmUuXG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gdmFsaWQgZGlmZmVyZW5jZSwgdGhlbiBzaG91bGQgYmUgbm8gcmVhc29uIHRvIGxldCBhbnlvbmUga25vdyBhYm91dCBpdC5cbiAgICAvLyBBIHplcm8gZGVsdGEsIGlzIGV4YWN0bHkgdGhhdCwgbm90aGluZyBzaG91bGQgdXBkYXRlLlxuICAgIC8vXG4gICAgLy8gVGhlIGRpZmZlcmVuY2UgaW4gdGltZSBjYW4gYmUgbmVnYXRpdmUsIGFuZCBubyB0aGlzIGRvZXMgbm90IG1lYW4gdGltZSB0cmF2ZWxpbmcuXG4gICAgLy8gVGhpcyBjYW4gYmUgdGhlIHJlc3VsdCBvZiBhIHJhY2UgY29uZGl0aW9uIGJldHdlZW4gd2hlbiBhbiBhbmltYXRpb24gZnJhbWUgaXMgcmVxdWVzdGVkXG4gICAgLy8gb24gdGhlIGN1cnJlbnQgSmF2YVNjcmlwdCBlbmdpbmUgZXZlbnQgbG9vcCwgYW5kIHdoZW4gdGhlIHRpY2tlcidzIHN0YXJ0IG1ldGhvZCBpcyBpbnZva2VkXG4gICAgLy8gKHdoaWNoIGludm9rZXMgdGhlIGludGVybmFsIF9yZXF1ZXN0SWZOZWVkZWQgbWV0aG9kKS4gSWYgYSBmcmFtZSBpcyByZXF1ZXN0ZWQgYmVmb3JlXG4gICAgLy8gX3JlcXVlc3RJZk5lZWRlZCBpcyBpbnZva2VkLCB0aGVuIHRoZSBjYWxsYmFjayBmb3IgdGhlIGFuaW1hdGlvbiBmcmFtZSB0aGUgdGlja2VyIHJlcXVlc3RzLFxuICAgIC8vIGNhbiByZWNlaXZlIGEgdGltZSBhcmd1bWVudCB0aGF0IGNhbiBiZSBsZXNzIHRoYW4gdGhlIGxhc3RUaW1lIHZhbHVlIHRoYXQgd2FzIHNldCB3aXRoaW5cbiAgICAvLyBfcmVxdWVzdElmTmVlZGVkLiBUaGlzIGRpZmZlcmVuY2UgaXMgaW4gbWljcm9zZWNvbmRzLCBidXQgdGhpcyBpcyBlbm91Z2ggdG8gY2F1c2UgcHJvYmxlbXMuXG4gICAgLy9cbiAgICAvLyBUaGlzIGNoZWNrIGNvdmVycyB0aGlzIGJyb3dzZXIgZW5naW5lIHRpbWluZyBpc3N1ZSwgYXMgd2VsbCBhcyBpZiBjb25zdW1lcnMgcGFzcyBhbiBpbnZhbGlkXG4gICAgLy8gY3VycmVudFRpbWUgdmFsdWUuIFRoaXMgbWF5IGhhcHBlbiBpZiBjb25zdW1lcnMgb3B0LW91dCBvZiB0aGUgYXV0b1N0YXJ0LCBhbmQgdXBkYXRlIHRoZW1zZWx2ZXMuXG5cbiAgICBpZiAoY3VycmVudFRpbWUgPiB0aGlzLmxhc3RUaW1lKVxuICAgIHtcbiAgICAgICAgLy8gU2F2ZSB1bmNhcHBlZCBlbGFwc2VkTVMgZm9yIG1lYXN1cmVtZW50XG4gICAgICAgIGVsYXBzZWRNUyA9IHRoaXMuZWxhcHNlZE1TID0gY3VycmVudFRpbWUgLSB0aGlzLmxhc3RUaW1lO1xuXG4gICAgICAgIC8vIGNhcCB0aGUgbWlsbGlzZWNvbmRzIGVsYXBzZWQgdXNlZCBmb3IgZGVsdGFUaW1lXG4gICAgICAgIGlmIChlbGFwc2VkTVMgPiB0aGlzLl9tYXhFbGFwc2VkTVMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGVsYXBzZWRNUyA9IHRoaXMuX21heEVsYXBzZWRNUztcbiAgICAgICAgfVxuXG4gICAgICAgIGVsYXBzZWRNUyAqPSB0aGlzLnNwZWVkO1xuXG4gICAgICAgIC8vIElmIG5vdCBlbm91Z2ggdGltZSBoYXMgcGFzc2VkLCBleGl0IHRoZSBmdW5jdGlvbi5cbiAgICAgICAgLy8gR2V0IHJlYWR5IGZvciBuZXh0IGZyYW1lIGJ5IHNldHRpbmcgX2xhc3RGcmFtZSwgYnV0IGJhc2VkIG9uIF9taW5FbGFwc2VkTVNcbiAgICAgICAgLy8gYWRqdXN0bWVudCB0byBlbnN1cmUgYSByZWxhdGl2ZWx5IHN0YWJsZSBpbnRlcnZhbC5cbiAgICAgICAgaWYgKHRoaXMuX21pbkVsYXBzZWRNUylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGRlbHRhID0gY3VycmVudFRpbWUgLSB0aGlzLl9sYXN0RnJhbWUgfCAwO1xuXG4gICAgICAgICAgICBpZiAoZGVsdGEgPCB0aGlzLl9taW5FbGFwc2VkTVMpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9sYXN0RnJhbWUgPSBjdXJyZW50VGltZSAtIChkZWx0YSAlIHRoaXMuX21pbkVsYXBzZWRNUyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlbHRhTVMgPSBlbGFwc2VkTVM7XG4gICAgICAgIHRoaXMuZGVsdGFUaW1lID0gdGhpcy5kZWx0YU1TICogc2V0dGluZ3MuVEFSR0VUX0ZQTVM7XG5cbiAgICAgICAgLy8gQ2FjaGUgYSBsb2NhbCByZWZlcmVuY2UsIGluLWNhc2UgdGlja2VyIGlzIGRlc3Ryb3llZFxuICAgICAgICAvLyBkdXJpbmcgdGhlIGVtaXQsIHdlIGNhbiBzdGlsbCBjaGVjayBmb3IgaGVhZC5uZXh0XG4gICAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcblxuICAgICAgICAvLyBJbnZva2UgbGlzdGVuZXJzIGFkZGVkIHRvIGludGVybmFsIGVtaXR0ZXJcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gaGVhZC5uZXh0O1xuXG4gICAgICAgIHdoaWxlIChsaXN0ZW5lcilcbiAgICAgICAge1xuICAgICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5lbWl0KHRoaXMuZGVsdGFUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGVhZC5uZXh0KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9jYW5jZWxJZk5lZWRlZCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIHRoaXMuZGVsdGFUaW1lID0gdGhpcy5kZWx0YU1TID0gdGhpcy5lbGFwc2VkTVMgPSAwO1xuICAgIH1cblxuICAgIHRoaXMubGFzdFRpbWUgPSBjdXJyZW50VGltZTtcbn07XG5cbi8qKlxuICogVGhlIGZyYW1lcyBwZXIgc2Vjb25kIGF0IHdoaWNoIHRoaXMgdGlja2VyIGlzIHJ1bm5pbmcuXG4gKiBUaGUgZGVmYXVsdCBpcyBhcHByb3hpbWF0ZWx5IDYwIGluIG1vc3QgbW9kZXJuIGJyb3dzZXJzLlxuICogKipOb3RlOioqIFRoaXMgZG9lcyBub3QgZmFjdG9yIGluIHRoZSB2YWx1ZSBvZlxuICoge0BsaW5rIFBJWEkuVGlja2VyI3NwZWVkfSwgd2hpY2ggaXMgc3BlY2lmaWNcbiAqIHRvIHNjYWxpbmcge0BsaW5rIFBJWEkuVGlja2VyI2RlbHRhVGltZX0uXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICogQHJlYWRvbmx5XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5GUFMuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gMTAwMCAvIHRoaXMuZWxhcHNlZE1TO1xufTtcblxuLyoqXG4gKiBNYW5hZ2VzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgYWxsb3dlZCB0b1xuICogZWxhcHNlIGJldHdlZW4gaW52b2tpbmcge0BsaW5rIFBJWEkuVGlja2VyI3VwZGF0ZX0uXG4gKiBUaGlzIHZhbHVlIGlzIHVzZWQgdG8gY2FwIHtAbGluayBQSVhJLlRpY2tlciNkZWx0YVRpbWV9LFxuICogYnV0IGRvZXMgbm90IGVmZmVjdCB0aGUgbWVhc3VyZWQgdmFsdWUgb2Yge0BsaW5rIFBJWEkuVGlja2VyI0ZQU30uXG4gKiBXaGVuIHNldHRpbmcgdGhpcyBwcm9wZXJ0eSBpdCBpcyBjbGFtcGVkIHRvIGEgdmFsdWUgYmV0d2VlblxuICogYDBgIGFuZCBgUElYSS5zZXR0aW5ncy5UQVJHRVRfRlBNUyAqIDEwMDBgLlxuICpcbiAqIEBtZW1iZXIge251bWJlcn1cbiAqIEBkZWZhdWx0IDEwXG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5taW5GUFMuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gMTAwMCAvIHRoaXMuX21heEVsYXBzZWRNUztcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5taW5GUFMuc2V0ID0gZnVuY3Rpb24gKGZwcykgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG57XG4gICAgLy8gTWluaW11bSBtdXN0IGJlIGJlbG93IHRoZSBtYXhGUFNcbiAgICB2YXIgbWluRlBTID0gTWF0aC5taW4odGhpcy5tYXhGUFMsIGZwcyk7XG5cbiAgICAvLyBNdXN0IGJlIGF0IGxlYXN0IDAsIGJ1dCBiZWxvdyAxIC8gc2V0dGluZ3MuVEFSR0VUX0ZQTVNcbiAgICB2YXIgbWluRlBNUyA9IE1hdGgubWluKE1hdGgubWF4KDAsIG1pbkZQUykgLyAxMDAwLCBzZXR0aW5ncy5UQVJHRVRfRlBNUyk7XG5cbiAgICB0aGlzLl9tYXhFbGFwc2VkTVMgPSAxIC8gbWluRlBNUztcbn07XG5cbi8qKlxuICogTWFuYWdlcyB0aGUgbWluaW11bSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHJlcXVpcmVkIHRvXG4gKiBlbGFwc2UgYmV0d2VlbiBpbnZva2luZyB7QGxpbmsgUElYSS5UaWNrZXIjdXBkYXRlfS5cbiAqIFRoaXMgd2lsbCBlZmZlY3QgdGhlIG1lYXN1cmVkIHZhbHVlIG9mIHtAbGluayBQSVhJLlRpY2tlciNGUFN9LlxuICogSWYgaXQgaXMgc2V0IHRvIGAwYCwgdGhlbiB0aGVyZSBpcyBubyBsaW1pdDsgUGl4aUpTIHdpbGwgcmVuZGVyIGFzIG1hbnkgZnJhbWVzIGFzIGl0IGNhbi5cbiAqIE90aGVyd2lzZSBpdCB3aWxsIGJlIGF0IGxlYXN0IGBtaW5GUFNgXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICogQGRlZmF1bHQgMFxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMubWF4RlBTLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgaWYgKHRoaXMuX21pbkVsYXBzZWRNUylcbiAgICB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKDEwMDAgLyB0aGlzLl9taW5FbGFwc2VkTVMpO1xuICAgIH1cblxuICAgIHJldHVybiAwO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLm1heEZQUy5zZXQgPSBmdW5jdGlvbiAoZnBzKVxue1xuICAgIGlmIChmcHMgPT09IDApXG4gICAge1xuICAgICAgICB0aGlzLl9taW5FbGFwc2VkTVMgPSAwO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICAvLyBNYXggbXVzdCBiZSBhdCBsZWFzdCB0aGUgbWluRlBTXG4gICAgICAgIHZhciBtYXhGUFMgPSBNYXRoLm1heCh0aGlzLm1pbkZQUywgZnBzKTtcblxuICAgICAgICB0aGlzLl9taW5FbGFwc2VkTVMgPSAxIC8gKG1heEZQUyAvIDEwMDApO1xuICAgIH1cbn07XG5cbi8qKlxuICogVGhlIHNoYXJlZCB0aWNrZXIgaW5zdGFuY2UgdXNlZCBieSB7QGxpbmsgUElYSS5BbmltYXRlZFNwcml0ZX0gYW5kIGJ5XG4gKiB7QGxpbmsgUElYSS5WaWRlb1Jlc291cmNlfSB0byB1cGRhdGUgYW5pbWF0aW9uIGZyYW1lcyAvIHZpZGVvIHRleHR1cmVzLlxuICpcbiAqIEl0IG1heSBhbHNvIGJlIHVzZWQgYnkge0BsaW5rIFBJWEkuQXBwbGljYXRpb259IGlmIGNyZWF0ZWQgd2l0aCB0aGUgYHNoYXJlZFRpY2tlcmAgb3B0aW9uIHByb3BlcnR5IHNldCB0byB0cnVlLlxuICpcbiAqIFRoZSBwcm9wZXJ0eSB7QGxpbmsgUElYSS5UaWNrZXIjYXV0b1N0YXJ0fSBpcyBzZXQgdG8gYHRydWVgIGZvciB0aGlzIGluc3RhbmNlLlxuICogUGxlYXNlIGZvbGxvdyB0aGUgZXhhbXBsZXMgZm9yIHVzYWdlLCBpbmNsdWRpbmcgaG93IHRvIG9wdC1vdXQgb2YgYXV0by1zdGFydGluZyB0aGUgc2hhcmVkIHRpY2tlci5cbiAqXG4gKiBAZXhhbXBsZVxuICogbGV0IHRpY2tlciA9IFBJWEkuVGlja2VyLnNoYXJlZDtcbiAqIC8vIFNldCB0aGlzIHRvIHByZXZlbnQgc3RhcnRpbmcgdGhpcyB0aWNrZXIgd2hlbiBsaXN0ZW5lcnMgYXJlIGFkZGVkLlxuICogLy8gQnkgZGVmYXVsdCB0aGlzIGlzIHRydWUgb25seSBmb3IgdGhlIFBJWEkuVGlja2VyLnNoYXJlZCBpbnN0YW5jZS5cbiAqIHRpY2tlci5hdXRvU3RhcnQgPSBmYWxzZTtcbiAqIC8vIEZZSSwgY2FsbCB0aGlzIHRvIGVuc3VyZSB0aGUgdGlja2VyIGlzIHN0b3BwZWQuIEl0IHNob3VsZCBiZSBzdG9wcGVkXG4gKiAvLyBpZiB5b3UgaGF2ZSBub3QgYXR0ZW1wdGVkIHRvIHJlbmRlciBhbnl0aGluZyB5ZXQuXG4gKiB0aWNrZXIuc3RvcCgpO1xuICogLy8gQ2FsbCB0aGlzIHdoZW4geW91IGFyZSByZWFkeSBmb3IgYSBydW5uaW5nIHNoYXJlZCB0aWNrZXIuXG4gKiB0aWNrZXIuc3RhcnQoKTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gWW91IG1heSB1c2UgdGhlIHNoYXJlZCB0aWNrZXIgdG8gcmVuZGVyLi4uXG4gKiBsZXQgcmVuZGVyZXIgPSBQSVhJLmF1dG9EZXRlY3RSZW5kZXJlcigpO1xuICogbGV0IHN0YWdlID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XG4gKiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbmRlcmVyLnZpZXcpO1xuICogdGlja2VyLmFkZChmdW5jdGlvbiAodGltZSkge1xuICogcmVuZGVyZXIucmVuZGVyKHN0YWdlKTtcbiAqIH0pO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBPciB5b3UgY2FuIGp1c3QgdXBkYXRlIGl0IG1hbnVhbGx5LlxuICogdGlja2VyLmF1dG9TdGFydCA9IGZhbHNlO1xuICogdGlja2VyLnN0b3AoKTtcbiAqIGZ1bmN0aW9uIGFuaW1hdGUodGltZSkge1xuICogdGlja2VyLnVwZGF0ZSh0aW1lKTtcbiAqIHJlbmRlcmVyLnJlbmRlcihzdGFnZSk7XG4gKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gKiB9XG4gKiBhbmltYXRlKHBlcmZvcm1hbmNlLm5vdygpKTtcbiAqXG4gKiBAbWVtYmVyIHtQSVhJLlRpY2tlcn1cbiAqIEBzdGF0aWNcbiAqL1xuc3RhdGljQWNjZXNzb3JzLnNoYXJlZC5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIGlmICghVGlja2VyLl9zaGFyZWQpXG4gICAge1xuICAgICAgICB2YXIgc2hhcmVkID0gVGlja2VyLl9zaGFyZWQgPSBuZXcgVGlja2VyKCk7XG5cbiAgICAgICAgc2hhcmVkLmF1dG9TdGFydCA9IHRydWU7XG4gICAgICAgIHNoYXJlZC5fcHJvdGVjdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gVGlja2VyLl9zaGFyZWQ7XG59O1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdGlja2VyIGluc3RhbmNlIHVzZWQgYnkge0BsaW5rIFBJWEkuaW50ZXJhY3Rpb24uSW50ZXJhY3Rpb25NYW5hZ2VyfSBhbmQgYnlcbiAqIHtAbGluayBQSVhJLkJhc2VQcmVwYXJlfSBmb3IgY29yZSB0aW1pbmcgZnVuY3Rpb25hbGl0eSB0aGF0IHNob3VsZG4ndCB1c3VhbGx5IG5lZWQgdG8gYmUgcGF1c2VkLFxuICogdW5saWtlIHRoZSBgc2hhcmVkYCB0aWNrZXIgd2hpY2ggZHJpdmVzIHZpc3VhbCBhbmltYXRpb25zIGFuZCByZW5kZXJpbmcgd2hpY2ggbWF5IHdhbnQgdG8gYmUgcGF1c2VkLlxuICpcbiAqIFRoZSBwcm9wZXJ0eSB7QGxpbmsgUElYSS5UaWNrZXIjYXV0b1N0YXJ0fSBpcyBzZXQgdG8gYHRydWVgIGZvciB0aGlzIGluc3RhbmNlLlxuICpcbiAqIEBtZW1iZXIge1BJWEkuVGlja2VyfVxuICogQHN0YXRpY1xuICovXG5zdGF0aWNBY2Nlc3NvcnMuc3lzdGVtLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgaWYgKCFUaWNrZXIuX3N5c3RlbSlcbiAgICB7XG4gICAgICAgIHZhciBzeXN0ZW0gPSBUaWNrZXIuX3N5c3RlbSA9IG5ldyBUaWNrZXIoKTtcblxuICAgICAgICBzeXN0ZW0uYXV0b1N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgc3lzdGVtLl9wcm90ZWN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBUaWNrZXIuX3N5c3RlbTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBUaWNrZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBUaWNrZXIsIHN0YXRpY0FjY2Vzc29ycyApO1xuXG4vKipcbiAqIE1pZGRsZXdhcmUgZm9yIGZvciBBcHBsaWNhdGlvbiBUaWNrZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7VGlja2VyUGx1Z2lufSBmcm9tICdAcGl4aS90aWNrZXInO1xuICogaW1wb3J0IHtBcHBsaWNhdGlvbn0gZnJvbSAnQHBpeGkvYXBwJztcbiAqIEFwcGxpY2F0aW9uLnJlZ2lzdGVyUGx1Z2luKFRpY2tlclBsdWdpbik7XG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgVGlja2VyUGx1Z2luID0gZnVuY3Rpb24gVGlja2VyUGx1Z2luICgpIHt9O1xuXG5UaWNrZXJQbHVnaW4uaW5pdCA9IGZ1bmN0aW9uIGluaXQgKG9wdGlvbnMpXG57XG4gICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgLy8gU2V0IGRlZmF1bHRcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIGF1dG9TdGFydDogdHJ1ZSxcbiAgICAgICAgc2hhcmVkVGlja2VyOiBmYWxzZSxcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIC8vIENyZWF0ZSB0aWNrZXIgc2V0dGVyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0aWNrZXInLFxuICAgICAgICB7XG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0aWNrZXIpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RpY2tlcilcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpY2tlci5yZW1vdmUodGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl90aWNrZXIgPSB0aWNrZXI7XG4gICAgICAgICAgICAgICAgaWYgKHRpY2tlcilcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2tlci5hZGQodGhpcy5yZW5kZXIsIHRoaXMsIFVQREFURV9QUklPUklUWS5MT1cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpY2tlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBzdG9wcGluZyB0aGUgcmVuZGVyLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBQSVhJLkFwcGxpY2F0aW9uI3N0b3BcbiAgICAgKi9cbiAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMkMS5fdGlja2VyLnN0b3AoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBzdGFydGluZyB0aGUgcmVuZGVyLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBQSVhJLkFwcGxpY2F0aW9uI3N0YXJ0XG4gICAgICovXG4gICAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcyQxLl90aWNrZXIuc3RhcnQoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgcmVmZXJlbmNlIHRvIHRoZSB0aWNrZXIuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7UElYSS5UaWNrZXJ9XG4gICAgICogQG5hbWUgX3RpY2tlclxuICAgICAqIEBtZW1iZXJvZiBQSVhJLkFwcGxpY2F0aW9uI1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdGlja2VyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRpY2tlciBmb3IgZG9pbmcgcmVuZGVyIHVwZGF0ZXMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7UElYSS5UaWNrZXJ9XG4gICAgICogQG5hbWUgdGlja2VyXG4gICAgICogQG1lbWJlcm9mIFBJWEkuQXBwbGljYXRpb24jXG4gICAgICogQGRlZmF1bHQgUElYSS5UaWNrZXIuc2hhcmVkXG4gICAgICovXG4gICAgdGhpcy50aWNrZXIgPSBvcHRpb25zLnNoYXJlZFRpY2tlciA/IFRpY2tlci5zaGFyZWQgOiBuZXcgVGlja2VyKCk7XG5cbiAgICAvLyBTdGFydCB0aGUgcmVuZGVyaW5nXG4gICAgaWYgKG9wdGlvbnMuYXV0b1N0YXJ0KVxuICAgIHtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgdGhlIHRpY2tlciwgc2NvcGVkIHRvIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBwcml2YXRlXG4gKi9cblRpY2tlclBsdWdpbi5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIGlmICh0aGlzLl90aWNrZXIpXG4gICAge1xuICAgICAgICB2YXIgb2xkVGlja2VyID0gdGhpcy5fdGlja2VyO1xuXG4gICAgICAgIHRoaXMudGlja2VyID0gbnVsbDtcbiAgICAgICAgb2xkVGlja2VyLmRlc3Ryb3koKTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBUaWNrZXIsIFRpY2tlclBsdWdpbiwgVVBEQVRFX1BSSU9SSVRZIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aWNrZXIuZXMuanMubWFwXG4iLCIvKiFcbiAqIEBwaXhpL21hdGggLSB2NS4xLjBcbiAqIENvbXBpbGVkIEZyaSwgMTkgSnVsIDIwMTkgMjE6NTQ6MzYgVVRDXG4gKlxuICogQHBpeGkvbWF0aCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbi8qKlxuICogVGhlIFBvaW50IG9iamVjdCByZXByZXNlbnRzIGEgbG9jYXRpb24gaW4gYSB0d28tZGltZW5zaW9uYWwgY29vcmRpbmF0ZSBzeXN0ZW0sIHdoZXJlIHggcmVwcmVzZW50c1xuICogdGhlIGhvcml6b250YWwgYXhpcyBhbmQgeSByZXByZXNlbnRzIHRoZSB2ZXJ0aWNhbCBheGlzLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFBvaW50ID0gZnVuY3Rpb24gUG9pbnQoeCwgeSlcbntcbiAgICBpZiAoIHggPT09IHZvaWQgMCApIHggPSAwO1xuICAgIGlmICggeSA9PT0gdm9pZCAwICkgeSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMueCA9IHg7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMueSA9IHk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIHBvaW50XG4gKlxuICogQHJldHVybiB7UElYSS5Qb2ludH0gYSBjb3B5IG9mIHRoZSBwb2ludFxuICovXG5Qb2ludC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKVxue1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54LCB0aGlzLnkpO1xufTtcblxuLyoqXG4gKiBDb3BpZXMgeCBhbmQgeSBmcm9tIHRoZSBnaXZlbiBwb2ludFxuICpcbiAqIEBwYXJhbSB7UElYSS5JUG9pbnR9IHAgLSBUaGUgcG9pbnQgdG8gY29weSBmcm9tXG4gKiBAcmV0dXJucyB7UElYSS5JUG9pbnR9IFJldHVybnMgaXRzZWxmLlxuICovXG5Qb2ludC5wcm90b3R5cGUuY29weUZyb20gPSBmdW5jdGlvbiBjb3B5RnJvbSAocClcbntcbiAgICB0aGlzLnNldChwLngsIHAueSk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ29waWVzIHggYW5kIHkgaW50byB0aGUgZ2l2ZW4gcG9pbnRcbiAqXG4gKiBAcGFyYW0ge1BJWEkuSVBvaW50fSBwIC0gVGhlIHBvaW50IHRvIGNvcHkuXG4gKiBAcmV0dXJucyB7UElYSS5JUG9pbnR9IEdpdmVuIHBvaW50IHdpdGggdmFsdWVzIHVwZGF0ZWRcbiAqL1xuUG9pbnQucHJvdG90eXBlLmNvcHlUbyA9IGZ1bmN0aW9uIGNvcHlUbyAocClcbntcbiAgICBwLnNldCh0aGlzLngsIHRoaXMueSk7XG5cbiAgICByZXR1cm4gcDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBwb2ludCBpcyBlcXVhbCB0byB0aGlzIHBvaW50XG4gKlxuICogQHBhcmFtIHtQSVhJLklQb2ludH0gcCAtIFRoZSBwb2ludCB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIHBvaW50IGVxdWFsIHRvIHRoaXMgcG9pbnRcbiAqL1xuUG9pbnQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAocClcbntcbiAgICByZXR1cm4gKHAueCA9PT0gdGhpcy54KSAmJiAocC55ID09PSB0aGlzLnkpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBwb2ludCB0byBhIG5ldyB4IGFuZCB5IHBvc2l0aW9uLlxuICogSWYgeSBpcyBvbWl0dGVkLCBib3RoIHggYW5kIHkgd2lsbCBiZSBzZXQgdG8geC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBwb3NpdGlvbiBvZiB0aGUgcG9pbnQgb24gdGhlIHggYXhpc1xuICogQHBhcmFtIHtudW1iZXJ9IFt5PTBdIC0gcG9zaXRpb24gb2YgdGhlIHBvaW50IG9uIHRoZSB5IGF4aXNcbiAqL1xuUG9pbnQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIHNldCAoeCwgeSlcbntcbiAgICB0aGlzLnggPSB4IHx8IDA7XG4gICAgdGhpcy55ID0geSB8fCAoKHkgIT09IDApID8gdGhpcy54IDogMCk7XG59O1xuXG4vKipcbiAqIFRoZSBQb2ludCBvYmplY3QgcmVwcmVzZW50cyBhIGxvY2F0aW9uIGluIGEgdHdvLWRpbWVuc2lvbmFsIGNvb3JkaW5hdGUgc3lzdGVtLCB3aGVyZSB4IHJlcHJlc2VudHNcbiAqIHRoZSBob3Jpem9udGFsIGF4aXMgYW5kIHkgcmVwcmVzZW50cyB0aGUgdmVydGljYWwgYXhpcy5cbiAqXG4gKiBBbiBPYnNlcnZhYmxlUG9pbnQgaXMgYSBwb2ludCB0aGF0IHRyaWdnZXJzIGEgY2FsbGJhY2sgd2hlbiB0aGUgcG9pbnQncyBwb3NpdGlvbiBpcyBjaGFuZ2VkLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIE9ic2VydmFibGVQb2ludCA9IGZ1bmN0aW9uIE9ic2VydmFibGVQb2ludChjYiwgc2NvcGUsIHgsIHkpXG57XG4gICAgaWYgKCB4ID09PSB2b2lkIDAgKSB4ID0gMDtcbiAgICBpZiAoIHkgPT09IHZvaWQgMCApIHkgPSAwO1xuXG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG5cbiAgICB0aGlzLmNiID0gY2I7XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgeDogeyBjb25maWd1cmFibGU6IHRydWUgfSx5OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgcG9pbnQuXG4gKiBUaGUgY2FsbGJhY2sgYW5kIHNjb3BlIHBhcmFtcyBjYW4gYmUgb3ZlcmlkZGVuIG90aGVyd2lzZSB0aGV5IHdpbGwgZGVmYXVsdFxuICogdG8gdGhlIGNsb25lIG9iamVjdCdzIHZhbHVlcy5cbiAqXG4gKiBAb3ZlcnJpZGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYj1udWxsXSAtIGNhbGxiYWNrIHdoZW4gY2hhbmdlZFxuICogQHBhcmFtIHtvYmplY3R9IFtzY29wZT1udWxsXSAtIG93bmVyIG9mIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtQSVhJLk9ic2VydmFibGVQb2ludH0gYSBjb3B5IG9mIHRoZSBwb2ludFxuICovXG5PYnNlcnZhYmxlUG9pbnQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKGNiLCBzY29wZSlcbntcbiAgICAgICAgaWYgKCBjYiA9PT0gdm9pZCAwICkgY2IgPSBudWxsO1xuICAgICAgICBpZiAoIHNjb3BlID09PSB2b2lkIDAgKSBzY29wZSA9IG51bGw7XG5cbiAgICB2YXIgX2NiID0gY2IgfHwgdGhpcy5jYjtcbiAgICB2YXIgX3Njb3BlID0gc2NvcGUgfHwgdGhpcy5zY29wZTtcblxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZVBvaW50KF9jYiwgX3Njb3BlLCB0aGlzLl94LCB0aGlzLl95KTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgcG9pbnQgdG8gYSBuZXcgeCBhbmQgeSBwb3NpdGlvbi5cbiAqIElmIHkgaXMgb21pdHRlZCwgYm90aCB4IGFuZCB5IHdpbGwgYmUgc2V0IHRvIHguXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gcG9zaXRpb24gb2YgdGhlIHBvaW50IG9uIHRoZSB4IGF4aXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIHBvc2l0aW9uIG9mIHRoZSBwb2ludCBvbiB0aGUgeSBheGlzXG4gKi9cbk9ic2VydmFibGVQb2ludC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0ICh4LCB5KVxue1xuICAgIHZhciBfeCA9IHggfHwgMDtcbiAgICB2YXIgX3kgPSB5IHx8ICgoeSAhPT0gMCkgPyBfeCA6IDApO1xuXG4gICAgaWYgKHRoaXMuX3ggIT09IF94IHx8IHRoaXMuX3kgIT09IF95KVxuICAgIHtcbiAgICAgICAgdGhpcy5feCA9IF94O1xuICAgICAgICB0aGlzLl95ID0gX3k7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnNjb3BlKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENvcGllcyB4IGFuZCB5IGZyb20gdGhlIGdpdmVuIHBvaW50XG4gKlxuICogQHBhcmFtIHtQSVhJLklQb2ludH0gcCAtIFRoZSBwb2ludCB0byBjb3B5IGZyb20uXG4gKiBAcmV0dXJucyB7UElYSS5JUG9pbnR9IFJldHVybnMgaXRzZWxmLlxuICovXG5PYnNlcnZhYmxlUG9pbnQucHJvdG90eXBlLmNvcHlGcm9tID0gZnVuY3Rpb24gY29weUZyb20gKHApXG57XG4gICAgaWYgKHRoaXMuX3ggIT09IHAueCB8fCB0aGlzLl95ICE9PSBwLnkpXG4gICAge1xuICAgICAgICB0aGlzLl94ID0gcC54O1xuICAgICAgICB0aGlzLl95ID0gcC55O1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy5zY29wZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENvcGllcyB4IGFuZCB5IGludG8gdGhlIGdpdmVuIHBvaW50XG4gKlxuICogQHBhcmFtIHtQSVhJLklQb2ludH0gcCAtIFRoZSBwb2ludCB0byBjb3B5LlxuICogQHJldHVybnMge1BJWEkuSVBvaW50fSBHaXZlbiBwb2ludCB3aXRoIHZhbHVlcyB1cGRhdGVkXG4gKi9cbk9ic2VydmFibGVQb2ludC5wcm90b3R5cGUuY29weVRvID0gZnVuY3Rpb24gY29weVRvIChwKVxue1xuICAgIHAuc2V0KHRoaXMuX3gsIHRoaXMuX3kpO1xuXG4gICAgcmV0dXJuIHA7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gcG9pbnQgaXMgZXF1YWwgdG8gdGhpcyBwb2ludFxuICpcbiAqIEBwYXJhbSB7UElYSS5JUG9pbnR9IHAgLSBUaGUgcG9pbnQgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBwb2ludCBlcXVhbCB0byB0aGlzIHBvaW50XG4gKi9cbk9ic2VydmFibGVQb2ludC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChwKVxue1xuICAgIHJldHVybiAocC54ID09PSB0aGlzLl94KSAmJiAocC55ID09PSB0aGlzLl95KTtcbn07XG5cbi8qKlxuICogVGhlIHBvc2l0aW9uIG9mIHRoZSBkaXNwbGF5T2JqZWN0IG9uIHRoZSB4IGF4aXMgcmVsYXRpdmUgdG8gdGhlIGxvY2FsIGNvb3JkaW5hdGVzIG9mIHRoZSBwYXJlbnQuXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMueC5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiB0aGlzLl94O1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLnguc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICBpZiAodGhpcy5feCAhPT0gdmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLl94ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnNjb3BlKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgZGlzcGxheU9iamVjdCBvbiB0aGUgeCBheGlzIHJlbGF0aXZlIHRvIHRoZSBsb2NhbCBjb29yZGluYXRlcyBvZiB0aGUgcGFyZW50LlxuICpcbiAqIEBtZW1iZXIge251bWJlcn1cbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzLnkuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy5feTtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy55LnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG57XG4gICAgaWYgKHRoaXMuX3kgIT09IHZhbHVlKVxuICAgIHtcbiAgICAgICAgdGhpcy5feSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy5zY29wZSk7XG4gICAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE9ic2VydmFibGVQb2ludC5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4vKipcbiAqIEEgbnVtYmVyLCBvciBhIHN0cmluZyBjb250YWluaW5nIGEgbnVtYmVyLlxuICogQG1lbWJlcm9mIFBJWElcbiAqIEB0eXBlZGVmIHsoUElYSS5Qb2ludHxQSVhJLk9ic2VydmFibGVQb2ludCl9IElQb2ludFxuICovXG5cbi8qKlxuICogVHdvIFBpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudCB7bnVtYmVyfSBQSV8yXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgUElfMiA9IE1hdGguUEkgKiAyO1xuXG4vKipcbiAqIENvbnZlcnNpb24gZmFjdG9yIGZvciBjb252ZXJ0aW5nIHJhZGlhbnMgdG8gZGVncmVlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RhbnQge251bWJlcn0gUkFEX1RPX0RFR1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFJBRF9UT19ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4vKipcbiAqIENvbnZlcnNpb24gZmFjdG9yIGZvciBjb252ZXJ0aW5nIGRlZ3JlZXMgdG8gcmFkaWFucy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RhbnQge251bWJlcn0gREVHX1RPX1JBRFxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIERFR19UT19SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4vKipcbiAqIENvbnN0YW50cyB0aGF0IGlkZW50aWZ5IHNoYXBlcywgbWFpbmx5IHRvIHByZXZlbnQgYGluc3RhbmNlb2ZgIGNhbGxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudFxuICogQG5hbWUgU0hBUEVTXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHR5cGUge29iamVjdH1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBQT0xZIFBvbHlnb25cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBSRUNUIFJlY3RhbmdsZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IENJUkMgQ2lyY2xlXG4gKiBAcHJvcGVydHkge251bWJlcn0gRUxJUCBFbGxpcHNlXG4gKiBAcHJvcGVydHkge251bWJlcn0gUlJFQyBSb3VuZGVkIFJlY3RhbmdsZVxuICovXG52YXIgU0hBUEVTID0ge1xuICAgIFBPTFk6IDAsXG4gICAgUkVDVDogMSxcbiAgICBDSVJDOiAyLFxuICAgIEVMSVA6IDMsXG4gICAgUlJFQzogNCxcbn07XG5cbi8qKlxuICogVGhlIFBpeGlKUyBNYXRyaXggYXMgYSBjbGFzcyBtYWtlcyBpdCBhIGxvdCBmYXN0ZXIuXG4gKlxuICogSGVyZSBpcyBhIHJlcHJlc2VudGF0aW9uIG9mIGl0OlxuICogYGBganNcbiAqIHwgYSB8IGMgfCB0eHxcbiAqIHwgYiB8IGQgfCB0eXxcbiAqIHwgMCB8IDAgfCAxIHxcbiAqIGBgYFxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgTWF0cml4ID0gZnVuY3Rpb24gTWF0cml4KGEsIGIsIGMsIGQsIHR4LCB0eSlcbntcbiAgICBpZiAoIGEgPT09IHZvaWQgMCApIGEgPSAxO1xuICAgIGlmICggYiA9PT0gdm9pZCAwICkgYiA9IDA7XG4gICAgaWYgKCBjID09PSB2b2lkIDAgKSBjID0gMDtcbiAgICBpZiAoIGQgPT09IHZvaWQgMCApIGQgPSAxO1xuICAgIGlmICggdHggPT09IHZvaWQgMCApIHR4ID0gMDtcbiAgICBpZiAoIHR5ID09PSB2b2lkIDAgKSB0eSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIHRoaXMuYSA9IGE7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMuYiA9IGI7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMuYyA9IGM7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIHRoaXMuZCA9IGQ7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMudHggPSB0eDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy50eSA9IHR5O1xuXG4gICAgdGhpcy5hcnJheSA9IG51bGw7XG59O1xuXG52YXIgc3RhdGljQWNjZXNzb3JzID0geyBJREVOVElUWTogeyBjb25maWd1cmFibGU6IHRydWUgfSxURU1QX01BVFJJWDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBNYXRyaXggb2JqZWN0IGJhc2VkIG9uIHRoZSBnaXZlbiBhcnJheS4gVGhlIEVsZW1lbnQgdG8gTWF0cml4IG1hcHBpbmcgb3JkZXIgaXMgYXMgZm9sbG93czpcbiAqXG4gKiBhID0gYXJyYXlbMF1cbiAqIGIgPSBhcnJheVsxXVxuICogYyA9IGFycmF5WzNdXG4gKiBkID0gYXJyYXlbNF1cbiAqIHR4ID0gYXJyYXlbMl1cbiAqIHR5ID0gYXJyYXlbNV1cbiAqXG4gKiBAcGFyYW0ge251bWJlcltdfSBhcnJheSAtIFRoZSBhcnJheSB0aGF0IHRoZSBtYXRyaXggd2lsbCBiZSBwb3B1bGF0ZWQgZnJvbS5cbiAqL1xuTWF0cml4LnByb3RvdHlwZS5mcm9tQXJyYXkgPSBmdW5jdGlvbiBmcm9tQXJyYXkgKGFycmF5KVxue1xuICAgIHRoaXMuYSA9IGFycmF5WzBdO1xuICAgIHRoaXMuYiA9IGFycmF5WzFdO1xuICAgIHRoaXMuYyA9IGFycmF5WzNdO1xuICAgIHRoaXMuZCA9IGFycmF5WzRdO1xuICAgIHRoaXMudHggPSBhcnJheVsyXTtcbiAgICB0aGlzLnR5ID0gYXJyYXlbNV07XG59O1xuXG4vKipcbiAqIHNldHMgdGhlIG1hdHJpeCBwcm9wZXJ0aWVzXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGEgLSBNYXRyaXggY29tcG9uZW50XG4gKiBAcGFyYW0ge251bWJlcn0gYiAtIE1hdHJpeCBjb21wb25lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjIC0gTWF0cml4IGNvbXBvbmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGQgLSBNYXRyaXggY29tcG9uZW50XG4gKiBAcGFyYW0ge251bWJlcn0gdHggLSBNYXRyaXggY29tcG9uZW50XG4gKiBAcGFyYW0ge251bWJlcn0gdHkgLSBNYXRyaXggY29tcG9uZW50XG4gKlxuICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gKi9cbk1hdHJpeC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0IChhLCBiLCBjLCBkLCB0eCwgdHkpXG57XG4gICAgdGhpcy5hID0gYTtcbiAgICB0aGlzLmIgPSBiO1xuICAgIHRoaXMuYyA9IGM7XG4gICAgdGhpcy5kID0gZDtcbiAgICB0aGlzLnR4ID0gdHg7XG4gICAgdGhpcy50eSA9IHR5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgZnJvbSB0aGUgY3VycmVudCBNYXRyaXggb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdHJhbnNwb3NlIC0gV2hldGhlciB3ZSBuZWVkIHRvIHRyYW5zcG9zZSB0aGUgbWF0cml4IG9yIG5vdFxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IFtvdXQ9bmV3IEZsb2F0MzJBcnJheSg5KV0gLSBJZiBwcm92aWRlZCB0aGUgYXJyYXkgd2lsbCBiZSBhc3NpZ25lZCB0byBvdXRcbiAqIEByZXR1cm4ge251bWJlcltdfSB0aGUgbmV3bHkgY3JlYXRlZCBhcnJheSB3aGljaCBjb250YWlucyB0aGUgbWF0cml4XG4gKi9cbk1hdHJpeC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKHRyYW5zcG9zZSwgb3V0KVxue1xuICAgIGlmICghdGhpcy5hcnJheSlcbiAgICB7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KDkpO1xuICAgIH1cblxuICAgIHZhciBhcnJheSA9IG91dCB8fCB0aGlzLmFycmF5O1xuXG4gICAgaWYgKHRyYW5zcG9zZSlcbiAgICB7XG4gICAgICAgIGFycmF5WzBdID0gdGhpcy5hO1xuICAgICAgICBhcnJheVsxXSA9IHRoaXMuYjtcbiAgICAgICAgYXJyYXlbMl0gPSAwO1xuICAgICAgICBhcnJheVszXSA9IHRoaXMuYztcbiAgICAgICAgYXJyYXlbNF0gPSB0aGlzLmQ7XG4gICAgICAgIGFycmF5WzVdID0gMDtcbiAgICAgICAgYXJyYXlbNl0gPSB0aGlzLnR4O1xuICAgICAgICBhcnJheVs3XSA9IHRoaXMudHk7XG4gICAgICAgIGFycmF5WzhdID0gMTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgYXJyYXlbMF0gPSB0aGlzLmE7XG4gICAgICAgIGFycmF5WzFdID0gdGhpcy5jO1xuICAgICAgICBhcnJheVsyXSA9IHRoaXMudHg7XG4gICAgICAgIGFycmF5WzNdID0gdGhpcy5iO1xuICAgICAgICBhcnJheVs0XSA9IHRoaXMuZDtcbiAgICAgICAgYXJyYXlbNV0gPSB0aGlzLnR5O1xuICAgICAgICBhcnJheVs2XSA9IDA7XG4gICAgICAgIGFycmF5WzddID0gMDtcbiAgICAgICAgYXJyYXlbOF0gPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn07XG5cbi8qKlxuICogR2V0IGEgbmV3IHBvc2l0aW9uIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNmb3JtYXRpb24gYXBwbGllZC5cbiAqIENhbiBiZSB1c2VkIHRvIGdvIGZyb20gYSBjaGlsZCdzIGNvb3JkaW5hdGUgc3BhY2UgdG8gdGhlIHdvcmxkIGNvb3JkaW5hdGUgc3BhY2UuIChlLmcuIHJlbmRlcmluZylcbiAqXG4gKiBAcGFyYW0ge1BJWEkuUG9pbnR9IHBvcyAtIFRoZSBvcmlnaW5cbiAqIEBwYXJhbSB7UElYSS5Qb2ludH0gW25ld1Bvc10gLSBUaGUgcG9pbnQgdGhhdCB0aGUgbmV3IHBvc2l0aW9uIGlzIGFzc2lnbmVkIHRvIChhbGxvd2VkIHRvIGJlIHNhbWUgYXMgaW5wdXQpXG4gKiBAcmV0dXJuIHtQSVhJLlBvaW50fSBUaGUgbmV3IHBvaW50LCB0cmFuc2Zvcm1lZCB0aHJvdWdoIHRoaXMgbWF0cml4XG4gKi9cbk1hdHJpeC5wcm90b3R5cGUuYXBwbHkgPSBmdW5jdGlvbiBhcHBseSAocG9zLCBuZXdQb3MpXG57XG4gICAgbmV3UG9zID0gbmV3UG9zIHx8IG5ldyBQb2ludCgpO1xuXG4gICAgdmFyIHggPSBwb3MueDtcbiAgICB2YXIgeSA9IHBvcy55O1xuXG4gICAgbmV3UG9zLnggPSAodGhpcy5hICogeCkgKyAodGhpcy5jICogeSkgKyB0aGlzLnR4O1xuICAgIG5ld1Bvcy55ID0gKHRoaXMuYiAqIHgpICsgKHRoaXMuZCAqIHkpICsgdGhpcy50eTtcblxuICAgIHJldHVybiBuZXdQb3M7XG59O1xuXG4vKipcbiAqIEdldCBhIG5ldyBwb3NpdGlvbiB3aXRoIHRoZSBpbnZlcnNlIG9mIHRoZSBjdXJyZW50IHRyYW5zZm9ybWF0aW9uIGFwcGxpZWQuXG4gKiBDYW4gYmUgdXNlZCB0byBnbyBmcm9tIHRoZSB3b3JsZCBjb29yZGluYXRlIHNwYWNlIHRvIGEgY2hpbGQncyBjb29yZGluYXRlIHNwYWNlLiAoZS5nLiBpbnB1dClcbiAqXG4gKiBAcGFyYW0ge1BJWEkuUG9pbnR9IHBvcyAtIFRoZSBvcmlnaW5cbiAqIEBwYXJhbSB7UElYSS5Qb2ludH0gW25ld1Bvc10gLSBUaGUgcG9pbnQgdGhhdCB0aGUgbmV3IHBvc2l0aW9uIGlzIGFzc2lnbmVkIHRvIChhbGxvd2VkIHRvIGJlIHNhbWUgYXMgaW5wdXQpXG4gKiBAcmV0dXJuIHtQSVhJLlBvaW50fSBUaGUgbmV3IHBvaW50LCBpbnZlcnNlLXRyYW5zZm9ybWVkIHRocm91Z2ggdGhpcyBtYXRyaXhcbiAqL1xuTWF0cml4LnByb3RvdHlwZS5hcHBseUludmVyc2UgPSBmdW5jdGlvbiBhcHBseUludmVyc2UgKHBvcywgbmV3UG9zKVxue1xuICAgIG5ld1BvcyA9IG5ld1BvcyB8fCBuZXcgUG9pbnQoKTtcblxuICAgIHZhciBpZCA9IDEgLyAoKHRoaXMuYSAqIHRoaXMuZCkgKyAodGhpcy5jICogLXRoaXMuYikpO1xuXG4gICAgdmFyIHggPSBwb3MueDtcbiAgICB2YXIgeSA9IHBvcy55O1xuXG4gICAgbmV3UG9zLnggPSAodGhpcy5kICogaWQgKiB4KSArICgtdGhpcy5jICogaWQgKiB5KSArICgoKHRoaXMudHkgKiB0aGlzLmMpIC0gKHRoaXMudHggKiB0aGlzLmQpKSAqIGlkKTtcbiAgICBuZXdQb3MueSA9ICh0aGlzLmEgKiBpZCAqIHkpICsgKC10aGlzLmIgKiBpZCAqIHgpICsgKCgoLXRoaXMudHkgKiB0aGlzLmEpICsgKHRoaXMudHggKiB0aGlzLmIpKSAqIGlkKTtcblxuICAgIHJldHVybiBuZXdQb3M7XG59O1xuXG4vKipcbiAqIFRyYW5zbGF0ZXMgdGhlIG1hdHJpeCBvbiB0aGUgeCBhbmQgeS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geCBIb3cgbXVjaCB0byB0cmFuc2xhdGUgeCBieVxuICogQHBhcmFtIHtudW1iZXJ9IHkgSG93IG11Y2ggdG8gdHJhbnNsYXRlIHkgYnlcbiAqIEByZXR1cm4ge1BJWEkuTWF0cml4fSBUaGlzIG1hdHJpeC4gR29vZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICovXG5NYXRyaXgucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uIHRyYW5zbGF0ZSAoeCwgeSlcbntcbiAgICB0aGlzLnR4ICs9IHg7XG4gICAgdGhpcy50eSArPSB5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFwcGxpZXMgYSBzY2FsZSB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgbWF0cml4LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSBhbW91bnQgdG8gc2NhbGUgaG9yaXpvbnRhbGx5XG4gKiBAcGFyYW0ge251bWJlcn0geSBUaGUgYW1vdW50IHRvIHNjYWxlIHZlcnRpY2FsbHlcbiAqIEByZXR1cm4ge1BJWEkuTWF0cml4fSBUaGlzIG1hdHJpeC4gR29vZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICovXG5NYXRyaXgucHJvdG90eXBlLnNjYWxlID0gZnVuY3Rpb24gc2NhbGUgKHgsIHkpXG57XG4gICAgdGhpcy5hICo9IHg7XG4gICAgdGhpcy5kICo9IHk7XG4gICAgdGhpcy5jICo9IHg7XG4gICAgdGhpcy5iICo9IHk7XG4gICAgdGhpcy50eCAqPSB4O1xuICAgIHRoaXMudHkgKj0geTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBcHBsaWVzIGEgcm90YXRpb24gdHJhbnNmb3JtYXRpb24gdG8gdGhlIG1hdHJpeC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBUaGUgYW5nbGUgaW4gcmFkaWFucy5cbiAqIEByZXR1cm4ge1BJWEkuTWF0cml4fSBUaGlzIG1hdHJpeC4gR29vZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICovXG5NYXRyaXgucHJvdG90eXBlLnJvdGF0ZSA9IGZ1bmN0aW9uIHJvdGF0ZSAoYW5nbGUpXG57XG4gICAgdmFyIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICB2YXIgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuXG4gICAgdmFyIGExID0gdGhpcy5hO1xuICAgIHZhciBjMSA9IHRoaXMuYztcbiAgICB2YXIgdHgxID0gdGhpcy50eDtcblxuICAgIHRoaXMuYSA9IChhMSAqIGNvcykgLSAodGhpcy5iICogc2luKTtcbiAgICB0aGlzLmIgPSAoYTEgKiBzaW4pICsgKHRoaXMuYiAqIGNvcyk7XG4gICAgdGhpcy5jID0gKGMxICogY29zKSAtICh0aGlzLmQgKiBzaW4pO1xuICAgIHRoaXMuZCA9IChjMSAqIHNpbikgKyAodGhpcy5kICogY29zKTtcbiAgICB0aGlzLnR4ID0gKHR4MSAqIGNvcykgLSAodGhpcy50eSAqIHNpbik7XG4gICAgdGhpcy50eSA9ICh0eDEgKiBzaW4pICsgKHRoaXMudHkgKiBjb3MpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFwcGVuZHMgdGhlIGdpdmVuIE1hdHJpeCB0byB0aGlzIE1hdHJpeC5cbiAqXG4gKiBAcGFyYW0ge1BJWEkuTWF0cml4fSBtYXRyaXggLSBUaGUgbWF0cml4IHRvIGFwcGVuZC5cbiAqIEByZXR1cm4ge1BJWEkuTWF0cml4fSBUaGlzIG1hdHJpeC4gR29vZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICovXG5NYXRyaXgucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZCAobWF0cml4KVxue1xuICAgIHZhciBhMSA9IHRoaXMuYTtcbiAgICB2YXIgYjEgPSB0aGlzLmI7XG4gICAgdmFyIGMxID0gdGhpcy5jO1xuICAgIHZhciBkMSA9IHRoaXMuZDtcblxuICAgIHRoaXMuYSA9IChtYXRyaXguYSAqIGExKSArIChtYXRyaXguYiAqIGMxKTtcbiAgICB0aGlzLmIgPSAobWF0cml4LmEgKiBiMSkgKyAobWF0cml4LmIgKiBkMSk7XG4gICAgdGhpcy5jID0gKG1hdHJpeC5jICogYTEpICsgKG1hdHJpeC5kICogYzEpO1xuICAgIHRoaXMuZCA9IChtYXRyaXguYyAqIGIxKSArIChtYXRyaXguZCAqIGQxKTtcblxuICAgIHRoaXMudHggPSAobWF0cml4LnR4ICogYTEpICsgKG1hdHJpeC50eSAqIGMxKSArIHRoaXMudHg7XG4gICAgdGhpcy50eSA9IChtYXRyaXgudHggKiBiMSkgKyAobWF0cml4LnR5ICogZDEpICsgdGhpcy50eTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXRyaXggYmFzZWQgb24gYWxsIHRoZSBhdmFpbGFibGUgcHJvcGVydGllc1xuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gUG9zaXRpb24gb24gdGhlIHggYXhpc1xuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBQb3NpdGlvbiBvbiB0aGUgeSBheGlzXG4gKiBAcGFyYW0ge251bWJlcn0gcGl2b3RYIC0gUGl2b3Qgb24gdGhlIHggYXhpc1xuICogQHBhcmFtIHtudW1iZXJ9IHBpdm90WSAtIFBpdm90IG9uIHRoZSB5IGF4aXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVggLSBTY2FsZSBvbiB0aGUgeCBheGlzXG4gKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZIC0gU2NhbGUgb24gdGhlIHkgYXhpc1xuICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uIC0gUm90YXRpb24gaW4gcmFkaWFuc1xuICogQHBhcmFtIHtudW1iZXJ9IHNrZXdYIC0gU2tldyBvbiB0aGUgeCBheGlzXG4gKiBAcGFyYW0ge251bWJlcn0gc2tld1kgLSBTa2V3IG9uIHRoZSB5IGF4aXNcbiAqIEByZXR1cm4ge1BJWEkuTWF0cml4fSBUaGlzIG1hdHJpeC4gR29vZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICovXG5NYXRyaXgucHJvdG90eXBlLnNldFRyYW5zZm9ybSA9IGZ1bmN0aW9uIHNldFRyYW5zZm9ybSAoeCwgeSwgcGl2b3RYLCBwaXZvdFksIHNjYWxlWCwgc2NhbGVZLCByb3RhdGlvbiwgc2tld1gsIHNrZXdZKVxue1xuICAgIHRoaXMuYSA9IE1hdGguY29zKHJvdGF0aW9uICsgc2tld1kpICogc2NhbGVYO1xuICAgIHRoaXMuYiA9IE1hdGguc2luKHJvdGF0aW9uICsgc2tld1kpICogc2NhbGVYO1xuICAgIHRoaXMuYyA9IC1NYXRoLnNpbihyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcbiAgICB0aGlzLmQgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgIHRoaXMudHggPSB4IC0gKChwaXZvdFggKiB0aGlzLmEpICsgKHBpdm90WSAqIHRoaXMuYykpO1xuICAgIHRoaXMudHkgPSB5IC0gKChwaXZvdFggKiB0aGlzLmIpICsgKHBpdm90WSAqIHRoaXMuZCkpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFByZXBlbmRzIHRoZSBnaXZlbiBNYXRyaXggdG8gdGhpcyBNYXRyaXguXG4gKlxuICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gbWF0cml4IC0gVGhlIG1hdHJpeCB0byBwcmVwZW5kXG4gKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhpcyBtYXRyaXguIEdvb2QgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAqL1xuTWF0cml4LnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gcHJlcGVuZCAobWF0cml4KVxue1xuICAgIHZhciB0eDEgPSB0aGlzLnR4O1xuXG4gICAgaWYgKG1hdHJpeC5hICE9PSAxIHx8IG1hdHJpeC5iICE9PSAwIHx8IG1hdHJpeC5jICE9PSAwIHx8IG1hdHJpeC5kICE9PSAxKVxuICAgIHtcbiAgICAgICAgdmFyIGExID0gdGhpcy5hO1xuICAgICAgICB2YXIgYzEgPSB0aGlzLmM7XG5cbiAgICAgICAgdGhpcy5hID0gKGExICogbWF0cml4LmEpICsgKHRoaXMuYiAqIG1hdHJpeC5jKTtcbiAgICAgICAgdGhpcy5iID0gKGExICogbWF0cml4LmIpICsgKHRoaXMuYiAqIG1hdHJpeC5kKTtcbiAgICAgICAgdGhpcy5jID0gKGMxICogbWF0cml4LmEpICsgKHRoaXMuZCAqIG1hdHJpeC5jKTtcbiAgICAgICAgdGhpcy5kID0gKGMxICogbWF0cml4LmIpICsgKHRoaXMuZCAqIG1hdHJpeC5kKTtcbiAgICB9XG5cbiAgICB0aGlzLnR4ID0gKHR4MSAqIG1hdHJpeC5hKSArICh0aGlzLnR5ICogbWF0cml4LmMpICsgbWF0cml4LnR4O1xuICAgIHRoaXMudHkgPSAodHgxICogbWF0cml4LmIpICsgKHRoaXMudHkgKiBtYXRyaXguZCkgKyBtYXRyaXgudHk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRGVjb21wb3NlcyB0aGUgbWF0cml4ICh4LCB5LCBzY2FsZVgsIHNjYWxlWSwgYW5kIHJvdGF0aW9uKSBhbmQgc2V0cyB0aGUgcHJvcGVydGllcyBvbiB0byBhIHRyYW5zZm9ybS5cbiAqXG4gKiBAcGFyYW0ge1BJWEkuVHJhbnNmb3JtfSB0cmFuc2Zvcm0gLSBUaGUgdHJhbnNmb3JtIHRvIGFwcGx5IHRoZSBwcm9wZXJ0aWVzIHRvLlxuICogQHJldHVybiB7UElYSS5UcmFuc2Zvcm19IFRoZSB0cmFuc2Zvcm0gd2l0aCB0aGUgbmV3bHkgYXBwbGllZCBwcm9wZXJ0aWVzXG4gKi9cbk1hdHJpeC5wcm90b3R5cGUuZGVjb21wb3NlID0gZnVuY3Rpb24gZGVjb21wb3NlICh0cmFuc2Zvcm0pXG57XG4gICAgLy8gc29ydCBvdXQgcm90YXRpb24gLyBza2V3Li5cbiAgICB2YXIgYSA9IHRoaXMuYTtcbiAgICB2YXIgYiA9IHRoaXMuYjtcbiAgICB2YXIgYyA9IHRoaXMuYztcbiAgICB2YXIgZCA9IHRoaXMuZDtcblxuICAgIHZhciBza2V3WCA9IC1NYXRoLmF0YW4yKC1jLCBkKTtcbiAgICB2YXIgc2tld1kgPSBNYXRoLmF0YW4yKGIsIGEpO1xuXG4gICAgdmFyIGRlbHRhID0gTWF0aC5hYnMoc2tld1ggKyBza2V3WSk7XG5cbiAgICBpZiAoZGVsdGEgPCAwLjAwMDAxIHx8IE1hdGguYWJzKFBJXzIgLSBkZWx0YSkgPCAwLjAwMDAxKVxuICAgIHtcbiAgICAgICAgdHJhbnNmb3JtLnJvdGF0aW9uID0gc2tld1k7XG4gICAgICAgIHRyYW5zZm9ybS5za2V3LnggPSB0cmFuc2Zvcm0uc2tldy55ID0gMDtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgdHJhbnNmb3JtLnJvdGF0aW9uID0gMDtcbiAgICAgICAgdHJhbnNmb3JtLnNrZXcueCA9IHNrZXdYO1xuICAgICAgICB0cmFuc2Zvcm0uc2tldy55ID0gc2tld1k7XG4gICAgfVxuXG4gICAgLy8gbmV4dCBzZXQgc2NhbGVcbiAgICB0cmFuc2Zvcm0uc2NhbGUueCA9IE1hdGguc3FydCgoYSAqIGEpICsgKGIgKiBiKSk7XG4gICAgdHJhbnNmb3JtLnNjYWxlLnkgPSBNYXRoLnNxcnQoKGMgKiBjKSArIChkICogZCkpO1xuXG4gICAgLy8gbmV4dCBzZXQgcG9zaXRpb25cbiAgICB0cmFuc2Zvcm0ucG9zaXRpb24ueCA9IHRoaXMudHg7XG4gICAgdHJhbnNmb3JtLnBvc2l0aW9uLnkgPSB0aGlzLnR5O1xuXG4gICAgcmV0dXJuIHRyYW5zZm9ybTtcbn07XG5cbi8qKlxuICogSW52ZXJ0cyB0aGlzIG1hdHJpeFxuICpcbiAqIEByZXR1cm4ge1BJWEkuTWF0cml4fSBUaGlzIG1hdHJpeC4gR29vZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICovXG5NYXRyaXgucHJvdG90eXBlLmludmVydCA9IGZ1bmN0aW9uIGludmVydCAoKVxue1xuICAgIHZhciBhMSA9IHRoaXMuYTtcbiAgICB2YXIgYjEgPSB0aGlzLmI7XG4gICAgdmFyIGMxID0gdGhpcy5jO1xuICAgIHZhciBkMSA9IHRoaXMuZDtcbiAgICB2YXIgdHgxID0gdGhpcy50eDtcbiAgICB2YXIgbiA9IChhMSAqIGQxKSAtIChiMSAqIGMxKTtcblxuICAgIHRoaXMuYSA9IGQxIC8gbjtcbiAgICB0aGlzLmIgPSAtYjEgLyBuO1xuICAgIHRoaXMuYyA9IC1jMSAvIG47XG4gICAgdGhpcy5kID0gYTEgLyBuO1xuICAgIHRoaXMudHggPSAoKGMxICogdGhpcy50eSkgLSAoZDEgKiB0eDEpKSAvIG47XG4gICAgdGhpcy50eSA9IC0oKGExICogdGhpcy50eSkgLSAoYjEgKiB0eDEpKSAvIG47XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVzZXRzIHRoaXMgTWF0cml4IHRvIGFuIGlkZW50aXR5IChkZWZhdWx0KSBtYXRyaXguXG4gKlxuICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gKi9cbk1hdHJpeC5wcm90b3R5cGUuaWRlbnRpdHkgPSBmdW5jdGlvbiBpZGVudGl0eSAoKVxue1xuICAgIHRoaXMuYSA9IDE7XG4gICAgdGhpcy5iID0gMDtcbiAgICB0aGlzLmMgPSAwO1xuICAgIHRoaXMuZCA9IDE7XG4gICAgdGhpcy50eCA9IDA7XG4gICAgdGhpcy50eSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBNYXRyaXggb2JqZWN0IHdpdGggdGhlIHNhbWUgdmFsdWVzIGFzIHRoaXMgb25lLlxuICpcbiAqIEByZXR1cm4ge1BJWEkuTWF0cml4fSBBIGNvcHkgb2YgdGhpcyBtYXRyaXguIEdvb2QgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAqL1xuTWF0cml4LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpXG57XG4gICAgdmFyIG1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcblxuICAgIG1hdHJpeC5hID0gdGhpcy5hO1xuICAgIG1hdHJpeC5iID0gdGhpcy5iO1xuICAgIG1hdHJpeC5jID0gdGhpcy5jO1xuICAgIG1hdHJpeC5kID0gdGhpcy5kO1xuICAgIG1hdHJpeC50eCA9IHRoaXMudHg7XG4gICAgbWF0cml4LnR5ID0gdGhpcy50eTtcblxuICAgIHJldHVybiBtYXRyaXg7XG59O1xuXG4vKipcbiAqIENoYW5nZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gbWF0cml4IHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBvbmVzIGluIHRoaXMgbWF0cml4XG4gKlxuICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gbWF0cml4IC0gVGhlIG1hdHJpeCB0byBjb3B5IHRvLlxuICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoZSBtYXRyaXggZ2l2ZW4gaW4gcGFyYW1ldGVyIHdpdGggaXRzIHZhbHVlcyB1cGRhdGVkLlxuICovXG5NYXRyaXgucHJvdG90eXBlLmNvcHlUbyA9IGZ1bmN0aW9uIGNvcHlUbyAobWF0cml4KVxue1xuICAgIG1hdHJpeC5hID0gdGhpcy5hO1xuICAgIG1hdHJpeC5iID0gdGhpcy5iO1xuICAgIG1hdHJpeC5jID0gdGhpcy5jO1xuICAgIG1hdHJpeC5kID0gdGhpcy5kO1xuICAgIG1hdHJpeC50eCA9IHRoaXMudHg7XG4gICAgbWF0cml4LnR5ID0gdGhpcy50eTtcblxuICAgIHJldHVybiBtYXRyaXg7XG59O1xuXG4vKipcbiAqIENoYW5nZXMgdGhlIHZhbHVlcyBvZiB0aGUgbWF0cml4IHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBvbmVzIGluIGdpdmVuIG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7UElYSS5NYXRyaXh9IG1hdHJpeCAtIFRoZSBtYXRyaXggdG8gY29weSBmcm9tLlxuICogQHJldHVybiB7UElYSS5NYXRyaXh9IHRoaXNcbiAqL1xuTWF0cml4LnByb3RvdHlwZS5jb3B5RnJvbSA9IGZ1bmN0aW9uIGNvcHlGcm9tIChtYXRyaXgpXG57XG4gICAgdGhpcy5hID0gbWF0cml4LmE7XG4gICAgdGhpcy5iID0gbWF0cml4LmI7XG4gICAgdGhpcy5jID0gbWF0cml4LmM7XG4gICAgdGhpcy5kID0gbWF0cml4LmQ7XG4gICAgdGhpcy50eCA9IG1hdHJpeC50eDtcbiAgICB0aGlzLnR5ID0gbWF0cml4LnR5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEEgZGVmYXVsdCAoaWRlbnRpdHkpIG1hdHJpeFxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQG1lbWJlciB7UElYSS5NYXRyaXh9XG4gKi9cbnN0YXRpY0FjY2Vzc29ycy5JREVOVElUWS5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiBuZXcgTWF0cml4KCk7XG59O1xuXG4vKipcbiAqIEEgdGVtcCBtYXRyaXhcbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEBtZW1iZXIge1BJWEkuTWF0cml4fVxuICovXG5zdGF0aWNBY2Nlc3NvcnMuVEVNUF9NQVRSSVguZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gbmV3IE1hdHJpeCgpO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1hdHJpeCwgc3RhdGljQWNjZXNzb3JzICk7XG5cbi8vIFlvdXIgZnJpZW5kbHkgbmVpZ2hib3VyIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RpaGVkcmFsX2dyb3VwXG5cbi8qXG4gKiBUcmFuc2Zvcm0gbWF0cml4IGZvciBvcGVyYXRpb24gbiBpczpcbiAqIHwgdXggfCB2eCB8XG4gKiB8IHV5IHwgdnkgfFxuICovXG5cbnZhciB1eCA9IFsxLCAxLCAwLCAtMSwgLTEsIC0xLCAwLCAxLCAxLCAxLCAwLCAtMSwgLTEsIC0xLCAwLCAxXTtcbnZhciB1eSA9IFswLCAxLCAxLCAxLCAwLCAtMSwgLTEsIC0xLCAwLCAxLCAxLCAxLCAwLCAtMSwgLTEsIC0xXTtcbnZhciB2eCA9IFswLCAtMSwgLTEsIC0xLCAwLCAxLCAxLCAxLCAwLCAxLCAxLCAxLCAwLCAtMSwgLTEsIC0xXTtcbnZhciB2eSA9IFsxLCAxLCAwLCAtMSwgLTEsIC0xLCAwLCAxLCAtMSwgLTEsIDAsIDEsIDEsIDEsIDAsIC0xXTtcblxuLyoqXG4gKiBbQ2F5bGV5IFRhYmxlXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYXlsZXlfdGFibGV9XG4gKiBmb3IgdGhlIGNvbXBvc2l0aW9uIG9mIGVhY2ggcm90YXRpb24gaW4gdGhlIGRpaGVkZXJhbCBncm91cCBEOC5cbiAqXG4gKiBAdHlwZSBudW1iZXJbXVtdXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgcm90YXRpb25DYXlsZXkgPSBbXTtcblxuLyoqXG4gKiBNYXRyaWNlcyBmb3IgZWFjaCBgR0Q4U3ltbWV0cnlgIHJvdGF0aW9uLlxuICpcbiAqIEB0eXBlIE1hdHJpeFtdXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgcm90YXRpb25NYXRyaWNlcyA9IFtdO1xuXG4vKlxuICogQWxpYXMgZm9yIHtAY29kZSBNYXRoLnNpZ259LlxuICovXG52YXIgc2lnbnVtID0gTWF0aC5zaWduO1xuXG4vKlxuICogSW5pdGlhbGl6ZXMgYHJvdGF0aW9uQ2F5bGV5YCBhbmQgYHJvdGF0aW9uTWF0cmljZXNgLiBJdCBpcyBjYWxsZWRcbiAqIG9ubHkgb25jZSBiZWxvdy5cbiAqL1xuZnVuY3Rpb24gaW5pdCgpXG57XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIHtcbiAgICAgICAgdmFyIHJvdyA9IFtdO1xuXG4gICAgICAgIHJvdGF0aW9uQ2F5bGV5LnB1c2gocm93KTtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyBqKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8qIE11bHRpcGxpZXMgcm90YXRpb24gbWF0cmljZXMgaSBhbmQgai4gKi9cbiAgICAgICAgICAgIHZhciBfdXggPSBzaWdudW0oKHV4W2ldICogdXhbal0pICsgKHZ4W2ldICogdXlbal0pKTtcbiAgICAgICAgICAgIHZhciBfdXkgPSBzaWdudW0oKHV5W2ldICogdXhbal0pICsgKHZ5W2ldICogdXlbal0pKTtcbiAgICAgICAgICAgIHZhciBfdnggPSBzaWdudW0oKHV4W2ldICogdnhbal0pICsgKHZ4W2ldICogdnlbal0pKTtcbiAgICAgICAgICAgIHZhciBfdnkgPSBzaWdudW0oKHV5W2ldICogdnhbal0pICsgKHZ5W2ldICogdnlbal0pKTtcblxuICAgICAgICAgICAgLyogRmluZHMgcm90YXRpb24gbWF0cml4IG1hdGNoaW5nIHRoZSBwcm9kdWN0IGFuZCBwdXNoZXMgaXQuICovXG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IDE2OyBrKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHV4W2tdID09PSBfdXggJiYgdXlba10gPT09IF91eVxuICAgICAgICAgICAgICAgICAgICAgICYmIHZ4W2tdID09PSBfdnggJiYgdnlba10gPT09IF92eSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKGspO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCAxNjsgaSQxKyspXG4gICAge1xuICAgICAgICB2YXIgbWF0ID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgICAgIG1hdC5zZXQodXhbaSQxXSwgdXlbaSQxXSwgdnhbaSQxXSwgdnlbaSQxXSwgMCwgMCk7XG4gICAgICAgIHJvdGF0aW9uTWF0cmljZXMucHVzaChtYXQpO1xuICAgIH1cbn1cblxuaW5pdCgpO1xuXG4vKipcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAdHlwZWRlZiB7bnVtYmVyfSBHRDhTeW1tZXRyeVxuICogQHNlZSBQSVhJLkdyb3VwRDhcbiAqL1xuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIGRpaGVkcmFsIGdyb3VwIEQ4LCB3aGljaCBpcyBzaW1pbGFyIHRvXG4gKiBbZ3JvdXAgRDRde0BsaW5rIGh0dHA6Ly9tYXRod29ybGQud29sZnJhbS5jb20vRGloZWRyYWxHcm91cEQ0Lmh0bWx9O1xuICogRDggaXMgdGhlIHNhbWUgYnV0IHdpdGggZGlhZ29uYWxzLCBhbmQgaXQgaXMgdXNlZCBmb3IgdGV4dHVyZVxuICogcm90YXRpb25zLlxuICpcbiAqIFRoZSBkaXJlY3Rpb25zIHRoZSBVLSBhbmQgVi0gYXhlcyBhZnRlciByb3RhdGlvblxuICogb2YgYW4gYW5nbGUgb2YgYGE6IEdEOENvbnN0YW50YCBhcmUgdGhlIHZlY3RvcnMgYCh1WChhKSwgdVkoYSkpYFxuICogYW5kIGAodlgoYSksIHZZKGEpKWAuIFRoZXNlIGFyZW4ndCBuZWNlc3NhcmlseSB1bml0IHZlY3RvcnMuXG4gKlxuICogKipPcmlnaW46Kio8YnI+XG4gKiAgVGhpcyBpcyB0aGUgc21hbGwgcGFydCBvZiBnYW1lb2Zib21icy5jb20gcG9ydGFsIHN5c3RlbS4gSXQgd29ya3MuXG4gKlxuICogQHNlZSBQSVhJLkdyb3VwRDguRVxuICogQHNlZSBQSVhJLkdyb3VwRDguU0VcbiAqIEBzZWUgUElYSS5Hcm91cEQ4LlNcbiAqIEBzZWUgUElYSS5Hcm91cEQ4LlNXXG4gKiBAc2VlIFBJWEkuR3JvdXBEOC5XXG4gKiBAc2VlIFBJWEkuR3JvdXBEOC5OV1xuICogQHNlZSBQSVhJLkdyb3VwRDguTlxuICogQHNlZSBQSVhJLkdyb3VwRDguTkVcbiAqIEBhdXRob3IgSXZhbiBAaXZhbnBvcGVseXNoZXZcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEdyb3VwRDggPSB7XG4gICAgLyoqXG4gICAgICogfCBSb3RhdGlvbiB8IERpcmVjdGlvbiB8XG4gICAgICogfC0tLS0tLS0tLS18LS0tLS0tLS0tLS18XG4gICAgICogfCAwwrAgICAgICAgfCBFYXN0ICAgICAgfFxuICAgICAqXG4gICAgICogQGNvbnN0YW50IHtQSVhJLkdEOFN5bW1ldHJ5fVxuICAgICAqL1xuICAgIEU6IDAsXG5cbiAgICAvKipcbiAgICAgKiB8IFJvdGF0aW9uIHwgRGlyZWN0aW9uIHxcbiAgICAgKiB8LS0tLS0tLS0tLXwtLS0tLS0tLS0tLXxcbiAgICAgKiB8IDQ1wrDihrsgICAgIHwgU291dGhlYXN0IHxcbiAgICAgKlxuICAgICAqIEBjb25zdGFudCB7UElYSS5HRDhTeW1tZXRyeX1cbiAgICAgKi9cbiAgICBTRTogMSxcblxuICAgIC8qKlxuICAgICAqIHwgUm90YXRpb24gfCBEaXJlY3Rpb24gfFxuICAgICAqIHwtLS0tLS0tLS0tfC0tLS0tLS0tLS0tfFxuICAgICAqIHwgOTDCsOKGuyAgICAgfCBTb3V0aCAgICAgfFxuICAgICAqXG4gICAgICogQGNvbnN0YW50IHtQSVhJLkdEOFN5bW1ldHJ5fVxuICAgICAqL1xuICAgIFM6IDIsXG5cbiAgICAvKipcbiAgICAgKiB8IFJvdGF0aW9uIHwgRGlyZWN0aW9uIHxcbiAgICAgKiB8LS0tLS0tLS0tLXwtLS0tLS0tLS0tLXxcbiAgICAgKiB8IDEzNcKw4oa7ICAgIHwgU291dGh3ZXN0IHxcbiAgICAgKlxuICAgICAqIEBjb25zdGFudCB7UElYSS5HRDhTeW1tZXRyeX1cbiAgICAgKi9cbiAgICBTVzogMyxcblxuICAgIC8qKlxuICAgICAqIHwgUm90YXRpb24gfCBEaXJlY3Rpb24gfFxuICAgICAqIHwtLS0tLS0tLS0tfC0tLS0tLS0tLS0tfFxuICAgICAqIHwgMTgwwrAgICAgIHwgV2VzdCAgICAgIHxcbiAgICAgKlxuICAgICAqIEBjb25zdGFudCB7UElYSS5HRDhTeW1tZXRyeX1cbiAgICAgKi9cbiAgICBXOiA0LFxuXG4gICAgLyoqXG4gICAgICogfCBSb3RhdGlvbiAgICB8IERpcmVjdGlvbiAgICB8XG4gICAgICogfC0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS18XG4gICAgICogfCAtMTM1wrAvMjI1wrDihrsgfCBOb3J0aHdlc3QgICAgfFxuICAgICAqXG4gICAgICogQGNvbnN0YW50IHtQSVhJLkdEOFN5bW1ldHJ5fVxuICAgICAqL1xuICAgIE5XOiA1LFxuXG4gICAgLyoqXG4gICAgICogfCBSb3RhdGlvbiAgICB8IERpcmVjdGlvbiAgICB8XG4gICAgICogfC0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS18XG4gICAgICogfCAtOTDCsC8yNzDCsOKGuyAgfCBOb3J0aCAgICAgICAgfFxuICAgICAqXG4gICAgICogQGNvbnN0YW50IHtQSVhJLkdEOFN5bW1ldHJ5fVxuICAgICAqL1xuICAgIE46IDYsXG5cbiAgICAvKipcbiAgICAgKiB8IFJvdGF0aW9uICAgIHwgRGlyZWN0aW9uICAgIHxcbiAgICAgKiB8LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLXxcbiAgICAgKiB8IC00NcKwLzMxNcKw4oa7ICB8IE5vcnRoZWFzdCAgICB8XG4gICAgICpcbiAgICAgKiBAY29uc3RhbnQge1BJWEkuR0Q4U3ltbWV0cnl9XG4gICAgICovXG4gICAgTkU6IDcsXG5cbiAgICAvKipcbiAgICAgKiBSZWZsZWN0aW9uIGFib3V0IFktYXhpcy5cbiAgICAgKlxuICAgICAqIEBjb25zdGFudCB7UElYSS5HRDhTeW1tZXRyeX1cbiAgICAgKi9cbiAgICBNSVJST1JfVkVSVElDQUw6IDgsXG5cbiAgICAvKipcbiAgICAgKiBSZWZsZWN0aW9uIGFib3V0IHRoZSBtYWluIGRpYWdvbmFsLlxuICAgICAqXG4gICAgICogQGNvbnN0YW50IHtQSVhJLkdEOFN5bW1ldHJ5fVxuICAgICAqL1xuICAgIE1BSU5fRElBR09OQUw6IDEwLFxuXG4gICAgLyoqXG4gICAgICogUmVmbGVjdGlvbiBhYm91dCBYLWF4aXMuXG4gICAgICpcbiAgICAgKiBAY29uc3RhbnQge1BJWEkuR0Q4U3ltbWV0cnl9XG4gICAgICovXG4gICAgTUlSUk9SX0hPUklaT05UQUw6IDEyLFxuXG4gICAgLyoqXG4gICAgICogUmVmbGVjdGlvbiBhYm91dCByZXZlcnNlIGRpYWdvbmFsLlxuICAgICAqXG4gICAgICogQGNvbnN0YW50IHtQSVhJLkdEOFN5bW1ldHJ5fVxuICAgICAqL1xuICAgIFJFVkVSU0VfRElBR09OQUw6IDE0LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFBJWEkuR3JvdXBEOFxuICAgICAqIEBwYXJhbSB7UElYSS5HRDhTeW1tZXRyeX0gaW5kIC0gc3ByaXRlIHJvdGF0aW9uIGFuZ2xlLlxuICAgICAqIEByZXR1cm4ge1BJWEkuR0Q4U3ltbWV0cnl9IFRoZSBYLWNvbXBvbmVudCBvZiB0aGUgVS1heGlzXG4gICAgICogICAgYWZ0ZXIgcm90YXRpbmcgdGhlIGF4ZXMuXG4gICAgICovXG4gICAgdVg6IGZ1bmN0aW9uIChpbmQpIHsgcmV0dXJuIHV4W2luZF07IH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtQSVhJLkdEOFN5bW1ldHJ5fSBpbmQgLSBzcHJpdGUgcm90YXRpb24gYW5nbGUuXG4gICAgICogQHJldHVybiB7UElYSS5HRDhTeW1tZXRyeX0gVGhlIFktY29tcG9uZW50IG9mIHRoZSBVLWF4aXNcbiAgICAgKiAgICBhZnRlciByb3RhdGluZyB0aGUgYXhlcy5cbiAgICAgKi9cbiAgICB1WTogZnVuY3Rpb24gKGluZCkgeyByZXR1cm4gdXlbaW5kXTsgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLkdyb3VwRDhcbiAgICAgKiBAcGFyYW0ge1BJWEkuR0Q4U3ltbWV0cnl9IGluZCAtIHNwcml0ZSByb3RhdGlvbiBhbmdsZS5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLkdEOFN5bW1ldHJ5fSBUaGUgWC1jb21wb25lbnQgb2YgdGhlIFYtYXhpc1xuICAgICAqICAgIGFmdGVyIHJvdGF0aW5nIHRoZSBheGVzLlxuICAgICAqL1xuICAgIHZYOiBmdW5jdGlvbiAoaW5kKSB7IHJldHVybiB2eFtpbmRdOyB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFBJWEkuR3JvdXBEOFxuICAgICAqIEBwYXJhbSB7UElYSS5HRDhTeW1tZXRyeX0gaW5kIC0gc3ByaXRlIHJvdGF0aW9uIGFuZ2xlLlxuICAgICAqIEByZXR1cm4ge1BJWEkuR0Q4U3ltbWV0cnl9IFRoZSBZLWNvbXBvbmVudCBvZiB0aGUgVi1heGlzXG4gICAgICogICAgYWZ0ZXIgcm90YXRpbmcgdGhlIGF4ZXMuXG4gICAgICovXG4gICAgdlk6IGZ1bmN0aW9uIChpbmQpIHsgcmV0dXJuIHZ5W2luZF07IH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtQSVhJLkdEOFN5bW1ldHJ5fSByb3RhdGlvbiAtIHN5bW1ldHJ5IHdob3NlIG9wcG9zaXRlXG4gICAgICogICBpcyBuZWVkZWQuIE9ubHkgcm90YXRpb25zIGhhdmUgb3Bwb3NpdGUgc3ltbWV0cmllcyB3aGlsZVxuICAgICAqICAgcmVmbGVjdGlvbnMgZG9uJ3QuXG4gICAgICogQHJldHVybiB7UElYSS5HRDhTeW1tZXRyeX0gVGhlIG9wcG9zaXRlIHN5bW1ldHJ5IG9mIGByb3RhdGlvbmBcbiAgICAgKi9cbiAgICBpbnY6IGZ1bmN0aW9uIChyb3RhdGlvbikge1xuICAgICAgICBpZiAocm90YXRpb24gJiA4KS8vIHRydWUgb25seSBpZiBiZXR3ZWVuIDggJiAxNSAocmVmbGVjdGlvbnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiByb3RhdGlvbiAmIDE1Oy8vIG9yIHJvdGF0aW9uICUgMTZcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoLXJvdGF0aW9uKSAmIDc7Ly8gb3IgKDggLSByb3RhdGlvbikgJSA4XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbXBvc2VzIHRoZSB0d28gRDggb3BlcmF0aW9ucy5cbiAgICAgKlxuICAgICAqIFRha2luZyBgXmAgYXMgcmVmbGVjdGlvbjpcbiAgICAgKlxuICAgICAqIHwgICAgICAgfCBFPTAgfCBTPTIgfCBXPTQgfCBOPTYgfCBFXj04IHwgU149MTAgfCBXXj0xMiB8IE5ePTE0IHxcbiAgICAgKiB8LS0tLS0tLXwtLS0tLXwtLS0tLXwtLS0tLXwtLS0tLXwtLS0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgICogfCBFPTAgICB8IEUgICB8IFMgICB8IFcgICB8IE4gICB8IEVeICAgfCBTXiAgICB8IFdeICAgIHwgTl4gICAgfFxuICAgICAqIHwgUz0yICAgfCBTICAgfCBXICAgfCBOICAgfCBFICAgfCBTXiAgIHwgV14gICAgfCBOXiAgICB8IEVeICAgIHxcbiAgICAgKiB8IFc9NCAgIHwgVyAgIHwgTiAgIHwgRSAgIHwgUyAgIHwgV14gICB8IE5eICAgIHwgRV4gICAgfCBTXiAgICB8XG4gICAgICogfCBOPTYgICB8IE4gICB8IEUgICB8IFMgICB8IFcgICB8IE5eICAgfCBFXiAgICB8IFNeICAgIHwgV14gICAgfFxuICAgICAqIHwgRV49OCAgfCBFXiAgfCBOXiAgfCBXXiAgfCBTXiAgfCBFICAgIHwgTiAgICAgfCBXICAgICB8IFMgICAgIHxcbiAgICAgKiB8IFNePTEwIHwgU14gIHwgRV4gIHwgTl4gIHwgV14gIHwgUyAgICB8IEUgICAgIHwgTiAgICAgfCBXICAgICB8XG4gICAgICogfCBXXj0xMiB8IFdeICB8IFNeICB8IEVeICB8IE5eICB8IFcgICAgfCBTICAgICB8IEUgICAgIHwgTiAgICAgfFxuICAgICAqIHwgTl49MTQgfCBOXiAgfCBXXiAgfCBTXiAgfCBFXiAgfCBOICAgIHwgVyAgICAgfCBTICAgICB8IEUgICAgIHxcbiAgICAgKlxuICAgICAqIFtUaGlzIGlzIGEgQ2F5bGV5IHRhYmxlXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYXlsZXlfdGFibGV9XG4gICAgICogQG1lbWJlcm9mIFBJWEkuR3JvdXBEOFxuICAgICAqIEBwYXJhbSB7UElYSS5HRDhTeW1tZXRyeX0gcm90YXRpb25TZWNvbmQgLSBTZWNvbmQgb3BlcmF0aW9uLCB3aGljaFxuICAgICAqICAgaXMgdGhlIHJvdyBpbiB0aGUgYWJvdmUgY2F5bGV5IHRhYmxlLlxuICAgICAqIEBwYXJhbSB7UElYSS5HRDhTeW1tZXRyeX0gcm90YXRpb25GaXJzdCAtIEZpcnN0IG9wZXJhdGlvbiwgd2hpY2hcbiAgICAgKiAgIGlzIHRoZSBjb2x1bW4gaW4gdGhlIGFib3ZlIGNheWxleSB0YWJsZS5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLkdEOFN5bW1ldHJ5fSBDb21wb3NlZCBvcGVyYXRpb25cbiAgICAgKi9cbiAgICBhZGQ6IGZ1bmN0aW9uIChyb3RhdGlvblNlY29uZCwgcm90YXRpb25GaXJzdCkgeyByZXR1cm4gKFxuICAgICAgICByb3RhdGlvbkNheWxleVtyb3RhdGlvblNlY29uZF1bcm90YXRpb25GaXJzdF1cbiAgICApOyB9LFxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZSBvZiBgYWRkYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLkdyb3VwRDhcbiAgICAgKiBAcGFyYW0ge1BJWEkuR0Q4U3ltbWV0cnl9IHJvdGF0aW9uU2Vjb25kIC0gU2Vjb25kIG9wZXJhdGlvblxuICAgICAqIEBwYXJhbSB7UElYSS5HRDhTeW1tZXRyeX0gcm90YXRpb25GaXJzdCAtIEZpcnN0IG9wZXJhdGlvblxuICAgICAqIEByZXR1cm4ge1BJWEkuR0Q4U3ltbWV0cnl9IFJlc3VsdFxuICAgICAqL1xuICAgIHN1YjogZnVuY3Rpb24gKHJvdGF0aW9uU2Vjb25kLCByb3RhdGlvbkZpcnN0KSB7IHJldHVybiAoXG4gICAgICAgIHJvdGF0aW9uQ2F5bGV5W3JvdGF0aW9uU2Vjb25kXVtHcm91cEQ4Lmludihyb3RhdGlvbkZpcnN0KV1cbiAgICApOyB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyAxODAgZGVncmVlcyB0byByb3RhdGlvbiwgd2hpY2ggaXMgYSBjb21tdXRhdGl2ZVxuICAgICAqIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLkdyb3VwRDhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm90YXRpb24gLSBUaGUgbnVtYmVyIHRvIHJvdGF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSb3RhdGVkIG51bWJlclxuICAgICAqL1xuICAgIHJvdGF0ZTE4MDogZnVuY3Rpb24gKHJvdGF0aW9uKSB7IHJldHVybiByb3RhdGlvbiBeIDQ7IH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIHJvdGF0aW9uIGFuZ2xlIGlzIHZlcnRpY2FsLCBpLmUuIHNvdXRoXG4gICAgICogb3Igbm9ydGguIEl0IGRvZXNuJ3Qgd29yayBmb3IgcmVmbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtQSVhJLkdEOFN5bW1ldHJ5fSByb3RhdGlvbiAtIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBkaXJlY3Rpb24gaXMgdmVydGljYWxcbiAgICAgKi9cbiAgICBpc1ZlcnRpY2FsOiBmdW5jdGlvbiAocm90YXRpb24pIHsgcmV0dXJuIChyb3RhdGlvbiAmIDMpID09PSAyOyB9LCAvLyByb3RhdGlvbiAlIDQgPT09IDJcblxuICAgIC8qKlxuICAgICAqIEFwcHJveGltYXRlcyB0aGUgdmVjdG9yIGBWKGR4LGR5KWAgaW50byBvbmUgb2YgdGhlXG4gICAgICogZWlnaHQgZGlyZWN0aW9ucyBwcm92aWRlZCBieSBgR3JvdXBEOGAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGR4IC0gWC1jb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkeSAtIFktY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtQSVhJLkdEOFN5bW1ldHJ5fSBBcHByb3hpbWF0aW9uIG9mIHRoZSB2ZWN0b3IgaW50b1xuICAgICAqICBvbmUgb2YgdGhlIGVpZ2h0IHN5bW1ldHJpZXMuXG4gICAgICovXG4gICAgYnlEaXJlY3Rpb246IGZ1bmN0aW9uIChkeCwgZHkpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKGR4KSAqIDIgPD0gTWF0aC5hYnMoZHkpKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoZHkgPj0gMClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gR3JvdXBEOC5TO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gR3JvdXBEOC5OO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKE1hdGguYWJzKGR5KSAqIDIgPD0gTWF0aC5hYnMoZHgpKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoZHggPiAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBHcm91cEQ4LkU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBHcm91cEQ4Llc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZHkgPiAwKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoZHggPiAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBHcm91cEQ4LlNFO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gR3JvdXBEOC5TVztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeCA+IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBHcm91cEQ4Lk5FO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEdyb3VwRDguTlc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhlbHBzIHNwcml0ZSB0byBjb21wZW5zYXRlIHRleHR1cmUgcGFja2VyIHJvdGF0aW9uLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBJWEkuR3JvdXBEOFxuICAgICAqIEBwYXJhbSB7UElYSS5NYXRyaXh9IG1hdHJpeCAtIHNwcml0ZSB3b3JsZCBtYXRyaXhcbiAgICAgKiBAcGFyYW0ge1BJWEkuR0Q4U3ltbWV0cnl9IHJvdGF0aW9uIC0gVGhlIHJvdGF0aW9uIGZhY3RvciB0byB1c2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR4IC0gc3ByaXRlIGFuY2hvcmluZ1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0eSAtIHNwcml0ZSBhbmNob3JpbmdcbiAgICAgKi9cbiAgICBtYXRyaXhBcHBlbmRSb3RhdGlvbkludjogZnVuY3Rpb24gKG1hdHJpeCwgcm90YXRpb24sIHR4LCB0eSkge1xuICAgICAgICBpZiAoIHR4ID09PSB2b2lkIDAgKSB0eCA9IDA7XG4gICAgICAgIGlmICggdHkgPT09IHZvaWQgMCApIHR5ID0gMDtcblxuICAgICAgICAvLyBQYWNrZXIgdXNlZCBcInJvdGF0aW9uXCIsIHdlIHVzZSBcImludihyb3RhdGlvbilcIlxuICAgICAgICB2YXIgbWF0ID0gcm90YXRpb25NYXRyaWNlc1tHcm91cEQ4Lmludihyb3RhdGlvbildO1xuXG4gICAgICAgIG1hdC50eCA9IHR4O1xuICAgICAgICBtYXQudHkgPSB0eTtcbiAgICAgICAgbWF0cml4LmFwcGVuZChtYXQpO1xuICAgIH0sXG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGF0IHRha2VzIGNhcmUgYWJvdXQgaXRzIHZlcnNpb25zXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgVHJhbnNmb3JtID0gZnVuY3Rpb24gVHJhbnNmb3JtKClcbntcbiAgICAvKipcbiAgICAgKiBUaGUgd29ybGQgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5NYXRyaXh9XG4gICAgICovXG4gICAgdGhpcy53b3JsZFRyYW5zZm9ybSA9IG5ldyBNYXRyaXgoKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb2NhbCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLk1hdHJpeH1cbiAgICAgKi9cbiAgICB0aGlzLmxvY2FsVHJhbnNmb3JtID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvb3JkaW5hdGUgb2YgdGhlIG9iamVjdCByZWxhdGl2ZSB0byB0aGUgbG9jYWwgY29vcmRpbmF0ZXMgb2YgdGhlIHBhcmVudC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuT2JzZXJ2YWJsZVBvaW50fVxuICAgICAqL1xuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgT2JzZXJ2YWJsZVBvaW50KHRoaXMub25DaGFuZ2UsIHRoaXMsIDAsIDApO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjYWxlIGZhY3RvciBvZiB0aGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5PYnNlcnZhYmxlUG9pbnR9XG4gICAgICovXG4gICAgdGhpcy5zY2FsZSA9IG5ldyBPYnNlcnZhYmxlUG9pbnQodGhpcy5vbkNoYW5nZSwgdGhpcywgMSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGl2b3QgcG9pbnQgb2YgdGhlIGRpc3BsYXlPYmplY3QgdGhhdCBpdCByb3RhdGVzIGFyb3VuZC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuT2JzZXJ2YWJsZVBvaW50fVxuICAgICAqL1xuICAgIHRoaXMucGl2b3QgPSBuZXcgT2JzZXJ2YWJsZVBvaW50KHRoaXMub25DaGFuZ2UsIHRoaXMsIDAsIDApO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNrZXcgYW1vdW50LCBvbiB0aGUgeCBhbmQgeSBheGlzLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5PYnNlcnZhYmxlUG9pbnR9XG4gICAgICovXG4gICAgdGhpcy5za2V3ID0gbmV3IE9ic2VydmFibGVQb2ludCh0aGlzLnVwZGF0ZVNrZXcsIHRoaXMsIDAsIDApO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJvdGF0aW9uIGFtb3VudC5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fcm90YXRpb24gPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFgtY29vcmRpbmF0ZSB2YWx1ZSBvZiB0aGUgbm9ybWFsaXplZCBsb2NhbCBYIGF4aXMsXG4gICAgICogdGhlIGZpcnN0IGNvbHVtbiBvZiB0aGUgbG9jYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IHdpdGhvdXQgYSBzY2FsZS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fY3ggPSAxO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFktY29vcmRpbmF0ZSB2YWx1ZSBvZiB0aGUgbm9ybWFsaXplZCBsb2NhbCBYIGF4aXMsXG4gICAgICogdGhlIGZpcnN0IGNvbHVtbiBvZiB0aGUgbG9jYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IHdpdGhvdXQgYSBzY2FsZS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fc3ggPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFgtY29vcmRpbmF0ZSB2YWx1ZSBvZiB0aGUgbm9ybWFsaXplZCBsb2NhbCBZIGF4aXMsXG4gICAgICogdGhlIHNlY29uZCBjb2x1bW4gb2YgdGhlIGxvY2FsIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB3aXRob3V0IGEgc2NhbGUuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX2N5ID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBZLWNvb3JkaW5hdGUgdmFsdWUgb2YgdGhlIG5vcm1hbGl6ZWQgbG9jYWwgWSBheGlzLFxuICAgICAqIHRoZSBzZWNvbmQgY29sdW1uIG9mIHRoZSBsb2NhbCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggd2l0aG91dCBhIHNjYWxlLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9zeSA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYWxseSB1bmlxdWUgSUQgb2YgdGhlIGxvY2FsIHRyYW5zZm9ybS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fbG9jYWxJRCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYWxseSB1bmlxdWUgSUQgb2YgdGhlIGxvY2FsIHRyYW5zZm9ybVxuICAgICAqIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBjdXJyZW50IGxvY2FsIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fY3VycmVudExvY2FsSUQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxvY2FsbHkgdW5pcXVlIElEIG9mIHRoZSB3b3JsZCB0cmFuc2Zvcm0uXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3dvcmxkSUQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxvY2FsbHkgdW5pcXVlIElEIG9mIHRoZSBwYXJlbnQncyB3b3JsZCB0cmFuc2Zvcm1cbiAgICAgKiB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgY3VycmVudCB3b3JsZCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3BhcmVudElEID0gMDtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSA9IHsgcm90YXRpb246IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBhIHZhbHVlIGNoYW5nZXMuXG4gKlxuICogQHByb3RlY3RlZFxuICovXG5UcmFuc2Zvcm0ucHJvdG90eXBlLm9uQ2hhbmdlID0gZnVuY3Rpb24gb25DaGFuZ2UgKClcbntcbiAgICB0aGlzLl9sb2NhbElEKys7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRoZSBza2V3IG9yIHRoZSByb3RhdGlvbiBjaGFuZ2VzLlxuICpcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuVHJhbnNmb3JtLnByb3RvdHlwZS51cGRhdGVTa2V3ID0gZnVuY3Rpb24gdXBkYXRlU2tldyAoKVxue1xuICAgIHRoaXMuX2N4ID0gTWF0aC5jb3ModGhpcy5fcm90YXRpb24gKyB0aGlzLnNrZXcuX3kpO1xuICAgIHRoaXMuX3N4ID0gTWF0aC5zaW4odGhpcy5fcm90YXRpb24gKyB0aGlzLnNrZXcuX3kpO1xuICAgIHRoaXMuX2N5ID0gLU1hdGguc2luKHRoaXMuX3JvdGF0aW9uIC0gdGhpcy5za2V3Ll94KTsgLy8gY29zLCBhZGRlZCBQSS8yXG4gICAgdGhpcy5fc3kgPSBNYXRoLmNvcyh0aGlzLl9yb3RhdGlvbiAtIHRoaXMuc2tldy5feCk7IC8vIHNpbiwgYWRkZWQgUEkvMlxuXG4gICAgdGhpcy5fbG9jYWxJRCsrO1xufTtcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBsb2NhbCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG4gKi9cblRyYW5zZm9ybS5wcm90b3R5cGUudXBkYXRlTG9jYWxUcmFuc2Zvcm0gPSBmdW5jdGlvbiB1cGRhdGVMb2NhbFRyYW5zZm9ybSAoKVxue1xuICAgIHZhciBsdCA9IHRoaXMubG9jYWxUcmFuc2Zvcm07XG5cbiAgICBpZiAodGhpcy5fbG9jYWxJRCAhPT0gdGhpcy5fY3VycmVudExvY2FsSUQpXG4gICAge1xuICAgICAgICAvLyBnZXQgdGhlIG1hdHJpeCB2YWx1ZXMgb2YgdGhlIGRpc3BsYXlvYmplY3QgYmFzZWQgb24gaXRzIHRyYW5zZm9ybSBwcm9wZXJ0aWVzLi5cbiAgICAgICAgbHQuYSA9IHRoaXMuX2N4ICogdGhpcy5zY2FsZS5feDtcbiAgICAgICAgbHQuYiA9IHRoaXMuX3N4ICogdGhpcy5zY2FsZS5feDtcbiAgICAgICAgbHQuYyA9IHRoaXMuX2N5ICogdGhpcy5zY2FsZS5feTtcbiAgICAgICAgbHQuZCA9IHRoaXMuX3N5ICogdGhpcy5zY2FsZS5feTtcblxuICAgICAgICBsdC50eCA9IHRoaXMucG9zaXRpb24uX3ggLSAoKHRoaXMucGl2b3QuX3ggKiBsdC5hKSArICh0aGlzLnBpdm90Ll95ICogbHQuYykpO1xuICAgICAgICBsdC50eSA9IHRoaXMucG9zaXRpb24uX3kgLSAoKHRoaXMucGl2b3QuX3ggKiBsdC5iKSArICh0aGlzLnBpdm90Ll95ICogbHQuZCkpO1xuICAgICAgICB0aGlzLl9jdXJyZW50TG9jYWxJRCA9IHRoaXMuX2xvY2FsSUQ7XG5cbiAgICAgICAgLy8gZm9yY2UgYW4gdXBkYXRlLi5cbiAgICAgICAgdGhpcy5fcGFyZW50SUQgPSAtMTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIGxvY2FsIGFuZCB0aGUgd29ybGQgdHJhbnNmb3JtYXRpb24gbWF0cmljZXMuXG4gKlxuICogQHBhcmFtIHtQSVhJLlRyYW5zZm9ybX0gcGFyZW50VHJhbnNmb3JtIC0gVGhlIHBhcmVudCB0cmFuc2Zvcm1cbiAqL1xuVHJhbnNmb3JtLnByb3RvdHlwZS51cGRhdGVUcmFuc2Zvcm0gPSBmdW5jdGlvbiB1cGRhdGVUcmFuc2Zvcm0gKHBhcmVudFRyYW5zZm9ybSlcbntcbiAgICB2YXIgbHQgPSB0aGlzLmxvY2FsVHJhbnNmb3JtO1xuXG4gICAgaWYgKHRoaXMuX2xvY2FsSUQgIT09IHRoaXMuX2N1cnJlbnRMb2NhbElEKVxuICAgIHtcbiAgICAgICAgLy8gZ2V0IHRoZSBtYXRyaXggdmFsdWVzIG9mIHRoZSBkaXNwbGF5b2JqZWN0IGJhc2VkIG9uIGl0cyB0cmFuc2Zvcm0gcHJvcGVydGllcy4uXG4gICAgICAgIGx0LmEgPSB0aGlzLl9jeCAqIHRoaXMuc2NhbGUuX3g7XG4gICAgICAgIGx0LmIgPSB0aGlzLl9zeCAqIHRoaXMuc2NhbGUuX3g7XG4gICAgICAgIGx0LmMgPSB0aGlzLl9jeSAqIHRoaXMuc2NhbGUuX3k7XG4gICAgICAgIGx0LmQgPSB0aGlzLl9zeSAqIHRoaXMuc2NhbGUuX3k7XG5cbiAgICAgICAgbHQudHggPSB0aGlzLnBvc2l0aW9uLl94IC0gKCh0aGlzLnBpdm90Ll94ICogbHQuYSkgKyAodGhpcy5waXZvdC5feSAqIGx0LmMpKTtcbiAgICAgICAgbHQudHkgPSB0aGlzLnBvc2l0aW9uLl95IC0gKCh0aGlzLnBpdm90Ll94ICogbHQuYikgKyAodGhpcy5waXZvdC5feSAqIGx0LmQpKTtcbiAgICAgICAgdGhpcy5fY3VycmVudExvY2FsSUQgPSB0aGlzLl9sb2NhbElEO1xuXG4gICAgICAgIC8vIGZvcmNlIGFuIHVwZGF0ZS4uXG4gICAgICAgIHRoaXMuX3BhcmVudElEID0gLTE7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BhcmVudElEICE9PSBwYXJlbnRUcmFuc2Zvcm0uX3dvcmxkSUQpXG4gICAge1xuICAgICAgICAvLyBjb25jYXQgdGhlIHBhcmVudCBtYXRyaXggd2l0aCB0aGUgb2JqZWN0cyB0cmFuc2Zvcm0uXG4gICAgICAgIHZhciBwdCA9IHBhcmVudFRyYW5zZm9ybS53b3JsZFRyYW5zZm9ybTtcbiAgICAgICAgdmFyIHd0ID0gdGhpcy53b3JsZFRyYW5zZm9ybTtcblxuICAgICAgICB3dC5hID0gKGx0LmEgKiBwdC5hKSArIChsdC5iICogcHQuYyk7XG4gICAgICAgIHd0LmIgPSAobHQuYSAqIHB0LmIpICsgKGx0LmIgKiBwdC5kKTtcbiAgICAgICAgd3QuYyA9IChsdC5jICogcHQuYSkgKyAobHQuZCAqIHB0LmMpO1xuICAgICAgICB3dC5kID0gKGx0LmMgKiBwdC5iKSArIChsdC5kICogcHQuZCk7XG4gICAgICAgIHd0LnR4ID0gKGx0LnR4ICogcHQuYSkgKyAobHQudHkgKiBwdC5jKSArIHB0LnR4O1xuICAgICAgICB3dC50eSA9IChsdC50eCAqIHB0LmIpICsgKGx0LnR5ICogcHQuZCkgKyBwdC50eTtcblxuICAgICAgICB0aGlzLl9wYXJlbnRJRCA9IHBhcmVudFRyYW5zZm9ybS5fd29ybGRJRDtcblxuICAgICAgICAvLyB1cGRhdGUgdGhlIGlkIG9mIHRoZSB0cmFuc2Zvcm0uLlxuICAgICAgICB0aGlzLl93b3JsZElEKys7XG4gICAgfVxufTtcblxuLyoqXG4gKiBEZWNvbXBvc2VzIGEgbWF0cml4IGFuZCBzZXRzIHRoZSB0cmFuc2Zvcm1zIHByb3BlcnRpZXMgYmFzZWQgb24gaXQuXG4gKlxuICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gbWF0cml4IC0gVGhlIG1hdHJpeCB0byBkZWNvbXBvc2VcbiAqL1xuVHJhbnNmb3JtLnByb3RvdHlwZS5zZXRGcm9tTWF0cml4ID0gZnVuY3Rpb24gc2V0RnJvbU1hdHJpeCAobWF0cml4KVxue1xuICAgIG1hdHJpeC5kZWNvbXBvc2UodGhpcyk7XG4gICAgdGhpcy5fbG9jYWxJRCsrO1xufTtcblxuLyoqXG4gKiBUaGUgcm90YXRpb24gb2YgdGhlIG9iamVjdCBpbiByYWRpYW5zLlxuICpcbiAqIEBtZW1iZXIge251bWJlcn1cbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDEucm90YXRpb24uZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy5fcm90YXRpb247XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5yb3RhdGlvbi5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xue1xuICAgIGlmICh0aGlzLl9yb3RhdGlvbiAhPT0gdmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLl9yb3RhdGlvbiA9IHZhbHVlO1xuICAgICAgICB0aGlzLnVwZGF0ZVNrZXcoKTtcbiAgICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVHJhbnNmb3JtLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEgKTtcblxuLyoqXG4gKiBBIGRlZmF1bHQgKGlkZW50aXR5KSB0cmFuc2Zvcm1cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RhbnRcbiAqIEBtZW1iZXIge1BJWEkuVHJhbnNmb3JtfVxuICovXG5UcmFuc2Zvcm0uSURFTlRJVFkgPSBuZXcgVHJhbnNmb3JtKCk7XG5cbi8qKlxuICogU2l6ZSBvYmplY3QsIGNvbnRhaW5zIHdpZHRoIGFuZCBoZWlnaHRcbiAqXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHR5cGVkZWYge29iamVjdH0gSVNpemVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB3aWR0aCAtIFdpZHRoIGNvbXBvbmVudFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodCAtIEhlaWdodCBjb21wb25lbnRcbiAqL1xuXG4vKipcbiAqIFJlY3RhbmdsZSBvYmplY3QgaXMgYW4gYXJlYSBkZWZpbmVkIGJ5IGl0cyBwb3NpdGlvbiwgYXMgaW5kaWNhdGVkIGJ5IGl0cyB0b3AtbGVmdCBjb3JuZXJcbiAqIHBvaW50ICh4LCB5KSBhbmQgYnkgaXRzIHdpZHRoIGFuZCBpdHMgaGVpZ2h0LlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFJlY3RhbmdsZSA9IGZ1bmN0aW9uIFJlY3RhbmdsZSh4LCB5LCB3aWR0aCwgaGVpZ2h0KVxue1xuICAgIGlmICggeCA9PT0gdm9pZCAwICkgeCA9IDA7XG4gICAgaWYgKCB5ID09PSB2b2lkIDAgKSB5ID0gMDtcbiAgICBpZiAoIHdpZHRoID09PSB2b2lkIDAgKSB3aWR0aCA9IDA7XG4gICAgaWYgKCBoZWlnaHQgPT09IHZvaWQgMCApIGhlaWdodCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMueCA9IE51bWJlcih4KTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy55ID0gTnVtYmVyKHkpO1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLndpZHRoID0gTnVtYmVyKHdpZHRoKTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy5oZWlnaHQgPSBOdW1iZXIoaGVpZ2h0KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBvYmplY3QsIG1haW5seSB1c2VkIHRvIGF2b2lkIGBpbnN0YW5jZW9mYCBjaGVja3NcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBQSVhJLlNIQVBFUy5SRUNUXG4gICAgICogQHNlZSBQSVhJLlNIQVBFU1xuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IFNIQVBFUy5SRUNUO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQyID0geyBsZWZ0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHJpZ2h0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHRvcDogeyBjb25maWd1cmFibGU6IHRydWUgfSxib3R0b206IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcbnZhciBzdGF0aWNBY2Nlc3NvcnMkMSA9IHsgRU1QVFk6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIHJlY3RhbmdsZVxuICpcbiAqIEBtZW1iZXIge251bWJlcn1cbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDIubGVmdC5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiB0aGlzLng7XG59O1xuXG4vKipcbiAqIHJldHVybnMgdGhlIHJpZ2h0IGVkZ2Ugb2YgdGhlIHJlY3RhbmdsZVxuICpcbiAqIEBtZW1iZXIge251bWJlcn1cbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDIucmlnaHQuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy54ICsgdGhpcy53aWR0aDtcbn07XG5cbi8qKlxuICogcmV0dXJucyB0aGUgdG9wIGVkZ2Ugb2YgdGhlIHJlY3RhbmdsZVxuICpcbiAqIEBtZW1iZXIge251bWJlcn1cbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDIudG9wLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMueTtcbn07XG5cbi8qKlxuICogcmV0dXJucyB0aGUgYm90dG9tIGVkZ2Ugb2YgdGhlIHJlY3RhbmdsZVxuICpcbiAqIEBtZW1iZXIge251bWJlcn1cbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDIuYm90dG9tLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMueSArIHRoaXMuaGVpZ2h0O1xufTtcblxuLyoqXG4gKiBBIGNvbnN0YW50IGVtcHR5IHJlY3RhbmdsZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RhbnRcbiAqIEBtZW1iZXIge1BJWEkuUmVjdGFuZ2xlfVxuICovXG5zdGF0aWNBY2Nlc3NvcnMkMS5FTVBUWS5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKDAsIDAsIDAsIDApO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhpcyBSZWN0YW5nbGVcbiAqXG4gKiBAcmV0dXJuIHtQSVhJLlJlY3RhbmdsZX0gYSBjb3B5IG9mIHRoZSByZWN0YW5nbGVcbiAqL1xuUmVjdGFuZ2xlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpXG57XG4gICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUodGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbn07XG5cbi8qKlxuICogQ29waWVzIGFub3RoZXIgcmVjdGFuZ2xlIHRvIHRoaXMgb25lLlxuICpcbiAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IHJlY3RhbmdsZSAtIFRoZSByZWN0YW5nbGUgdG8gY29weSBmcm9tLlxuICogQHJldHVybiB7UElYSS5SZWN0YW5nbGV9IFJldHVybnMgaXRzZWxmLlxuICovXG5SZWN0YW5nbGUucHJvdG90eXBlLmNvcHlGcm9tID0gZnVuY3Rpb24gY29weUZyb20gKHJlY3RhbmdsZSlcbntcbiAgICB0aGlzLnggPSByZWN0YW5nbGUueDtcbiAgICB0aGlzLnkgPSByZWN0YW5nbGUueTtcbiAgICB0aGlzLndpZHRoID0gcmVjdGFuZ2xlLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gcmVjdGFuZ2xlLmhlaWdodDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDb3BpZXMgdGhpcyByZWN0YW5nbGUgdG8gYW5vdGhlciBvbmUuXG4gKlxuICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gcmVjdGFuZ2xlIC0gVGhlIHJlY3RhbmdsZSB0byBjb3B5IHRvLlxuICogQHJldHVybiB7UElYSS5SZWN0YW5nbGV9IFJldHVybnMgZ2l2ZW4gcGFyYW1ldGVyLlxuICovXG5SZWN0YW5nbGUucHJvdG90eXBlLmNvcHlUbyA9IGZ1bmN0aW9uIGNvcHlUbyAocmVjdGFuZ2xlKVxue1xuICAgIHJlY3RhbmdsZS54ID0gdGhpcy54O1xuICAgIHJlY3RhbmdsZS55ID0gdGhpcy55O1xuICAgIHJlY3RhbmdsZS53aWR0aCA9IHRoaXMud2lkdGg7XG4gICAgcmVjdGFuZ2xlLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuXG4gICAgcmV0dXJuIHJlY3RhbmdsZTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgZ2l2ZW4gYXJlIGNvbnRhaW5lZCB3aXRoaW4gdGhpcyBSZWN0YW5nbGVcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIFkgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgeC95IGNvb3JkaW5hdGVzIGFyZSB3aXRoaW4gdGhpcyBSZWN0YW5nbGVcbiAqL1xuUmVjdGFuZ2xlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zICh4LCB5KVxue1xuICAgIGlmICh0aGlzLndpZHRoIDw9IDAgfHwgdGhpcy5oZWlnaHQgPD0gMClcbiAgICB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoeCA+PSB0aGlzLnggJiYgeCA8IHRoaXMueCArIHRoaXMud2lkdGgpXG4gICAge1xuICAgICAgICBpZiAoeSA+PSB0aGlzLnkgJiYgeSA8IHRoaXMueSArIHRoaXMuaGVpZ2h0KVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogUGFkcyB0aGUgcmVjdGFuZ2xlIG1ha2luZyBpdCBncm93IGluIGFsbCBkaXJlY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nWCAtIFRoZSBob3Jpem9udGFsIHBhZGRpbmcgYW1vdW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdZIC0gVGhlIHZlcnRpY2FsIHBhZGRpbmcgYW1vdW50LlxuICovXG5SZWN0YW5nbGUucHJvdG90eXBlLnBhZCA9IGZ1bmN0aW9uIHBhZCAocGFkZGluZ1gsIHBhZGRpbmdZKVxue1xuICAgIHBhZGRpbmdYID0gcGFkZGluZ1ggfHwgMDtcbiAgICBwYWRkaW5nWSA9IHBhZGRpbmdZIHx8ICgocGFkZGluZ1kgIT09IDApID8gcGFkZGluZ1ggOiAwKTtcblxuICAgIHRoaXMueCAtPSBwYWRkaW5nWDtcbiAgICB0aGlzLnkgLT0gcGFkZGluZ1k7XG5cbiAgICB0aGlzLndpZHRoICs9IHBhZGRpbmdYICogMjtcbiAgICB0aGlzLmhlaWdodCArPSBwYWRkaW5nWSAqIDI7XG59O1xuXG4vKipcbiAqIEZpdHMgdGhpcyByZWN0YW5nbGUgYXJvdW5kIHRoZSBwYXNzZWQgb25lLlxuICpcbiAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IHJlY3RhbmdsZSAtIFRoZSByZWN0YW5nbGUgdG8gZml0LlxuICovXG5SZWN0YW5nbGUucHJvdG90eXBlLmZpdCA9IGZ1bmN0aW9uIGZpdCAocmVjdGFuZ2xlKVxue1xuICAgIHZhciB4MSA9IE1hdGgubWF4KHRoaXMueCwgcmVjdGFuZ2xlLngpO1xuICAgIHZhciB4MiA9IE1hdGgubWluKHRoaXMueCArIHRoaXMud2lkdGgsIHJlY3RhbmdsZS54ICsgcmVjdGFuZ2xlLndpZHRoKTtcbiAgICB2YXIgeTEgPSBNYXRoLm1heCh0aGlzLnksIHJlY3RhbmdsZS55KTtcbiAgICB2YXIgeTIgPSBNYXRoLm1pbih0aGlzLnkgKyB0aGlzLmhlaWdodCwgcmVjdGFuZ2xlLnkgKyByZWN0YW5nbGUuaGVpZ2h0KTtcblxuICAgIHRoaXMueCA9IHgxO1xuICAgIHRoaXMud2lkdGggPSBNYXRoLm1heCh4MiAtIHgxLCAwKTtcbiAgICB0aGlzLnkgPSB5MTtcbiAgICB0aGlzLmhlaWdodCA9IE1hdGgubWF4KHkyIC0geTEsIDApO1xufTtcblxuLyoqXG4gKiBFbmxhcmdlcyByZWN0YW5nbGUgdGhhdCB3YXkgaXRzIGNvcm5lcnMgbGllIG9uIGdyaWRcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW3Jlc29sdXRpb249MV0gcmVzb2x1dGlvblxuICogQHBhcmFtIHtudW1iZXJ9IFtlcHM9MC4wMDFdIHByZWNpc2lvblxuICovXG5SZWN0YW5nbGUucHJvdG90eXBlLmNlaWwgPSBmdW5jdGlvbiBjZWlsIChyZXNvbHV0aW9uLCBlcHMpXG57XG4gICAgICAgIGlmICggcmVzb2x1dGlvbiA9PT0gdm9pZCAwICkgcmVzb2x1dGlvbiA9IDE7XG4gICAgICAgIGlmICggZXBzID09PSB2b2lkIDAgKSBlcHMgPSAwLjAwMTtcblxuICAgIHZhciB4MiA9IE1hdGguY2VpbCgodGhpcy54ICsgdGhpcy53aWR0aCAtIGVwcykgKiByZXNvbHV0aW9uKSAvIHJlc29sdXRpb247XG4gICAgdmFyIHkyID0gTWF0aC5jZWlsKCh0aGlzLnkgKyB0aGlzLmhlaWdodCAtIGVwcykgKiByZXNvbHV0aW9uKSAvIHJlc29sdXRpb247XG5cbiAgICB0aGlzLnggPSBNYXRoLmZsb29yKCh0aGlzLnggKyBlcHMpICogcmVzb2x1dGlvbikgLyByZXNvbHV0aW9uO1xuICAgIHRoaXMueSA9IE1hdGguZmxvb3IoKHRoaXMueSArIGVwcykgKiByZXNvbHV0aW9uKSAvIHJlc29sdXRpb247XG5cbiAgICB0aGlzLndpZHRoID0geDIgLSB0aGlzLng7XG4gICAgdGhpcy5oZWlnaHQgPSB5MiAtIHRoaXMueTtcbn07XG5cbi8qKlxuICogRW5sYXJnZXMgdGhpcyByZWN0YW5nbGUgdG8gaW5jbHVkZSB0aGUgcGFzc2VkIHJlY3RhbmdsZS5cbiAqXG4gKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSByZWN0YW5nbGUgLSBUaGUgcmVjdGFuZ2xlIHRvIGluY2x1ZGUuXG4gKi9cblJlY3RhbmdsZS5wcm90b3R5cGUuZW5sYXJnZSA9IGZ1bmN0aW9uIGVubGFyZ2UgKHJlY3RhbmdsZSlcbntcbiAgICB2YXIgeDEgPSBNYXRoLm1pbih0aGlzLngsIHJlY3RhbmdsZS54KTtcbiAgICB2YXIgeDIgPSBNYXRoLm1heCh0aGlzLnggKyB0aGlzLndpZHRoLCByZWN0YW5nbGUueCArIHJlY3RhbmdsZS53aWR0aCk7XG4gICAgdmFyIHkxID0gTWF0aC5taW4odGhpcy55LCByZWN0YW5nbGUueSk7XG4gICAgdmFyIHkyID0gTWF0aC5tYXgodGhpcy55ICsgdGhpcy5oZWlnaHQsIHJlY3RhbmdsZS55ICsgcmVjdGFuZ2xlLmhlaWdodCk7XG5cbiAgICB0aGlzLnggPSB4MTtcbiAgICB0aGlzLndpZHRoID0geDIgLSB4MTtcbiAgICB0aGlzLnkgPSB5MTtcbiAgICB0aGlzLmhlaWdodCA9IHkyIC0geTE7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggUmVjdGFuZ2xlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDIgKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBSZWN0YW5nbGUsIHN0YXRpY0FjY2Vzc29ycyQxICk7XG5cbi8qKlxuICogVGhlIENpcmNsZSBvYmplY3QgaXMgdXNlZCB0byBoZWxwIGRyYXcgZ3JhcGhpY3MgYW5kIGNhbiBhbHNvIGJlIHVzZWQgdG8gc3BlY2lmeSBhIGhpdCBhcmVhIGZvciBkaXNwbGF5T2JqZWN0cy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBDaXJjbGUgPSBmdW5jdGlvbiBDaXJjbGUoeCwgeSwgcmFkaXVzKVxue1xuICAgIGlmICggeCA9PT0gdm9pZCAwICkgeCA9IDA7XG4gICAgaWYgKCB5ID09PSB2b2lkIDAgKSB5ID0gMDtcbiAgICBpZiAoIHJhZGl1cyA9PT0gdm9pZCAwICkgcmFkaXVzID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy54ID0geDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy55ID0geTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LCBtYWlubHkgdXNlZCB0byBhdm9pZCBgaW5zdGFuY2VvZmAgY2hlY2tzXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgUElYSS5TSEFQRVMuQ0lSQ1xuICAgICAqIEBzZWUgUElYSS5TSEFQRVNcbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSBTSEFQRVMuQ0lSQztcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgQ2lyY2xlIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7UElYSS5DaXJjbGV9IGEgY29weSBvZiB0aGUgQ2lyY2xlXG4gKi9cbkNpcmNsZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKVxue1xuICAgIHJldHVybiBuZXcgQ2lyY2xlKHRoaXMueCwgdGhpcy55LCB0aGlzLnJhZGl1cyk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSB4IGFuZCB5IGNvb3JkaW5hdGVzIGdpdmVuIGFyZSBjb250YWluZWQgd2l0aGluIHRoaXMgY2lyY2xlXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgWCBjb29yZGluYXRlIG9mIHRoZSBwb2ludCB0byB0ZXN0XG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHgveSBjb29yZGluYXRlcyBhcmUgd2l0aGluIHRoaXMgQ2lyY2xlXG4gKi9cbkNpcmNsZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyAoeCwgeSlcbntcbiAgICBpZiAodGhpcy5yYWRpdXMgPD0gMClcbiAgICB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgcjIgPSB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzO1xuICAgIHZhciBkeCA9ICh0aGlzLnggLSB4KTtcbiAgICB2YXIgZHkgPSAodGhpcy55IC0geSk7XG5cbiAgICBkeCAqPSBkeDtcbiAgICBkeSAqPSBkeTtcblxuICAgIHJldHVybiAoZHggKyBkeSA8PSByMik7XG59O1xuXG4vKipcbiogUmV0dXJucyB0aGUgZnJhbWluZyByZWN0YW5nbGUgb2YgdGhlIGNpcmNsZSBhcyBhIFJlY3RhbmdsZSBvYmplY3RcbipcbiogQHJldHVybiB7UElYSS5SZWN0YW5nbGV9IHRoZSBmcmFtaW5nIHJlY3RhbmdsZVxuKi9cbkNpcmNsZS5wcm90b3R5cGUuZ2V0Qm91bmRzID0gZnVuY3Rpb24gZ2V0Qm91bmRzICgpXG57XG4gICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUodGhpcy54IC0gdGhpcy5yYWRpdXMsIHRoaXMueSAtIHRoaXMucmFkaXVzLCB0aGlzLnJhZGl1cyAqIDIsIHRoaXMucmFkaXVzICogMik7XG59O1xuXG4vKipcbiAqIFRoZSBFbGxpcHNlIG9iamVjdCBpcyB1c2VkIHRvIGhlbHAgZHJhdyBncmFwaGljcyBhbmQgY2FuIGFsc28gYmUgdXNlZCB0byBzcGVjaWZ5IGEgaGl0IGFyZWEgZm9yIGRpc3BsYXlPYmplY3RzLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEVsbGlwc2UgPSBmdW5jdGlvbiBFbGxpcHNlKHgsIHksIGhhbGZXaWR0aCwgaGFsZkhlaWdodClcbntcbiAgICBpZiAoIHggPT09IHZvaWQgMCApIHggPSAwO1xuICAgIGlmICggeSA9PT0gdm9pZCAwICkgeSA9IDA7XG4gICAgaWYgKCBoYWxmV2lkdGggPT09IHZvaWQgMCApIGhhbGZXaWR0aCA9IDA7XG4gICAgaWYgKCBoYWxmSGVpZ2h0ID09PSB2b2lkIDAgKSBoYWxmSGVpZ2h0ID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy54ID0geDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy55ID0geTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy53aWR0aCA9IGhhbGZXaWR0aDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy5oZWlnaHQgPSBoYWxmSGVpZ2h0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIG9iamVjdCwgbWFpbmx5IHVzZWQgdG8gYXZvaWQgYGluc3RhbmNlb2ZgIGNoZWNrc1xuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IFBJWEkuU0hBUEVTLkVMSVBcbiAgICAgKiBAc2VlIFBJWEkuU0hBUEVTXG4gICAgICovXG4gICAgdGhpcy50eXBlID0gU0hBUEVTLkVMSVA7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIEVsbGlwc2UgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtQSVhJLkVsbGlwc2V9IGEgY29weSBvZiB0aGUgZWxsaXBzZVxuICovXG5FbGxpcHNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpXG57XG4gICAgcmV0dXJuIG5ldyBFbGxpcHNlKHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSB4IGFuZCB5IGNvb3JkaW5hdGVzIGdpdmVuIGFyZSBjb250YWluZWQgd2l0aGluIHRoaXMgZWxsaXBzZVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIFggY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQgdG8gdGVzdFxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBwb2ludCB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB4L3kgY29vcmRzIGFyZSB3aXRoaW4gdGhpcyBlbGxpcHNlXG4gKi9cbkVsbGlwc2UucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gY29udGFpbnMgKHgsIHkpXG57XG4gICAgaWYgKHRoaXMud2lkdGggPD0gMCB8fCB0aGlzLmhlaWdodCA8PSAwKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG5vcm1hbGl6ZSB0aGUgY29vcmRzIHRvIGFuIGVsbGlwc2Ugd2l0aCBjZW50ZXIgMCwwXG4gICAgdmFyIG5vcm14ID0gKCh4IC0gdGhpcy54KSAvIHRoaXMud2lkdGgpO1xuICAgIHZhciBub3JteSA9ICgoeSAtIHRoaXMueSkgLyB0aGlzLmhlaWdodCk7XG5cbiAgICBub3JteCAqPSBub3JteDtcbiAgICBub3JteSAqPSBub3JteTtcblxuICAgIHJldHVybiAobm9ybXggKyBub3JteSA8PSAxKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnJhbWluZyByZWN0YW5nbGUgb2YgdGhlIGVsbGlwc2UgYXMgYSBSZWN0YW5nbGUgb2JqZWN0XG4gKlxuICogQHJldHVybiB7UElYSS5SZWN0YW5nbGV9IHRoZSBmcmFtaW5nIHJlY3RhbmdsZVxuICovXG5FbGxpcHNlLnByb3RvdHlwZS5nZXRCb3VuZHMgPSBmdW5jdGlvbiBnZXRCb3VuZHMgKClcbntcbiAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh0aGlzLnggLSB0aGlzLndpZHRoLCB0aGlzLnkgLSB0aGlzLmhlaWdodCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xufTtcblxuLyoqXG4gKiBBIGNsYXNzIHRvIGRlZmluZSBhIHNoYXBlIHZpYSB1c2VyIGRlZmluZWQgY28tb3JpbmF0ZXMuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgUG9seWdvbiA9IGZ1bmN0aW9uIFBvbHlnb24oKVxue1xuICAgIHZhciBwb2ludHMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgcG9pbnRzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShwb2ludHNbMF0pKVxuICAgIHtcbiAgICAgICAgcG9pbnRzID0gcG9pbnRzWzBdO1xuICAgIH1cblxuICAgIC8vIGlmIHRoaXMgaXMgYW4gYXJyYXkgb2YgcG9pbnRzLCBjb252ZXJ0IGl0IHRvIGEgZmxhdCBhcnJheSBvZiBudW1iZXJzXG4gICAgaWYgKHBvaW50c1swXSBpbnN0YW5jZW9mIFBvaW50KVxuICAgIHtcbiAgICAgICAgdmFyIHAgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgcC5wdXNoKHBvaW50c1tpXS54LCBwb2ludHNbaV0ueSk7XG4gICAgICAgIH1cblxuICAgICAgICBwb2ludHMgPSBwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIHRoZSBwb2ludHMgb2YgdGhpcyBwb2x5Z29uXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJbXX1cbiAgICAgKi9cbiAgICB0aGlzLnBvaW50cyA9IHBvaW50cztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBvYmplY3QsIG1haW5seSB1c2VkIHRvIGF2b2lkIGBpbnN0YW5jZW9mYCBjaGVja3NcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBQSVhJLlNIQVBFUy5QT0xZXG4gICAgICogQHNlZSBQSVhJLlNIQVBFU1xuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IFNIQVBFUy5QT0xZO1xuXG4gICAgLyoqXG4gICAgICogYGZhbHNlYCBhZnRlciBtb3ZlVG8sIGB0cnVlYCBhZnRlciBgY2xvc2VQYXRoYC4gSW4gYWxsIG90aGVyIGNhc2VzIGl0IGlzIGB0cnVlYC5cbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICB0aGlzLmNsb3NlU3Ryb2tlID0gdHJ1ZTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgcG9seWdvblxuICpcbiAqIEByZXR1cm4ge1BJWEkuUG9seWdvbn0gYSBjb3B5IG9mIHRoZSBwb2x5Z29uXG4gKi9cblBvbHlnb24ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKClcbntcbiAgICB2YXIgcG9seWdvbiA9IG5ldyBQb2x5Z29uKHRoaXMucG9pbnRzLnNsaWNlKCkpO1xuXG4gICAgcG9seWdvbi5jbG9zZVN0cm9rZSA9IHRoaXMuY2xvc2VTdHJva2U7XG5cbiAgICByZXR1cm4gcG9seWdvbjtcbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24gYXJlIGNvbnRhaW5lZCB3aXRoaW4gdGhpcyBwb2x5Z29uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgWCBjb29yZGluYXRlIG9mIHRoZSBwb2ludCB0byB0ZXN0XG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHgveSBjb29yZGluYXRlcyBhcmUgd2l0aGluIHRoaXMgcG9seWdvblxuICovXG5Qb2x5Z29uLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zICh4LCB5KVxue1xuICAgIHZhciBpbnNpZGUgPSBmYWxzZTtcblxuICAgIC8vIHVzZSBzb21lIHJheWNhc3RpbmcgdG8gdGVzdCBoaXRzXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3N1YnN0YWNrL3BvaW50LWluLXBvbHlnb24vYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5wb2ludHMubGVuZ3RoIC8gMjtcblxuICAgIGZvciAodmFyIGkgPSAwLCBqID0gbGVuZ3RoIC0gMTsgaSA8IGxlbmd0aDsgaiA9IGkrKylcbiAgICB7XG4gICAgICAgIHZhciB4aSA9IHRoaXMucG9pbnRzW2kgKiAyXTtcbiAgICAgICAgdmFyIHlpID0gdGhpcy5wb2ludHNbKGkgKiAyKSArIDFdO1xuICAgICAgICB2YXIgeGogPSB0aGlzLnBvaW50c1tqICogMl07XG4gICAgICAgIHZhciB5aiA9IHRoaXMucG9pbnRzWyhqICogMikgKyAxXTtcbiAgICAgICAgdmFyIGludGVyc2VjdCA9ICgoeWkgPiB5KSAhPT0gKHlqID4geSkpICYmICh4IDwgKCh4aiAtIHhpKSAqICgoeSAtIHlpKSAvICh5aiAtIHlpKSkpICsgeGkpO1xuXG4gICAgICAgIGlmIChpbnRlcnNlY3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW5zaWRlO1xufTtcblxuLyoqXG4gKiBUaGUgUm91bmRlZCBSZWN0YW5nbGUgb2JqZWN0IGlzIGFuIGFyZWEgdGhhdCBoYXMgbmljZSByb3VuZGVkIGNvcm5lcnMsIGFzIGluZGljYXRlZCBieSBpdHNcbiAqIHRvcC1sZWZ0IGNvcm5lciBwb2ludCAoeCwgeSkgYW5kIGJ5IGl0cyB3aWR0aCBhbmQgaXRzIGhlaWdodCBhbmQgaXRzIHJhZGl1cy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBSb3VuZGVkUmVjdGFuZ2xlID0gZnVuY3Rpb24gUm91bmRlZFJlY3RhbmdsZSh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpXG57XG4gICAgaWYgKCB4ID09PSB2b2lkIDAgKSB4ID0gMDtcbiAgICBpZiAoIHkgPT09IHZvaWQgMCApIHkgPSAwO1xuICAgIGlmICggd2lkdGggPT09IHZvaWQgMCApIHdpZHRoID0gMDtcbiAgICBpZiAoIGhlaWdodCA9PT0gdm9pZCAwICkgaGVpZ2h0ID0gMDtcbiAgICBpZiAoIHJhZGl1cyA9PT0gdm9pZCAwICkgcmFkaXVzID0gMjA7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMueCA9IHg7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMueSA9IHk7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMjBcbiAgICAgKi9cbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBvYmplY3QsIG1haW5seSB1c2VkIHRvIGF2b2lkIGBpbnN0YW5jZW9mYCBjaGVja3NcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAZGVmYXVsdCBQSVhJLlNIQVBFUy5SUkVDXG4gICAgICogQHNlZSBQSVhJLlNIQVBFU1xuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IFNIQVBFUy5SUkVDO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhpcyBSb3VuZGVkIFJlY3RhbmdsZVxuICpcbiAqIEByZXR1cm4ge1BJWEkuUm91bmRlZFJlY3RhbmdsZX0gYSBjb3B5IG9mIHRoZSByb3VuZGVkIHJlY3RhbmdsZVxuICovXG5Sb3VuZGVkUmVjdGFuZ2xlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpXG57XG4gICAgcmV0dXJuIG5ldyBSb3VuZGVkUmVjdGFuZ2xlKHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5yYWRpdXMpO1xufTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgeCBhbmQgeSBjb29yZGluYXRlcyBnaXZlbiBhcmUgY29udGFpbmVkIHdpdGhpbiB0aGlzIFJvdW5kZWQgUmVjdGFuZ2xlXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgWCBjb29yZGluYXRlIG9mIHRoZSBwb2ludCB0byB0ZXN0XG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHgveSBjb29yZGluYXRlcyBhcmUgd2l0aGluIHRoaXMgUm91bmRlZCBSZWN0YW5nbGVcbiAqL1xuUm91bmRlZFJlY3RhbmdsZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyAoeCwgeSlcbntcbiAgICBpZiAodGhpcy53aWR0aCA8PSAwIHx8IHRoaXMuaGVpZ2h0IDw9IDApXG4gICAge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh4ID49IHRoaXMueCAmJiB4IDw9IHRoaXMueCArIHRoaXMud2lkdGgpXG4gICAge1xuICAgICAgICBpZiAoeSA+PSB0aGlzLnkgJiYgeSA8PSB0aGlzLnkgKyB0aGlzLmhlaWdodClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCh5ID49IHRoaXMueSArIHRoaXMucmFkaXVzICYmIHkgPD0gdGhpcy55ICsgdGhpcy5oZWlnaHQgLSB0aGlzLnJhZGl1cylcbiAgICAgICAgICAgIHx8ICh4ID49IHRoaXMueCArIHRoaXMucmFkaXVzICYmIHggPD0gdGhpcy54ICsgdGhpcy53aWR0aCAtIHRoaXMucmFkaXVzKSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkeCA9IHggLSAodGhpcy54ICsgdGhpcy5yYWRpdXMpO1xuICAgICAgICAgICAgdmFyIGR5ID0geSAtICh0aGlzLnkgKyB0aGlzLnJhZGl1cyk7XG4gICAgICAgICAgICB2YXIgcmFkaXVzMiA9IHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXM7XG5cbiAgICAgICAgICAgIGlmICgoZHggKiBkeCkgKyAoZHkgKiBkeSkgPD0gcmFkaXVzMilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGR4ID0geCAtICh0aGlzLnggKyB0aGlzLndpZHRoIC0gdGhpcy5yYWRpdXMpO1xuICAgICAgICAgICAgaWYgKChkeCAqIGR4KSArIChkeSAqIGR5KSA8PSByYWRpdXMyKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHkgPSB5IC0gKHRoaXMueSArIHRoaXMuaGVpZ2h0IC0gdGhpcy5yYWRpdXMpO1xuICAgICAgICAgICAgaWYgKChkeCAqIGR4KSArIChkeSAqIGR5KSA8PSByYWRpdXMyKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHggPSB4IC0gKHRoaXMueCArIHRoaXMucmFkaXVzKTtcbiAgICAgICAgICAgIGlmICgoZHggKiBkeCkgKyAoZHkgKiBkeSkgPD0gcmFkaXVzMilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogTWF0aCBjbGFzc2VzIGFuZCB1dGlsaXRpZXMgbWl4ZWQgaW50byBQSVhJIG5hbWVzcGFjZS5cbiAqXG4gKiBAbGVuZHMgUElYSVxuICovXG5cbmV4cG9ydCB7IENpcmNsZSwgREVHX1RPX1JBRCwgRWxsaXBzZSwgR3JvdXBEOCwgTWF0cml4LCBPYnNlcnZhYmxlUG9pbnQsIFBJXzIsIFBvaW50LCBQb2x5Z29uLCBSQURfVE9fREVHLCBSZWN0YW5nbGUsIFJvdW5kZWRSZWN0YW5nbGUsIFNIQVBFUywgVHJhbnNmb3JtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXRoLmVzLmpzLm1hcFxuIiwiLyohXG4gKiBAcGl4aS9kaXNwbGF5IC0gdjUuMS4zXG4gKiBDb21waWxlZCBNb24sIDA5IFNlcCAyMDE5IDA0OjUxOjUzIFVUQ1xuICpcbiAqIEBwaXhpL2Rpc3BsYXkgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovXG5pbXBvcnQgeyBzZXR0aW5ncyB9IGZyb20gJ0BwaXhpL3NldHRpbmdzJztcbmltcG9ydCB7IFJlY3RhbmdsZSwgUkFEX1RPX0RFRywgREVHX1RPX1JBRCwgVHJhbnNmb3JtIH0gZnJvbSAnQHBpeGkvbWF0aCc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIHJlbW92ZUl0ZW1zIH0gZnJvbSAnQHBpeGkvdXRpbHMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBjb250YWluZXIgcHJvcGVydHkgJ3NvcnRhYmxlQ2hpbGRyZW4nLlxuICogSWYgc2V0IHRvIHRydWUsIHRoZSBjb250YWluZXIgd2lsbCBzb3J0IGl0cyBjaGlsZHJlbiBieSB6SW5kZXggdmFsdWVcbiAqIHdoZW4gdXBkYXRlVHJhbnNmb3JtKCkgaXMgY2FsbGVkLCBvciBtYW51YWxseSBpZiBzb3J0Q2hpbGRyZW4oKSBpcyBjYWxsZWQuXG4gKlxuICogVGhpcyBhY3R1YWxseSBjaGFuZ2VzIHRoZSBvcmRlciBvZiBlbGVtZW50cyBpbiB0aGUgYXJyYXksIHNvIHNob3VsZCBiZSB0cmVhdGVkXG4gKiBhcyBhIGJhc2ljIHNvbHV0aW9uIHRoYXQgaXMgbm90IHBlcmZvcm1hbnQgY29tcGFyZWQgdG8gb3RoZXIgc29sdXRpb25zLFxuICogc3VjaCBhcyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vcGl4aWpzL3BpeGktZGlzcGxheVxuICpcbiAqIEFsc28gYmUgYXdhcmUgb2YgdGhhdCB0aGlzIG1heSBub3Qgd29yayBuaWNlbHkgd2l0aCB0aGUgYWRkQ2hpbGRBdCgpIGZ1bmN0aW9uLFxuICogYXMgdGhlIHpJbmRleCBzb3J0aW5nIG1heSBjYXVzZSB0aGUgY2hpbGQgdG8gYXV0b21hdGljYWxseSBzb3J0ZWQgdG8gYW5vdGhlciBwb3NpdGlvbi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIFNPUlRBQkxFX0NISUxEUkVOXG4gKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVmYXVsdCBmYWxzZVxuICovXG5zZXR0aW5ncy5TT1JUQUJMRV9DSElMRFJFTiA9IGZhbHNlO1xuXG4vKipcbiAqICdCdWlsZGVyJyBwYXR0ZXJuIGZvciBib3VuZHMgcmVjdGFuZ2xlcy5cbiAqXG4gKiBUaGlzIGNvdWxkIGJlIGNhbGxlZCBhbiBBeGlzLUFsaWduZWQgQm91bmRpbmcgQm94LlxuICogSXQgaXMgbm90IGFuIGFjdHVhbCBzaGFwZS4gSXQgaXMgYSBtdXRhYmxlIHRoaW5nOyBubyAnRU1QVFknIG9yIHRob3NlIGtpbmQgb2YgcHJvYmxlbXMuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgQm91bmRzID0gZnVuY3Rpb24gQm91bmRzKClcbntcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMubWluWCA9IEluZmluaXR5O1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLm1pblkgPSBJbmZpbml0eTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy5tYXhYID0gLUluZmluaXR5O1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLm1heFkgPSAtSW5maW5pdHk7XG5cbiAgICB0aGlzLnJlY3QgPSBudWxsO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYm91bmRzIGFyZSBlbXB0eS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGVtcHR5LlxuICovXG5Cb3VuZHMucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiBpc0VtcHR5ICgpXG57XG4gICAgcmV0dXJuIHRoaXMubWluWCA+IHRoaXMubWF4WCB8fCB0aGlzLm1pblkgPiB0aGlzLm1heFk7XG59O1xuXG4vKipcbiAqIENsZWFycyB0aGUgYm91bmRzIGFuZCByZXNldHMuXG4gKlxuICovXG5Cb3VuZHMucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKClcbntcbiAgICB0aGlzLnVwZGF0ZUlEKys7XG5cbiAgICB0aGlzLm1pblggPSBJbmZpbml0eTtcbiAgICB0aGlzLm1pblkgPSBJbmZpbml0eTtcbiAgICB0aGlzLm1heFggPSAtSW5maW5pdHk7XG4gICAgdGhpcy5tYXhZID0gLUluZmluaXR5O1xufTtcblxuLyoqXG4gKiBDYW4gcmV0dXJuIFJlY3RhbmdsZS5FTVBUWSBjb25zdGFudCwgZWl0aGVyIGNvbnN0cnVjdCBuZXcgcmVjdGFuZ2xlLCBlaXRoZXIgdXNlIHlvdXIgcmVjdGFuZ2xlXG4gKiBJdCBpcyBub3QgZ3VhcmFudGVlZCB0aGF0IGl0IHdpbGwgcmV0dXJuIHRlbXBSZWN0XG4gKlxuICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gcmVjdCAtIHRlbXBvcmFyeSBvYmplY3Qgd2lsbCBiZSB1c2VkIGlmIEFBQkIgaXMgbm90IGVtcHR5XG4gKiBAcmV0dXJucyB7UElYSS5SZWN0YW5nbGV9IEEgcmVjdGFuZ2xlIG9mIHRoZSBib3VuZHNcbiAqL1xuQm91bmRzLnByb3RvdHlwZS5nZXRSZWN0YW5nbGUgPSBmdW5jdGlvbiBnZXRSZWN0YW5nbGUgKHJlY3QpXG57XG4gICAgaWYgKHRoaXMubWluWCA+IHRoaXMubWF4WCB8fCB0aGlzLm1pblkgPiB0aGlzLm1heFkpXG4gICAge1xuICAgICAgICByZXR1cm4gUmVjdGFuZ2xlLkVNUFRZO1xuICAgIH1cblxuICAgIHJlY3QgPSByZWN0IHx8IG5ldyBSZWN0YW5nbGUoMCwgMCwgMSwgMSk7XG5cbiAgICByZWN0LnggPSB0aGlzLm1pblg7XG4gICAgcmVjdC55ID0gdGhpcy5taW5ZO1xuICAgIHJlY3Qud2lkdGggPSB0aGlzLm1heFggLSB0aGlzLm1pblg7XG4gICAgcmVjdC5oZWlnaHQgPSB0aGlzLm1heFkgLSB0aGlzLm1pblk7XG5cbiAgICByZXR1cm4gcmVjdDtcbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgaW5saW5lZCB3aGVuIGl0cyBwb3NzaWJsZS5cbiAqXG4gKiBAcGFyYW0ge1BJWEkuUG9pbnR9IHBvaW50IC0gVGhlIHBvaW50IHRvIGFkZC5cbiAqL1xuQm91bmRzLnByb3RvdHlwZS5hZGRQb2ludCA9IGZ1bmN0aW9uIGFkZFBvaW50IChwb2ludClcbntcbiAgICB0aGlzLm1pblggPSBNYXRoLm1pbih0aGlzLm1pblgsIHBvaW50LngpO1xuICAgIHRoaXMubWF4WCA9IE1hdGgubWF4KHRoaXMubWF4WCwgcG9pbnQueCk7XG4gICAgdGhpcy5taW5ZID0gTWF0aC5taW4odGhpcy5taW5ZLCBwb2ludC55KTtcbiAgICB0aGlzLm1heFkgPSBNYXRoLm1heCh0aGlzLm1heFksIHBvaW50LnkpO1xufTtcblxuLyoqXG4gKiBBZGRzIGEgcXVhZCwgbm90IHRyYW5zZm9ybWVkXG4gKlxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IHZlcnRpY2VzIC0gVGhlIHZlcnRzIHRvIGFkZC5cbiAqL1xuQm91bmRzLnByb3RvdHlwZS5hZGRRdWFkID0gZnVuY3Rpb24gYWRkUXVhZCAodmVydGljZXMpXG57XG4gICAgdmFyIG1pblggPSB0aGlzLm1pblg7XG4gICAgdmFyIG1pblkgPSB0aGlzLm1pblk7XG4gICAgdmFyIG1heFggPSB0aGlzLm1heFg7XG4gICAgdmFyIG1heFkgPSB0aGlzLm1heFk7XG5cbiAgICB2YXIgeCA9IHZlcnRpY2VzWzBdO1xuICAgIHZhciB5ID0gdmVydGljZXNbMV07XG5cbiAgICBtaW5YID0geCA8IG1pblggPyB4IDogbWluWDtcbiAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICBtYXhYID0geCA+IG1heFggPyB4IDogbWF4WDtcbiAgICBtYXhZID0geSA+IG1heFkgPyB5IDogbWF4WTtcblxuICAgIHggPSB2ZXJ0aWNlc1syXTtcbiAgICB5ID0gdmVydGljZXNbM107XG4gICAgbWluWCA9IHggPCBtaW5YID8geCA6IG1pblg7XG4gICAgbWluWSA9IHkgPCBtaW5ZID8geSA6IG1pblk7XG4gICAgbWF4WCA9IHggPiBtYXhYID8geCA6IG1heFg7XG4gICAgbWF4WSA9IHkgPiBtYXhZID8geSA6IG1heFk7XG5cbiAgICB4ID0gdmVydGljZXNbNF07XG4gICAgeSA9IHZlcnRpY2VzWzVdO1xuICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgIG1pblkgPSB5IDwgbWluWSA/IHkgOiBtaW5ZO1xuICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuXG4gICAgeCA9IHZlcnRpY2VzWzZdO1xuICAgIHkgPSB2ZXJ0aWNlc1s3XTtcbiAgICBtaW5YID0geCA8IG1pblggPyB4IDogbWluWDtcbiAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICBtYXhYID0geCA+IG1heFggPyB4IDogbWF4WDtcbiAgICBtYXhZID0geSA+IG1heFkgPyB5IDogbWF4WTtcblxuICAgIHRoaXMubWluWCA9IG1pblg7XG4gICAgdGhpcy5taW5ZID0gbWluWTtcbiAgICB0aGlzLm1heFggPSBtYXhYO1xuICAgIHRoaXMubWF4WSA9IG1heFk7XG59O1xuXG4vKipcbiAqIEFkZHMgc3ByaXRlIGZyYW1lLCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcGFyYW0ge1BJWEkuVHJhbnNmb3JtfSB0cmFuc2Zvcm0gLSBUT0RPXG4gKiBAcGFyYW0ge251bWJlcn0geDAgLSBUT0RPXG4gKiBAcGFyYW0ge251bWJlcn0geTAgLSBUT0RPXG4gKiBAcGFyYW0ge251bWJlcn0geDEgLSBUT0RPXG4gKiBAcGFyYW0ge251bWJlcn0geTEgLSBUT0RPXG4gKi9cbkJvdW5kcy5wcm90b3R5cGUuYWRkRnJhbWUgPSBmdW5jdGlvbiBhZGRGcmFtZSAodHJhbnNmb3JtLCB4MCwgeTAsIHgxLCB5MSlcbntcbiAgICB2YXIgbWF0cml4ID0gdHJhbnNmb3JtLndvcmxkVHJhbnNmb3JtO1xuICAgIHZhciBhID0gbWF0cml4LmE7XG4gICAgdmFyIGIgPSBtYXRyaXguYjtcbiAgICB2YXIgYyA9IG1hdHJpeC5jO1xuICAgIHZhciBkID0gbWF0cml4LmQ7XG4gICAgdmFyIHR4ID0gbWF0cml4LnR4O1xuICAgIHZhciB0eSA9IG1hdHJpeC50eTtcblxuICAgIHZhciBtaW5YID0gdGhpcy5taW5YO1xuICAgIHZhciBtaW5ZID0gdGhpcy5taW5ZO1xuICAgIHZhciBtYXhYID0gdGhpcy5tYXhYO1xuICAgIHZhciBtYXhZID0gdGhpcy5tYXhZO1xuXG4gICAgdmFyIHggPSAoYSAqIHgwKSArIChjICogeTApICsgdHg7XG4gICAgdmFyIHkgPSAoYiAqIHgwKSArIChkICogeTApICsgdHk7XG5cbiAgICBtaW5YID0geCA8IG1pblggPyB4IDogbWluWDtcbiAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICBtYXhYID0geCA+IG1heFggPyB4IDogbWF4WDtcbiAgICBtYXhZID0geSA+IG1heFkgPyB5IDogbWF4WTtcblxuICAgIHggPSAoYSAqIHgxKSArIChjICogeTApICsgdHg7XG4gICAgeSA9IChiICogeDEpICsgKGQgKiB5MCkgKyB0eTtcbiAgICBtaW5YID0geCA8IG1pblggPyB4IDogbWluWDtcbiAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICBtYXhYID0geCA+IG1heFggPyB4IDogbWF4WDtcbiAgICBtYXhZID0geSA+IG1heFkgPyB5IDogbWF4WTtcblxuICAgIHggPSAoYSAqIHgwKSArIChjICogeTEpICsgdHg7XG4gICAgeSA9IChiICogeDApICsgKGQgKiB5MSkgKyB0eTtcbiAgICBtaW5YID0geCA8IG1pblggPyB4IDogbWluWDtcbiAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICBtYXhYID0geCA+IG1heFggPyB4IDogbWF4WDtcbiAgICBtYXhZID0geSA+IG1heFkgPyB5IDogbWF4WTtcblxuICAgIHggPSAoYSAqIHgxKSArIChjICogeTEpICsgdHg7XG4gICAgeSA9IChiICogeDEpICsgKGQgKiB5MSkgKyB0eTtcbiAgICBtaW5YID0geCA8IG1pblggPyB4IDogbWluWDtcbiAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICBtYXhYID0geCA+IG1heFggPyB4IDogbWF4WDtcbiAgICBtYXhZID0geSA+IG1heFkgPyB5IDogbWF4WTtcblxuICAgIHRoaXMubWluWCA9IG1pblg7XG4gICAgdGhpcy5taW5ZID0gbWluWTtcbiAgICB0aGlzLm1heFggPSBtYXhYO1xuICAgIHRoaXMubWF4WSA9IG1heFk7XG59O1xuXG4vKipcbiAqIEFkZHMgc2NyZWVuIHZlcnRpY2VzIGZyb20gYXJyYXlcbiAqXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gdmVydGV4RGF0YSAtIGNhbGN1bGF0ZWQgdmVydGljZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpbk9mZnNldCAtIGJlZ2luIG9mZnNldFxuICogQHBhcmFtIHtudW1iZXJ9IGVuZE9mZnNldCAtIGVuZCBvZmZzZXQsIGV4Y2x1ZGVkXG4gKi9cbkJvdW5kcy5wcm90b3R5cGUuYWRkVmVydGV4RGF0YSA9IGZ1bmN0aW9uIGFkZFZlcnRleERhdGEgKHZlcnRleERhdGEsIGJlZ2luT2Zmc2V0LCBlbmRPZmZzZXQpXG57XG4gICAgdmFyIG1pblggPSB0aGlzLm1pblg7XG4gICAgdmFyIG1pblkgPSB0aGlzLm1pblk7XG4gICAgdmFyIG1heFggPSB0aGlzLm1heFg7XG4gICAgdmFyIG1heFkgPSB0aGlzLm1heFk7XG5cbiAgICBmb3IgKHZhciBpID0gYmVnaW5PZmZzZXQ7IGkgPCBlbmRPZmZzZXQ7IGkgKz0gMilcbiAgICB7XG4gICAgICAgIHZhciB4ID0gdmVydGV4RGF0YVtpXTtcbiAgICAgICAgdmFyIHkgPSB2ZXJ0ZXhEYXRhW2kgKyAxXTtcblxuICAgICAgICBtaW5YID0geCA8IG1pblggPyB4IDogbWluWDtcbiAgICAgICAgbWluWSA9IHkgPCBtaW5ZID8geSA6IG1pblk7XG4gICAgICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgICAgICBtYXhZID0geSA+IG1heFkgPyB5IDogbWF4WTtcbiAgICB9XG5cbiAgICB0aGlzLm1pblggPSBtaW5YO1xuICAgIHRoaXMubWluWSA9IG1pblk7XG4gICAgdGhpcy5tYXhYID0gbWF4WDtcbiAgICB0aGlzLm1heFkgPSBtYXhZO1xufTtcblxuLyoqXG4gKiBBZGQgYW4gYXJyYXkgb2YgbWVzaCB2ZXJ0aWNlc1xuICpcbiAqIEBwYXJhbSB7UElYSS5UcmFuc2Zvcm19IHRyYW5zZm9ybSAtIG1lc2ggdHJhbnNmb3JtXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gdmVydGljZXMgLSBtZXNoIGNvb3JkaW5hdGVzIGluIGFycmF5XG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5PZmZzZXQgLSBiZWdpbiBvZmZzZXRcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRPZmZzZXQgLSBlbmQgb2Zmc2V0LCBleGNsdWRlZFxuICovXG5Cb3VuZHMucHJvdG90eXBlLmFkZFZlcnRpY2VzID0gZnVuY3Rpb24gYWRkVmVydGljZXMgKHRyYW5zZm9ybSwgdmVydGljZXMsIGJlZ2luT2Zmc2V0LCBlbmRPZmZzZXQpXG57XG4gICAgdmFyIG1hdHJpeCA9IHRyYW5zZm9ybS53b3JsZFRyYW5zZm9ybTtcbiAgICB2YXIgYSA9IG1hdHJpeC5hO1xuICAgIHZhciBiID0gbWF0cml4LmI7XG4gICAgdmFyIGMgPSBtYXRyaXguYztcbiAgICB2YXIgZCA9IG1hdHJpeC5kO1xuICAgIHZhciB0eCA9IG1hdHJpeC50eDtcbiAgICB2YXIgdHkgPSBtYXRyaXgudHk7XG5cbiAgICB2YXIgbWluWCA9IHRoaXMubWluWDtcbiAgICB2YXIgbWluWSA9IHRoaXMubWluWTtcbiAgICB2YXIgbWF4WCA9IHRoaXMubWF4WDtcbiAgICB2YXIgbWF4WSA9IHRoaXMubWF4WTtcblxuICAgIGZvciAodmFyIGkgPSBiZWdpbk9mZnNldDsgaSA8IGVuZE9mZnNldDsgaSArPSAyKVxuICAgIHtcbiAgICAgICAgdmFyIHJhd1ggPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgdmFyIHJhd1kgPSB2ZXJ0aWNlc1tpICsgMV07XG4gICAgICAgIHZhciB4ID0gKGEgKiByYXdYKSArIChjICogcmF3WSkgKyB0eDtcbiAgICAgICAgdmFyIHkgPSAoZCAqIHJhd1kpICsgKGIgKiByYXdYKSArIHR5O1xuXG4gICAgICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgICAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICAgICAgbWF4WCA9IHggPiBtYXhYID8geCA6IG1heFg7XG4gICAgICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuICAgIH1cblxuICAgIHRoaXMubWluWCA9IG1pblg7XG4gICAgdGhpcy5taW5ZID0gbWluWTtcbiAgICB0aGlzLm1heFggPSBtYXhYO1xuICAgIHRoaXMubWF4WSA9IG1heFk7XG59O1xuXG4vKipcbiAqIEFkZHMgb3RoZXIgQm91bmRzXG4gKlxuICogQHBhcmFtIHtQSVhJLkJvdW5kc30gYm91bmRzIC0gVE9ET1xuICovXG5Cb3VuZHMucHJvdG90eXBlLmFkZEJvdW5kcyA9IGZ1bmN0aW9uIGFkZEJvdW5kcyAoYm91bmRzKVxue1xuICAgIHZhciBtaW5YID0gdGhpcy5taW5YO1xuICAgIHZhciBtaW5ZID0gdGhpcy5taW5ZO1xuICAgIHZhciBtYXhYID0gdGhpcy5tYXhYO1xuICAgIHZhciBtYXhZID0gdGhpcy5tYXhZO1xuXG4gICAgdGhpcy5taW5YID0gYm91bmRzLm1pblggPCBtaW5YID8gYm91bmRzLm1pblggOiBtaW5YO1xuICAgIHRoaXMubWluWSA9IGJvdW5kcy5taW5ZIDwgbWluWSA/IGJvdW5kcy5taW5ZIDogbWluWTtcbiAgICB0aGlzLm1heFggPSBib3VuZHMubWF4WCA+IG1heFggPyBib3VuZHMubWF4WCA6IG1heFg7XG4gICAgdGhpcy5tYXhZID0gYm91bmRzLm1heFkgPiBtYXhZID8gYm91bmRzLm1heFkgOiBtYXhZO1xufTtcblxuLyoqXG4gKiBBZGRzIG90aGVyIEJvdW5kcywgbWFza2VkIHdpdGggQm91bmRzXG4gKlxuICogQHBhcmFtIHtQSVhJLkJvdW5kc30gYm91bmRzIC0gVE9ET1xuICogQHBhcmFtIHtQSVhJLkJvdW5kc30gbWFzayAtIFRPRE9cbiAqL1xuQm91bmRzLnByb3RvdHlwZS5hZGRCb3VuZHNNYXNrID0gZnVuY3Rpb24gYWRkQm91bmRzTWFzayAoYm91bmRzLCBtYXNrKVxue1xuICAgIHZhciBfbWluWCA9IGJvdW5kcy5taW5YID4gbWFzay5taW5YID8gYm91bmRzLm1pblggOiBtYXNrLm1pblg7XG4gICAgdmFyIF9taW5ZID0gYm91bmRzLm1pblkgPiBtYXNrLm1pblkgPyBib3VuZHMubWluWSA6IG1hc2subWluWTtcbiAgICB2YXIgX21heFggPSBib3VuZHMubWF4WCA8IG1hc2subWF4WCA/IGJvdW5kcy5tYXhYIDogbWFzay5tYXhYO1xuICAgIHZhciBfbWF4WSA9IGJvdW5kcy5tYXhZIDwgbWFzay5tYXhZID8gYm91bmRzLm1heFkgOiBtYXNrLm1heFk7XG5cbiAgICBpZiAoX21pblggPD0gX21heFggJiYgX21pblkgPD0gX21heFkpXG4gICAge1xuICAgICAgICB2YXIgbWluWCA9IHRoaXMubWluWDtcbiAgICAgICAgdmFyIG1pblkgPSB0aGlzLm1pblk7XG4gICAgICAgIHZhciBtYXhYID0gdGhpcy5tYXhYO1xuICAgICAgICB2YXIgbWF4WSA9IHRoaXMubWF4WTtcblxuICAgICAgICB0aGlzLm1pblggPSBfbWluWCA8IG1pblggPyBfbWluWCA6IG1pblg7XG4gICAgICAgIHRoaXMubWluWSA9IF9taW5ZIDwgbWluWSA/IF9taW5ZIDogbWluWTtcbiAgICAgICAgdGhpcy5tYXhYID0gX21heFggPiBtYXhYID8gX21heFggOiBtYXhYO1xuICAgICAgICB0aGlzLm1heFkgPSBfbWF4WSA+IG1heFkgPyBfbWF4WSA6IG1heFk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBBZGRzIG90aGVyIEJvdW5kcywgbWFza2VkIHdpdGggUmVjdGFuZ2xlXG4gKlxuICogQHBhcmFtIHtQSVhJLkJvdW5kc30gYm91bmRzIC0gVE9ET1xuICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gYXJlYSAtIFRPRE9cbiAqL1xuQm91bmRzLnByb3RvdHlwZS5hZGRCb3VuZHNBcmVhID0gZnVuY3Rpb24gYWRkQm91bmRzQXJlYSAoYm91bmRzLCBhcmVhKVxue1xuICAgIHZhciBfbWluWCA9IGJvdW5kcy5taW5YID4gYXJlYS54ID8gYm91bmRzLm1pblggOiBhcmVhLng7XG4gICAgdmFyIF9taW5ZID0gYm91bmRzLm1pblkgPiBhcmVhLnkgPyBib3VuZHMubWluWSA6IGFyZWEueTtcbiAgICB2YXIgX21heFggPSBib3VuZHMubWF4WCA8IGFyZWEueCArIGFyZWEud2lkdGggPyBib3VuZHMubWF4WCA6IChhcmVhLnggKyBhcmVhLndpZHRoKTtcbiAgICB2YXIgX21heFkgPSBib3VuZHMubWF4WSA8IGFyZWEueSArIGFyZWEuaGVpZ2h0ID8gYm91bmRzLm1heFkgOiAoYXJlYS55ICsgYXJlYS5oZWlnaHQpO1xuXG4gICAgaWYgKF9taW5YIDw9IF9tYXhYICYmIF9taW5ZIDw9IF9tYXhZKVxuICAgIHtcbiAgICAgICAgdmFyIG1pblggPSB0aGlzLm1pblg7XG4gICAgICAgIHZhciBtaW5ZID0gdGhpcy5taW5ZO1xuICAgICAgICB2YXIgbWF4WCA9IHRoaXMubWF4WDtcbiAgICAgICAgdmFyIG1heFkgPSB0aGlzLm1heFk7XG5cbiAgICAgICAgdGhpcy5taW5YID0gX21pblggPCBtaW5YID8gX21pblggOiBtaW5YO1xuICAgICAgICB0aGlzLm1pblkgPSBfbWluWSA8IG1pblkgPyBfbWluWSA6IG1pblk7XG4gICAgICAgIHRoaXMubWF4WCA9IF9tYXhYID4gbWF4WCA/IF9tYXhYIDogbWF4WDtcbiAgICAgICAgdGhpcy5tYXhZID0gX21heFkgPiBtYXhZID8gX21heFkgOiBtYXhZO1xuICAgIH1cbn07XG5cbi8vIF90ZW1wRGlzcGxheU9iamVjdFBhcmVudCA9IG5ldyBEaXNwbGF5T2JqZWN0KCk7XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBvYmplY3RzIHRoYXQgYXJlIHJlbmRlcmVkIG9uIHRoZSBzY3JlZW4uXG4gKlxuICogVGhpcyBpcyBhbiBhYnN0cmFjdCBjbGFzcyBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIG9uIGl0cyBvd247IHJhdGhlciBpdCBzaG91bGQgYmUgZXh0ZW5kZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLnV0aWxzLkV2ZW50RW1pdHRlclxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIERpc3BsYXlPYmplY3QgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChFdmVudEVtaXR0ZXIpIHtcbiAgICBmdW5jdGlvbiBEaXNwbGF5T2JqZWN0KClcbiAgICB7XG4gICAgICAgIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHRoaXMudGVtcERpc3BsYXlPYmplY3RQYXJlbnQgPSBudWxsO1xuXG4gICAgICAgIC8vIFRPRE86IG5lZWQgdG8gY3JlYXRlIFRyYW5zZm9ybSBmcm9tIGZhY3RvcnlcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdvcmxkIHRyYW5zZm9ybSBhbmQgbG9jYWwgdHJhbnNmb3JtIG9mIHRoaXMgb2JqZWN0LlxuICAgICAgICAgKiBUaGlzIHdpbGwgYmVjb21lIHJlYWQtb25seSBsYXRlciwgcGxlYXNlIGRvIG5vdCBhc3NpZ24gYW55dGhpbmcgdGhlcmUgdW5sZXNzIHlvdSBrbm93IHdoYXQgYXJlIHlvdSBkb2luZy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5UcmFuc2Zvcm19XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0oKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9wYWNpdHkgb2YgdGhlIG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hbHBoYSA9IDE7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB2aXNpYmlsaXR5IG9mIHRoZSBvYmplY3QuIElmIGZhbHNlIHRoZSBvYmplY3Qgd2lsbCBub3QgYmUgZHJhd24sIGFuZFxuICAgICAgICAgKiB0aGUgdXBkYXRlVHJhbnNmb3JtIGZ1bmN0aW9uIHdpbGwgbm90IGJlIGNhbGxlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogT25seSBhZmZlY3RzIHJlY3Vyc2l2ZSBjYWxscyBmcm9tIHBhcmVudC4gWW91IGNhbiBhc2sgZm9yIGJvdW5kcyBvciBjYWxsIHVwZGF0ZVRyYW5zZm9ybSBtYW51YWxseS5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbiB0aGlzIG9iamVjdCBiZSByZW5kZXJlZCwgaWYgZmFsc2UgdGhlIG9iamVjdCB3aWxsIG5vdCBiZSBkcmF3biBidXQgdGhlIHVwZGF0ZVRyYW5zZm9ybVxuICAgICAgICAgKiBtZXRob2RzIHdpbGwgc3RpbGwgYmUgY2FsbGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBPbmx5IGFmZmVjdHMgcmVjdXJzaXZlIGNhbGxzIGZyb20gcGFyZW50LiBZb3UgY2FuIGFzayBmb3IgYm91bmRzIG1hbnVhbGx5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZW5kZXJhYmxlID0gdHJ1ZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRpc3BsYXkgb2JqZWN0IGNvbnRhaW5lciB0aGF0IGNvbnRhaW5zIHRoaXMgZGlzcGxheSBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuQ29udGFpbmVyfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG11bHRpcGxpZWQgYWxwaGEgb2YgdGhlIGRpc3BsYXlPYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndvcmxkQWxwaGEgPSAxO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGljaCBpbmRleCBpbiB0aGUgY2hpbGRyZW4gYXJyYXkgdGhlIGRpc3BsYXkgY29tcG9uZW50IHdhcyBiZWZvcmUgdGhlIHByZXZpb3VzIHpJbmRleCBzb3J0LlxuICAgICAgICAgKiBVc2VkIGJ5IGNvbnRhaW5lcnMgdG8gaGVscCBzb3J0IG9iamVjdHMgd2l0aCB0aGUgc2FtZSB6SW5kZXgsIGJ5IHVzaW5nIHByZXZpb3VzIGFycmF5IGluZGV4IGFzIHRoZSBkZWNpZGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2xhc3RTb3J0ZWRJbmRleCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB6SW5kZXggb2YgdGhlIGRpc3BsYXlPYmplY3QuXG4gICAgICAgICAqIEEgaGlnaGVyIHZhbHVlIHdpbGwgbWVhbiBpdCB3aWxsIGJlIHJlbmRlcmVkIG9uIHRvcCBvZiBvdGhlciBkaXNwbGF5T2JqZWN0cyB3aXRoaW4gdGhlIHNhbWUgY29udGFpbmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3pJbmRleCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBhcmVhIHRoZSBmaWx0ZXIgaXMgYXBwbGllZCB0by4gVGhpcyBpcyB1c2VkIGFzIG1vcmUgb2YgYW4gb3B0aW1pemF0aW9uXG4gICAgICAgICAqIHJhdGhlciB0aGFuIGZpZ3VyaW5nIG91dCB0aGUgZGltZW5zaW9ucyBvZiB0aGUgZGlzcGxheU9iamVjdCBlYWNoIGZyYW1lIHlvdSBjYW4gc2V0IHRoaXMgcmVjdGFuZ2xlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBBbHNvIHdvcmtzIGFzIGFuIGludGVyYWN0aW9uIG1hc2suXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIgez9QSVhJLlJlY3RhbmdsZX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsdGVyQXJlYSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIGZpbHRlcnMgZm9yIHRoZSBkaXNwbGF5T2JqZWN0LlxuICAgICAgICAgKiAqIElNUE9SVEFOVDogVGhpcyBpcyBhIFdlYkdMIG9ubHkgZmVhdHVyZSBhbmQgd2lsbCBiZSBpZ25vcmVkIGJ5IHRoZSBjYW52YXMgcmVuZGVyZXIuXG4gICAgICAgICAqIFRvIHJlbW92ZSBmaWx0ZXJzIHNpbXBseSBzZXQgdGhpcyBwcm9wZXJ0eSB0byBgJ251bGwnYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7P1BJWEkuRmlsdGVyW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZpbHRlcnMgPSBudWxsO1xuICAgICAgICB0aGlzLl9lbmFibGVkRmlsdGVycyA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBib3VuZHMgb2JqZWN0LCB0aGlzIGlzIHVzZWQgdG8gY2FsY3VsYXRlIGFuZCBzdG9yZSB0aGUgYm91bmRzIG9mIHRoZSBkaXNwbGF5T2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkJvdW5kc31cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYm91bmRzID0gbmV3IEJvdW5kcygpO1xuICAgICAgICB0aGlzLl9ib3VuZHNJRCA9IDA7XG4gICAgICAgIHRoaXMuX2xhc3RCb3VuZHNJRCA9IC0xO1xuICAgICAgICB0aGlzLl9ib3VuZHNSZWN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbG9jYWxCb3VuZHNSZWN0ID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9yaWdpbmFsLCBjYWNoZWQgbWFzayBvZiB0aGUgb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkdyYXBoaWNzfFBJWEkuU3ByaXRlfG51bGx9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX21hc2sgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIHRoaXMgRGlzcGxheU9iamVjdCBpcyBhZGRlZCB0byBhIENvbnRhaW5lci5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV2ZW50IFBJWEkuRGlzcGxheU9iamVjdCNhZGRlZFxuICAgICAgICAgKiBAcGFyYW0ge1BJWEkuQ29udGFpbmVyfSBjb250YWluZXIgLSBUaGUgY29udGFpbmVyIGFkZGVkIHRvLlxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgd2hlbiB0aGlzIERpc3BsYXlPYmplY3QgaXMgcmVtb3ZlZCBmcm9tIGEgQ29udGFpbmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgUElYSS5EaXNwbGF5T2JqZWN0I3JlbW92ZWRcbiAgICAgICAgICogQHBhcmFtIHtQSVhJLkNvbnRhaW5lcn0gY29udGFpbmVyIC0gVGhlIGNvbnRhaW5lciByZW1vdmVkIGZyb20uXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgb2JqZWN0IGhhcyBiZWVuIGRlc3Ryb3llZCB2aWEgZGVzdHJveSgpLiBJZiB0cnVlLCBpdCBzaG91bGQgbm90IGJlIHVzZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VkIHRvIGZhc3QgY2hlY2sgaWYgYSBzcHJpdGUgaXMuLiBhIHNwcml0ZSFcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNTcHJpdGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIEV2ZW50RW1pdHRlciApIERpc3BsYXlPYmplY3QuX19wcm90b19fID0gRXZlbnRFbWl0dGVyO1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZlbnRFbWl0dGVyICYmIEV2ZW50RW1pdHRlci5wcm90b3R5cGUgKTtcbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERpc3BsYXlPYmplY3Q7XG5cbiAgICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBfdGVtcERpc3BsYXlPYmplY3RQYXJlbnQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0seDogeyBjb25maWd1cmFibGU6IHRydWUgfSx5OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHdvcmxkVHJhbnNmb3JtOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGxvY2FsVHJhbnNmb3JtOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHBvc2l0aW9uOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHNjYWxlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHBpdm90OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHNrZXc6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scm90YXRpb246IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sYW5nbGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sekluZGV4OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHdvcmxkVmlzaWJsZTogeyBjb25maWd1cmFibGU6IHRydWUgfSxtYXNrOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG1lbWJlciB7UElYSS5EaXNwbGF5T2JqZWN0fVxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QubWl4aW4gPSBmdW5jdGlvbiBtaXhpbiAoc291cmNlKVxuICAgIHtcbiAgICAgICAgLy8gaW4gRVM4L0VTMjAxNywgdGhpcyB3b3VsZCBiZSByZWFsbHkgZWFzeTpcbiAgICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcblxuICAgICAgICAvLyBnZXQgYWxsIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IGtleXNcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgICAgIC8vIGxvb3AgdGhyb3VnaCBwcm9wZXJ0aWVzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IGtleXNbaV07XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgcHJvcGVydHkgdXNpbmcgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgLSB0aGlzIHdvcmtzIGZvciBhY2Nlc3NvcnMgYW5kIG5vcm1hbCB2YWx1ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lLFxuICAgICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBwcm9wZXJ0eU5hbWUpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnRlbXBEaXNwbGF5T2JqZWN0UGFyZW50ID09PSBudWxsKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnRlbXBEaXNwbGF5T2JqZWN0UGFyZW50ID0gbmV3IERpc3BsYXlPYmplY3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBEaXNwbGF5T2JqZWN0UGFyZW50O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBvYmplY3QgdHJhbnNmb3JtIGZvciByZW5kZXJpbmcuXG4gICAgICpcbiAgICAgKiBUT0RPIC0gT3B0aW1pemF0aW9uIHBhc3MhXG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUudXBkYXRlVHJhbnNmb3JtID0gZnVuY3Rpb24gdXBkYXRlVHJhbnNmb3JtICgpXG4gICAge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS51cGRhdGVUcmFuc2Zvcm0odGhpcy5wYXJlbnQudHJhbnNmb3JtKTtcbiAgICAgICAgLy8gbXVsdGlwbHkgdGhlIGFscGhhcy4uXG4gICAgICAgIHRoaXMud29ybGRBbHBoYSA9IHRoaXMuYWxwaGEgKiB0aGlzLnBhcmVudC53b3JsZEFscGhhO1xuXG4gICAgICAgIHRoaXMuX2JvdW5kcy51cGRhdGVJRCsrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSB1cGRhdGVzIHRyYW5zZm9ybSBvZiBhbGwgb2JqZWN0cyBmcm9tIHRoZSByb290IHRvIHRoaXMgb25lXG4gICAgICogaW50ZXJuYWwgZnVuY3Rpb24gZm9yIHRvTG9jYWwoKVxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLl9yZWN1cnNpdmVQb3N0VXBkYXRlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0gKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnVwZGF0ZVRyYW5zZm9ybSh0aGlzLnBhcmVudC50cmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0udXBkYXRlVHJhbnNmb3JtKHRoaXMuX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50LnRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBib3VuZHMgb2YgdGhlIGRpc3BsYXlPYmplY3QgYXMgYSByZWN0YW5nbGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbc2tpcFVwZGF0ZV0gLSBTZXR0aW5nIHRvIGB0cnVlYCB3aWxsIHN0b3AgdGhlIHRyYW5zZm9ybXMgb2YgdGhlIHNjZW5lIGdyYXBoIGZyb21cbiAgICAgKiAgYmVpbmcgdXBkYXRlZC4gVGhpcyBtZWFucyB0aGUgY2FsY3VsYXRpb24gcmV0dXJuZWQgTUFZIGJlIG91dCBvZiBkYXRlIEJVVCB3aWxsIGdpdmUgeW91IGFcbiAgICAgKiAgbmljZSBwZXJmb3JtYW5jZSBib29zdC5cbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBbcmVjdF0gLSBPcHRpb25hbCByZWN0YW5nbGUgdG8gc3RvcmUgdGhlIHJlc3VsdCBvZiB0aGUgYm91bmRzIGNhbGN1bGF0aW9uLlxuICAgICAqIEByZXR1cm4ge1BJWEkuUmVjdGFuZ2xlfSBUaGUgcmVjdGFuZ3VsYXIgYm91bmRpbmcgYXJlYS5cbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5nZXRCb3VuZHMgPSBmdW5jdGlvbiBnZXRCb3VuZHMgKHNraXBVcGRhdGUsIHJlY3QpXG4gICAge1xuICAgICAgICBpZiAoIXNraXBVcGRhdGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudDtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWN1cnNpdmVQb3N0VXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib3VuZHNJRCAhPT0gdGhpcy5fbGFzdEJvdW5kc0lEKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUJvdW5kcygpO1xuICAgICAgICAgICAgdGhpcy5fbGFzdEJvdW5kc0lEID0gdGhpcy5fYm91bmRzSUQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlY3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fYm91bmRzUmVjdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ib3VuZHNSZWN0ID0gbmV3IFJlY3RhbmdsZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZWN0ID0gdGhpcy5fYm91bmRzUmVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9ib3VuZHMuZ2V0UmVjdGFuZ2xlKHJlY3QpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGxvY2FsIGJvdW5kcyBvZiB0aGUgZGlzcGxheU9iamVjdCBhcyBhIHJlY3RhbmdsZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBbcmVjdF0gLSBPcHRpb25hbCByZWN0YW5nbGUgdG8gc3RvcmUgdGhlIHJlc3VsdCBvZiB0aGUgYm91bmRzIGNhbGN1bGF0aW9uLlxuICAgICAqIEByZXR1cm4ge1BJWEkuUmVjdGFuZ2xlfSBUaGUgcmVjdGFuZ3VsYXIgYm91bmRpbmcgYXJlYS5cbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5nZXRMb2NhbEJvdW5kcyA9IGZ1bmN0aW9uIGdldExvY2FsQm91bmRzIChyZWN0KVxuICAgIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybVJlZiA9IHRoaXMudHJhbnNmb3JtO1xuICAgICAgICB2YXIgcGFyZW50UmVmID0gdGhpcy5wYXJlbnQ7XG5cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRoaXMuX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50LnRyYW5zZm9ybTtcblxuICAgICAgICBpZiAoIXJlY3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fbG9jYWxCb3VuZHNSZWN0KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsQm91bmRzUmVjdCA9IG5ldyBSZWN0YW5nbGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVjdCA9IHRoaXMuX2xvY2FsQm91bmRzUmVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBib3VuZHMgPSB0aGlzLmdldEJvdW5kcyhmYWxzZSwgcmVjdCk7XG5cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRSZWY7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtUmVmO1xuXG4gICAgICAgIHJldHVybiBib3VuZHM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGdsb2JhbCBwb3NpdGlvbiBvZiB0aGUgZGlzcGxheSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuSVBvaW50fSBwb3NpdGlvbiAtIFRoZSB3b3JsZCBvcmlnaW4gdG8gY2FsY3VsYXRlIGZyb20uXG4gICAgICogQHBhcmFtIHtQSVhJLklQb2ludH0gW3BvaW50XSAtIEEgUG9pbnQgb2JqZWN0IGluIHdoaWNoIHRvIHN0b3JlIHRoZSB2YWx1ZSwgb3B0aW9uYWxcbiAgICAgKiAgKG90aGVyd2lzZSB3aWxsIGNyZWF0ZSBhIG5ldyBQb2ludCkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbc2tpcFVwZGF0ZT1mYWxzZV0gLSBTaG91bGQgd2Ugc2tpcCB0aGUgdXBkYXRlIHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLklQb2ludH0gQSBwb2ludCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBwb3NpdGlvbiBvZiB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS50b0dsb2JhbCA9IGZ1bmN0aW9uIHRvR2xvYmFsIChwb3NpdGlvbiwgcG9pbnQsIHNraXBVcGRhdGUpXG4gICAge1xuICAgICAgICBpZiAoIHNraXBVcGRhdGUgPT09IHZvaWQgMCApIHNraXBVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIXNraXBVcGRhdGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0oKTtcblxuICAgICAgICAgICAgLy8gdGhpcyBwYXJlbnQgY2hlY2sgaXMgZm9yIGp1c3QgaW4gY2FzZSB0aGUgaXRlbSBpcyBhIHJvb3Qgb2JqZWN0LlxuICAgICAgICAgICAgLy8gSWYgaXQgaXMgd2UgbmVlZCB0byBnaXZlIGl0IGEgdGVtcG9yYXJ5IHBhcmVudCBzbyB0aGF0IGRpc3BsYXlPYmplY3RVcGRhdGVUcmFuc2Zvcm0gd29ya3MgY29ycmVjdGx5XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG1haW5seSB0byBhdm9pZCBhIHBhcmVudCBjaGVjayBpbiB0aGUgbWFpbiBsb29wLiBFdmVyeSBsaXR0bGUgaGVscHMgZm9yIHBlcmZvcm1hbmNlIDopXG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyZW50KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheU9iamVjdFVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZG9uJ3QgbmVlZCB0byB1cGRhdGUgdGhlIGxvdFxuICAgICAgICByZXR1cm4gdGhpcy53b3JsZFRyYW5zZm9ybS5hcHBseShwb3NpdGlvbiwgcG9pbnQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBsb2NhbCBwb3NpdGlvbiBvZiB0aGUgZGlzcGxheSBvYmplY3QgcmVsYXRpdmUgdG8gYW5vdGhlciBwb2ludC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5JUG9pbnR9IHBvc2l0aW9uIC0gVGhlIHdvcmxkIG9yaWdpbiB0byBjYWxjdWxhdGUgZnJvbS5cbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gW2Zyb21dIC0gVGhlIERpc3BsYXlPYmplY3QgdG8gY2FsY3VsYXRlIHRoZSBnbG9iYWwgcG9zaXRpb24gZnJvbS5cbiAgICAgKiBAcGFyYW0ge1BJWEkuSVBvaW50fSBbcG9pbnRdIC0gQSBQb2ludCBvYmplY3QgaW4gd2hpY2ggdG8gc3RvcmUgdGhlIHZhbHVlLCBvcHRpb25hbFxuICAgICAqICAob3RoZXJ3aXNlIHdpbGwgY3JlYXRlIGEgbmV3IFBvaW50KS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwVXBkYXRlPWZhbHNlXSAtIFNob3VsZCB3ZSBza2lwIHRoZSB1cGRhdGUgdHJhbnNmb3JtXG4gICAgICogQHJldHVybiB7UElYSS5JUG9pbnR9IEEgcG9pbnQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcG9zaXRpb24gb2YgdGhpcyBvYmplY3RcbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS50b0xvY2FsID0gZnVuY3Rpb24gdG9Mb2NhbCAocG9zaXRpb24sIGZyb20sIHBvaW50LCBza2lwVXBkYXRlKVxuICAgIHtcbiAgICAgICAgaWYgKGZyb20pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gZnJvbS50b0dsb2JhbChwb3NpdGlvbiwgcG9pbnQsIHNraXBVcGRhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFza2lwVXBkYXRlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9yZWN1cnNpdmVQb3N0VXBkYXRlVHJhbnNmb3JtKCk7XG5cbiAgICAgICAgICAgIC8vIHRoaXMgcGFyZW50IGNoZWNrIGlzIGZvciBqdXN0IGluIGNhc2UgdGhlIGl0ZW0gaXMgYSByb290IG9iamVjdC5cbiAgICAgICAgICAgIC8vIElmIGl0IGlzIHdlIG5lZWQgdG8gZ2l2ZSBpdCBhIHRlbXBvcmFyeSBwYXJlbnQgc28gdGhhdCBkaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtIHdvcmtzIGNvcnJlY3RseVxuICAgICAgICAgICAgLy8gdGhpcyBpcyBtYWlubHkgdG8gYXZvaWQgYSBwYXJlbnQgY2hlY2sgaW4gdGhlIG1haW4gbG9vcC4gRXZlcnkgbGl0dGxlIGhlbHBzIGZvciBwZXJmb3JtYW5jZSA6KVxuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IHRoaXMuX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50O1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheU9iamVjdFVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlPYmplY3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNpbXBseSBhcHBseSB0aGUgbWF0cml4Li5cbiAgICAgICAgcmV0dXJuIHRoaXMud29ybGRUcmFuc2Zvcm0uYXBwbHlJbnZlcnNlKHBvc2l0aW9uLCBwb2ludCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgdGhlIG9iamVjdCB1c2luZyB0aGUgV2ViR0wgcmVuZGVyZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAocmVuZGVyZXIpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB7XG4gICAgICAgIC8vIE9WRVJXUklURTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBwYXJlbnQgQ29udGFpbmVyIG9mIHRoaXMgRGlzcGxheU9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5Db250YWluZXJ9IGNvbnRhaW5lciAtIFRoZSBDb250YWluZXIgdG8gYWRkIHRoaXMgRGlzcGxheU9iamVjdCB0by5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLkNvbnRhaW5lcn0gVGhlIENvbnRhaW5lciB0aGF0IHRoaXMgRGlzcGxheU9iamVjdCB3YXMgYWRkZWQgdG8uXG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUuc2V0UGFyZW50ID0gZnVuY3Rpb24gc2V0UGFyZW50IChjb250YWluZXIpXG4gICAge1xuICAgICAgICBpZiAoIWNvbnRhaW5lciB8fCAhY29udGFpbmVyLmFkZENoaWxkKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFBhcmVudDogQXJndW1lbnQgbXVzdCBiZSBhIENvbnRhaW5lcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGFpbmVyLmFkZENoaWxkKHRoaXMpO1xuXG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIGZ1bmN0aW9uIHRvIHNldCB0aGUgcG9zaXRpb24sIHNjYWxlLCBza2V3IGFuZCBwaXZvdCBhdCBvbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gVGhlIFggcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3k9MF0gLSBUaGUgWSBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2NhbGVYPTFdIC0gVGhlIFggc2NhbGUgdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NjYWxlWT0xXSAtIFRoZSBZIHNjYWxlIHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyb3RhdGlvbj0wXSAtIFRoZSByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tld1g9MF0gLSBUaGUgWCBza2V3IHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2V3WT0wXSAtIFRoZSBZIHNrZXcgdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bpdm90WD0wXSAtIFRoZSBYIHBpdm90IHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwaXZvdFk9MF0gLSBUaGUgWSBwaXZvdCB2YWx1ZVxuICAgICAqIEByZXR1cm4ge1BJWEkuRGlzcGxheU9iamVjdH0gVGhlIERpc3BsYXlPYmplY3QgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5zZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbiBzZXRUcmFuc2Zvcm0gKHgsIHksIHNjYWxlWCwgc2NhbGVZLCByb3RhdGlvbiwgc2tld1gsIHNrZXdZLCBwaXZvdFgsIHBpdm90WSlcbiAgICB7XG4gICAgICAgIGlmICggeCA9PT0gdm9pZCAwICkgeCA9IDA7XG4gICAgICAgIGlmICggeSA9PT0gdm9pZCAwICkgeSA9IDA7XG4gICAgICAgIGlmICggc2NhbGVYID09PSB2b2lkIDAgKSBzY2FsZVggPSAxO1xuICAgICAgICBpZiAoIHNjYWxlWSA9PT0gdm9pZCAwICkgc2NhbGVZID0gMTtcbiAgICAgICAgaWYgKCByb3RhdGlvbiA9PT0gdm9pZCAwICkgcm90YXRpb24gPSAwO1xuICAgICAgICBpZiAoIHNrZXdYID09PSB2b2lkIDAgKSBza2V3WCA9IDA7XG4gICAgICAgIGlmICggc2tld1kgPT09IHZvaWQgMCApIHNrZXdZID0gMDtcbiAgICAgICAgaWYgKCBwaXZvdFggPT09IHZvaWQgMCApIHBpdm90WCA9IDA7XG4gICAgICAgIGlmICggcGl2b3RZID09PSB2b2lkIDAgKSBwaXZvdFkgPSAwO1xuXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCA9IHg7XG4gICAgICAgIHRoaXMucG9zaXRpb24ueSA9IHk7XG4gICAgICAgIHRoaXMuc2NhbGUueCA9ICFzY2FsZVggPyAxIDogc2NhbGVYO1xuICAgICAgICB0aGlzLnNjYWxlLnkgPSAhc2NhbGVZID8gMSA6IHNjYWxlWTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IHJvdGF0aW9uO1xuICAgICAgICB0aGlzLnNrZXcueCA9IHNrZXdYO1xuICAgICAgICB0aGlzLnNrZXcueSA9IHNrZXdZO1xuICAgICAgICB0aGlzLnBpdm90LnggPSBwaXZvdFg7XG4gICAgICAgIHRoaXMucGl2b3QueSA9IHBpdm90WTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQmFzZSBkZXN0cm95IG1ldGhvZCBmb3IgZ2VuZXJpYyBkaXNwbGF5IG9iamVjdHMuIFRoaXMgd2lsbCBhdXRvbWF0aWNhbGx5XG4gICAgICogcmVtb3ZlIHRoZSBkaXNwbGF5IG9iamVjdCBmcm9tIGl0cyBwYXJlbnQgQ29udGFpbmVyIGFzIHdlbGwgYXMgcmVtb3ZlXG4gICAgICogYWxsIGN1cnJlbnQgZXZlbnQgbGlzdGVuZXJzIGFuZCBpbnRlcm5hbCByZWZlcmVuY2VzLiBEbyBub3QgdXNlIGEgRGlzcGxheU9iamVjdFxuICAgICAqIGFmdGVyIGNhbGxpbmcgYGRlc3Ryb3koKWAuXG4gICAgICpcbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2JvdW5kcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRCb3VuZHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9tYXNrID0gbnVsbDtcblxuICAgICAgICB0aGlzLmZpbHRlckFyZWEgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuaW50ZXJhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGl2ZUNoaWxkcmVuID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBvc2l0aW9uIG9mIHRoZSBkaXNwbGF5T2JqZWN0IG9uIHRoZSB4IGF4aXMgcmVsYXRpdmUgdG8gdGhlIGxvY2FsIGNvb3JkaW5hdGVzIG9mIHRoZSBwYXJlbnQuXG4gICAgICogQW4gYWxpYXMgdG8gcG9zaXRpb24ueFxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy54LmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbi54O1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMueC5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24ueCA9IHZhbHVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIGRpc3BsYXlPYmplY3Qgb24gdGhlIHkgYXhpcyByZWxhdGl2ZSB0byB0aGUgbG9jYWwgY29vcmRpbmF0ZXMgb2YgdGhlIHBhcmVudC5cbiAgICAgKiBBbiBhbGlhcyB0byBwb3NpdGlvbi55XG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnkuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLnk7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy55LnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi55ID0gdmFsdWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgdHJhbnNmb3JtIG9mIHRoZSBvYmplY3QgYmFzZWQgb24gd29ybGQgKHBhcmVudCkgZmFjdG9ycy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuTWF0cml4fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy53b3JsZFRyYW5zZm9ybS5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLndvcmxkVHJhbnNmb3JtO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHRyYW5zZm9ybSBvZiB0aGUgb2JqZWN0IGJhc2VkIG9uIGxvY2FsIGZhY3RvcnM6IHBvc2l0aW9uLCBzY2FsZSwgb3RoZXIgc3R1ZmYuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLk1hdHJpeH1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMubG9jYWxUcmFuc2Zvcm0uZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5sb2NhbFRyYW5zZm9ybTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvb3JkaW5hdGUgb2YgdGhlIG9iamVjdCByZWxhdGl2ZSB0byB0aGUgbG9jYWwgY29vcmRpbmF0ZXMgb2YgdGhlIHBhcmVudC5cbiAgICAgKiBBc3NpZ25tZW50IGJ5IHZhbHVlIHNpbmNlIHBpeGktdjQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLklQb2ludH1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMucG9zaXRpb24uZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbjtcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnBvc2l0aW9uLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5jb3B5RnJvbSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY2FsZSBmYWN0b3Igb2YgdGhlIG9iamVjdC5cbiAgICAgKiBBc3NpZ25tZW50IGJ5IHZhbHVlIHNpbmNlIHBpeGktdjQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLklQb2ludH1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuc2NhbGUuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5zY2FsZTtcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnNjYWxlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS5zY2FsZS5jb3B5RnJvbSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwaXZvdCBwb2ludCBvZiB0aGUgZGlzcGxheU9iamVjdCB0aGF0IGl0IHJvdGF0ZXMgYXJvdW5kLlxuICAgICAqIEFzc2lnbm1lbnQgYnkgdmFsdWUgc2luY2UgcGl4aS12NC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuSVBvaW50fVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5waXZvdC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnBpdm90O1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMucGl2b3Quc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnBpdm90LmNvcHlGcm9tKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNrZXcgZmFjdG9yIGZvciB0aGUgb2JqZWN0IGluIHJhZGlhbnMuXG4gICAgICogQXNzaWdubWVudCBieSB2YWx1ZSBzaW5jZSBwaXhpLXY0LlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5PYnNlcnZhYmxlUG9pbnR9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnNrZXcuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5za2V3O1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuc2tldy5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2tldy5jb3B5RnJvbSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByb3RhdGlvbiBvZiB0aGUgb2JqZWN0IGluIHJhZGlhbnMuXG4gICAgICogJ3JvdGF0aW9uJyBhbmQgJ2FuZ2xlJyBoYXZlIHRoZSBzYW1lIGVmZmVjdCBvbiBhIGRpc3BsYXkgb2JqZWN0OyByb3RhdGlvbiBpcyBpbiByYWRpYW5zLCBhbmdsZSBpcyBpbiBkZWdyZWVzLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5yb3RhdGlvbi5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMucm90YXRpb24uc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uID0gdmFsdWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbmdsZSBvZiB0aGUgb2JqZWN0IGluIGRlZ3JlZXMuXG4gICAgICogJ3JvdGF0aW9uJyBhbmQgJ2FuZ2xlJyBoYXZlIHRoZSBzYW1lIGVmZmVjdCBvbiBhIGRpc3BsYXkgb2JqZWN0OyByb3RhdGlvbiBpcyBpbiByYWRpYW5zLCBhbmdsZSBpcyBpbiBkZWdyZWVzLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5hbmdsZS5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uICogUkFEX1RPX0RFRztcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmFuZ2xlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbiA9IHZhbHVlICogREVHX1RPX1JBRDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHpJbmRleCBvZiB0aGUgZGlzcGxheU9iamVjdC5cbiAgICAgKiBJZiBhIGNvbnRhaW5lciBoYXMgdGhlIHNvcnRhYmxlQ2hpbGRyZW4gcHJvcGVydHkgc2V0IHRvIHRydWUsIGNoaWxkcmVuIHdpbGwgYmUgYXV0b21hdGljYWxseVxuICAgICAqIHNvcnRlZCBieSB6SW5kZXggdmFsdWU7IGEgaGlnaGVyIHZhbHVlIHdpbGwgbWVhbiBpdCB3aWxsIGJlIG1vdmVkIHRvd2FyZHMgdGhlIGVuZCBvZiB0aGUgYXJyYXksXG4gICAgICogYW5kIHRodXMgcmVuZGVyZWQgb24gdG9wIG9mIG90aGVyIGRpc3BsYXlPYmplY3RzIHdpdGhpbiB0aGUgc2FtZSBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnpJbmRleC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3pJbmRleDtcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnpJbmRleC5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgdGhpcy5fekluZGV4ID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuc29ydERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIG9iamVjdCBpcyBnbG9iYWxseSB2aXNpYmxlLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMud29ybGRWaXNpYmxlLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICB2YXIgaXRlbSA9IHRoaXM7XG5cbiAgICAgICAgZG9cbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFpdGVtLnZpc2libGUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpdGVtID0gaXRlbS5wYXJlbnQ7XG4gICAgICAgIH0gd2hpbGUgKGl0ZW0pO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbWFzayBmb3IgdGhlIGRpc3BsYXlPYmplY3QuIEEgbWFzayBpcyBhbiBvYmplY3QgdGhhdCBsaW1pdHMgdGhlIHZpc2liaWxpdHkgb2YgYW5cbiAgICAgKiBvYmplY3QgdG8gdGhlIHNoYXBlIG9mIHRoZSBtYXNrIGFwcGxpZWQgdG8gaXQuIEluIFBpeGlKUyBhIHJlZ3VsYXIgbWFzayBtdXN0IGJlIGFcbiAgICAgKiB7QGxpbmsgUElYSS5HcmFwaGljc30gb3IgYSB7QGxpbmsgUElYSS5TcHJpdGV9IG9iamVjdC4gVGhpcyBhbGxvd3MgZm9yIG11Y2ggZmFzdGVyIG1hc2tpbmcgaW4gY2FudmFzIGFzIGl0XG4gICAgICogdXRpbGl0aWVzIHNoYXBlIGNsaXBwaW5nLiBUbyByZW1vdmUgYSBtYXNrLCBzZXQgdGhpcyBwcm9wZXJ0eSB0byBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBGb3Igc3ByaXRlIG1hc2sgYm90aCBhbHBoYSBhbmQgcmVkIGNoYW5uZWwgYXJlIHVzZWQuIEJsYWNrIG1hc2sgaXMgdGhlIHNhbWUgYXMgdHJhbnNwYXJlbnQgbWFzay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IGdyYXBoaWNzID0gbmV3IFBJWEkuR3JhcGhpY3MoKTtcbiAgICAgKiBncmFwaGljcy5iZWdpbkZpbGwoMHhGRjMzMDApO1xuICAgICAqIGdyYXBoaWNzLmRyYXdSZWN0KDUwLCAyNTAsIDEwMCwgMTAwKTtcbiAgICAgKiBncmFwaGljcy5lbmRGaWxsKCk7XG4gICAgICpcbiAgICAgKiBjb25zdCBzcHJpdGUgPSBuZXcgUElYSS5TcHJpdGUodGV4dHVyZSk7XG4gICAgICogc3ByaXRlLm1hc2sgPSBncmFwaGljcztcbiAgICAgKiBAdG9kbyBBdCB0aGUgbW9tZW50LCBQSVhJLkNhbnZhc1JlbmRlcmVyIGRvZXNuJ3Qgc3VwcG9ydCBQSVhJLlNwcml0ZSBhcyBtYXNrLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5HcmFwaGljc3xQSVhJLlNwcml0ZXxudWxsfVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5tYXNrLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFzaztcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLm1hc2suc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLl9tYXNrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9tYXNrLnJlbmRlcmFibGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fbWFzay5pc01hc2sgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21hc2sgPSB2YWx1ZTtcblxuICAgICAgICBpZiAodGhpcy5fbWFzaylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fbWFzay5yZW5kZXJhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9tYXNrLmlzTWFzayA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIERpc3BsYXlPYmplY3QucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICAgIHJldHVybiBEaXNwbGF5T2JqZWN0O1xufShFdmVudEVtaXR0ZXIpKTtcblxuLyoqXG4gKiBEaXNwbGF5T2JqZWN0IGRlZmF1bHQgdXBkYXRlVHJhbnNmb3JtLCBkb2VzIG5vdCB1cGRhdGUgY2hpbGRyZW4gb2YgY29udGFpbmVyLlxuICogV2lsbCBjcmFzaCBpZiB0aGVyZSdzIG5vIHBhcmVudCBlbGVtZW50LlxuICpcbiAqIEBtZW1iZXJvZiBQSVhJLkRpc3BsYXlPYmplY3QjXG4gKiBAZnVuY3Rpb24gZGlzcGxheU9iamVjdFVwZGF0ZVRyYW5zZm9ybVxuICovXG5EaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5kaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtID0gRGlzcGxheU9iamVjdC5wcm90b3R5cGUudXBkYXRlVHJhbnNmb3JtO1xuXG5mdW5jdGlvbiBzb3J0Q2hpbGRyZW4oYSwgYilcbntcbiAgICBpZiAoYS56SW5kZXggPT09IGIuekluZGV4KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGEuX2xhc3RTb3J0ZWRJbmRleCAtIGIuX2xhc3RTb3J0ZWRJbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gYS56SW5kZXggLSBiLnpJbmRleDtcbn1cblxuLyoqXG4gKiBBIENvbnRhaW5lciByZXByZXNlbnRzIGEgY29sbGVjdGlvbiBvZiBkaXNwbGF5IG9iamVjdHMuXG4gKlxuICogSXQgaXMgdGhlIGJhc2UgY2xhc3Mgb2YgYWxsIGRpc3BsYXkgb2JqZWN0cyB0aGF0IGFjdCBhcyBhIGNvbnRhaW5lciBmb3Igb3RoZXIgb2JqZWN0cyAobGlrZSBTcHJpdGVzKS5cbiAqXG4gKmBgYGpzXG4gKiBsZXQgY29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XG4gKiBjb250YWluZXIuYWRkQ2hpbGQoc3ByaXRlKTtcbiAqIGBgYFxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5EaXNwbGF5T2JqZWN0XG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgQ29udGFpbmVyID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoRGlzcGxheU9iamVjdCkge1xuICAgIGZ1bmN0aW9uIENvbnRhaW5lcigpXG4gICAge1xuICAgICAgICBEaXNwbGF5T2JqZWN0LmNhbGwodGhpcyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBhcnJheSBvZiBjaGlsZHJlbiBvZiB0aGlzIGNvbnRhaW5lci5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5EaXNwbGF5T2JqZWN0W119XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIGNvbnRhaW5lciB3aWxsIHNvcnQgaXRzIGNoaWxkcmVuIGJ5IHpJbmRleCB2YWx1ZVxuICAgICAgICAgKiB3aGVuIHVwZGF0ZVRyYW5zZm9ybSgpIGlzIGNhbGxlZCwgb3IgbWFudWFsbHkgaWYgc29ydENoaWxkcmVuKCkgaXMgY2FsbGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGFjdHVhbGx5IGNoYW5nZXMgdGhlIG9yZGVyIG9mIGVsZW1lbnRzIGluIHRoZSBhcnJheSwgc28gc2hvdWxkIGJlIHRyZWF0ZWRcbiAgICAgICAgICogYXMgYSBiYXNpYyBzb2x1dGlvbiB0aGF0IGlzIG5vdCBwZXJmb3JtYW50IGNvbXBhcmVkIHRvIG90aGVyIHNvbHV0aW9ucyxcbiAgICAgICAgICogc3VjaCBhcyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vcGl4aWpzL3BpeGktZGlzcGxheVxuICAgICAgICAgKlxuICAgICAgICAgKiBBbHNvIGJlIGF3YXJlIG9mIHRoYXQgdGhpcyBtYXkgbm90IHdvcmsgbmljZWx5IHdpdGggdGhlIGFkZENoaWxkQXQoKSBmdW5jdGlvbixcbiAgICAgICAgICogYXMgdGhlIHpJbmRleCBzb3J0aW5nIG1heSBjYXVzZSB0aGUgY2hpbGQgdG8gYXV0b21hdGljYWxseSBzb3J0ZWQgdG8gYW5vdGhlciBwb3NpdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHNlZSBQSVhJLnNldHRpbmdzLlNPUlRBQkxFX0NISUxEUkVOXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNvcnRhYmxlQ2hpbGRyZW4gPSBzZXR0aW5ncy5TT1JUQUJMRV9DSElMRFJFTjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdWxkIGNoaWxkcmVuIGJlIHNvcnRlZCBieSB6SW5kZXggYXQgdGhlIG5leHQgdXBkYXRlVHJhbnNmb3JtIGNhbGwuXG4gICAgICAgICAqIFdpbGwgZ2V0IGF1dG9tYXRpY2FsbHkgc2V0IHRvIHRydWUgaWYgYSBuZXcgY2hpbGQgaXMgYWRkZWQsIG9yIGlmIGEgY2hpbGQncyB6SW5kZXggY2hhbmdlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc29ydERpcnR5ID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gYSBEaXNwbGF5T2JqZWN0IGlzIGFkZGVkIHRvIHRoaXMgQ29udGFpbmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgUElYSS5Db250YWluZXIjY2hpbGRBZGRlZFxuICAgICAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gY2hpbGQgLSBUaGUgY2hpbGQgYWRkZWQgdG8gdGhlIENvbnRhaW5lci5cbiAgICAgICAgICogQHBhcmFtIHtQSVhJLkNvbnRhaW5lcn0gY29udGFpbmVyIC0gVGhlIGNvbnRhaW5lciB0aGF0IGFkZGVkIHRoZSBjaGlsZC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGNoaWxkcmVuJ3MgaW5kZXggb2YgdGhlIGFkZGVkIGNoaWxkLlxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgd2hlbiBhIERpc3BsYXlPYmplY3QgaXMgcmVtb3ZlZCBmcm9tIHRoaXMgQ29udGFpbmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgUElYSS5EaXNwbGF5T2JqZWN0I3JlbW92ZWRGcm9tXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIFRoZSBjaGlsZCByZW1vdmVkIGZyb20gdGhlIENvbnRhaW5lci5cbiAgICAgICAgICogQHBhcmFtIHtQSVhJLkNvbnRhaW5lcn0gY29udGFpbmVyIC0gVGhlIGNvbnRhaW5lciB0aGF0IHJlbW92ZWQgcmVtb3ZlZCB0aGUgY2hpbGQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBmb3JtZXIgY2hpbGRyZW4ncyBpbmRleCBvZiB0aGUgcmVtb3ZlZCBjaGlsZFxuICAgICAgICAgKi9cbiAgICB9XG5cbiAgICBpZiAoIERpc3BsYXlPYmplY3QgKSBDb250YWluZXIuX19wcm90b19fID0gRGlzcGxheU9iamVjdDtcbiAgICBDb250YWluZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRGlzcGxheU9iamVjdCAmJiBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSApO1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb250YWluZXI7XG5cbiAgICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyB3aWR0aDogeyBjb25maWd1cmFibGU6IHRydWUgfSxoZWlnaHQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRhYmxlIG1ldGhvZCB0aGF0IGNhbiBiZSB1c2VkIGJ5IENvbnRhaW5lciBzdWJjbGFzc2VzIHdoZW5ldmVyIHRoZSBjaGlsZHJlbiBhcnJheSBpcyBtb2RpZmllZFxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUub25DaGlsZHJlbkNoYW5nZSA9IGZ1bmN0aW9uIG9uQ2hpbGRyZW5DaGFuZ2UgKClcbiAgICB7XG4gICAgICAgIC8qIGVtcHR5ICovXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgb25lIG9yIG1vcmUgY2hpbGRyZW4gdG8gdGhlIGNvbnRhaW5lci5cbiAgICAgKlxuICAgICAqIE11bHRpcGxlIGl0ZW1zIGNhbiBiZSBhZGRlZCBsaWtlIHNvOiBgbXlDb250YWluZXIuYWRkQ2hpbGQodGhpbmdPbmUsIHRoaW5nVHdvLCB0aGluZ1RocmVlKWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Li4uUElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIFRoZSBEaXNwbGF5T2JqZWN0KHMpIHRvIGFkZCB0byB0aGUgY29udGFpbmVyXG4gICAgICogQHJldHVybiB7UElYSS5EaXNwbGF5T2JqZWN0fSBUaGUgZmlyc3QgY2hpbGQgdGhhdCB3YXMgYWRkZWQuXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIGFkZENoaWxkIChjaGlsZClcbiAgICB7XG4gICAgICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgICAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBhcmd1bWVudCB3ZSBjYW4gYnlwYXNzIGxvb3BpbmcgdGhyb3VnaCB0aGUgdGhlbVxuICAgICAgICBpZiAoYXJndW1lbnRzTGVuZ3RoID4gMSlcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSBhcmd1bWVudHMgcHJvcGVydHkgYW5kIGFkZCBhbGwgY2hpbGRyZW5cbiAgICAgICAgICAgIC8vIHVzZSBpdCB0aGUgcmlnaHQgd2F5ICgubGVuZ3RoIGFuZCBbaV0pIHNvIHRoYXQgdGhpcyBmdW5jdGlvbiBjYW4gc3RpbGwgYmUgb3B0aW1pemVkIGJ5IEpTIHJ1bnRpbWVzXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50c0xlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoYXJndW1lbnRzJDFbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gaWYgdGhlIGNoaWxkIGhhcyBhIHBhcmVudCB0aGVuIGxldHMgcmVtb3ZlIGl0IGFzIFBpeGlKUyBvYmplY3RzIGNhbiBvbmx5IGV4aXN0IGluIG9uZSBwbGFjZVxuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5wYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5zb3J0RGlydHkgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBlbnN1cmUgY2hpbGQgdHJhbnNmb3JtIHdpbGwgYmUgcmVjYWxjdWxhdGVkXG4gICAgICAgICAgICBjaGlsZC50cmFuc2Zvcm0uX3BhcmVudElEID0gLTE7XG5cbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG5cbiAgICAgICAgICAgIC8vIGVuc3VyZSBib3VuZHMgd2lsbCBiZSByZWNhbGN1bGF0ZWRcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kc0lEKys7XG5cbiAgICAgICAgICAgIC8vIFRPRE8gLSBsZXRzIGVpdGhlciBkbyBhbGwgY2FsbGJhY2tzIG9yIGFsbCBldmVudHMuLiBub3QgYm90aCFcbiAgICAgICAgICAgIHRoaXMub25DaGlsZHJlbkNoYW5nZSh0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjaGlsZEFkZGVkJywgY2hpbGQsIHRoaXMsIHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBjaGlsZC5lbWl0KCdhZGRlZCcsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgY2hpbGQgdG8gdGhlIGNvbnRhaW5lciBhdCBhIHNwZWNpZmllZCBpbmRleC4gSWYgdGhlIGluZGV4IGlzIG91dCBvZiBib3VuZHMgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIFRoZSBjaGlsZCB0byBhZGRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggdG8gcGxhY2UgdGhlIGNoaWxkIGluXG4gICAgICogQHJldHVybiB7UElYSS5EaXNwbGF5T2JqZWN0fSBUaGUgY2hpbGQgdGhhdCB3YXMgYWRkZWQuXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5hZGRDaGlsZEF0ID0gZnVuY3Rpb24gYWRkQ2hpbGRBdCAoY2hpbGQsIGluZGV4KVxuICAgIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKGNoaWxkICsgXCJhZGRDaGlsZEF0OiBUaGUgaW5kZXggXCIgKyBpbmRleCArIFwiIHN1cHBsaWVkIGlzIG91dCBvZiBib3VuZHMgXCIgKyAodGhpcy5jaGlsZHJlbi5sZW5ndGgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQucGFyZW50KVxuICAgICAgICB7XG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQucGFyZW50ID0gdGhpcztcbiAgICAgICAgdGhpcy5zb3J0RGlydHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIGVuc3VyZSBjaGlsZCB0cmFuc2Zvcm0gd2lsbCBiZSByZWNhbGN1bGF0ZWRcbiAgICAgICAgY2hpbGQudHJhbnNmb3JtLl9wYXJlbnRJRCA9IC0xO1xuXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCBjaGlsZCk7XG5cbiAgICAgICAgLy8gZW5zdXJlIGJvdW5kcyB3aWxsIGJlIHJlY2FsY3VsYXRlZFxuICAgICAgICB0aGlzLl9ib3VuZHNJRCsrO1xuXG4gICAgICAgIC8vIFRPRE8gLSBsZXRzIGVpdGhlciBkbyBhbGwgY2FsbGJhY2tzIG9yIGFsbCBldmVudHMuLiBub3QgYm90aCFcbiAgICAgICAgdGhpcy5vbkNoaWxkcmVuQ2hhbmdlKGluZGV4KTtcbiAgICAgICAgY2hpbGQuZW1pdCgnYWRkZWQnLCB0aGlzKTtcbiAgICAgICAgdGhpcy5lbWl0KCdjaGlsZEFkZGVkJywgY2hpbGQsIHRoaXMsIGluZGV4KTtcblxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN3YXBzIHRoZSBwb3NpdGlvbiBvZiAyIERpc3BsYXkgT2JqZWN0cyB3aXRoaW4gdGhpcyBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gY2hpbGQgLSBGaXJzdCBkaXNwbGF5IG9iamVjdCB0byBzd2FwXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IGNoaWxkMiAtIFNlY29uZCBkaXNwbGF5IG9iamVjdCB0byBzd2FwXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5zd2FwQ2hpbGRyZW4gPSBmdW5jdGlvbiBzd2FwQ2hpbGRyZW4gKGNoaWxkLCBjaGlsZDIpXG4gICAge1xuICAgICAgICBpZiAoY2hpbGQgPT09IGNoaWxkMilcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGluZGV4MSA9IHRoaXMuZ2V0Q2hpbGRJbmRleChjaGlsZCk7XG4gICAgICAgIHZhciBpbmRleDIgPSB0aGlzLmdldENoaWxkSW5kZXgoY2hpbGQyKTtcblxuICAgICAgICB0aGlzLmNoaWxkcmVuW2luZGV4MV0gPSBjaGlsZDI7XG4gICAgICAgIHRoaXMuY2hpbGRyZW5baW5kZXgyXSA9IGNoaWxkO1xuICAgICAgICB0aGlzLm9uQ2hpbGRyZW5DaGFuZ2UoaW5kZXgxIDwgaW5kZXgyID8gaW5kZXgxIDogaW5kZXgyKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5kZXggcG9zaXRpb24gb2YgYSBjaGlsZCBEaXNwbGF5T2JqZWN0IGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gY2hpbGQgLSBUaGUgRGlzcGxheU9iamVjdCBpbnN0YW5jZSB0byBpZGVudGlmeVxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBjaGlsZCBkaXNwbGF5IG9iamVjdCB0byBpZGVudGlmeVxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0Q2hpbGRJbmRleCA9IGZ1bmN0aW9uIGdldENoaWxkSW5kZXggKGNoaWxkKVxuICAgIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKGNoaWxkKTtcblxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzdXBwbGllZCBEaXNwbGF5T2JqZWN0IG11c3QgYmUgYSBjaGlsZCBvZiB0aGUgY2FsbGVyJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIHBvc2l0aW9uIG9mIGFuIGV4aXN0aW5nIGNoaWxkIGluIHRoZSBkaXNwbGF5IG9iamVjdCBjb250YWluZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIFRoZSBjaGlsZCBEaXNwbGF5T2JqZWN0IGluc3RhbmNlIGZvciB3aGljaCB5b3Ugd2FudCB0byBjaGFuZ2UgdGhlIGluZGV4IG51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSByZXN1bHRpbmcgaW5kZXggbnVtYmVyIGZvciB0aGUgY2hpbGQgZGlzcGxheSBvYmplY3RcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnNldENoaWxkSW5kZXggPSBmdW5jdGlvbiBzZXRDaGlsZEluZGV4IChjaGlsZCwgaW5kZXgpXG4gICAge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKFwiVGhlIGluZGV4IFwiICsgaW5kZXggKyBcIiBzdXBwbGllZCBpcyBvdXQgb2YgYm91bmRzIFwiICsgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHRoaXMuZ2V0Q2hpbGRJbmRleChjaGlsZCk7XG5cbiAgICAgICAgcmVtb3ZlSXRlbXModGhpcy5jaGlsZHJlbiwgY3VycmVudEluZGV4LCAxKTsgLy8gcmVtb3ZlIGZyb20gb2xkIHBvc2l0aW9uXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCBjaGlsZCk7IC8vIGFkZCBhdCBuZXcgcG9zaXRpb25cblxuICAgICAgICB0aGlzLm9uQ2hpbGRyZW5DaGFuZ2UoaW5kZXgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjaGlsZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggdG8gZ2V0IHRoZSBjaGlsZCBhdFxuICAgICAqIEByZXR1cm4ge1BJWEkuRGlzcGxheU9iamVjdH0gVGhlIGNoaWxkIGF0IHRoZSBnaXZlbiBpbmRleCwgaWYgYW55LlxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0Q2hpbGRBdCA9IGZ1bmN0aW9uIGdldENoaWxkQXQgKGluZGV4KVxuICAgIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChcImdldENoaWxkQXQ6IEluZGV4IChcIiArIGluZGV4ICsgXCIpIGRvZXMgbm90IGV4aXN0LlwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbltpbmRleF07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgb25lIG9yIG1vcmUgY2hpbGRyZW4gZnJvbSB0aGUgY29udGFpbmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsuLi5QSVhJLkRpc3BsYXlPYmplY3R9IGNoaWxkIC0gVGhlIERpc3BsYXlPYmplY3QocykgdG8gcmVtb3ZlXG4gICAgICogQHJldHVybiB7UElYSS5EaXNwbGF5T2JqZWN0fSBUaGUgZmlyc3QgY2hpbGQgdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKGNoaWxkKVxuICAgIHtcbiAgICAgICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lIGFyZ3VtZW50IHdlIGNhbiBieXBhc3MgbG9vcGluZyB0aHJvdWdoIHRoZSB0aGVtXG4gICAgICAgIGlmIChhcmd1bWVudHNMZW5ndGggPiAxKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGFyZ3VtZW50cyBwcm9wZXJ0eSBhbmQgYWRkIGFsbCBjaGlsZHJlblxuICAgICAgICAgICAgLy8gdXNlIGl0IHRoZSByaWdodCB3YXkgKC5sZW5ndGggYW5kIFtpXSkgc28gdGhhdCB0aGlzIGZ1bmN0aW9uIGNhbiBzdGlsbCBiZSBvcHRpbWl6ZWQgYnkgSlMgcnVudGltZXNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzTGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZChhcmd1bWVudHMkMVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAgICAgICAgIGNoaWxkLnBhcmVudCA9IG51bGw7XG4gICAgICAgICAgICAvLyBlbnN1cmUgY2hpbGQgdHJhbnNmb3JtIHdpbGwgYmUgcmVjYWxjdWxhdGVkXG4gICAgICAgICAgICBjaGlsZC50cmFuc2Zvcm0uX3BhcmVudElEID0gLTE7XG4gICAgICAgICAgICByZW1vdmVJdGVtcyh0aGlzLmNoaWxkcmVuLCBpbmRleCwgMSk7XG5cbiAgICAgICAgICAgIC8vIGVuc3VyZSBib3VuZHMgd2lsbCBiZSByZWNhbGN1bGF0ZWRcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kc0lEKys7XG5cbiAgICAgICAgICAgIC8vIFRPRE8gLSBsZXRzIGVpdGhlciBkbyBhbGwgY2FsbGJhY2tzIG9yIGFsbCBldmVudHMuLiBub3QgYm90aCFcbiAgICAgICAgICAgIHRoaXMub25DaGlsZHJlbkNoYW5nZShpbmRleCk7XG4gICAgICAgICAgICBjaGlsZC5lbWl0KCdyZW1vdmVkJywgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2NoaWxkUmVtb3ZlZCcsIGNoaWxkLCB0aGlzLCBpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjaGlsZCBmcm9tIHRoZSBzcGVjaWZpZWQgaW5kZXggcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggdG8gZ2V0IHRoZSBjaGlsZCBmcm9tXG4gICAgICogQHJldHVybiB7UElYSS5EaXNwbGF5T2JqZWN0fSBUaGUgY2hpbGQgdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlbW92ZUNoaWxkQXQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZEF0IChpbmRleClcbiAgICB7XG4gICAgICAgIHZhciBjaGlsZCA9IHRoaXMuZ2V0Q2hpbGRBdChpbmRleCk7XG5cbiAgICAgICAgLy8gZW5zdXJlIGNoaWxkIHRyYW5zZm9ybSB3aWxsIGJlIHJlY2FsY3VsYXRlZC4uXG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG51bGw7XG4gICAgICAgIGNoaWxkLnRyYW5zZm9ybS5fcGFyZW50SUQgPSAtMTtcbiAgICAgICAgcmVtb3ZlSXRlbXModGhpcy5jaGlsZHJlbiwgaW5kZXgsIDEpO1xuXG4gICAgICAgIC8vIGVuc3VyZSBib3VuZHMgd2lsbCBiZSByZWNhbGN1bGF0ZWRcbiAgICAgICAgdGhpcy5fYm91bmRzSUQrKztcblxuICAgICAgICAvLyBUT0RPIC0gbGV0cyBlaXRoZXIgZG8gYWxsIGNhbGxiYWNrcyBvciBhbGwgZXZlbnRzLi4gbm90IGJvdGghXG4gICAgICAgIHRoaXMub25DaGlsZHJlbkNoYW5nZShpbmRleCk7XG4gICAgICAgIGNoaWxkLmVtaXQoJ3JlbW92ZWQnLCB0aGlzKTtcbiAgICAgICAgdGhpcy5lbWl0KCdjaGlsZFJlbW92ZWQnLCBjaGlsZCwgdGhpcywgaW5kZXgpO1xuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgY2hpbGRyZW4gZnJvbSB0aGlzIGNvbnRhaW5lciB0aGF0IGFyZSB3aXRoaW4gdGhlIGJlZ2luIGFuZCBlbmQgaW5kZXhlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYmVnaW5JbmRleD0wXSAtIFRoZSBiZWdpbm5pbmcgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmRJbmRleD10aGlzLmNoaWxkcmVuLmxlbmd0aF0gLSBUaGUgZW5kaW5nIHBvc2l0aW9uLiBEZWZhdWx0IHZhbHVlIGlzIHNpemUgb2YgdGhlIGNvbnRhaW5lci5cbiAgICAgKiBAcmV0dXJucyB7UElYSS5EaXNwbGF5T2JqZWN0W119IExpc3Qgb2YgcmVtb3ZlZCBjaGlsZHJlblxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVtb3ZlQ2hpbGRyZW4gPSBmdW5jdGlvbiByZW1vdmVDaGlsZHJlbiAoYmVnaW5JbmRleCwgZW5kSW5kZXgpXG4gICAge1xuICAgICAgICBpZiAoIGJlZ2luSW5kZXggPT09IHZvaWQgMCApIGJlZ2luSW5kZXggPSAwO1xuXG4gICAgICAgIHZhciBiZWdpbiA9IGJlZ2luSW5kZXg7XG4gICAgICAgIHZhciBlbmQgPSB0eXBlb2YgZW5kSW5kZXggPT09ICdudW1iZXInID8gZW5kSW5kZXggOiB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgdmFyIHJhbmdlID0gZW5kIC0gYmVnaW47XG4gICAgICAgIHZhciByZW1vdmVkO1xuXG4gICAgICAgIGlmIChyYW5nZSA+IDAgJiYgcmFuZ2UgPD0gZW5kKVxuICAgICAgICB7XG4gICAgICAgICAgICByZW1vdmVkID0gdGhpcy5jaGlsZHJlbi5zcGxpY2UoYmVnaW4sIHJhbmdlKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdmVkLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlbW92ZWRbaV0ucGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlZFtpXS50cmFuc2Zvcm0pXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVkW2ldLnRyYW5zZm9ybS5fcGFyZW50SUQgPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2JvdW5kc0lEKys7XG5cbiAgICAgICAgICAgIHRoaXMub25DaGlsZHJlbkNoYW5nZShiZWdpbkluZGV4KTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcmVtb3ZlZC5sZW5ndGg7ICsraSQxKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlbW92ZWRbaSQxXS5lbWl0KCdyZW1vdmVkJywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdjaGlsZFJlbW92ZWQnLCByZW1vdmVkW2kkMV0sIHRoaXMsIGkkMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZW1vdmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJhbmdlID09PSAwICYmIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID09PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigncmVtb3ZlQ2hpbGRyZW46IG51bWVyaWMgdmFsdWVzIGFyZSBvdXRzaWRlIHRoZSBhY2NlcHRhYmxlIHJhbmdlLicpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTb3J0cyBjaGlsZHJlbiBieSB6SW5kZXguIFByZXZpb3VzIG9yZGVyIGlzIG1hbnRhaW5lZCBmb3IgMiBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIHpJbmRleC5cbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnNvcnRDaGlsZHJlbiA9IGZ1bmN0aW9uIHNvcnRDaGlsZHJlbiQxICgpXG4gICAge1xuICAgICAgICB2YXIgc29ydFJlcXVpcmVkID0gZmFsc2U7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGo7ICsraSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcblxuICAgICAgICAgICAgY2hpbGQuX2xhc3RTb3J0ZWRJbmRleCA9IGk7XG5cbiAgICAgICAgICAgIGlmICghc29ydFJlcXVpcmVkICYmIGNoaWxkLnpJbmRleCAhPT0gMClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzb3J0UmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNvcnRSZXF1aXJlZCAmJiB0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc29ydChzb3J0Q2hpbGRyZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zb3J0RGlydHkgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgdHJhbnNmb3JtIG9uIGFsbCBjaGlsZHJlbiBvZiB0aGlzIGNvbnRhaW5lciBmb3IgcmVuZGVyaW5nXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS51cGRhdGVUcmFuc2Zvcm0gPSBmdW5jdGlvbiB1cGRhdGVUcmFuc2Zvcm0gKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnNvcnRhYmxlQ2hpbGRyZW4gJiYgdGhpcy5zb3J0RGlydHkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc29ydENoaWxkcmVuKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ib3VuZHNJRCsrO1xuXG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnVwZGF0ZVRyYW5zZm9ybSh0aGlzLnBhcmVudC50cmFuc2Zvcm0pO1xuXG4gICAgICAgIC8vIFRPRE86IGNoZWNrIHJlbmRlciBmbGFncywgaG93IHRvIHByb2Nlc3Mgc3R1ZmYgaGVyZVxuICAgICAgICB0aGlzLndvcmxkQWxwaGEgPSB0aGlzLmFscGhhICogdGhpcy5wYXJlbnQud29ybGRBbHBoYTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgajsgKytpKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldO1xuXG4gICAgICAgICAgICBpZiAoY2hpbGQudmlzaWJsZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjaGlsZC51cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWNhbGN1bGF0ZXMgdGhlIGJvdW5kcyBvZiB0aGUgY29udGFpbmVyLlxuICAgICAqXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5jYWxjdWxhdGVCb3VuZHMgPSBmdW5jdGlvbiBjYWxjdWxhdGVCb3VuZHMgKClcbiAgICB7XG4gICAgICAgIHRoaXMuX2JvdW5kcy5jbGVhcigpO1xuXG4gICAgICAgIHRoaXMuX2NhbGN1bGF0ZUJvdW5kcygpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcblxuICAgICAgICAgICAgaWYgKCFjaGlsZC52aXNpYmxlIHx8ICFjaGlsZC5yZW5kZXJhYmxlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5jYWxjdWxhdGVCb3VuZHMoKTtcblxuICAgICAgICAgICAgLy8gVE9ETzogZmlsdGVyK21hc2ssIG5lZWQgdG8gbWFzayBib3RoIHNvbWVob3dcbiAgICAgICAgICAgIGlmIChjaGlsZC5fbWFzaylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5fbWFzay5jYWxjdWxhdGVCb3VuZHMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ib3VuZHMuYWRkQm91bmRzTWFzayhjaGlsZC5fYm91bmRzLCBjaGlsZC5fbWFzay5fYm91bmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkLmZpbHRlckFyZWEpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYm91bmRzLmFkZEJvdW5kc0FyZWEoY2hpbGQuX2JvdW5kcywgY2hpbGQuZmlsdGVyQXJlYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYm91bmRzLmFkZEJvdW5kcyhjaGlsZC5fYm91bmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xhc3RCb3VuZHNJRCA9IHRoaXMuX2JvdW5kc0lEO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWNhbGN1bGF0ZXMgdGhlIGJvdW5kcyBvZiB0aGUgb2JqZWN0LiBPdmVycmlkZSB0aGlzIHRvXG4gICAgICogY2FsY3VsYXRlIHRoZSBib3VuZHMgb2YgdGhlIHNwZWNpZmljIG9iamVjdCAobm90IGluY2x1ZGluZyBjaGlsZHJlbikuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5fY2FsY3VsYXRlQm91bmRzID0gZnVuY3Rpb24gX2NhbGN1bGF0ZUJvdW5kcyAoKVxuICAgIHtcbiAgICAgICAgLy8gRklMTCBJTi8vXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgdGhlIG9iamVjdCB1c2luZyB0aGUgV2ViR0wgcmVuZGVyZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXJcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAocmVuZGVyZXIpXG4gICAge1xuICAgICAgICAvLyBpZiB0aGUgb2JqZWN0IGlzIG5vdCB2aXNpYmxlIG9yIHRoZSBhbHBoYSBpcyAwIHRoZW4gbm8gbmVlZCB0byByZW5kZXIgdGhpcyBlbGVtZW50XG4gICAgICAgIGlmICghdGhpcy52aXNpYmxlIHx8IHRoaXMud29ybGRBbHBoYSA8PSAwIHx8ICF0aGlzLnJlbmRlcmFibGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRvIGEgcXVpY2sgY2hlY2sgdG8gc2VlIGlmIHRoaXMgZWxlbWVudCBoYXMgYSBtYXNrIG9yIGEgZmlsdGVyLlxuICAgICAgICBpZiAodGhpcy5fbWFzayB8fCAodGhpcy5maWx0ZXJzICYmIHRoaXMuZmlsdGVycy5sZW5ndGgpKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckFkdmFuY2VkKHJlbmRlcmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcihyZW5kZXJlcik7XG5cbiAgICAgICAgICAgIC8vIHNpbXBsZSByZW5kZXIgY2hpbGRyZW4hXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgajsgKytpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baV0ucmVuZGVyKHJlbmRlcmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgdGhlIG9iamVjdCB1c2luZyB0aGUgV2ViR0wgcmVuZGVyZXIgYW5kIGFkdmFuY2VkIGZlYXR1cmVzLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXJcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlbmRlckFkdmFuY2VkID0gZnVuY3Rpb24gcmVuZGVyQWR2YW5jZWQgKHJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgcmVuZGVyZXIuYmF0Y2guZmx1c2goKTtcblxuICAgICAgICB2YXIgZmlsdGVycyA9IHRoaXMuZmlsdGVycztcbiAgICAgICAgdmFyIG1hc2sgPSB0aGlzLl9tYXNrO1xuXG4gICAgICAgIC8vIHB1c2ggZmlsdGVyIGZpcnN0IGFzIHdlIG5lZWQgdG8gZW5zdXJlIHRoZSBzdGVuY2lsIGJ1ZmZlciBpcyBjb3JyZWN0IGZvciBhbnkgbWFza2luZ1xuICAgICAgICBpZiAoZmlsdGVycylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9lbmFibGVkRmlsdGVycylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVkRmlsdGVycyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9lbmFibGVkRmlsdGVycy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcnNbaV0uZW5hYmxlZClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuYWJsZWRGaWx0ZXJzLnB1c2goZmlsdGVyc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5fZW5hYmxlZEZpbHRlcnMubGVuZ3RoKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyLmZpbHRlci5wdXNoKHRoaXMsIHRoaXMuX2VuYWJsZWRGaWx0ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXNrKVxuICAgICAgICB7XG4gICAgICAgICAgICByZW5kZXJlci5tYXNrLnB1c2godGhpcywgdGhpcy5fbWFzayk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgdGhpcyBvYmplY3QgdG8gdGhlIGJhdGNoLCBvbmx5IHJlbmRlcmVkIGlmIGl0IGhhcyBhIHRleHR1cmUuXG4gICAgICAgIHRoaXMuX3JlbmRlcihyZW5kZXJlcik7XG5cbiAgICAgICAgLy8gbm93IGxvb3AgdGhyb3VnaCB0aGUgY2hpbGRyZW4gYW5kIG1ha2Ugc3VyZSB0aGV5IGdldCByZW5kZXJlZFxuICAgICAgICBmb3IgKHZhciBpJDEgPSAwLCBqID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkkMSA8IGo7IGkkMSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuW2kkMV0ucmVuZGVyKHJlbmRlcmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlcmVyLmJhdGNoLmZsdXNoKCk7XG5cbiAgICAgICAgaWYgKG1hc2spXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlbmRlcmVyLm1hc2sucG9wKHRoaXMsIHRoaXMuX21hc2spO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbHRlcnMgJiYgdGhpcy5fZW5hYmxlZEZpbHRlcnMgJiYgdGhpcy5fZW5hYmxlZEZpbHRlcnMubGVuZ3RoKVxuICAgICAgICB7XG4gICAgICAgICAgICByZW5kZXJlci5maWx0ZXIucG9wKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVG8gYmUgb3ZlcnJpZGRlbiBieSB0aGUgc3ViY2xhc3Nlcy5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gX3JlbmRlciAocmVuZGVyZXIpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB7XG4gICAgICAgIC8vIHRoaXMgaXMgd2hlcmUgY29udGVudCBpdHNlbGYgZ2V0cyByZW5kZXJlZC4uLlxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBpbnRlcm5hbCByZWZlcmVuY2VzIGFuZCBsaXN0ZW5lcnMgYXMgd2VsbCBhcyByZW1vdmVzIGNoaWxkcmVuIGZyb20gdGhlIGRpc3BsYXkgbGlzdC5cbiAgICAgKiBEbyBub3QgdXNlIGEgQ29udGFpbmVyIGFmdGVyIGNhbGxpbmcgYGRlc3Ryb3lgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R8Ym9vbGVhbn0gW29wdGlvbnNdIC0gT3B0aW9ucyBwYXJhbWV0ZXIuIEEgYm9vbGVhbiB3aWxsIGFjdCBhcyBpZiBhbGwgb3B0aW9uc1xuICAgICAqICBoYXZlIGJlZW4gc2V0IHRvIHRoYXQgdmFsdWVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoaWxkcmVuPWZhbHNlXSAtIGlmIHNldCB0byB0cnVlLCBhbGwgdGhlIGNoaWxkcmVuIHdpbGwgaGF2ZSB0aGVpciBkZXN0cm95XG4gICAgICogIG1ldGhvZCBjYWxsZWQgYXMgd2VsbC4gJ29wdGlvbnMnIHdpbGwgYmUgcGFzc2VkIG9uIHRvIHRob3NlIGNhbGxzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudGV4dHVyZT1mYWxzZV0gLSBPbmx5IHVzZWQgZm9yIGNoaWxkIFNwcml0ZXMgaWYgb3B0aW9ucy5jaGlsZHJlbiBpcyBzZXQgdG8gdHJ1ZVxuICAgICAqICBTaG91bGQgaXQgZGVzdHJveSB0aGUgdGV4dHVyZSBvZiB0aGUgY2hpbGQgc3ByaXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5iYXNlVGV4dHVyZT1mYWxzZV0gLSBPbmx5IHVzZWQgZm9yIGNoaWxkIFNwcml0ZXMgaWYgb3B0aW9ucy5jaGlsZHJlbiBpcyBzZXQgdG8gdHJ1ZVxuICAgICAqICBTaG91bGQgaXQgZGVzdHJveSB0aGUgYmFzZSB0ZXh0dXJlIG9mIHRoZSBjaGlsZCBzcHJpdGVcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95IChvcHRpb25zKVxuICAgIHtcbiAgICAgICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuc29ydERpcnR5ID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGRlc3Ryb3lDaGlsZHJlbiA9IHR5cGVvZiBvcHRpb25zID09PSAnYm9vbGVhbicgPyBvcHRpb25zIDogb3B0aW9ucyAmJiBvcHRpb25zLmNoaWxkcmVuO1xuXG4gICAgICAgIHZhciBvbGRDaGlsZHJlbiA9IHRoaXMucmVtb3ZlQ2hpbGRyZW4oMCwgdGhpcy5jaGlsZHJlbi5sZW5ndGgpO1xuXG4gICAgICAgIGlmIChkZXN0cm95Q2hpbGRyZW4pXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2xkQ2hpbGRyZW4ubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2xkQ2hpbGRyZW5baV0uZGVzdHJveShvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggb2YgdGhlIENvbnRhaW5lciwgc2V0dGluZyB0aGlzIHdpbGwgYWN0dWFsbHkgbW9kaWZ5IHRoZSBzY2FsZSB0byBhY2hpZXZlIHRoZSB2YWx1ZSBzZXRcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMud2lkdGguZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjYWxlLnggKiB0aGlzLmdldExvY2FsQm91bmRzKCkud2lkdGg7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy53aWR0aC5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5nZXRMb2NhbEJvdW5kcygpLndpZHRoO1xuXG4gICAgICAgIGlmICh3aWR0aCAhPT0gMClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zY2FsZS54ID0gdmFsdWUgLyB3aWR0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl93aWR0aCA9IHZhbHVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBDb250YWluZXIsIHNldHRpbmcgdGhpcyB3aWxsIGFjdHVhbGx5IG1vZGlmeSB0aGUgc2NhbGUgdG8gYWNoaWV2ZSB0aGUgdmFsdWUgc2V0XG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmhlaWdodC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGUueSAqIHRoaXMuZ2V0TG9jYWxCb3VuZHMoKS5oZWlnaHQ7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5oZWlnaHQuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLmdldExvY2FsQm91bmRzKCkuaGVpZ2h0O1xuXG4gICAgICAgIGlmIChoZWlnaHQgIT09IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueSA9IHZhbHVlIC8gaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zY2FsZS55ID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2hlaWdodCA9IHZhbHVlO1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggQ29udGFpbmVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICByZXR1cm4gQ29udGFpbmVyO1xufShEaXNwbGF5T2JqZWN0KSk7XG5cbi8vIHBlcmZvcm1hbmNlIGluY3JlYXNlIHRvIGF2b2lkIHVzaW5nIGNhbGwuLiAoMTB4IGZhc3RlcilcbkNvbnRhaW5lci5wcm90b3R5cGUuY29udGFpbmVyVXBkYXRlVHJhbnNmb3JtID0gQ29udGFpbmVyLnByb3RvdHlwZS51cGRhdGVUcmFuc2Zvcm07XG5cbmV4cG9ydCB7IEJvdW5kcywgQ29udGFpbmVyLCBEaXNwbGF5T2JqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXNwbGF5LmVzLmpzLm1hcFxuIiwiLyohXG4gKiBAcGl4aS9jb3JlIC0gdjUuMS41XG4gKiBDb21waWxlZCBUdWUsIDI0IFNlcCAyMDE5IDA0OjA3OjA1IFVUQ1xuICpcbiAqIEBwaXhpL2NvcmUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovXG5pbXBvcnQgeyBSdW5uZXIgfSBmcm9tICdAcGl4aS9ydW5uZXInO1xuaW1wb3J0IHsgZGV0ZXJtaW5lQ3Jvc3NPcmlnaW4sIGlzUG93MiwgQmFzZVRleHR1cmVDYWNoZSwgVGV4dHVyZUNhY2hlLCB1aWQsIEV2ZW50RW1pdHRlciwgZ2V0UmVzb2x1dGlvbk9mVXJsLCBuZXh0UG93MiwgaXNNb2JpbGUsIFByb2dyYW1DYWNoZSwgcmVtb3ZlSXRlbXMsIGhleDJzdHJpbmcsIGhleDJyZ2IsIGRlcHJlY2F0aW9uLCBpc1dlYkdMU3VwcG9ydGVkLCBzYXlIZWxsbywgcHJlbXVsdGlwbHlCbGVuZE1vZGUsIGxvZzIsIHByZW11bHRpcGx5VGludCB9IGZyb20gJ0BwaXhpL3V0aWxzJztcbmltcG9ydCB7IHNldHRpbmdzIH0gZnJvbSAnQHBpeGkvc2V0dGluZ3MnO1xuaW1wb3J0IHsgU0NBTEVfTU9ERVMsIEZPUk1BVFMsIFRZUEVTLCBUQVJHRVRTLCBEUkFXX01PREVTLCBFTlYsIFBSRUNJU0lPTiwgQkxFTkRfTU9ERVMsIEdDX01PREVTLCBNSVBNQVBfTU9ERVMsIFdSQVBfTU9ERVMsIFJFTkRFUkVSX1RZUEUgfSBmcm9tICdAcGl4aS9jb25zdGFudHMnO1xuaW1wb3J0IHsgVGlja2VyIH0gZnJvbSAnQHBpeGkvdGlja2VyJztcbmltcG9ydCB7IEdyb3VwRDgsIFJlY3RhbmdsZSwgUG9pbnQsIE1hdHJpeCB9IGZyb20gJ0BwaXhpL21hdGgnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnQHBpeGkvZGlzcGxheSc7XG5cbi8qKlxuICogQmFzZSByZXNvdXJjZSBjbGFzcyBmb3IgdGV4dHVyZXMgdGhhdCBtYW5hZ2VzIHZhbGlkYXRpb24gYW5kIHVwbG9hZGluZywgZGVwZW5kaW5nIG9uIGl0cyB0eXBlLlxuICpcbiAqIFVwbG9hZGluZyBvZiBhIGJhc2UgdGV4dHVyZSB0byB0aGUgR1BVIGlzIHJlcXVpcmVkLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWEkucmVzb3VyY2VzXG4gKi9cbnZhciBSZXNvdXJjZSA9IGZ1bmN0aW9uIFJlc291cmNlKHdpZHRoLCBoZWlnaHQpXG57XG4gICAgaWYgKCB3aWR0aCA9PT0gdm9pZCAwICkgd2lkdGggPSAwO1xuICAgIGlmICggaGVpZ2h0ID09PSB2b2lkIDAgKSBoZWlnaHQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgd2lkdGggb2YgdGhlIHJlc291cmNlXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgaGVpZ2h0IG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgLyoqXG4gICAgICogSWYgcmVzb3VyY2UgaGFzIGJlZW4gZGVzdHJveWVkXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBgdHJ1ZWAgaWYgcmVzb3VyY2UgaXMgY3JlYXRlZCBieSBCYXNlVGV4dHVyZVxuICAgICAqIHVzZWZ1bCBmb3IgZG9pbmcgY2xlYW51cCB3aXRoIEJhc2VUZXh0dXJlIGRlc3Ryb3lcbiAgICAgKiBhbmQgbm90IGNsZWFuaW5nIHVwIHJlc291cmNlcyB0aGF0IHdlcmUgY3JlYXRlZFxuICAgICAqIGV4dGVybmFsbHkuXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdGhpcy5pbnRlcm5hbCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogTWluaS1ydW5uZXIgZm9yIGhhbmRsaW5nIHJlc2l6ZSBldmVudHNcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1J1bm5lcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMub25SZXNpemUgPSBuZXcgUnVubmVyKCdzZXRSZWFsU2l6ZScsIDIpO1xuXG4gICAgLyoqXG4gICAgICogTWluaS1ydW5uZXIgZm9yIGhhbmRsaW5nIHVwZGF0ZSBldmVudHNcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1J1bm5lcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMub25VcGRhdGUgPSBuZXcgUnVubmVyKCd1cGRhdGUnKTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBpbnRlcm5hbCBlcnJvcnMsIHN1Y2ggYXMgbG9hZGluZyBlcnJvcnNcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1J1bm5lcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMub25FcnJvciA9IG5ldyBSdW5uZXIoJ29uRXJyb3InLCAxKTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHZhbGlkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHdpZHRoOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGhlaWdodDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vKipcbiAqIEJpbmQgdG8gYSBwYXJlbnQgQmFzZVRleHR1cmVcbiAqXG4gKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IGJhc2VUZXh0dXJlIC0gUGFyZW50IHRleHR1cmVcbiAqL1xuUmVzb3VyY2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kIChiYXNlVGV4dHVyZSlcbntcbiAgICB0aGlzLm9uUmVzaXplLmFkZChiYXNlVGV4dHVyZSk7XG4gICAgdGhpcy5vblVwZGF0ZS5hZGQoYmFzZVRleHR1cmUpO1xuICAgIHRoaXMub25FcnJvci5hZGQoYmFzZVRleHR1cmUpO1xuXG4gICAgLy8gQ2FsbCBhIHJlc2l6ZSBpbW1lZGlhdGUgaWYgd2UgYWxyZWFkeVxuICAgIC8vIGhhdmUgdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIHJlc291cmNlXG4gICAgaWYgKHRoaXMuX3dpZHRoIHx8IHRoaXMuX2hlaWdodClcbiAgICB7XG4gICAgICAgIHRoaXMub25SZXNpemUucnVuKHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQpO1xuICAgIH1cbn07XG5cbi8qKlxuICogVW5iaW5kIHRvIGEgcGFyZW50IEJhc2VUZXh0dXJlXG4gKlxuICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSAtIFBhcmVudCB0ZXh0dXJlXG4gKi9cblJlc291cmNlLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQgKGJhc2VUZXh0dXJlKVxue1xuICAgIHRoaXMub25SZXNpemUucmVtb3ZlKGJhc2VUZXh0dXJlKTtcbiAgICB0aGlzLm9uVXBkYXRlLnJlbW92ZShiYXNlVGV4dHVyZSk7XG4gICAgdGhpcy5vbkVycm9yLnJlbW92ZShiYXNlVGV4dHVyZSk7XG59O1xuXG4vKipcbiAqIFRyaWdnZXIgYSByZXNpemUgZXZlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBYIGRpbWVuc2lvblxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBZIGRpbWVuc2lvblxuICovXG5SZXNvdXJjZS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gcmVzaXplICh3aWR0aCwgaGVpZ2h0KVxue1xuICAgIGlmICh3aWR0aCAhPT0gdGhpcy5fd2lkdGggfHwgaGVpZ2h0ICE9PSB0aGlzLl9oZWlnaHQpXG4gICAge1xuICAgICAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMub25SZXNpemUucnVuKHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbn07XG5cbi8qKlxuICogSGFzIGJlZW4gdmFsaWRhdGVkXG4gKiBAcmVhZG9ubHlcbiAqIEBtZW1iZXIge2Jvb2xlYW59XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycy52YWxpZC5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiAhIXRoaXMuX3dpZHRoICYmICEhdGhpcy5faGVpZ2h0O1xufTtcblxuLyoqXG4gKiBIYXMgYmVlbiB1cGRhdGVkIHRyaWdnZXIgZXZlbnRcbiAqL1xuUmVzb3VyY2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKVxue1xuICAgIGlmICghdGhpcy5kZXN0cm95ZWQpXG4gICAge1xuICAgICAgICB0aGlzLm9uVXBkYXRlLnJ1bigpO1xuICAgIH1cbn07XG5cbi8qKlxuICogVGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiB0byBzdGFydCBwcmVsb2FkaW5nIGEgcmVzb3VyY2VcbiAqIG9yIGRvIGFueSBvdGhlciBwcmVwYXJlIHN0ZXAuXG4gKiBAcHJvdGVjdGVkXG4gKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSBIYW5kbGUgdGhlIHZhbGlkYXRlIGV2ZW50XG4gKi9cblJlc291cmNlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gbG9hZCAoKVxue1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn07XG5cbi8qKlxuICogVGhlIHdpZHRoIG9mIHRoZSByZXNvdXJjZS5cbiAqXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKiBAcmVhZG9ubHlcbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzLndpZHRoLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xufTtcblxuLyoqXG4gKiBUaGUgaGVpZ2h0IG9mIHRoZSByZXNvdXJjZS5cbiAqXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKiBAcmVhZG9ubHlcbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmhlaWdodC5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG59O1xuXG4vKipcbiAqIFVwbG9hZHMgdGhlIHRleHR1cmUgb3IgcmV0dXJucyBmYWxzZSBpZiBpdCBjYW50IGZvciBzb21lIHJlYXNvbi4gT3ZlcnJpZGUgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge1BJWEkuUmVuZGVyZXJ9IHJlbmRlcmVyIC0geWVhaCwgcmVuZGVyZXIhXG4gKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IGJhc2VUZXh0dXJlIC0gdGhlIHRleHR1cmVcbiAqIEBwYXJhbSB7UElYSS5HTFRleHR1cmV9IGdsVGV4dHVyZSAtIHRleHR1cmUgaW5zdGFuY2UgZm9yIHRoaXMgd2ViZ2wgY29udGV4dFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaXMgc3VjY2Vzc1xuICovXG5SZXNvdXJjZS5wcm90b3R5cGUudXBsb2FkID0gZnVuY3Rpb24gdXBsb2FkIChyZW5kZXJlciwgYmFzZVRleHR1cmUsIGdsVGV4dHVyZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xue1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSwgb3B0aW9uYWwgdG8gb3ZlcnJpZGVcbiAqXG4gKiBAcGFyYW0ge1BJWEkuUmVuZGVyZXJ9IHJlbmRlcmVyIC0geWVhaCwgcmVuZGVyZXIhXG4gKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IGJhc2VUZXh0dXJlIC0gdGhlIHRleHR1cmVcbiAqIEBwYXJhbSB7UElYSS5HTFRleHR1cmV9IGdsVGV4dHVyZSAtIHRleHR1cmUgaW5zdGFuY2UgZm9yIHRoaXMgd2ViZ2wgY29udGV4dFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpcyBzdWNjZXNzXG4gKi9cblJlc291cmNlLnByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uIHN0eWxlIChyZW5kZXJlciwgYmFzZVRleHR1cmUsIGdsVGV4dHVyZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xue1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgYW55dGhpbmcsIHRoaXMgaGFwcGVucyB3aGVuIGRlc3Ryb3lpbmcgaXMgcmVhZHkuXG4gKlxuICogQHByb3RlY3RlZFxuICovXG5SZXNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UgKClcbntcbiAgICAvLyBvdmVycmlkZVxufTtcblxuLyoqXG4gKiBDYWxsIHdoZW4gZGVzdHJveWluZyByZXNvdXJjZSwgdW5iaW5kIGFueSBCYXNlVGV4dHVyZSBvYmplY3RcbiAqIGJlZm9yZSBjYWxsaW5nIHRoaXMgbWV0aG9kLCBhcyByZWZlcmVuY2UgY291bnRzIGFyZSBtYWludGFpbmVkXG4gKiBpbnRlcm5hbGx5LlxuICovXG5SZXNvdXJjZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbntcbiAgICBpZiAoIXRoaXMuZGVzdHJveWVkKVxuICAgIHtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5vbkVycm9yLnJlbW92ZUFsbCgpO1xuICAgICAgICB0aGlzLm9uRXJyb3IgPSBudWxsO1xuICAgICAgICB0aGlzLm9uUmVzaXplLnJlbW92ZUFsbCgpO1xuICAgICAgICB0aGlzLm9uUmVzaXplID0gbnVsbDtcbiAgICAgICAgdGhpcy5vblVwZGF0ZS5yZW1vdmVBbGwoKTtcbiAgICAgICAgdGhpcy5vblVwZGF0ZSA9IG51bGw7XG4gICAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFJlc291cmNlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbi8qKlxuICogQmFzZSBmb3IgYWxsIHRoZSBpbWFnZS9jYW52YXMgcmVzb3VyY2VzXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkucmVzb3VyY2VzLlJlc291cmNlXG4gKiBAbWVtYmVyb2YgUElYSS5yZXNvdXJjZXNcbiAqL1xudmFyIEJhc2VJbWFnZVJlc291cmNlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoUmVzb3VyY2UpIHtcbiAgICBmdW5jdGlvbiBCYXNlSW1hZ2VSZXNvdXJjZShzb3VyY2UpXG4gICAge1xuICAgICAgICB2YXIgd2lkdGggPSBzb3VyY2UubmF0dXJhbFdpZHRoIHx8IHNvdXJjZS52aWRlb1dpZHRoIHx8IHNvdXJjZS53aWR0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IHNvdXJjZS5uYXR1cmFsSGVpZ2h0IHx8IHNvdXJjZS52aWRlb0hlaWdodCB8fCBzb3VyY2UuaGVpZ2h0O1xuXG4gICAgICAgIFJlc291cmNlLmNhbGwodGhpcywgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzb3VyY2UgZWxlbWVudFxuICAgICAgICAgKiBAbWVtYmVyIHtIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fEhUTUxWaWRlb0VsZW1lbnR8U1ZHRWxlbWVudH1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgc2V0IHRvIGB0cnVlYCwgd2lsbCBmb3JjZSBgdGV4SW1hZ2UyRGAgb3ZlciBgdGV4U3ViSW1hZ2UyRGAgZm9yIHVwbG9hZGluZy5cbiAgICAgICAgICogQ2VydGFpbiB0eXBlcyBvZiBtZWRpYSAoZS5nLiB2aWRlbykgdXNpbmcgYHRleEltYWdlMkRgIGlzIG1vcmUgcGVyZm9ybWFudC5cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubm9TdWJJbWFnZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICggUmVzb3VyY2UgKSBCYXNlSW1hZ2VSZXNvdXJjZS5fX3Byb3RvX18gPSBSZXNvdXJjZTtcbiAgICBCYXNlSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBSZXNvdXJjZSAmJiBSZXNvdXJjZS5wcm90b3R5cGUgKTtcbiAgICBCYXNlSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCYXNlSW1hZ2VSZXNvdXJjZTtcblxuICAgIC8qKlxuICAgICAqIFNldCBjcm9zcyBvcmlnaW4gYmFzZWQgZGV0ZWN0aW5nIHRoZSB1cmwgYW5kIHRoZSBjcm9zc29yaWdpblxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSBjcm9zc09yaWdpblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBVUkwgdG8gY2hlY2tcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSBbY3Jvc3NvcmlnaW49dHJ1ZV0gLSBDcm9zcyBvcmlnaW4gdmFsdWUgdG8gdXNlXG4gICAgICovXG4gICAgQmFzZUltYWdlUmVzb3VyY2UuY3Jvc3NPcmlnaW4gPSBmdW5jdGlvbiBjcm9zc09yaWdpbiAoZWxlbWVudCwgdXJsLCBjcm9zc29yaWdpbilcbiAgICB7XG4gICAgICAgIGlmIChjcm9zc29yaWdpbiA9PT0gdW5kZWZpbmVkICYmIHVybC5pbmRleE9mKCdkYXRhOicpICE9PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICBlbGVtZW50LmNyb3NzT3JpZ2luID0gZGV0ZXJtaW5lQ3Jvc3NPcmlnaW4odXJsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjcm9zc29yaWdpbiAhPT0gZmFsc2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY3Jvc3NPcmlnaW4gPSB0eXBlb2YgY3Jvc3NvcmlnaW4gPT09ICdzdHJpbmcnID8gY3Jvc3NvcmlnaW4gOiAnYW5vbnltb3VzJztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgdGhlIHRleHR1cmUgdG8gdGhlIEdQVS5cbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyZXJ9IHJlbmRlcmVyIFVwbG9hZCB0byB0aGUgcmVuZGVyZXJcbiAgICAgKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IGJhc2VUZXh0dXJlIFJlZmVyZW5jZSB0byBwYXJlbnQgdGV4dHVyZVxuICAgICAqIEBwYXJhbSB7UElYSS5HTFRleHR1cmV9IGdsVGV4dHVyZVxuICAgICAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudHxIVE1MVmlkZW9FbGVtZW50fFNWR0VsZW1lbnR9IFtzb3VyY2VdIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpcyBzdWNjZXNzXG4gICAgICovXG4gICAgQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlLnVwbG9hZCA9IGZ1bmN0aW9uIHVwbG9hZCAocmVuZGVyZXIsIGJhc2VUZXh0dXJlLCBnbFRleHR1cmUsIHNvdXJjZSlcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHJlbmRlcmVyLmdsO1xuICAgICAgICB2YXIgd2lkdGggPSBiYXNlVGV4dHVyZS5yZWFsV2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBiYXNlVGV4dHVyZS5yZWFsSGVpZ2h0O1xuXG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZSB8fCB0aGlzLnNvdXJjZTtcblxuICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIGJhc2VUZXh0dXJlLnByZW11bHRpcGx5QWxwaGEpO1xuXG4gICAgICAgIGlmICghdGhpcy5ub1N1YkltYWdlXG4gICAgICAgICAgICAmJiBiYXNlVGV4dHVyZS50YXJnZXQgPT09IGdsLlRFWFRVUkVfMkRcbiAgICAgICAgICAgICYmIGdsVGV4dHVyZS53aWR0aCA9PT0gd2lkdGhcbiAgICAgICAgICAgICYmIGdsVGV4dHVyZS5oZWlnaHQgPT09IGhlaWdodClcbiAgICAgICAge1xuICAgICAgICAgICAgZ2wudGV4U3ViSW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCAwLCAwLCBiYXNlVGV4dHVyZS5mb3JtYXQsIGJhc2VUZXh0dXJlLnR5cGUsIHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBnbFRleHR1cmUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIGdsVGV4dHVyZS5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQoYmFzZVRleHR1cmUudGFyZ2V0LCAwLCBiYXNlVGV4dHVyZS5mb3JtYXQsIGJhc2VUZXh0dXJlLmZvcm1hdCwgYmFzZVRleHR1cmUudHlwZSwgc291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgc291cmNlIHdpZHRoL2hlaWdodCB3YXMgY2hhbmdlZCwgcmVzaXplIGNhbiBjYXVzZSBleHRyYSBiYXNlVGV4dHVyZSB1cGRhdGUuXG4gICAgICogVHJpZ2dlcnMgb25lIHVwZGF0ZSBpbiBhbnkgY2FzZS5cbiAgICAgKi9cbiAgICBCYXNlSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3aWR0aCA9IHRoaXMuc291cmNlLm5hdHVyYWxXaWR0aCB8fCB0aGlzLnNvdXJjZS52aWRlb1dpZHRoIHx8IHRoaXMuc291cmNlLndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5zb3VyY2UubmF0dXJhbEhlaWdodCB8fCB0aGlzLnNvdXJjZS52aWRlb0hlaWdodCB8fCB0aGlzLnNvdXJjZS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5yZXNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgUmVzb3VyY2UucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoaXMgQmFzZUltYWdlUmVzb3VyY2VcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IFtmcm9tVGV4dHVyZV0gT3B0aW9uYWwgYmFzZSB0ZXh0dXJlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gRGVzdHJveSB3YXMgc3VjY2Vzc2Z1bFxuICAgICAqL1xuICAgIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gQmFzZUltYWdlUmVzb3VyY2U7XG59KFJlc291cmNlKSk7XG5cbi8qKlxuICogUmVzb3VyY2UgdHlwZSBmb3IgSFRNTEltYWdlRWxlbWVudC5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5yZXNvdXJjZXMuQmFzZUltYWdlUmVzb3VyY2VcbiAqIEBtZW1iZXJvZiBQSVhJLnJlc291cmNlc1xuICovXG52YXIgSW1hZ2VSZXNvdXJjZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEJhc2VJbWFnZVJlc291cmNlKSB7XG4gICAgZnVuY3Rpb24gSW1hZ2VSZXNvdXJjZShzb3VyY2UsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAoIShzb3VyY2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGltYWdlRWxlbWVudCA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgICAgICBCYXNlSW1hZ2VSZXNvdXJjZS5jcm9zc09yaWdpbihpbWFnZUVsZW1lbnQsIHNvdXJjZSwgb3B0aW9ucy5jcm9zc29yaWdpbik7XG5cbiAgICAgICAgICAgIGltYWdlRWxlbWVudC5zcmMgPSBzb3VyY2U7XG4gICAgICAgICAgICBzb3VyY2UgPSBpbWFnZUVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBCYXNlSW1hZ2VSZXNvdXJjZS5jYWxsKHRoaXMsIHNvdXJjZSk7XG5cbiAgICAgICAgLy8gRmlyZUZveCA2OCwgYW5kIHBvc3NpYmx5IG90aGVyIHZlcnNpb25zLCBzZWVtcyBsaWtlIHNldHRpbmcgdGhlIEhUTUxJbWFnZUVsZW1lbnQjd2lkdGggYW5kICNoZWlnaHRcbiAgICAgICAgLy8gdG8gbm9uLXplcm8gdmFsdWVzIGJlZm9yZSBpdHMgbG9hZGluZyBjb21wbGV0ZXMgaWYgaW1hZ2VzIGFyZSBpbiBhIGNhY2hlLlxuICAgICAgICAvLyBCZWNhdXNlIG9mIHRoaXMsIG5lZWQgdG8gc2V0IHRoZSBgX3dpZHRoYCBhbmQgdGhlIGBfaGVpZ2h0YCB0byB6ZXJvIHRvIGF2b2lkIHVwbG9hZGluZyBpbmNvbXBsZXRlIGltYWdlcy5cbiAgICAgICAgLy8gUGxlYXNlIHJlZmVyIHRvIHRoZSBpc3N1ZSAjNTk2OCAoaHR0cHM6Ly9naXRodWIuY29tL3BpeGlqcy9waXhpLmpzL2lzc3Vlcy81OTY4KS5cbiAgICAgICAgaWYgKCFzb3VyY2UuY29tcGxldGUgJiYgISF0aGlzLl93aWR0aCAmJiAhIXRoaXMuX2hlaWdodClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fd2lkdGggPSAwO1xuICAgICAgICAgICAgdGhpcy5faGVpZ2h0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVUkwgb2YgdGhlIGltYWdlIHNvdXJjZVxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVybCA9IHNvdXJjZS5zcmM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gcHJvY2VzcyBpcyBjb21wbGV0ZWRcbiAgICAgICAgICogQG1lbWJlciB7UHJvbWlzZTx2b2lkPn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3Byb2Nlc3MgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgaW1hZ2Ugc2hvdWxkIGJlIGRpc3Bvc2VkIGFmdGVyIHVwbG9hZFxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcmVzZXJ2ZUJpdG1hcCA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBjYXBhYmxlLCBjb252ZXJ0IHRoZSBpbWFnZSB1c2luZyBjcmVhdGVJbWFnZUJpdG1hcCBBUElcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgUElYSS5zZXR0aW5ncy5DUkVBVEVfSU1BR0VfQklUTUFQXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNyZWF0ZUJpdG1hcCA9IChvcHRpb25zLmNyZWF0ZUJpdG1hcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG9wdGlvbnMuY3JlYXRlQml0bWFwIDogc2V0dGluZ3MuQ1JFQVRFX0lNQUdFX0JJVE1BUCkgJiYgISF3aW5kb3cuY3JlYXRlSW1hZ2VCaXRtYXA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2xzIHRleHR1cmUgcHJlbXVsdGlwbHlBbHBoYSBmaWVsZFxuICAgICAgICAgKiBDb3BpZXMgZnJvbSBvcHRpb25zXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW58bnVsbH1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBvcHRpb25zLnByZW11bHRpcGx5QWxwaGEgIT09IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgSW1hZ2VCaXRtYXAgZWxlbWVudCBjcmVhdGVkIGZvciBIVE1MSW1hZ2VFbGVtZW50XG4gICAgICAgICAqIEBtZW1iZXIge0ltYWdlQml0bWFwfVxuICAgICAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJpdG1hcCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb21pc2Ugd2hlbiBsb2FkaW5nXG4gICAgICAgICAqIEBtZW1iZXIge1Byb21pc2U8dm9pZD59XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2xvYWQgPSBudWxsO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF1dG9Mb2FkICE9PSBmYWxzZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIEJhc2VJbWFnZVJlc291cmNlICkgSW1hZ2VSZXNvdXJjZS5fX3Byb3RvX18gPSBCYXNlSW1hZ2VSZXNvdXJjZTtcbiAgICBJbWFnZVJlc291cmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJhc2VJbWFnZVJlc291cmNlICYmIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZSApO1xuICAgIEltYWdlUmVzb3VyY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW1hZ2VSZXNvdXJjZTtcblxuICAgIC8qKlxuICAgICAqIHJldHVybnMgYSBwcm9taXNlIHdoZW4gaW1hZ2Ugd2lsbCBiZSBsb2FkZWQgYW5kIHByb2Nlc3NlZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY3JlYXRlQml0bWFwPXRydWVdIHdoZXRoZXIgcHJvY2VzcyBpbWFnZSBpbnRvIGJpdG1hcFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIEltYWdlUmVzb3VyY2UucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiBsb2FkIChjcmVhdGVCaXRtYXApXG4gICAge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICBpZiAoY3JlYXRlQml0bWFwICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQml0bWFwID0gY3JlYXRlQml0bWFwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2xvYWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2FkO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9hZCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICB0aGlzJDEudXJsID0gdGhpcyQxLnNvdXJjZS5zcmM7XG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcyQxO1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHJlZi5zb3VyY2U7XG5cbiAgICAgICAgICAgIHZhciBjb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMkMS5kZXN0cm95ZWQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNvdXJjZS5vbmxvYWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHNvdXJjZS5vbmVycm9yID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIHRoaXMkMS5yZXNpemUoc291cmNlLndpZHRoLCBzb3VyY2UuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB0aGlzJDEuX2xvYWQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMkMS5jcmVhdGVCaXRtYXApXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMkMS5wcm9jZXNzKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMkMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHNvdXJjZS5jb21wbGV0ZSAmJiBzb3VyY2Uuc3JjKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNvdXJjZS5vbmxvYWQgPSBjb21wbGV0ZWQ7XG4gICAgICAgICAgICAgICAgc291cmNlLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIHRoaXMkMS5vbkVycm9yLnJ1bihldmVudCk7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB3ZSBuZWVkIHRvIGNvbnZlcnQgaW1hZ2UgaW50byBCaXRtYXBJbWFnZS5cbiAgICAgKiBDYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLCByZWFsIHByb21pc2UgaXMgY2FjaGVkIGluc2lkZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBjYWNoZWQgcHJvbWlzZSB0byBmaWxsIHRoYXQgYml0bWFwXG4gICAgICovXG4gICAgSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MgKClcbiAgICB7XG4gICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9wcm9jZXNzICE9PSBudWxsKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2VzcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5iaXRtYXAgIT09IG51bGwgfHwgIXdpbmRvdy5jcmVhdGVJbWFnZUJpdG1hcClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Byb2Nlc3MgPSB3aW5kb3cuY3JlYXRlSW1hZ2VCaXRtYXAodGhpcy5zb3VyY2UsXG4gICAgICAgICAgICAwLCAwLCB0aGlzLnNvdXJjZS53aWR0aCwgdGhpcy5zb3VyY2UuaGVpZ2h0LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHByZW11bHRpcGx5QWxwaGE6IHRoaXMucHJlbXVsdGlwbHlBbHBoYSA/ICdwcmVtdWx0aXBseScgOiAnbm9uZScsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGJpdG1hcCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzJDEuZGVzdHJveWVkKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMkMS5iaXRtYXAgPSBiaXRtYXA7XG4gICAgICAgICAgICAgICAgdGhpcyQxLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMkMS5fcHJvY2VzcyA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMkMSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2VzcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBsb2FkIHRoZSBpbWFnZSByZXNvdXJjZSB0byBHUFUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyZXJ9IHJlbmRlcmVyIC0gUmVuZGVyZXIgdG8gdXBsb2FkIHRvXG4gICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSAtIEJhc2VUZXh0dXJlIGZvciB0aGlzIHJlc291cmNlXG4gICAgICogQHBhcmFtIHtQSVhJLkdMVGV4dHVyZX0gZ2xUZXh0dXJlIC0gR0xUZXh0dXJlIHRvIHVzZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlzIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBJbWFnZVJlc291cmNlLnByb3RvdHlwZS51cGxvYWQgPSBmdW5jdGlvbiB1cGxvYWQgKHJlbmRlcmVyLCBiYXNlVGV4dHVyZSwgZ2xUZXh0dXJlKVxuICAgIHtcbiAgICAgICAgYmFzZVRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSA9IHRoaXMucHJlbXVsdGlwbHlBbHBoYTtcblxuICAgICAgICBpZiAoIXRoaXMuY3JlYXRlQml0bWFwKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlLnVwbG9hZC5jYWxsKHRoaXMsIHJlbmRlcmVyLCBiYXNlVGV4dHVyZSwgZ2xUZXh0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuYml0bWFwKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyB5ZWFoLCBpZ25vcmUgdGhlIG91dHB1dFxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYml0bWFwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZS51cGxvYWQuY2FsbCh0aGlzLCByZW5kZXJlciwgYmFzZVRleHR1cmUsIGdsVGV4dHVyZSwgdGhpcy5iaXRtYXApO1xuXG4gICAgICAgIGlmICghdGhpcy5wcmVzZXJ2ZUJpdG1hcClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gY2hlY2tzIGlmIHRoZXJlIGFyZSBvdGhlciByZW5kZXJlcnMgdGhhdCBwb3NzaWJseSBuZWVkIHRoaXMgYml0bWFwXG5cbiAgICAgICAgICAgIHZhciBmbGFnID0gdHJ1ZTtcblxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGJhc2VUZXh0dXJlLl9nbFRleHR1cmVzKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlclRleCA9IGJhc2VUZXh0dXJlLl9nbFRleHR1cmVzW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAob3RoZXJUZXggIT09IGdsVGV4dHVyZSAmJiBvdGhlclRleC5kaXJ0eUlkICE9PSBiYXNlVGV4dHVyZS5kaXJ0eUlkKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmbGFnKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJpdG1hcC5jbG9zZSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYml0bWFwLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5iaXRtYXAgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgdGV4dHVyZVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIEltYWdlUmVzb3VyY2UucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlICgpXG4gICAge1xuICAgICAgICB0aGlzLnNvdXJjZS5vbmxvYWQgPSBudWxsO1xuICAgICAgICB0aGlzLnNvdXJjZS5vbmVycm9yID0gbnVsbDtcblxuICAgICAgICBCYXNlSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXG4gICAgICAgIGlmICh0aGlzLmJpdG1hcClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5iaXRtYXAuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuYml0bWFwID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcm9jZXNzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbG9hZCA9IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiBJbWFnZVJlc291cmNlO1xufShCYXNlSW1hZ2VSZXNvdXJjZSkpO1xuXG4vKipcbiAqIENvbGxlY3Rpb24gb2YgaW5zdGFsbGVkIHJlc291cmNlIHR5cGVzLCBjbGFzcyBtdXN0IGV4dGVuZCB7QGxpbmsgUElYSS5yZXNvdXJjZXMuUmVzb3VyY2V9LlxuICogQGV4YW1wbGVcbiAqIGNsYXNzIEN1c3RvbVJlc291cmNlIGV4dGVuZHMgUElYSS5yZXNvdXJjZXMuUmVzb3VyY2Uge1xuICogICAvLyBNVVNUIGhhdmUgc291cmNlLCBvcHRpb25zIGNvbnN0cnVjdG9yIHNpZ25hdHVyZVxuICogICAvLyBmb3IgYXV0by1kZXRlY3RlZCByZXNvdXJjZXMgdG8gYmUgY3JlYXRlZC5cbiAqICAgY29uc3RydWN0b3Ioc291cmNlLCBvcHRpb25zKSB7XG4gKiAgICAgc3VwZXIoKTtcbiAqICAgfVxuICogICB1cGxvYWQocmVuZGVyZXIsIGJhc2VUZXh0dXJlLCBnbFRleHR1cmUpIHtcbiAqICAgICAvLyB1cGxvYWQgd2l0aCBHTFxuICogICAgIHJldHVybiB0cnVlO1xuICogICB9XG4gKiAgIC8vIHVzZWQgdG8gYXV0by1kZXRlY3QgcmVzb3VyY2VcbiAqICAgc3RhdGljIHRlc3Qoc291cmNlLCBleHRlbnNpb24pIHtcbiAqICAgICByZXR1cm4gZXh0ZW5zaW9uID09PSAneHl6J3x8IHNvdXJjZSBpbnN0YW5jZW9mIFNvbWVDbGFzcztcbiAqICAgfVxuICogfVxuICogLy8gSW5zdGFsbCB0aGUgbmV3IHJlc291cmNlIHR5cGVcbiAqIFBJWEkucmVzb3VyY2VzLklOU1RBTExFRC5wdXNoKEN1c3RvbVJlc291cmNlKTtcbiAqXG4gKiBAbmFtZSBQSVhJLnJlc291cmNlcy5JTlNUQUxMRURcbiAqIEB0eXBlIHtBcnJheTwqPn1cbiAqIEBzdGF0aWNcbiAqIEByZWFkb25seVxuICovXG52YXIgSU5TVEFMTEVEID0gW107XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVzb3VyY2UgZWxlbWVudCBmcm9tIGEgc2luZ2xlIHNvdXJjZSBlbGVtZW50LiBUaGlzXG4gKiBhdXRvLWRldGVjdHMgd2hpY2ggdHlwZSBvZiByZXNvdXJjZSB0byBjcmVhdGUuIEFsbCByZXNvdXJjZXMgdGhhdFxuICogYXJlIGF1dG8tZGV0ZWN0YWJsZSBtdXN0IGhhdmUgYSBzdGF0aWMgYHRlc3RgIG1ldGhvZCBhbmQgYSBjb25zdHJ1Y3RvclxuICogd2l0aCB0aGUgYXJndW1lbnRzIGAoc291cmNlLCBvcHRpb25zPylgLiBDdXJyZW50bHksIHRoZSBzdXBwb3J0ZWRcbiAqIHJlc291cmNlcyBmb3IgYXV0by1kZXRlY3Rpb24gaW5jbHVkZTpcbiAqICAtIHtAbGluayBQSVhJLnJlc291cmNlcy5JbWFnZVJlc291cmNlfVxuICogIC0ge0BsaW5rIFBJWEkucmVzb3VyY2VzLkNhbnZhc1Jlc291cmNlfVxuICogIC0ge0BsaW5rIFBJWEkucmVzb3VyY2VzLlZpZGVvUmVzb3VyY2V9XG4gKiAgLSB7QGxpbmsgUElYSS5yZXNvdXJjZXMuU1ZHUmVzb3VyY2V9XG4gKiAgLSB7QGxpbmsgUElYSS5yZXNvdXJjZXMuQnVmZmVyUmVzb3VyY2V9XG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gUElYSS5yZXNvdXJjZXMuYXV0b0RldGVjdFJlc291cmNlXG4gKiBAcGFyYW0ge3N0cmluZ3wqfSBzb3VyY2UgLSBSZXNvdXJjZSBzb3VyY2UsIHRoaXMgY2FuIGJlIHRoZSBVUkwgdG8gdGhlIHJlc291cmNlLFxuICogICAgICAgIGEgdHlwZWQtYXJyYXkgKGZvciBCdWZmZXJSZXNvdXJjZSksIEhUTUxWaWRlb0VsZW1lbnQsIFNWRyBkYXRhLXVyaVxuICogICAgICAgIG9yIGFueSBvdGhlciByZXNvdXJjZSB0aGF0IGNhbiBiZSBhdXRvLWRldGVjdGVkLiBJZiBub3QgcmVzb3VyY2UgaXNcbiAqICAgICAgICBkZXRlY3RlZCwgaXQncyBhc3N1bWVkIHRvIGJlIGFuIEltYWdlUmVzb3VyY2UuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gUGFzcy10aHJvdWdoIG9wdGlvbnMgdG8gdXNlIGZvciBSZXNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndpZHRoXSAtIFdpZHRoIG9mIEJ1ZmZlclJlc291cmNlIG9yIFNWRyByYXN0ZXJpemF0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaGVpZ2h0XSAtIEhlaWdodCBvZiBCdWZmZXJSZXNvdXJjZSBvciBTVkcgcmFzdGVyaXphdGlvblxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hdXRvTG9hZD10cnVlXSAtIEltYWdlLCBTVkcgYW5kIFZpZGVvIGZsYWcgdG8gc3RhcnQgbG9hZGluZ1xuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNjYWxlPTFdIC0gU1ZHIHNvdXJjZSBzY2FsZS4gT3ZlcnJpZGRlbiBieSB3aWR0aCwgaGVpZ2h0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNyZWF0ZUJpdG1hcD1QSVhJLnNldHRpbmdzLkNSRUFURV9JTUFHRV9CSVRNQVBdIC0gSW1hZ2Ugb3B0aW9uIHRvIGNyZWF0ZSBCaXRtYXAgb2JqZWN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNyb3Nzb3JpZ2luPXRydWVdIC0gSW1hZ2UgYW5kIFZpZGVvIG9wdGlvbiB0byBzZXQgY3Jvc3NPcmlnaW5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXV0b1BsYXk9dHJ1ZV0gLSBWaWRlbyBvcHRpb24gdG8gc3RhcnQgcGxheWluZyB2aWRlbyBpbW1lZGlhdGVseVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnVwZGF0ZUZQUz0wXSAtIFZpZGVvIG9wdGlvbiB0byB1cGRhdGUgaG93IG1hbnkgdGltZXMgYSBzZWNvbmQgdGhlXG4gKiAgICAgICAgdGV4dHVyZSBzaG91bGQgYmUgdXBkYXRlZCBmcm9tIHRoZSB2aWRlby4gTGVhdmUgYXQgMCB0byB1cGRhdGUgYXQgZXZlcnkgcmVuZGVyXG4gKiBAcmV0dXJuIHtQSVhJLnJlc291cmNlcy5SZXNvdXJjZX0gVGhlIGNyZWF0ZWQgcmVzb3VyY2UuXG4gKi9cbmZ1bmN0aW9uIGF1dG9EZXRlY3RSZXNvdXJjZShzb3VyY2UsIG9wdGlvbnMpXG57XG4gICAgaWYgKCFzb3VyY2UpXG4gICAge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgZXh0ZW5zaW9uID0gJyc7XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpXG4gICAge1xuICAgICAgICAvLyBzZWFyY2ggZm9yIGZpbGUgZXh0ZW5zaW9uOiBwZXJpb2QsIDMtNCBjaGFycywgdGhlbiA/LCAjIG9yIEVPTFxuICAgICAgICB2YXIgcmVzdWx0ID0gKC9cXC4oXFx3ezMsNH0pKD86JHxcXD98IykvaSkuZXhlYyhzb3VyY2UpO1xuXG4gICAgICAgIGlmIChyZXN1bHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGV4dGVuc2lvbiA9IHJlc3VsdFsxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IElOU1RBTExFRC5sZW5ndGggLSAxOyBpID49IDA7IC0taSlcbiAgICB7XG4gICAgICAgIHZhciBSZXNvdXJjZVBsdWdpbiA9IElOU1RBTExFRFtpXTtcblxuICAgICAgICBpZiAoUmVzb3VyY2VQbHVnaW4udGVzdCAmJiBSZXNvdXJjZVBsdWdpbi50ZXN0KHNvdXJjZSwgZXh0ZW5zaW9uKSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNvdXJjZVBsdWdpbihzb3VyY2UsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2hlbiBpbiBkb3VidDogcHJvYmFibHkgYW4gaW1hZ2VcbiAgICAvLyBtaWdodCBiZSBhcHByb3ByaWF0ZSB0byB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gbnVsbFxuICAgIHJldHVybiBuZXcgSW1hZ2VSZXNvdXJjZShzb3VyY2UsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIEBpbnRlcmZhY2UgU2hhcmVkQXJyYXlCdWZmZXJcbiAqL1xuXG4vKipcbiAqIEJ1ZmZlciByZXNvdXJjZSB3aXRoIGRhdGEgb2YgdHlwZWQgYXJyYXkuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkucmVzb3VyY2VzLlJlc291cmNlXG4gKiBAbWVtYmVyb2YgUElYSS5yZXNvdXJjZXNcbiAqL1xudmFyIEJ1ZmZlclJlc291cmNlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoUmVzb3VyY2UpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJSZXNvdXJjZShzb3VyY2UsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICB2YXIgcmVmID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIHdpZHRoID0gcmVmLndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgICAgICBpZiAoIXdpZHRoIHx8ICFoZWlnaHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQnVmZmVyUmVzb3VyY2Ugd2lkdGggb3IgaGVpZ2h0IGludmFsaWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFJlc291cmNlLmNhbGwodGhpcywgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNvdXJjZSBhcnJheVxuICAgICAgICAgKiBDYW5ub3QgYmUgQ2xhbXBlZFVpbnQ4QXJyYXkgYmVjYXVzZSBpdCBjYW50IGJlIHVwbG9hZGVkIHRvIFdlYkdMXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge0Zsb2F0MzJBcnJheXxVaW50OEFycmF5fFVpbnQzMkFycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kYXRhID0gc291cmNlO1xuICAgIH1cblxuICAgIGlmICggUmVzb3VyY2UgKSBCdWZmZXJSZXNvdXJjZS5fX3Byb3RvX18gPSBSZXNvdXJjZTtcbiAgICBCdWZmZXJSZXNvdXJjZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBSZXNvdXJjZSAmJiBSZXNvdXJjZS5wcm90b3R5cGUgKTtcbiAgICBCdWZmZXJSZXNvdXJjZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCdWZmZXJSZXNvdXJjZTtcblxuICAgIC8qKlxuICAgICAqIFVwbG9hZCB0aGUgdGV4dHVyZSB0byB0aGUgR1BVLlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJlcn0gcmVuZGVyZXIgVXBsb2FkIHRvIHRoZSByZW5kZXJlclxuICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgUmVmZXJlbmNlIHRvIHBhcmVudCB0ZXh0dXJlXG4gICAgICogQHBhcmFtIHtQSVhJLkdMVGV4dHVyZX0gZ2xUZXh0dXJlIGdsVGV4dHVyZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlzIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBCdWZmZXJSZXNvdXJjZS5wcm90b3R5cGUudXBsb2FkID0gZnVuY3Rpb24gdXBsb2FkIChyZW5kZXJlciwgYmFzZVRleHR1cmUsIGdsVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHJlbmRlcmVyLmdsO1xuXG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgYmFzZVRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSk7XG5cbiAgICAgICAgaWYgKGdsVGV4dHVyZS53aWR0aCA9PT0gYmFzZVRleHR1cmUud2lkdGggJiYgZ2xUZXh0dXJlLmhlaWdodCA9PT0gYmFzZVRleHR1cmUuaGVpZ2h0KVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC50ZXhTdWJJbWFnZTJEKFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLnRhcmdldCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS53aWR0aCxcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLnR5cGUsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgZ2xUZXh0dXJlLndpZHRoID0gYmFzZVRleHR1cmUud2lkdGg7XG4gICAgICAgICAgICBnbFRleHR1cmUuaGVpZ2h0ID0gYmFzZVRleHR1cmUuaGVpZ2h0O1xuXG4gICAgICAgICAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLnRhcmdldCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS53aWR0aCxcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgYW5kIGRvbid0IHVzZSBhZnRlciB0aGlzXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgQnVmZmVyUmVzb3VyY2UucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlICgpXG4gICAge1xuICAgICAgICB0aGlzLmRhdGEgPSBudWxsO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGF1dG8tZGV0ZWN0IHRoZSB0eXBlIG9mIHJlc291cmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7Kn0gc291cmNlIC0gVGhlIHNvdXJjZSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgPGNhbnZhcz5cbiAgICAgKi9cbiAgICBCdWZmZXJSZXNvdXJjZS50ZXN0ID0gZnVuY3Rpb24gdGVzdCAoc291cmNlKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheVxuICAgICAgICAgICAgfHwgc291cmNlIGluc3RhbmNlb2YgVWludDhBcnJheVxuICAgICAgICAgICAgfHwgc291cmNlIGluc3RhbmNlb2YgVWludDMyQXJyYXk7XG4gICAgfTtcblxuICAgIHJldHVybiBCdWZmZXJSZXNvdXJjZTtcbn0oUmVzb3VyY2UpKTtcblxudmFyIGRlZmF1bHRCdWZmZXJPcHRpb25zID0ge1xuICAgIHNjYWxlTW9kZTogU0NBTEVfTU9ERVMuTkVBUkVTVCxcbiAgICBmb3JtYXQ6IEZPUk1BVFMuUkdCQSxcbiAgICBwcmVtdWx0aXBseUFscGhhOiBmYWxzZSxcbn07XG5cbi8qKlxuICogQSBUZXh0dXJlIHN0b3JlcyB0aGUgaW5mb3JtYXRpb24gdGhhdCByZXByZXNlbnRzIGFuIGltYWdlLlxuICogQWxsIHRleHR1cmVzIGhhdmUgYSBiYXNlIHRleHR1cmUsIHdoaWNoIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzb3VyY2UuXG4gKiBUaGVyZWZvcmUgeW91IGNhbiBoYXZlIG1hbnkgdGV4dHVyZXMgYWxsIHVzaW5nIGEgc2luZ2xlIEJhc2VUZXh0dXJlXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLnV0aWxzLkV2ZW50RW1pdHRlclxuICogQG1lbWJlcm9mIFBJWElcbiAqIEBwYXJhbSB7UElYSS5yZXNvdXJjZXMuUmVzb3VyY2V8c3RyaW5nfEhUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR8SFRNTFZpZGVvRWxlbWVudH0gW3Jlc291cmNlPW51bGxdXG4gKiAgICAgICAgVGhlIGN1cnJlbnQgcmVzb3VyY2UgdG8gdXNlLCBmb3IgdGhpbmdzIHRoYXQgYXJlbid0IFJlc291cmNlIG9iamVjdHMsIHdpbGwgYmUgY29udmVydGVkXG4gKiAgICAgICAgaW50byBhIFJlc291cmNlLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIENvbGxlY3Rpb24gb2Ygb3B0aW9uc1xuICogQHBhcmFtIHtQSVhJLk1JUE1BUF9NT0RFU30gW29wdGlvbnMubWlwbWFwPVBJWEkuc2V0dGluZ3MuTUlQTUFQX1RFWFRVUkVTXSAtIElmIG1pcG1hcHBpbmcgaXMgZW5hYmxlZCBmb3IgdGV4dHVyZVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmFuaXNvdHJvcGljTGV2ZWw9UElYSS5zZXR0aW5ncy5BTklTT1RST1BJQ19MRVZFTF0gLSBBbmlzb3Ryb3BpYyBmaWx0ZXJpbmcgbGV2ZWwgb2YgdGV4dHVyZVxuICogQHBhcmFtIHtQSVhJLldSQVBfTU9ERVN9IFtvcHRpb25zLndyYXBNb2RlPVBJWEkuc2V0dGluZ3MuV1JBUF9NT0RFXSAtIFdyYXAgbW9kZSBmb3IgdGV4dHVyZXNcbiAqIEBwYXJhbSB7UElYSS5TQ0FMRV9NT0RFU30gW29wdGlvbnMuc2NhbGVNb2RlPVBJWEkuc2V0dGluZ3MuU0NBTEVfTU9ERV0gLSBEZWZhdWx0IHNjYWxlIG1vZGUsIGxpbmVhciwgbmVhcmVzdFxuICogQHBhcmFtIHtQSVhJLkZPUk1BVFN9IFtvcHRpb25zLmZvcm1hdD1QSVhJLkZPUk1BVFMuUkdCQV0gLSBHTCBmb3JtYXQgdHlwZVxuICogQHBhcmFtIHtQSVhJLlRZUEVTfSBbb3B0aW9ucy50eXBlPVBJWEkuVFlQRVMuVU5TSUdORURfQllURV0gLSBHTCBkYXRhIHR5cGVcbiAqIEBwYXJhbSB7UElYSS5UQVJHRVRTfSBbb3B0aW9ucy50YXJnZXQ9UElYSS5UQVJHRVRTLlRFWFRVUkVfMkRdIC0gR0wgdGV4dHVyZSB0YXJnZXRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJlbXVsdGlwbHlBbHBoYT10cnVlXSAtIFByZSBtdWx0aXBseSB0aGUgaW1hZ2UgYWxwaGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53aWR0aD0wXSAtIFdpZHRoIG9mIHRoZSB0ZXh0dXJlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaGVpZ2h0PTBdIC0gSGVpZ2h0IG9mIHRoZSB0ZXh0dXJlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucmVzb2x1dGlvbl0gLSBSZXNvbHV0aW9uIG9mIHRoZSBiYXNlIHRleHR1cmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5yZXNvdXJjZU9wdGlvbnNdIC0gT3B0aW9uYWwgcmVzb3VyY2Ugb3B0aW9ucyxcbiAqICAgICAgICBzZWUge0BsaW5rIFBJWEkucmVzb3VyY2VzLmF1dG9EZXRlY3RSZXNvdXJjZSBhdXRvRGV0ZWN0UmVzb3VyY2V9XG4gKi9cbnZhciBCYXNlVGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEV2ZW50RW1pdHRlcikge1xuICAgIGZ1bmN0aW9uIEJhc2VUZXh0dXJlKHJlc291cmNlLCBvcHRpb25zKVxuICAgIHtcbiAgICAgICAgaWYgKCByZXNvdXJjZSA9PT0gdm9pZCAwICkgcmVzb3VyY2UgPSBudWxsO1xuICAgICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSBudWxsO1xuXG4gICAgICAgIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIHZhciBwcmVtdWx0aXBseUFscGhhID0gb3B0aW9ucy5wcmVtdWx0aXBseUFscGhhO1xuICAgICAgICB2YXIgbWlwbWFwID0gb3B0aW9ucy5taXBtYXA7XG4gICAgICAgIHZhciBhbmlzb3Ryb3BpY0xldmVsID0gb3B0aW9ucy5hbmlzb3Ryb3BpY0xldmVsO1xuICAgICAgICB2YXIgc2NhbGVNb2RlID0gb3B0aW9ucy5zY2FsZU1vZGU7XG4gICAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcbiAgICAgICAgdmFyIHdyYXBNb2RlID0gb3B0aW9ucy53cmFwTW9kZTtcbiAgICAgICAgdmFyIGZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0O1xuICAgICAgICB2YXIgdHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICAgICAgdmFyIHRhcmdldCA9IG9wdGlvbnMudGFyZ2V0O1xuICAgICAgICB2YXIgcmVzb2x1dGlvbiA9IG9wdGlvbnMucmVzb2x1dGlvbjtcbiAgICAgICAgdmFyIHJlc291cmNlT3B0aW9ucyA9IG9wdGlvbnMucmVzb3VyY2VPcHRpb25zO1xuXG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHJlc291cmNlIHRvIGEgUmVzb3VyY2Ugb2JqZWN0XG4gICAgICAgIGlmIChyZXNvdXJjZSAmJiAhKHJlc291cmNlIGluc3RhbmNlb2YgUmVzb3VyY2UpKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXNvdXJjZSA9IGF1dG9EZXRlY3RSZXNvdXJjZShyZXNvdXJjZSwgcmVzb3VyY2VPcHRpb25zKTtcbiAgICAgICAgICAgIHJlc291cmNlLmludGVybmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgd2lkdGggb2YgdGhlIGJhc2UgdGV4dHVyZSBzZXQgd2hlbiB0aGUgaW1hZ2UgaGFzIGxvYWRlZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoIHx8IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBoZWlnaHQgb2YgdGhlIGJhc2UgdGV4dHVyZSBzZXQgd2hlbiB0aGUgaW1hZ2UgaGFzIGxvYWRlZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgfHwgMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJlc29sdXRpb24gLyBkZXZpY2UgcGl4ZWwgcmF0aW8gb2YgdGhlIHRleHR1cmVcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCBQSVhJLnNldHRpbmdzLlJFU09MVVRJT05cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzb2x1dGlvbiA9IHJlc29sdXRpb24gfHwgc2V0dGluZ3MuUkVTT0xVVElPTjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWlwbWFwIG1vZGUgb2YgdGhlIHRleHR1cmUsIGFmZmVjdHMgZG93bnNjYWxlZCBpbWFnZXNcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5NSVBNQVBfTU9ERVN9XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuc2V0dGluZ3MuTUlQTUFQX1RFWFRVUkVTXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1pcG1hcCA9IG1pcG1hcCAhPT0gdW5kZWZpbmVkID8gbWlwbWFwIDogc2V0dGluZ3MuTUlQTUFQX1RFWFRVUkVTO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbmlzb3Ryb3BpYyBmaWx0ZXJpbmcgbGV2ZWwgb2YgdGV4dHVyZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuc2V0dGluZ3MuQU5JU09UUk9QSUNfTEVWRUxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYW5pc290cm9waWNMZXZlbCA9IGFuaXNvdHJvcGljTGV2ZWwgIT09IHVuZGVmaW5lZCA/IGFuaXNvdHJvcGljTGV2ZWwgOiBzZXR0aW5ncy5BTklTT1RST1BJQ19MRVZFTDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSG93IHRoZSB0ZXh0dXJlIHdyYXBzXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMud3JhcE1vZGUgPSB3cmFwTW9kZSB8fCBzZXR0aW5ncy5XUkFQX01PREU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzY2FsZSBtb2RlIHRvIGFwcGx5IHdoZW4gc2NhbGluZyB0aGlzIHRleHR1cmVcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5TQ0FMRV9NT0RFU31cbiAgICAgICAgICogQGRlZmF1bHQgUElYSS5zZXR0aW5ncy5TQ0FMRV9NT0RFXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjYWxlTW9kZSA9IHNjYWxlTW9kZSAhPT0gdW5kZWZpbmVkID8gc2NhbGVNb2RlIDogc2V0dGluZ3MuU0NBTEVfTU9ERTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBpeGVsIGZvcm1hdCBvZiB0aGUgdGV4dHVyZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkZPUk1BVFN9XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuRk9STUFUUy5SR0JBXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdCB8fCBGT1JNQVRTLlJHQkE7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0eXBlIG9mIHJlc291cmNlIGRhdGFcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5UWVBFU31cbiAgICAgICAgICogQGRlZmF1bHQgUElYSS5UWVBFUy5VTlNJR05FRF9CWVRFXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlIHx8IFRZUEVTLlVOU0lHTkVEX0JZVEU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0YXJnZXQgdHlwZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlRBUkdFVFN9XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuVEFSR0VUUy5URVhUVVJFXzJEXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldCB8fCBUQVJHRVRTLlRFWFRVUkVfMkQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0byB0cnVlIHRvIGVuYWJsZSBwcmUtbXVsdGlwbGllZCBhbHBoYVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBwcmVtdWx0aXBseUFscGhhICE9PSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2xvYmFsIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIEJhc2VUZXh0dXJlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51aWQgPSB1aWQoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXNlZCBieSBhdXRvbWF0aWMgdGV4dHVyZSBHYXJiYWdlIENvbGxlY3Rpb24sIHN0b3JlcyBsYXN0IEdDIHRpY2sgd2hlbiBpdCB3YXMgYm91bmRcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRvdWNoZWQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgdGV4dHVyZSBpcyBhIHBvd2VyIG9mIHR3bywgdHJ5IHRvIHVzZSBwb3dlciBvZiB0d28gdGV4dHVyZXMgYXMgbXVjaFxuICAgICAgICAgKiBhcyB5b3UgY2FuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc1Bvd2VyT2ZUd28gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaFBPVCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbWFwIG9mIHJlbmRlciBjb250ZXh0IHRleHR1cmVzIHdoZXJlIHRoaXMgaXMgYm91bmRcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZ2xUZXh0dXJlcyA9IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIGJ5IFRleHR1cmVTeXN0ZW0gdG8gb25seSB1cGRhdGUgdGV4dHVyZSB0byB0aGUgR1BVIHdoZW4gbmVlZGVkLlxuICAgICAgICAgKiBQbGVhc2UgY2FsbCBgdXBkYXRlKClgIHRvIGluY3JlbWVudCBpdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlydHlJZCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZWQgYnkgVGV4dHVyZVN5c3RlbSB0byBvbmx5IHVwZGF0ZSB0ZXh0dXJlIHN0eWxlIHdoZW4gbmVlZGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlydHlTdHlsZUlkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudGx5IGRlZmF1bHQgY2FjaGUgSUQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2FjaGVJZCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdlbmVyYWxseSBzcGVha2luZyBtZWFucyB3aGVuIHJlc291cmNlIGlzIGxvYWRlZC5cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZhbGlkID0gd2lkdGggPiAwICYmIGhlaWdodCA+IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb2xsZWN0aW9uIG9mIGFsdGVybmF0aXZlIGNhY2hlIGlkcywgc2luY2Ugc29tZSBCYXNlVGV4dHVyZXNcbiAgICAgICAgICogY2FuIGhhdmUgbW9yZSB0aGFuIG9uZSBJRCwgc2hvcnQgbmFtZSBhbmQgbG9uZ2VyIGZ1bGwgVVJMXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5PHN0cmluZz59XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50ZXh0dXJlQ2FjaGVJZHMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyBpZiBCYXNlVGV4dHVyZSBoYXMgYmVlbiBkZXN0cm95ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJlc291cmNlIHVzZWQgYnkgdGhpcyBCYXNlVGV4dHVyZSwgdGhlcmUgY2FuIG9ubHlcbiAgICAgICAgICogYmUgb25lIHJlc291cmNlIHBlciBCYXNlVGV4dHVyZSwgYnV0IHRleHR1cmVzIGNhbiBzaGFyZVxuICAgICAgICAgKiByZXNvdXJjZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkucmVzb3VyY2VzLlJlc291cmNlfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOdW1iZXIgb2YgdGhlIHRleHR1cmUgYmF0Y2gsIHVzZWQgYnkgbXVsdGktdGV4dHVyZSByZW5kZXJlcnNcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYmF0Y2hFbmFibGVkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgd2hlbiBhIG5vdC1pbW1lZGlhdGVseS1hdmFpbGFibGUgc291cmNlIGZpbmlzaGVzIGxvYWRpbmcuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQGV2ZW50IFBJWEkuQmFzZVRleHR1cmUjbG9hZGVkXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgLSBSZXNvdXJjZSBsb2FkZWQuXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIGEgbm90LWltbWVkaWF0ZWx5LWF2YWlsYWJsZSBzb3VyY2UgZmFpbHMgdG8gbG9hZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAZXZlbnQgUElYSS5CYXNlVGV4dHVyZSNlcnJvclxuICAgICAgICAgKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IGJhc2VUZXh0dXJlIC0gUmVzb3VyY2UgZXJyb3JlZC5cbiAgICAgICAgICogQHBhcmFtIHtFcnJvckV2ZW50fSBldmVudCAtIExvYWQgZXJyb3IgZXZlbnQuXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIEJhc2VUZXh0dXJlIGlzIHVwZGF0ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQGV2ZW50IFBJWEkuQmFzZVRleHR1cmUjbG9hZGVkXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgLSBSZXNvdXJjZSBsb2FkZWQuXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIEJhc2VUZXh0dXJlIGlzIHVwZGF0ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQGV2ZW50IFBJWEkuQmFzZVRleHR1cmUjdXBkYXRlXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgLSBJbnN0YW5jZSBvZiB0ZXh0dXJlIGJlaW5nIHVwZGF0ZWQuXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIEJhc2VUZXh0dXJlIGlzIGRlc3Ryb3llZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAZXZlbnQgUElYSS5CYXNlVGV4dHVyZSNkaXNwb3NlXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgLSBJbnN0YW5jZSBvZiB0ZXh0dXJlIGJlaW5nIGRlc3Ryb3llZC5cbiAgICAgICAgICovXG5cbiAgICAgICAgLy8gU2V0IHRoZSByZXNvdXJjZVxuICAgICAgICB0aGlzLnNldFJlc291cmNlKHJlc291cmNlKTtcbiAgICB9XG5cbiAgICBpZiAoIEV2ZW50RW1pdHRlciApIEJhc2VUZXh0dXJlLl9fcHJvdG9fXyA9IEV2ZW50RW1pdHRlcjtcbiAgICBCYXNlVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdmVudEVtaXR0ZXIgJiYgRXZlbnRFbWl0dGVyLnByb3RvdHlwZSApO1xuICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJhc2VUZXh0dXJlO1xuXG4gICAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgcmVhbFdpZHRoOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHJlYWxIZWlnaHQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAgIC8qKlxuICAgICAqIFBpeGVsIHdpZHRoIG9mIHRoZSBzb3VyY2Ugb2YgdGhpcyB0ZXh0dXJlXG4gICAgICpcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnJlYWxXaWR0aC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCgodGhpcy53aWR0aCAqIHRoaXMucmVzb2x1dGlvbikgLSAxZS00KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGl4ZWwgaGVpZ2h0IG9mIHRoZSBzb3VyY2Ugb2YgdGhpcyB0ZXh0dXJlXG4gICAgICpcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnJlYWxIZWlnaHQuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoKHRoaXMuaGVpZ2h0ICogdGhpcy5yZXNvbHV0aW9uKSAtIDFlLTQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHN0eWxlIG9wdGlvbnMgb2YgQmFzZVRleHR1cmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5TQ0FMRV9NT0RFU30gW3NjYWxlTW9kZV0gLSBQaXhpIHNjYWxlbW9kZVxuICAgICAqIEBwYXJhbSB7UElYSS5NSVBNQVBfTU9ERVN9IFttaXBtYXBdIC0gZW5hYmxlIG1pcG1hcHNcbiAgICAgKiBAcmV0dXJucyB7UElYSS5CYXNlVGV4dHVyZX0gdGhpc1xuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZS5zZXRTdHlsZSA9IGZ1bmN0aW9uIHNldFN0eWxlIChzY2FsZU1vZGUsIG1pcG1hcClcbiAgICB7XG4gICAgICAgIHZhciBkaXJ0eTtcblxuICAgICAgICBpZiAoc2NhbGVNb2RlICE9PSB1bmRlZmluZWQgJiYgc2NhbGVNb2RlICE9PSB0aGlzLnNjYWxlTW9kZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zY2FsZU1vZGUgPSBzY2FsZU1vZGU7XG4gICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWlwbWFwICE9PSB1bmRlZmluZWQgJiYgbWlwbWFwICE9PSB0aGlzLm1pcG1hcClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5taXBtYXAgPSBtaXBtYXA7XG4gICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlydHkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZGlydHlTdHlsZUlkKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB3L2gvcmVzb2x1dGlvbi4gVGV4dHVyZSBiZWNvbWVzIHZhbGlkIGlmIHdpZHRoIGFuZCBoZWlnaHQgYXJlIGdyZWF0ZXIgdGhhbiB6ZXJvLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFZpc3VhbCB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgVmlzdWFsIGhlaWdodFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmVzb2x1dGlvbl0gT3B0aW9uYWxseSBzZXQgcmVzb2x1dGlvblxuICAgICAqIEByZXR1cm5zIHtQSVhJLkJhc2VUZXh0dXJlfSB0aGlzXG4gICAgICovXG4gICAgQmFzZVRleHR1cmUucHJvdG90eXBlLnNldFNpemUgPSBmdW5jdGlvbiBzZXRTaXplICh3aWR0aCwgaGVpZ2h0LCByZXNvbHV0aW9uKVxuICAgIHtcbiAgICAgICAgdGhpcy5yZXNvbHV0aW9uID0gcmVzb2x1dGlvbiB8fCB0aGlzLnJlc29sdXRpb247XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hQT1QoKTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyByZWFsIHNpemUgb2YgYmFzZVRleHR1cmUsIHByZXNlcnZlcyBjdXJyZW50IHJlc29sdXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmVhbFdpZHRoIEZ1bGwgcmVuZGVyZWQgd2lkdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmVhbEhlaWdodCBGdWxsIHJlbmRlcmVkIGhlaWdodFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmVzb2x1dGlvbl0gT3B0aW9uYWxseSBzZXQgcmVzb2x1dGlvblxuICAgICAqIEByZXR1cm5zIHtQSVhJLkJhc2VUZXh0dXJlfSB0aGlzXG4gICAgICovXG4gICAgQmFzZVRleHR1cmUucHJvdG90eXBlLnNldFJlYWxTaXplID0gZnVuY3Rpb24gc2V0UmVhbFNpemUgKHJlYWxXaWR0aCwgcmVhbEhlaWdodCwgcmVzb2x1dGlvbilcbiAgICB7XG4gICAgICAgIHRoaXMucmVzb2x1dGlvbiA9IHJlc29sdXRpb24gfHwgdGhpcy5yZXNvbHV0aW9uO1xuICAgICAgICB0aGlzLndpZHRoID0gcmVhbFdpZHRoIC8gdGhpcy5yZXNvbHV0aW9uO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHJlYWxIZWlnaHQgLyB0aGlzLnJlc29sdXRpb247XG4gICAgICAgIHRoaXMuX3JlZnJlc2hQT1QoKTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVmcmVzaCBjaGVjayBmb3IgaXNQb3dlck9mVHdvIHRleHR1cmUgYmFzZWQgb24gc2l6ZVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBCYXNlVGV4dHVyZS5wcm90b3R5cGUuX3JlZnJlc2hQT1QgPSBmdW5jdGlvbiBfcmVmcmVzaFBPVCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5pc1Bvd2VyT2ZUd28gPSBpc1BvdzIodGhpcy5yZWFsV2lkdGgpICYmIGlzUG93Mih0aGlzLnJlYWxIZWlnaHQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHJlc29sdXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmVzb2x1dGlvbl0gcmVzXG4gICAgICogQHJldHVybnMge1BJWEkuQmFzZVRleHR1cmV9IHRoaXNcbiAgICAgKi9cbiAgICBCYXNlVGV4dHVyZS5wcm90b3R5cGUuc2V0UmVzb2x1dGlvbiA9IGZ1bmN0aW9uIHNldFJlc29sdXRpb24gKHJlc29sdXRpb24pXG4gICAge1xuICAgICAgICB2YXIgb2xkUmVzb2x1dGlvbiA9IHRoaXMucmVzb2x1dGlvbjtcblxuICAgICAgICBpZiAob2xkUmVzb2x1dGlvbiA9PT0gcmVzb2x1dGlvbilcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuXG4gICAgICAgIGlmICh0aGlzLnZhbGlkKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy53aWR0aCAqIG9sZFJlc29sdXRpb24gLyByZXNvbHV0aW9uO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmhlaWdodCAqIG9sZFJlc29sdXRpb24gLyByZXNvbHV0aW9uO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGUnLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlZnJlc2hQT1QoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcmVzb3VyY2UgaWYgaXQgd2Fzbid0IHNldC4gVGhyb3dzIGVycm9yIGlmIHJlc291cmNlIGFscmVhZHkgcHJlc2VudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLnJlc291cmNlcy5SZXNvdXJjZX0gcmVzb3VyY2UgLSB0aGF0IGlzIG1hbmFnaW5nIHRoaXMgQmFzZVRleHR1cmVcbiAgICAgKiBAcmV0dXJucyB7UElYSS5CYXNlVGV4dHVyZX0gdGhpc1xuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZS5zZXRSZXNvdXJjZSA9IGZ1bmN0aW9uIHNldFJlc291cmNlIChyZXNvdXJjZSlcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnJlc291cmNlID09PSByZXNvdXJjZSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5yZXNvdXJjZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYW4gYmUgc2V0IG9ubHkgb25jZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb3VyY2UuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLnJlc291cmNlID0gcmVzb3VyY2U7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEludmFsaWRhdGVzIHRoZSBvYmplY3QuIFRleHR1cmUgYmVjb21lcyB2YWxpZCBpZiB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBncmVhdGVyIHRoYW4gemVyby5cbiAgICAgKi9cbiAgICBCYXNlVGV4dHVyZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpXG4gICAge1xuICAgICAgICBpZiAoIXRoaXMudmFsaWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndpZHRoID4gMCAmJiB0aGlzLmhlaWdodCA+IDApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdsb2FkZWQnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eUlkKys7XG4gICAgICAgICAgICB0aGlzLmRpcnR5U3R5bGVJZCsrO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGUnLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgZXJyb3JzIHdpdGggcmVzb3VyY2VzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFcnJvckV2ZW50fSBldmVudCAtIEVycm9yIGV2ZW50IGVtaXR0ZWQuXG4gICAgICovXG4gICAgQmFzZVRleHR1cmUucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yIChldmVudClcbiAgICB7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB0aGlzLCBldmVudCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgYmFzZSB0ZXh0dXJlLlxuICAgICAqIFRoZSBtZXRob2Qgc3RvcHMgaWYgcmVzb3VyY2UgZG9lc24ndCB3YW50IHRoaXMgdGV4dHVyZSB0byBiZSBkZXN0cm95ZWQuXG4gICAgICogUmVtb3ZlcyB0ZXh0dXJlIGZyb20gYWxsIGNhY2hlcy5cbiAgICAgKi9cbiAgICBCYXNlVGV4dHVyZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbiAgICB7XG4gICAgICAgIC8vIHJlbW92ZSBhbmQgZGVzdHJveSB0aGUgcmVzb3VyY2VcbiAgICAgICAgaWYgKHRoaXMucmVzb3VyY2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2UudW5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgLy8gb25seSBkZXN0cm95IHJlc291cmNlZCBjcmVhdGVkIGludGVybmFsbHlcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc291cmNlLmludGVybmFsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzb3VyY2UuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jYWNoZUlkKVxuICAgICAgICB7XG4gICAgICAgICAgICBkZWxldGUgQmFzZVRleHR1cmVDYWNoZVt0aGlzLmNhY2hlSWRdO1xuICAgICAgICAgICAgZGVsZXRlIFRleHR1cmVDYWNoZVt0aGlzLmNhY2hlSWRdO1xuXG4gICAgICAgICAgICB0aGlzLmNhY2hlSWQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmluYWxseSBsZXQgdGhlIFdlYkdMIHJlbmRlcmVyIGtub3cuLlxuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcblxuICAgICAgICBCYXNlVGV4dHVyZS5yZW1vdmVGcm9tQ2FjaGUodGhpcyk7XG4gICAgICAgIHRoaXMudGV4dHVyZUNhY2hlSWRzID0gbnVsbDtcblxuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZyZWVzIHRoZSB0ZXh0dXJlIGZyb20gV2ViR0wgbWVtb3J5IHdpdGhvdXQgZGVzdHJveWluZyB0aGlzIHRleHR1cmUgb2JqZWN0LlxuICAgICAqIFRoaXMgbWVhbnMgeW91IGNhbiBzdGlsbCB1c2UgdGhlIHRleHR1cmUgbGF0ZXIgd2hpY2ggd2lsbCB1cGxvYWQgaXQgdG8gR1BVXG4gICAgICogbWVtb3J5IGFnYWluLlxuICAgICAqXG4gICAgICogQGZpcmVzIFBJWEkuQmFzZVRleHR1cmUjZGlzcG9zZVxuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5lbWl0KCdkaXNwb3NlJywgdGhpcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYSBiYXNlIHRleHR1cmUgYmFzZWQgb24gdGhlIHNvdXJjZSB5b3UgcHJvdmlkZS5cbiAgICAgKiBUaGUgc291cmNlIGNhbiBiZSAtIGltYWdlIHVybCwgaW1hZ2UgZWxlbWVudCwgY2FudmFzIGVsZW1lbnQuIElmIHRoZVxuICAgICAqIHNvdXJjZSBpcyBhbiBpbWFnZSB1cmwgb3IgYW4gaW1hZ2UgZWxlbWVudCBhbmQgbm90IGluIHRoZSBiYXNlIHRleHR1cmVcbiAgICAgKiBjYWNoZSwgaXQgd2lsbCBiZSBjcmVhdGVkIGFuZCBsb2FkZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd8SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudHxTVkdFbGVtZW50fEhUTUxWaWRlb0VsZW1lbnR9IHNvdXJjZSAtIFRoZVxuICAgICAqICAgICAgICBzb3VyY2UgdG8gY3JlYXRlIGJhc2UgdGV4dHVyZSBmcm9tLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gU2VlIHtAbGluayBQSVhJLkJhc2VUZXh0dXJlfSdzIGNvbnN0cnVjdG9yIGZvciBvcHRpb25zLlxuICAgICAqIEByZXR1cm5zIHtQSVhJLkJhc2VUZXh0dXJlfSBUaGUgbmV3IGJhc2UgdGV4dHVyZS5cbiAgICAgKi9cbiAgICBCYXNlVGV4dHVyZS5mcm9tID0gZnVuY3Rpb24gZnJvbSAoc291cmNlLCBvcHRpb25zKVxuICAgIHtcbiAgICAgICAgdmFyIGNhY2hlSWQgPSBudWxsO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJylcbiAgICAgICAge1xuICAgICAgICAgICAgY2FjaGVJZCA9IHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghc291cmNlLl9waXhpSWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlLl9waXhpSWQgPSBcInBpeGlpZF9cIiArICh1aWQoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhY2hlSWQgPSBzb3VyY2UuX3BpeGlJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiYXNlVGV4dHVyZSA9IEJhc2VUZXh0dXJlQ2FjaGVbY2FjaGVJZF07XG5cbiAgICAgICAgaWYgKCFiYXNlVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgYmFzZVRleHR1cmUgPSBuZXcgQmFzZVRleHR1cmUoc291cmNlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGJhc2VUZXh0dXJlLmNhY2hlSWQgPSBjYWNoZUlkO1xuICAgICAgICAgICAgQmFzZVRleHR1cmUuYWRkVG9DYWNoZShiYXNlVGV4dHVyZSwgY2FjaGVJZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYmFzZVRleHR1cmU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBCYXNlVGV4dHVyZSB3aXRoIGEgQnVmZmVyUmVzb3VyY2UgZnJvbSBhIEZsb2F0MzJBcnJheS5cbiAgICAgKiBSR0JBIHZhbHVlcyBhcmUgZmxvYXRzIGZyb20gMCB0byAxLlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0Zsb2F0MzJBcnJheXxVaW50OEFycmF5fSBidWZmZXIgVGhlIG9wdGlvbmFsIGFycmF5IHRvIHVzZSwgaWYgbm8gZGF0YVxuICAgICAqICAgICAgICBpcyBwcm92aWRlZCwgYSBuZXcgRmxvYXQzMkFycmF5IGlzIGNyZWF0ZWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gV2lkdGggb2YgdGhlIHJlc291cmNlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIEhlaWdodCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIFNlZSB7QGxpbmsgUElYSS5CYXNlVGV4dHVyZX0ncyBjb25zdHJ1Y3RvciBmb3Igb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLkJhc2VUZXh0dXJlfSBUaGUgcmVzdWx0aW5nIG5ldyBCYXNlVGV4dHVyZVxuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLmZyb21CdWZmZXIgPSBmdW5jdGlvbiBmcm9tQnVmZmVyIChidWZmZXIsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICBidWZmZXIgPSBidWZmZXIgfHwgbmV3IEZsb2F0MzJBcnJheSh3aWR0aCAqIGhlaWdodCAqIDQpO1xuXG4gICAgICAgIHZhciByZXNvdXJjZSA9IG5ldyBCdWZmZXJSZXNvdXJjZShidWZmZXIsIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9KTtcbiAgICAgICAgdmFyIHR5cGUgPSBidWZmZXIgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgPyBUWVBFUy5GTE9BVCA6IFRZUEVTLlVOU0lHTkVEX0JZVEU7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBCYXNlVGV4dHVyZShyZXNvdXJjZSwgT2JqZWN0LmFzc2lnbihkZWZhdWx0QnVmZmVyT3B0aW9ucywgb3B0aW9ucyB8fCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIHR5cGU6IHR5cGUgfSkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgQmFzZVRleHR1cmUgdG8gdGhlIGdsb2JhbCBCYXNlVGV4dHVyZUNhY2hlLiBUaGlzIGNhY2hlIGlzIHNoYXJlZCBhY3Jvc3MgdGhlIHdob2xlIFBJWEkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgLSBUaGUgQmFzZVRleHR1cmUgdG8gYWRkIHRvIHRoZSBjYWNoZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgaWQgdGhhdCB0aGUgQmFzZVRleHR1cmUgd2lsbCBiZSBzdG9yZWQgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBCYXNlVGV4dHVyZS5hZGRUb0NhY2hlID0gZnVuY3Rpb24gYWRkVG9DYWNoZSAoYmFzZVRleHR1cmUsIGlkKVxuICAgIHtcbiAgICAgICAgaWYgKGlkKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoYmFzZVRleHR1cmUudGV4dHVyZUNhY2hlSWRzLmluZGV4T2YoaWQpID09PSAtMSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS50ZXh0dXJlQ2FjaGVJZHMucHVzaChpZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChCYXNlVGV4dHVyZUNhY2hlW2lkXSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigoXCJCYXNlVGV4dHVyZSBhZGRlZCB0byB0aGUgY2FjaGUgd2l0aCBhbiBpZCBbXCIgKyBpZCArIFwiXSB0aGF0IGFscmVhZHkgaGFkIGFuIGVudHJ5XCIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQmFzZVRleHR1cmVDYWNoZVtpZF0gPSBiYXNlVGV4dHVyZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBCYXNlVGV4dHVyZSBmcm9tIHRoZSBnbG9iYWwgQmFzZVRleHR1cmVDYWNoZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSAtIGlkIG9mIGEgQmFzZVRleHR1cmUgdG8gYmUgcmVtb3ZlZCwgb3IgYSBCYXNlVGV4dHVyZSBpbnN0YW5jZSBpdHNlbGYuXG4gICAgICogQHJldHVybiB7UElYSS5CYXNlVGV4dHVyZXxudWxsfSBUaGUgQmFzZVRleHR1cmUgdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBCYXNlVGV4dHVyZS5yZW1vdmVGcm9tQ2FjaGUgPSBmdW5jdGlvbiByZW1vdmVGcm9tQ2FjaGUgKGJhc2VUZXh0dXJlKVxuICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiYXNlVGV4dHVyZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBiYXNlVGV4dHVyZUZyb21DYWNoZSA9IEJhc2VUZXh0dXJlQ2FjaGVbYmFzZVRleHR1cmVdO1xuXG4gICAgICAgICAgICBpZiAoYmFzZVRleHR1cmVGcm9tQ2FjaGUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gYmFzZVRleHR1cmVGcm9tQ2FjaGUudGV4dHVyZUNhY2hlSWRzLmluZGV4T2YoYmFzZVRleHR1cmUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZUZyb21DYWNoZS50ZXh0dXJlQ2FjaGVJZHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWxldGUgQmFzZVRleHR1cmVDYWNoZVtiYXNlVGV4dHVyZV07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZVRleHR1cmVGcm9tQ2FjaGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYmFzZVRleHR1cmUgJiYgYmFzZVRleHR1cmUudGV4dHVyZUNhY2hlSWRzKVxuICAgICAgICB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhc2VUZXh0dXJlLnRleHR1cmVDYWNoZUlkcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgQmFzZVRleHR1cmVDYWNoZVtiYXNlVGV4dHVyZS50ZXh0dXJlQ2FjaGVJZHNbaV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBiYXNlVGV4dHVyZS50ZXh0dXJlQ2FjaGVJZHMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgcmV0dXJuIGJhc2VUZXh0dXJlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCYXNlVGV4dHVyZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gICAgcmV0dXJuIEJhc2VUZXh0dXJlO1xufShFdmVudEVtaXR0ZXIpKTtcblxuLyoqXG4gKiBHbG9iYWwgbnVtYmVyIG9mIHRoZSB0ZXh0dXJlIGJhdGNoLCB1c2VkIGJ5IG11bHRpLXRleHR1cmUgcmVuZGVyZXJzXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlciB7bnVtYmVyfVxuICovXG5CYXNlVGV4dHVyZS5fZ2xvYmFsQmF0Y2ggPSAwO1xuXG4vKipcbiAqIEEgcmVzb3VyY2UgdGhhdCBjb250YWlucyBhIG51bWJlciBvZiBzb3VyY2VzLlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5yZXNvdXJjZXMuUmVzb3VyY2VcbiAqIEBtZW1iZXJvZiBQSVhJLnJlc291cmNlc1xuICogQHBhcmFtIHtudW1iZXJ8QXJyYXk8Kj59IHNvdXJjZSAtIE51bWJlciBvZiBpdGVtcyBpbiBhcnJheSBvciB0aGUgY29sbGVjdGlvblxuICogICAgICAgIG9mIGltYWdlIFVSTHMgdG8gdXNlLiBDYW4gYWxzbyBiZSByZXNvdXJjZXMsIGltYWdlIGVsZW1lbnRzLCBjYW52YXMsIGV0Yy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyB0byBhcHBseSB0byB7QGxpbmsgUElYSS5yZXNvdXJjZXMuYXV0b0RldGVjdFJlc291cmNlfVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndpZHRoXSAtIFdpZHRoIG9mIHRoZSByZXNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmhlaWdodF0gLSBIZWlnaHQgb2YgdGhlIHJlc291cmNlXG4gKi9cbnZhciBBcnJheVJlc291cmNlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoUmVzb3VyY2UpIHtcbiAgICBmdW5jdGlvbiBBcnJheVJlc291cmNlKHNvdXJjZSwgb3B0aW9ucylcbiAgICB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIHZhciB1cmxzO1xuICAgICAgICB2YXIgbGVuZ3RoID0gc291cmNlO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNvdXJjZSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHVybHMgPSBzb3VyY2U7XG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgUmVzb3VyY2UuY2FsbCh0aGlzLCBvcHRpb25zLndpZHRoLCBvcHRpb25zLmhlaWdodCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbGxlY3Rpb24gb2YgcmVzb3VyY2VzLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheTxQSVhJLkJhc2VUZXh0dXJlPn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLml0ZW1zID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpcnR5IElEcyBmb3IgZWFjaCBwYXJ0XG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5PG51bWJlcj59XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pdGVtRGlydHlJZHMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcGFydFRleHR1cmUgPSBuZXcgQmFzZVRleHR1cmUoKTtcblxuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHBhcnRUZXh0dXJlKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbURpcnR5SWRzLnB1c2goLTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE51bWJlciBvZiBlbGVtZW50cyBpbiBhcnJheVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb21pc2Ugd2hlbiBsb2FkaW5nXG4gICAgICAgICAqIEBtZW1iZXIge1Byb21pc2V9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2xvYWQgPSBudWxsO1xuXG4gICAgICAgIGlmICh1cmxzKVxuICAgICAgICB7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBsZW5ndGg7IGkkMSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUmVzb3VyY2VBdChhdXRvRGV0ZWN0UmVzb3VyY2UodXJsc1tpJDFdLCBvcHRpb25zKSwgaSQxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICggUmVzb3VyY2UgKSBBcnJheVJlc291cmNlLl9fcHJvdG9fXyA9IFJlc291cmNlO1xuICAgIEFycmF5UmVzb3VyY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggUmVzb3VyY2UgJiYgUmVzb3VyY2UucHJvdG90eXBlICk7XG4gICAgQXJyYXlSZXNvdXJjZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBcnJheVJlc291cmNlO1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGlzIEJhc2VJbWFnZVJlc291cmNlXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgQXJyYXlSZXNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UgKClcbiAgICB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLml0ZW1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5pdGVtRGlydHlJZHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9sb2FkID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0IGEgcmVzb3VyY2UgYnkgSURcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5yZXNvdXJjZXMuUmVzb3VyY2V9IHJlc291cmNlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gWmVyby1iYXNlZCBpbmRleCBvZiByZXNvdXJjZSB0byBzZXRcbiAgICAgKiBAcmV0dXJuIHtQSVhJLnJlc291cmNlcy5BcnJheVJlc291cmNlfSBJbnN0YW5jZSBmb3IgY2hhaW5pbmdcbiAgICAgKi9cbiAgICBBcnJheVJlc291cmNlLnByb3RvdHlwZS5hZGRSZXNvdXJjZUF0ID0gZnVuY3Rpb24gYWRkUmVzb3VyY2VBdCAocmVzb3VyY2UsIGluZGV4KVxuICAgIHtcbiAgICAgICAgdmFyIGJhc2VUZXh0dXJlID0gdGhpcy5pdGVtc1tpbmRleF07XG5cbiAgICAgICAgaWYgKCFiYXNlVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChcIkluZGV4IFwiICsgaW5kZXggKyBcIiBpcyBvdXQgb2YgYm91bmRzXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaGVyaXQgdGhlIGZpcnN0IHJlc291cmNlIGRpbWVuc2lvbnNcbiAgICAgICAgaWYgKHJlc291cmNlLnZhbGlkICYmICF0aGlzLnZhbGlkKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZShyZXNvdXJjZS53aWR0aCwgcmVzb3VyY2UuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaXRlbXNbaW5kZXhdLnNldFJlc291cmNlKHJlc291cmNlKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBwYXJlbnQgYmFzZSB0ZXh0dXJlXG4gICAgICogQG1lbWJlciB7UElYSS5CYXNlVGV4dHVyZX1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBBcnJheVJlc291cmNlLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCAoYmFzZVRleHR1cmUpXG4gICAge1xuICAgICAgICBSZXNvdXJjZS5wcm90b3R5cGUuYmluZC5jYWxsKHRoaXMsIGJhc2VUZXh0dXJlKTtcblxuICAgICAgICBiYXNlVGV4dHVyZS50YXJnZXQgPSBUQVJHRVRTLlRFWFRVUkVfMkRfQVJSQVk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldLm9uKCd1cGRhdGUnLCBiYXNlVGV4dHVyZS51cGRhdGUsIGJhc2VUZXh0dXJlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVbnNldCB0aGUgcGFyZW50IGJhc2UgdGV4dHVyZVxuICAgICAqIEBtZW1iZXIge1BJWEkuQmFzZVRleHR1cmV9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgQXJyYXlSZXNvdXJjZS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kIChiYXNlVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIFJlc291cmNlLnByb3RvdHlwZS51bmJpbmQuY2FsbCh0aGlzLCBiYXNlVGV4dHVyZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldLm9mZigndXBkYXRlJywgYmFzZVRleHR1cmUudXBkYXRlLCBiYXNlVGV4dHVyZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTG9hZCBhbGwgdGhlIHJlc291cmNlcyBzaW11bHRhbmVvdXNseVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IFdoZW4gbG9hZCBpcyByZXNvbHZlZFxuICAgICAqL1xuICAgIEFycmF5UmVzb3VyY2UucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiBsb2FkICgpXG4gICAge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5fbG9hZClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzb3VyY2VzID0gdGhpcy5pdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0ucmVzb3VyY2U7IH0pO1xuXG4gICAgICAgIC8vIFRPRE86IGFsc28gaW1wbGVtZW50IGxvYWQgcGFydC1ieS1wYXJ0IHN0cmF0ZWd5XG4gICAgICAgIHZhciBwcm9taXNlcyA9IHJlc291cmNlcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0ubG9hZCgpOyB9KTtcblxuICAgICAgICB0aGlzLl9sb2FkID0gUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHJlc291cmNlc1swXTtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSByZWYud2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzJDEucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzJDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBsb2FkIHRoZSByZXNvdXJjZXMgdG8gdGhlIEdQVS5cbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyZXJ9IHJlbmRlcmVyXG4gICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSB0ZXh0dXJlXG4gICAgICogQHBhcmFtIHtQSVhJLkdMVGV4dHVyZX0gZ2xUZXh0dXJlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGV4dHVyZSB3YXMgdXBsb2FkZWRcbiAgICAgKi9cbiAgICBBcnJheVJlc291cmNlLnByb3RvdHlwZS51cGxvYWQgPSBmdW5jdGlvbiB1cGxvYWQgKHJlbmRlcmVyLCB0ZXh0dXJlLCBnbFRleHR1cmUpXG4gICAge1xuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGxlbmd0aCA9IHJlZi5sZW5ndGg7XG4gICAgICAgIHZhciBpdGVtRGlydHlJZHMgPSByZWYuaXRlbURpcnR5SWRzO1xuICAgICAgICB2YXIgaXRlbXMgPSByZWYuaXRlbXM7XG4gICAgICAgIHZhciBnbCA9IHJlbmRlcmVyLmdsO1xuXG4gICAgICAgIGlmIChnbFRleHR1cmUuZGlydHlJZCA8IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLnRleEltYWdlM0QoXG4gICAgICAgICAgICAgICAgZ2wuVEVYVFVSRV8yRF9BUlJBWSxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIHRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgICAgICAgIHRoaXMuX3dpZHRoLFxuICAgICAgICAgICAgICAgIHRoaXMuX2hlaWdodCxcbiAgICAgICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLnR5cGUsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XG5cbiAgICAgICAgICAgIGlmIChpdGVtRGlydHlJZHNbaV0gPCBpdGVtLmRpcnR5SWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbURpcnR5SWRzW2ldID0gaXRlbS5kaXJ0eUlkO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnZhbGlkKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudGV4U3ViSW1hZ2UzRChcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLlRFWFRVUkVfMkRfQVJSQVksXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgMCwgLy8geG9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgMCwgLy8geW9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgaSwgLy8gem9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5yZXNvdXJjZS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ucmVzb3VyY2UuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5yZXNvdXJjZS5zb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEFycmF5UmVzb3VyY2U7XG59KFJlc291cmNlKSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBPZmZzY3JlZW5DYW52YXNcbiAqL1xuXG4vKipcbiAqIFJlc291cmNlIHR5cGUgZm9yIEhUTUxDYW52YXNFbGVtZW50LlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLnJlc291cmNlcy5CYXNlSW1hZ2VSZXNvdXJjZVxuICogQG1lbWJlcm9mIFBJWEkucmVzb3VyY2VzXG4gKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBzb3VyY2UgLSBDYW52YXMgZWxlbWVudCB0byB1c2VcbiAqL1xudmFyIENhbnZhc1Jlc291cmNlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQmFzZUltYWdlUmVzb3VyY2UpIHtcbiAgICBmdW5jdGlvbiBDYW52YXNSZXNvdXJjZSAoKSB7XG4gICAgICAgIEJhc2VJbWFnZVJlc291cmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgaWYgKCBCYXNlSW1hZ2VSZXNvdXJjZSApIENhbnZhc1Jlc291cmNlLl9fcHJvdG9fXyA9IEJhc2VJbWFnZVJlc291cmNlO1xuICAgIENhbnZhc1Jlc291cmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJhc2VJbWFnZVJlc291cmNlICYmIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZSApO1xuICAgIENhbnZhc1Jlc291cmNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENhbnZhc1Jlc291cmNlO1xuXG4gICAgQ2FudmFzUmVzb3VyY2UudGVzdCA9IGZ1bmN0aW9uIHRlc3QgKHNvdXJjZSlcbiAgICB7XG4gICAgICAgIHZhciBPZmZzY3JlZW5DYW52YXMgPSB3aW5kb3cuT2Zmc2NyZWVuQ2FudmFzO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBicm93c2VycyB0aGF0IGRvbid0IHlldCBzdXBwb3J0IE9mZnNjcmVlbkNhbnZhc1xuICAgICAgICBpZiAoT2Zmc2NyZWVuQ2FudmFzICYmIHNvdXJjZSBpbnN0YW5jZW9mIE9mZnNjcmVlbkNhbnZhcylcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc291cmNlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgfTtcblxuICAgIHJldHVybiBDYW52YXNSZXNvdXJjZTtcbn0oQmFzZUltYWdlUmVzb3VyY2UpKTtcblxuLyoqXG4gKiBSZXNvdXJjZSBmb3IgYSBDdWJlVGV4dHVyZSB3aGljaCBjb250YWlucyBzaXggcmVzb3VyY2VzLlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5yZXNvdXJjZXMuQXJyYXlSZXNvdXJjZVxuICogQG1lbWJlcm9mIFBJWEkucmVzb3VyY2VzXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xQSVhJLnJlc291cmNlcy5SZXNvdXJjZT59IFtzb3VyY2VdIENvbGxlY3Rpb24gb2YgVVJMcyBvciByZXNvdXJjZXNcbiAqICAgICAgICB0byB1c2UgYXMgdGhlIHNpZGVzIG9mIHRoZSBjdWJlLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIEltYWdlUmVzb3VyY2Ugb3B0aW9uc1xuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndpZHRoXSAtIFdpZHRoIG9mIHJlc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaGVpZ2h0XSAtIEhlaWdodCBvZiByZXNvdXJjZVxuICovXG52YXIgQ3ViZVJlc291cmNlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQXJyYXlSZXNvdXJjZSkge1xuICAgIGZ1bmN0aW9uIEN1YmVSZXNvdXJjZShzb3VyY2UsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBBcnJheVJlc291cmNlLmNhbGwodGhpcywgc291cmNlLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAodGhpcy5sZW5ndGggIT09IEN1YmVSZXNvdXJjZS5TSURFUylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChcIkludmFsaWQgbGVuZ3RoLiBHb3QgXCIgKyAodGhpcy5sZW5ndGgpICsgXCIsIGV4cGVjdGVkIDZcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBDdWJlUmVzb3VyY2UuU0lERVM7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5pdGVtc1tpXS50YXJnZXQgPSBUQVJHRVRTLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hdXRvTG9hZCAhPT0gZmFsc2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMubG9hZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCBBcnJheVJlc291cmNlICkgQ3ViZVJlc291cmNlLl9fcHJvdG9fXyA9IEFycmF5UmVzb3VyY2U7XG4gICAgQ3ViZVJlc291cmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEFycmF5UmVzb3VyY2UgJiYgQXJyYXlSZXNvdXJjZS5wcm90b3R5cGUgKTtcbiAgICBDdWJlUmVzb3VyY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3ViZVJlc291cmNlO1xuXG4gICAgLyoqXG4gICAgICogQWRkIGJpbmRpbmdcbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgLSBwYXJlbnQgYmFzZSB0ZXh0dXJlXG4gICAgICovXG4gICAgQ3ViZVJlc291cmNlLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCAoYmFzZVRleHR1cmUpXG4gICAge1xuICAgICAgICBBcnJheVJlc291cmNlLnByb3RvdHlwZS5iaW5kLmNhbGwodGhpcywgYmFzZVRleHR1cmUpO1xuXG4gICAgICAgIGJhc2VUZXh0dXJlLnRhcmdldCA9IFRBUkdFVFMuVEVYVFVSRV9DVUJFX01BUDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBsb2FkIHRoZSByZXNvdXJjZVxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaXMgc3VjY2Vzc1xuICAgICAqL1xuICAgIEN1YmVSZXNvdXJjZS5wcm90b3R5cGUudXBsb2FkID0gZnVuY3Rpb24gdXBsb2FkIChyZW5kZXJlciwgYmFzZVRleHR1cmUsIGdsVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciBkaXJ0eSA9IHRoaXMuaXRlbURpcnR5SWRzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQ3ViZVJlc291cmNlLlNJREVTOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBzaWRlID0gdGhpcy5pdGVtc1tpXTtcblxuICAgICAgICAgICAgaWYgKGRpcnR5W2ldIDwgc2lkZS5kaXJ0eUlkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpcnR5W2ldID0gc2lkZS5kaXJ0eUlkO1xuICAgICAgICAgICAgICAgIGlmIChzaWRlLnZhbGlkKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2lkZS5yZXNvdXJjZS51cGxvYWQocmVuZGVyZXIsIHNpZGUsIGdsVGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBDdWJlUmVzb3VyY2U7XG59KEFycmF5UmVzb3VyY2UpKTtcblxuLyoqXG4gKiBOdW1iZXIgb2YgdGV4dHVyZSBzaWRlcyB0byBzdG9yZSBmb3IgQ3ViZVJlc291cmNlc1xuICpcbiAqIEBuYW1lIFBJWEkucmVzb3VyY2VzLkN1YmVSZXNvdXJjZS5TSURFU1xuICogQHN0YXRpY1xuICogQG1lbWJlciB7bnVtYmVyfVxuICogQGRlZmF1bHQgNlxuICovXG5DdWJlUmVzb3VyY2UuU0lERVMgPSA2O1xuXG4vKipcbiAqIFJlc291cmNlIHR5cGUgZm9yIFNWRyBlbGVtZW50cyBhbmQgZ3JhcGhpY3MuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkucmVzb3VyY2VzLkJhc2VJbWFnZVJlc291cmNlXG4gKiBAbWVtYmVyb2YgUElYSS5yZXNvdXJjZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgLSBCYXNlNjQgZW5jb2RlZCBTVkcgZWxlbWVudCBvciBVUkwgZm9yIFNWRyBmaWxlLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbnMgdG8gdXNlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc2NhbGU9MV0gU2NhbGUgdG8gYXBwbHkgdG8gU1ZHLiBPdmVycmlkZGVuIGJ5Li4uXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud2lkdGhdIFJhc3Rlcml6ZSBTVkcgdGhpcyB3aWRlLiBBc3BlY3QgcmF0aW8gcHJlc2VydmVkIGlmIGhlaWdodCBub3Qgc3BlY2lmaWVkLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmhlaWdodF0gUmFzdGVyaXplIFNWRyB0aGlzIGhpZ2guIEFzcGVjdCByYXRpbyBwcmVzZXJ2ZWQgaWYgd2lkdGggbm90IHNwZWNpZmllZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXV0b0xvYWQ9dHJ1ZV0gU3RhcnQgbG9hZGluZyByaWdodCBhd2F5LlxuICovXG52YXIgU1ZHUmVzb3VyY2UgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChCYXNlSW1hZ2VSZXNvdXJjZSkge1xuICAgIGZ1bmN0aW9uIFNWR1Jlc291cmNlKHNvdXJjZSwgb3B0aW9ucylcbiAgICB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIEJhc2VJbWFnZVJlc291cmNlLmNhbGwodGhpcywgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykpO1xuICAgICAgICB0aGlzLl93aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJhc2U2NCBlbmNvZGVkIFNWRyBlbGVtZW50IG9yIFVSTCBmb3IgU1ZHIGZpbGVcbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3ZnID0gc291cmNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc291cmNlIHNjYWxlIHRvIGFwcGx5IHdoZW4gcmFzdGVyaXppbmcgb24gbG9hZFxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zY2FsZSA9IG9wdGlvbnMuc2NhbGUgfHwgMTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSB3aWR0aCBvdmVycmlkZSBmb3IgcmFzdGVyaXphdGlvbiBvbiBsb2FkXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9vdmVycmlkZVdpZHRoID0gb3B0aW9ucy53aWR0aDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSBoZWlnaHQgb3ZlcnJpZGUgZm9yIHJhc3Rlcml6YXRpb24gb24gbG9hZFxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fb3ZlcnJpZGVIZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbCB3aGVuIGNvbXBsZXRlbHkgbG9hZGVkXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBtZW1iZXIge2Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyb3NzIG9yaWdpbiB2YWx1ZSB0byB1c2VcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbnxzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jcm9zc29yaWdpbiA9IG9wdGlvbnMuY3Jvc3NvcmlnaW47XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb21pc2Ugd2hlbiBsb2FkaW5nXG4gICAgICAgICAqIEBtZW1iZXIge1Byb21pc2U8dm9pZD59XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2xvYWQgPSBudWxsO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF1dG9Mb2FkICE9PSBmYWxzZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIEJhc2VJbWFnZVJlc291cmNlICkgU1ZHUmVzb3VyY2UuX19wcm90b19fID0gQmFzZUltYWdlUmVzb3VyY2U7XG4gICAgU1ZHUmVzb3VyY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQmFzZUltYWdlUmVzb3VyY2UgJiYgQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlICk7XG4gICAgU1ZHUmVzb3VyY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU1ZHUmVzb3VyY2U7XG5cbiAgICBTVkdSZXNvdXJjZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIGxvYWQgKClcbiAgICB7XG4gICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9sb2FkKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvYWQgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGlzIHVudGlsIGFmdGVyIGxvYWQgaXMgZmluaXNoZWRcbiAgICAgICAgICAgIHRoaXMkMS5fcmVzb2x2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzJDEucmVzaXplKHRoaXMkMS5zb3VyY2Uud2lkdGgsIHRoaXMkMS5zb3VyY2UuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMkMSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBDb252ZXJ0IFNWRyBpbmxpbmUgc3RyaW5nIHRvIGRhdGEtdXJpXG4gICAgICAgICAgICBpZiAoKC9eXFw8c3ZnLykudGVzdCh0aGlzJDEuc3ZnLnRyaW0oKSkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKCFidG9hKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3VyIGJyb3dzZXIgZG9lc25cXCd0IHN1cHBvcnQgYmFzZTY0IGNvbnZlcnNpb25zLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzJDEuc3ZnID0gXCJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFwiICsgKGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMkMS5zdmcpKSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzJDEuX2xvYWRTdmcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIExvYWRzIGFuIFNWRyBpbWFnZSBmcm9tIGBpbWFnZVVybGAgb3IgYGRhdGEgVVJMYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgU1ZHUmVzb3VyY2UucHJvdG90eXBlLl9sb2FkU3ZnID0gZnVuY3Rpb24gX2xvYWRTdmcgKClcbiAgICB7XG4gICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgIHZhciB0ZW1wSW1hZ2UgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgICBCYXNlSW1hZ2VSZXNvdXJjZS5jcm9zc09yaWdpbih0ZW1wSW1hZ2UsIHRoaXMuc3ZnLCB0aGlzLl9jcm9zc29yaWdpbik7XG4gICAgICAgIHRlbXBJbWFnZS5zcmMgPSB0aGlzLnN2ZztcblxuICAgICAgICB0ZW1wSW1hZ2Uub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdGVtcEltYWdlLm9uZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgdGhpcyQxLm9uRXJyb3IucnVuKGV2ZW50KTtcbiAgICAgICAgfTtcblxuICAgICAgICB0ZW1wSW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN2Z1dpZHRoID0gdGVtcEltYWdlLndpZHRoO1xuICAgICAgICAgICAgdmFyIHN2Z0hlaWdodCA9IHRlbXBJbWFnZS5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmICghc3ZnV2lkdGggfHwgIXN2Z0hlaWdodClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBTVkcgaW1hZ2UgbXVzdCBoYXZlIHdpZHRoIGFuZCBoZWlnaHQgZGVmaW5lZCAoaW4gcGl4ZWxzKSwgY2FudmFzIEFQSSBuZWVkcyB0aGVtLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgcmVuZGVyIHNpemVcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHN2Z1dpZHRoICogdGhpcyQxLnNjYWxlO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHN2Z0hlaWdodCAqIHRoaXMkMS5zY2FsZTtcblxuICAgICAgICAgICAgaWYgKHRoaXMkMS5fb3ZlcnJpZGVXaWR0aCB8fCB0aGlzJDEuX292ZXJyaWRlSGVpZ2h0KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHdpZHRoID0gdGhpcyQxLl9vdmVycmlkZVdpZHRoIHx8IHRoaXMkMS5fb3ZlcnJpZGVIZWlnaHQgLyBzdmdIZWlnaHQgKiBzdmdXaWR0aDtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzJDEuX292ZXJyaWRlSGVpZ2h0IHx8IHRoaXMkMS5fb3ZlcnJpZGVXaWR0aCAvIHN2Z1dpZHRoICogc3ZnSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2lkdGggPSBNYXRoLnJvdW5kKHdpZHRoKTtcbiAgICAgICAgICAgIGhlaWdodCA9IE1hdGgucm91bmQoaGVpZ2h0KTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY2FudmFzIGVsZW1lbnRcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSB0aGlzJDEuc291cmNlO1xuXG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICBjYW52YXMuX3BpeGlJZCA9IFwiY2FudmFzX1wiICsgKHVpZCgpKTtcblxuICAgICAgICAgICAgLy8gRHJhdyB0aGUgU3ZnIHRvIHRoZSBjYW52YXNcbiAgICAgICAgICAgIGNhbnZhc1xuICAgICAgICAgICAgICAgIC5nZXRDb250ZXh0KCcyZCcpXG4gICAgICAgICAgICAgICAgLmRyYXdJbWFnZSh0ZW1wSW1hZ2UsIDAsIDAsIHN2Z1dpZHRoLCBzdmdIZWlnaHQsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgICAgICB0aGlzJDEuX3Jlc29sdmUoKTtcbiAgICAgICAgICAgIHRoaXMkMS5fcmVzb2x2ZSA9IG51bGw7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCBzaXplIGZyb20gYW4gc3ZnIHN0cmluZyB1c2luZyByZWdleHAuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN2Z1N0cmluZyAtIGEgc2VyaWFsaXplZCBzdmcgZWxlbWVudFxuICAgICAqIEByZXR1cm4ge1BJWEkuSVNpemV9IGltYWdlIGV4dGVuc2lvblxuICAgICAqL1xuICAgIFNWR1Jlc291cmNlLmdldFNpemUgPSBmdW5jdGlvbiBnZXRTaXplIChzdmdTdHJpbmcpXG4gICAge1xuICAgICAgICB2YXIgc2l6ZU1hdGNoID0gU1ZHUmVzb3VyY2UuU1ZHX1NJWkUuZXhlYyhzdmdTdHJpbmcpO1xuICAgICAgICB2YXIgc2l6ZSA9IHt9O1xuXG4gICAgICAgIGlmIChzaXplTWF0Y2gpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNpemVbc2l6ZU1hdGNoWzFdXSA9IE1hdGgucm91bmQocGFyc2VGbG9hdChzaXplTWF0Y2hbM10pKTtcbiAgICAgICAgICAgIHNpemVbc2l6ZU1hdGNoWzVdXSA9IE1hdGgucm91bmQocGFyc2VGbG9hdChzaXplTWF0Y2hbN10pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGlzIHRleHR1cmVcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBTVkdSZXNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UgKClcbiAgICB7XG4gICAgICAgIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmUgPSBudWxsO1xuICAgICAgICB0aGlzLl9jcm9zc29yaWdpbiA9IG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gYXV0by1kZXRlY3QgdGhlIHR5cGUgb2YgcmVzb3VyY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHsqfSBzb3VyY2UgLSBUaGUgc291cmNlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHRlbnNpb24gLSBUaGUgZXh0ZW5zaW9uIG9mIHNvdXJjZSwgaWYgc2V0XG4gICAgICovXG4gICAgU1ZHUmVzb3VyY2UudGVzdCA9IGZ1bmN0aW9uIHRlc3QgKHNvdXJjZSwgZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgLy8gdXJsIGZpbGUgZXh0ZW5zaW9uIGlzIFNWR1xuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uID09PSAnc3ZnJ1xuICAgICAgICAgICAgLy8gc291cmNlIGlzIFNWRyBkYXRhLXVyaVxuICAgICAgICAgICAgfHwgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnICYmIHNvdXJjZS5pbmRleE9mKCdkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0JykgPT09IDApXG4gICAgICAgICAgICAvLyBzb3VyY2UgaXMgU1ZHIGlubGluZVxuICAgICAgICAgICAgfHwgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnICYmIHNvdXJjZS5pbmRleE9mKCc8c3ZnJykgPT09IDApO1xuICAgIH07XG5cbiAgICByZXR1cm4gU1ZHUmVzb3VyY2U7XG59KEJhc2VJbWFnZVJlc291cmNlKSk7XG5cbi8qKlxuICogUmVnRXhwIGZvciBTVkcgc2l6ZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RhbnQge1JlZ0V4cHxzdHJpbmd9IFNWR19TSVpFXG4gKiBAbWVtYmVyb2YgUElYSS5yZXNvdXJjZXMuU1ZHUmVzb3VyY2VcbiAqIEBleGFtcGxlICZsdDtzdmcgd2lkdGg9XCIxMDBcIiBoZWlnaHQ9XCIxMDBcIiZndDsmbHQ7L3N2ZyZndDtcbiAqL1xuU1ZHUmVzb3VyY2UuU1ZHX1NJWkUgPSAvPHN2Z1tePl0qKD86XFxzKHdpZHRofGhlaWdodCk9KCd8XCIpKFxcZCooPzpcXC5cXGQrKT8pKD86cHgpPygnfFwiKSlbXj5dKig/Olxccyh3aWR0aHxoZWlnaHQpPSgnfFwiKShcXGQqKD86XFwuXFxkKyk/KSg/OnB4KT8oJ3xcIikpW14+XSo+L2k7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbWF4LWxlblxuXG4vKipcbiAqIFJlc291cmNlIHR5cGUgZm9yIEhUTUxWaWRlb0VsZW1lbnQuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkucmVzb3VyY2VzLkJhc2VJbWFnZVJlc291cmNlXG4gKiBAbWVtYmVyb2YgUElYSS5yZXNvdXJjZXNcbiAqIEBwYXJhbSB7SFRNTFZpZGVvRWxlbWVudHxvYmplY3R8c3RyaW5nfEFycmF5PHN0cmluZ3xvYmplY3Q+fSBzb3VyY2UgLSBWaWRlbyBlbGVtZW50IHRvIHVzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIHRvIHVzZVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hdXRvTG9hZD10cnVlXSAtIFN0YXJ0IGxvYWRpbmcgdGhlIHZpZGVvIGltbWVkaWF0ZWx5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmF1dG9QbGF5PXRydWVdIC0gU3RhcnQgcGxheWluZyB2aWRlbyBpbW1lZGlhdGVseVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnVwZGF0ZUZQUz0wXSAtIEhvdyBtYW55IHRpbWVzIGEgc2Vjb25kIHRvIHVwZGF0ZSB0aGUgdGV4dHVyZSBmcm9tIHRoZSB2aWRlby5cbiAqIExlYXZlIGF0IDAgdG8gdXBkYXRlIGF0IGV2ZXJ5IHJlbmRlci5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY3Jvc3NvcmlnaW49dHJ1ZV0gLSBMb2FkIGltYWdlIHVzaW5nIGNyb3NzIG9yaWdpblxuICovXG52YXIgVmlkZW9SZXNvdXJjZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEJhc2VJbWFnZVJlc291cmNlKSB7XG4gICAgZnVuY3Rpb24gVmlkZW9SZXNvdXJjZShzb3VyY2UsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAoIShzb3VyY2UgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50KSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHZpZGVvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG5cbiAgICAgICAgICAgIC8vIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpanMvcGl4aS5qcy9pc3N1ZXMvNTk5NlxuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnNldEF0dHJpYnV0ZSgncHJlbG9hZCcsICdhdXRvJyk7XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3ZWJraXQtcGxheXNpbmxpbmUnLCAnJyk7XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICcnKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNvdXJjZSA9IFtzb3VyY2VdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBCYXNlSW1hZ2VSZXNvdXJjZS5jcm9zc09yaWdpbih2aWRlb0VsZW1lbnQsIChzb3VyY2VbMF0uc3JjIHx8IHNvdXJjZVswXSksIG9wdGlvbnMuY3Jvc3NvcmlnaW4pO1xuXG4gICAgICAgICAgICAvLyBhcnJheSBvZiBvYmplY3RzIG9yIHN0cmluZ3NcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gc291cmNlW2ldO1xuICAgICAgICAgICAgICAgIHZhciBzcmMgPSByZWYuc3JjO1xuICAgICAgICAgICAgICAgIHZhciBtaW1lID0gcmVmLm1pbWU7XG5cbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMgfHwgc291cmNlW2ldO1xuXG4gICAgICAgICAgICAgICAgdmFyIGJhc2VTcmMgPSBzcmMuc3BsaXQoJz8nKS5zaGlmdCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdmFyIGV4dCA9IGJhc2VTcmMuc3Vic3RyKGJhc2VTcmMubGFzdEluZGV4T2YoJy4nKSArIDEpO1xuXG4gICAgICAgICAgICAgICAgbWltZSA9IG1pbWUgfHwgKFwidmlkZW8vXCIgKyBleHQpO1xuXG4gICAgICAgICAgICAgICAgc291cmNlRWxlbWVudC5zcmMgPSBzcmM7XG4gICAgICAgICAgICAgICAgc291cmNlRWxlbWVudC50eXBlID0gbWltZTtcblxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudC5hcHBlbmRDaGlsZChzb3VyY2VFbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT3ZlcnJpZGUgdGhlIHNvdXJjZVxuICAgICAgICAgICAgc291cmNlID0gdmlkZW9FbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgQmFzZUltYWdlUmVzb3VyY2UuY2FsbCh0aGlzLCBzb3VyY2UpO1xuXG4gICAgICAgIHRoaXMubm9TdWJJbWFnZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2F1dG9VcGRhdGUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9pc0F1dG9VcGRhdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl91cGRhdGVGUFMgPSBvcHRpb25zLnVwZGF0ZUZQUyB8fCAwO1xuICAgICAgICB0aGlzLl9tc1RvTmV4dFVwZGF0ZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gc2V0IHRvIHRydWUgd2lsbCBhdXRvbWF0aWNhbGx5IHBsYXkgdmlkZW9zIHVzZWQgYnkgdGhpcyB0ZXh0dXJlIG9uY2VcbiAgICAgICAgICogdGhleSBhcmUgbG9hZGVkLiBJZiBmYWxzZSwgaXQgd2lsbCBub3QgbW9kaWZ5IHRoZSBwbGF5aW5nIHN0YXRlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmF1dG9QbGF5ID0gb3B0aW9ucy5hdXRvUGxheSAhPT0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb21pc2Ugd2hlbiBsb2FkaW5nXG4gICAgICAgICAqIEBtZW1iZXIge1Byb21pc2U8dm9pZD59XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2xvYWQgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsYmFjayB3aGVuIGNvbXBsZXRlZCB3aXRoIGxvYWQuXG4gICAgICAgICAqIEBtZW1iZXIge2Z1bmN0aW9ufVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IG51bGw7XG5cbiAgICAgICAgLy8gQmluZCBmb3IgbGlzdGVuZXJzXG4gICAgICAgIHRoaXMuX29uQ2FuUGxheSA9IHRoaXMuX29uQ2FuUGxheS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vbkVycm9yID0gdGhpcy5fb25FcnJvci5iaW5kKHRoaXMpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF1dG9Mb2FkICE9PSBmYWxzZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIEJhc2VJbWFnZVJlc291cmNlICkgVmlkZW9SZXNvdXJjZS5fX3Byb3RvX18gPSBCYXNlSW1hZ2VSZXNvdXJjZTtcbiAgICBWaWRlb1Jlc291cmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJhc2VJbWFnZVJlc291cmNlICYmIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZSApO1xuICAgIFZpZGVvUmVzb3VyY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVmlkZW9SZXNvdXJjZTtcblxuICAgIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGF1dG9VcGRhdGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sdXBkYXRlRlBTOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHVwZGF0aW5nIG9mIHRoZSB0ZXh0dXJlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlbHRhVGltZT0wXSAtIHRpbWUgZGVsdGEgc2luY2UgbGFzdCB0aWNrXG4gICAgICovXG4gICAgVmlkZW9SZXNvdXJjZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkZWx0YVRpbWUpXG4gICAge1xuICAgICAgICBpZiAoIGRlbHRhVGltZSA9PT0gdm9pZCAwICkgZGVsdGFUaW1lID0gMDtcblxuICAgICAgICBpZiAoIXRoaXMuZGVzdHJveWVkKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBhY2NvdW50IGZvciBpZiB2aWRlbyBoYXMgaGFkIGl0cyBwbGF5YmFja1JhdGUgY2hhbmdlZFxuICAgICAgICAgICAgdmFyIGVsYXBzZWRNUyA9IFRpY2tlci5zaGFyZWQuZWxhcHNlZE1TICogdGhpcy5zb3VyY2UucGxheWJhY2tSYXRlO1xuXG4gICAgICAgICAgICB0aGlzLl9tc1RvTmV4dFVwZGF0ZSA9IE1hdGguZmxvb3IodGhpcy5fbXNUb05leHRVcGRhdGUgLSBlbGFwc2VkTVMpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl91cGRhdGVGUFMgfHwgdGhpcy5fbXNUb05leHRVcGRhdGUgPD0gMClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBCYXNlSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgZGVsdGFUaW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tc1RvTmV4dFVwZGF0ZSA9IHRoaXMuX3VwZGF0ZUZQUyA/IE1hdGguZmxvb3IoMTAwMCAvIHRoaXMuX3VwZGF0ZUZQUykgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IHByZWxvYWRpbmcgdGhlIHZpZGVvIHJlc291cmNlLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IEhhbmRsZSB0aGUgdmFsaWRhdGUgZXZlbnRcbiAgICAgKi9cbiAgICBWaWRlb1Jlc291cmNlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gbG9hZCAoKVxuICAgIHtcbiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMuX2xvYWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2FkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuXG4gICAgICAgIGlmICgoc291cmNlLnJlYWR5U3RhdGUgPT09IHNvdXJjZS5IQVZFX0VOT1VHSF9EQVRBIHx8IHNvdXJjZS5yZWFkeVN0YXRlID09PSBzb3VyY2UuSEFWRV9GVVRVUkVfREFUQSlcbiAgICAgICAgICAgICYmIHNvdXJjZS53aWR0aCAmJiBzb3VyY2UuaGVpZ2h0KVxuICAgICAgICB7XG4gICAgICAgICAgICBzb3VyY2UuY29tcGxldGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCB0aGlzLl9vblBsYXlTdGFydC5iaW5kKHRoaXMpKTtcbiAgICAgICAgc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgdGhpcy5fb25QbGF5U3RvcC5iaW5kKHRoaXMpKTtcblxuICAgICAgICBpZiAoIXRoaXMuX2lzU291cmNlUmVhZHkoKSlcbiAgICAgICAge1xuICAgICAgICAgICAgc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCB0aGlzLl9vbkNhblBsYXkpO1xuICAgICAgICAgICAgc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXl0aHJvdWdoJywgdGhpcy5fb25DYW5QbGF5KTtcbiAgICAgICAgICAgIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX29uRXJyb3IsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fb25DYW5QbGF5KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb2FkID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzJDEudmFsaWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzJDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMkMS5fcmVzb2x2ZSA9IHJlc29sdmU7XG5cbiAgICAgICAgICAgICAgICBzb3VyY2UubG9hZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHZpZGVvIGVycm9yIGV2ZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgVmlkZW9SZXNvdXJjZS5wcm90b3R5cGUuX29uRXJyb3IgPSBmdW5jdGlvbiBfb25FcnJvciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5zb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9vbkVycm9yLCB0cnVlKTtcbiAgICAgICAgdGhpcy5vbkVycm9yLnJ1bihldmVudCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdW5kZXJseWluZyBzb3VyY2UgaXMgcGxheWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBwbGF5aW5nLlxuICAgICAqL1xuICAgIFZpZGVvUmVzb3VyY2UucHJvdG90eXBlLl9pc1NvdXJjZVBsYXlpbmcgPSBmdW5jdGlvbiBfaXNTb3VyY2VQbGF5aW5nICgpXG4gICAge1xuICAgICAgICB2YXIgc291cmNlID0gdGhpcy5zb3VyY2U7XG5cbiAgICAgICAgcmV0dXJuIChzb3VyY2UuY3VycmVudFRpbWUgPiAwICYmIHNvdXJjZS5wYXVzZWQgPT09IGZhbHNlICYmIHNvdXJjZS5lbmRlZCA9PT0gZmFsc2UgJiYgc291cmNlLnJlYWR5U3RhdGUgPiAyKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB1bmRlcmx5aW5nIHNvdXJjZSBpcyByZWFkeSBmb3IgcGxheWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiByZWFkeS5cbiAgICAgKi9cbiAgICBWaWRlb1Jlc291cmNlLnByb3RvdHlwZS5faXNTb3VyY2VSZWFkeSA9IGZ1bmN0aW9uIF9pc1NvdXJjZVJlYWR5ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2UucmVhZHlTdGF0ZSA9PT0gMyB8fCB0aGlzLnNvdXJjZS5yZWFkeVN0YXRlID09PSA0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSdW5zIHRoZSB1cGRhdGUgbG9vcCB3aGVuIHRoZSB2aWRlbyBpcyByZWFkeSB0byBwbGF5XG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFZpZGVvUmVzb3VyY2UucHJvdG90eXBlLl9vblBsYXlTdGFydCA9IGZ1bmN0aW9uIF9vblBsYXlTdGFydCAoKVxuICAgIHtcbiAgICAgICAgLy8gSnVzdCBpbiBjYXNlIHRoZSB2aWRlbyBoYXMgbm90IHJlY2VpdmVkIGl0cyBjYW4gcGxheSBldmVuIHlldC4uXG4gICAgICAgIGlmICghdGhpcy52YWxpZClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fb25DYW5QbGF5KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2lzQXV0b1VwZGF0aW5nICYmIHRoaXMuYXV0b1VwZGF0ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgVGlja2VyLnNoYXJlZC5hZGQodGhpcy51cGRhdGUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5faXNBdXRvVXBkYXRpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBwYXVzZSBldmVudCBpcyB0cmlnZ2VyZWQsIHN0b3BzIHRoZSB1cGRhdGUgbG9vcFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBWaWRlb1Jlc291cmNlLnByb3RvdHlwZS5fb25QbGF5U3RvcCA9IGZ1bmN0aW9uIF9vblBsYXlTdG9wICgpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5faXNBdXRvVXBkYXRpbmcpXG4gICAgICAgIHtcbiAgICAgICAgICAgIFRpY2tlci5zaGFyZWQucmVtb3ZlKHRoaXMudXBkYXRlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX2lzQXV0b1VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB0aGUgdmlkZW8gaXMgbG9hZGVkIGFuZCByZWFkeSB0byBwbGF5XG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFZpZGVvUmVzb3VyY2UucHJvdG90eXBlLl9vbkNhblBsYXkgPSBmdW5jdGlvbiBfb25DYW5QbGF5ICgpXG4gICAge1xuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIHNvdXJjZSA9IHJlZi5zb3VyY2U7XG5cbiAgICAgICAgc291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCB0aGlzLl9vbkNhblBsYXkpO1xuICAgICAgICBzb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2FucGxheXRocm91Z2gnLCB0aGlzLl9vbkNhblBsYXkpO1xuXG4gICAgICAgIHZhciB2YWxpZCA9IHRoaXMudmFsaWQ7XG5cbiAgICAgICAgdGhpcy5yZXNpemUoc291cmNlLnZpZGVvV2lkdGgsIHNvdXJjZS52aWRlb0hlaWdodCk7XG5cbiAgICAgICAgLy8gcHJldmVudCBtdWx0aXBsZSBsb2FkZWQgZGlzcGF0Y2hlcy4uXG4gICAgICAgIGlmICghdmFsaWQgJiYgdGhpcy5fcmVzb2x2ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzU291cmNlUGxheWluZygpKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9vblBsYXlTdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYXV0b1BsYXkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNvdXJjZS5wbGF5KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhpcyB0ZXh0dXJlXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgVmlkZW9SZXNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UgKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLl9pc0F1dG9VcGRhdGluZylcbiAgICAgICAge1xuICAgICAgICAgICAgVGlja2VyLnNoYXJlZC5yZW1vdmUodGhpcy51cGRhdGUsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc291cmNlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX29uRXJyb3IsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UucGF1c2UoKTtcbiAgICAgICAgICAgIHRoaXMuc291cmNlLnNyYyA9ICcnO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UubG9hZCgpO1xuICAgICAgICB9XG4gICAgICAgIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNob3VsZCB0aGUgYmFzZSB0ZXh0dXJlIGF1dG9tYXRpY2FsbHkgdXBkYXRlIGl0c2VsZiwgc2V0IHRvIHRydWUgYnkgZGVmYXVsdFxuICAgICAqXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuYXV0b1VwZGF0ZS5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9VcGRhdGU7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5hdXRvVXBkYXRlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMuX2F1dG9VcGRhdGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2F1dG9VcGRhdGUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9hdXRvVXBkYXRlICYmIHRoaXMuX2lzQXV0b1VwZGF0aW5nKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFRpY2tlci5zaGFyZWQucmVtb3ZlKHRoaXMudXBkYXRlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0F1dG9VcGRhdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fYXV0b1VwZGF0ZSAmJiAhdGhpcy5faXNBdXRvVXBkYXRpbmcpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgVGlja2VyLnNoYXJlZC5hZGQodGhpcy51cGRhdGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzQXV0b1VwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIb3cgbWFueSB0aW1lcyBhIHNlY29uZCB0byB1cGRhdGUgdGhlIHRleHR1cmUgZnJvbSB0aGUgdmlkZW8uIExlYXZlIGF0IDAgdG8gdXBkYXRlIGF0IGV2ZXJ5IHJlbmRlci5cbiAgICAgKiBBIGxvd2VyIGZwcyBjYW4gaGVscCBwZXJmb3JtYW5jZSwgYXMgdXBkYXRpbmcgdGhlIHRleHR1cmUgYXQgNjBmcHMgb24gYSAzMHBzIHZpZGVvIG1heSBub3QgYmUgZWZmaWNpZW50LlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy51cGRhdGVGUFMuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGVGUFM7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy51cGRhdGVGUFMuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fdXBkYXRlRlBTKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVGUFMgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGF1dG8tZGV0ZWN0IHRoZSB0eXBlIG9mIHJlc291cmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7Kn0gc291cmNlIC0gVGhlIHNvdXJjZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXh0ZW5zaW9uIC0gVGhlIGV4dGVuc2lvbiBvZiBzb3VyY2UsIGlmIHNldFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB2aWRlbyBzb3VyY2VcbiAgICAgKi9cbiAgICBWaWRlb1Jlc291cmNlLnRlc3QgPSBmdW5jdGlvbiB0ZXN0IChzb3VyY2UsIGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiAoc291cmNlIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudClcbiAgICAgICAgICAgIHx8IFZpZGVvUmVzb3VyY2UuVFlQRVMuaW5kZXhPZihleHRlbnNpb24pID4gLTE7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWaWRlb1Jlc291cmNlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICByZXR1cm4gVmlkZW9SZXNvdXJjZTtcbn0oQmFzZUltYWdlUmVzb3VyY2UpKTtcblxuLyoqXG4gKiBMaXN0IG9mIGNvbW1vbiB2aWRlbyBmaWxlIGV4dGVuc2lvbnMgc3VwcG9ydGVkIGJ5IFZpZGVvUmVzb3VyY2UuXG4gKiBAY29uc3RhbnRcbiAqIEBtZW1iZXIge0FycmF5PHN0cmluZz59XG4gKiBAc3RhdGljXG4gKiBAcmVhZG9ubHlcbiAqL1xuVmlkZW9SZXNvdXJjZS5UWVBFUyA9IFsnbXA0JywgJ200dicsICd3ZWJtJywgJ29nZycsICdvZ3YnLCAnaDI2NCcsICdhdmknLCAnbW92J107XG5cbi8qKlxuICogUmVzb3VyY2UgdHlwZSBmb3IgSW1hZ2VCaXRtYXAuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkucmVzb3VyY2VzLkJhc2VJbWFnZVJlc291cmNlXG4gKiBAbWVtYmVyb2YgUElYSS5yZXNvdXJjZXNcbiAqIEBwYXJhbSB7SW1hZ2VCaXRtYXB9IHNvdXJjZSAtIEltYWdlIGVsZW1lbnQgdG8gdXNlXG4gKi9cbnZhciBJbWFnZUJpdG1hcFJlc291cmNlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQmFzZUltYWdlUmVzb3VyY2UpIHtcbiAgICBmdW5jdGlvbiBJbWFnZUJpdG1hcFJlc291cmNlICgpIHtcbiAgICAgICAgQmFzZUltYWdlUmVzb3VyY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBpZiAoIEJhc2VJbWFnZVJlc291cmNlICkgSW1hZ2VCaXRtYXBSZXNvdXJjZS5fX3Byb3RvX18gPSBCYXNlSW1hZ2VSZXNvdXJjZTtcbiAgICBJbWFnZUJpdG1hcFJlc291cmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJhc2VJbWFnZVJlc291cmNlICYmIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZSApO1xuICAgIEltYWdlQml0bWFwUmVzb3VyY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW1hZ2VCaXRtYXBSZXNvdXJjZTtcblxuICAgIEltYWdlQml0bWFwUmVzb3VyY2UudGVzdCA9IGZ1bmN0aW9uIHRlc3QgKHNvdXJjZSlcbiAgICB7XG4gICAgICAgIHJldHVybiAhIXdpbmRvdy5jcmVhdGVJbWFnZUJpdG1hcCAmJiBzb3VyY2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEltYWdlQml0bWFwUmVzb3VyY2U7XG59KEJhc2VJbWFnZVJlc291cmNlKSk7XG5cbklOU1RBTExFRC5wdXNoKFxuICAgIEltYWdlUmVzb3VyY2UsXG4gICAgSW1hZ2VCaXRtYXBSZXNvdXJjZSxcbiAgICBDYW52YXNSZXNvdXJjZSxcbiAgICBWaWRlb1Jlc291cmNlLFxuICAgIFNWR1Jlc291cmNlLFxuICAgIEJ1ZmZlclJlc291cmNlLFxuICAgIEN1YmVSZXNvdXJjZSxcbiAgICBBcnJheVJlc291cmNlXG4pO1xuXG52YXIgaW5kZXggPSAoe1xuICAgIElOU1RBTExFRDogSU5TVEFMTEVELFxuICAgIGF1dG9EZXRlY3RSZXNvdXJjZTogYXV0b0RldGVjdFJlc291cmNlLFxuICAgIEFycmF5UmVzb3VyY2U6IEFycmF5UmVzb3VyY2UsXG4gICAgQnVmZmVyUmVzb3VyY2U6IEJ1ZmZlclJlc291cmNlLFxuICAgIENhbnZhc1Jlc291cmNlOiBDYW52YXNSZXNvdXJjZSxcbiAgICBDdWJlUmVzb3VyY2U6IEN1YmVSZXNvdXJjZSxcbiAgICBJbWFnZVJlc291cmNlOiBJbWFnZVJlc291cmNlLFxuICAgIEltYWdlQml0bWFwUmVzb3VyY2U6IEltYWdlQml0bWFwUmVzb3VyY2UsXG4gICAgU1ZHUmVzb3VyY2U6IFNWR1Jlc291cmNlLFxuICAgIFZpZGVvUmVzb3VyY2U6IFZpZGVvUmVzb3VyY2UsXG4gICAgUmVzb3VyY2U6IFJlc291cmNlLFxuICAgIEJhc2VJbWFnZVJlc291cmNlOiBCYXNlSW1hZ2VSZXNvdXJjZVxufSk7XG5cbi8qKlxuICogU3lzdGVtIGlzIGEgYmFzZSBjbGFzcyB1c2VkIGZvciBleHRlbmRpbmcgc3lzdGVtcyB1c2VkIGJ5IHRoZSB7QGxpbmsgUElYSS5SZW5kZXJlcn1cbiAqXG4gKiBAc2VlIFBJWEkuUmVuZGVyZXIjYWRkU3lzdGVtXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBTeXN0ZW0gPSBmdW5jdGlvbiBTeXN0ZW0ocmVuZGVyZXIpXG57XG4gICAgLyoqXG4gICAgICogVGhlIHJlbmRlcmVyIHRoaXMgbWFuYWdlciB3b3JrcyBmb3IuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLlJlbmRlcmVyfVxuICAgICAqL1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbn07XG5cbi8qKlxuICogR2VuZXJpYyBkZXN0cm95IG1ldGhvZHMgdG8gYmUgb3ZlcnJpZGRlbiBieSB0aGUgc3ViY2xhc3NcbiAqL1xuU3lzdGVtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xufTtcblxuLyoqXG4gKiBSZXNvdXJjZSB0eXBlIGZvciBEZXB0aFRleHR1cmUuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkucmVzb3VyY2VzLkJ1ZmZlclJlc291cmNlXG4gKiBAbWVtYmVyb2YgUElYSS5yZXNvdXJjZXNcbiAqL1xudmFyIERlcHRoUmVzb3VyY2UgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChCdWZmZXJSZXNvdXJjZSkge1xuICAgIGZ1bmN0aW9uIERlcHRoUmVzb3VyY2UgKCkge1xuICAgICAgICBCdWZmZXJSZXNvdXJjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGlmICggQnVmZmVyUmVzb3VyY2UgKSBEZXB0aFJlc291cmNlLl9fcHJvdG9fXyA9IEJ1ZmZlclJlc291cmNlO1xuICAgIERlcHRoUmVzb3VyY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyUmVzb3VyY2UgJiYgQnVmZmVyUmVzb3VyY2UucHJvdG90eXBlICk7XG4gICAgRGVwdGhSZXNvdXJjZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEZXB0aFJlc291cmNlO1xuXG4gICAgRGVwdGhSZXNvdXJjZS5wcm90b3R5cGUudXBsb2FkID0gZnVuY3Rpb24gdXBsb2FkIChyZW5kZXJlciwgYmFzZVRleHR1cmUsIGdsVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHJlbmRlcmVyLmdsO1xuXG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgYmFzZVRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSk7XG5cbiAgICAgICAgaWYgKGdsVGV4dHVyZS53aWR0aCA9PT0gYmFzZVRleHR1cmUud2lkdGggJiYgZ2xUZXh0dXJlLmhlaWdodCA9PT0gYmFzZVRleHR1cmUuaGVpZ2h0KVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC50ZXhTdWJJbWFnZTJEKFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLnRhcmdldCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS53aWR0aCxcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLnR5cGUsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgZ2xUZXh0dXJlLndpZHRoID0gYmFzZVRleHR1cmUud2lkdGg7XG4gICAgICAgICAgICBnbFRleHR1cmUuaGVpZ2h0ID0gYmFzZVRleHR1cmUuaGVpZ2h0O1xuXG4gICAgICAgICAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLnRhcmdldCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIGdsLkRFUFRIX0NPTVBPTkVOVDE2LCAvLyBOZWVkZWQgZm9yIGRlcHRoIHRvIHJlbmRlciBwcm9wZXJseSBpbiB3ZWJnbDIuMFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLndpZHRoLFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLmhlaWdodCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS50eXBlLFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gRGVwdGhSZXNvdXJjZTtcbn0oQnVmZmVyUmVzb3VyY2UpKTtcblxuLyoqXG4gKiBGcmFtZSBidWZmZXIgdXNlZCBieSB0aGUgQmFzZVJlbmRlclRleHR1cmVcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBGcmFtZWJ1ZmZlciA9IGZ1bmN0aW9uIEZyYW1lYnVmZmVyKHdpZHRoLCBoZWlnaHQpXG57XG4gICAgdGhpcy53aWR0aCA9IE1hdGguY2VpbCh3aWR0aCB8fCAxMDApO1xuICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCB8fCAxMDApO1xuXG4gICAgdGhpcy5zdGVuY2lsID0gZmFsc2U7XG4gICAgdGhpcy5kZXB0aCA9IGZhbHNlO1xuXG4gICAgdGhpcy5kaXJ0eUlkID0gMDtcbiAgICB0aGlzLmRpcnR5Rm9ybWF0ID0gMDtcbiAgICB0aGlzLmRpcnR5U2l6ZSA9IDA7XG5cbiAgICB0aGlzLmRlcHRoVGV4dHVyZSA9IG51bGw7XG4gICAgdGhpcy5jb2xvclRleHR1cmVzID0gW107XG5cbiAgICB0aGlzLmdsRnJhbWVidWZmZXJzID0ge307XG5cbiAgICB0aGlzLmRpc3Bvc2VSdW5uZXIgPSBuZXcgUnVubmVyKCdkaXNwb3NlRnJhbWVidWZmZXInLCAyKTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSA9IHsgY29sb3JUZXh0dXJlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qKlxuICogUmVmZXJlbmNlIHRvIHRoZSBjb2xvclRleHR1cmUuXG4gKlxuICogQG1lbWJlciB7UElYSS5UZXh0dXJlW119XG4gKiBAcmVhZG9ubHlcbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDEuY29sb3JUZXh0dXJlLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMuY29sb3JUZXh0dXJlc1swXTtcbn07XG5cbi8qKlxuICogQWRkIHRleHR1cmUgdG8gdGhlIGNvbG9yVGV4dHVyZSBhcnJheVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbaW5kZXg9MF0gLSBJbmRleCBvZiB0aGUgYXJyYXkgdG8gYWRkIHRoZSB0ZXh0dXJlIHRvXG4gKiBAcGFyYW0ge1BJWEkuVGV4dHVyZX0gW3RleHR1cmVdIC0gVGV4dHVyZSB0byBhZGQgdG8gdGhlIGFycmF5XG4gKi9cbkZyYW1lYnVmZmVyLnByb3RvdHlwZS5hZGRDb2xvclRleHR1cmUgPSBmdW5jdGlvbiBhZGRDb2xvclRleHR1cmUgKGluZGV4LCB0ZXh0dXJlKVxue1xuICAgICAgICBpZiAoIGluZGV4ID09PSB2b2lkIDAgKSBpbmRleCA9IDA7XG5cbiAgICAvLyBUT0RPIGFkZCBzb21lIHZhbGlkYXRpb24gdG8gdGhlIHRleHR1cmUgLSBzYW1lIHdpZHRoIC8gaGVpZ2h0IGV0Yz9cbiAgICB0aGlzLmNvbG9yVGV4dHVyZXNbaW5kZXhdID0gdGV4dHVyZSB8fCBuZXcgQmFzZVRleHR1cmUobnVsbCwgeyBzY2FsZU1vZGU6IDAsXG4gICAgICAgIHJlc29sdXRpb246IDEsXG4gICAgICAgIG1pcG1hcDogZmFsc2UsXG4gICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0IH0pOy8vIHx8IG5ldyBUZXh0dXJlKCk7XG5cbiAgICB0aGlzLmRpcnR5SWQrKztcbiAgICB0aGlzLmRpcnR5Rm9ybWF0Kys7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwdGggdGV4dHVyZSB0byB0aGUgZnJhbWUgYnVmZmVyXG4gKlxuICogQHBhcmFtIHtQSVhJLlRleHR1cmV9IFt0ZXh0dXJlXSAtIFRleHR1cmUgdG8gYWRkXG4gKi9cbkZyYW1lYnVmZmVyLnByb3RvdHlwZS5hZGREZXB0aFRleHR1cmUgPSBmdW5jdGlvbiBhZGREZXB0aFRleHR1cmUgKHRleHR1cmUpXG57XG4gICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgIHRoaXMuZGVwdGhUZXh0dXJlID0gdGV4dHVyZSB8fCBuZXcgQmFzZVRleHR1cmUobmV3IERlcHRoUmVzb3VyY2UobnVsbCwgeyB3aWR0aDogdGhpcy53aWR0aCwgaGVpZ2h0OiB0aGlzLmhlaWdodCB9KSwgeyBzY2FsZU1vZGU6IDAsXG4gICAgICAgIHJlc29sdXRpb246IDEsXG4gICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuICAgICAgICBtaXBtYXA6IGZhbHNlLFxuICAgICAgICBmb3JtYXQ6IEZPUk1BVFMuREVQVEhfQ09NUE9ORU5ULFxuICAgICAgICB0eXBlOiBUWVBFUy5VTlNJR05FRF9TSE9SVCB9KTsvLyBVTlNJR05FRF9TSE9SVDtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgdGhpcy5kaXJ0eUlkKys7XG4gICAgdGhpcy5kaXJ0eUZvcm1hdCsrO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEVuYWJsZSBkZXB0aCBvbiB0aGUgZnJhbWUgYnVmZmVyXG4gKi9cbkZyYW1lYnVmZmVyLnByb3RvdHlwZS5lbmFibGVEZXB0aCA9IGZ1bmN0aW9uIGVuYWJsZURlcHRoICgpXG57XG4gICAgdGhpcy5kZXB0aCA9IHRydWU7XG5cbiAgICB0aGlzLmRpcnR5SWQrKztcbiAgICB0aGlzLmRpcnR5Rm9ybWF0Kys7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRW5hYmxlIHN0ZW5jaWwgb24gdGhlIGZyYW1lIGJ1ZmZlclxuICovXG5GcmFtZWJ1ZmZlci5wcm90b3R5cGUuZW5hYmxlU3RlbmNpbCA9IGZ1bmN0aW9uIGVuYWJsZVN0ZW5jaWwgKClcbntcbiAgICB0aGlzLnN0ZW5jaWwgPSB0cnVlO1xuXG4gICAgdGhpcy5kaXJ0eUlkKys7XG4gICAgdGhpcy5kaXJ0eUZvcm1hdCsrO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlc2l6ZSB0aGUgZnJhbWUgYnVmZmVyXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gV2lkdGggb2YgdGhlIGZyYW1lIGJ1ZmZlciB0byByZXNpemUgdG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBIZWlnaHQgb2YgdGhlIGZyYW1lIGJ1ZmZlciB0byByZXNpemUgdG9cbiAqL1xuRnJhbWVidWZmZXIucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIHJlc2l6ZSAod2lkdGgsIGhlaWdodClcbntcbiAgICB3aWR0aCA9IE1hdGguY2VpbCh3aWR0aCk7XG4gICAgaGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCk7XG5cbiAgICBpZiAod2lkdGggPT09IHRoaXMud2lkdGggJiYgaGVpZ2h0ID09PSB0aGlzLmhlaWdodCkgeyByZXR1cm47IH1cblxuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgIHRoaXMuZGlydHlJZCsrO1xuICAgIHRoaXMuZGlydHlTaXplKys7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29sb3JUZXh0dXJlcy5sZW5ndGg7IGkrKylcbiAgICB7XG4gICAgICAgIHZhciB0ZXh0dXJlID0gdGhpcy5jb2xvclRleHR1cmVzW2ldO1xuICAgICAgICB2YXIgcmVzb2x1dGlvbiA9IHRleHR1cmUucmVzb2x1dGlvbjtcblxuICAgICAgICAvLyB0YWtlIGludG8gYWNvdW50IHRoZSBmYWN0IHRoZSB0ZXh0dXJlIG1heSBoYXZlIGEgZGlmZmVyZW50IHJlc29sdXRpb24uLlxuICAgICAgICB0ZXh0dXJlLnNldFNpemUod2lkdGggLyByZXNvbHV0aW9uLCBoZWlnaHQgLyByZXNvbHV0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kZXB0aFRleHR1cmUpXG4gICAge1xuICAgICAgICB2YXIgcmVzb2x1dGlvbiQxID0gdGhpcy5kZXB0aFRleHR1cmUucmVzb2x1dGlvbjtcblxuICAgICAgICB0aGlzLmRlcHRoVGV4dHVyZS5zZXRTaXplKHdpZHRoIC8gcmVzb2x1dGlvbiQxLCBoZWlnaHQgLyByZXNvbHV0aW9uJDEpO1xuICAgIH1cbn07XG5cbi8qKlxuICogZGlzcG9zZXMgV2ViR0wgcmVzb3VyY2VzIHRoYXQgYXJlIGNvbm5lY3RlZCB0byB0aGlzIGdlb21ldHJ5XG4gKi9cbkZyYW1lYnVmZmVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSAoKVxue1xuICAgIHRoaXMuZGlzcG9zZVJ1bm5lci5ydW4odGhpcywgZmFsc2UpO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEZyYW1lYnVmZmVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEgKTtcblxuLyoqXG4gKiBBIEJhc2VSZW5kZXJUZXh0dXJlIGlzIGEgc3BlY2lhbCB0ZXh0dXJlIHRoYXQgYWxsb3dzIGFueSBQaXhpSlMgZGlzcGxheSBvYmplY3QgdG8gYmUgcmVuZGVyZWQgdG8gaXQuXG4gKlxuICogX19IaW50X186IEFsbCBEaXNwbGF5T2JqZWN0cyAoaS5lLiBTcHJpdGVzKSB0aGF0IHJlbmRlciB0byBhIEJhc2VSZW5kZXJUZXh0dXJlIHNob3VsZCBiZSBwcmVsb2FkZWRcbiAqIG90aGVyd2lzZSBibGFjayByZWN0YW5nbGVzIHdpbGwgYmUgZHJhd24gaW5zdGVhZC5cbiAqXG4gKiBBIEJhc2VSZW5kZXJUZXh0dXJlIHRha2VzIGEgc25hcHNob3Qgb2YgYW55IERpc3BsYXkgT2JqZWN0IGdpdmVuIHRvIGl0cyByZW5kZXIgbWV0aG9kLiBUaGUgcG9zaXRpb25cbiAqIGFuZCByb3RhdGlvbiBvZiB0aGUgZ2l2ZW4gRGlzcGxheSBPYmplY3RzIGlzIGlnbm9yZWQuIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBsZXQgcmVuZGVyZXIgPSBQSVhJLmF1dG9EZXRlY3RSZW5kZXJlcigpO1xuICogbGV0IGJhc2VSZW5kZXJUZXh0dXJlID0gbmV3IFBJWEkuQmFzZVJlbmRlclRleHR1cmUoeyB3aWR0aDogODAwLCBoZWlnaHQ6IDYwMCB9KTtcbiAqIGxldCByZW5kZXJUZXh0dXJlID0gbmV3IFBJWEkuUmVuZGVyVGV4dHVyZShiYXNlUmVuZGVyVGV4dHVyZSk7XG4gKiBsZXQgc3ByaXRlID0gUElYSS5TcHJpdGUuZnJvbShcInNwaW5PYmpfMDEucG5nXCIpO1xuICpcbiAqIHNwcml0ZS5wb3NpdGlvbi54ID0gODAwLzI7XG4gKiBzcHJpdGUucG9zaXRpb24ueSA9IDYwMC8yO1xuICogc3ByaXRlLmFuY2hvci54ID0gMC41O1xuICogc3ByaXRlLmFuY2hvci55ID0gMC41O1xuICpcbiAqIHJlbmRlcmVyLnJlbmRlcihzcHJpdGUsIHJlbmRlclRleHR1cmUpO1xuICogYGBgXG4gKlxuICogVGhlIFNwcml0ZSBpbiB0aGlzIGNhc2Ugd2lsbCBiZSByZW5kZXJlZCB1c2luZyBpdHMgbG9jYWwgdHJhbnNmb3JtLiBUbyByZW5kZXIgdGhpcyBzcHJpdGUgYXQgMCwwXG4gKiB5b3UgY2FuIGNsZWFyIHRoZSB0cmFuc2Zvcm1cbiAqXG4gKiBgYGBqc1xuICpcbiAqIHNwcml0ZS5zZXRUcmFuc2Zvcm0oKVxuICpcbiAqIGxldCBiYXNlUmVuZGVyVGV4dHVyZSA9IG5ldyBQSVhJLkJhc2VSZW5kZXJUZXh0dXJlKHsgd2lkdGg6IDEwMCwgaGVpZ2h0OiAxMDAgfSk7XG4gKiBsZXQgcmVuZGVyVGV4dHVyZSA9IG5ldyBQSVhJLlJlbmRlclRleHR1cmUoYmFzZVJlbmRlclRleHR1cmUpO1xuICpcbiAqIHJlbmRlcmVyLnJlbmRlcihzcHJpdGUsIHJlbmRlclRleHR1cmUpOyAgLy8gUmVuZGVycyB0byBjZW50ZXIgb2YgUmVuZGVyVGV4dHVyZVxuICogYGBgXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLkJhc2VUZXh0dXJlXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgQmFzZVJlbmRlclRleHR1cmUgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChCYXNlVGV4dHVyZSkge1xuICAgIGZ1bmN0aW9uIEJhc2VSZW5kZXJUZXh0dXJlKG9wdGlvbnMpXG4gICAge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKVxuICAgICAgICB7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbiAgICAgICAgICAgIC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHkgb2Ygc2lnbmF0dXJlXG4gICAgICAgICAgICB2YXIgd2lkdGgkMSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHZhciBoZWlnaHQkMSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHZhciBzY2FsZU1vZGUgPSBhcmd1bWVudHNbMl07XG4gICAgICAgICAgICB2YXIgcmVzb2x1dGlvbiA9IGFyZ3VtZW50c1szXTtcblxuICAgICAgICAgICAgb3B0aW9ucyA9IHsgd2lkdGg6IHdpZHRoJDEsIGhlaWdodDogaGVpZ2h0JDEsIHNjYWxlTW9kZTogc2NhbGVNb2RlLCByZXNvbHV0aW9uOiByZXNvbHV0aW9uIH07XG4gICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci1yZXN0LXBhcmFtcyAqL1xuICAgICAgICB9XG5cbiAgICAgICAgQmFzZVRleHR1cmUuY2FsbCh0aGlzLCBudWxsLCBvcHRpb25zKTtcblxuICAgICAgICB2YXIgcmVmID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIHdpZHRoID0gcmVmLndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgICAgICAvLyBTZXQgZGVmYXVsdHNcbiAgICAgICAgdGhpcy5taXBtYXAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aWR0aCA9IE1hdGguY2VpbCh3aWR0aCkgfHwgMTAwO1xuICAgICAgICB0aGlzLmhlaWdodCA9IE1hdGguY2VpbChoZWlnaHQpIHx8IDEwMDtcbiAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjYW52YXMgcmVuZGVyIHRhcmdldCAod2Ugb25seSBuZWVkIG9uZSBhcyB0aGlzIGNhbiBiZSBzaGFyZWQgYWNyb3NzIHJlbmRlcmVycylcbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jYW52YXNSZW5kZXJUYXJnZXQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuY2xlYXJDb2xvciA9IFswLCAwLCAwLCAwXTtcblxuICAgICAgICB0aGlzLmZyYW1lYnVmZmVyID0gbmV3IEZyYW1lYnVmZmVyKHRoaXMud2lkdGggKiB0aGlzLnJlc29sdXRpb24sIHRoaXMuaGVpZ2h0ICogdGhpcy5yZXNvbHV0aW9uKVxuICAgICAgICAgICAgLmFkZENvbG9yVGV4dHVyZSgwLCB0aGlzKTtcblxuICAgICAgICAvLyBUT0RPIC0gY291bGQgdGhpcyBiZSBhZGRlZCB0aGUgc3lzdGVtcz9cblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRhdGEgc3RydWN0dXJlIGZvciB0aGUgc3RlbmNpbCBtYXNrcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5HcmFwaGljc1tdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGVuY2lsTWFza1N0YWNrID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkYXRhIHN0cnVjdHVyZSBmb3IgdGhlIGZpbHRlcnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuR3JhcGhpY3NbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsdGVyU3RhY2sgPSBbe31dO1xuICAgIH1cblxuICAgIGlmICggQmFzZVRleHR1cmUgKSBCYXNlUmVuZGVyVGV4dHVyZS5fX3Byb3RvX18gPSBCYXNlVGV4dHVyZTtcbiAgICBCYXNlUmVuZGVyVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCYXNlVGV4dHVyZSAmJiBCYXNlVGV4dHVyZS5wcm90b3R5cGUgKTtcbiAgICBCYXNlUmVuZGVyVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCYXNlUmVuZGVyVGV4dHVyZTtcblxuICAgIC8qKlxuICAgICAqIFJlc2l6ZXMgdGhlIEJhc2VSZW5kZXJUZXh0dXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIHRvIHJlc2l6ZSB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCB0byByZXNpemUgdG8uXG4gICAgICovXG4gICAgQmFzZVJlbmRlclRleHR1cmUucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIHJlc2l6ZSAod2lkdGgsIGhlaWdodClcbiAgICB7XG4gICAgICAgIHdpZHRoID0gTWF0aC5jZWlsKHdpZHRoKTtcbiAgICAgICAgaGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCk7XG4gICAgICAgIHRoaXMuZnJhbWVidWZmZXIucmVzaXplKHdpZHRoICogdGhpcy5yZXNvbHV0aW9uLCBoZWlnaHQgKiB0aGlzLnJlc29sdXRpb24pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGcmVlcyB0aGUgdGV4dHVyZSBhbmQgZnJhbWVidWZmZXIgZnJvbSBXZWJHTCBtZW1vcnkgd2l0aG91dCBkZXN0cm95aW5nIHRoaXMgdGV4dHVyZSBvYmplY3QuXG4gICAgICogVGhpcyBtZWFucyB5b3UgY2FuIHN0aWxsIHVzZSB0aGUgdGV4dHVyZSBsYXRlciB3aGljaCB3aWxsIHVwbG9hZCBpdCB0byBHUFVcbiAgICAgKiBtZW1vcnkgYWdhaW4uXG4gICAgICpcbiAgICAgKiBAZmlyZXMgUElYSS5CYXNlVGV4dHVyZSNkaXNwb3NlXG4gICAgICovXG4gICAgQmFzZVJlbmRlclRleHR1cmUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlICgpXG4gICAge1xuICAgICAgICB0aGlzLmZyYW1lYnVmZmVyLmRpc3Bvc2UoKTtcblxuICAgICAgICBCYXNlVGV4dHVyZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGlzIHRleHR1cmUuXG4gICAgICpcbiAgICAgKi9cbiAgICBCYXNlUmVuZGVyVGV4dHVyZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbiAgICB7XG4gICAgICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcywgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5mcmFtZWJ1ZmZlciA9IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiBCYXNlUmVuZGVyVGV4dHVyZTtcbn0oQmFzZVRleHR1cmUpKTtcblxuLyoqXG4gKiBTdG9yZXMgYSB0ZXh0dXJlJ3MgZnJhbWUgaW4gVVYgY29vcmRpbmF0ZXMsIGluXG4gKiB3aGljaCBldmVyeXRoaW5nIGxpZXMgaW4gdGhlIHJlY3RhbmdsZSBgWygwLDApLCAoMSwwKSxcbiAqICgxLDEpLCAoMCwxKV1gLlxuICpcbiAqIHwgQ29ybmVyICAgICAgIHwgQ29vcmRpbmF0ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS18XG4gKiB8IFRvcC1MZWZ0ICAgICB8IGAoeDAseTApYCAgIHxcbiAqIHwgVG9wLVJpZ2h0ICAgIHwgYCh4MSx5MSlgICAgfFxuICogfCBCb3R0b20tUmlnaHQgfCBgKHgyLHkyKWAgICB8XG4gKiB8IEJvdHRvbS1MZWZ0ICB8IGAoeDMseTMpYCAgIHxcbiAqXG4gKiBAY2xhc3NcbiAqIEBwcm90ZWN0ZWRcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBUZXh0dXJlVXZzID0gZnVuY3Rpb24gVGV4dHVyZVV2cygpXG57XG4gICAgLyoqXG4gICAgICogWC1jb21wb25lbnQgb2YgdG9wLWxlZnQgY29ybmVyIGAoeDAseTApYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLngwID0gMDtcblxuICAgIC8qKlxuICAgICAqIFktY29tcG9uZW50IG9mIHRvcC1sZWZ0IGNvcm5lciBgKHgwLHkwKWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy55MCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBYLWNvbXBvbmVudCBvZiB0b3AtcmlnaHQgY29ybmVyIGAoeDEseTEpYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLngxID0gMTtcblxuICAgIC8qKlxuICAgICAqIFktY29tcG9uZW50IG9mIHRvcC1yaWdodCBjb3JuZXIgYCh4MSx5MSlgLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMueTEgPSAwO1xuXG4gICAgLyoqXG4gICAgICogWC1jb21wb25lbnQgb2YgYm90dG9tLXJpZ2h0IGNvcm5lciBgKHgyLHkyKWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy54MiA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBZLWNvbXBvbmVudCBvZiBib3R0b20tcmlnaHQgY29ybmVyIGAoeDIseTIpYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnkyID0gMTtcblxuICAgIC8qKlxuICAgICAqIFgtY29tcG9uZW50IG9mIGJvdHRvbS1sZWZ0IGNvcm5lciBgKHgzLHkzKWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy54MyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBZLWNvbXBvbmVudCBvZiBib3R0b20tcmlnaHQgY29ybmVyIGAoeDMseTMpYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnkzID0gMTtcblxuICAgIHRoaXMudXZzRmxvYXQzMiA9IG5ldyBGbG9hdDMyQXJyYXkoOCk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHRleHR1cmUgVXZzIGJhc2VkIG9uIHRoZSBnaXZlbiBmcmFtZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAcHJvdGVjdGVkXG4gKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBmcmFtZSAtIFRoZSBmcmFtZSBvZiB0aGUgdGV4dHVyZVxuICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gYmFzZUZyYW1lIC0gVGhlIGJhc2UgZnJhbWUgb2YgdGhlIHRleHR1cmVcbiAqIEBwYXJhbSB7bnVtYmVyfSByb3RhdGUgLSBSb3RhdGlvbiBvZiBmcmFtZSwgc2VlIHtAbGluayBQSVhJLkdyb3VwRDh9XG4gKi9cblRleHR1cmVVdnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIHNldCAoZnJhbWUsIGJhc2VGcmFtZSwgcm90YXRlKVxue1xuICAgIHZhciB0dyA9IGJhc2VGcmFtZS53aWR0aDtcbiAgICB2YXIgdGggPSBiYXNlRnJhbWUuaGVpZ2h0O1xuXG4gICAgaWYgKHJvdGF0ZSlcbiAgICB7XG4gICAgICAgIC8vIHdpZHRoIGFuZCBoZWlnaHQgZGl2IDIgZGl2IGJhc2VGcmFtZSBzaXplXG4gICAgICAgIHZhciB3MiA9IGZyYW1lLndpZHRoIC8gMiAvIHR3O1xuICAgICAgICB2YXIgaDIgPSBmcmFtZS5oZWlnaHQgLyAyIC8gdGg7XG5cbiAgICAgICAgLy8gY29vcmRpbmF0ZXMgb2YgY2VudGVyXG4gICAgICAgIHZhciBjWCA9IChmcmFtZS54IC8gdHcpICsgdzI7XG4gICAgICAgIHZhciBjWSA9IChmcmFtZS55IC8gdGgpICsgaDI7XG5cbiAgICAgICAgcm90YXRlID0gR3JvdXBEOC5hZGQocm90YXRlLCBHcm91cEQ4Lk5XKTsgLy8gTlcgaXMgdG9wLWxlZnQgY29ybmVyXG4gICAgICAgIHRoaXMueDAgPSBjWCArICh3MiAqIEdyb3VwRDgudVgocm90YXRlKSk7XG4gICAgICAgIHRoaXMueTAgPSBjWSArIChoMiAqIEdyb3VwRDgudVkocm90YXRlKSk7XG5cbiAgICAgICAgcm90YXRlID0gR3JvdXBEOC5hZGQocm90YXRlLCAyKTsgLy8gcm90YXRlIDkwIGRlZ3JlZXMgY2xvY2t3aXNlXG4gICAgICAgIHRoaXMueDEgPSBjWCArICh3MiAqIEdyb3VwRDgudVgocm90YXRlKSk7XG4gICAgICAgIHRoaXMueTEgPSBjWSArIChoMiAqIEdyb3VwRDgudVkocm90YXRlKSk7XG5cbiAgICAgICAgcm90YXRlID0gR3JvdXBEOC5hZGQocm90YXRlLCAyKTtcbiAgICAgICAgdGhpcy54MiA9IGNYICsgKHcyICogR3JvdXBEOC51WChyb3RhdGUpKTtcbiAgICAgICAgdGhpcy55MiA9IGNZICsgKGgyICogR3JvdXBEOC51WShyb3RhdGUpKTtcblxuICAgICAgICByb3RhdGUgPSBHcm91cEQ4LmFkZChyb3RhdGUsIDIpO1xuICAgICAgICB0aGlzLngzID0gY1ggKyAodzIgKiBHcm91cEQ4LnVYKHJvdGF0ZSkpO1xuICAgICAgICB0aGlzLnkzID0gY1kgKyAoaDIgKiBHcm91cEQ4LnVZKHJvdGF0ZSkpO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICB0aGlzLngwID0gZnJhbWUueCAvIHR3O1xuICAgICAgICB0aGlzLnkwID0gZnJhbWUueSAvIHRoO1xuXG4gICAgICAgIHRoaXMueDEgPSAoZnJhbWUueCArIGZyYW1lLndpZHRoKSAvIHR3O1xuICAgICAgICB0aGlzLnkxID0gZnJhbWUueSAvIHRoO1xuXG4gICAgICAgIHRoaXMueDIgPSAoZnJhbWUueCArIGZyYW1lLndpZHRoKSAvIHR3O1xuICAgICAgICB0aGlzLnkyID0gKGZyYW1lLnkgKyBmcmFtZS5oZWlnaHQpIC8gdGg7XG5cbiAgICAgICAgdGhpcy54MyA9IGZyYW1lLnggLyB0dztcbiAgICAgICAgdGhpcy55MyA9IChmcmFtZS55ICsgZnJhbWUuaGVpZ2h0KSAvIHRoO1xuICAgIH1cblxuICAgIHRoaXMudXZzRmxvYXQzMlswXSA9IHRoaXMueDA7XG4gICAgdGhpcy51dnNGbG9hdDMyWzFdID0gdGhpcy55MDtcbiAgICB0aGlzLnV2c0Zsb2F0MzJbMl0gPSB0aGlzLngxO1xuICAgIHRoaXMudXZzRmxvYXQzMlszXSA9IHRoaXMueTE7XG4gICAgdGhpcy51dnNGbG9hdDMyWzRdID0gdGhpcy54MjtcbiAgICB0aGlzLnV2c0Zsb2F0MzJbNV0gPSB0aGlzLnkyO1xuICAgIHRoaXMudXZzRmxvYXQzMls2XSA9IHRoaXMueDM7XG4gICAgdGhpcy51dnNGbG9hdDMyWzddID0gdGhpcy55Mztcbn07XG5cbnZhciBERUZBVUxUX1VWUyA9IG5ldyBUZXh0dXJlVXZzKCk7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHN0b3JlcyB0aGUgaW5mb3JtYXRpb24gdGhhdCByZXByZXNlbnRzIGFuIGltYWdlIG9yIHBhcnQgb2YgYW4gaW1hZ2UuXG4gKlxuICogSXQgY2Fubm90IGJlIGFkZGVkIHRvIHRoZSBkaXNwbGF5IGxpc3QgZGlyZWN0bHk7IGluc3RlYWQgdXNlIGl0IGFzIHRoZSB0ZXh0dXJlIGZvciBhIFNwcml0ZS5cbiAqIElmIG5vIGZyYW1lIGlzIHByb3ZpZGVkIGZvciBhIHRleHR1cmUsIHRoZW4gdGhlIHdob2xlIGltYWdlIGlzIHVzZWQuXG4gKlxuICogWW91IGNhbiBkaXJlY3RseSBjcmVhdGUgYSB0ZXh0dXJlIGZyb20gYW4gaW1hZ2UgYW5kIHRoZW4gcmV1c2UgaXQgbXVsdGlwbGUgdGltZXMgbGlrZSB0aGlzIDpcbiAqXG4gKiBgYGBqc1xuICogbGV0IHRleHR1cmUgPSBQSVhJLlRleHR1cmUuZnJvbSgnYXNzZXRzL2ltYWdlLnBuZycpO1xuICogbGV0IHNwcml0ZTEgPSBuZXcgUElYSS5TcHJpdGUodGV4dHVyZSk7XG4gKiBsZXQgc3ByaXRlMiA9IG5ldyBQSVhJLlNwcml0ZSh0ZXh0dXJlKTtcbiAqIGBgYFxuICpcbiAqIElmIHlvdSBkaWRudCBwYXNzIHRoZSB0ZXh0dXJlIGZyYW1lIHRvIGNvbnN0cnVjdG9yLCBpdCBlbmFibGVzIGBub0ZyYW1lYCBtb2RlOlxuICogaXQgc3Vic2NyaWJlcyBvbiBiYXNlVGV4dHVyZSBldmVudHMsIGl0IGF1dG9tYXRpY2FsbHkgcmVzaXplcyBhdCB0aGUgc2FtZSB0aW1lIGFzIGJhc2VUZXh0dXJlLlxuICpcbiAqIFRleHR1cmVzIG1hZGUgZnJvbSBTVkdzLCBsb2FkZWQgb3Igbm90LCBjYW5ub3QgYmUgdXNlZCBiZWZvcmUgdGhlIGZpbGUgZmluaXNoZXMgcHJvY2Vzc2luZy5cbiAqIFlvdSBjYW4gY2hlY2sgZm9yIHRoaXMgYnkgY2hlY2tpbmcgdGhlIHNwcml0ZSdzIF90ZXh0dXJlSUQgcHJvcGVydHkuXG4gKiBgYGBqc1xuICogdmFyIHRleHR1cmUgPSBQSVhJLlRleHR1cmUuZnJvbSgnYXNzZXRzL2ltYWdlLnN2ZycpO1xuICogdmFyIHNwcml0ZTEgPSBuZXcgUElYSS5TcHJpdGUodGV4dHVyZSk7XG4gKiAvL3Nwcml0ZTEuX3RleHR1cmVJRCBzaG91bGQgbm90IGJlIHVuZGVmaW5lZCBpZiB0aGUgdGV4dHVyZSBoYXMgZmluaXNoZWQgcHJvY2Vzc2luZyB0aGUgU1ZHIGZpbGVcbiAqIGBgYFxuICogWW91IGNhbiB1c2UgYSB0aWNrZXIgb3IgckFGIHRvIGVuc3VyZSB5b3VyIHNwcml0ZXMgbG9hZCB0aGUgZmluaXNoZWQgdGV4dHVyZXMgYWZ0ZXIgcHJvY2Vzc2luZy4gU2VlIGlzc3VlICMzMDY4LlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS51dGlscy5FdmVudEVtaXR0ZXJcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBUZXh0dXJlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoRXZlbnRFbWl0dGVyKSB7XG4gICAgZnVuY3Rpb24gVGV4dHVyZShiYXNlVGV4dHVyZSwgZnJhbWUsIG9yaWcsIHRyaW0sIHJvdGF0ZSwgYW5jaG9yKVxuICAgIHtcbiAgICAgICAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERvZXMgdGhpcyBUZXh0dXJlIGhhdmUgYW55IGZyYW1lIGRhdGEgYXNzaWduZWQgdG8gaXQ/XG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgbW9kZSBpcyBlbmFibGVkIGF1dG9tYXRpY2FsbHkgaWYgbm8gZnJhbWUgd2FzIHBhc3NlZCBpbnNpZGUgY29uc3RydWN0b3IuXG4gICAgICAgICAqXG4gICAgICAgICAqIEluIHRoaXMgbW9kZSB0ZXh0dXJlIGlzIHN1YnNjcmliZWQgdG8gYmFzZVRleHR1cmUgZXZlbnRzLCBhbmQgZmlyZXMgYHVwZGF0ZWAgb24gYW55IGNoYW5nZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQmV3YXJlLCBhZnRlciBsb2FkaW5nIG9yIHJlc2l6ZSBvZiBiYXNlVGV4dHVyZSBldmVudCBjYW4gZmlyZWQgdHdvIHRpbWVzIVxuICAgICAgICAgKiBJZiB5b3Ugd2FudCBtb3JlIGNvbnRyb2wsIHN1YnNjcmliZSBvbiBiYXNlVGV4dHVyZSBpdHNlbGYuXG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGpzXG4gICAgICAgICAqIHRleHR1cmUub24oJ3VwZGF0ZScsICgpID0+IHt9KTtcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqIEFueSBhc3NpZ25tZW50IG9mIGBmcmFtZWAgc3dpdGNoZXMgb2ZmIGBub0ZyYW1lYCBtb2RlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ub0ZyYW1lID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCFmcmFtZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5ub0ZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgIGZyYW1lID0gbmV3IFJlY3RhbmdsZSgwLCAwLCAxLCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiYXNlVGV4dHVyZSBpbnN0YW5jZW9mIFRleHR1cmUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJhc2VUZXh0dXJlID0gYmFzZVRleHR1cmUuYmFzZVRleHR1cmU7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGJhc2UgdGV4dHVyZSB0aGF0IHRoaXMgdGV4dHVyZSB1c2VzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkJhc2VUZXh0dXJlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5iYXNlVGV4dHVyZSA9IGJhc2VUZXh0dXJlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGlzIHRoZSBhcmVhIG9mIHRoZSBCYXNlVGV4dHVyZSBpbWFnZSB0byBhY3R1YWxseSBjb3B5IHRvIHRoZSBDYW52YXMgLyBXZWJHTCB3aGVuIHJlbmRlcmluZyxcbiAgICAgICAgICogaXJyZXNwZWN0aXZlIG9mIHRoZSBhY3R1YWwgZnJhbWUgc2l6ZSBvciBwbGFjZW1lbnQgKHdoaWNoIGNhbiBiZSBpbmZsdWVuY2VkIGJ5IHRyaW1tZWQgdGV4dHVyZSBhdGxhc2VzKVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlJlY3RhbmdsZX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2ZyYW1lID0gZnJhbWU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgaXMgdGhlIHRyaW1tZWQgYXJlYSBvZiBvcmlnaW5hbCB0ZXh0dXJlLCBiZWZvcmUgaXQgd2FzIHB1dCBpbiBhdGxhc1xuICAgICAgICAgKiBQbGVhc2UgY2FsbCBgdXBkYXRlVXZzKClgIGFmdGVyIHlvdSBjaGFuZ2UgY29vcmRpbmF0ZXMgb2YgYHRyaW1gIG1hbnVhbGx5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlJlY3RhbmdsZX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHJpbSA9IHRyaW07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgd2lsbCBsZXQgdGhlIHJlbmRlcmVyIGtub3cgaWYgdGhlIHRleHR1cmUgaXMgdmFsaWQuIElmIGl0J3Mgbm90IHRoZW4gaXQgY2Fubm90IGJlIHJlbmRlcmVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHdpbGwgbGV0IGEgcmVuZGVyZXIga25vdyB0aGF0IGEgdGV4dHVyZSBoYXMgYmVlbiB1cGRhdGVkICh1c2VkIG1haW5seSBmb3IgV2ViR0wgdXYgdXBkYXRlcylcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVxdWlyZXNVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIFdlYkdMIFVWIGRhdGEgY2FjaGUuIENhbiBiZSB1c2VkIGFzIHF1YWQgVVZcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5UZXh0dXJlVXZzfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl91dnMgPSBERUZBVUxUX1VWUztcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmYXVsdCBUZXh0dXJlTWF0cml4IGluc3RhbmNlIGZvciB0aGlzIHRleHR1cmVcbiAgICAgICAgICogQnkgZGVmYXVsdCB0aGF0IG9iamVjdCBpcyBub3QgY3JlYXRlZCBiZWNhdXNlIGl0cyBoZWF2eVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlRleHR1cmVNYXRyaXh9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnV2TWF0cml4ID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBpcyB0aGUgYXJlYSBvZiBvcmlnaW5hbCB0ZXh0dXJlLCBiZWZvcmUgaXQgd2FzIHB1dCBpbiBhdGxhc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlJlY3RhbmdsZX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3JpZyA9IG9yaWcgfHwgZnJhbWU7Ly8gbmV3IFJlY3RhbmdsZSgwLCAwLCAxLCAxKTtcblxuICAgICAgICB0aGlzLl9yb3RhdGUgPSBOdW1iZXIocm90YXRlIHx8IDApO1xuXG4gICAgICAgIGlmIChyb3RhdGUgPT09IHRydWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgb2xkIHRleHR1cmVwYWNrZXIgbGVnYWN5LCBzb21lIGdhbWVzL2xpYnJhcmllcyBhcmUgcGFzc2luZyBcInRydWVcIiBmb3Igcm90YXRlZCB0ZXh0dXJlc1xuICAgICAgICAgICAgdGhpcy5fcm90YXRlID0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9yb3RhdGUgJSAyICE9PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2F0dGVtcHQgdG8gdXNlIGRpYW1vbmQtc2hhcGVkIFVWcy4gSWYgeW91IGFyZSBzdXJlLCBzZXQgcm90YXRpb24gbWFudWFsbHknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbmNob3IgcG9pbnQgdGhhdCBpcyB1c2VkIGFzIGRlZmF1bHQgaWYgc3ByaXRlIGlzIGNyZWF0ZWQgd2l0aCB0aGlzIHRleHR1cmUuXG4gICAgICAgICAqIENoYW5naW5nIHRoZSBgZGVmYXVsdEFuY2hvcmAgYXQgYSBsYXRlciBwb2ludCBvZiB0aW1lIHdpbGwgbm90IHVwZGF0ZSBTcHJpdGUncyBhbmNob3IgcG9pbnQuXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUG9pbnR9XG4gICAgICAgICAqIEBkZWZhdWx0IHswLDB9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlZmF1bHRBbmNob3IgPSBhbmNob3IgPyBuZXcgUG9pbnQoYW5jaG9yLngsIGFuY2hvci55KSA6IG5ldyBQb2ludCgwLCAwKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIElEIGlzIG9ic2VydmVkIGJ5IHNwcml0ZXMgYW5kIFRleHR1cmVNYXRyaXggaW5zdGFuY2VzLlxuICAgICAgICAgKiBDYWxsIHVwZGF0ZVV2cygpIHRvIGluY3JlbWVudCBpdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZUlEID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGlkcyB1bmRlciB3aGljaCB0aGlzIFRleHR1cmUgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIHRleHR1cmUgY2FjaGUuIFRoaXMgaXNcbiAgICAgICAgICogYXV0b21hdGljYWxseSBzZXQgYXMgbG9uZyBhcyBUZXh0dXJlLmFkZFRvQ2FjaGUgaXMgdXNlZCwgYnV0IG1heSBub3QgYmUgc2V0IGlmIGFcbiAgICAgICAgICogVGV4dHVyZSBpcyBhZGRlZCBkaXJlY3RseSB0byB0aGUgVGV4dHVyZUNhY2hlIGFycmF5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmdbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGV4dHVyZUNhY2hlSWRzID0gW107XG5cbiAgICAgICAgaWYgKCFiYXNlVGV4dHVyZS52YWxpZClcbiAgICAgICAge1xuICAgICAgICAgICAgYmFzZVRleHR1cmUub25jZSgnbG9hZGVkJywgdGhpcy5vbkJhc2VUZXh0dXJlVXBkYXRlZCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5ub0ZyYW1lKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBmcmFtZSB3ZSBzaG91bGQgbW9uaXRvciBmb3IgYW55IGJhc2UgdGV4dHVyZSBjaGFuZ2VzLi5cbiAgICAgICAgICAgIGlmIChiYXNlVGV4dHVyZS52YWxpZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQmFzZVRleHR1cmVVcGRhdGVkKGJhc2VUZXh0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZnJhbWUgPSBmcmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm5vRnJhbWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJhc2VUZXh0dXJlLm9uKCd1cGRhdGUnLCB0aGlzLm9uQmFzZVRleHR1cmVVcGRhdGVkLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICggRXZlbnRFbWl0dGVyICkgVGV4dHVyZS5fX3Byb3RvX18gPSBFdmVudEVtaXR0ZXI7XG4gICAgVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdmVudEVtaXR0ZXIgJiYgRXZlbnRFbWl0dGVyLnByb3RvdHlwZSApO1xuICAgIFRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV4dHVyZTtcblxuICAgIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHJlc29sdXRpb246IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sZnJhbWU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scm90YXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHdpZHRoOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGhlaWdodDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGlzIHRleHR1cmUgb24gdGhlIGdwdS5cbiAgICAgKlxuICAgICAqIENhbGxzIHRoZSBUZXh0dXJlUmVzb3VyY2UgdXBkYXRlLlxuICAgICAqXG4gICAgICogSWYgeW91IGFkanVzdGVkIGBmcmFtZWAgbWFudWFsbHksIHBsZWFzZSBjYWxsIGB1cGRhdGVVdnMoKWAgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqL1xuICAgIFRleHR1cmUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuYmFzZVRleHR1cmUucmVzb3VyY2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZVRleHR1cmUucmVzb3VyY2UudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIGJhc2UgdGV4dHVyZSBpcyB1cGRhdGVkXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSAtIFRoZSBiYXNlIHRleHR1cmUuXG4gICAgICovXG4gICAgVGV4dHVyZS5wcm90b3R5cGUub25CYXNlVGV4dHVyZVVwZGF0ZWQgPSBmdW5jdGlvbiBvbkJhc2VUZXh0dXJlVXBkYXRlZCAoYmFzZVRleHR1cmUpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5ub0ZyYW1lKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYmFzZVRleHR1cmUudmFsaWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9mcmFtZS53aWR0aCA9IGJhc2VUZXh0dXJlLndpZHRoO1xuICAgICAgICAgICAgdGhpcy5fZnJhbWUuaGVpZ2h0ID0gYmFzZVRleHR1cmUuaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVV2cygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVE9ETyB0aGlzIGNvZGUgbG9va3MgY29uZnVzaW5nLi4gYm9vIHRvIGFidXNpbmcgZ2V0dGVycyBhbmQgc2V0dGVycyFcbiAgICAgICAgICAgIC8vIGlmIHVzZXIgZ2F2ZSB1cyBmcmFtZSB0aGF0IGhhcyBiaWdnZXIgc2l6ZSB0aGFuIHJlc2l6ZWQgdGV4dHVyZSBpdCBjYW4gYmUgYSBwcm9ibGVtXG4gICAgICAgICAgICB0aGlzLmZyYW1lID0gdGhpcy5fZnJhbWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIHRoaXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGlzIHRleHR1cmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Rlc3Ryb3lCYXNlPWZhbHNlXSBXaGV0aGVyIHRvIGRlc3Ryb3kgdGhlIGJhc2UgdGV4dHVyZSBhcyB3ZWxsXG4gICAgICovXG4gICAgVGV4dHVyZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKGRlc3Ryb3lCYXNlKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuYmFzZVRleHR1cmUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChkZXN0cm95QmFzZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5iYXNlVGV4dHVyZTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSByZWYucmVzb3VyY2U7XG5cbiAgICAgICAgICAgICAgICAvLyBkZWxldGUgdGhlIHRleHR1cmUgaWYgaXQgZXhpc3RzIGluIHRoZSB0ZXh0dXJlIGNhY2hlLi5cbiAgICAgICAgICAgICAgICAvLyB0aGlzIG9ubHkgbmVlZHMgdG8gYmUgcmVtb3ZlZCBpZiB0aGUgYmFzZSB0ZXh0dXJlIGlzIGFjdHVhbGx5IGRlc3Ryb3llZCB0b28uLlxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZSAmJiBUZXh0dXJlQ2FjaGVbcmVzb3VyY2UudXJsXSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFRleHR1cmUucmVtb3ZlRnJvbUNhY2hlKHJlc291cmNlLnVybCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlVGV4dHVyZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYmFzZVRleHR1cmUub2ZmKCd1cGRhdGUnLCB0aGlzLm9uQmFzZVRleHR1cmVVcGRhdGVkLCB0aGlzKTtcblxuICAgICAgICAgICAgdGhpcy5iYXNlVGV4dHVyZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9mcmFtZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3V2cyA9IG51bGw7XG4gICAgICAgIHRoaXMudHJpbSA9IG51bGw7XG4gICAgICAgIHRoaXMub3JpZyA9IG51bGw7XG5cbiAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xuXG4gICAgICAgIFRleHR1cmUucmVtb3ZlRnJvbUNhY2hlKHRoaXMpO1xuICAgICAgICB0aGlzLnRleHR1cmVDYWNoZUlkcyA9IG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGV4dHVyZSBvYmplY3QgdGhhdCBhY3RzIHRoZSBzYW1lIGFzIHRoaXMgb25lLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UElYSS5UZXh0dXJlfSBUaGUgbmV3IHRleHR1cmVcbiAgICAgKi9cbiAgICBUZXh0dXJlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IFRleHR1cmUodGhpcy5iYXNlVGV4dHVyZSwgdGhpcy5mcmFtZSwgdGhpcy5vcmlnLCB0aGlzLnRyaW0sIHRoaXMucm90YXRlLCB0aGlzLmRlZmF1bHRBbmNob3IpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBpbnRlcm5hbCBXZWJHTCBVViBjYWNoZS4gVXNlIGl0IGFmdGVyIHlvdSBjaGFuZ2UgYGZyYW1lYCBvciBgdHJpbWAgb2YgdGhlIHRleHR1cmUuXG4gICAgICogQ2FsbCBpdCBhZnRlciBjaGFuZ2luZyB0aGUgZnJhbWVcbiAgICAgKi9cbiAgICBUZXh0dXJlLnByb3RvdHlwZS51cGRhdGVVdnMgPSBmdW5jdGlvbiB1cGRhdGVVdnMgKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLl91dnMgPT09IERFRkFVTFRfVVZTKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl91dnMgPSBuZXcgVGV4dHVyZVV2cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdXZzLnNldCh0aGlzLl9mcmFtZSwgdGhpcy5iYXNlVGV4dHVyZSwgdGhpcy5yb3RhdGUpO1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZUlEKys7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYSBuZXcgVGV4dHVyZSBiYXNlZCBvbiB0aGUgc291cmNlIHlvdSBwcm92aWRlLlxuICAgICAqIFRoZSBzb3VyY2UgY2FuIGJlIC0gZnJhbWUgaWQsIGltYWdlIHVybCwgdmlkZW8gdXJsLCBjYW52YXMgZWxlbWVudCwgdmlkZW8gZWxlbWVudCwgYmFzZSB0ZXh0dXJlXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfEhUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR8SFRNTFZpZGVvRWxlbWVudHxQSVhJLkJhc2VUZXh0dXJlfSBzb3VyY2VcbiAgICAgKiAgICAgICAgU291cmNlIHRvIGNyZWF0ZSB0ZXh0dXJlIGZyb21cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIFNlZSB7QGxpbmsgUElYSS5CYXNlVGV4dHVyZX0ncyBjb25zdHJ1Y3RvciBmb3Igb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLlRleHR1cmV9IFRoZSBuZXdseSBjcmVhdGVkIHRleHR1cmVcbiAgICAgKi9cbiAgICBUZXh0dXJlLmZyb20gPSBmdW5jdGlvbiBmcm9tIChzb3VyY2UsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAgICAgICB2YXIgY2FjaGVJZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKVxuICAgICAgICB7XG4gICAgICAgICAgICBjYWNoZUlkID0gc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UuX3BpeGlJZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UuX3BpeGlJZCA9IFwicGl4aWlkX1wiICsgKHVpZCgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FjaGVJZCA9IHNvdXJjZS5fcGl4aUlkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRleHR1cmUgPSBUZXh0dXJlQ2FjaGVbY2FjaGVJZF07XG5cbiAgICAgICAgaWYgKCF0ZXh0dXJlKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMucmVzb2x1dGlvbilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnJlc29sdXRpb24gPSBnZXRSZXNvbHV0aW9uT2ZVcmwoc291cmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKG5ldyBCYXNlVGV4dHVyZShzb3VyY2UsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgIHRleHR1cmUuYmFzZVRleHR1cmUuY2FjaGVJZCA9IGNhY2hlSWQ7XG5cbiAgICAgICAgICAgIEJhc2VUZXh0dXJlLmFkZFRvQ2FjaGUodGV4dHVyZS5iYXNlVGV4dHVyZSwgY2FjaGVJZCk7XG4gICAgICAgICAgICBUZXh0dXJlLmFkZFRvQ2FjaGUodGV4dHVyZSwgY2FjaGVJZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZXRzIGFzc3VtZSBpdHMgYSBiYXNlIHRleHR1cmUhXG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgVGV4dHVyZSB3aXRoIGEgQnVmZmVyUmVzb3VyY2UgZnJvbSBhIEZsb2F0MzJBcnJheS5cbiAgICAgKiBSR0JBIHZhbHVlcyBhcmUgZmxvYXRzIGZyb20gMCB0byAxLlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0Zsb2F0MzJBcnJheXxVaW50OEFycmF5fSBidWZmZXIgVGhlIG9wdGlvbmFsIGFycmF5IHRvIHVzZSwgaWYgbm8gZGF0YVxuICAgICAqICAgICAgICBpcyBwcm92aWRlZCwgYSBuZXcgRmxvYXQzMkFycmF5IGlzIGNyZWF0ZWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gV2lkdGggb2YgdGhlIHJlc291cmNlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIEhlaWdodCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIFNlZSB7QGxpbmsgUElYSS5CYXNlVGV4dHVyZX0ncyBjb25zdHJ1Y3RvciBmb3Igb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLlRleHR1cmV9IFRoZSByZXN1bHRpbmcgbmV3IEJhc2VUZXh0dXJlXG4gICAgICovXG4gICAgVGV4dHVyZS5mcm9tQnVmZmVyID0gZnVuY3Rpb24gZnJvbUJ1ZmZlciAoYnVmZmVyLCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0dXJlKEJhc2VUZXh0dXJlLmZyb21CdWZmZXIoYnVmZmVyLCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHRleHR1cmUgZnJvbSBhIHNvdXJjZSBhbmQgYWRkIHRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0hUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR9IHNvdXJjZSAtIFRoZSBpbnB1dCBzb3VyY2UuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGltYWdlVXJsIC0gRmlsZSBuYW1lIG9mIHRleHR1cmUsIGZvciBjYWNoZSBhbmQgcmVzb2x2aW5nIHJlc29sdXRpb24uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lXSAtIEh1bWFuIHJlYWRhYmxlIG5hbWUgZm9yIHRoZSB0ZXh0dXJlIGNhY2hlLiBJZiBubyBuYW1lIGlzXG4gICAgICogICAgICAgIHNwZWNpZmllZCwgb25seSBgaW1hZ2VVcmxgIHdpbGwgYmUgdXNlZCBhcyB0aGUgY2FjaGUgSUQuXG4gICAgICogQHJldHVybiB7UElYSS5UZXh0dXJlfSBPdXRwdXQgdGV4dHVyZVxuICAgICAqL1xuICAgIFRleHR1cmUuZnJvbUxvYWRlciA9IGZ1bmN0aW9uIGZyb21Mb2FkZXIgKHNvdXJjZSwgaW1hZ2VVcmwsIG5hbWUpXG4gICAge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBuZXcgSW1hZ2VSZXNvdXJjZShzb3VyY2UpO1xuXG4gICAgICAgIHJlc291cmNlLnVybCA9IGltYWdlVXJsO1xuXG4gICAgICAgIHZhciBiYXNlVGV4dHVyZSA9IG5ldyBCYXNlVGV4dHVyZShyZXNvdXJjZSwge1xuICAgICAgICAgICAgc2NhbGVNb2RlOiBzZXR0aW5ncy5TQ0FMRV9NT0RFLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogZ2V0UmVzb2x1dGlvbk9mVXJsKGltYWdlVXJsKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHRleHR1cmUgPSBuZXcgVGV4dHVyZShiYXNlVGV4dHVyZSk7XG5cbiAgICAgICAgLy8gTm8gbmFtZSwgdXNlIGltYWdlVXJsIGluc3RlYWRcbiAgICAgICAgaWYgKCFuYW1lKVxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lID0gaW1hZ2VVcmw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZXRzIGFsc28gYWRkIHRoZSBmcmFtZSB0byBwaXhpJ3MgZ2xvYmFsIGNhY2hlIGZvciAnZnJvbUxvYWRlcicgZnVuY3Rpb25cbiAgICAgICAgQmFzZVRleHR1cmUuYWRkVG9DYWNoZSh0ZXh0dXJlLmJhc2VUZXh0dXJlLCBuYW1lKTtcbiAgICAgICAgVGV4dHVyZS5hZGRUb0NhY2hlKHRleHR1cmUsIG5hbWUpO1xuXG4gICAgICAgIC8vIGFsc28gYWRkIHJlZmVyZW5jZXMgYnkgdXJsIGlmIHRoZXkgYXJlIGRpZmZlcmVudC5cbiAgICAgICAgaWYgKG5hbWUgIT09IGltYWdlVXJsKVxuICAgICAgICB7XG4gICAgICAgICAgICBCYXNlVGV4dHVyZS5hZGRUb0NhY2hlKHRleHR1cmUuYmFzZVRleHR1cmUsIGltYWdlVXJsKTtcbiAgICAgICAgICAgIFRleHR1cmUuYWRkVG9DYWNoZSh0ZXh0dXJlLCBpbWFnZVVybCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIFRleHR1cmUgdG8gdGhlIGdsb2JhbCBUZXh0dXJlQ2FjaGUuIFRoaXMgY2FjaGUgaXMgc2hhcmVkIGFjcm9zcyB0aGUgd2hvbGUgUElYSSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtQSVhJLlRleHR1cmV9IHRleHR1cmUgLSBUaGUgVGV4dHVyZSB0byBhZGQgdG8gdGhlIGNhY2hlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBpZCB0aGF0IHRoZSBUZXh0dXJlIHdpbGwgYmUgc3RvcmVkIGFnYWluc3QuXG4gICAgICovXG4gICAgVGV4dHVyZS5hZGRUb0NhY2hlID0gZnVuY3Rpb24gYWRkVG9DYWNoZSAodGV4dHVyZSwgaWQpXG4gICAge1xuICAgICAgICBpZiAoaWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0ZXh0dXJlLnRleHR1cmVDYWNoZUlkcy5pbmRleE9mKGlkKSA9PT0gLTEpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS50ZXh0dXJlQ2FjaGVJZHMucHVzaChpZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChUZXh0dXJlQ2FjaGVbaWRdKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKChcIlRleHR1cmUgYWRkZWQgdG8gdGhlIGNhY2hlIHdpdGggYW4gaWQgW1wiICsgaWQgKyBcIl0gdGhhdCBhbHJlYWR5IGhhZCBhbiBlbnRyeVwiKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFRleHR1cmVDYWNoZVtpZF0gPSB0ZXh0dXJlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIFRleHR1cmUgZnJvbSB0aGUgZ2xvYmFsIFRleHR1cmVDYWNoZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xQSVhJLlRleHR1cmV9IHRleHR1cmUgLSBpZCBvZiBhIFRleHR1cmUgdG8gYmUgcmVtb3ZlZCwgb3IgYSBUZXh0dXJlIGluc3RhbmNlIGl0c2VsZlxuICAgICAqIEByZXR1cm4ge1BJWEkuVGV4dHVyZXxudWxsfSBUaGUgVGV4dHVyZSB0aGF0IHdhcyByZW1vdmVkXG4gICAgICovXG4gICAgVGV4dHVyZS5yZW1vdmVGcm9tQ2FjaGUgPSBmdW5jdGlvbiByZW1vdmVGcm9tQ2FjaGUgKHRleHR1cmUpXG4gICAge1xuICAgICAgICBpZiAodHlwZW9mIHRleHR1cmUgPT09ICdzdHJpbmcnKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgdGV4dHVyZUZyb21DYWNoZSA9IFRleHR1cmVDYWNoZVt0ZXh0dXJlXTtcblxuICAgICAgICAgICAgaWYgKHRleHR1cmVGcm9tQ2FjaGUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGV4dHVyZUZyb21DYWNoZS50ZXh0dXJlQ2FjaGVJZHMuaW5kZXhPZih0ZXh0dXJlKTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZUZyb21DYWNoZS50ZXh0dXJlQ2FjaGVJZHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWxldGUgVGV4dHVyZUNhY2hlW3RleHR1cmVdO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVGcm9tQ2FjaGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGV4dHVyZSAmJiB0ZXh0dXJlLnRleHR1cmVDYWNoZUlkcylcbiAgICAgICAge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0dXJlLnRleHR1cmVDYWNoZUlkcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRleHR1cmUgbWF0Y2hlcyB0aGUgb25lIGJlaW5nIHBhc3NlZCBpbiBiZWZvcmUgZGVsZXRpbmcgaXQgZnJvbSB0aGUgY2FjaGUuXG4gICAgICAgICAgICAgICAgaWYgKFRleHR1cmVDYWNoZVt0ZXh0dXJlLnRleHR1cmVDYWNoZUlkc1tpXV0gPT09IHRleHR1cmUpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgVGV4dHVyZUNhY2hlW3RleHR1cmUudGV4dHVyZUNhY2hlSWRzW2ldXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRleHR1cmUudGV4dHVyZUNhY2hlSWRzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgcmVzb2x1dGlvbiBvZiBiYXNlVGV4dHVyZVxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5yZXNvbHV0aW9uLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlVGV4dHVyZS5yZXNvbHV0aW9uO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnJhbWUgc3BlY2lmaWVzIHRoZSByZWdpb24gb2YgdGhlIGJhc2UgdGV4dHVyZSB0aGF0IHRoaXMgdGV4dHVyZSB1c2VzLlxuICAgICAqIFBsZWFzZSBjYWxsIGB1cGRhdGVVdnMoKWAgYWZ0ZXIgeW91IGNoYW5nZSBjb29yZGluYXRlcyBvZiBgZnJhbWVgIG1hbnVhbGx5LlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5SZWN0YW5nbGV9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmZyYW1lLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fZnJhbWU7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5mcmFtZS5zZXQgPSBmdW5jdGlvbiAoZnJhbWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgdGhpcy5fZnJhbWUgPSBmcmFtZTtcblxuICAgICAgICB0aGlzLm5vRnJhbWUgPSBmYWxzZTtcblxuICAgICAgICB2YXIgeCA9IGZyYW1lLng7XG4gICAgICAgIHZhciB5ID0gZnJhbWUueTtcbiAgICAgICAgdmFyIHdpZHRoID0gZnJhbWUud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBmcmFtZS5oZWlnaHQ7XG4gICAgICAgIHZhciB4Tm90Rml0ID0geCArIHdpZHRoID4gdGhpcy5iYXNlVGV4dHVyZS53aWR0aDtcbiAgICAgICAgdmFyIHlOb3RGaXQgPSB5ICsgaGVpZ2h0ID4gdGhpcy5iYXNlVGV4dHVyZS5oZWlnaHQ7XG5cbiAgICAgICAgaWYgKHhOb3RGaXQgfHwgeU5vdEZpdClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHJlbGF0aW9uc2hpcCA9IHhOb3RGaXQgJiYgeU5vdEZpdCA/ICdhbmQnIDogJ29yJztcbiAgICAgICAgICAgIHZhciBlcnJvclggPSBcIlg6IFwiICsgeCArIFwiICsgXCIgKyB3aWR0aCArIFwiID0gXCIgKyAoeCArIHdpZHRoKSArIFwiID4gXCIgKyAodGhpcy5iYXNlVGV4dHVyZS53aWR0aCk7XG4gICAgICAgICAgICB2YXIgZXJyb3JZID0gXCJZOiBcIiArIHkgKyBcIiArIFwiICsgaGVpZ2h0ICsgXCIgPSBcIiArICh5ICsgaGVpZ2h0KSArIFwiID4gXCIgKyAodGhpcy5iYXNlVGV4dHVyZS5oZWlnaHQpO1xuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RleHR1cmUgRXJyb3I6IGZyYW1lIGRvZXMgbm90IGZpdCBpbnNpZGUgdGhlIGJhc2UgVGV4dHVyZSBkaW1lbnNpb25zOiAnXG4gICAgICAgICAgICAgICAgKyBlcnJvclggKyBcIiBcIiArIHJlbGF0aW9uc2hpcCArIFwiIFwiICsgZXJyb3JZKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmFsaWQgPSB3aWR0aCAmJiBoZWlnaHQgJiYgdGhpcy5iYXNlVGV4dHVyZS52YWxpZDtcblxuICAgICAgICBpZiAoIXRoaXMudHJpbSAmJiAhdGhpcy5yb3RhdGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMub3JpZyA9IGZyYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudmFsaWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVXZzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHRleHR1cmUgaXMgcm90YXRlZCBpbnNpZGUgdGhlIGF0bGFzXG4gICAgICogc2V0IHRvIDIgdG8gY29tcGVuc2F0ZSBmb3IgdGV4dHVyZSBwYWNrZXIgcm90YXRpb25cbiAgICAgKiBzZXQgdG8gNiB0byBjb21wZW5zYXRlIGZvciBzcGluZSBwYWNrZXIgcm90YXRpb25cbiAgICAgKiBjYW4gYmUgdXNlZCB0byByb3RhdGUgb3IgbWlycm9yIHNwcml0ZXNcbiAgICAgKiBTZWUge0BsaW5rIFBJWEkuR3JvdXBEOH0gZm9yIGV4cGxhbmF0aW9uXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnJvdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JvdGF0ZTtcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnJvdGF0ZS5zZXQgPSBmdW5jdGlvbiAocm90YXRlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIHRoaXMuX3JvdGF0ZSA9IHJvdGF0ZTtcbiAgICAgICAgaWYgKHRoaXMudmFsaWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVXZzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHdpZHRoIG9mIHRoZSBUZXh0dXJlIGluIHBpeGVscy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMud2lkdGguZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWcud2lkdGg7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBoZWlnaHQgb2YgdGhlIFRleHR1cmUgaW4gcGl4ZWxzLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5oZWlnaHQuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWcuaGVpZ2h0O1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggVGV4dHVyZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gICAgcmV0dXJuIFRleHR1cmU7XG59KEV2ZW50RW1pdHRlcikpO1xuXG5mdW5jdGlvbiBjcmVhdGVXaGl0ZVRleHR1cmUoKVxue1xuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgIGNhbnZhcy53aWR0aCA9IDE2O1xuICAgIGNhbnZhcy5oZWlnaHQgPSAxNjtcblxuICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCAxNiwgMTYpO1xuXG4gICAgcmV0dXJuIG5ldyBUZXh0dXJlKG5ldyBCYXNlVGV4dHVyZShuZXcgQ2FudmFzUmVzb3VyY2UoY2FudmFzKSkpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBbGxIYW5kbGVycyh0ZXgpXG57XG4gICAgdGV4LmRlc3Ryb3kgPSBmdW5jdGlvbiBfZW1wdHlEZXN0cm95KCkgeyAvKiBlbXB0eSAqLyB9O1xuICAgIHRleC5vbiA9IGZ1bmN0aW9uIF9lbXB0eU9uKCkgeyAvKiBlbXB0eSAqLyB9O1xuICAgIHRleC5vbmNlID0gZnVuY3Rpb24gX2VtcHR5T25jZSgpIHsgLyogZW1wdHkgKi8gfTtcbiAgICB0ZXguZW1pdCA9IGZ1bmN0aW9uIF9lbXB0eUVtaXQoKSB7IC8qIGVtcHR5ICovIH07XG59XG5cbi8qKlxuICogQW4gZW1wdHkgdGV4dHVyZSwgdXNlZCBvZnRlbiB0byBub3QgaGF2ZSB0byBjcmVhdGUgbXVsdGlwbGUgZW1wdHkgdGV4dHVyZXMuXG4gKiBDYW4gbm90IGJlIGRlc3Ryb3llZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RhbnRcbiAqIEBtZW1iZXIge1BJWEkuVGV4dHVyZX1cbiAqL1xuVGV4dHVyZS5FTVBUWSA9IG5ldyBUZXh0dXJlKG5ldyBCYXNlVGV4dHVyZSgpKTtcbnJlbW92ZUFsbEhhbmRsZXJzKFRleHR1cmUuRU1QVFkpO1xucmVtb3ZlQWxsSGFuZGxlcnMoVGV4dHVyZS5FTVBUWS5iYXNlVGV4dHVyZSk7XG5cbi8qKlxuICogQSB3aGl0ZSB0ZXh0dXJlIG9mIDE2eDE2IHNpemUsIHVzZWQgZm9yIGdyYXBoaWNzIGFuZCBvdGhlciB0aGluZ3NcbiAqIENhbiBub3QgYmUgZGVzdHJveWVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudFxuICogQG1lbWJlciB7UElYSS5UZXh0dXJlfVxuICovXG5UZXh0dXJlLldISVRFID0gY3JlYXRlV2hpdGVUZXh0dXJlKCk7XG5yZW1vdmVBbGxIYW5kbGVycyhUZXh0dXJlLldISVRFKTtcbnJlbW92ZUFsbEhhbmRsZXJzKFRleHR1cmUuV0hJVEUuYmFzZVRleHR1cmUpO1xuXG4vKipcbiAqIEEgUmVuZGVyVGV4dHVyZSBpcyBhIHNwZWNpYWwgdGV4dHVyZSB0aGF0IGFsbG93cyBhbnkgUGl4aUpTIGRpc3BsYXkgb2JqZWN0IHRvIGJlIHJlbmRlcmVkIHRvIGl0LlxuICpcbiAqIF9fSGludF9fOiBBbGwgRGlzcGxheU9iamVjdHMgKGkuZS4gU3ByaXRlcykgdGhhdCByZW5kZXIgdG8gYSBSZW5kZXJUZXh0dXJlIHNob3VsZCBiZSBwcmVsb2FkZWRcbiAqIG90aGVyd2lzZSBibGFjayByZWN0YW5nbGVzIHdpbGwgYmUgZHJhd24gaW5zdGVhZC5cbiAqXG4gKiBfX0hpbnQtMl9fOiBUaGUgYWN0dWFsIG1lbW9yeSBhbGxvY2F0aW9uIHdpbGwgaGFwcGVuIG9uIGZpcnN0IHJlbmRlci5cbiAqIFlvdSBzaG91bGRuJ3QgY3JlYXRlIHJlbmRlclRleHR1cmVzIGVhY2ggZnJhbWUganVzdCB0byBkZWxldGUgdGhlbSBhZnRlciwgdHJ5IHRvIHJldXNlIHRoZW0uXG4gKlxuICogQSBSZW5kZXJUZXh0dXJlIHRha2VzIGEgc25hcHNob3Qgb2YgYW55IERpc3BsYXkgT2JqZWN0IGdpdmVuIHRvIGl0cyByZW5kZXIgbWV0aG9kLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogbGV0IHJlbmRlcmVyID0gUElYSS5hdXRvRGV0ZWN0UmVuZGVyZXIoKTtcbiAqIGxldCByZW5kZXJUZXh0dXJlID0gUElYSS5SZW5kZXJUZXh0dXJlLmNyZWF0ZSg4MDAsIDYwMCk7XG4gKiBsZXQgc3ByaXRlID0gUElYSS5TcHJpdGUuZnJvbShcInNwaW5PYmpfMDEucG5nXCIpO1xuICpcbiAqIHNwcml0ZS5wb3NpdGlvbi54ID0gODAwLzI7XG4gKiBzcHJpdGUucG9zaXRpb24ueSA9IDYwMC8yO1xuICogc3ByaXRlLmFuY2hvci54ID0gMC41O1xuICogc3ByaXRlLmFuY2hvci55ID0gMC41O1xuICpcbiAqIHJlbmRlcmVyLnJlbmRlcihzcHJpdGUsIHJlbmRlclRleHR1cmUpO1xuICogYGBgXG4gKlxuICogVGhlIFNwcml0ZSBpbiB0aGlzIGNhc2Ugd2lsbCBiZSByZW5kZXJlZCB1c2luZyBpdHMgbG9jYWwgdHJhbnNmb3JtLiBUbyByZW5kZXIgdGhpcyBzcHJpdGUgYXQgMCwwXG4gKiB5b3UgY2FuIGNsZWFyIHRoZSB0cmFuc2Zvcm1cbiAqXG4gKiBgYGBqc1xuICpcbiAqIHNwcml0ZS5zZXRUcmFuc2Zvcm0oKVxuICpcbiAqIGxldCByZW5kZXJUZXh0dXJlID0gbmV3IFBJWEkuUmVuZGVyVGV4dHVyZS5jcmVhdGUoMTAwLCAxMDApO1xuICpcbiAqIHJlbmRlcmVyLnJlbmRlcihzcHJpdGUsIHJlbmRlclRleHR1cmUpOyAgLy8gUmVuZGVycyB0byBjZW50ZXIgb2YgUmVuZGVyVGV4dHVyZVxuICogYGBgXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlRleHR1cmVcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBSZW5kZXJUZXh0dXJlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoVGV4dHVyZSkge1xuICAgIGZ1bmN0aW9uIFJlbmRlclRleHR1cmUoYmFzZVJlbmRlclRleHR1cmUsIGZyYW1lKVxuICAgIHtcbiAgICAgICAgLy8gc3VwcG9ydCBmb3IgbGVnYWN5Li5cbiAgICAgICAgdmFyIF9sZWdhY3lSZW5kZXJlciA9IG51bGw7XG5cbiAgICAgICAgaWYgKCEoYmFzZVJlbmRlclRleHR1cmUgaW5zdGFuY2VvZiBCYXNlUmVuZGVyVGV4dHVyZSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIHByZWZlci1yZXN0LXBhcmFtcywgbm8tY29uc29sZSAqL1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgICAgIHZhciBzY2FsZU1vZGUgPSBhcmd1bWVudHNbM107XG4gICAgICAgICAgICB2YXIgcmVzb2x1dGlvbiA9IGFyZ3VtZW50c1s0XTtcblxuICAgICAgICAgICAgLy8gd2UgaGF2ZSBhbiBvbGQgcmVuZGVyIHRleHR1cmUuLlxuICAgICAgICAgICAgY29uc29sZS53YXJuKChcIlBsZWFzZSB1c2UgUmVuZGVyVGV4dHVyZS5jcmVhdGUoXCIgKyB3aWR0aCArIFwiLCBcIiArIGhlaWdodCArIFwiKSBpbnN0ZWFkIG9mIHRoZSBjdG9yIGRpcmVjdGx5LlwiKSk7XG4gICAgICAgICAgICBfbGVnYWN5UmVuZGVyZXIgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci1yZXN0LXBhcmFtcywgbm8tY29uc29sZSAqL1xuXG4gICAgICAgICAgICBmcmFtZSA9IG51bGw7XG4gICAgICAgICAgICBiYXNlUmVuZGVyVGV4dHVyZSA9IG5ldyBCYXNlUmVuZGVyVGV4dHVyZSh7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHNjYWxlTW9kZTogc2NhbGVNb2RlLFxuICAgICAgICAgICAgICAgIHJlc29sdXRpb246IHJlc29sdXRpb24sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYmFzZSB0ZXh0dXJlIG9iamVjdCB0aGF0IHRoaXMgdGV4dHVyZSB1c2VzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuQmFzZVRleHR1cmV9XG4gICAgICAgICAqL1xuICAgICAgICBUZXh0dXJlLmNhbGwodGhpcywgYmFzZVJlbmRlclRleHR1cmUsIGZyYW1lKTtcblxuICAgICAgICB0aGlzLmxlZ2FjeVJlbmRlcmVyID0gX2xlZ2FjeVJlbmRlcmVyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHdpbGwgbGV0IHRoZSByZW5kZXJlciBrbm93IGlmIHRoZSB0ZXh0dXJlIGlzIHZhbGlkLiBJZiBpdCdzIG5vdCB0aGVuIGl0IGNhbm5vdCBiZSByZW5kZXJlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmFsaWQgPSB0cnVlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZXMgYHNvdXJjZUZyYW1lYCB3aGVuIHRoaXMgdGV4dHVyZSBpcyBpbnNpZGUgY3VycmVudCBmaWx0ZXIgc3RhY2suXG4gICAgICAgICAqIFlvdSBjYW4gcmVhZCBpdCBpbnNpZGUgZmlsdGVycy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUmVjdGFuZ2xlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWx0ZXJGcmFtZSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBrZXkgZm9yIHBvb2xlZCB0ZXh0dXJlIG9mIEZpbHRlclN5c3RlbVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsdGVyUG9vbEtleSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy51cGRhdGVVdnMoKTtcbiAgICB9XG5cbiAgICBpZiAoIFRleHR1cmUgKSBSZW5kZXJUZXh0dXJlLl9fcHJvdG9fXyA9IFRleHR1cmU7XG4gICAgUmVuZGVyVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlICYmIFRleHR1cmUucHJvdG90eXBlICk7XG4gICAgUmVuZGVyVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZW5kZXJUZXh0dXJlO1xuXG4gICAgLyoqXG4gICAgICogUmVzaXplcyB0aGUgUmVuZGVyVGV4dHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCB0byByZXNpemUgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgdG8gcmVzaXplIHRvLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Jlc2l6ZUJhc2VUZXh0dXJlPXRydWVdIC0gU2hvdWxkIHRoZSBiYXNlVGV4dHVyZS53aWR0aCBhbmQgaGVpZ2h0IHZhbHVlcyBiZSByZXNpemVkIGFzIHdlbGw/XG4gICAgICovXG4gICAgUmVuZGVyVGV4dHVyZS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gcmVzaXplICh3aWR0aCwgaGVpZ2h0LCByZXNpemVCYXNlVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIGlmICggcmVzaXplQmFzZVRleHR1cmUgPT09IHZvaWQgMCApIHJlc2l6ZUJhc2VUZXh0dXJlID0gdHJ1ZTtcblxuICAgICAgICB3aWR0aCA9IE1hdGguY2VpbCh3aWR0aCk7XG4gICAgICAgIGhlaWdodCA9IE1hdGguY2VpbChoZWlnaHQpO1xuXG4gICAgICAgIC8vIFRPRE8gLSBjb3VsZCBiZSBub3QgcmVxdWlyZWQuLlxuICAgICAgICB0aGlzLnZhbGlkID0gKHdpZHRoID4gMCAmJiBoZWlnaHQgPiAwKTtcblxuICAgICAgICB0aGlzLl9mcmFtZS53aWR0aCA9IHRoaXMub3JpZy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLl9mcmFtZS5oZWlnaHQgPSB0aGlzLm9yaWcuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgIGlmIChyZXNpemVCYXNlVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5iYXNlVGV4dHVyZS5yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVwZGF0ZVV2cygpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSByZXNvbHV0aW9uIG9mIGJhc2VUZXh0dXJlLCBidXQgZG9lcyBub3QgY2hhbmdlIGZyYW1lYnVmZmVyIHNpemUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmVzb2x1dGlvbiAtIFRoZSBuZXcgcmVzb2x1dGlvbiB0byBhcHBseSB0byBSZW5kZXJUZXh0dXJlXG4gICAgICovXG4gICAgUmVuZGVyVGV4dHVyZS5wcm90b3R5cGUuc2V0UmVzb2x1dGlvbiA9IGZ1bmN0aW9uIHNldFJlc29sdXRpb24gKHJlc29sdXRpb24pXG4gICAge1xuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGJhc2VUZXh0dXJlID0gcmVmLmJhc2VUZXh0dXJlO1xuXG4gICAgICAgIGlmIChiYXNlVGV4dHVyZS5yZXNvbHV0aW9uID09PSByZXNvbHV0aW9uKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBiYXNlVGV4dHVyZS5zZXRSZXNvbHV0aW9uKHJlc29sdXRpb24pO1xuICAgICAgICB0aGlzLnJlc2l6ZShiYXNlVGV4dHVyZS53aWR0aCwgYmFzZVRleHR1cmUuaGVpZ2h0LCBmYWxzZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgc2hvcnQgaGFuZCB3YXkgb2YgY3JlYXRpbmcgYSByZW5kZXIgdGV4dHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndpZHRoPTEwMF0gLSBUaGUgd2lkdGggb2YgdGhlIHJlbmRlciB0ZXh0dXJlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmhlaWdodD0xMDBdIC0gVGhlIGhlaWdodCBvZiB0aGUgcmVuZGVyIHRleHR1cmVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc2NhbGVNb2RlPVBJWEkuc2V0dGluZ3MuU0NBTEVfTU9ERV0gLSBTZWUge0BsaW5rIFBJWEkuU0NBTEVfTU9ERVN9IGZvciBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucmVzb2x1dGlvbj0xXSAtIFRoZSByZXNvbHV0aW9uIC8gZGV2aWNlIHBpeGVsIHJhdGlvIG9mIHRoZSB0ZXh0dXJlIGJlaW5nIGdlbmVyYXRlZFxuICAgICAqIEByZXR1cm4ge1BJWEkuUmVuZGVyVGV4dHVyZX0gVGhlIG5ldyByZW5kZXIgdGV4dHVyZVxuICAgICAqL1xuICAgIFJlbmRlclRleHR1cmUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlIChvcHRpb25zKVxuICAgIHtcbiAgICAgICAgLy8gZmFsbGJhY2ssIG9sZC1zdHlsZTogY3JlYXRlKHdpZHRoLCBoZWlnaHQsIHNjYWxlTW9kZSwgcmVzb2x1dGlvbilcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJylcbiAgICAgICAge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBvcHRpb25zLFxuICAgICAgICAgICAgICAgIGhlaWdodDogYXJndW1lbnRzWzFdLFxuICAgICAgICAgICAgICAgIHNjYWxlTW9kZTogYXJndW1lbnRzWzJdLFxuICAgICAgICAgICAgICAgIHJlc29sdXRpb246IGFyZ3VtZW50c1szXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci1yZXN0LXBhcmFtcyAqL1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBSZW5kZXJUZXh0dXJlKG5ldyBCYXNlUmVuZGVyVGV4dHVyZShvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBSZW5kZXJUZXh0dXJlO1xufShUZXh0dXJlKSk7XG5cbi8qKlxuICogRXhwZXJpbWVudGFsIVxuICpcbiAqIFRleHR1cmUgcG9vbCwgdXNlZCBieSBGaWx0ZXJTeXN0ZW0gYW5kIHBsdWdpbnNcbiAqIFN0b3JlcyBjb2xsZWN0aW9uIG9mIHRlbXBvcmFyeSBwb3cyIG9yIHNjcmVlbi1zaXplZCByZW5kZXJUZXh0dXJlc1xuICpcbiAqIElmIHlvdSB1c2UgY3VzdG9tIFJlbmRlclRleHR1cmVQb29sIGZvciB5b3VyIGZpbHRlcnMsIHlvdSBjYW4gdXNlIG1ldGhvZHNcbiAqIGBnZXRGaWx0ZXJUZXh0dXJlYCBhbmQgYHJldHVybkZpbHRlclRleHR1cmVgIHNhbWUgYXMgaW5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBSZW5kZXJUZXh0dXJlUG9vbCA9IGZ1bmN0aW9uIFJlbmRlclRleHR1cmVQb29sKHRleHR1cmVPcHRpb25zKVxue1xuICAgIHRoaXMudGV4dHVyZVBvb2wgPSB7fTtcbiAgICB0aGlzLnRleHR1cmVPcHRpb25zID0gdGV4dHVyZU9wdGlvbnMgfHwge307XG4gICAgLyoqXG4gICAgICogQWxsb3cgcmVuZGVyVGV4dHVyZXMgb2YgdGhlIHNhbWUgc2l6ZSBhcyBzY3JlZW4sIG5vdCBqdXN0IHBvdzJcbiAgICAgKlxuICAgICAqIEF1dG9tYXRpY2FsbHkgc2V0cyB0byB0cnVlIGFmdGVyIGBzZXRTY3JlZW5TaXplYFxuICAgICAqXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHRoaXMuZW5hYmxlRnVsbFNjcmVlbiA9IGZhbHNlO1xuXG4gICAgdGhpcy5fcGl4ZWxzV2lkdGggPSAwO1xuICAgIHRoaXMuX3BpeGVsc0hlaWdodCA9IDA7XG59O1xuXG4vKipcbiAqIGNyZWF0ZXMgb2YgdGV4dHVyZSB3aXRoIHBhcmFtcyB0aGF0IHdlcmUgc3BlY2lmaWVkIGluIHBvb2wgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gcmVhbFdpZHRoIHdpZHRoIG9mIHRleHR1cmUgaW4gcGl4ZWxzXG4gKiBAcGFyYW0ge251bWJlcn0gcmVhbEhlaWdodCBoZWlnaHQgb2YgdGV4dHVyZSBpbiBwaXhlbHNcbiAqIEByZXR1cm5zIHtSZW5kZXJUZXh0dXJlfVxuICovXG5SZW5kZXJUZXh0dXJlUG9vbC5wcm90b3R5cGUuY3JlYXRlVGV4dHVyZSA9IGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUgKHJlYWxXaWR0aCwgcmVhbEhlaWdodClcbntcbiAgICB2YXIgYmFzZVJlbmRlclRleHR1cmUgPSBuZXcgQmFzZVJlbmRlclRleHR1cmUoT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIHdpZHRoOiByZWFsV2lkdGgsXG4gICAgICAgIGhlaWdodDogcmVhbEhlaWdodCxcbiAgICAgICAgcmVzb2x1dGlvbjogMSxcbiAgICB9LCB0aGlzLnRleHR1cmVPcHRpb25zKSk7XG5cbiAgICByZXR1cm4gbmV3IFJlbmRlclRleHR1cmUoYmFzZVJlbmRlclRleHR1cmUpO1xufTtcblxuLyoqXG4gKiBHZXRzIGEgUG93ZXItb2YtVHdvIHJlbmRlciB0ZXh0dXJlIG9yIGZ1bGxTY3JlZW4gdGV4dHVyZVxuICpcbiAqIEBwcm90ZWN0ZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5XaWR0aCAtIFRoZSBtaW5pbXVtIHdpZHRoIG9mIHRoZSByZW5kZXIgdGV4dHVyZSBpbiByZWFsIHBpeGVscy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5IZWlnaHQgLSBUaGUgbWluaW11bSBoZWlnaHQgb2YgdGhlIHJlbmRlciB0ZXh0dXJlIGluIHJlYWwgcGl4ZWxzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtyZXNvbHV0aW9uPTFdIC0gVGhlIHJlc29sdXRpb24gb2YgdGhlIHJlbmRlciB0ZXh0dXJlLlxuICogQHJldHVybiB7UElYSS5SZW5kZXJUZXh0dXJlfSBUaGUgbmV3IHJlbmRlciB0ZXh0dXJlLlxuICovXG5SZW5kZXJUZXh0dXJlUG9vbC5wcm90b3R5cGUuZ2V0T3B0aW1hbFRleHR1cmUgPSBmdW5jdGlvbiBnZXRPcHRpbWFsVGV4dHVyZSAobWluV2lkdGgsIG1pbkhlaWdodCwgcmVzb2x1dGlvbilcbntcbiAgICAgICAgaWYgKCByZXNvbHV0aW9uID09PSB2b2lkIDAgKSByZXNvbHV0aW9uID0gMTtcblxuICAgIHZhciBrZXkgPSBSZW5kZXJUZXh0dXJlUG9vbC5TQ1JFRU5fS0VZO1xuXG4gICAgbWluV2lkdGggKj0gcmVzb2x1dGlvbjtcbiAgICBtaW5IZWlnaHQgKj0gcmVzb2x1dGlvbjtcblxuICAgIGlmICghdGhpcy5lbmFibGVGdWxsU2NyZWVuIHx8IG1pbldpZHRoICE9PSB0aGlzLl9waXhlbHNXaWR0aCB8fCBtaW5IZWlnaHQgIT09IHRoaXMuX3BpeGVsc0hlaWdodClcbiAgICB7XG4gICAgICAgIG1pbldpZHRoID0gbmV4dFBvdzIobWluV2lkdGgpO1xuICAgICAgICBtaW5IZWlnaHQgPSBuZXh0UG93MihtaW5IZWlnaHQpO1xuICAgICAgICBrZXkgPSAoKG1pbldpZHRoICYgMHhGRkZGKSA8PCAxNikgfCAobWluSGVpZ2h0ICYgMHhGRkZGKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMudGV4dHVyZVBvb2xba2V5XSlcbiAgICB7XG4gICAgICAgIHRoaXMudGV4dHVyZVBvb2xba2V5XSA9IFtdO1xuICAgIH1cblxuICAgIHZhciByZW5kZXJUZXh0dXJlID0gdGhpcy50ZXh0dXJlUG9vbFtrZXldLnBvcCgpO1xuXG4gICAgaWYgKCFyZW5kZXJUZXh0dXJlKVxuICAgIHtcbiAgICAgICAgcmVuZGVyVGV4dHVyZSA9IHRoaXMuY3JlYXRlVGV4dHVyZShtaW5XaWR0aCwgbWluSGVpZ2h0KTtcbiAgICB9XG5cbiAgICByZW5kZXJUZXh0dXJlLmZpbHRlclBvb2xLZXkgPSBrZXk7XG4gICAgcmVuZGVyVGV4dHVyZS5zZXRSZXNvbHV0aW9uKHJlc29sdXRpb24pO1xuXG4gICAgcmV0dXJuIHJlbmRlclRleHR1cmU7XG59O1xuXG4vKipcbiAqIEdldHMgZXh0cmEgdGV4dHVyZSBvZiB0aGUgc2FtZSBzaXplIGFzIGlucHV0IHJlbmRlclRleHR1cmVcbiAqXG4gKiBgZ2V0RmlsdGVyVGV4dHVyZShpbnB1dCwgMC41KWAgb3IgYGdldEZpbHRlclRleHR1cmUoMC41LCBpbnB1dClgXG4gKlxuICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IGlucHV0IHJlbmRlclRleHR1cmUgZnJvbSB3aGljaCBzaXplIGFuZCByZXNvbHV0aW9uIHdpbGwgYmUgY29waWVkXG4gKiBAcGFyYW0ge251bWJlcn0gW3Jlc29sdXRpb25dIG92ZXJyaWRlIHJlc29sdXRpb24gb2YgdGhlIHJlbmRlclRleHR1cmVcbiAqICBJdCBvdmVycmlkZXMsIGl0IGRvZXMgbm90IG11bHRpcGx5XG4gKiBAcmV0dXJucyB7UElYSS5SZW5kZXJUZXh0dXJlfVxuICovXG5SZW5kZXJUZXh0dXJlUG9vbC5wcm90b3R5cGUuZ2V0RmlsdGVyVGV4dHVyZSA9IGZ1bmN0aW9uIGdldEZpbHRlclRleHR1cmUgKGlucHV0LCByZXNvbHV0aW9uKVxue1xuICAgIHZhciBmaWx0ZXJUZXh0dXJlID0gdGhpcy5nZXRPcHRpbWFsVGV4dHVyZShpbnB1dC53aWR0aCwgaW5wdXQuaGVpZ2h0LCByZXNvbHV0aW9uIHx8IGlucHV0LnJlc29sdXRpb24pO1xuXG4gICAgZmlsdGVyVGV4dHVyZS5maWx0ZXJGcmFtZSA9IGlucHV0LmZpbHRlckZyYW1lO1xuXG4gICAgcmV0dXJuIGZpbHRlclRleHR1cmU7XG59O1xuXG4vKipcbiAqIFBsYWNlIGEgcmVuZGVyIHRleHR1cmUgYmFjayBpbnRvIHRoZSBwb29sLlxuICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IHJlbmRlclRleHR1cmUgLSBUaGUgcmVuZGVyVGV4dHVyZSB0byBmcmVlXG4gKi9cblJlbmRlclRleHR1cmVQb29sLnByb3RvdHlwZS5yZXR1cm5UZXh0dXJlID0gZnVuY3Rpb24gcmV0dXJuVGV4dHVyZSAocmVuZGVyVGV4dHVyZSlcbntcbiAgICB2YXIga2V5ID0gcmVuZGVyVGV4dHVyZS5maWx0ZXJQb29sS2V5O1xuXG4gICAgcmVuZGVyVGV4dHVyZS5maWx0ZXJGcmFtZSA9IG51bGw7XG4gICAgdGhpcy50ZXh0dXJlUG9vbFtrZXldLnB1c2gocmVuZGVyVGV4dHVyZSk7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciByZXR1cm5UZXh0dXJlLCB0byBiZSBjb21wbGlhbnQgd2l0aCBGaWx0ZXJTeXN0ZW0gaW50ZXJmYWNlXG4gKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gcmVuZGVyVGV4dHVyZSAtIFRoZSByZW5kZXJUZXh0dXJlIHRvIGZyZWVcbiAqL1xuUmVuZGVyVGV4dHVyZVBvb2wucHJvdG90eXBlLnJldHVybkZpbHRlclRleHR1cmUgPSBmdW5jdGlvbiByZXR1cm5GaWx0ZXJUZXh0dXJlIChyZW5kZXJUZXh0dXJlKVxue1xuICAgIHRoaXMucmV0dXJuVGV4dHVyZShyZW5kZXJUZXh0dXJlKTtcbn07XG5cbi8qKlxuICogQ2xlYXJzIHRoZSBwb29sXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBbZGVzdHJveVRleHR1cmVzPXRydWVdIGRlc3Ryb3kgYWxsIHN0b3JlZCB0ZXh0dXJlc1xuICovXG5SZW5kZXJUZXh0dXJlUG9vbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoZGVzdHJveVRleHR1cmVzKVxue1xuICAgIGRlc3Ryb3lUZXh0dXJlcyA9IGRlc3Ryb3lUZXh0dXJlcyAhPT0gZmFsc2U7XG4gICAgaWYgKGRlc3Ryb3lUZXh0dXJlcylcbiAgICB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy50ZXh0dXJlUG9vbClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHRleHR1cmVzID0gdGhpcy50ZXh0dXJlUG9vbFtpXTtcblxuICAgICAgICAgICAgaWYgKHRleHR1cmVzKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGV4dHVyZXMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlc1tqXS5kZXN0cm95KHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudGV4dHVyZVBvb2wgPSB7fTtcbn07XG5cbi8qKlxuICogSWYgc2NyZWVuIHNpemUgd2FzIGNoYW5nZWQsIGRyb3BzIGFsbCBzY3JlZW4tc2l6ZWQgdGV4dHVyZXMsXG4gKiBzZXRzIG5ldyBzY3JlZW4gc2l6ZSwgc2V0cyBgZW5hYmxlRnVsbFNjcmVlbmAgdG8gdHJ1ZVxuICpcbiAqIFNpemUgaXMgbWVhc3VyZWQgaW4gcGl4ZWxzLCBgcmVuZGVyZXIudmlld2AgY2FuIGJlIHBhc3NlZCBoZXJlLCBub3QgYHJlbmRlcmVyLnNjcmVlbmBcbiAqXG4gKiBAcGFyYW0ge1BJWEkuSVNpemV9IHNpemUgLSBJbml0aWFsIHNpemUgb2Ygc2NyZWVuXG4gKi9cblJlbmRlclRleHR1cmVQb29sLnByb3RvdHlwZS5zZXRTY3JlZW5TaXplID0gZnVuY3Rpb24gc2V0U2NyZWVuU2l6ZSAoc2l6ZSlcbntcbiAgICBpZiAoc2l6ZS53aWR0aCA9PT0gdGhpcy5fcGl4ZWxzV2lkdGhcbiAgICAgICAgJiYgc2l6ZS5oZWlnaHQgPT09IHRoaXMuX3BpeGVsc0hlaWdodClcbiAgICB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2NyZWVuS2V5ID0gUmVuZGVyVGV4dHVyZVBvb2wuU0NSRUVOX0tFWTtcbiAgICB2YXIgdGV4dHVyZXMgPSB0aGlzLnRleHR1cmVQb29sW3NjcmVlbktleV07XG5cbiAgICB0aGlzLmVuYWJsZUZ1bGxTY3JlZW4gPSBzaXplLndpZHRoID4gMCAmJiBzaXplLmhlaWdodCA+IDA7XG5cbiAgICBpZiAodGV4dHVyZXMpXG4gICAge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRleHR1cmVzLmxlbmd0aDsgaisrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0dXJlc1tqXS5kZXN0cm95KHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMudGV4dHVyZVBvb2xbc2NyZWVuS2V5XSA9IFtdO1xuXG4gICAgdGhpcy5fcGl4ZWxzV2lkdGggPSBzaXplLndpZHRoO1xuICAgIHRoaXMuX3BpeGVsc0hlaWdodCA9IHNpemUuaGVpZ2h0O1xufTtcblxuLyoqXG4gKiBLZXkgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIGZ1bGxzY3JlZW4gcmVuZGVyVGV4dHVyZXMgaW4gYSBwb29sXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0IHtzdHJpbmd9XG4gKi9cblJlbmRlclRleHR1cmVQb29sLlNDUkVFTl9LRVkgPSAnc2NyZWVuJztcblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG4vKipcbiAqIEhvbGRzIHRoZSBpbmZvcm1hdGlvbiBmb3IgYSBzaW5nbGUgYXR0cmlidXRlIHN0cnVjdHVyZSByZXF1aXJlZCB0byByZW5kZXIgZ2VvbWV0cnkuXG4gKlxuICogVGhpcyBkb2VzIG5vdCBjb250YWluIHRoZSBhY3R1YWwgZGF0YSwgYnV0IGluc3RlYWQgaGFzIGEgYnVmZmVyIGlkIHRoYXQgbWFwcyB0byBhIHtAbGluayBQSVhJLkJ1ZmZlcn1cbiAqIFRoaXMgY2FuIGluY2x1ZGUgYW55dGhpbmcgZnJvbSBwb3NpdGlvbnMsIHV2cywgbm9ybWFscywgY29sb3JzIGV0Yy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBBdHRyaWJ1dGUgPSBmdW5jdGlvbiBBdHRyaWJ1dGUoYnVmZmVyLCBzaXplLCBub3JtYWxpemVkLCB0eXBlLCBzdHJpZGUsIHN0YXJ0LCBpbnN0YW5jZSlcbntcbiAgICBpZiAoIG5vcm1hbGl6ZWQgPT09IHZvaWQgMCApIG5vcm1hbGl6ZWQgPSBmYWxzZTtcbiAgICBpZiAoIHR5cGUgPT09IHZvaWQgMCApIHR5cGUgPSA1MTI2O1xuXG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB0aGlzLm5vcm1hbGl6ZWQgPSBub3JtYWxpemVkO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5zdHJpZGUgPSBzdHJpZGU7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbn07XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIEF0dHJpYnV0ZS5cbiAqL1xuQXR0cmlidXRlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhbiBBdHRyaWJ1dGUgYmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkXG4gKlxuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IGJ1ZmZlciAgdGhlIGlkIG9mIHRoZSBidWZmZXIgdGhhdCB0aGlzIGF0dHJpYnV0ZSB3aWxsIGxvb2sgZm9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NpemU9Ml0gdGhlIHNpemUgb2YgdGhlIGF0dHJpYnV0ZS4gSWYgeW91IGhhdmUgMiBmbG9hdHMgcGVyIHZlcnRleCAoZWcgcG9zaXRpb24geCBhbmQgeSkgdGhpcyB3b3VsZCBiZSAyXG4gKiBAcGFyYW0ge051bWJlcn0gW3N0cmlkZT0wXSBIb3cgZmFyIGFwYXJ0IChpbiBmbG9hdHMpIHRoZSBzdGFydCBvZiBlYWNoIHZhbHVlIGlzLiAodXNlZCBmb3IgaW50ZXJsZWF2aW5nIGRhdGEpXG4gKiBAcGFyYW0ge051bWJlcn0gW3N0YXJ0PTBdIEhvdyBmYXIgaW50byB0aGUgYXJyYXkgdG8gc3RhcnQgcmVhZGluZyB2YWx1ZXMgKHVzZWQgZm9yIGludGVybGVhdmluZyBkYXRhKVxuICogQHBhcmFtIHtCb29sZWFufSBbbm9ybWFsaXplZD1mYWxzZV0gc2hvdWxkIHRoZSBkYXRhIGJlIG5vcm1hbGl6ZWQuXG4gKlxuICogQHJldHVybnMge1BJWEkuQXR0cmlidXRlfSBBIG5ldyB7QGxpbmsgUElYSS5BdHRyaWJ1dGV9IGJhc2VkIG9uIHRoZSBpbmZvcm1hdGlvbiBwcm92aWRlZFxuICovXG5BdHRyaWJ1dGUuZnJvbSA9IGZ1bmN0aW9uIGZyb20gKGJ1ZmZlciwgc2l6ZSwgbm9ybWFsaXplZCwgdHlwZSwgc3RyaWRlKVxue1xuICAgIHJldHVybiBuZXcgQXR0cmlidXRlKGJ1ZmZlciwgc2l6ZSwgbm9ybWFsaXplZCwgdHlwZSwgc3RyaWRlKTtcbn07XG5cbnZhciBVSUQgPSAwO1xuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG4vKipcbiAqIEEgd3JhcHBlciBmb3IgZGF0YSBzbyB0aGF0IGl0IGNhbiBiZSB1c2VkIGFuZCB1cGxvYWRlZCBieSBXZWJHTFxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEJ1ZmZlciA9IGZ1bmN0aW9uIEJ1ZmZlcihkYXRhLCBfc3RhdGljLCBpbmRleClcbntcbiAgICBpZiAoIF9zdGF0aWMgPT09IHZvaWQgMCApIF9zdGF0aWMgPSB0cnVlO1xuICAgIGlmICggaW5kZXggPT09IHZvaWQgMCApIGluZGV4ID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGF0YSBpbiB0aGUgYnVmZmVyLCBhcyBhIHR5cGVkIGFycmF5XG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtBcnJheUJ1ZmZlcnwgU2hhcmVkQXJyYXlCdWZmZXJ8QXJyYXlCdWZmZXJWaWV3fVxuICAgICAqL1xuICAgIHRoaXMuZGF0YSA9IGRhdGEgfHwgbmV3IEZsb2F0MzJBcnJheSgxKTtcblxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIHJlbmRlcmVyIElEcyB0byB3ZWJnbCBidWZmZXJcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1lbWJlciB7b2JqZWN0PG51bWJlciwgR0xCdWZmZXI+fVxuICAgICAqL1xuICAgIHRoaXMuX2dsQnVmZmVycyA9IHt9O1xuXG4gICAgdGhpcy5fdXBkYXRlSUQgPSAwO1xuXG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuXG4gICAgdGhpcy5zdGF0aWMgPSBfc3RhdGljO1xuXG4gICAgdGhpcy5pZCA9IFVJRCsrO1xuXG4gICAgdGhpcy5kaXNwb3NlUnVubmVyID0gbmV3IFJ1bm5lcignZGlzcG9zZUJ1ZmZlcicsIDIpO1xufTtcblxuLy8gVE9ETyBjb3VsZCBleHBsb3JlIGZsYWdnaW5nIG9ubHkgYSBwYXJ0aWFsIHVwbG9hZD9cbi8qKlxuICogZmxhZ3MgdGhpcyBidWZmZXIgYXMgcmVxdWlyaW5nIGFuIHVwbG9hZCB0byB0aGUgR1BVXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfFNoYXJlZEFycmF5QnVmZmVyfEFycmF5QnVmZmVyVmlld30gW2RhdGFdIHRoZSBkYXRhIHRvIHVwZGF0ZSBpbiB0aGUgYnVmZmVyLlxuICovXG5CdWZmZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSlcbntcbiAgICB0aGlzLmRhdGEgPSBkYXRhIHx8IHRoaXMuZGF0YTtcbiAgICB0aGlzLl91cGRhdGVJRCsrO1xufTtcblxuLyoqXG4gKiBkaXNwb3NlcyBXZWJHTCByZXNvdXJjZXMgdGhhdCBhcmUgY29ubmVjdGVkIHRvIHRoaXMgZ2VvbWV0cnlcbiAqL1xuQnVmZmVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSAoKVxue1xuICAgIHRoaXMuZGlzcG9zZVJ1bm5lci5ydW4odGhpcywgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgYnVmZmVyXG4gKi9cbkJ1ZmZlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbntcbiAgICB0aGlzLmRpc3Bvc2UoKTtcblxuICAgIHRoaXMuZGF0YSA9IG51bGw7XG59O1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYSBidWZmZXIgYmFzZWQgb24gYW4gYXJyYXkgb3IgVHlwZWRBcnJheVxuICpcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJWaWV3IHwgbnVtYmVyW119IGRhdGEgdGhlIFR5cGVkQXJyYXkgdGhhdCB0aGUgYnVmZmVyIHdpbGwgc3RvcmUuIElmIHRoaXMgaXMgYSByZWd1bGFyIEFycmF5IGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgRmxvYXQzMkFycmF5LlxuICogQHJldHVybiB7UElYSS5CdWZmZXJ9IEEgbmV3IEJ1ZmZlciBiYXNlZCBvbiB0aGUgZGF0YSBwcm92aWRlZC5cbiAqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiBmcm9tIChkYXRhKVxue1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXkpXG4gICAge1xuICAgICAgICBkYXRhID0gbmV3IEZsb2F0MzJBcnJheShkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihkYXRhKTtcbn07XG5cbmZ1bmN0aW9uIGdldEJ1ZmZlclR5cGUoYXJyYXkpXG57XG4gICAgaWYgKGFycmF5LkJZVEVTX1BFUl9FTEVNRU5UID09PSA0KVxuICAgIHtcbiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gJ0Zsb2F0MzJBcnJheSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuICdVaW50MzJBcnJheSc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ0ludDMyQXJyYXknO1xuICAgIH1cbiAgICBlbHNlIGlmIChhcnJheS5CWVRFU19QRVJfRUxFTUVOVCA9PT0gMilcbiAgICB7XG4gICAgICAgIGlmIChhcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5KVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gJ1VpbnQxNkFycmF5JztcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChhcnJheS5CWVRFU19QRVJfRUxFTUVOVCA9PT0gMSlcbiAgICB7XG4gICAgICAgIGlmIChhcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiAnVWludDhBcnJheSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPIG1hcCBvdXQgdGhlIHJlc3Qgb2YgdGhlIGFycmF5IGVsZW1lbnRzIVxuICAgIHJldHVybiBudWxsO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBvYmplY3Qtc2hvcnRoYW5kICovXG52YXIgbWFwID0ge1xuICAgIEZsb2F0MzJBcnJheTogRmxvYXQzMkFycmF5LFxuICAgIFVpbnQzMkFycmF5OiBVaW50MzJBcnJheSxcbiAgICBJbnQzMkFycmF5OiBJbnQzMkFycmF5LFxuICAgIFVpbnQ4QXJyYXk6IFVpbnQ4QXJyYXksXG59O1xuXG5mdW5jdGlvbiBpbnRlcmxlYXZlVHlwZWRBcnJheXMoYXJyYXlzLCBzaXplcylcbntcbiAgICB2YXIgb3V0U2l6ZSA9IDA7XG4gICAgdmFyIHN0cmlkZSA9IDA7XG4gICAgdmFyIHZpZXdzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5cy5sZW5ndGg7IGkrKylcbiAgICB7XG4gICAgICAgIHN0cmlkZSArPSBzaXplc1tpXTtcbiAgICAgICAgb3V0U2l6ZSArPSBhcnJheXNbaV0ubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIob3V0U2l6ZSAqIDQpO1xuXG4gICAgdmFyIG91dCA9IG51bGw7XG4gICAgdmFyIGxpdHRsZU9mZnNldCA9IDA7XG5cbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBhcnJheXMubGVuZ3RoOyBpJDErKylcbiAgICB7XG4gICAgICAgIHZhciBzaXplID0gc2l6ZXNbaSQxXTtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2kkMV07XG5cbiAgICAgICAgdmFyIHR5cGUgPSBnZXRCdWZmZXJUeXBlKGFycmF5KTtcblxuICAgICAgICBpZiAoIXZpZXdzW3R5cGVdKVxuICAgICAgICB7XG4gICAgICAgICAgICB2aWV3c1t0eXBlXSA9IG5ldyBtYXBbdHlwZV0oYnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dCA9IHZpZXdzW3R5cGVdO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYXJyYXkubGVuZ3RoOyBqKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBpbmRleFN0YXJ0ID0gKChqIC8gc2l6ZSB8IDApICogc3RyaWRlKSArIGxpdHRsZU9mZnNldDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGogJSBzaXplO1xuXG4gICAgICAgICAgICBvdXRbaW5kZXhTdGFydCArIGluZGV4XSA9IGFycmF5W2pdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGl0dGxlT2Zmc2V0ICs9IHNpemU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKTtcbn1cblxudmFyIGJ5dGVTaXplTWFwID0geyA1MTI2OiA0LCA1MTIzOiAyLCA1MTIxOiAxIH07XG52YXIgVUlEJDEgPSAwO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBvYmplY3Qtc2hvcnRoYW5kICovXG52YXIgbWFwJDEgPSB7XG4gICAgRmxvYXQzMkFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgVWludDMyQXJyYXk6IFVpbnQzMkFycmF5LFxuICAgIEludDMyQXJyYXk6IEludDMyQXJyYXksXG4gICAgVWludDhBcnJheTogVWludDhBcnJheSxcbiAgICBVaW50MTZBcnJheTogVWludDE2QXJyYXksXG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbi8qKlxuICogVGhlIEdlb21ldHJ5IHJlcHJlc2VudHMgYSBtb2RlbC4gSXQgY29uc2lzdHMgb2YgdHdvIGNvbXBvbmVudHM6XG4gKiAtIEdlb21ldHJ5U3R5bGUgLSBUaGUgc3RydWN0dXJlIG9mIHRoZSBtb2RlbCBzdWNoIGFzIHRoZSBhdHRyaWJ1dGVzIGxheW91dFxuICogLSBHZW9tZXRyeURhdGEgLSB0aGUgZGF0YSBvZiB0aGUgbW9kZWwgLSB0aGlzIGNvbnNpc3RzIG9mIGJ1ZmZlcnMuXG4gKiBUaGlzIGNhbiBpbmNsdWRlIGFueXRoaW5nIGZyb20gcG9zaXRpb25zLCB1dnMsIG5vcm1hbHMsIGNvbG9ycyBldGMuXG4gKlxuICogR2VvbWV0cnkgY2FuIGJlIGRlZmluZWQgd2l0aG91dCBwYXNzaW5nIGluIGEgc3R5bGUgb3IgZGF0YSBpZiByZXF1aXJlZCAodGhhdHMgaG93IEkgcHJlZmVyISlcbiAqXG4gKiBgYGBqc1xuICogbGV0IGdlb21ldHJ5ID0gbmV3IFBJWEkuR2VvbWV0cnkoKTtcbiAqXG4gKiBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9ucycsIFswLCAwLCAxMDAsIDAsIDEwMCwgMTAwLCAwLCAxMDBdLCAyKTtcbiAqIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgndXZzJywgWzAsMCwxLDAsMSwxLDAsMV0sMilcbiAqIGdlb21ldHJ5LmFkZEluZGV4KFswLDEsMiwxLDMsMl0pXG4gKlxuICogYGBgXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBHZW9tZXRyeSA9IGZ1bmN0aW9uIEdlb21ldHJ5KGJ1ZmZlcnMsIGF0dHJpYnV0ZXMpXG57XG4gICAgaWYgKCBidWZmZXJzID09PSB2b2lkIDAgKSBidWZmZXJzID0gW107XG4gICAgaWYgKCBhdHRyaWJ1dGVzID09PSB2b2lkIDAgKSBhdHRyaWJ1dGVzID0ge307XG5cbiAgICB0aGlzLmJ1ZmZlcnMgPSBidWZmZXJzO1xuXG4gICAgdGhpcy5pbmRleEJ1ZmZlciA9IG51bGw7XG5cbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuXG4gICAgLyoqXG4gICAgICogQSBtYXAgb2YgcmVuZGVyZXIgSURzIHRvIHdlYmdsIFZBT3NcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMuZ2xWZXJ0ZXhBcnJheU9iamVjdHMgPSB7fTtcblxuICAgIHRoaXMuaWQgPSBVSUQkMSsrO1xuXG4gICAgdGhpcy5pbnN0YW5jZWQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBpbnN0YW5jZXMgaW4gdGhpcyBnZW9tZXRyeSwgcGFzcyBpdCB0byBgR2VvbWV0cnlTeXN0ZW0uZHJhdygpYFxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgdGhpcy5pbnN0YW5jZUNvdW50ID0gMTtcblxuICAgIHRoaXMuZGlzcG9zZVJ1bm5lciA9IG5ldyBSdW5uZXIoJ2Rpc3Bvc2VHZW9tZXRyeScsIDIpO1xuXG4gICAgLyoqXG4gICAgICogQ291bnQgb2YgZXhpc3RpbmcgKG5vdCBkZXN0cm95ZWQpIG1lc2hlcyB0aGF0IHJlZmVyZW5jZSB0aGlzIGdlb21ldHJ5XG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucmVmQ291bnQgPSAwO1xufTtcblxuLyoqXG4qXG4qIEFkZHMgYW4gYXR0cmlidXRlIHRvIHRoZSBnZW9tZXRyeVxuKlxuKiBAcGFyYW0ge1N0cmluZ30gaWQgLSB0aGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIChtYXRjaGluZyB1cCB0byBhIHNoYWRlcilcbiogQHBhcmFtIHtQSVhJLkJ1ZmZlcnxudW1iZXJbXX0gW2J1ZmZlcl0gdGhlIGJ1ZmZlciB0aGF0IGhvbGRzIHRoZSBkYXRhIG9mIHRoZSBhdHRyaWJ1dGUgLiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBBcnJheSBhbmQgYSBidWZmZXIgd2lsbCBiZSBjcmVhdGVkIGZyb20gaXQuXG4qIEBwYXJhbSB7TnVtYmVyfSBbc2l6ZT0wXSB0aGUgc2l6ZSBvZiB0aGUgYXR0cmlidXRlLiBJZiB5b3UgaGF2ZSAyIGZsb2F0cyBwZXIgdmVydGV4IChlZyBwb3NpdGlvbiB4IGFuZCB5KSB0aGlzIHdvdWxkIGJlIDJcbiogQHBhcmFtIHtCb29sZWFufSBbbm9ybWFsaXplZD1mYWxzZV0gc2hvdWxkIHRoZSBkYXRhIGJlIG5vcm1hbGl6ZWQuXG4qIEBwYXJhbSB7TnVtYmVyfSBbdHlwZT1QSVhJLlRZUEVTLkZMT0FUXSB3aGF0IHR5cGUgb2YgbnVtYmVyIGlzIHRoZSBhdHRyaWJ1dGUuIENoZWNrIHtQSVhJLlRZUEVTfSB0byBzZWUgdGhlIG9uZXMgYXZhaWxhYmxlXG4qIEBwYXJhbSB7TnVtYmVyfSBbc3RyaWRlPTBdIEhvdyBmYXIgYXBhcnQgKGluIGZsb2F0cykgdGhlIHN0YXJ0IG9mIGVhY2ggdmFsdWUgaXMuICh1c2VkIGZvciBpbnRlcmxlYXZpbmcgZGF0YSlcbiogQHBhcmFtIHtOdW1iZXJ9IFtzdGFydD0wXSBIb3cgZmFyIGludG8gdGhlIGFycmF5IHRvIHN0YXJ0IHJlYWRpbmcgdmFsdWVzICh1c2VkIGZvciBpbnRlcmxlYXZpbmcgZGF0YSlcbipcbiogQHJldHVybiB7UElYSS5HZW9tZXRyeX0gcmV0dXJucyBzZWxmLCB1c2VmdWwgZm9yIGNoYWluaW5nLlxuKi9cbkdlb21ldHJ5LnByb3RvdHlwZS5hZGRBdHRyaWJ1dGUgPSBmdW5jdGlvbiBhZGRBdHRyaWJ1dGUgKGlkLCBidWZmZXIsIHNpemUsIG5vcm1hbGl6ZWQsIHR5cGUsIHN0cmlkZSwgc3RhcnQsIGluc3RhbmNlKVxue1xuICAgICAgICBpZiAoIG5vcm1hbGl6ZWQgPT09IHZvaWQgMCApIG5vcm1hbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCBpbnN0YW5jZSA9PT0gdm9pZCAwICkgaW5zdGFuY2UgPSBmYWxzZTtcblxuICAgIGlmICghYnVmZmVyKVxuICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBwYXNzIGEgYnVmZmVyIHdoZW4gY3JlYXRpbmcgYW4gYXR0cmlidXRlJyk7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBhIGJ1ZmZlciFcbiAgICBpZiAoIWJ1ZmZlci5kYXRhKVxuICAgIHtcbiAgICAgICAgLy8gaXRzIGFuIGFycmF5IVxuICAgICAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYnVmZmVyKTtcbiAgICB9XG5cbiAgICB2YXIgaWRzID0gaWQuc3BsaXQoJ3wnKTtcblxuICAgIGlmIChpZHMubGVuZ3RoID4gMSlcbiAgICB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZShpZHNbaV0sIGJ1ZmZlciwgc2l6ZSwgbm9ybWFsaXplZCwgdHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgYnVmZmVySW5kZXggPSB0aGlzLmJ1ZmZlcnMuaW5kZXhPZihidWZmZXIpO1xuXG4gICAgaWYgKGJ1ZmZlckluZGV4ID09PSAtMSlcbiAgICB7XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlcik7XG4gICAgICAgIGJ1ZmZlckluZGV4ID0gdGhpcy5idWZmZXJzLmxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgdGhpcy5hdHRyaWJ1dGVzW2lkXSA9IG5ldyBBdHRyaWJ1dGUoYnVmZmVySW5kZXgsIHNpemUsIG5vcm1hbGl6ZWQsIHR5cGUsIHN0cmlkZSwgc3RhcnQsIGluc3RhbmNlKTtcblxuICAgIC8vIGFzc3VtaW5nIHRoYXQgaWYgdGhlcmUgaXMgaW5zdGFuY2VkIGRhdGEgdGhlbiB0aGlzIHdpbGwgYmUgZHJhd24gd2l0aCBpbnN0YW5jaW5nIVxuICAgIHRoaXMuaW5zdGFuY2VkID0gdGhpcy5pbnN0YW5jZWQgfHwgaW5zdGFuY2U7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogcmV0dXJucyB0aGUgcmVxdWVzdGVkIGF0dHJpYnV0ZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCAgdGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSByZXF1aXJlZFxuICogQHJldHVybiB7UElYSS5BdHRyaWJ1dGV9IHRoZSBhdHRyaWJ1dGUgcmVxdWVzdGVkLlxuICovXG5HZW9tZXRyeS5wcm90b3R5cGUuZ2V0QXR0cmlidXRlID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlIChpZClcbntcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2lkXTtcbn07XG5cbi8qKlxuICogcmV0dXJucyB0aGUgcmVxdWVzdGVkIGJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCAgdGhlIG5hbWUgb2YgdGhlIGJ1ZmZlciByZXF1aXJlZFxuICogQHJldHVybiB7UElYSS5CdWZmZXJ9IHRoZSBidWZmZXIgcmVxdWVzdGVkLlxuICovXG5HZW9tZXRyeS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyIChpZClcbntcbiAgICByZXR1cm4gdGhpcy5idWZmZXJzW3RoaXMuZ2V0QXR0cmlidXRlKGlkKS5idWZmZXJdO1xufTtcblxuLyoqXG4qXG4qIEFkZHMgYW4gaW5kZXggYnVmZmVyIHRvIHRoZSBnZW9tZXRyeVxuKiBUaGUgaW5kZXggYnVmZmVyIGNvbnRhaW5zIGludGVnZXJzLCB0aHJlZSBmb3IgZWFjaCB0cmlhbmdsZSBpbiB0aGUgZ2VvbWV0cnksIHdoaWNoIHJlZmVyZW5jZSB0aGUgdmFyaW91cyBhdHRyaWJ1dGUgYnVmZmVycyAocG9zaXRpb24sIGNvbG91ciwgVVYgY29vcmRpbmF0ZXMsIG90aGVyIFVWIGNvb3JkaW5hdGVzLCBub3JtYWwsIOKApikuIFRoZXJlIGlzIG9ubHkgT05FIGluZGV4IGJ1ZmZlci5cbipcbiogQHBhcmFtIHtQSVhJLkJ1ZmZlcnxudW1iZXJbXX0gW2J1ZmZlcl0gdGhlIGJ1ZmZlciB0aGF0IGhvbGRzIHRoZSBkYXRhIG9mIHRoZSBpbmRleCBidWZmZXIuIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIEFycmF5IGFuZCBhIGJ1ZmZlciB3aWxsIGJlIGNyZWF0ZWQgZnJvbSBpdC5cbiogQHJldHVybiB7UElYSS5HZW9tZXRyeX0gcmV0dXJucyBzZWxmLCB1c2VmdWwgZm9yIGNoYWluaW5nLlxuKi9cbkdlb21ldHJ5LnByb3RvdHlwZS5hZGRJbmRleCA9IGZ1bmN0aW9uIGFkZEluZGV4IChidWZmZXIpXG57XG4gICAgaWYgKCFidWZmZXIuZGF0YSlcbiAgICB7XG4gICAgICAgIC8vIGl0cyBhbiBhcnJheSFcbiAgICAgICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5KVxuICAgICAgICB7XG4gICAgICAgICAgICBidWZmZXIgPSBuZXcgVWludDE2QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYnVmZmVyKTtcbiAgICB9XG5cbiAgICBidWZmZXIuaW5kZXggPSB0cnVlO1xuICAgIHRoaXMuaW5kZXhCdWZmZXIgPSBidWZmZXI7XG5cbiAgICBpZiAodGhpcy5idWZmZXJzLmluZGV4T2YoYnVmZmVyKSA9PT0gLTEpXG4gICAge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChidWZmZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSBpbmRleCBidWZmZXJcbiAqXG4gKiBAcmV0dXJuIHtQSVhJLkJ1ZmZlcn0gdGhlIGluZGV4IGJ1ZmZlci5cbiAqL1xuR2VvbWV0cnkucHJvdG90eXBlLmdldEluZGV4ID0gZnVuY3Rpb24gZ2V0SW5kZXggKClcbntcbiAgICByZXR1cm4gdGhpcy5pbmRleEJ1ZmZlcjtcbn07XG5cbi8qKlxuICogdGhpcyBmdW5jdGlvbiBtb2RpZmllcyB0aGUgc3RydWN0dXJlIHNvIHRoYXQgYWxsIGN1cnJlbnQgYXR0cmlidXRlcyBiZWNvbWUgaW50ZXJsZWF2ZWQgaW50byBhIHNpbmdsZSBidWZmZXJcbiAqIFRoaXMgY2FuIGJlIHVzZWZ1bCBpZiB5b3VyIG1vZGVsIHJlbWFpbnMgc3RhdGljIGFzIGl0IG9mZmVycyBhIGxpdHRsZSBwZXJmb3JtYW5jZSBib29zdFxuICpcbiAqIEByZXR1cm4ge1BJWEkuR2VvbWV0cnl9IHJldHVybnMgc2VsZiwgdXNlZnVsIGZvciBjaGFpbmluZy5cbiAqL1xuR2VvbWV0cnkucHJvdG90eXBlLmludGVybGVhdmUgPSBmdW5jdGlvbiBpbnRlcmxlYXZlICgpXG57XG4gICAgLy8gYSBzaW1wbGUgY2hlY2sgdG8gc2VlIGlmIGJ1ZmZlcnMgYXJlIGFscmVhZHkgaW50ZXJsZWF2ZWQuLlxuICAgIGlmICh0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSAxIHx8ICh0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSAyICYmIHRoaXMuaW5kZXhCdWZmZXIpKSB7IHJldHVybiB0aGlzOyB9XG5cbiAgICAvLyBhc3N1bWUgYWxyZWFkeSB0aGF0IG5vIGJ1ZmZlcnMgYXJlIGludGVybGVhdmVkXG4gICAgdmFyIGFycmF5cyA9IFtdO1xuICAgIHZhciBzaXplcyA9IFtdO1xuICAgIHZhciBpbnRlcmxlYXZlZEJ1ZmZlciA9IG5ldyBCdWZmZXIoKTtcbiAgICB2YXIgaTtcblxuICAgIGZvciAoaSBpbiB0aGlzLmF0dHJpYnV0ZXMpXG4gICAge1xuICAgICAgICB2YXIgYXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzW2ldO1xuXG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnNbYXR0cmlidXRlLmJ1ZmZlcl07XG5cbiAgICAgICAgYXJyYXlzLnB1c2goYnVmZmVyLmRhdGEpO1xuXG4gICAgICAgIHNpemVzLnB1c2goKGF0dHJpYnV0ZS5zaXplICogYnl0ZVNpemVNYXBbYXR0cmlidXRlLnR5cGVdKSAvIDQpO1xuXG4gICAgICAgIGF0dHJpYnV0ZS5idWZmZXIgPSAwO1xuICAgIH1cblxuICAgIGludGVybGVhdmVkQnVmZmVyLmRhdGEgPSBpbnRlcmxlYXZlVHlwZWRBcnJheXMoYXJyYXlzLCBzaXplcyk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5idWZmZXJzLmxlbmd0aDsgaSsrKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyc1tpXSAhPT0gdGhpcy5pbmRleEJ1ZmZlcilcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5idWZmZXJzW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYnVmZmVycyA9IFtpbnRlcmxlYXZlZEJ1ZmZlcl07XG5cbiAgICBpZiAodGhpcy5pbmRleEJ1ZmZlcilcbiAgICB7XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKHRoaXMuaW5kZXhCdWZmZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuR2VvbWV0cnkucHJvdG90eXBlLmdldFNpemUgPSBmdW5jdGlvbiBnZXRTaXplICgpXG57XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLmF0dHJpYnV0ZXMpXG4gICAge1xuICAgICAgICB2YXIgYXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzW2ldO1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXJzW2F0dHJpYnV0ZS5idWZmZXJdO1xuXG4gICAgICAgIHJldHVybiBidWZmZXIuZGF0YS5sZW5ndGggLyAoKGF0dHJpYnV0ZS5zdHJpZGUgLyA0KSB8fCBhdHRyaWJ1dGUuc2l6ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG59O1xuXG4vKipcbiAqIGRpc3Bvc2VzIFdlYkdMIHJlc291cmNlcyB0aGF0IGFyZSBjb25uZWN0ZWQgdG8gdGhpcyBnZW9tZXRyeVxuICovXG5HZW9tZXRyeS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UgKClcbntcbiAgICB0aGlzLmRpc3Bvc2VSdW5uZXIucnVuKHRoaXMsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIGdlb21ldHJ5LlxuICovXG5HZW9tZXRyeS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbntcbiAgICB0aGlzLmRpc3Bvc2UoKTtcblxuICAgIHRoaXMuYnVmZmVycyA9IG51bGw7XG4gICAgdGhpcy5pbmRleEJ1ZmZlci5kZXN0cm95KCk7XG5cbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBudWxsO1xufTtcblxuLyoqXG4gKiByZXR1cm5zIGEgY2xvbmUgb2YgdGhlIGdlb21ldHJ5XG4gKlxuICogQHJldHVybnMge1BJWEkuR2VvbWV0cnl9IGEgbmV3IGNsb25lIG9mIHRoaXMgZ2VvbWV0cnlcbiAqL1xuR2VvbWV0cnkucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKClcbntcbiAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnkoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5idWZmZXJzLmxlbmd0aDsgaSsrKVxuICAgIHtcbiAgICAgICAgZ2VvbWV0cnkuYnVmZmVyc1tpXSA9IG5ldyBCdWZmZXIodGhpcy5idWZmZXJzW2ldLmRhdGEuc2xpY2UoKSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSQxIGluIHRoaXMuYXR0cmlidXRlcylcbiAgICB7XG4gICAgICAgIHZhciBhdHRyaWIgPSB0aGlzLmF0dHJpYnV0ZXNbaSQxXTtcblxuICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzW2kkMV0gPSBuZXcgQXR0cmlidXRlKFxuICAgICAgICAgICAgYXR0cmliLmJ1ZmZlcixcbiAgICAgICAgICAgIGF0dHJpYi5zaXplLFxuICAgICAgICAgICAgYXR0cmliLm5vcm1hbGl6ZWQsXG4gICAgICAgICAgICBhdHRyaWIudHlwZSxcbiAgICAgICAgICAgIGF0dHJpYi5zdHJpZGUsXG4gICAgICAgICAgICBhdHRyaWIuc3RhcnQsXG4gICAgICAgICAgICBhdHRyaWIuaW5zdGFuY2VcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pbmRleEJ1ZmZlcilcbiAgICB7XG4gICAgICAgIGdlb21ldHJ5LmluZGV4QnVmZmVyID0gZ2VvbWV0cnkuYnVmZmVyc1t0aGlzLmJ1ZmZlcnMuaW5kZXhPZih0aGlzLmluZGV4QnVmZmVyKV07XG4gICAgICAgIGdlb21ldHJ5LmluZGV4QnVmZmVyLmluZGV4ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2VvbWV0cnk7XG59O1xuXG4vKipcbiAqIG1lcmdlcyBhbiBhcnJheSBvZiBnZW9tZXRyaWVzIGludG8gYSBuZXcgc2luZ2xlIG9uZVxuICogZ2VvbWV0cnkgYXR0cmlidXRlIHN0eWxlcyBtdXN0IG1hdGNoIGZvciB0aGlzIG9wZXJhdGlvbiB0byB3b3JrXG4gKlxuICogQHBhcmFtIHtQSVhJLkdlb21ldHJ5W119IGdlb21ldHJpZXMgYXJyYXkgb2YgZ2VvbWV0cmllcyB0byBtZXJnZVxuICogQHJldHVybnMge1BJWEkuR2VvbWV0cnl9IHNoaW55IG5ldyBnZW9tZXRyeSFcbiAqL1xuR2VvbWV0cnkubWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSAoZ2VvbWV0cmllcylcbntcbiAgICAvLyB0b2RvIGFkZCBhIGdlb21ldHJ5IGNoZWNrIVxuICAgIC8vIGFsc28gYSBzaXplIGNoZWNrLi4gY2FudCBiZSB0b28gYmlnIV1cblxuICAgIHZhciBnZW9tZXRyeU91dCA9IG5ldyBHZW9tZXRyeSgpO1xuXG4gICAgdmFyIGFycmF5cyA9IFtdO1xuICAgIHZhciBzaXplcyA9IFtdO1xuICAgIHZhciBvZmZzZXRzID0gW107XG5cbiAgICB2YXIgZ2VvbWV0cnk7XG5cbiAgICAvLyBwYXNzIG9uZS4uIGdldCBzaXplcy4uXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tZXRyaWVzLmxlbmd0aDsgaSsrKVxuICAgIHtcbiAgICAgICAgZ2VvbWV0cnkgPSBnZW9tZXRyaWVzW2ldO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZ2VvbWV0cnkuYnVmZmVycy5sZW5ndGg7IGorKylcbiAgICAgICAge1xuICAgICAgICAgICAgc2l6ZXNbal0gPSBzaXplc1tqXSB8fCAwO1xuICAgICAgICAgICAgc2l6ZXNbal0gKz0gZ2VvbWV0cnkuYnVmZmVyc1tqXS5kYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIG9mZnNldHNbal0gPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYnVpbGQgdGhlIGNvcnJlY3Qgc2l6ZSBhcnJheXMuLlxuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGdlb21ldHJ5LmJ1ZmZlcnMubGVuZ3RoOyBpJDErKylcbiAgICB7XG4gICAgICAgIC8vIFRPRE8gdHlwZXMhXG4gICAgICAgIGFycmF5c1tpJDFdID0gbmV3IG1hcCQxW2dldEJ1ZmZlclR5cGUoZ2VvbWV0cnkuYnVmZmVyc1tpJDFdLmRhdGEpXShzaXplc1tpJDFdKTtcbiAgICAgICAgZ2VvbWV0cnlPdXQuYnVmZmVyc1tpJDFdID0gbmV3IEJ1ZmZlcihhcnJheXNbaSQxXSk7XG4gICAgfVxuXG4gICAgLy8gcGFzcyB0byBzZXQgZGF0YS4uXG4gICAgZm9yICh2YXIgaSQyID0gMDsgaSQyIDwgZ2VvbWV0cmllcy5sZW5ndGg7IGkkMisrKVxuICAgIHtcbiAgICAgICAgZ2VvbWV0cnkgPSBnZW9tZXRyaWVzW2kkMl07XG5cbiAgICAgICAgZm9yICh2YXIgaiQxID0gMDsgaiQxIDwgZ2VvbWV0cnkuYnVmZmVycy5sZW5ndGg7IGokMSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBhcnJheXNbaiQxXS5zZXQoZ2VvbWV0cnkuYnVmZmVyc1tqJDFdLmRhdGEsIG9mZnNldHNbaiQxXSk7XG4gICAgICAgICAgICBvZmZzZXRzW2okMV0gKz0gZ2VvbWV0cnkuYnVmZmVyc1tqJDFdLmRhdGEubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2VvbWV0cnlPdXQuYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cbiAgICBpZiAoZ2VvbWV0cnkuaW5kZXhCdWZmZXIpXG4gICAge1xuICAgICAgICBnZW9tZXRyeU91dC5pbmRleEJ1ZmZlciA9IGdlb21ldHJ5T3V0LmJ1ZmZlcnNbZ2VvbWV0cnkuYnVmZmVycy5pbmRleE9mKGdlb21ldHJ5LmluZGV4QnVmZmVyKV07XG4gICAgICAgIGdlb21ldHJ5T3V0LmluZGV4QnVmZmVyLmluZGV4ID0gdHJ1ZTtcblxuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIHN0cmlkZSA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQyID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlckluZGV4VG9Db3VudCA9IDA7XG5cbiAgICAgICAgLy8gZ2V0IGEgYnVmZmVyXG4gICAgICAgIGZvciAodmFyIGkkMyA9IDA7IGkkMyA8IGdlb21ldHJ5LmJ1ZmZlcnMubGVuZ3RoOyBpJDMrKylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKGdlb21ldHJ5LmJ1ZmZlcnNbaSQzXSAhPT0gZ2VvbWV0cnkuaW5kZXhCdWZmZXIpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnVmZmVySW5kZXhUb0NvdW50ID0gaSQzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmlndXJlIG91dCB0aGUgc3RyaWRlIG9mIG9uZSBidWZmZXIuLlxuICAgICAgICBmb3IgKHZhciBpJDQgaW4gZ2VvbWV0cnkuYXR0cmlidXRlcylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbaSQ0XTtcblxuICAgICAgICAgICAgaWYgKChhdHRyaWJ1dGUuYnVmZmVyIHwgMCkgPT09IGJ1ZmZlckluZGV4VG9Db3VudClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpZGUgKz0gKChhdHRyaWJ1dGUuc2l6ZSAqIGJ5dGVTaXplTWFwW2F0dHJpYnV0ZS50eXBlXSkgLyA0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRpbWUgdG8gb2ZmIHNldCBhbGwgaW5kZXhlcy4uXG4gICAgICAgIGZvciAodmFyIGkkNSA9IDA7IGkkNSA8IGdlb21ldHJpZXMubGVuZ3RoOyBpJDUrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGluZGV4QnVmZmVyRGF0YSA9IGdlb21ldHJpZXNbaSQ1XS5pbmRleEJ1ZmZlci5kYXRhO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqJDIgPSAwOyBqJDIgPCBpbmRleEJ1ZmZlckRhdGEubGVuZ3RoOyBqJDIrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnZW9tZXRyeU91dC5pbmRleEJ1ZmZlci5kYXRhW2okMiArIG9mZnNldDJdICs9IG9mZnNldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2Zmc2V0ICs9IGdlb21ldHJ5LmJ1ZmZlcnNbYnVmZmVySW5kZXhUb0NvdW50XS5kYXRhLmxlbmd0aCAvIChzdHJpZGUpO1xuICAgICAgICAgICAgb2Zmc2V0MiArPSBpbmRleEJ1ZmZlckRhdGEubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdlb21ldHJ5T3V0O1xufTtcblxuLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gY3JlYXRlIGEgcXVhZFxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFF1YWQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChHZW9tZXRyeSkge1xuICAgIGZ1bmN0aW9uIFF1YWQoKVxuICAgIHtcbiAgICAgICAgR2VvbWV0cnkuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZSgnYVZlcnRleFBvc2l0aW9uJywgW1xuICAgICAgICAgICAgMCwgMCxcbiAgICAgICAgICAgIDEsIDAsXG4gICAgICAgICAgICAxLCAxLFxuICAgICAgICAgICAgMCwgMSBdKVxuICAgICAgICAgICAgLmFkZEluZGV4KFswLCAxLCAzLCAyXSk7XG4gICAgfVxuXG4gICAgaWYgKCBHZW9tZXRyeSApIFF1YWQuX19wcm90b19fID0gR2VvbWV0cnk7XG4gICAgUXVhZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeSAmJiBHZW9tZXRyeS5wcm90b3R5cGUgKTtcbiAgICBRdWFkLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFF1YWQ7XG5cbiAgICByZXR1cm4gUXVhZDtcbn0oR2VvbWV0cnkpKTtcblxuLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gY3JlYXRlIGEgcXVhZCB3aXRoIHV2cyBsaWtlIGluIHY0XG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQGV4dGVuZHMgUElYSS5HZW9tZXRyeVxuICovXG52YXIgUXVhZFV2ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoR2VvbWV0cnkpIHtcbiAgICBmdW5jdGlvbiBRdWFkVXYoKVxuICAgIHtcbiAgICAgICAgR2VvbWV0cnkuY2FsbCh0aGlzKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gYXJyYXkgb2YgdmVydGljZXNcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7RmxvYXQzMkFycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAgICAgLTEsIC0xLFxuICAgICAgICAgICAgMSwgLTEsXG4gICAgICAgICAgICAxLCAxLFxuICAgICAgICAgICAgLTEsIDEgXSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBVdnMgb2YgdGhlIHF1YWRcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7RmxvYXQzMkFycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51dnMgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgICAgIDAsIDAsXG4gICAgICAgICAgICAxLCAwLFxuICAgICAgICAgICAgMSwgMSxcbiAgICAgICAgICAgIDAsIDEgXSk7XG5cbiAgICAgICAgdGhpcy52ZXJ0ZXhCdWZmZXIgPSBuZXcgQnVmZmVyKHRoaXMudmVydGljZXMpO1xuICAgICAgICB0aGlzLnV2QnVmZmVyID0gbmV3IEJ1ZmZlcih0aGlzLnV2cyk7XG5cbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUoJ2FWZXJ0ZXhQb3NpdGlvbicsIHRoaXMudmVydGV4QnVmZmVyKVxuICAgICAgICAgICAgLmFkZEF0dHJpYnV0ZSgnYVRleHR1cmVDb29yZCcsIHRoaXMudXZCdWZmZXIpXG4gICAgICAgICAgICAuYWRkSW5kZXgoWzAsIDEsIDIsIDAsIDIsIDNdKTtcbiAgICB9XG5cbiAgICBpZiAoIEdlb21ldHJ5ICkgUXVhZFV2Ll9fcHJvdG9fXyA9IEdlb21ldHJ5O1xuICAgIFF1YWRVdi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeSAmJiBHZW9tZXRyeS5wcm90b3R5cGUgKTtcbiAgICBRdWFkVXYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUXVhZFV2O1xuXG4gICAgLyoqXG4gICAgICogTWFwcyB0d28gUmVjdGFuZ2xlIHRvIHRoZSBxdWFkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gdGFyZ2V0VGV4dHVyZUZyYW1lIC0gdGhlIGZpcnN0IHJlY3RhbmdsZVxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IGRlc3RpbmF0aW9uRnJhbWUgLSB0aGUgc2Vjb25kIHJlY3RhbmdsZVxuICAgICAqIEByZXR1cm4ge1BJWEkuUXVhZH0gUmV0dXJucyBpdHNlbGYuXG4gICAgICovXG4gICAgUXVhZFV2LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKHRhcmdldFRleHR1cmVGcmFtZSwgZGVzdGluYXRpb25GcmFtZSlcbiAgICB7XG4gICAgICAgIHZhciB4ID0gMDsgLy8gZGVzdGluYXRpb25GcmFtZS54IC8gdGFyZ2V0VGV4dHVyZUZyYW1lLndpZHRoO1xuICAgICAgICB2YXIgeSA9IDA7IC8vIGRlc3RpbmF0aW9uRnJhbWUueSAvIHRhcmdldFRleHR1cmVGcmFtZS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy51dnNbMF0gPSB4O1xuICAgICAgICB0aGlzLnV2c1sxXSA9IHk7XG5cbiAgICAgICAgdGhpcy51dnNbMl0gPSB4ICsgKGRlc3RpbmF0aW9uRnJhbWUud2lkdGggLyB0YXJnZXRUZXh0dXJlRnJhbWUud2lkdGgpO1xuICAgICAgICB0aGlzLnV2c1szXSA9IHk7XG5cbiAgICAgICAgdGhpcy51dnNbNF0gPSB4ICsgKGRlc3RpbmF0aW9uRnJhbWUud2lkdGggLyB0YXJnZXRUZXh0dXJlRnJhbWUud2lkdGgpO1xuICAgICAgICB0aGlzLnV2c1s1XSA9IHkgKyAoZGVzdGluYXRpb25GcmFtZS5oZWlnaHQgLyB0YXJnZXRUZXh0dXJlRnJhbWUuaGVpZ2h0KTtcblxuICAgICAgICB0aGlzLnV2c1s2XSA9IHg7XG4gICAgICAgIHRoaXMudXZzWzddID0geSArIChkZXN0aW5hdGlvbkZyYW1lLmhlaWdodCAvIHRhcmdldFRleHR1cmVGcmFtZS5oZWlnaHQpO1xuXG4gICAgICAgIHggPSBkZXN0aW5hdGlvbkZyYW1lLng7XG4gICAgICAgIHkgPSBkZXN0aW5hdGlvbkZyYW1lLnk7XG5cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1swXSA9IHg7XG4gICAgICAgIHRoaXMudmVydGljZXNbMV0gPSB5O1xuXG4gICAgICAgIHRoaXMudmVydGljZXNbMl0gPSB4ICsgZGVzdGluYXRpb25GcmFtZS53aWR0aDtcbiAgICAgICAgdGhpcy52ZXJ0aWNlc1szXSA9IHk7XG5cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1s0XSA9IHggKyBkZXN0aW5hdGlvbkZyYW1lLndpZHRoO1xuICAgICAgICB0aGlzLnZlcnRpY2VzWzVdID0geSArIGRlc3RpbmF0aW9uRnJhbWUuaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMudmVydGljZXNbNl0gPSB4O1xuICAgICAgICB0aGlzLnZlcnRpY2VzWzddID0geSArIGRlc3RpbmF0aW9uRnJhbWUuaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBsZWdhY3kgdXBsb2FkIG1ldGhvZCwganVzdCBtYXJrcyBidWZmZXJzIGRpcnR5XG4gICAgICogQHJldHVybnMge1BJWEkuUXVhZFV2fSBSZXR1cm5zIGl0c2VsZi5cbiAgICAgKi9cbiAgICBRdWFkVXYucHJvdG90eXBlLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlICgpXG4gICAge1xuICAgICAgICB0aGlzLnZlcnRleEJ1ZmZlci5fdXBkYXRlSUQrKztcbiAgICAgICAgdGhpcy51dkJ1ZmZlci5fdXBkYXRlSUQrKztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFF1YWRVdjtcbn0oR2VvbWV0cnkpKTtcblxudmFyIFVJRCQyID0gMDtcblxuLyoqXG4gKiBVbmlmb3JtIGdyb3VwIGhvbGRzIHVuaWZvcm0gbWFwIGFuZCBzb21lIElEJ3MgZm9yIHdvcmtcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBVbmlmb3JtR3JvdXAgPSBmdW5jdGlvbiBVbmlmb3JtR3JvdXAodW5pZm9ybXMsIF9zdGF0aWMpXG57XG4gICAgLyoqXG4gICAgICogdW5pZm9ybSB2YWx1ZXNcbiAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgdGhpcy51bmlmb3JtcyA9IHVuaWZvcm1zO1xuXG4gICAgLyoqXG4gICAgICogSXRzIGEgZ3JvdXAgYW5kIG5vdCBhIHNpbmdsZSB1bmlmb3Jtc1xuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHRoaXMuZ3JvdXAgPSB0cnVlO1xuXG4gICAgLy8gbGV0cyBnZW5lcmF0ZSB0aGlzIHdoZW4gdGhlIHNoYWRlciA/XG4gICAgdGhpcy5zeW5jVW5pZm9ybXMgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIGRpcnR5IHZlcnNpb25cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuZGlydHlJZCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiB1bmlxdWUgaWRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBVSUQkMisrO1xuXG4gICAgLyoqXG4gICAgICogVW5pZm9ybXMgd29udCBiZSBjaGFuZ2VkIGFmdGVyIGNyZWF0aW9uXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnN0YXRpYyA9ICEhX3N0YXRpYztcbn07XG5cblVuaWZvcm1Hcm91cC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpXG57XG4gICAgdGhpcy5kaXJ0eUlkKys7XG59O1xuXG5Vbmlmb3JtR3JvdXAucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobmFtZSwgdW5pZm9ybXMsIF9zdGF0aWMpXG57XG4gICAgdGhpcy51bmlmb3Jtc1tuYW1lXSA9IG5ldyBVbmlmb3JtR3JvdXAodW5pZm9ybXMsIF9zdGF0aWMpO1xufTtcblxuVW5pZm9ybUdyb3VwLmZyb20gPSBmdW5jdGlvbiBmcm9tICh1bmlmb3JtcywgX3N0YXRpYylcbntcbiAgICByZXR1cm4gbmV3IFVuaWZvcm1Hcm91cCh1bmlmb3JtcywgX3N0YXRpYyk7XG59O1xuXG4vKipcbiAqIFN5c3RlbSBwbHVnaW4gdG8gdGhlIHJlbmRlcmVyIHRvIG1hbmFnZSBmaWx0ZXIgc3RhdGVzLlxuICpcbiAqIEBjbGFzc1xuICogQHByaXZhdGVcbiAqL1xudmFyIEZpbHRlclN0YXRlID0gZnVuY3Rpb24gRmlsdGVyU3RhdGUoKVxue1xuICAgIHRoaXMucmVuZGVyVGV4dHVyZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXQgb2YgdGhlIGZpbHRlcnNcbiAgICAgKiBXZSBzdG9yZSBmb3IgY2FzZSB3aGVuIGN1c3RvbSBmaWx0ZXIgd2FudHMgdG8ga25vdyB0aGUgZWxlbWVudCBpdCB3YXMgYXBwbGllZCBvblxuICAgICAqIEBtZW1iZXIge1BJWEkuRGlzcGxheU9iamVjdH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENvbXBhdGliaWxpdHkgd2l0aCBQaXhpSlMgdjQgZmlsdGVyc1xuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMubGVnYWN5ID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHV0aW9uIG9mIGZpbHRlcnNcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5yZXNvbHV0aW9uID0gMTtcblxuICAgIC8vIG5leHQgdGhyZWUgZmllbGRzIGFyZSBjcmVhdGVkIG9ubHkgZm9yIHJvb3RcbiAgICAvLyByZS1hc3NpZ25lZCBmb3IgZXZlcnl0aGluZyBlbHNlXG5cbiAgICAvKipcbiAgICAgKiBTb3VyY2UgZnJhbWVcbiAgICAgKiBAbWVtYmVyIHtQSVhJLlJlY3RhbmdsZX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuc291cmNlRnJhbWUgPSBuZXcgUmVjdGFuZ2xlKCk7XG5cbiAgICAvKipcbiAgICAgKiBEZXN0aW5hdGlvbiBmcmFtZVxuICAgICAqIEBtZW1iZXIge1BJWEkuUmVjdGFuZ2xlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5kZXN0aW5hdGlvbkZyYW1lID0gbmV3IFJlY3RhbmdsZSgpO1xuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiBmaWx0ZXJzXG4gICAgICogQG1lbWJlciB7UElYSS5GaWx0ZXJbXX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuZmlsdGVycyA9IFtdO1xufTtcblxuLyoqXG4gKiBjbGVhcnMgdGhlIHN0YXRlXG4gKiBAcHJpdmF0ZVxuICovXG5GaWx0ZXJTdGF0ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKVxue1xuICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICB0aGlzLmZpbHRlcnMgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyVGV4dHVyZSA9IG51bGw7XG59O1xuXG4vKipcbiAqIFN5c3RlbSBwbHVnaW4gdG8gdGhlIHJlbmRlcmVyIHRvIG1hbmFnZSB0aGUgZmlsdGVycy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJLnN5c3RlbXNcbiAqIEBleHRlbmRzIFBJWEkuU3lzdGVtXG4gKi9cbnZhciBGaWx0ZXJTeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBGaWx0ZXJTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpc3Qgb2YgZmlsdGVycyBmb3IgdGhlIEZpbHRlclN5c3RlbVxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3RbXX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlZmF1bHRGaWx0ZXJTdGFjayA9IFt7fV07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHN0b3JlcyBhIGJ1bmNoIG9mIFBPMiB0ZXh0dXJlcyB1c2VkIGZvciBmaWx0ZXJpbmdcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50ZXh0dXJlUG9vbCA9IG5ldyBSZW5kZXJUZXh0dXJlUG9vbCgpO1xuXG4gICAgICAgIHRoaXMudGV4dHVyZVBvb2wuc2V0U2NyZWVuU2l6ZShyZW5kZXJlci52aWV3KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYSBwb29sIGZvciBzdG9yaW5nIGZpbHRlciBzdGF0ZXMsIHNhdmUgdXMgY3JlYXRpbmcgbmV3IG9uZXMgZWFjaCB0aWNrXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdFtdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGF0ZVBvb2wgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSB2ZXJ5IHNpbXBsZSBnZW9tZXRyeSB1c2VkIHdoZW4gZHJhd2luZyBhIGZpbHRlciBlZmZlY3QgdG8gdGhlIHNjcmVlblxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlF1YWR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnF1YWQgPSBuZXcgUXVhZCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBRdWFkIFVWc1xuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlF1YWRVdn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucXVhZFV2ID0gbmV3IFF1YWRVdigpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZW1wb3JhcnkgcmVjdCBmb3IgbWF0aHNcbiAgICAgICAgICogQHR5cGUge1BJWEkuUmVjdGFuZ2xlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50ZW1wUmVjdCA9IG5ldyBSZWN0YW5nbGUoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWN0aXZlIHN0YXRlXG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWN0aXZlU3RhdGUgPSB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyB1bmlmb3JtIGdyb3VwIGlzIGF0dGFjaGVkIHRvIGZpbHRlciB1bmlmb3JtcyB3aGVuIHVzZWRcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5Vbmlmb3JtR3JvdXB9XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7UElYSS5SZWN0YW5nbGV9IG91dHB1dEZyYW1lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RmxvYXQzMkFycmF5fSBpbnB1dFNpemVcbiAgICAgICAgICogQHByb3BlcnR5IHtGbG9hdDMyQXJyYXl9IGlucHV0UGl4ZWxcbiAgICAgICAgICogQHByb3BlcnR5IHtGbG9hdDMyQXJyYXl9IGlucHV0Q2xhbXBcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJlc29sdXRpb25cbiAgICAgICAgICogQHByb3BlcnR5IHtGbG9hdDMyQXJyYXl9IGZpbHRlckFyZWFcbiAgICAgICAgICogQHByb3BlcnR5IHtGbG9hZDMyQXJyYXl9IGZpbHRlckNsYW1wXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdsb2JhbFVuaWZvcm1zID0gbmV3IFVuaWZvcm1Hcm91cCh7XG4gICAgICAgICAgICBvdXRwdXRGcmFtZTogdGhpcy50ZW1wUmVjdCxcbiAgICAgICAgICAgIGlucHV0U2l6ZTogbmV3IEZsb2F0MzJBcnJheSg0KSxcbiAgICAgICAgICAgIGlucHV0UGl4ZWw6IG5ldyBGbG9hdDMyQXJyYXkoNCksXG4gICAgICAgICAgICBpbnB1dENsYW1wOiBuZXcgRmxvYXQzMkFycmF5KDQpLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogMSxcblxuICAgICAgICAgICAgLy8gbGVnYWN5IHZhcmlhYmxlc1xuICAgICAgICAgICAgZmlsdGVyQXJlYTogbmV3IEZsb2F0MzJBcnJheSg0KSxcbiAgICAgICAgICAgIGZpbHRlckNsYW1wOiBuZXcgRmxvYXQzMkFycmF5KDQpLFxuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICB0aGlzLl9waXhlbHNXaWR0aCA9IHJlbmRlcmVyLnZpZXcud2lkdGg7XG4gICAgICAgIHRoaXMuX3BpeGVsc0hlaWdodCA9IHJlbmRlcmVyLnZpZXcuaGVpZ2h0O1xuICAgIH1cblxuICAgIGlmICggU3lzdGVtICkgRmlsdGVyU3lzdGVtLl9fcHJvdG9fXyA9IFN5c3RlbTtcbiAgICBGaWx0ZXJTeXN0ZW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3lzdGVtICYmIFN5c3RlbS5wcm90b3R5cGUgKTtcbiAgICBGaWx0ZXJTeXN0ZW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmlsdGVyU3lzdGVtO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBmaWx0ZXIgdG8gdGhlIFN5c3RlbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IG9mIHRoZSBmaWx0ZXIgdG8gcmVuZGVyLlxuICAgICAqIEBwYXJhbSB7UElYSS5GaWx0ZXJbXX0gZmlsdGVycyAtIFRoZSBmaWx0ZXJzIHRvIGFwcGx5LlxuICAgICAqL1xuICAgIEZpbHRlclN5c3RlbS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKHRhcmdldCwgZmlsdGVycylcbiAgICB7XG4gICAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG4gICAgICAgIHZhciBmaWx0ZXJTdGFjayA9IHRoaXMuZGVmYXVsdEZpbHRlclN0YWNrO1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlUG9vbC5wb3AoKSB8fCBuZXcgRmlsdGVyU3RhdGUoKTtcblxuICAgICAgICB2YXIgcmVzb2x1dGlvbiA9IGZpbHRlcnNbMF0ucmVzb2x1dGlvbjtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSBmaWx0ZXJzWzBdLnBhZGRpbmc7XG4gICAgICAgIHZhciBhdXRvRml0ID0gZmlsdGVyc1swXS5hdXRvRml0O1xuICAgICAgICB2YXIgbGVnYWN5ID0gZmlsdGVyc1swXS5sZWdhY3k7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gIGZpbHRlcnNbaV07XG5cbiAgICAgICAgICAgIC8vIGxldHMgdXNlIHRoZSBsb3dlc3QgcmVzb2x1dGlvbi4uXG4gICAgICAgICAgICByZXNvbHV0aW9uID0gTWF0aC5taW4ocmVzb2x1dGlvbiwgZmlsdGVyLnJlc29sdXRpb24pO1xuICAgICAgICAgICAgLy8gYW5kIHRoZSBsYXJnZXN0IGFtb3VudCBvZiBwYWRkaW5nIVxuICAgICAgICAgICAgcGFkZGluZyA9IE1hdGgubWF4KHBhZGRpbmcsIGZpbHRlci5wYWRkaW5nKTtcbiAgICAgICAgICAgIC8vIG9ubHkgYXV0byBmaXQgaWYgYWxsIGZpbHRlcnMgYXJlIGF1dG9maXRcbiAgICAgICAgICAgIGF1dG9GaXQgPSBhdXRvRml0IHx8IGZpbHRlci5hdXRvRml0O1xuXG4gICAgICAgICAgICBsZWdhY3kgPSBsZWdhY3kgfHwgZmlsdGVyLmxlZ2FjeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWx0ZXJTdGFjay5sZW5ndGggPT09IDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdEZpbHRlclN0YWNrWzBdLnJlbmRlclRleHR1cmUgPSByZW5kZXJlci5yZW5kZXJUZXh0dXJlLmN1cnJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmaWx0ZXJTdGFjay5wdXNoKHN0YXRlKTtcblxuICAgICAgICBzdGF0ZS5yZXNvbHV0aW9uID0gcmVzb2x1dGlvbjtcblxuICAgICAgICBzdGF0ZS5sZWdhY3kgPSBsZWdhY3k7XG5cbiAgICAgICAgc3RhdGUudGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgICAgIHN0YXRlLnNvdXJjZUZyYW1lLmNvcHlGcm9tKHRhcmdldC5maWx0ZXJBcmVhIHx8IHRhcmdldC5nZXRCb3VuZHModHJ1ZSkpO1xuXG4gICAgICAgIHN0YXRlLnNvdXJjZUZyYW1lLnBhZChwYWRkaW5nKTtcbiAgICAgICAgaWYgKGF1dG9GaXQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRlLnNvdXJjZUZyYW1lLmZpdCh0aGlzLnJlbmRlcmVyLnJlbmRlclRleHR1cmUuc291cmNlRnJhbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcm91bmQgdG8gd2hvbGUgbnVtYmVyIGJhc2VkIG9uIHJlc29sdXRpb25cbiAgICAgICAgc3RhdGUuc291cmNlRnJhbWUuY2VpbChyZXNvbHV0aW9uKTtcblxuICAgICAgICBzdGF0ZS5yZW5kZXJUZXh0dXJlID0gdGhpcy5nZXRPcHRpbWFsRmlsdGVyVGV4dHVyZShzdGF0ZS5zb3VyY2VGcmFtZS53aWR0aCwgc3RhdGUuc291cmNlRnJhbWUuaGVpZ2h0LCByZXNvbHV0aW9uKTtcbiAgICAgICAgc3RhdGUuZmlsdGVycyA9IGZpbHRlcnM7XG5cbiAgICAgICAgc3RhdGUuZGVzdGluYXRpb25GcmFtZS53aWR0aCA9IHN0YXRlLnJlbmRlclRleHR1cmUud2lkdGg7XG4gICAgICAgIHN0YXRlLmRlc3RpbmF0aW9uRnJhbWUuaGVpZ2h0ID0gc3RhdGUucmVuZGVyVGV4dHVyZS5oZWlnaHQ7XG5cbiAgICAgICAgc3RhdGUucmVuZGVyVGV4dHVyZS5maWx0ZXJGcmFtZSA9IHN0YXRlLnNvdXJjZUZyYW1lO1xuXG4gICAgICAgIHJlbmRlcmVyLnJlbmRlclRleHR1cmUuYmluZChzdGF0ZS5yZW5kZXJUZXh0dXJlLCBzdGF0ZS5zb3VyY2VGcmFtZSk7Ly8gLywgc3RhdGUuZGVzdGluYXRpb25GcmFtZSk7XG4gICAgICAgIHJlbmRlcmVyLnJlbmRlclRleHR1cmUuY2xlYXIoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUG9wcyBvZmYgdGhlIGZpbHRlciBhbmQgYXBwbGllcyBpdC5cbiAgICAgKlxuICAgICAqL1xuICAgIEZpbHRlclN5c3RlbS5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gcG9wICgpXG4gICAge1xuICAgICAgICB2YXIgZmlsdGVyU3RhY2sgPSB0aGlzLmRlZmF1bHRGaWx0ZXJTdGFjaztcbiAgICAgICAgdmFyIHN0YXRlID0gZmlsdGVyU3RhY2sucG9wKCk7XG4gICAgICAgIHZhciBmaWx0ZXJzID0gc3RhdGUuZmlsdGVycztcblxuICAgICAgICB0aGlzLmFjdGl2ZVN0YXRlID0gc3RhdGU7XG5cbiAgICAgICAgdmFyIGdsb2JhbFVuaWZvcm1zID0gdGhpcy5nbG9iYWxVbmlmb3Jtcy51bmlmb3JtcztcblxuICAgICAgICBnbG9iYWxVbmlmb3Jtcy5vdXRwdXRGcmFtZSA9IHN0YXRlLnNvdXJjZUZyYW1lO1xuICAgICAgICBnbG9iYWxVbmlmb3Jtcy5yZXNvbHV0aW9uID0gc3RhdGUucmVzb2x1dGlvbjtcblxuICAgICAgICB2YXIgaW5wdXRTaXplID0gZ2xvYmFsVW5pZm9ybXMuaW5wdXRTaXplO1xuICAgICAgICB2YXIgaW5wdXRQaXhlbCA9IGdsb2JhbFVuaWZvcm1zLmlucHV0UGl4ZWw7XG4gICAgICAgIHZhciBpbnB1dENsYW1wID0gZ2xvYmFsVW5pZm9ybXMuaW5wdXRDbGFtcDtcblxuICAgICAgICBpbnB1dFNpemVbMF0gPSBzdGF0ZS5kZXN0aW5hdGlvbkZyYW1lLndpZHRoO1xuICAgICAgICBpbnB1dFNpemVbMV0gPSBzdGF0ZS5kZXN0aW5hdGlvbkZyYW1lLmhlaWdodDtcbiAgICAgICAgaW5wdXRTaXplWzJdID0gMS4wIC8gaW5wdXRTaXplWzBdO1xuICAgICAgICBpbnB1dFNpemVbM10gPSAxLjAgLyBpbnB1dFNpemVbMV07XG5cbiAgICAgICAgaW5wdXRQaXhlbFswXSA9IGlucHV0U2l6ZVswXSAqIHN0YXRlLnJlc29sdXRpb247XG4gICAgICAgIGlucHV0UGl4ZWxbMV0gPSBpbnB1dFNpemVbMV0gKiBzdGF0ZS5yZXNvbHV0aW9uO1xuICAgICAgICBpbnB1dFBpeGVsWzJdID0gMS4wIC8gaW5wdXRQaXhlbFswXTtcbiAgICAgICAgaW5wdXRQaXhlbFszXSA9IDEuMCAvIGlucHV0UGl4ZWxbMV07XG5cbiAgICAgICAgaW5wdXRDbGFtcFswXSA9IDAuNSAqIGlucHV0UGl4ZWxbMl07XG4gICAgICAgIGlucHV0Q2xhbXBbMV0gPSAwLjUgKiBpbnB1dFBpeGVsWzNdO1xuICAgICAgICBpbnB1dENsYW1wWzJdID0gKHN0YXRlLnNvdXJjZUZyYW1lLndpZHRoICogaW5wdXRTaXplWzJdKSAtICgwLjUgKiBpbnB1dFBpeGVsWzJdKTtcbiAgICAgICAgaW5wdXRDbGFtcFszXSA9IChzdGF0ZS5zb3VyY2VGcmFtZS5oZWlnaHQgKiBpbnB1dFNpemVbM10pIC0gKDAuNSAqIGlucHV0UGl4ZWxbM10pO1xuXG4gICAgICAgIC8vIG9ubHkgdXBkYXRlIHRoZSByZWN0IGlmIGl0cyBsZWdhY3kuLlxuICAgICAgICBpZiAoc3RhdGUubGVnYWN5KVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZmlsdGVyQXJlYSA9IGdsb2JhbFVuaWZvcm1zLmZpbHRlckFyZWE7XG5cbiAgICAgICAgICAgIGZpbHRlckFyZWFbMF0gPSBzdGF0ZS5kZXN0aW5hdGlvbkZyYW1lLndpZHRoO1xuICAgICAgICAgICAgZmlsdGVyQXJlYVsxXSA9IHN0YXRlLmRlc3RpbmF0aW9uRnJhbWUuaGVpZ2h0O1xuICAgICAgICAgICAgZmlsdGVyQXJlYVsyXSA9IHN0YXRlLnNvdXJjZUZyYW1lLng7XG4gICAgICAgICAgICBmaWx0ZXJBcmVhWzNdID0gc3RhdGUuc291cmNlRnJhbWUueTtcblxuICAgICAgICAgICAgZ2xvYmFsVW5pZm9ybXMuZmlsdGVyQ2xhbXAgPSBnbG9iYWxVbmlmb3Jtcy5pbnB1dENsYW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nbG9iYWxVbmlmb3Jtcy51cGRhdGUoKTtcblxuICAgICAgICB2YXIgbGFzdFN0YXRlID0gZmlsdGVyU3RhY2tbZmlsdGVyU3RhY2subGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKGZpbHRlcnMubGVuZ3RoID09PSAxKVxuICAgICAgICB7XG4gICAgICAgICAgICBmaWx0ZXJzWzBdLmFwcGx5KHRoaXMsIHN0YXRlLnJlbmRlclRleHR1cmUsIGxhc3RTdGF0ZS5yZW5kZXJUZXh0dXJlLCBmYWxzZSwgc3RhdGUpO1xuXG4gICAgICAgICAgICB0aGlzLnJldHVybkZpbHRlclRleHR1cmUoc3RhdGUucmVuZGVyVGV4dHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZmxpcCA9IHN0YXRlLnJlbmRlclRleHR1cmU7XG4gICAgICAgICAgICB2YXIgZmxvcCA9IHRoaXMuZ2V0T3B0aW1hbEZpbHRlclRleHR1cmUoXG4gICAgICAgICAgICAgICAgZmxpcC53aWR0aCxcbiAgICAgICAgICAgICAgICBmbGlwLmhlaWdodCxcbiAgICAgICAgICAgICAgICBzdGF0ZS5yZXNvbHV0aW9uXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmbG9wLmZpbHRlckZyYW1lID0gZmxpcC5maWx0ZXJGcmFtZTtcblxuICAgICAgICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGggLSAxOyArK2kpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsdGVyc1tpXS5hcHBseSh0aGlzLCBmbGlwLCBmbG9wLCB0cnVlLCBzdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgdCA9IGZsaXA7XG5cbiAgICAgICAgICAgICAgICBmbGlwID0gZmxvcDtcbiAgICAgICAgICAgICAgICBmbG9wID0gdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmlsdGVyc1tpXS5hcHBseSh0aGlzLCBmbGlwLCBsYXN0U3RhdGUucmVuZGVyVGV4dHVyZSwgZmFsc2UsIHN0YXRlKTtcblxuICAgICAgICAgICAgdGhpcy5yZXR1cm5GaWx0ZXJUZXh0dXJlKGZsaXApO1xuICAgICAgICAgICAgdGhpcy5yZXR1cm5GaWx0ZXJUZXh0dXJlKGZsb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZVBvb2wucHVzaChzdGF0ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGEgZmlsdGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkZpbHRlcn0gZmlsdGVyIC0gVGhlIGZpbHRlciB0byBkcmF3LlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSBpbnB1dCAtIFRoZSBpbnB1dCByZW5kZXIgdGFyZ2V0LlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSBvdXRwdXQgLSBUaGUgdGFyZ2V0IHRvIG91dHB1dCB0by5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsZWFyIC0gU2hvdWxkIHRoZSBvdXRwdXQgYmUgY2xlYXJlZCBiZWZvcmUgcmVuZGVyaW5nIHRvIGl0XG4gICAgICovXG4gICAgRmlsdGVyU3lzdGVtLnByb3RvdHlwZS5hcHBseUZpbHRlciA9IGZ1bmN0aW9uIGFwcGx5RmlsdGVyIChmaWx0ZXIsIGlucHV0LCBvdXRwdXQsIGNsZWFyKVxuICAgIHtcbiAgICAgICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblxuICAgICAgICByZW5kZXJlci5yZW5kZXJUZXh0dXJlLmJpbmQob3V0cHV0LCBvdXRwdXQgPyBvdXRwdXQuZmlsdGVyRnJhbWUgOiBudWxsKTtcblxuICAgICAgICBpZiAoY2xlYXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGdsLmRpc2FibGUoZ2wuU0NJU1NPUl9URVNUKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlclRleHR1cmUuY2xlYXIoKTtcbiAgICAgICAgICAgIC8vIGdsLmVuYWJsZShnbC5TQ0lTU09SX1RFU1QpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IHRoZSB1bmlmb3Jtcy4uXG4gICAgICAgIGZpbHRlci51bmlmb3Jtcy51U2FtcGxlciA9IGlucHV0O1xuICAgICAgICBmaWx0ZXIudW5pZm9ybXMuZmlsdGVyR2xvYmFscyA9IHRoaXMuZ2xvYmFsVW5pZm9ybXM7XG5cbiAgICAgICAgLy8gVE9ETyBtYWtlIGl0IHNvIHRoYXQgdGhlIG9yZGVyIG9mIHRoaXMgZG9lcyBub3QgbWF0dGVyLi5cbiAgICAgICAgLy8gYmVjYXVzZSBpdCBkb2VzIGF0IHRoZSBtb21lbnQgY29zIG9mIGdsb2JhbCB1bmlmb3Jtcy5cbiAgICAgICAgLy8gdGhleSBuZWVkIHRvIGdldCByZXN5bmNlZFxuXG4gICAgICAgIHJlbmRlcmVyLnN0YXRlLnNldChmaWx0ZXIuc3RhdGUpO1xuICAgICAgICByZW5kZXJlci5zaGFkZXIuYmluZChmaWx0ZXIpO1xuXG4gICAgICAgIGlmIChmaWx0ZXIubGVnYWN5KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnF1YWRVdi5tYXAoaW5wdXQuX2ZyYW1lLCBpbnB1dC5maWx0ZXJGcmFtZSk7XG5cbiAgICAgICAgICAgIHJlbmRlcmVyLmdlb21ldHJ5LmJpbmQodGhpcy5xdWFkVXYpO1xuICAgICAgICAgICAgcmVuZGVyZXIuZ2VvbWV0cnkuZHJhdyhEUkFXX01PREVTLlRSSUFOR0xFUyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICByZW5kZXJlci5nZW9tZXRyeS5iaW5kKHRoaXMucXVhZCk7XG4gICAgICAgICAgICByZW5kZXJlci5nZW9tZXRyeS5kcmF3KERSQVdfTU9ERVMuVFJJQU5HTEVfU1RSSVApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IF9pbnB1dCBub3JtYWxpemVkIGNvb3JkaW5hdGVzXyB0byB0aGlzIG1hdHJpeCB0byBnZXQgX3Nwcml0ZSB0ZXh0dXJlIG5vcm1hbGl6ZWQgY29vcmRpbmF0ZXNfLlxuICAgICAqXG4gICAgICogVXNlIGBvdXRwdXRNYXRyaXggKiB2VGV4dHVyZUNvb3JkYCBpbiB0aGUgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gb3V0cHV0TWF0cml4IC0gVGhlIG1hdHJpeCB0byBvdXRwdXQgdG8uXG4gICAgICogQHBhcmFtIHtQSVhJLlNwcml0ZX0gc3ByaXRlIC0gVGhlIHNwcml0ZSB0byBtYXAgdG8uXG4gICAgICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoZSBtYXBwZWQgbWF0cml4LlxuICAgICAqL1xuICAgIEZpbHRlclN5c3RlbS5wcm90b3R5cGUuY2FsY3VsYXRlU3ByaXRlTWF0cml4ID0gZnVuY3Rpb24gY2FsY3VsYXRlU3ByaXRlTWF0cml4IChvdXRwdXRNYXRyaXgsIHNwcml0ZSlcbiAgICB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzLmFjdGl2ZVN0YXRlO1xuICAgICAgICB2YXIgc291cmNlRnJhbWUgPSByZWYuc291cmNlRnJhbWU7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbkZyYW1lID0gcmVmLmRlc3RpbmF0aW9uRnJhbWU7XG4gICAgICAgIHZhciByZWYkMSA9IHNwcml0ZS5fdGV4dHVyZTtcbiAgICAgICAgdmFyIG9yaWcgPSByZWYkMS5vcmlnO1xuICAgICAgICB2YXIgbWFwcGVkTWF0cml4ID0gb3V0cHV0TWF0cml4LnNldChkZXN0aW5hdGlvbkZyYW1lLndpZHRoLCAwLCAwLFxuICAgICAgICAgICAgZGVzdGluYXRpb25GcmFtZS5oZWlnaHQsIHNvdXJjZUZyYW1lLngsIHNvdXJjZUZyYW1lLnkpO1xuICAgICAgICB2YXIgd29ybGRUcmFuc2Zvcm0gPSBzcHJpdGUud29ybGRUcmFuc2Zvcm0uY29weVRvKE1hdHJpeC5URU1QX01BVFJJWCk7XG5cbiAgICAgICAgd29ybGRUcmFuc2Zvcm0uaW52ZXJ0KCk7XG4gICAgICAgIG1hcHBlZE1hdHJpeC5wcmVwZW5kKHdvcmxkVHJhbnNmb3JtKTtcbiAgICAgICAgbWFwcGVkTWF0cml4LnNjYWxlKDEuMCAvIG9yaWcud2lkdGgsIDEuMCAvIG9yaWcuaGVpZ2h0KTtcbiAgICAgICAgbWFwcGVkTWF0cml4LnRyYW5zbGF0ZShzcHJpdGUuYW5jaG9yLngsIHNwcml0ZS5hbmNob3IueSk7XG5cbiAgICAgICAgcmV0dXJuIG1hcHBlZE1hdHJpeDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhpcyBGaWx0ZXIgU3lzdGVtLlxuICAgICAqL1xuICAgIEZpbHRlclN5c3RlbS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbiAgICB7XG4gICAgICAgIC8vIFRob3NlIHRleHR1cmVzIGhhcyB0byBiZSBkZXN0cm95ZWQgYnkgUmVuZGVyVGV4dHVyZVN5c3RlbSBvciBGcmFtZWJ1ZmZlclN5c3RlbVxuICAgICAgICB0aGlzLnRleHR1cmVQb29sLmNsZWFyKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIFBvd2VyLW9mLVR3byByZW5kZXIgdGV4dHVyZSBvciBmdWxsU2NyZWVuIHRleHR1cmVcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluV2lkdGggLSBUaGUgbWluaW11bSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRleHR1cmUgaW4gcmVhbCBwaXhlbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbkhlaWdodCAtIFRoZSBtaW5pbXVtIGhlaWdodCBvZiB0aGUgcmVuZGVyIHRleHR1cmUgaW4gcmVhbCBwaXhlbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyZXNvbHV0aW9uPTFdIC0gVGhlIHJlc29sdXRpb24gb2YgdGhlIHJlbmRlciB0ZXh0dXJlLlxuICAgICAqIEByZXR1cm4ge1BJWEkuUmVuZGVyVGV4dHVyZX0gVGhlIG5ldyByZW5kZXIgdGV4dHVyZS5cbiAgICAgKi9cbiAgICBGaWx0ZXJTeXN0ZW0ucHJvdG90eXBlLmdldE9wdGltYWxGaWx0ZXJUZXh0dXJlID0gZnVuY3Rpb24gZ2V0T3B0aW1hbEZpbHRlclRleHR1cmUgKG1pbldpZHRoLCBtaW5IZWlnaHQsIHJlc29sdXRpb24pXG4gICAge1xuICAgICAgICBpZiAoIHJlc29sdXRpb24gPT09IHZvaWQgMCApIHJlc29sdXRpb24gPSAxO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnRleHR1cmVQb29sLmdldE9wdGltYWxUZXh0dXJlKG1pbldpZHRoLCBtaW5IZWlnaHQsIHJlc29sdXRpb24pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGV4dHJhIHJlbmRlciB0ZXh0dXJlIHRvIHVzZSBpbnNpZGUgY3VycmVudCBmaWx0ZXJcbiAgICAgKiBUbyBiZSBjb21wbGlhbnQgd2l0aCBvbGRlciBmaWx0ZXJzLCB5b3UgY2FuIHVzZSBwYXJhbXMgaW4gYW55IG9yZGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gW2lucHV0XSByZW5kZXJUZXh0dXJlIGZyb20gd2hpY2ggc2l6ZSBhbmQgcmVzb2x1dGlvbiB3aWxsIGJlIGNvcGllZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmVzb2x1dGlvbl0gb3ZlcnJpZGUgcmVzb2x1dGlvbiBvZiB0aGUgcmVuZGVyVGV4dHVyZVxuICAgICAqIEByZXR1cm5zIHtQSVhJLlJlbmRlclRleHR1cmV9XG4gICAgICovXG4gICAgRmlsdGVyU3lzdGVtLnByb3RvdHlwZS5nZXRGaWx0ZXJUZXh0dXJlID0gZnVuY3Rpb24gZ2V0RmlsdGVyVGV4dHVyZSAoaW5wdXQsIHJlc29sdXRpb24pXG4gICAge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHN3YXAgPSBpbnB1dDtcblxuICAgICAgICAgICAgaW5wdXQgPSByZXNvbHV0aW9uO1xuICAgICAgICAgICAgcmVzb2x1dGlvbiA9IHN3YXA7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGlucHV0IHx8IHRoaXMuYWN0aXZlU3RhdGUucmVuZGVyVGV4dHVyZTtcblxuICAgICAgICB2YXIgZmlsdGVyVGV4dHVyZSA9IHRoaXMudGV4dHVyZVBvb2wuZ2V0T3B0aW1hbFRleHR1cmUoaW5wdXQud2lkdGgsIGlucHV0LmhlaWdodCwgcmVzb2x1dGlvbiB8fCBpbnB1dC5yZXNvbHV0aW9uKTtcblxuICAgICAgICBmaWx0ZXJUZXh0dXJlLmZpbHRlckZyYW1lID0gaW5wdXQuZmlsdGVyRnJhbWU7XG5cbiAgICAgICAgcmV0dXJuIGZpbHRlclRleHR1cmU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZyZWVzIGEgcmVuZGVyIHRleHR1cmUgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IHJlbmRlclRleHR1cmUgLSBUaGUgcmVuZGVyVGFyZ2V0IHRvIGZyZWVcbiAgICAgKi9cbiAgICBGaWx0ZXJTeXN0ZW0ucHJvdG90eXBlLnJldHVybkZpbHRlclRleHR1cmUgPSBmdW5jdGlvbiByZXR1cm5GaWx0ZXJUZXh0dXJlIChyZW5kZXJUZXh0dXJlKVxuICAgIHtcbiAgICAgICAgdGhpcy50ZXh0dXJlUG9vbC5yZXR1cm5UZXh0dXJlKHJlbmRlclRleHR1cmUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbXB0aWVzIHRoZSB0ZXh0dXJlIHBvb2wuXG4gICAgICovXG4gICAgRmlsdGVyU3lzdGVtLnByb3RvdHlwZS5lbXB0eVBvb2wgPSBmdW5jdGlvbiBlbXB0eVBvb2wgKClcbiAgICB7XG4gICAgICAgIHRoaXMudGV4dHVyZVBvb2wuY2xlYXIodHJ1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGNhbGxzIGB0ZXh0dXJlUG9vbC5yZXNpemUoKWAsIGFmZmVjdHMgZnVsbFNjcmVlbiByZW5kZXJUZXh0dXJlc1xuICAgICAqL1xuICAgIEZpbHRlclN5c3RlbS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gcmVzaXplICgpXG4gICAge1xuICAgICAgICB0aGlzLnRleHR1cmVQb29sLnNldFNjcmVlblNpemUodGhpcy5yZW5kZXJlci52aWV3KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEZpbHRlclN5c3RlbTtcbn0oU3lzdGVtKSk7XG5cbi8qKlxuICogQmFzZSBmb3IgYSBjb21tb24gb2JqZWN0IHJlbmRlcmVyIHRoYXQgY2FuIGJlIHVzZWQgYXMgYVxuICogc3lzdGVtIHJlbmRlcmVyIHBsdWdpbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuU3lzdGVtXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgT2JqZWN0UmVuZGVyZXIgPSBmdW5jdGlvbiBPYmplY3RSZW5kZXJlcihyZW5kZXJlcilcbntcbiAgICAvKipcbiAgICAgKiBUaGUgcmVuZGVyZXIgdGhpcyBtYW5hZ2VyIHdvcmtzIGZvci5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuUmVuZGVyZXJ9XG4gICAgICovXG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xufTtcblxuLyoqXG4gKiBTdHViIG1ldGhvZCB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIGVtcHR5IHRoZSBjdXJyZW50XG4gKiBiYXRjaCBieSByZW5kZXJpbmcgb2JqZWN0cyBub3cuXG4gKi9cbk9iamVjdFJlbmRlcmVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoICgpXG57XG4gICAgLy8gZmx1c2ghXG59O1xuXG4vKipcbiAqIEdlbmVyaWMgZGVzdHJ1Y3Rpb24gbWV0aG9kIHRoYXQgZnJlZXMgYWxsIHJlc291cmNlcy4gVGhpc1xuICogc2hvdWxkIGJlIGNhbGxlZCBieSBzdWJjbGFzc2VzLlxuICovXG5PYmplY3RSZW5kZXJlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbntcbiAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcbn07XG5cbi8qKlxuICogU3R1YiBtZXRob2QgdGhhdCBpbml0aWFsaXplcyBhbnkgc3RhdGUgcmVxdWlyZWQgYmVmb3JlXG4gKiByZW5kZXJpbmcgc3RhcnRzLiBJdCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgYHByZXJlbmRlcmBcbiAqIHNpZ25hbCwgd2hpY2ggb2NjdXJzIGV2ZXJ5IGZyYW1lLCBpbiB0aGF0IGl0IGlzIGNhbGxlZFxuICogd2hlbmV2ZXIgYW4gb2JqZWN0IHJlcXVlc3RzIF90aGlzXyByZW5kZXJlciBzcGVjaWZpY2FsbHkuXG4gKi9cbk9iamVjdFJlbmRlcmVyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIHN0YXJ0ICgpXG57XG4gICAgLy8gc2V0IHRoZSBzaGFkZXIuLlxufTtcblxuLyoqXG4gKiBTdG9wcyB0aGUgcmVuZGVyZXIuIEl0IHNob3VsZCBmcmVlIHVwIGFueSBzdGF0ZSBhbmRcbiAqIGJlY29tZSBkb3JtYW50LlxuICovXG5PYmplY3RSZW5kZXJlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIHN0b3AgKClcbntcbiAgICB0aGlzLmZsdXNoKCk7XG59O1xuXG4vKipcbiAqIEtlZXBzIHRoZSBvYmplY3QgdG8gcmVuZGVyLiBJdCBkb2Vzbid0IGhhdmUgdG8gYmVcbiAqIHJlbmRlcmVkIGltbWVkaWF0ZWx5LlxuICpcbiAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBvYmplY3QgLSBUaGUgb2JqZWN0IHRvIHJlbmRlci5cbiAqL1xuT2JqZWN0UmVuZGVyZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAob2JqZWN0KSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG57XG4gICAgLy8gcmVuZGVyIHRoZSBvYmplY3Rcbn07XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIGJhdGNoaW5nLlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5TeXN0ZW1cbiAqIEBtZW1iZXJvZiBQSVhJLnN5c3RlbXNcbiAqL1xudmFyIEJhdGNoU3lzdGVtID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU3lzdGVtKSB7XG4gICAgZnVuY3Rpb24gQmF0Y2hTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGVtcHR5IHJlbmRlcmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLk9iamVjdFJlbmRlcmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbXB0eVJlbmRlcmVyID0gbmV3IE9iamVjdFJlbmRlcmVyKHJlbmRlcmVyKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGN1cnJlbnRseSBhY3RpdmUgT2JqZWN0UmVuZGVyZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuT2JqZWN0UmVuZGVyZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnJlbnRSZW5kZXJlciA9IHRoaXMuZW1wdHlSZW5kZXJlcjtcbiAgICB9XG5cbiAgICBpZiAoIFN5c3RlbSApIEJhdGNoU3lzdGVtLl9fcHJvdG9fXyA9IFN5c3RlbTtcbiAgICBCYXRjaFN5c3RlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTeXN0ZW0gJiYgU3lzdGVtLnByb3RvdHlwZSApO1xuICAgIEJhdGNoU3lzdGVtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJhdGNoU3lzdGVtO1xuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgY3VycmVudCByZW5kZXJlciB0byB0aGUgb25lIGdpdmVuIGluIHBhcmFtZXRlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLk9iamVjdFJlbmRlcmVyfSBvYmplY3RSZW5kZXJlciAtIFRoZSBvYmplY3QgcmVuZGVyZXIgdG8gdXNlLlxuICAgICAqL1xuICAgIEJhdGNoU3lzdGVtLnByb3RvdHlwZS5zZXRPYmplY3RSZW5kZXJlciA9IGZ1bmN0aW9uIHNldE9iamVjdFJlbmRlcmVyIChvYmplY3RSZW5kZXJlcilcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRSZW5kZXJlciA9PT0gb2JqZWN0UmVuZGVyZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3VycmVudFJlbmRlcmVyLnN0b3AoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50UmVuZGVyZXIgPSBvYmplY3RSZW5kZXJlcjtcblxuICAgICAgICB0aGlzLmN1cnJlbnRSZW5kZXJlci5zdGFydCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgaWYgeW91IHdpc2ggdG8gZG8gc29tZSBjdXN0b20gcmVuZGVyaW5nXG4gICAgICogSXQgd2lsbCBiYXNpY2FsbHkgcmVuZGVyIGFueXRoaW5nIHRoYXQgbWF5IGJlIGJhdGNoZWQgdXAgc3VjaCBhcyBzcHJpdGVzXG4gICAgICovXG4gICAgQmF0Y2hTeXN0ZW0ucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gZmx1c2ggKClcbiAgICB7XG4gICAgICAgIHRoaXMuc2V0T2JqZWN0UmVuZGVyZXIodGhpcy5lbXB0eVJlbmRlcmVyKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIHN5c3RlbSB0byBhbiBlbXB0eSByZW5kZXJlclxuICAgICAqL1xuICAgIEJhdGNoU3lzdGVtLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0ICgpXG4gICAge1xuICAgICAgICB0aGlzLnNldE9iamVjdFJlbmRlcmVyKHRoaXMuZW1wdHlSZW5kZXJlcik7XG4gICAgfTtcblxuICAgIHJldHVybiBCYXRjaFN5c3RlbTtcbn0oU3lzdGVtKSk7XG5cbi8qKlxuICogVGhlIG1heGltdW0gc3VwcG9ydCBmb3IgdXNpbmcgV2ViR0wuIElmIGEgZGV2aWNlIGRvZXMgbm90XG4gKiBzdXBwb3J0IFdlYkdMIHZlcnNpb24sIGZvciBpbnN0YW5jZSBXZWJHTCAyLCBpdCB3aWxsIHN0aWxsXG4gKiBhdHRlbXB0IHRvIGZhbGxiYWNrIHN1cHBvcnQgdG8gV2ViR0wgMS4gSWYgeW91IHdhbnQgdG9cbiAqIGV4cGxpY2l0bHkgcmVtb3ZlIGZlYXR1cmUgc3VwcG9ydCB0byB0YXJnZXQgYSBtb3JlIHN0YWJsZVxuICogYmFzZWxpbmUsIHByZWZlciBhIGxvd2VyIGVudmlyb25tZW50LlxuICpcbiAqIER1ZSB0byB7QGxpbmsgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9OTM0ODIzfGJ1ZyBpbiBjaHJvbWl1bX1cbiAqIHdlIGRpc2FibGUgd2ViZ2wyIGJ5IGRlZmF1bHQgZm9yIGFsbCBub24tYXBwbGUgbW9iaWxlIGRldmljZXMuXG4gKlxuICogQHN0YXRpY1xuICogQG5hbWUgUFJFRkVSX0VOVlxuICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdCBQSVhJLkVOVi5XRUJHTDJcbiAqL1xuc2V0dGluZ3MuUFJFRkVSX0VOViA9IGlzTW9iaWxlLmFueSA/IEVOVi5XRUJHTCA6IEVOVi5XRUJHTDI7XG5cbnZhciBDT05URVhUX1VJRCA9IDA7XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIHRoZSBjb250ZXh0LlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5TeXN0ZW1cbiAqIEBtZW1iZXJvZiBQSVhJLnN5c3RlbXNcbiAqL1xudmFyIENvbnRleHRTeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBDb250ZXh0U3lzdGVtKHJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgU3lzdGVtLmNhbGwodGhpcywgcmVuZGVyZXIpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFaXRoZXIgMSBvciAyIHRvIHJlZmxlY3QgdGhlIFdlYkdMIHZlcnNpb24gYmVpbmcgdXNlZFxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53ZWJHTFZlcnNpb24gPSAxO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFeHRlbnNpb25zIGJlaW5nIHVzZWRcbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQHByb3BlcnR5IHtXRUJHTF9kcmF3X2J1ZmZlcnN9IGRyYXdCdWZmZXJzIC0gV2ViR0wgdjEgZXh0ZW5zaW9uXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7V0VCR0xfZGVwdGhfdGV4dHVyZX0gZGVwdGhUZXh0dXJlIC0gV2ViR0wgdjEgZXh0ZW5zaW9uXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T0VTX3RleHR1cmVfZmxvYXR9IGZsb2F0VGV4dHVyZSAtIFdlYkdMIHYxIGV4dGVuc2lvblxuICAgICAgICAgKiBAcHJvcGVydHkge1dFQkdMX2xvc2VfY29udGV4dH0gbG9zZUNvbnRleHQgLSBXZWJHTCB2MSBleHRlbnNpb25cbiAgICAgICAgICogQHByb3BlcnR5IHtPRVNfdmVydGV4X2FycmF5X29iamVjdH0gdmVydGV4QXJyYXlPYmplY3QgLSBXZWJHTCB2MSBleHRlbnNpb25cbiAgICAgICAgICogQHByb3BlcnR5IHtFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWN9IGFuaXNvdHJvcGljRmlsdGVyaW5nIC0gV2ViR0wgdjEgYW5kIHYyIGV4dGVuc2lvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5leHRlbnNpb25zID0ge307XG5cbiAgICAgICAgLy8gQmluZCBmdW5jdGlvbnNcbiAgICAgICAgdGhpcy5oYW5kbGVDb250ZXh0TG9zdCA9IHRoaXMuaGFuZGxlQ29udGV4dExvc3QuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDb250ZXh0UmVzdG9yZWQgPSB0aGlzLmhhbmRsZUNvbnRleHRSZXN0b3JlZC5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHJlbmRlcmVyLnZpZXcuYWRkRXZlbnRMaXN0ZW5lcignd2ViZ2xjb250ZXh0bG9zdCcsIHRoaXMuaGFuZGxlQ29udGV4dExvc3QsIGZhbHNlKTtcbiAgICAgICAgcmVuZGVyZXIudmlldy5hZGRFdmVudExpc3RlbmVyKCd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBDb250ZXh0U3lzdGVtLl9fcHJvdG9fXyA9IFN5c3RlbTtcbiAgICBDb250ZXh0U3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgQ29udGV4dFN5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb250ZXh0U3lzdGVtO1xuXG4gICAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgaXNMb3N0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgICAvKipcbiAgICAgKiBgdHJ1ZWAgaWYgdGhlIGNvbnRleHQgaXMgbG9zdFxuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmlzTG9zdC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICghdGhpcy5nbCB8fCB0aGlzLmdsLmlzQ29udGV4dExvc3QoKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0aGUgY29udGV4dCBjaGFuZ2UgZXZlbnRcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgbmV3IHdlYmdsIGNvbnRleHRcbiAgICAgKi9cbiAgICBDb250ZXh0U3lzdGVtLnByb3RvdHlwZS5jb250ZXh0Q2hhbmdlID0gZnVuY3Rpb24gY29udGV4dENoYW5nZSAoZ2wpXG4gICAge1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5DT05URVhUX1VJRCA9IENPTlRFWFRfVUlEKys7XG5cbiAgICAgICAgLy8gcmVzdG9yZSBhIGNvbnRleHQgaWYgaXQgd2FzIHByZXZpb3VzbHkgbG9zdFxuICAgICAgICBpZiAoZ2wuaXNDb250ZXh0TG9zdCgpICYmIGdsLmdldEV4dGVuc2lvbignV0VCR0xfbG9zZV9jb250ZXh0JykpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLmdldEV4dGVuc2lvbignV0VCR0xfbG9zZV9jb250ZXh0JykucmVzdG9yZUNvbnRleHQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoZSBjb250ZXh0XG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gV2ViR0wgY29udGV4dFxuICAgICAqL1xuICAgIENvbnRleHRTeXN0ZW0ucHJvdG90eXBlLmluaXRGcm9tQ29udGV4dCA9IGZ1bmN0aW9uIGluaXRGcm9tQ29udGV4dCAoZ2wpXG4gICAge1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMudmFsaWRhdGVDb250ZXh0KGdsKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5nbCA9IGdsO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLkNPTlRFWFRfVUlEID0gQ09OVEVYVF9VSUQrKztcbiAgICAgICAgdGhpcy5yZW5kZXJlci5ydW5uZXJzLmNvbnRleHRDaGFuZ2UucnVuKGdsKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBmcm9tIGNvbnRleHQgb3B0aW9uc1xuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxDYW52YXNFbGVtZW50L2dldENvbnRleHRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIGNvbnRleHQgYXR0cmlidXRlc1xuICAgICAqL1xuICAgIENvbnRleHRTeXN0ZW0ucHJvdG90eXBlLmluaXRGcm9tT3B0aW9ucyA9IGZ1bmN0aW9uIGluaXRGcm9tT3B0aW9ucyAob3B0aW9ucylcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuY3JlYXRlQ29udGV4dCh0aGlzLnJlbmRlcmVyLnZpZXcsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuaW5pdEZyb21Db250ZXh0KGdsKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGNsYXNzIHRvIGNyZWF0ZSBhIFdlYkdMIENvbnRleHRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjYW52YXMge0hUTUxDYW52YXNFbGVtZW50fSB0aGUgY2FudmFzIGVsZW1lbnQgdGhhdCB3ZSB3aWxsIGdldCB0aGUgY29udGV4dCBmcm9tXG4gICAgICogQHBhcmFtIG9wdGlvbnMge29iamVjdH0gQW4gb3B0aW9ucyBvYmplY3QgdGhhdCBnZXRzIHBhc3NlZCBpbiB0byB0aGUgY2FudmFzIGVsZW1lbnQgY29udGFpbmluZyB0aGUgY29udGV4dCBhdHRyaWJ1dGVzXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvSFRNTENhbnZhc0VsZW1lbnQvZ2V0Q29udGV4dFxuICAgICAqIEByZXR1cm4ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gdGhlIFdlYkdMIGNvbnRleHRcbiAgICAgKi9cbiAgICBDb250ZXh0U3lzdGVtLnByb3RvdHlwZS5jcmVhdGVDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlQ29udGV4dCAoY2FudmFzLCBvcHRpb25zKVxuICAgIHtcbiAgICAgICAgdmFyIGdsO1xuXG4gICAgICAgIGlmIChzZXR0aW5ncy5QUkVGRVJfRU5WID49IEVOVi5XRUJHTDIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsMicsIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLndlYkdMVmVyc2lvbiA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLndlYkdMVmVyc2lvbiA9IDE7XG5cbiAgICAgICAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJywgb3B0aW9ucylcbiAgICAgICAgICAgIHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgaWYgKCFnbClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBmYWlsLCBub3QgYWJsZSB0byBnZXQgYSBjb250ZXh0XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBXZWJHTC4gVHJ5IHVzaW5nIHRoZSBjYW52YXMgcmVuZGVyZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcblxuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbnMoKTtcblxuICAgICAgICByZXR1cm4gZ2w7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEF1dG8tcG9wdWxhdGUgdGhlIGV4dGVuc2lvbnNcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBDb250ZXh0U3lzdGVtLnByb3RvdHlwZS5nZXRFeHRlbnNpb25zID0gZnVuY3Rpb24gZ2V0RXh0ZW5zaW9ucyAoKVxuICAgIHtcbiAgICAgICAgLy8gdGltZSB0byBzZXQgdXAgZGVmYXVsdCBleHRlbnNpb25zIHRoYXQgUGl4aSB1c2VzLlxuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGdsID0gcmVmLmdsO1xuXG4gICAgICAgIGlmICh0aGlzLndlYkdMVmVyc2lvbiA9PT0gMSlcbiAgICAgICAge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmV4dGVuc2lvbnMsIHtcbiAgICAgICAgICAgICAgICBkcmF3QnVmZmVyczogZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9kcmF3X2J1ZmZlcnMnKSxcbiAgICAgICAgICAgICAgICBkZXB0aFRleHR1cmU6IGdsLmdldEV4dGVuc2lvbignV0VCS0lUX1dFQkdMX2RlcHRoX3RleHR1cmUnKSxcbiAgICAgICAgICAgICAgICBsb3NlQ29udGV4dDogZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9sb3NlX2NvbnRleHQnKSxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhBcnJheU9iamVjdDogZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcpXG4gICAgICAgICAgICAgICAgICAgIHx8IGdsLmdldEV4dGVuc2lvbignTU9aX09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JylcbiAgICAgICAgICAgICAgICAgICAgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJLSVRfT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnKSxcbiAgICAgICAgICAgICAgICBhbmlzb3Ryb3BpY0ZpbHRlcmluZzogZ2wuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSxcbiAgICAgICAgICAgICAgICB1aW50MzJFbGVtZW50SW5kZXg6IGdsLmdldEV4dGVuc2lvbignT0VTX2VsZW1lbnRfaW5kZXhfdWludCcpLFxuICAgICAgICAgICAgICAgIC8vIEZsb2F0cyBhbmQgaGFsZi1mbG9hdHNcbiAgICAgICAgICAgICAgICBmbG9hdFRleHR1cmU6IGdsLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXQnKSxcbiAgICAgICAgICAgICAgICBmbG9hdFRleHR1cmVMaW5lYXI6IGdsLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyksXG4gICAgICAgICAgICAgICAgdGV4dHVyZUhhbGZGbG9hdDogZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0JyksXG4gICAgICAgICAgICAgICAgdGV4dHVyZUhhbGZGbG9hdExpbmVhcjogZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy53ZWJHTFZlcnNpb24gPT09IDIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5leHRlbnNpb25zLCB7XG4gICAgICAgICAgICAgICAgYW5pc290cm9waWNGaWx0ZXJpbmc6IGdsLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyksXG4gICAgICAgICAgICAgICAgLy8gRmxvYXRzIGFuZCBoYWxmLWZsb2F0c1xuICAgICAgICAgICAgICAgIGNvbG9yQnVmZmVyRmxvYXQ6IGdsLmdldEV4dGVuc2lvbignRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcpLFxuICAgICAgICAgICAgICAgIGZsb2F0VGV4dHVyZUxpbmVhcjogZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYSBsb3N0IHdlYmdsIGNvbnRleHRcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1dlYkdMQ29udGV4dEV2ZW50fSBldmVudCAtIFRoZSBjb250ZXh0IGxvc3QgZXZlbnQuXG4gICAgICovXG4gICAgQ29udGV4dFN5c3RlbS5wcm90b3R5cGUuaGFuZGxlQ29udGV4dExvc3QgPSBmdW5jdGlvbiBoYW5kbGVDb250ZXh0TG9zdCAoZXZlbnQpXG4gICAge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGEgcmVzdG9yZWQgd2ViZ2wgY29udGV4dFxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIENvbnRleHRTeXN0ZW0ucHJvdG90eXBlLmhhbmRsZUNvbnRleHRSZXN0b3JlZCA9IGZ1bmN0aW9uIGhhbmRsZUNvbnRleHRSZXN0b3JlZCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5ydW5uZXJzLmNvbnRleHRDaGFuZ2UucnVuKHRoaXMuZ2wpO1xuICAgIH07XG5cbiAgICBDb250ZXh0U3lzdGVtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxuICAgIHtcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLnJlbmRlcmVyLnZpZXc7XG5cbiAgICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyc1xuICAgICAgICB2aWV3LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmdsY29udGV4dGxvc3QnLCB0aGlzLmhhbmRsZUNvbnRleHRMb3N0KTtcbiAgICAgICAgdmlldy5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkKTtcblxuICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0obnVsbCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZXh0ZW5zaW9ucy5sb3NlQ29udGV4dClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5leHRlbnNpb25zLmxvc2VDb250ZXh0Lmxvc2VDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBwb3N0LXJlbmRlciBydW5uZXIgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBDb250ZXh0U3lzdGVtLnByb3RvdHlwZS5wb3N0cmVuZGVyID0gZnVuY3Rpb24gcG9zdHJlbmRlciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5nbC5mbHVzaCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBjb250ZXh0XG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gUmVuZGVyIGNvbnRleHRcbiAgICAgKi9cbiAgICBDb250ZXh0U3lzdGVtLnByb3RvdHlwZS52YWxpZGF0ZUNvbnRleHQgPSBmdW5jdGlvbiB2YWxpZGF0ZUNvbnRleHQgKGdsKVxuICAgIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBnbC5nZXRDb250ZXh0QXR0cmlidXRlcygpO1xuXG4gICAgICAgIC8vIHRoaXMgaXMgZ29pbmcgdG8gYmUgZmFpcmx5IHNpbXBsZSBmb3Igbm93Li4gYnV0IGF0IGxlYXN0IHdlIGhhdmUgcm9vbSB0byBncm93IVxuICAgICAgICBpZiAoIWF0dHJpYnV0ZXMuc3RlbmNpbClcbiAgICAgICAge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1Byb3ZpZGVkIFdlYkdMIGNvbnRleHQgZG9lcyBub3QgaGF2ZSBhIHN0ZW5jaWwgYnVmZmVyLCBtYXNrcyBtYXkgbm90IHJlbmRlciBjb3JyZWN0bHknKTtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG4gICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggQ29udGV4dFN5c3RlbS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gICAgcmV0dXJuIENvbnRleHRTeXN0ZW07XG59KFN5c3RlbSkpO1xuXG4vKipcbiAqIFN5c3RlbSBwbHVnaW4gdG8gdGhlIHJlbmRlcmVyIHRvIG1hbmFnZSBmcmFtZWJ1ZmZlcnMuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICovXG52YXIgRnJhbWVidWZmZXJTeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBGcmFtZWJ1ZmZlclN5c3RlbShyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIFN5c3RlbS5jYWxsKHRoaXMsIHJlbmRlcmVyKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSBsaXN0IG9mIG1hbmFnZWQgZnJhbWVidWZmZXJzXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuRnJhbWVidWZmZXJbXX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1hbmFnZWRGcmFtZWJ1ZmZlcnMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRnJhbWVidWZmZXIgdmFsdWUgdGhhdCBzaG93cyB0aGF0IHdlIGRvbid0IGtub3cgd2hhdCBpcyBib3VuZFxuICAgICAgICAgKiBAbWVtYmVyIHtGcmFtZWJ1ZmZlcn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVua25vd25GcmFtZWJ1ZmZlciA9IG5ldyBGcmFtZWJ1ZmZlcigxMCwgMTApO1xuICAgIH1cblxuICAgIGlmICggU3lzdGVtICkgRnJhbWVidWZmZXJTeXN0ZW0uX19wcm90b19fID0gU3lzdGVtO1xuICAgIEZyYW1lYnVmZmVyU3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgRnJhbWVidWZmZXJTeXN0ZW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRnJhbWVidWZmZXJTeXN0ZW07XG5cbiAgICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBzaXplOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIHRoZSByZW5kZXJlciBjb250ZXh0IGFuZCBuZWNlc3NhcnkgYnVmZmVycy5cbiAgICAgKi9cbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUuY29udGV4dENoYW5nZSA9IGZ1bmN0aW9uIGNvbnRleHRDaGFuZ2UgKClcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2wgPSB0aGlzLnJlbmRlcmVyLmdsO1xuXG4gICAgICAgIHRoaXMuQ09OVEVYVF9VSUQgPSB0aGlzLnJlbmRlcmVyLkNPTlRFWFRfVUlEO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnVua25vd25GcmFtZWJ1ZmZlcjtcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IG5ldyBSZWN0YW5nbGUoKTtcbiAgICAgICAgdGhpcy5oYXNNUlQgPSB0cnVlO1xuICAgICAgICB0aGlzLndyaXRlRGVwdGhUZXh0dXJlID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmRpc3Bvc2VBbGwodHJ1ZSk7XG5cbiAgICAgICAgLy8gd2ViZ2wyXG4gICAgICAgIGlmICh0aGlzLnJlbmRlcmVyLmNvbnRleHQud2ViR0xWZXJzaW9uID09PSAxKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyB3ZWJnbCAxIVxuICAgICAgICAgICAgdmFyIG5hdGl2ZURyYXdCdWZmZXJzRXh0ZW5zaW9uID0gdGhpcy5yZW5kZXJlci5jb250ZXh0LmV4dGVuc2lvbnMuZHJhd0J1ZmZlcnM7XG4gICAgICAgICAgICB2YXIgbmF0aXZlRGVwdGhUZXh0dXJlRXh0ZW5zaW9uID0gdGhpcy5yZW5kZXJlci5jb250ZXh0LmV4dGVuc2lvbnMuZGVwdGhUZXh0dXJlO1xuXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuUFJFRkVSX0VOViA9PT0gRU5WLldFQkdMX0xFR0FDWSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVEcmF3QnVmZmVyc0V4dGVuc2lvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgbmF0aXZlRGVwdGhUZXh0dXJlRXh0ZW5zaW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5hdGl2ZURyYXdCdWZmZXJzRXh0ZW5zaW9uKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGdsLmRyYXdCdWZmZXJzID0gZnVuY3Rpb24gKGFjdGl2ZVRleHR1cmVzKSB7IHJldHVybiBuYXRpdmVEcmF3QnVmZmVyc0V4dGVuc2lvbi5kcmF3QnVmZmVyc1dFQkdMKGFjdGl2ZVRleHR1cmVzKTsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc01SVCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGdsLmRyYXdCdWZmZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbXB0eVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghbmF0aXZlRGVwdGhUZXh0dXJlRXh0ZW5zaW9uKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVEZXB0aFRleHR1cmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIGEgZnJhbWVidWZmZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5GcmFtZWJ1ZmZlcn0gZnJhbWVidWZmZXJcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBbZnJhbWVdIGZyYW1lLCBkZWZhdWx0IGlzIGZyYW1lYnVmZmVyIHNpemVcbiAgICAgKi9cbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQgKGZyYW1lYnVmZmVyLCBmcmFtZSlcbiAgICB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgZ2wgPSByZWYuZ2w7XG5cbiAgICAgICAgaWYgKGZyYW1lYnVmZmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBUT0RPIGNhY2hpbmcgbGF5ZXIhXG5cbiAgICAgICAgICAgIHZhciBmYm8gPSBmcmFtZWJ1ZmZlci5nbEZyYW1lYnVmZmVyc1t0aGlzLkNPTlRFWFRfVUlEXSB8fCB0aGlzLmluaXRGcmFtZWJ1ZmZlcihmcmFtZWJ1ZmZlcik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnQgIT09IGZyYW1lYnVmZmVyKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IGZyYW1lYnVmZmVyO1xuICAgICAgICAgICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZmJvLmZyYW1lYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBhbGwgdGV4dHVyZXMgYXJlIHVuYm91bmQuLlxuXG4gICAgICAgICAgICAvLyBub3cgY2hlY2sgZm9yIHVwZGF0ZXMuLi5cbiAgICAgICAgICAgIGlmIChmYm8uZGlydHlJZCAhPT0gZnJhbWVidWZmZXIuZGlydHlJZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmYm8uZGlydHlJZCA9IGZyYW1lYnVmZmVyLmRpcnR5SWQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmJvLmRpcnR5Rm9ybWF0ICE9PSBmcmFtZWJ1ZmZlci5kaXJ0eUZvcm1hdClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGZiby5kaXJ0eUZvcm1hdCA9IGZyYW1lYnVmZmVyLmRpcnR5Rm9ybWF0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUZyYW1lYnVmZmVyKGZyYW1lYnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmJvLmRpcnR5U2l6ZSAhPT0gZnJhbWVidWZmZXIuZGlydHlTaXplKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZmJvLmRpcnR5U2l6ZSA9IGZyYW1lYnVmZmVyLmRpcnR5U2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemVGcmFtZWJ1ZmZlcihmcmFtZWJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYW1lYnVmZmVyLmNvbG9yVGV4dHVyZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKGZyYW1lYnVmZmVyLmNvbG9yVGV4dHVyZXNbaV0udGV4dHVyZVBhcnQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnRleHR1cmUudW5iaW5kKGZyYW1lYnVmZmVyLmNvbG9yVGV4dHVyZXNbaV0udGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudGV4dHVyZS51bmJpbmQoZnJhbWVidWZmZXIuY29sb3JUZXh0dXJlc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZnJhbWVidWZmZXIuZGVwdGhUZXh0dXJlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudGV4dHVyZS51bmJpbmQoZnJhbWVidWZmZXIuZGVwdGhUZXh0dXJlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZyYW1lKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Vmlld3BvcnQoZnJhbWUueCwgZnJhbWUueSwgZnJhbWUud2lkdGgsIGZyYW1lLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWaWV3cG9ydCgwLCAwLCBmcmFtZWJ1ZmZlci53aWR0aCwgZnJhbWVidWZmZXIuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZnJhbWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWaWV3cG9ydChmcmFtZS54LCBmcmFtZS55LCBmcmFtZS53aWR0aCwgZnJhbWUuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZpZXdwb3J0KDAsIDAsIHRoaXMucmVuZGVyZXIud2lkdGgsIHRoaXMucmVuZGVyZXIuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIFdlYkdMUmVuZGVyaW5nQ29udGV4dCdzIHZpZXdwb3J0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHggLSBYIHBvc2l0aW9uIG9mIHZpZXdwb3J0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHkgLSBZIHBvc2l0aW9uIG9mIHZpZXdwb3J0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIC0gV2lkdGggb2Ygdmlld3BvcnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IC0gSGVpZ2h0IG9mIHZpZXdwb3J0XG4gICAgICovXG4gICAgRnJhbWVidWZmZXJTeXN0ZW0ucHJvdG90eXBlLnNldFZpZXdwb3J0ID0gZnVuY3Rpb24gc2V0Vmlld3BvcnQgKHgsIHksIHdpZHRoLCBoZWlnaHQpXG4gICAge1xuICAgICAgICB2YXIgdiA9IHRoaXMudmlld3BvcnQ7XG5cbiAgICAgICAgaWYgKHYud2lkdGggIT09IHdpZHRoIHx8IHYuaGVpZ2h0ICE9PSBoZWlnaHQgfHwgdi54ICE9PSB4IHx8IHYueSAhPT0geSlcbiAgICAgICAge1xuICAgICAgICAgICAgdi54ID0geDtcbiAgICAgICAgICAgIHYueSA9IHk7XG4gICAgICAgICAgICB2LndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICB2LmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICAgICAgdGhpcy5nbC52aWV3cG9ydCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNpemUgb2YgdGhlIGN1cnJlbnQgd2lkdGggYW5kIGhlaWdodC4gUmV0dXJucyBvYmplY3Qgd2l0aCBgd2lkdGhgIGFuZCBgaGVpZ2h0YCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnNpemUuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc3RvcmUgdGVtcFxuICAgICAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCwgd2lkdGg6IHRoaXMuY3VycmVudC53aWR0aCwgaGVpZ2h0OiB0aGlzLmN1cnJlbnQuaGVpZ2h0IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwLCB3aWR0aDogdGhpcy5yZW5kZXJlci53aWR0aCwgaGVpZ2h0OiB0aGlzLnJlbmRlcmVyLmhlaWdodCB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciB0aGUgY29sb3Igb2YgdGhlIGNvbnRleHRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByIC0gUmVkIHZhbHVlIGZyb20gMCB0byAxXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGcgLSBHcmVlbiB2YWx1ZSBmcm9tIDAgdG8gMVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBiIC0gQmx1ZSB2YWx1ZSBmcm9tIDAgdG8gMVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhIC0gQWxwaGEgdmFsdWUgZnJvbSAwIHRvIDFcbiAgICAgKi9cbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAociwgZywgYiwgYSlcbiAgICB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgZ2wgPSByZWYuZ2w7XG5cbiAgICAgICAgLy8gVE9ETyBjbGVhciBjb2xvciBjYW4gYmUgc2V0IG9ubHkgb25lIHJpZ2h0P1xuICAgICAgICBnbC5jbGVhckNvbG9yKHIsIGcsIGIsIGEpO1xuICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgZnJhbWVidWZmZXJcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1BJWEkuRnJhbWVidWZmZXJ9IGZyYW1lYnVmZmVyXG4gICAgICovXG4gICAgRnJhbWVidWZmZXJTeXN0ZW0ucHJvdG90eXBlLmluaXRGcmFtZWJ1ZmZlciA9IGZ1bmN0aW9uIGluaXRGcmFtZWJ1ZmZlciAoZnJhbWVidWZmZXIpXG4gICAge1xuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGdsID0gcmVmLmdsO1xuXG4gICAgICAgIC8vIFRPRE8gLSBtYWtlIHRoaXMgYSBjbGFzcz9cbiAgICAgICAgdmFyIGZibyA9IHtcbiAgICAgICAgICAgIGZyYW1lYnVmZmVyOiBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpLFxuICAgICAgICAgICAgc3RlbmNpbDogbnVsbCxcbiAgICAgICAgICAgIGRpcnR5SWQ6IDAsXG4gICAgICAgICAgICBkaXJ0eUZvcm1hdDogMCxcbiAgICAgICAgICAgIGRpcnR5U2l6ZTogMCxcbiAgICAgICAgfTtcblxuICAgICAgICBmcmFtZWJ1ZmZlci5nbEZyYW1lYnVmZmVyc1t0aGlzLkNPTlRFWFRfVUlEXSA9IGZibztcblxuICAgICAgICB0aGlzLm1hbmFnZWRGcmFtZWJ1ZmZlcnMucHVzaChmcmFtZWJ1ZmZlcik7XG4gICAgICAgIGZyYW1lYnVmZmVyLmRpc3Bvc2VSdW5uZXIuYWRkKHRoaXMpO1xuXG4gICAgICAgIHJldHVybiBmYm87XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc2l6ZSB0aGUgZnJhbWVidWZmZXJcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1BJWEkuRnJhbWVidWZmZXJ9IGZyYW1lYnVmZmVyXG4gICAgICovXG4gICAgRnJhbWVidWZmZXJTeXN0ZW0ucHJvdG90eXBlLnJlc2l6ZUZyYW1lYnVmZmVyID0gZnVuY3Rpb24gcmVzaXplRnJhbWVidWZmZXIgKGZyYW1lYnVmZmVyKVxuICAgIHtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBnbCA9IHJlZi5nbDtcblxuICAgICAgICB2YXIgZmJvID0gZnJhbWVidWZmZXIuZ2xGcmFtZWJ1ZmZlcnNbdGhpcy5DT05URVhUX1VJRF07XG5cbiAgICAgICAgaWYgKGZiby5zdGVuY2lsKVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgZmJvLnN0ZW5jaWwpO1xuICAgICAgICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGdsLkRFUFRIX1NURU5DSUwsIGZyYW1lYnVmZmVyLndpZHRoLCBmcmFtZWJ1ZmZlci5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbG9yVGV4dHVyZXMgPSBmcmFtZWJ1ZmZlci5jb2xvclRleHR1cmVzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sb3JUZXh0dXJlcy5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci50ZXh0dXJlLmJpbmQoY29sb3JUZXh0dXJlc1tpXSwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhbWVidWZmZXIuZGVwdGhUZXh0dXJlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnRleHR1cmUuYmluZChmcmFtZWJ1ZmZlci5kZXB0aFRleHR1cmUsIDApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgZnJhbWVidWZmZXJcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1BJWEkuRnJhbWVidWZmZXJ9IGZyYW1lYnVmZmVyXG4gICAgICovXG4gICAgRnJhbWVidWZmZXJTeXN0ZW0ucHJvdG90eXBlLnVwZGF0ZUZyYW1lYnVmZmVyID0gZnVuY3Rpb24gdXBkYXRlRnJhbWVidWZmZXIgKGZyYW1lYnVmZmVyKVxuICAgIHtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBnbCA9IHJlZi5nbDtcblxuICAgICAgICB2YXIgZmJvID0gZnJhbWVidWZmZXIuZ2xGcmFtZWJ1ZmZlcnNbdGhpcy5DT05URVhUX1VJRF07XG5cbiAgICAgICAgLy8gYmluZCB0aGUgY29sb3IgdGV4dHVyZVxuICAgICAgICB2YXIgY29sb3JUZXh0dXJlcyA9IGZyYW1lYnVmZmVyLmNvbG9yVGV4dHVyZXM7XG5cbiAgICAgICAgdmFyIGNvdW50ID0gY29sb3JUZXh0dXJlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFnbC5kcmF3QnVmZmVycylcbiAgICAgICAge1xuICAgICAgICAgICAgY291bnQgPSBNYXRoLm1pbihjb3VudCwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWN0aXZlVGV4dHVyZXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciB0ZXh0dXJlID0gZnJhbWVidWZmZXIuY29sb3JUZXh0dXJlc1tpXTtcblxuICAgICAgICAgICAgaWYgKHRleHR1cmUudGV4dHVyZVBhcnQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci50ZXh0dXJlLmJpbmQodGV4dHVyZS50ZXh0dXJlLCAwKTtcblxuICAgICAgICAgICAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLFxuICAgICAgICAgICAgICAgICAgICBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksXG4gICAgICAgICAgICAgICAgICAgIGdsLlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWCArIHRleHR1cmUuc2lkZSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS50ZXh0dXJlLl9nbFRleHR1cmVzW3RoaXMuQ09OVEVYVF9VSURdLnRleHR1cmUsXG4gICAgICAgICAgICAgICAgICAgIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudGV4dHVyZS5iaW5kKHRleHR1cmUsIDApO1xuXG4gICAgICAgICAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsXG4gICAgICAgICAgICAgICAgICAgIGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSxcbiAgICAgICAgICAgICAgICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS5fZ2xUZXh0dXJlc1t0aGlzLkNPTlRFWFRfVUlEXS50ZXh0dXJlLFxuICAgICAgICAgICAgICAgICAgICAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWN0aXZlVGV4dHVyZXMucHVzaChnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGl2ZVRleHR1cmVzLmxlbmd0aCA+IDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLmRyYXdCdWZmZXJzKGFjdGl2ZVRleHR1cmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmcmFtZWJ1ZmZlci5kZXB0aFRleHR1cmUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciB3cml0ZURlcHRoVGV4dHVyZSA9IHRoaXMud3JpdGVEZXB0aFRleHR1cmU7XG5cbiAgICAgICAgICAgIGlmICh3cml0ZURlcHRoVGV4dHVyZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVwdGhUZXh0dXJlID0gZnJhbWVidWZmZXIuZGVwdGhUZXh0dXJlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci50ZXh0dXJlLmJpbmQoZGVwdGhUZXh0dXJlLCAwKTtcblxuICAgICAgICAgICAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLFxuICAgICAgICAgICAgICAgICAgICBnbC5ERVBUSF9BVFRBQ0hNRU5ULFxuICAgICAgICAgICAgICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICAgICAgICAgICAgICBkZXB0aFRleHR1cmUuX2dsVGV4dHVyZXNbdGhpcy5DT05URVhUX1VJRF0udGV4dHVyZSxcbiAgICAgICAgICAgICAgICAgICAgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWZiby5zdGVuY2lsICYmIChmcmFtZWJ1ZmZlci5zdGVuY2lsIHx8IGZyYW1lYnVmZmVyLmRlcHRoKSlcbiAgICAgICAge1xuICAgICAgICAgICAgZmJvLnN0ZW5jaWwgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblxuICAgICAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIGZiby5zdGVuY2lsKTtcblxuICAgICAgICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGdsLkRFUFRIX1NURU5DSUwsIGZyYW1lYnVmZmVyLndpZHRoLCBmcmFtZWJ1ZmZlci5oZWlnaHQpO1xuICAgICAgICAgICAgLy8gVE9ETy4uIHRoaXMgaXMgZGVwdGggQU5EIHN0ZW5jaWw/XG4gICAgICAgICAgICBpZiAoIWZyYW1lYnVmZmVyLmRlcHRoVGV4dHVyZSlcbiAgICAgICAgICAgIHsgLy8geW91IGNhbid0IGhhdmUgYm90aCwgc28gb25lIHNob3VsZCB0YWtlIHByaW9yaXR5IGlmIGVuYWJsZWRcbiAgICAgICAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULCBnbC5SRU5ERVJCVUZGRVIsIGZiby5zdGVuY2lsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlcyBmcmFtZWJ1ZmZlclxuICAgICAqIEBwYXJhbSB7UElYSS5GcmFtZWJ1ZmZlcn0gZnJhbWVidWZmZXIgZnJhbWVidWZmZXIgdGhhdCBoYXMgdG8gYmUgZGlzcG9zZWQgb2ZcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjb250ZXh0TG9zdD1mYWxzZV0gSWYgY29udGV4dCB3YXMgbG9zdCwgd2Ugc3VwcHJlc3MgYWxsIGRlbGV0ZSBmdW5jdGlvbiBjYWxsc1xuICAgICAqL1xuICAgIEZyYW1lYnVmZmVyU3lzdGVtLnByb3RvdHlwZS5kaXNwb3NlRnJhbWVidWZmZXIgPSBmdW5jdGlvbiBkaXNwb3NlRnJhbWVidWZmZXIgKGZyYW1lYnVmZmVyLCBjb250ZXh0TG9zdClcbiAgICB7XG4gICAgICAgIHZhciBmYm8gPSBmcmFtZWJ1ZmZlci5nbEZyYW1lYnVmZmVyc1t0aGlzLkNPTlRFWFRfVUlEXTtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcblxuICAgICAgICBpZiAoIWZibylcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIGZyYW1lYnVmZmVyLmdsRnJhbWVidWZmZXJzW3RoaXMuQ09OVEVYVF9VSURdO1xuXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMubWFuYWdlZEZyYW1lYnVmZmVycy5pbmRleE9mKGZyYW1lYnVmZmVyKTtcblxuICAgICAgICBpZiAoaW5kZXggPj0gMClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VkRnJhbWVidWZmZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBmcmFtZWJ1ZmZlci5kaXNwb3NlUnVubmVyLnJlbW92ZSh0aGlzKTtcblxuICAgICAgICBpZiAoIWNvbnRleHRMb3N0KVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC5kZWxldGVGcmFtZWJ1ZmZlcihmYm8uZnJhbWVidWZmZXIpO1xuICAgICAgICAgICAgaWYgKGZiby5zdGVuY2lsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcihmYm8uc3RlbmNpbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGlzcG9zZXMgYWxsIGZyYW1lYnVmZmVycywgYnV0IG5vdCB0ZXh0dXJlcyBib3VuZCB0byB0aGVtXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY29udGV4dExvc3Q9ZmFsc2VdIElmIGNvbnRleHQgd2FzIGxvc3QsIHdlIHN1cHByZXNzIGFsbCBkZWxldGUgZnVuY3Rpb24gY2FsbHNcbiAgICAgKi9cbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUuZGlzcG9zZUFsbCA9IGZ1bmN0aW9uIGRpc3Bvc2VBbGwgKGNvbnRleHRMb3N0KVxuICAgIHtcbiAgICAgICAgdmFyIGxpc3QgPSB0aGlzLm1hbmFnZWRGcmFtZWJ1ZmZlcnM7XG5cbiAgICAgICAgdGhpcy5tYW5hZ2VkRnJhbWVidWZmZXJzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2VGcmFtZWJ1ZmZlcihsaXN0W2ldLCBjb250ZXh0TG9zdCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRm9yY2luZyBjcmVhdGlvbiBvZiBzdGVuY2lsIGJ1ZmZlciBmb3IgY3VycmVudCBmcmFtZWJ1ZmZlciwgaWYgaXQgd2Fzbid0IGRvbmUgYmVmb3JlLlxuICAgICAqIFVzZWQgYnkgTWFza1N5c3RlbSwgd2hlbiBpdHMgdGltZSB0byB1c2Ugc3RlbmNpbCBtYXNrIGZvciBHcmFwaGljcyBlbGVtZW50LlxuICAgICAqXG4gICAgICogSXRzIGFuIGFsdGVybmF0aXZlIGZvciBwdWJsaWMgbGF6eSBgZnJhbWVidWZmZXIuZW5hYmxlU3RlbmNpbGAsIGluIGNhc2Ugd2UgbmVlZCBzdGVuY2lsIHdpdGhvdXQgcmViaW5kLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUuZm9yY2VTdGVuY2lsID0gZnVuY3Rpb24gZm9yY2VTdGVuY2lsICgpXG4gICAge1xuICAgICAgICB2YXIgZnJhbWVidWZmZXIgPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgICAgaWYgKCFmcmFtZWJ1ZmZlcilcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZibyA9IGZyYW1lYnVmZmVyLmdsRnJhbWVidWZmZXJzW3RoaXMuQ09OVEVYVF9VSURdO1xuXG4gICAgICAgIGlmICghZmJvIHx8IGZiby5zdGVuY2lsKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZnJhbWVidWZmZXIuZW5hYmxlU3RlbmNpbCgpO1xuXG4gICAgICAgIHZhciB3ID0gZnJhbWVidWZmZXIud2lkdGg7XG4gICAgICAgIHZhciBoID0gZnJhbWVidWZmZXIuaGVpZ2h0O1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgc3RlbmNpbCA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXG4gICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBzdGVuY2lsKTtcbiAgICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGdsLkRFUFRIX1NURU5DSUwsIHcsIGgpO1xuXG4gICAgICAgIGZiby5zdGVuY2lsID0gc3RlbmNpbDtcbiAgICAgICAgZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCBzdGVuY2lsKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogcmVzZXRzIGZyYW1lYnVmZmVyIHN0b3JlZCBzdGF0ZSwgYmluZHMgc2NyZWVuIGZyYW1lYnVmZmVyXG4gICAgICpcbiAgICAgKiBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSByZW5kZXJUZXh0dXJlIHJlc2V0KClcbiAgICAgKi9cbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy51bmtub3duRnJhbWVidWZmZXI7XG4gICAgICAgIHRoaXMudmlld3BvcnQgPSBuZXcgUmVjdGFuZ2xlKCk7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gICAgcmV0dXJuIEZyYW1lYnVmZmVyU3lzdGVtO1xufShTeXN0ZW0pKTtcblxudmFyIEdMQnVmZmVyID0gZnVuY3Rpb24gR0xCdWZmZXIoYnVmZmVyKVxue1xuICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgIHRoaXMudXBkYXRlSUQgPSAtMTtcbiAgICB0aGlzLmJ5dGVMZW5ndGggPSAtMTtcbiAgICB0aGlzLnJlZkNvdW50ID0gMDtcbn07XG5cbnZhciBieXRlU2l6ZU1hcCQxID0geyA1MTI2OiA0LCA1MTIzOiAyLCA1MTIxOiAxIH07XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIGdlb21ldHJ5LlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5TeXN0ZW1cbiAqIEBtZW1iZXJvZiBQSVhJLnN5c3RlbXNcbiAqL1xudmFyIEdlb21ldHJ5U3lzdGVtID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU3lzdGVtKSB7XG4gICAgZnVuY3Rpb24gR2VvbWV0cnlTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgdGhpcy5fYWN0aXZlR2VvbWV0cnkgPSBudWxsO1xuICAgICAgICB0aGlzLl9hY3RpdmVWYW8gPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBgdHJ1ZWAgaWYgd2UgaGFzIGAqX3ZlcnRleF9hcnJheV9vYmplY3RgIGV4dGVuc2lvblxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGFzVmFvID0gdHJ1ZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYHRydWVgIGlmIGhhcyBgQU5HTEVfaW5zdGFuY2VkX2FycmF5c2AgZXh0ZW5zaW9uXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYXNJbnN0YW5jZSA9IHRydWU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGB0cnVlYCBpZiBzdXBwb3J0IGBnbC5VTlNJR05FRF9JTlRgIGluIGBnbC5kcmF3RWxlbWVudHNgIG9yIGBnbC5kcmF3RWxlbWVudHNJbnN0YW5jZWRgXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYW5Vc2VVSW50MzJFbGVtZW50SW5kZXggPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSBjYWNoZSBvZiBjdXJyZW50bHkgYm91bmQgYnVmZmVyLFxuICAgICAgICAgKiBjb250YWlucyBvbmx5IHR3byBtZW1iZXJzIHdpdGgga2V5cyBBUlJBWV9CVUZGRVIgYW5kIEVMRU1FTlRfQVJSQVlfQlVGRkVSXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdC48bnVtYmVyLCBQSVhJLkJ1ZmZlcj59XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ib3VuZEJ1ZmZlcnMgPSB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FjaGUgZm9yIGFsbCBnZW9tZXRyaWVzIGJ5IGlkLCB1c2VkIGluIGNhc2UgcmVuZGVyZXIgZ2V0cyBkZXN0cm95ZWQgb3IgZm9yIHByb2ZpbGluZ1xuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYW5hZ2VkR2VvbWV0cmllcyA9IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWNoZSBmb3IgYWxsIGJ1ZmZlcnMgYnkgaWQsIHVzZWQgaW4gY2FzZSByZW5kZXJlciBnZXRzIGRlc3Ryb3llZCBvciBmb3IgcHJvZmlsaW5nXG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1hbmFnZWRCdWZmZXJzID0ge307XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBHZW9tZXRyeVN5c3RlbS5fX3Byb3RvX18gPSBTeXN0ZW07XG4gICAgR2VvbWV0cnlTeXN0ZW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3lzdGVtICYmIFN5c3RlbS5wcm90b3R5cGUgKTtcbiAgICBHZW9tZXRyeVN5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW9tZXRyeVN5c3RlbTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdXAgdGhlIHJlbmRlcmVyIGNvbnRleHQgYW5kIG5lY2Vzc2FyeSBidWZmZXJzLlxuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5jb250ZXh0Q2hhbmdlID0gZnVuY3Rpb24gY29udGV4dENoYW5nZSAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlQWxsKHRydWUpO1xuXG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2wgPSB0aGlzLnJlbmRlcmVyLmdsO1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMucmVuZGVyZXIuY29udGV4dDtcblxuICAgICAgICB0aGlzLkNPTlRFWFRfVUlEID0gdGhpcy5yZW5kZXJlci5DT05URVhUX1VJRDtcblxuICAgICAgICAvLyB3ZWJnbDJcbiAgICAgICAgaWYgKCFnbC5jcmVhdGVWZXJ0ZXhBcnJheSlcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gd2ViZ2wgMSFcbiAgICAgICAgICAgIHZhciBuYXRpdmVWYW9FeHRlbnNpb24gPSB0aGlzLnJlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucy52ZXJ0ZXhBcnJheU9iamVjdDtcblxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLlBSRUZFUl9FTlYgPT09IEVOVi5XRUJHTF9MRUdBQ1kpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmF0aXZlVmFvRXh0ZW5zaW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5hdGl2ZVZhb0V4dGVuc2lvbilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnbC5jcmVhdGVWZXJ0ZXhBcnJheSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZVZhb0V4dGVuc2lvbi5jcmVhdGVWZXJ0ZXhBcnJheU9FUygpOyB9O1xuXG4gICAgICAgICAgICAgICAgZ2wuYmluZFZlcnRleEFycmF5ID0gZnVuY3Rpb24gKHZhbykgeyByZXR1cm4gbmF0aXZlVmFvRXh0ZW5zaW9uLmJpbmRWZXJ0ZXhBcnJheU9FUyh2YW8pOyB9O1xuXG4gICAgICAgICAgICAgICAgZ2wuZGVsZXRlVmVydGV4QXJyYXkgPSBmdW5jdGlvbiAodmFvKSB7IHJldHVybiBuYXRpdmVWYW9FeHRlbnNpb24uZGVsZXRlVmVydGV4QXJyYXlPRVModmFvKTsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc1ZhbyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGdsLmNyZWF0ZVZlcnRleEFycmF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbXB0eVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBnbC5iaW5kVmVydGV4QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVtcHR5XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGdsLmRlbGV0ZVZlcnRleEFycmF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbXB0eVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWdsLnZlcnRleEF0dHJpYkRpdmlzb3IpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUV4dCA9IGdsLmdldEV4dGVuc2lvbignQU5HTEVfaW5zdGFuY2VkX2FycmF5cycpO1xuXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2VFeHQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliRGl2aXNvciA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBpbnN0YW5jZUV4dC52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUoYSwgYik7IH07XG5cbiAgICAgICAgICAgICAgICBnbC5kcmF3RWxlbWVudHNJbnN0YW5jZWQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSkgeyByZXR1cm4gaW5zdGFuY2VFeHQuZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUoYSwgYiwgYywgZCwgZSk7IH07XG5cbiAgICAgICAgICAgICAgICBnbC5kcmF3QXJyYXlzSW5zdGFuY2VkID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGluc3RhbmNlRXh0LmRyYXdBcnJheXNJbnN0YW5jZWRBTkdMRShhLCBiLCBjLCBkKTsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc0luc3RhbmNlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhblVzZVVJbnQzMkVsZW1lbnRJbmRleCA9IGNvbnRleHQud2ViR0xWZXJzaW9uID09PSAyIHx8ICEhY29udGV4dC5leHRlbnNpb25zLnVpbnQzMkVsZW1lbnRJbmRleDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQmluZHMgZ2VvbWV0cnkgc28gdGhhdCBpcyBjYW4gYmUgZHJhd24uIENyZWF0aW5nIGEgVmFvIGlmIHJlcXVpcmVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuR2VvbWV0cnl9IGdlb21ldHJ5IGluc3RhbmNlIG9mIGdlb21ldHJ5IHRvIGJpbmRcbiAgICAgKiBAcGFyYW0ge1BJWEkuU2hhZGVyfSBbc2hhZGVyXSBpbnN0YW5jZSBvZiBzaGFkZXIgdG8gdXNlIHZhbyBmb3JcbiAgICAgKi9cbiAgICBHZW9tZXRyeVN5c3RlbS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQgKGdlb21ldHJ5LCBzaGFkZXIpXG4gICAge1xuICAgICAgICBzaGFkZXIgPSBzaGFkZXIgfHwgdGhpcy5yZW5kZXJlci5zaGFkZXIuc2hhZGVyO1xuXG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgZ2wgPSByZWYuZ2w7XG5cbiAgICAgICAgLy8gbm90IHN1cmUgdGhlIGJlc3Qgd2F5IHRvIGFkZHJlc3MgdGhpcy4uXG4gICAgICAgIC8vIGN1cnJlbnRseSBkaWZmZXJlbnQgc2hhZGVycyByZXF1aXJlIGRpZmZlcmVudCBWQU9zIGZvciB0aGUgc2FtZSBnZW9tZXRyeVxuICAgICAgICAvLyBTdGlsbCBtdWxsaW5nIG92ZXIgdGhlIGJlc3Qgd2F5IHRvIHNvbHZlIHRoaXMgb25lLi5cbiAgICAgICAgLy8gd2lsbCBsaWtlbHkgbmVlZCB0byBtb2RpZnkgdGhlIHNoYWRlciBhdHRyaWJ1dGUgbG9jYXRpb25zIGF0IHJ1biB0aW1lIVxuICAgICAgICB2YXIgdmFvcyA9IGdlb21ldHJ5LmdsVmVydGV4QXJyYXlPYmplY3RzW3RoaXMuQ09OVEVYVF9VSURdO1xuXG4gICAgICAgIGlmICghdmFvcylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VkR2VvbWV0cmllc1tnZW9tZXRyeS5pZF0gPSBnZW9tZXRyeTtcbiAgICAgICAgICAgIGdlb21ldHJ5LmRpc3Bvc2VSdW5uZXIuYWRkKHRoaXMpO1xuICAgICAgICAgICAgZ2VvbWV0cnkuZ2xWZXJ0ZXhBcnJheU9iamVjdHNbdGhpcy5DT05URVhUX1VJRF0gPSB2YW9zID0ge307XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFvID0gdmFvc1tzaGFkZXIucHJvZ3JhbS5pZF0gfHwgdGhpcy5pbml0R2VvbWV0cnlWYW8oZ2VvbWV0cnksIHNoYWRlci5wcm9ncmFtKTtcblxuICAgICAgICB0aGlzLl9hY3RpdmVHZW9tZXRyeSA9IGdlb21ldHJ5O1xuXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVWYW8gIT09IHZhbylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlVmFvID0gdmFvO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNWYW8pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ2wuYmluZFZlcnRleEFycmF5KHZhbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZVZhbyhnZW9tZXRyeSwgc2hhZGVyLnByb2dyYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETyAtIG9wdGltaXNlIGxhdGVyIVxuICAgICAgICAvLyBkb24ndCBuZWVkIHRvIGxvb3AgdGhyb3VnaCBpZiBub3RoaW5nIGNoYW5nZWQhXG4gICAgICAgIC8vIG1heWJlIGxvb2sgdG8gYWRkIGFuICdhdXRvdXBkYXRlJyB0byBnZW9tZXRyeT9cbiAgICAgICAgdGhpcy51cGRhdGVCdWZmZXJzKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc2V0IGFuZCB1bmJpbmQgYW55IGFjdGl2ZSBWQU8gYW5kIGdlb21ldHJ5XG4gICAgICovXG4gICAgR2VvbWV0cnlTeXN0ZW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQgKClcbiAgICB7XG4gICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBidWZmZXJzXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS51cGRhdGVCdWZmZXJzID0gZnVuY3Rpb24gdXBkYXRlQnVmZmVycyAoKVxuICAgIHtcbiAgICAgICAgdmFyIGdlb21ldHJ5ID0gdGhpcy5fYWN0aXZlR2VvbWV0cnk7XG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgZ2wgPSByZWYuZ2w7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tZXRyeS5idWZmZXJzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2VvbWV0cnkuYnVmZmVyc1tpXTtcblxuICAgICAgICAgICAgdmFyIGdsQnVmZmVyID0gYnVmZmVyLl9nbEJ1ZmZlcnNbdGhpcy5DT05URVhUX1VJRF07XG5cbiAgICAgICAgICAgIGlmIChidWZmZXIuX3VwZGF0ZUlEICE9PSBnbEJ1ZmZlci51cGRhdGVJRClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnbEJ1ZmZlci51cGRhdGVJRCA9IGJ1ZmZlci5fdXBkYXRlSUQ7XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPIGNhbiBjYWNoZSB0aGlzIG9uIGJ1ZmZlciEgbWF5YmUgYWRkZWQgYSBnZXR0ZXIgLyBzZXR0ZXI/XG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBidWZmZXIuaW5kZXggPyBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiA6IGdsLkFSUkFZX0JVRkZFUjtcblxuICAgICAgICAgICAgICAgIC8vIFRPRE8gdGhpcyBjb3VsZCBjaGFuZ2UgaWYgdGhlIFZBTyBjaGFuZ2VzLi4uXG4gICAgICAgICAgICAgICAgLy8gbmVlZCB0byBjb21lIHVwIHdpdGggYSBiZXR0ZXIgd2F5IHRvIGNhY2hlLi5cbiAgICAgICAgICAgICAgICAvLyBpZiAodGhpcy5ib3VuZEJ1ZmZlcnNbdHlwZV0gIT09IGdsQnVmZmVyKVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmJvdW5kQnVmZmVyc1t0eXBlXSA9IGdsQnVmZmVyO1xuICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIodHlwZSwgZ2xCdWZmZXIuYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9ib3VuZEJ1ZmZlciA9IGdsQnVmZmVyO1xuXG4gICAgICAgICAgICAgICAgaWYgKGdsQnVmZmVyLmJ5dGVMZW5ndGggPj0gYnVmZmVyLmRhdGEuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldCBpcyBhbHdheXMgemVybyBmb3Igbm93IVxuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJTdWJEYXRhKHR5cGUsIDAsIGJ1ZmZlci5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyYXdUeXBlID0gYnVmZmVyLnN0YXRpYyA/IGdsLlNUQVRJQ19EUkFXIDogZ2wuRFlOQU1JQ19EUkFXO1xuXG4gICAgICAgICAgICAgICAgICAgIGdsQnVmZmVyLmJ5dGVMZW5ndGggPSBidWZmZXIuZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJEYXRhKHR5cGUsIGJ1ZmZlci5kYXRhLCBkcmF3VHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGNvbXBhYmlsaXR5IGJldHdlZW4gYSBnZW9tZXRyeSBhbmQgYSBwcm9ncmFtXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7UElYSS5HZW9tZXRyeX0gZ2VvbWV0cnkgLSBHZW9tZXRyeSBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7UElYSS5Qcm9ncmFtfSBwcm9ncmFtIC0gUHJvZ3JhbSBpbnN0YW5jZVxuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5jaGVja0NvbXBhdGliaWxpdHkgPSBmdW5jdGlvbiBjaGVja0NvbXBhdGliaWxpdHkgKGdlb21ldHJ5LCBwcm9ncmFtKVxuICAgIHtcbiAgICAgICAgLy8gZ2VvbWV0cnkgbXVzdCBoYXZlIGF0IGxlYXN0IGFsbCB0aGUgYXR0cmlidXRlcyB0aGF0IHRoZSBzaGFkZXIgcmVxdWlyZXMuXG4gICAgICAgIHZhciBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgc2hhZGVyQXR0cmlidXRlcyA9IHByb2dyYW0uYXR0cmlidXRlRGF0YTtcblxuICAgICAgICBmb3IgKHZhciBqIGluIHNoYWRlckF0dHJpYnV0ZXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghZ2VvbWV0cnlBdHRyaWJ1dGVzW2pdKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoXCJzaGFkZXIgYW5kIGdlb21ldHJ5IGluY29tcGF0aWJsZSwgZ2VvbWV0cnkgbWlzc2luZyB0aGUgXFxcIlwiICsgaiArIFwiXFxcIiBhdHRyaWJ1dGVcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRha2VzIGEgZ2VvbWV0cnkgYW5kIHByb2dyYW0gYW5kIGdlbmVyYXRlcyBhIHVuaXF1ZSBzaWduYXR1cmUgZm9yIHRoZW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuR2VvbWV0cnl9IGdlb21ldHJ5IHRvIGdldCBzaWduYXR1cmUgZnJvbVxuICAgICAqIEBwYXJhbSB7UElYSS5Qcm9ncmFtfSBwcm9ncmFtIHRvIHRlc3QgZ2VvbWV0cnkgYWdhaW5zdFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IFVuaXF1ZSBzaWduYXR1cmUgb2YgdGhlIGdlb21ldHJ5IGFuZCBwcm9ncmFtXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5nZXRTaWduYXR1cmUgPSBmdW5jdGlvbiBnZXRTaWduYXR1cmUgKGdlb21ldHJ5LCBwcm9ncmFtKVxuICAgIHtcbiAgICAgICAgdmFyIGF0dHJpYnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgc2hhZGVyQXR0cmlidXRlcyA9IHByb2dyYW0uYXR0cmlidXRlRGF0YTtcblxuICAgICAgICB2YXIgc3RyaW5ncyA9IFsnZycsIGdlb21ldHJ5LmlkXTtcblxuICAgICAgICBmb3IgKHZhciBpIGluIGF0dHJpYnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChzaGFkZXJBdHRyaWJ1dGVzW2ldKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZ3MucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHJpbmdzLmpvaW4oJy0nKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBvciBnZXRzIFZhbyB3aXRoIHRoZSBzYW1lIHN0cnVjdHVyZSBhcyB0aGUgZ2VvbWV0cnkgYW5kIHN0b3JlcyBpdCBvbiB0aGUgZ2VvbWV0cnkuXG4gICAgICogSWYgdmFvIGlzIGNyZWF0ZWQsIGl0IGlzIGJvdW5kIGF1dG9tYXRpY2FsbHkuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtQSVhJLkdlb21ldHJ5fSBnZW9tZXRyeSAtIEluc3RhbmNlIG9mIGdlb21ldHJ5IHRvIHRvIGdlbmVyYXRlIFZhbyBmb3JcbiAgICAgKiBAcGFyYW0ge1BJWEkuUHJvZ3JhbX0gcHJvZ3JhbSAtIEluc3RhbmNlIG9mIHByb2dyYW1cbiAgICAgKi9cbiAgICBHZW9tZXRyeVN5c3RlbS5wcm90b3R5cGUuaW5pdEdlb21ldHJ5VmFvID0gZnVuY3Rpb24gaW5pdEdlb21ldHJ5VmFvIChnZW9tZXRyeSwgcHJvZ3JhbSlcbiAgICB7XG4gICAgICAgIHRoaXMuY2hlY2tDb21wYXRpYmlsaXR5KGdlb21ldHJ5LCBwcm9ncmFtKTtcblxuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgQ09OVEVYVF9VSUQgPSB0aGlzLkNPTlRFWFRfVUlEO1xuXG4gICAgICAgIHZhciBzaWduYXR1cmUgPSB0aGlzLmdldFNpZ25hdHVyZShnZW9tZXRyeSwgcHJvZ3JhbSk7XG5cbiAgICAgICAgdmFyIHZhb09iamVjdEhhc2ggPSBnZW9tZXRyeS5nbFZlcnRleEFycmF5T2JqZWN0c1t0aGlzLkNPTlRFWFRfVUlEXTtcblxuICAgICAgICB2YXIgdmFvID0gdmFvT2JqZWN0SGFzaFtzaWduYXR1cmVdO1xuXG4gICAgICAgIGlmICh2YW8pXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBnaXZlIHVzIGVhc3kgYWNjZXNzIHRvIHRoZSB2YW9cbiAgICAgICAgICAgIHZhb09iamVjdEhhc2hbcHJvZ3JhbS5pZF0gPSB2YW87XG5cbiAgICAgICAgICAgIHJldHVybiB2YW87XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYnVmZmVycyA9IGdlb21ldHJ5LmJ1ZmZlcnM7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcbiAgICAgICAgdmFyIHRlbXBTdHJpZGUgPSB7fTtcbiAgICAgICAgdmFyIHRlbXBTdGFydCA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGogaW4gYnVmZmVycylcbiAgICAgICAge1xuICAgICAgICAgICAgdGVtcFN0cmlkZVtqXSA9IDA7XG4gICAgICAgICAgICB0ZW1wU3RhcnRbal0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiQxIGluIGF0dHJpYnV0ZXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghYXR0cmlidXRlc1tqJDFdLnNpemUgJiYgcHJvZ3JhbS5hdHRyaWJ1dGVEYXRhW2okMV0pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1tqJDFdLnNpemUgPSBwcm9ncmFtLmF0dHJpYnV0ZURhdGFbaiQxXS5zaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWF0dHJpYnV0ZXNbaiQxXS5zaXplKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigoXCJQSVhJIEdlb21ldHJ5IGF0dHJpYnV0ZSAnXCIgKyBqJDEgKyBcIicgc2l6ZSBjYW5ub3QgYmUgZGV0ZXJtaW5lZCAobGlrZWx5IHRoZSBib3VuZCBzaGFkZXIgZG9lcyBub3QgaGF2ZSB0aGUgYXR0cmlidXRlKVwiKSk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRlbXBTdHJpZGVbYXR0cmlidXRlc1tqJDFdLmJ1ZmZlcl0gKz0gYXR0cmlidXRlc1tqJDFdLnNpemUgKiBieXRlU2l6ZU1hcCQxW2F0dHJpYnV0ZXNbaiQxXS50eXBlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGokMiBpbiBhdHRyaWJ1dGVzKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1tqJDJdO1xuICAgICAgICAgICAgdmFyIGF0dHJpYlNpemUgPSBhdHRyaWJ1dGUuc2l6ZTtcblxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5zdHJpZGUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAodGVtcFN0cmlkZVthdHRyaWJ1dGUuYnVmZmVyXSA9PT0gYXR0cmliU2l6ZSAqIGJ5dGVTaXplTWFwJDFbYXR0cmlidXRlLnR5cGVdKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLnN0cmlkZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS5zdHJpZGUgPSB0ZW1wU3RyaWRlW2F0dHJpYnV0ZS5idWZmZXJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5zdGFydCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS5zdGFydCA9IHRlbXBTdGFydFthdHRyaWJ1dGUuYnVmZmVyXTtcblxuICAgICAgICAgICAgICAgIHRlbXBTdGFydFthdHRyaWJ1dGUuYnVmZmVyXSArPSBhdHRyaWJTaXplICogYnl0ZVNpemVNYXAkMVthdHRyaWJ1dGUudHlwZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YW8gPSBnbC5jcmVhdGVWZXJ0ZXhBcnJheSgpO1xuXG4gICAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSh2YW8pO1xuXG4gICAgICAgIC8vIGZpcnN0IHVwZGF0ZSAtIGFuZCBjcmVhdGUgdGhlIGJ1ZmZlcnMhXG4gICAgICAgIC8vIG9ubHkgY3JlYXRlIGEgZ2wgYnVmZmVyIGlmIGl0IGFjdHVhbGx5IGdldHNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVyc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFidWZmZXIuX2dsQnVmZmVyc1tDT05URVhUX1VJRF0pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnVmZmVyLl9nbEJ1ZmZlcnNbQ09OVEVYVF9VSURdID0gbmV3IEdMQnVmZmVyKGdsLmNyZWF0ZUJ1ZmZlcigpKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hbmFnZWRCdWZmZXJzW2J1ZmZlci5pZF0gPSBidWZmZXI7XG4gICAgICAgICAgICAgICAgYnVmZmVyLmRpc3Bvc2VSdW5uZXIuYWRkKHRoaXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBidWZmZXIuX2dsQnVmZmVyc1tDT05URVhUX1VJRF0ucmVmQ291bnQrKztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE8gLSBtYXliZSBtYWtlIHRoaXMgYSBkYXRhIG9iamVjdD9cbiAgICAgICAgLy8gbGV0cyB3YWl0IHRvIHNlZSBpZiB3ZSBuZWVkIHRvIGZpcnN0IVxuXG4gICAgICAgIHRoaXMuYWN0aXZhdGVWYW8oZ2VvbWV0cnksIHByb2dyYW0pO1xuXG4gICAgICAgIHRoaXMuX2FjdGl2ZVZhbyA9IHZhbztcblxuICAgICAgICAvLyBhZGQgaXQgdG8gdGhlIGNhY2hlIVxuICAgICAgICB2YW9PYmplY3RIYXNoW3Byb2dyYW0uaWRdID0gdmFvO1xuICAgICAgICB2YW9PYmplY3RIYXNoW3NpZ25hdHVyZV0gPSB2YW87XG5cbiAgICAgICAgcmV0dXJuIHZhbztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGlzcG9zZXMgYnVmZmVyXG4gICAgICogQHBhcmFtIHtQSVhJLkJ1ZmZlcn0gYnVmZmVyIGJ1ZmZlciB3aXRoIGRhdGFcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjb250ZXh0TG9zdD1mYWxzZV0gSWYgY29udGV4dCB3YXMgbG9zdCwgd2Ugc3VwcHJlc3MgZGVsZXRlVmVydGV4QXJyYXlcbiAgICAgKi9cbiAgICBHZW9tZXRyeVN5c3RlbS5wcm90b3R5cGUuZGlzcG9zZUJ1ZmZlciA9IGZ1bmN0aW9uIGRpc3Bvc2VCdWZmZXIgKGJ1ZmZlciwgY29udGV4dExvc3QpXG4gICAge1xuICAgICAgICBpZiAoIXRoaXMubWFuYWdlZEJ1ZmZlcnNbYnVmZmVyLmlkXSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHRoaXMubWFuYWdlZEJ1ZmZlcnNbYnVmZmVyLmlkXTtcblxuICAgICAgICB2YXIgZ2xCdWZmZXIgPSBidWZmZXIuX2dsQnVmZmVyc1t0aGlzLkNPTlRFWFRfVUlEXTtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcblxuICAgICAgICBidWZmZXIuZGlzcG9zZVJ1bm5lci5yZW1vdmUodGhpcyk7XG5cbiAgICAgICAgaWYgKCFnbEJ1ZmZlcilcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250ZXh0TG9zdClcbiAgICAgICAge1xuICAgICAgICAgICAgZ2wuZGVsZXRlQnVmZmVyKGdsQnVmZmVyLmJ1ZmZlcik7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgYnVmZmVyLl9nbEJ1ZmZlcnNbdGhpcy5DT05URVhUX1VJRF07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERpc3Bvc2VzIGdlb21ldHJ5XG4gICAgICogQHBhcmFtIHtQSVhJLkdlb21ldHJ5fSBnZW9tZXRyeSBHZW9tZXRyeSB3aXRoIGJ1ZmZlcnMuIE9ubHkgVkFPIHdpbGwgYmUgZGlzcG9zZWRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjb250ZXh0TG9zdD1mYWxzZV0gSWYgY29udGV4dCB3YXMgbG9zdCwgd2Ugc3VwcHJlc3MgZGVsZXRlVmVydGV4QXJyYXlcbiAgICAgKi9cbiAgICBHZW9tZXRyeVN5c3RlbS5wcm90b3R5cGUuZGlzcG9zZUdlb21ldHJ5ID0gZnVuY3Rpb24gZGlzcG9zZUdlb21ldHJ5IChnZW9tZXRyeSwgY29udGV4dExvc3QpXG4gICAge1xuICAgICAgICBpZiAoIXRoaXMubWFuYWdlZEdlb21ldHJpZXNbZ2VvbWV0cnkuaWRdKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgdGhpcy5tYW5hZ2VkR2VvbWV0cmllc1tnZW9tZXRyeS5pZF07XG5cbiAgICAgICAgdmFyIHZhb3MgPSBnZW9tZXRyeS5nbFZlcnRleEFycmF5T2JqZWN0c1t0aGlzLkNPTlRFWFRfVUlEXTtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcbiAgICAgICAgdmFyIGJ1ZmZlcnMgPSBnZW9tZXRyeS5idWZmZXJzO1xuXG4gICAgICAgIGdlb21ldHJ5LmRpc3Bvc2VSdW5uZXIucmVtb3ZlKHRoaXMpO1xuXG4gICAgICAgIGlmICghdmFvcylcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYnVmID0gYnVmZmVyc1tpXS5fZ2xCdWZmZXJzW3RoaXMuQ09OVEVYVF9VSURdO1xuXG4gICAgICAgICAgICBidWYucmVmQ291bnQtLTtcbiAgICAgICAgICAgIGlmIChidWYucmVmQ291bnQgPT09IDAgJiYgIWNvbnRleHRMb3N0KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZUJ1ZmZlcihidWZmZXJzW2ldLCBjb250ZXh0TG9zdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRleHRMb3N0KVxuICAgICAgICB7XG4gICAgICAgICAgICBmb3IgKHZhciB2YW9JZCBpbiB2YW9zKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBvbmx5IHNpZ25hdHVyZXMsIGV2ZXJ5dGhpbmcgZWxzZSBhcmUgY29waWVzXG4gICAgICAgICAgICAgICAgaWYgKHZhb0lkWzBdID09PSAnZycpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFvID0gdmFvc1t2YW9JZF07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVZhbyA9PT0gdmFvKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuYmluZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGdsLmRlbGV0ZVZlcnRleEFycmF5KHZhbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIGdlb21ldHJ5LmdsVmVydGV4QXJyYXlPYmplY3RzW3RoaXMuQ09OVEVYVF9VSURdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBkaXNwb3NlIGFsbCBXZWJHTCByZXNvdXJjZXMgb2YgYWxsIG1hbmFnZWQgZ2VvbWV0cmllcyBhbmQgYnVmZmVyc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbnRleHRMb3N0PWZhbHNlXSBJZiBjb250ZXh0IHdhcyBsb3N0LCB3ZSBzdXBwcmVzcyBgZ2wuZGVsZXRlYCBjYWxsc1xuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5kaXNwb3NlQWxsID0gZnVuY3Rpb24gZGlzcG9zZUFsbCAoY29udGV4dExvc3QpXG4gICAge1xuICAgICAgICB2YXIgYWxsID0gT2JqZWN0LmtleXModGhpcy5tYW5hZ2VkR2VvbWV0cmllcyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGwubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZUdlb21ldHJ5KHRoaXMubWFuYWdlZEdlb21ldHJpZXNbYWxsW2ldXSwgY29udGV4dExvc3QpO1xuICAgICAgICB9XG4gICAgICAgIGFsbCA9IE9iamVjdC5rZXlzKHRoaXMubWFuYWdlZEJ1ZmZlcnMpO1xuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBhbGwubGVuZ3RoOyBpJDErKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NlQnVmZmVyKHRoaXMubWFuYWdlZEJ1ZmZlcnNbYWxsW2kkMV1dLCBjb250ZXh0TG9zdCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWN0aXZhdGUgdmVydGV4IGFycmF5IG9iamVjdFxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7UElYSS5HZW9tZXRyeX0gZ2VvbWV0cnkgLSBHZW9tZXRyeSBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7UElYSS5Qcm9ncmFtfSBwcm9ncmFtIC0gU2hhZGVyIHByb2dyYW0gaW5zdGFuY2VcbiAgICAgKi9cbiAgICBHZW9tZXRyeVN5c3RlbS5wcm90b3R5cGUuYWN0aXZhdGVWYW8gPSBmdW5jdGlvbiBhY3RpdmF0ZVZhbyAoZ2VvbWV0cnksIHByb2dyYW0pXG4gICAge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgQ09OVEVYVF9VSUQgPSB0aGlzLkNPTlRFWFRfVUlEO1xuICAgICAgICB2YXIgYnVmZmVycyA9IGdlb21ldHJ5LmJ1ZmZlcnM7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuICAgICAgICBpZiAoZ2VvbWV0cnkuaW5kZXhCdWZmZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGZpcnN0IHVwZGF0ZSB0aGUgaW5kZXggYnVmZmVyIGlmIHdlIGhhdmUgb25lLi5cbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGdlb21ldHJ5LmluZGV4QnVmZmVyLl9nbEJ1ZmZlcnNbQ09OVEVYVF9VSURdLmJ1ZmZlcik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGFzdEJ1ZmZlciA9IG51bGw7XG5cbiAgICAgICAgLy8gYWRkIGEgbmV3IG9uZSFcbiAgICAgICAgZm9yICh2YXIgaiBpbiBhdHRyaWJ1dGVzKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzW2F0dHJpYnV0ZS5idWZmZXJdO1xuICAgICAgICAgICAgdmFyIGdsQnVmZmVyID0gYnVmZmVyLl9nbEJ1ZmZlcnNbQ09OVEVYVF9VSURdO1xuXG4gICAgICAgICAgICBpZiAocHJvZ3JhbS5hdHRyaWJ1dGVEYXRhW2pdKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0QnVmZmVyICE9PSBnbEJ1ZmZlcilcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBnbEJ1ZmZlci5idWZmZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxhc3RCdWZmZXIgPSBnbEJ1ZmZlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBwcm9ncmFtLmF0dHJpYnV0ZURhdGFbal0ubG9jYXRpb247XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPIGludHJvZHVjZSBzdGF0ZSBhZ2FpblxuICAgICAgICAgICAgICAgIC8vIHdlIGNhbiBvcHRpbWlzZSB0aGlzIGZvciBvbGRlciBkZXZpY2VzIHRoYXQgaGF2ZSBubyBWQU9zXG4gICAgICAgICAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobG9jYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLnNpemUsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS50eXBlIHx8IGdsLkZMT0FULFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUubm9ybWFsaXplZCxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLnN0cmlkZSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLnN0YXJ0KTtcblxuICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUuaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGNhbGN1bGF0ZSBpbnN0YW5jZSBjb3VudCBiYXNlZCBvZiB0aGlzLi4uXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0luc3RhbmNlKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJEaXZpc29yKGxvY2F0aW9uLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZ2VvbWV0cnkgZXJyb3IsIEdQVSBJbnN0YW5jaW5nIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3IHRoZSBnZW9tZXRyeVxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHR5cGUgLSB0aGUgdHlwZSBwcmltaXRpdmUgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtzaXplXSAtIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gYmUgcmVuZGVyZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3N0YXJ0XSAtIFN0YXJ0aW5nIGluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtpbnN0YW5jZUNvdW50XSAtIHRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIG9mIHRoZSBzZXQgb2YgZWxlbWVudHMgdG8gZXhlY3V0ZVxuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gZHJhdyAodHlwZSwgc2l6ZSwgc3RhcnQsIGluc3RhbmNlQ291bnQpXG4gICAge1xuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGdsID0gcmVmLmdsO1xuICAgICAgICB2YXIgZ2VvbWV0cnkgPSB0aGlzLl9hY3RpdmVHZW9tZXRyeTtcblxuICAgICAgICAvLyBUT0RPLi4gdGhpcyBzaG91bGQgbm90IGNoYW5nZSBzbyBtYXliZSBjYWNoZSB0aGUgZnVuY3Rpb24/XG5cbiAgICAgICAgaWYgKGdlb21ldHJ5LmluZGV4QnVmZmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYnl0ZVNpemUgPSBnZW9tZXRyeS5pbmRleEJ1ZmZlci5kYXRhLkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgICAgICAgICAgdmFyIGdsVHlwZSA9IGJ5dGVTaXplID09PSAyID8gZ2wuVU5TSUdORURfU0hPUlQgOiBnbC5VTlNJR05FRF9JTlQ7XG5cbiAgICAgICAgICAgIGlmIChieXRlU2l6ZSA9PT0gMiB8fCAoYnl0ZVNpemUgPT09IDQgJiYgdGhpcy5jYW5Vc2VVSW50MzJFbGVtZW50SW5kZXgpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChnZW9tZXRyeS5pbnN0YW5jZWQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgICAgICAgICAgICAgICAgIGdsLmRyYXdFbGVtZW50c0luc3RhbmNlZCh0eXBlLCBzaXplIHx8IGdlb21ldHJ5LmluZGV4QnVmZmVyLmRhdGEubGVuZ3RoLCBnbFR5cGUsIChzdGFydCB8fCAwKSAqIGJ5dGVTaXplLCBpbnN0YW5jZUNvdW50IHx8IDEpO1xuICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgICAgICAgICAgICAgICAgICBnbC5kcmF3RWxlbWVudHModHlwZSwgc2l6ZSB8fCBnZW9tZXRyeS5pbmRleEJ1ZmZlci5kYXRhLmxlbmd0aCwgZ2xUeXBlLCAoc3RhcnQgfHwgMCkgKiBieXRlU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3Vuc3VwcG9ydGVkIGluZGV4IGJ1ZmZlciB0eXBlOiB1aW50MzInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnZW9tZXRyeS5pbnN0YW5jZWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPRE8gbmVlZCBhIGJldHRlciB3YXkgdG8gY2FsY3VsYXRlIHNpemUuLlxuICAgICAgICAgICAgZ2wuZHJhd0FycmF5c0luc3RhbmNlZCh0eXBlLCBzdGFydCwgc2l6ZSB8fCBnZW9tZXRyeS5nZXRTaXplKCksIGluc3RhbmNlQ291bnQgfHwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC5kcmF3QXJyYXlzKHR5cGUsIHN0YXJ0LCBzaXplIHx8IGdlb21ldHJ5LmdldFNpemUoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVW5iaW5kL3Jlc2V0IGV2ZXJ5dGhpbmdcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgR2VvbWV0cnlTeXN0ZW0ucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5nbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVZhbyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUdlb21ldHJ5ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEdlb21ldHJ5U3lzdGVtO1xufShTeXN0ZW0pKTtcblxuLyoqXG4gKiBAbWV0aG9kIGNvbXBpbGVQcm9ncmFtXG4gKiBAcHJpdmF0ZVxuICogQG1lbWJlcm9mIFBJWEkuZ2xDb3JlLnNoYWRlclxuICogQHBhcmFtIGdsIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IFRoZSBjdXJyZW50IFdlYkdMIGNvbnRleHQge1dlYkdMUHJvZ3JhbX1cbiAqIEBwYXJhbSB2ZXJ0ZXhTcmMge3N0cmluZ3xzdHJpbmdbXX0gVGhlIHZlcnRleCBzaGFkZXIgc291cmNlIGFzIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKiBAcGFyYW0gZnJhZ21lbnRTcmMge3N0cmluZ3xzdHJpbmdbXX0gVGhlIGZyYWdtZW50IHNoYWRlciBzb3VyY2UgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqIEBwYXJhbSBhdHRyaWJ1dGVMb2NhdGlvbnMge09iamVjdH0gQW4gYXR0cmlidXRlIGxvY2F0aW9uIG1hcCB0aGF0IGxldHMgeW91IG1hbnVhbGx5IHNldCB0aGUgYXR0cmlidXRlIGxvY2F0aW9uc1xuICogQHJldHVybiB7V2ViR0xQcm9ncmFtfSB0aGUgc2hhZGVyIHByb2dyYW1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZVByb2dyYW0oZ2wsIHZlcnRleFNyYywgZnJhZ21lbnRTcmMsIGF0dHJpYnV0ZUxvY2F0aW9ucylcbntcbiAgICB2YXIgZ2xWZXJ0U2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgdmVydGV4U3JjKTtcbiAgICB2YXIgZ2xGcmFnU2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBmcmFnbWVudFNyYyk7XG5cbiAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcblxuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBnbFZlcnRTaGFkZXIpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBnbEZyYWdTaGFkZXIpO1xuXG4gICAgLy8gb3B0aW9uYWxseSwgc2V0IHRoZSBhdHRyaWJ1dGVzIG1hbnVhbGx5IGZvciB0aGUgcHJvZ3JhbSByYXRoZXIgdGhhbiBsZXR0aW5nIFdlYkdMIGRlY2lkZS4uXG4gICAgaWYgKGF0dHJpYnV0ZUxvY2F0aW9ucylcbiAgICB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYXR0cmlidXRlTG9jYXRpb25zKVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC5iaW5kQXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgYXR0cmlidXRlTG9jYXRpb25zW2ldLCBpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuXG4gICAgLy8gaWYgbGlua2luZyBmYWlscywgdGhlbiBsb2cgYW5kIGNsZWFudXBcbiAgICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKVxuICAgIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignUGl4aS5qcyBFcnJvcjogQ291bGQgbm90IGluaXRpYWxpemUgc2hhZGVyLicpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCdnbC5WQUxJREFURV9TVEFUVVMnLCBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLlZBTElEQVRFX1NUQVRVUykpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCdnbC5nZXRFcnJvcigpJywgZ2wuZ2V0RXJyb3IoKSk7XG5cbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBwcm9ncmFtIGluZm8gbG9nLCBsb2cgaXRcbiAgICAgICAgaWYgKGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pICE9PSAnJylcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdQaXhpLmpzIFdhcm5pbmc6IGdsLmdldFByb2dyYW1JbmZvTG9nKCknLCBnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKSk7XG4gICAgICAgIH1cblxuICAgICAgICBnbC5kZWxldGVQcm9ncmFtKHByb2dyYW0pO1xuICAgICAgICBwcm9ncmFtID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBjbGVhbiB1cCBzb21lIHNoYWRlcnNcbiAgICBnbC5kZWxldGVTaGFkZXIoZ2xWZXJ0U2hhZGVyKTtcbiAgICBnbC5kZWxldGVTaGFkZXIoZ2xGcmFnU2hhZGVyKTtcblxuICAgIHJldHVybiBwcm9ncmFtO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gZ2wge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gVGhlIGN1cnJlbnQgV2ViR0wgY29udGV4dCB7V2ViR0xQcm9ncmFtfVxuICogQHBhcmFtIHR5cGUge051bWJlcn0gdGhlIHR5cGUsIGNhbiBiZSBlaXRoZXIgVkVSVEVYX1NIQURFUiBvciBGUkFHTUVOVF9TSEFERVJcbiAqIEBwYXJhbSB2ZXJ0ZXhTcmMge3N0cmluZ3xzdHJpbmdbXX0gVGhlIHZlcnRleCBzaGFkZXIgc291cmNlIGFzIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKiBAcmV0dXJuIHtXZWJHTFNoYWRlcn0gdGhlIHNoYWRlclxuICovXG5mdW5jdGlvbiBjb21waWxlU2hhZGVyKGdsLCB0eXBlLCBzcmMpXG57XG4gICAgdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcblxuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNyYyk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuXG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpXG4gICAge1xuICAgICAgICBjb25zb2xlLndhcm4oc3JjKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcikpO1xuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBzaGFkZXI7XG59XG5cbi8qKlxuICogQG1ldGhvZCBkZWZhdWx0VmFsdWVcbiAqIEBtZW1iZXJvZiBQSVhJLmdsQ29yZS5zaGFkZXJcbiAqIEBwYXJhbSB0eXBlIHtTdHJpbmd9IFR5cGUgb2YgdmFsdWVcbiAqIEBwYXJhbSBzaXplIHtOdW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkZWZhdWx0VmFsdWUodHlwZSwgc2l6ZSlcbntcbiAgICBzd2l0Y2ggKHR5cGUpXG4gICAge1xuICAgICAgICBjYXNlICdmbG9hdCc6XG4gICAgICAgICAgICByZXR1cm4gMDtcblxuICAgICAgICBjYXNlICd2ZWMyJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDIgKiBzaXplKTtcblxuICAgICAgICBjYXNlICd2ZWMzJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDMgKiBzaXplKTtcblxuICAgICAgICBjYXNlICd2ZWM0JzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDQgKiBzaXplKTtcblxuICAgICAgICBjYXNlICdpbnQnOlxuICAgICAgICBjYXNlICdzYW1wbGVyMkQnOlxuICAgICAgICBjYXNlICdzYW1wbGVyMkRBcnJheSc6XG4gICAgICAgICAgICByZXR1cm4gMDtcblxuICAgICAgICBjYXNlICdpdmVjMic6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEludDMyQXJyYXkoMiAqIHNpemUpO1xuXG4gICAgICAgIGNhc2UgJ2l2ZWMzJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheSgzICogc2l6ZSk7XG5cbiAgICAgICAgY2FzZSAnaXZlYzQnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDQgKiBzaXplKTtcblxuICAgICAgICBjYXNlICdib29sJzpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICBjYXNlICdidmVjMic6XG5cbiAgICAgICAgICAgIHJldHVybiBib29sZWFuQXJyYXkoMiAqIHNpemUpO1xuXG4gICAgICAgIGNhc2UgJ2J2ZWMzJzpcbiAgICAgICAgICAgIHJldHVybiBib29sZWFuQXJyYXkoMyAqIHNpemUpO1xuXG4gICAgICAgIGNhc2UgJ2J2ZWM0JzpcbiAgICAgICAgICAgIHJldHVybiBib29sZWFuQXJyYXkoNCAqIHNpemUpO1xuXG4gICAgICAgIGNhc2UgJ21hdDInOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoWzEsIDAsXG4gICAgICAgICAgICAgICAgMCwgMV0pO1xuXG4gICAgICAgIGNhc2UgJ21hdDMnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoWzEsIDAsIDAsXG4gICAgICAgICAgICAgICAgMCwgMSwgMCxcbiAgICAgICAgICAgICAgICAwLCAwLCAxXSk7XG5cbiAgICAgICAgY2FzZSAnbWF0NCc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbMSwgMCwgMCwgMCxcbiAgICAgICAgICAgICAgICAwLCAxLCAwLCAwLFxuICAgICAgICAgICAgICAgIDAsIDAsIDEsIDAsXG4gICAgICAgICAgICAgICAgMCwgMCwgMCwgMV0pO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBib29sZWFuQXJyYXkoc2l6ZSlcbntcbiAgICB2YXIgYXJyYXkgPSBuZXcgQXJyYXkoc2l6ZSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKVxuICAgIHtcbiAgICAgICAgYXJyYXlbaV0gPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbnZhciB1bmtub3duQ29udGV4dCA9IHt9O1xudmFyIGNvbnRleHQgPSB1bmtub3duQ29udGV4dDtcblxuLyoqXG4gKiByZXR1cm5zIGEgbGl0dGxlIFdlYkdMIGNvbnRleHQgdG8gdXNlIGZvciBwcm9ncmFtIGluc3BlY3Rpb24uXG4gKlxuICogQHN0YXRpY1xuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHt3ZWJHTC1jb250ZXh0fSBhIGdsIGNvbnRleHQgdG8gdGVzdCB3aXRoXG4gKi9cbmZ1bmN0aW9uIGdldFRlc3RDb250ZXh0KClcbntcbiAgICBpZiAoY29udGV4dCA9PT0gdW5rbm93bkNvbnRleHQgfHwgY29udGV4dC5pc0NvbnRleHRMb3N0KCkpXG4gICAge1xuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cbiAgICAgICAgdmFyIGdsO1xuXG4gICAgICAgIGlmIChzZXR0aW5ncy5QUkVGRVJfRU5WID49IEVOVi5XRUJHTDIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsMicsIHt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZ2wpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJywge30pXG4gICAgICAgICAgICB8fCBjYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJywge30pO1xuXG4gICAgICAgICAgICBpZiAoIWdsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGZhaWwsIG5vdCBhYmxlIHRvIGdldCBhIGNvbnRleHRcbiAgICAgICAgICAgICAgICBnbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gZm9yIHNoYWRlciB0ZXN0aW5nLi5cbiAgICAgICAgICAgICAgICBnbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dCA9IGdsO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZXh0O1xufVxuXG52YXIgbWF4RnJhZ21lbnRQcmVjaXNpb247XG5cbmZ1bmN0aW9uIGdldE1heEZyYWdtZW50UHJlY2lzaW9uKClcbntcbiAgICBpZiAoIW1heEZyYWdtZW50UHJlY2lzaW9uKVxuICAgIHtcbiAgICAgICAgbWF4RnJhZ21lbnRQcmVjaXNpb24gPSBQUkVDSVNJT04uTUVESVVNO1xuICAgICAgICB2YXIgZ2wgPSBnZXRUZXN0Q29udGV4dCgpO1xuXG4gICAgICAgIGlmIChnbClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgc2hhZGVyRnJhZ21lbnQgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5ISUdIX0ZMT0FUKTtcblxuICAgICAgICAgICAgICAgIG1heEZyYWdtZW50UHJlY2lzaW9uID0gc2hhZGVyRnJhZ21lbnQucHJlY2lzaW9uID8gUFJFQ0lTSU9OLkhJR0ggOiBQUkVDSVNJT04uTUVESVVNO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heEZyYWdtZW50UHJlY2lzaW9uO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGZsb2F0IHByZWNpc2lvbiBvbiB0aGUgc2hhZGVyLCBlbnN1cmluZyB0aGUgZGV2aWNlIHN1cHBvcnRzIHRoZSByZXF1ZXN0IHByZWNpc2lvbi5cbiAqIElmIHRoZSBwcmVjaXNpb24gaXMgYWxyZWFkeSBwcmVzZW50LCBpdCBqdXN0IGVuc3VyZXMgdGhhdCB0aGUgZGV2aWNlIGlzIGFibGUgdG8gaGFuZGxlIGl0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjIC0gVGhlIHNoYWRlciBzb3VyY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRQcmVjaXNpb24gLSBUaGUgcmVxdWVzdCBmbG9hdCBwcmVjaXNpb24gb2YgdGhlIHNoYWRlci4gT3B0aW9ucyBhcmUgJ2xvd3AnLCAnbWVkaXVtcCcgb3IgJ2hpZ2hwJy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXhTdXBwb3J0ZWRQcmVjaXNpb24gLSBUaGUgbWF4aW11bSBwcmVjaXNpb24gdGhlIHNoYWRlciBzdXBwb3J0cy5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IG1vZGlmaWVkIHNoYWRlciBzb3VyY2VcbiAqL1xuZnVuY3Rpb24gc2V0UHJlY2lzaW9uKHNyYywgcmVxdWVzdGVkUHJlY2lzaW9uLCBtYXhTdXBwb3J0ZWRQcmVjaXNpb24pXG57XG4gICAgaWYgKHNyYy5zdWJzdHJpbmcoMCwgOSkgIT09ICdwcmVjaXNpb24nKVxuICAgIHtcbiAgICAgICAgLy8gbm8gcHJlY2lzaW9uIHN1cHBsaWVkLCBzbyBQaXhpSlMgd2lsbCBhZGQgdGhlIHJlcXVlc3RlZCBsZXZlbC5cbiAgICAgICAgdmFyIHByZWNpc2lvbiA9IHJlcXVlc3RlZFByZWNpc2lvbjtcblxuICAgICAgICAvLyBJZiBoaWdocCBpcyByZXF1ZXN0ZWQgYnV0IG5vdCBzdXBwb3J0ZWQsIGRvd25ncmFkZSBwcmVjaXNpb24gdG8gYSBsZXZlbCBhbGwgZGV2aWNlcyBzdXBwb3J0LlxuICAgICAgICBpZiAocmVxdWVzdGVkUHJlY2lzaW9uID09PSBQUkVDSVNJT04uSElHSCAmJiBtYXhTdXBwb3J0ZWRQcmVjaXNpb24gIT09IFBSRUNJU0lPTi5ISUdIKVxuICAgICAgICB7XG4gICAgICAgICAgICBwcmVjaXNpb24gPSBQUkVDSVNJT04uTUVESVVNO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcInByZWNpc2lvbiBcIiArIHByZWNpc2lvbiArIFwiIGZsb2F0O1xcblwiICsgc3JjKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobWF4U3VwcG9ydGVkUHJlY2lzaW9uICE9PSBQUkVDSVNJT04uSElHSCAmJiBzcmMuc3Vic3RyaW5nKDAsIDE1KSA9PT0gJ3ByZWNpc2lvbiBoaWdocCcpXG4gICAge1xuICAgICAgICAvLyBwcmVjaXNpb24gd2FzIHN1cHBsaWVkLCBidXQgYXQgYSBsZXZlbCB0aGlzIGRldmljZSBkb2VzIG5vdCBzdXBwb3J0LCBzbyBkb3duZ3JhZGluZyB0byBtZWRpdW1wLlxuICAgICAgICByZXR1cm4gc3JjLnJlcGxhY2UoJ3ByZWNpc2lvbiBoaWdocCcsICdwcmVjaXNpb24gbWVkaXVtcCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzcmM7XG59XG5cbnZhciBHTFNMX1RPX1NJWkUgPSB7XG4gICAgZmxvYXQ6ICAgIDEsXG4gICAgdmVjMjogICAgIDIsXG4gICAgdmVjMzogICAgIDMsXG4gICAgdmVjNDogICAgIDQsXG5cbiAgICBpbnQ6ICAgICAgMSxcbiAgICBpdmVjMjogICAgMixcbiAgICBpdmVjMzogICAgMyxcbiAgICBpdmVjNDogICAgNCxcblxuICAgIGJvb2w6ICAgICAxLFxuICAgIGJ2ZWMyOiAgICAyLFxuICAgIGJ2ZWMzOiAgICAzLFxuICAgIGJ2ZWM0OiAgICA0LFxuXG4gICAgbWF0MjogICAgIDQsXG4gICAgbWF0MzogICAgIDksXG4gICAgbWF0NDogICAgIDE2LFxuXG4gICAgc2FtcGxlcjJEOiAgMSxcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBtZXRob2QgbWFwU2l6ZVxuICogQG1lbWJlcm9mIFBJWEkuZ2xDb3JlLnNoYWRlclxuICogQHBhcmFtIHR5cGUge1N0cmluZ31cbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZnVuY3Rpb24gbWFwU2l6ZSh0eXBlKVxue1xuICAgIHJldHVybiBHTFNMX1RPX1NJWkVbdHlwZV07XG59XG5cbnZhciBHTF9UQUJMRSA9IG51bGw7XG5cbnZhciBHTF9UT19HTFNMX1RZUEVTID0ge1xuICAgIEZMT0FUOiAgICAgICAnZmxvYXQnLFxuICAgIEZMT0FUX1ZFQzI6ICAndmVjMicsXG4gICAgRkxPQVRfVkVDMzogICd2ZWMzJyxcbiAgICBGTE9BVF9WRUM0OiAgJ3ZlYzQnLFxuXG4gICAgSU5UOiAgICAgICAgICdpbnQnLFxuICAgIElOVF9WRUMyOiAgICAnaXZlYzInLFxuICAgIElOVF9WRUMzOiAgICAnaXZlYzMnLFxuICAgIElOVF9WRUM0OiAgICAnaXZlYzQnLFxuXG4gICAgQk9PTDogICAgICAgICdib29sJyxcbiAgICBCT09MX1ZFQzI6ICAgJ2J2ZWMyJyxcbiAgICBCT09MX1ZFQzM6ICAgJ2J2ZWMzJyxcbiAgICBCT09MX1ZFQzQ6ICAgJ2J2ZWM0JyxcblxuICAgIEZMT0FUX01BVDI6ICAnbWF0MicsXG4gICAgRkxPQVRfTUFUMzogICdtYXQzJyxcbiAgICBGTE9BVF9NQVQ0OiAgJ21hdDQnLFxuXG4gICAgU0FNUExFUl8yRDogICdzYW1wbGVyMkQnLFxuICAgIFNBTVBMRVJfQ1VCRTogICdzYW1wbGVyQ3ViZScsXG4gICAgU0FNUExFUl8yRF9BUlJBWTogICdzYW1wbGVyMkRBcnJheScsXG59O1xuXG5mdW5jdGlvbiBtYXBUeXBlKGdsLCB0eXBlKVxue1xuICAgIGlmICghR0xfVEFCTEUpXG4gICAge1xuICAgICAgICB2YXIgdHlwZU5hbWVzID0gT2JqZWN0LmtleXMoR0xfVE9fR0xTTF9UWVBFUyk7XG5cbiAgICAgICAgR0xfVEFCTEUgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVOYW1lcy5sZW5ndGg7ICsraSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHRuID0gdHlwZU5hbWVzW2ldO1xuXG4gICAgICAgICAgICBHTF9UQUJMRVtnbFt0bl1dID0gR0xfVE9fR0xTTF9UWVBFU1t0bl07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gR0xfVEFCTEVbdHlwZV07XG59XG5cbi8vIGN2ID0gQ2FjaGVkVmFsdWVcbi8vIHYgPSB2YWx1ZVxuLy8gdWQgPSB1bmlmb3JtRGF0YVxuLy8gdXYgPSB1bmlmb3JtVmFsdWVcbi8vIGwgPSBsb2NhdGlvblxudmFyIEdMU0xfVE9fU0lOR0xFX1NFVFRFUlNfQ0FDSEVEID0ge1xuXG4gICAgZmxvYXQ6IFwiXFxuICAgIGlmKGN2ICE9PSB2KVxcbiAgICB7XFxuICAgICAgICBjdi52ID0gdjtcXG4gICAgICAgIGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdilcXG4gICAgfVwiLFxuXG4gICAgdmVjMjogXCJcXG4gICAgaWYoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0pXFxuICAgIHtcXG4gICAgICAgIGN2WzBdID0gdlswXTtcXG4gICAgICAgIGN2WzFdID0gdlsxXTtcXG4gICAgICAgIGdsLnVuaWZvcm0yZihsb2NhdGlvbiwgdlswXSwgdlsxXSlcXG4gICAgfVwiLFxuXG4gICAgdmVjMzogXCJcXG4gICAgaWYoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0gfHwgY3ZbMl0gIT09IHZbMl0pXFxuICAgIHtcXG4gICAgICAgIGN2WzBdID0gdlswXTtcXG4gICAgICAgIGN2WzFdID0gdlsxXTtcXG4gICAgICAgIGN2WzJdID0gdlsyXTtcXG5cXG4gICAgICAgIGdsLnVuaWZvcm0zZihsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSlcXG4gICAgfVwiLFxuXG4gICAgdmVjNDogICAgICdnbC51bmlmb3JtNGYobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0sIHZbM10pJyxcblxuICAgIGludDogICAgICAnZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCB2KScsXG4gICAgaXZlYzI6ICAgICdnbC51bmlmb3JtMmkobG9jYXRpb24sIHZbMF0sIHZbMV0pJyxcbiAgICBpdmVjMzogICAgJ2dsLnVuaWZvcm0zaShsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSknLFxuICAgIGl2ZWM0OiAgICAnZ2wudW5pZm9ybTRpKGxvY2F0aW9uLCB2WzBdLCB2WzFdLCB2WzJdLCB2WzNdKScsXG5cbiAgICBib29sOiAgICAgJ2dsLnVuaWZvcm0xaShsb2NhdGlvbiwgdiknLFxuICAgIGJ2ZWMyOiAgICAnZ2wudW5pZm9ybTJpKGxvY2F0aW9uLCB2WzBdLCB2WzFdKScsXG4gICAgYnZlYzM6ICAgICdnbC51bmlmb3JtM2kobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0pJyxcbiAgICBidmVjNDogICAgJ2dsLnVuaWZvcm00aShsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSwgdlszXSknLFxuXG4gICAgbWF0MjogICAgICdnbC51bmlmb3JtTWF0cml4MmZ2KGxvY2F0aW9uLCBmYWxzZSwgdiknLFxuICAgIG1hdDM6ICAgICAnZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZmFsc2UsIHYpJyxcbiAgICBtYXQ0OiAgICAgJ2dsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2KScsXG5cbiAgICBzYW1wbGVyMkQ6ICAgICAgJ2dsLnVuaWZvcm0xaShsb2NhdGlvbiwgdiknLFxuICAgIHNhbXBsZXJDdWJlOiAgICAnZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCB2KScsXG4gICAgc2FtcGxlcjJEQXJyYXk6ICdnbC51bmlmb3JtMWkobG9jYXRpb24sIHYpJyxcbn07XG5cbnZhciBHTFNMX1RPX0FSUkFZX1NFVFRFUlMgPSB7XG5cbiAgICBmbG9hdDogICAgXCJnbC51bmlmb3JtMWZ2KGxvY2F0aW9uLCB2KVwiLFxuXG4gICAgdmVjMjogICAgIFwiZ2wudW5pZm9ybTJmdihsb2NhdGlvbiwgdilcIixcbiAgICB2ZWMzOiAgICAgXCJnbC51bmlmb3JtM2Z2KGxvY2F0aW9uLCB2KVwiLFxuICAgIHZlYzQ6ICAgICAnZ2wudW5pZm9ybTRmdihsb2NhdGlvbiwgdiknLFxuXG4gICAgbWF0NDogICAgICdnbC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBmYWxzZSwgdiknLFxuICAgIG1hdDM6ICAgICAnZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZmFsc2UsIHYpJyxcbiAgICBtYXQyOiAgICAgJ2dsLnVuaWZvcm1NYXRyaXgyZnYobG9jYXRpb24sIGZhbHNlLCB2KScsXG5cbiAgICBpbnQ6ICAgICAgJ2dsLnVuaWZvcm0xaXYobG9jYXRpb24sIHYpJyxcbiAgICBpdmVjMjogICAgJ2dsLnVuaWZvcm0yaXYobG9jYXRpb24sIHYpJyxcbiAgICBpdmVjMzogICAgJ2dsLnVuaWZvcm0zaXYobG9jYXRpb24sIHYpJyxcbiAgICBpdmVjNDogICAgJ2dsLnVuaWZvcm00aXYobG9jYXRpb24sIHYpJyxcblxuICAgIGJvb2w6ICAgICAnZ2wudW5pZm9ybTFpdihsb2NhdGlvbiwgdiknLFxuICAgIGJ2ZWMyOiAgICAnZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdiknLFxuICAgIGJ2ZWMzOiAgICAnZ2wudW5pZm9ybTNpdihsb2NhdGlvbiwgdiknLFxuICAgIGJ2ZWM0OiAgICAnZ2wudW5pZm9ybTRpdihsb2NhdGlvbiwgdiknLFxuXG4gICAgc2FtcGxlcjJEOiAgICAgICdnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2KScsXG4gICAgc2FtcGxlckN1YmU6ICAgICdnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2KScsXG4gICAgc2FtcGxlcjJEQXJyYXk6ICdnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2KScsXG59O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVVuaWZvcm1zU3luYyhncm91cCwgdW5pZm9ybURhdGEpXG57XG4gICAgdmFyIHRleHR1cmVDb3VudCA9IDA7XG4gICAgdmFyIGZ1bmMgPSBcInZhciB2ID0gbnVsbDtcXG4gICAgdmFyIGN2ID0gbnVsbFxcbiAgICB2YXIgZ2wgPSByZW5kZXJlci5nbFwiO1xuXG4gICAgZm9yICh2YXIgaSBpbiBncm91cC51bmlmb3JtcylcbiAgICB7XG4gICAgICAgIHZhciBkYXRhID0gdW5pZm9ybURhdGFbaV07XG5cbiAgICAgICAgaWYgKCFkYXRhKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoZ3JvdXAudW5pZm9ybXNbaV0uZ3JvdXApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnVuYyArPSBcIlxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuc2hhZGVyLnN5bmNVbmlmb3JtR3JvdXAodXYuXCIgKyBpICsgXCIpO1xcbiAgICAgICAgICAgICAgICBcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPICYmIHVuaWZvcm1EYXRhW2ldLnZhbHVlICE9PSAwIDwtLSBkbyB3ZSBzdGlsbCBuZWVkIHRoaXM/XG4gICAgICAgIGlmIChkYXRhLnR5cGUgPT09ICdmbG9hdCcgJiYgZGF0YS5zaXplID09PSAxKVxuICAgICAgICB7XG4gICAgICAgICAgICBmdW5jICs9IFwiXFxuICAgICAgICAgICAgaWYodXYuXCIgKyBpICsgXCIgIT09IHVkLlwiICsgaSArIFwiLnZhbHVlKVxcbiAgICAgICAgICAgIHtcXG4gICAgICAgICAgICAgICAgdWQuXCIgKyBpICsgXCIudmFsdWUgPSB1di5cIiArIGkgKyBcIlxcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodWQuXCIgKyBpICsgXCIubG9jYXRpb24sIHV2LlwiICsgaSArIFwiKVxcbiAgICAgICAgICAgIH1cXG5cIjtcbiAgICAgICAgfVxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgICAgIGVsc2UgaWYgKChkYXRhLnR5cGUgPT09ICdzYW1wbGVyMkQnIHx8IGRhdGEudHlwZSA9PT0gJ3NhbXBsZXJDdWJlJyB8fCBkYXRhLnR5cGUgPT09ICdzYW1wbGVyMkRBcnJheScpICYmIGRhdGEuc2l6ZSA9PT0gMSAmJiAhZGF0YS5pc0FycmF5KVxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZ1bmMgKz0gXCJcXG4gICAgICAgICAgICByZW5kZXJlci50ZXh0dXJlLmJpbmQodXYuXCIgKyBpICsgXCIsIFwiICsgdGV4dHVyZUNvdW50ICsgXCIpO1xcblxcbiAgICAgICAgICAgIGlmKHVkLlwiICsgaSArIFwiLnZhbHVlICE9PSBcIiArIHRleHR1cmVDb3VudCArIFwiKVxcbiAgICAgICAgICAgIHtcXG4gICAgICAgICAgICAgICAgdWQuXCIgKyBpICsgXCIudmFsdWUgPSBcIiArIHRleHR1cmVDb3VudCArIFwiO1xcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWkodWQuXCIgKyBpICsgXCIubG9jYXRpb24sIFwiICsgdGV4dHVyZUNvdW50ICsgXCIpO1xcbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBtYXgtbGVuXFxuICAgICAgICAgICAgfVxcblwiO1xuXG4gICAgICAgICAgICB0ZXh0dXJlQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICdtYXQzJyAmJiBkYXRhLnNpemUgPT09IDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChncm91cC51bmlmb3Jtc1tpXS5hICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBhbmQgc29tZSBzbWFydCBjYWNoaW5nIGRpcnR5IGlkcyBoZXJlIVxuICAgICAgICAgICAgICAgIGZ1bmMgKz0gXCJcXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdih1ZC5cIiArIGkgKyBcIi5sb2NhdGlvbiwgZmFsc2UsIHV2LlwiICsgaSArIFwiLnRvQXJyYXkodHJ1ZSkpO1xcbiAgICAgICAgICAgICAgICBcXG5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmdW5jICs9IFwiXFxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXgzZnYodWQuXCIgKyBpICsgXCIubG9jYXRpb24sIGZhbHNlLCB1di5cIiArIGkgKyBcIik7XFxuICAgICAgICAgICAgICAgIFxcblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gJ3ZlYzInICYmIGRhdGEuc2l6ZSA9PT0gMSlcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVE9ETyAtIGRvIHdlIG5lZWQgYm90aCBoZXJlP1xuICAgICAgICAgICAgLy8gbWF5YmUgd2UgY2FuIGdldCBhd2F5IHdpdGggb25seSB1c2luZyBwb2ludHM/XG4gICAgICAgICAgICBpZiAoZ3JvdXAudW5pZm9ybXNbaV0ueCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZ1bmMgKz0gXCJcXG4gICAgICAgICAgICAgICAgY3YgPSB1ZC5cIiArIGkgKyBcIi52YWx1ZTtcXG4gICAgICAgICAgICAgICAgdiA9IHV2LlwiICsgaSArIFwiO1xcblxcbiAgICAgICAgICAgICAgICBpZihjdlswXSAhPT0gdi54IHx8IGN2WzFdICE9PSB2LnkpXFxuICAgICAgICAgICAgICAgIHtcXG4gICAgICAgICAgICAgICAgICAgIGN2WzBdID0gdi54O1xcbiAgICAgICAgICAgICAgICAgICAgY3ZbMV0gPSB2Lnk7XFxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMmYodWQuXCIgKyBpICsgXCIubG9jYXRpb24sIHYueCwgdi55KTtcXG4gICAgICAgICAgICAgICAgfVxcblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZ1bmMgKz0gXCJcXG4gICAgICAgICAgICAgICAgY3YgPSB1ZC5cIiArIGkgKyBcIi52YWx1ZTtcXG4gICAgICAgICAgICAgICAgdiA9IHV2LlwiICsgaSArIFwiO1xcblxcbiAgICAgICAgICAgICAgICBpZihjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSlcXG4gICAgICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xcbiAgICAgICAgICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTJmKHVkLlwiICsgaSArIFwiLmxvY2F0aW9uLCB2WzBdLCB2WzFdKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBcXG5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICd2ZWM0JyAmJiBkYXRhLnNpemUgPT09IDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPRE8gLSBkbyB3ZSBuZWVkIGJvdGggaGVyZT9cbiAgICAgICAgICAgIC8vIG1heWJlIHdlIGNhbiBnZXQgYXdheSB3aXRoIG9ubHkgdXNpbmcgcG9pbnRzP1xuICAgICAgICAgICAgaWYgKGdyb3VwLnVuaWZvcm1zW2ldLndpZHRoICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnVuYyArPSBcIlxcbiAgICAgICAgICAgICAgICBjdiA9IHVkLlwiICsgaSArIFwiLnZhbHVlO1xcbiAgICAgICAgICAgICAgICB2ID0gdXYuXCIgKyBpICsgXCI7XFxuXFxuICAgICAgICAgICAgICAgIGlmKGN2WzBdICE9PSB2LnggfHwgY3ZbMV0gIT09IHYueSB8fCBjdlsyXSAhPT0gdi53aWR0aCB8fCBjdlszXSAhPT0gdi5oZWlnaHQpXFxuICAgICAgICAgICAgICAgIHtcXG4gICAgICAgICAgICAgICAgICAgIGN2WzBdID0gdi54O1xcbiAgICAgICAgICAgICAgICAgICAgY3ZbMV0gPSB2Lnk7XFxuICAgICAgICAgICAgICAgICAgICBjdlsyXSA9IHYud2lkdGg7XFxuICAgICAgICAgICAgICAgICAgICBjdlszXSA9IHYuaGVpZ2h0O1xcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmKHVkLlwiICsgaSArIFwiLmxvY2F0aW9uLCB2LngsIHYueSwgdi53aWR0aCwgdi5oZWlnaHQpXFxuICAgICAgICAgICAgICAgIH1cXG5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmdW5jICs9IFwiXFxuICAgICAgICAgICAgICAgIGN2ID0gdWQuXCIgKyBpICsgXCIudmFsdWU7XFxuICAgICAgICAgICAgICAgIHYgPSB1di5cIiArIGkgKyBcIjtcXG5cXG4gICAgICAgICAgICAgICAgaWYoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0gfHwgY3ZbMl0gIT09IHZbMl0gfHwgY3ZbM10gIT09IHZbM10pXFxuICAgICAgICAgICAgICAgIHtcXG4gICAgICAgICAgICAgICAgICAgIGN2WzBdID0gdlswXTtcXG4gICAgICAgICAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcXG4gICAgICAgICAgICAgICAgICAgIGN2WzJdID0gdlsyXTtcXG4gICAgICAgICAgICAgICAgICAgIGN2WzNdID0gdlszXTtcXG5cXG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00Zih1ZC5cIiArIGkgKyBcIi5sb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSwgdlszXSlcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBcXG5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZVR5cGUgPSAoZGF0YS5zaXplID09PSAxKSA/IEdMU0xfVE9fU0lOR0xFX1NFVFRFUlNfQ0FDSEVEIDogR0xTTF9UT19BUlJBWV9TRVRURVJTO1xuXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAgdGVtcGxhdGVUeXBlW2RhdGEudHlwZV0ucmVwbGFjZSgnbG9jYXRpb24nLCAoXCJ1ZC5cIiArIGkgKyBcIi5sb2NhdGlvblwiKSk7XG5cbiAgICAgICAgICAgIGZ1bmMgKz0gXCJcXG4gICAgICAgICAgICBjdiA9IHVkLlwiICsgaSArIFwiLnZhbHVlO1xcbiAgICAgICAgICAgIHYgPSB1di5cIiArIGkgKyBcIjtcXG4gICAgICAgICAgICBcIiArIHRlbXBsYXRlICsgXCI7XFxuXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCd1ZCcsICd1dicsICdyZW5kZXJlcicsIGZ1bmMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy1mdW5jXG59XG5cbnZhciBmcmFnVGVtcGxhdGUgPSBbXG4gICAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG4gICAgJ3ZvaWQgbWFpbih2b2lkKXsnLFxuICAgICdmbG9hdCB0ZXN0ID0gMC4xOycsXG4gICAgJyVmb3Jsb29wJScsXG4gICAgJ2dsX0ZyYWdDb2xvciA9IHZlYzQoMC4wKTsnLFxuICAgICd9JyBdLmpvaW4oJ1xcbicpO1xuXG5mdW5jdGlvbiBjaGVja01heElmU3RhdGVtZW50c0luU2hhZGVyKG1heElmcywgZ2wpXG57XG4gICAgaWYgKG1heElmcyA9PT0gMClcbiAgICB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBvZiBgMGAgcGFzc2VkIHRvIGBjaGVja01heElmU3RhdGVtZW50c0luU2hhZGVyYCcpO1xuICAgIH1cblxuICAgIHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcblxuICAgIHdoaWxlICh0cnVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgIHtcbiAgICAgICAgdmFyIGZyYWdtZW50U3JjID0gZnJhZ1RlbXBsYXRlLnJlcGxhY2UoLyVmb3Jsb29wJS9naSwgZ2VuZXJhdGVJZlRlc3RTcmMobWF4SWZzKSk7XG5cbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgZnJhZ21lbnRTcmMpO1xuICAgICAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgICAgICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpXG4gICAgICAgIHtcbiAgICAgICAgICAgIG1heElmcyA9IChtYXhJZnMgLyAyKSB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyB2YWxpZCFcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heElmcztcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVJZlRlc3RTcmMobWF4SWZzKVxue1xuICAgIHZhciBzcmMgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4SWZzOyArK2kpXG4gICAge1xuICAgICAgICBpZiAoaSA+IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNyYyArPSAnXFxuZWxzZSAnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGkgPCBtYXhJZnMgLSAxKVxuICAgICAgICB7XG4gICAgICAgICAgICBzcmMgKz0gXCJpZih0ZXN0ID09IFwiICsgaSArIFwiLjApe31cIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzcmM7XG59XG5cbi8vIENhY2hlIHRoZSByZXN1bHQgdG8gcHJldmVudCBydW5uaW5nIHRoaXMgb3ZlciBhbmQgb3ZlclxudmFyIHVuc2FmZUV2YWw7XG5cbi8qKlxuICogTm90IGFsbCBwbGF0Zm9ybXMgYWxsb3cgdG8gZ2VuZXJhdGUgZnVuY3Rpb24gY29kZSAoZS5nLiwgYG5ldyBGdW5jdGlvbmApLlxuICogdGhpcyBwcm92aWRlcyB0aGUgcGxhdGZvcm0tbGV2ZWwgZGV0ZWN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gdW5zYWZlRXZhbFN1cHBvcnRlZCgpXG57XG4gICAgaWYgKHR5cGVvZiB1bnNhZmVFdmFsID09PSAnYm9vbGVhbicpXG4gICAge1xuICAgICAgICByZXR1cm4gdW5zYWZlRXZhbDtcbiAgICB9XG5cbiAgICB0cnlcbiAgICB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLW5ldy1mdW5jICovXG4gICAgICAgIHZhciBmdW5jID0gbmV3IEZ1bmN0aW9uKCdwYXJhbTEnLCAncGFyYW0yJywgJ3BhcmFtMycsICdyZXR1cm4gcGFyYW0xW3BhcmFtMl0gPT09IHBhcmFtMzsnKTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1uZXctZnVuYyAqL1xuXG4gICAgICAgIHVuc2FmZUV2YWwgPSBmdW5jKHsgYTogJ2InIH0sICdhJywgJ2InKSA9PT0gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpXG4gICAge1xuICAgICAgICB1bnNhZmVFdmFsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuc2FmZUV2YWw7XG59XG5cbnZhciBkZWZhdWx0RnJhZ21lbnQgPSBcInZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xcblxcbnVuaWZvcm0gc2FtcGxlcjJEIHVTYW1wbGVyO1xcblxcbnZvaWQgbWFpbih2b2lkKXtcXG4gICBnbF9GcmFnQ29sb3IgKj0gdGV4dHVyZTJEKHVTYW1wbGVyLCB2VGV4dHVyZUNvb3JkKTtcXG59XCI7XG5cbnZhciBkZWZhdWx0VmVydGV4ID0gXCJhdHRyaWJ1dGUgdmVjMiBhVmVydGV4UG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgYVRleHR1cmVDb29yZDtcXG5cXG51bmlmb3JtIG1hdDMgcHJvamVjdGlvbk1hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG52b2lkIG1haW4odm9pZCl7XFxuICAgZ2xfUG9zaXRpb24gPSB2ZWM0KChwcm9qZWN0aW9uTWF0cml4ICogdmVjMyhhVmVydGV4UG9zaXRpb24sIDEuMCkpLnh5LCAwLjAsIDEuMCk7XFxuICAgdlRleHR1cmVDb29yZCA9IGFUZXh0dXJlQ29vcmQ7XFxufVxcblwiO1xuXG4vLyBpbXBvcnQgKiBhcyBmcm9tICcuLi9zeXN0ZW1zL3NoYWRlci9zaGFkZXInO1xuXG52YXIgVUlEJDMgPSAwO1xuXG52YXIgbmFtZUNhY2hlID0ge307XG5cbi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGNyZWF0ZSBhIHNoYWRlciBwcm9ncmFtLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFByb2dyYW0gPSBmdW5jdGlvbiBQcm9ncmFtKHZlcnRleFNyYywgZnJhZ21lbnRTcmMsIG5hbWUpXG57XG4gICAgaWYgKCBuYW1lID09PSB2b2lkIDAgKSBuYW1lID0gJ3BpeGktc2hhZGVyJztcblxuICAgIHRoaXMuaWQgPSBVSUQkMysrO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHZlcnRleCBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0ZXhTcmMgPSB2ZXJ0ZXhTcmMgfHwgUHJvZ3JhbS5kZWZhdWx0VmVydGV4U3JjO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZyYWdtZW50IHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmZyYWdtZW50U3JjID0gZnJhZ21lbnRTcmMgfHwgUHJvZ3JhbS5kZWZhdWx0RnJhZ21lbnRTcmM7XG5cbiAgICB0aGlzLnZlcnRleFNyYyA9IHRoaXMudmVydGV4U3JjLnRyaW0oKTtcbiAgICB0aGlzLmZyYWdtZW50U3JjID0gdGhpcy5mcmFnbWVudFNyYy50cmltKCk7XG5cbiAgICBpZiAodGhpcy52ZXJ0ZXhTcmMuc3Vic3RyaW5nKDAsIDgpICE9PSAnI3ZlcnNpb24nKVxuICAgIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvXFxzKy9nLCAnLScpO1xuXG4gICAgICAgIGlmIChuYW1lQ2FjaGVbbmFtZV0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWVDYWNoZVtuYW1lXSsrO1xuICAgICAgICAgICAgbmFtZSArPSBcIi1cIiArIChuYW1lQ2FjaGVbbmFtZV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZUNhY2hlW25hbWVdID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmVydGV4U3JjID0gXCIjZGVmaW5lIFNIQURFUl9OQU1FIFwiICsgbmFtZSArIFwiXFxuXCIgKyAodGhpcy52ZXJ0ZXhTcmMpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U3JjID0gXCIjZGVmaW5lIFNIQURFUl9OQU1FIFwiICsgbmFtZSArIFwiXFxuXCIgKyAodGhpcy5mcmFnbWVudFNyYyk7XG5cbiAgICAgICAgdGhpcy52ZXJ0ZXhTcmMgPSBzZXRQcmVjaXNpb24odGhpcy52ZXJ0ZXhTcmMsIHNldHRpbmdzLlBSRUNJU0lPTl9WRVJURVgsIFBSRUNJU0lPTi5ISUdIKTtcbiAgICAgICAgdGhpcy5mcmFnbWVudFNyYyA9IHNldFByZWNpc2lvbih0aGlzLmZyYWdtZW50U3JjLCBzZXR0aW5ncy5QUkVDSVNJT05fRlJBR01FTlQsIGdldE1heEZyYWdtZW50UHJlY2lzaW9uKCkpO1xuICAgIH1cblxuICAgIC8vIGN1cnJlbnRseSB0aGlzIGRvZXMgbm90IGV4dHJhY3Qgc3RydWN0cyBvbmx5IGRlZmF1bHQgdHlwZXNcbiAgICB0aGlzLmV4dHJhY3REYXRhKHRoaXMudmVydGV4U3JjLCB0aGlzLmZyYWdtZW50U3JjKTtcblxuICAgIC8vIHRoaXMgaXMgd2hlcmUgd2Ugc3RvcmUgc2hhZGVyIHJlZmVyZW5jZXMuLlxuICAgIHRoaXMuZ2xQcm9ncmFtcyA9IHt9O1xuXG4gICAgdGhpcy5zeW5jVW5pZm9ybXMgPSBudWxsO1xufTtcblxudmFyIHN0YXRpY0FjY2Vzc29ycyA9IHsgZGVmYXVsdFZlcnRleFNyYzogeyBjb25maWd1cmFibGU6IHRydWUgfSxkZWZhdWx0RnJhZ21lbnRTcmM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgZGF0YSBmb3IgYSBidXkgY3JlYXRpbmcgYSBzbWFsbCB0ZXN0IHByb2dyYW1cbiAqIG9yIHJlYWRpbmcgdGhlIHNyYyBkaXJlY3RseS5cbiAqIEBwcm90ZWN0ZWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3ZlcnRleFNyY10gLSBUaGUgc291cmNlIG9mIHRoZSB2ZXJ0ZXggc2hhZGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IFtmcmFnbWVudFNyY10gLSBUaGUgc291cmNlIG9mIHRoZSBmcmFnbWVudCBzaGFkZXIuXG4gKi9cblByb2dyYW0ucHJvdG90eXBlLmV4dHJhY3REYXRhID0gZnVuY3Rpb24gZXh0cmFjdERhdGEgKHZlcnRleFNyYywgZnJhZ21lbnRTcmMpXG57XG4gICAgdmFyIGdsID0gZ2V0VGVzdENvbnRleHQoKTtcblxuICAgIGlmIChnbClcbiAgICB7XG4gICAgICAgIHZhciBwcm9ncmFtID0gY29tcGlsZVByb2dyYW0oZ2wsIHZlcnRleFNyYywgZnJhZ21lbnRTcmMpO1xuXG4gICAgICAgIHRoaXMuYXR0cmlidXRlRGF0YSA9IHRoaXMuZ2V0QXR0cmlidXRlRGF0YShwcm9ncmFtLCBnbCk7XG4gICAgICAgIHRoaXMudW5pZm9ybURhdGEgPSB0aGlzLmdldFVuaWZvcm1EYXRhKHByb2dyYW0sIGdsKTtcblxuICAgICAgICBnbC5kZWxldGVQcm9ncmFtKHByb2dyYW0pO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICB0aGlzLnVuaWZvcm1EYXRhID0ge307XG4gICAgICAgIHRoaXMuYXR0cmlidXRlRGF0YSA9IHt9O1xuICAgIH1cbn07XG5cbi8qKlxuICogcmV0dXJucyB0aGUgYXR0cmlidXRlIGRhdGEgZnJvbSB0aGUgcHJvZ3JhbVxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1dlYkdMUHJvZ3JhbX0gW3Byb2dyYW1dIC0gdGhlIFdlYkdMIHByb2dyYW1cbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBbZ2xdIC0gdGhlIFdlYkdMIGNvbnRleHRcbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB0aGUgYXR0cmlidXRlIGRhdGEgZm9yIHRoaXMgcHJvZ3JhbVxuICovXG5Qcm9ncmFtLnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVEYXRhID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlRGF0YSAocHJvZ3JhbSwgZ2wpXG57XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICB2YXIgYXR0cmlidXRlc0FycmF5ID0gW107XG5cbiAgICB2YXIgdG90YWxBdHRyaWJ1dGVzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfQVRUUklCVVRFUyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsQXR0cmlidXRlczsgaSsrKVxuICAgIHtcbiAgICAgICAgdmFyIGF0dHJpYkRhdGEgPSBnbC5nZXRBY3RpdmVBdHRyaWIocHJvZ3JhbSwgaSk7XG4gICAgICAgIHZhciB0eXBlID0gbWFwVHlwZShnbCwgYXR0cmliRGF0YS50eXBlKTtcblxuICAgICAgICAvKmVzbGludC1kaXNhYmxlICovXG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIG5hbWU6IGF0dHJpYkRhdGEubmFtZSxcbiAgICAgICAgICAgIHNpemU6IG1hcFNpemUodHlwZSksXG4gICAgICAgICAgICBsb2NhdGlvbjogMCxcbiAgICAgICAgfTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gICAgICAgIGF0dHJpYnV0ZXNbYXR0cmliRGF0YS5uYW1lXSA9IGRhdGE7XG4gICAgICAgIGF0dHJpYnV0ZXNBcnJheS5wdXNoKGRhdGEpO1xuICAgIH1cblxuICAgIGF0dHJpYnV0ZXNBcnJheS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiAoYS5uYW1lID4gYi5uYW1lKSA/IDEgOiAtMTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uZnVzaW5nLWFycm93XG5cbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoOyBpJDErKylcbiAgICB7XG4gICAgICAgIGF0dHJpYnV0ZXNBcnJheVtpJDFdLmxvY2F0aW9uID0gaSQxO1xuICAgIH1cblxuICAgIHJldHVybiBhdHRyaWJ1dGVzO1xufTtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSB1bmlmb3JtIGRhdGEgZnJvbSB0aGUgcHJvZ3JhbVxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge3dlYkdMLXByb2dyYW19IFtwcm9ncmFtXSAtIHRoZSB3ZWJnbCBwcm9ncmFtXG4gKiBAcGFyYW0ge2NvbnRleHR9IFtnbF0gLSB0aGUgV2ViR0wgY29udGV4dFxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSB1bmlmb3JtIGRhdGEgZm9yIHRoaXMgcHJvZ3JhbVxuICovXG5Qcm9ncmFtLnByb3RvdHlwZS5nZXRVbmlmb3JtRGF0YSA9IGZ1bmN0aW9uIGdldFVuaWZvcm1EYXRhIChwcm9ncmFtLCBnbClcbntcbiAgICB2YXIgdW5pZm9ybXMgPSB7fTtcblxuICAgIHZhciB0b3RhbFVuaWZvcm1zID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xuXG4gICAgLy8gVE9ETyBleHBvc2UgdGhpcyBhcyBhIHByb3A/XG4gICAgLy8gY29uc3QgbWFza1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXihwcm9qZWN0aW9uTWF0cml4fHVTYW1wbGVyfHRyYW5zbGF0aW9uTWF0cml4KSQnKTtcbiAgICAvLyBjb25zdCBtYXNrUmVnZXggPSBuZXcgUmVnRXhwKCdeKHByb2plY3Rpb25NYXRyaXh8dVNhbXBsZXJ8dHJhbnNsYXRpb25NYXRyaXgpJCcpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbFVuaWZvcm1zOyBpKyspXG4gICAge1xuICAgICAgICB2YXIgdW5pZm9ybURhdGEgPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGkpO1xuICAgICAgICB2YXIgbmFtZSA9IHVuaWZvcm1EYXRhLm5hbWUucmVwbGFjZSgvXFxbLio/XFxdLywgJycpO1xuXG4gICAgICAgIHZhciBpc0FycmF5ID0gdW5pZm9ybURhdGEubmFtZS5tYXRjaCgvXFxbLio/XFxdLywgJycpO1xuICAgICAgICB2YXIgdHlwZSA9IG1hcFR5cGUoZ2wsIHVuaWZvcm1EYXRhLnR5cGUpO1xuXG4gICAgICAgIC8qZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgdW5pZm9ybXNbbmFtZV0gPSB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgc2l6ZTogdW5pZm9ybURhdGEuc2l6ZSxcbiAgICAgICAgICAgIGlzQXJyYXk6aXNBcnJheSxcbiAgICAgICAgICAgIHZhbHVlOiBkZWZhdWx0VmFsdWUodHlwZSwgdW5pZm9ybURhdGEuc2l6ZSksXG4gICAgICAgIH07XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICB9XG5cbiAgICByZXR1cm4gdW5pZm9ybXM7XG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHZlcnRleCBzaGFkZXIgc291cmNlXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0YW50XG4gKiBAbWVtYmVyIHtzdHJpbmd9XG4gKi9cbnN0YXRpY0FjY2Vzc29ycy5kZWZhdWx0VmVydGV4U3JjLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIGRlZmF1bHRWZXJ0ZXg7XG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGZyYWdtZW50IHNoYWRlciBzb3VyY2VcbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RhbnRcbiAqIEBtZW1iZXIge3N0cmluZ31cbiAqL1xuc3RhdGljQWNjZXNzb3JzLmRlZmF1bHRGcmFnbWVudFNyYy5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiBkZWZhdWx0RnJhZ21lbnQ7XG59O1xuXG4vKipcbiAqIEEgc2hvcnQgaGFuZCBmdW5jdGlvbiB0byBjcmVhdGUgYSBwcm9ncmFtIGJhc2VkIG9mIGEgdmVydGV4IGFuZCBmcmFnbWVudCBzaGFkZXJcbiAqIHRoaXMgbWV0aG9kIHdpbGwgYWxzbyBjaGVjayB0byBzZWUgaWYgdGhlcmUgaXMgYSBjYWNoZWQgcHJvZ3JhbS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3ZlcnRleFNyY10gLSBUaGUgc291cmNlIG9mIHRoZSB2ZXJ0ZXggc2hhZGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IFtmcmFnbWVudFNyY10gLSBUaGUgc291cmNlIG9mIHRoZSBmcmFnbWVudCBzaGFkZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gW3VuaWZvcm1zXSAtIEN1c3RvbSB1bmlmb3JtcyB0byB1c2UgdG8gYXVnbWVudCB0aGUgYnVpbHQtaW4gb25lcy5cbiAqXG4gKiBAcmV0dXJucyB7UElYSS5Qcm9ncmFtfSBhbiBzaGlueSBuZXcgUGl4aSBzaGFkZXIhXG4gKi9cblByb2dyYW0uZnJvbSA9IGZ1bmN0aW9uIGZyb20gKHZlcnRleFNyYywgZnJhZ21lbnRTcmMsIG5hbWUpXG57XG4gICAgdmFyIGtleSA9IHZlcnRleFNyYyArIGZyYWdtZW50U3JjO1xuXG4gICAgdmFyIHByb2dyYW0gPSBQcm9ncmFtQ2FjaGVba2V5XTtcblxuICAgIGlmICghcHJvZ3JhbSlcbiAgICB7XG4gICAgICAgIFByb2dyYW1DYWNoZVtrZXldID0gcHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHZlcnRleFNyYywgZnJhZ21lbnRTcmMsIG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9ncmFtO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFByb2dyYW0sIHN0YXRpY0FjY2Vzc29ycyApO1xuXG4vKipcbiAqIEEgaGVscGVyIGNsYXNzIGZvciBzaGFkZXJzXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgU2hhZGVyID0gZnVuY3Rpb24gU2hhZGVyKHByb2dyYW0sIHVuaWZvcm1zKVxue1xuICAgIC8qKlxuICAgICAqIFByb2dyYW0gdGhhdCB0aGUgc2hhZGVyIHVzZXNcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuUHJvZ3JhbX1cbiAgICAgKi9cbiAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuXG4gICAgLy8gbGV0cyBzZWUgd2hhdHMgYmVlbiBwYXNzZWQgaW5cbiAgICAvLyB1bmlmb3JtcyBzaG91bGQgYmUgY29udmVydGVkIHRvIGEgdW5pZm9ybSBncm91cFxuICAgIGlmICh1bmlmb3JtcylcbiAgICB7XG4gICAgICAgIGlmICh1bmlmb3JtcyBpbnN0YW5jZW9mIFVuaWZvcm1Hcm91cClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy51bmlmb3JtR3JvdXAgPSB1bmlmb3JtcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybUdyb3VwID0gbmV3IFVuaWZvcm1Hcm91cCh1bmlmb3Jtcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgdGhpcy51bmlmb3JtR3JvdXAgPSBuZXcgVW5pZm9ybUdyb3VwKHt9KTtcbiAgICB9XG5cbiAgICAvLyB0aW1lIHRvIGJ1aWxkIHNvbWUgZ2V0dGVycyBhbmQgc2V0dGVycyFcbiAgICAvLyBJIGd1ZXNzIGRvd24gdGhlIGxpbmUgdGhpcyBjb3VsZCBzb3J0IG9mIGdlbmVyYXRlIGFuIGluc3RydWN0aW9uIGxpc3QgcmF0aGVyIHRoYW4gdXNlIGRpcnR5IGlkcz9cbiAgICAvLyBkb2VzIHRoZSB0cmljayBmb3Igbm93IHRob3VnaCFcbiAgICBmb3IgKHZhciBpIGluIHByb2dyYW0udW5pZm9ybURhdGEpXG4gICAge1xuICAgICAgICBpZiAodGhpcy51bmlmb3JtR3JvdXAudW5pZm9ybXNbaV0gaW5zdGFuY2VvZiBBcnJheSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy51bmlmb3JtR3JvdXAudW5pZm9ybXNbaV0gPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMudW5pZm9ybUdyb3VwLnVuaWZvcm1zW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMiA9IHsgdW5pZm9ybXM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gVE9ETyBtb3ZlIHRvIHNoYWRlciBzeXN0ZW0uLlxuU2hhZGVyLnByb3RvdHlwZS5jaGVja1VuaWZvcm1FeGlzdHMgPSBmdW5jdGlvbiBjaGVja1VuaWZvcm1FeGlzdHMgKG5hbWUsIGdyb3VwKVxue1xuICAgIGlmIChncm91cC51bmlmb3Jtc1tuYW1lXSlcbiAgICB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgaW4gZ3JvdXAudW5pZm9ybXMpXG4gICAge1xuICAgICAgICB2YXIgdW5pZm9ybSA9IGdyb3VwLnVuaWZvcm1zW2ldO1xuXG4gICAgICAgIGlmICh1bmlmb3JtLmdyb3VwKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja1VuaWZvcm1FeGlzdHMobmFtZSwgdW5pZm9ybSkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5TaGFkZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG57XG4gICAgLy8gdXNhZ2UgY291bnQgb24gcHJvZ3JhbXM/XG4gICAgLy8gcmVtb3ZlIGlmIG5vdCB1c2VkIVxuICAgIHRoaXMudW5pZm9ybUdyb3VwID0gbnVsbDtcbn07XG5cbi8qKlxuICogU2hhZGVyIHVuaWZvcm0gdmFsdWVzLCBzaG9ydGN1dCBmb3IgYHVuaWZvcm1Hcm91cC51bmlmb3Jtc2BcbiAqIEByZWFkb25seVxuICogQG1lbWJlciB7b2JqZWN0fVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi51bmlmb3Jtcy5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiB0aGlzLnVuaWZvcm1Hcm91cC51bmlmb3Jtcztcbn07XG5cbi8qKlxuICogQSBzaG9ydCBoYW5kIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHNoYWRlciBiYXNlZCBvZiBhIHZlcnRleCBhbmQgZnJhZ21lbnQgc2hhZGVyXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFt2ZXJ0ZXhTcmNdIC0gVGhlIHNvdXJjZSBvZiB0aGUgdmVydGV4IHNoYWRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZnJhZ21lbnRTcmNdIC0gVGhlIHNvdXJjZSBvZiB0aGUgZnJhZ21lbnQgc2hhZGVyLlxuICogQHBhcmFtIHtvYmplY3R9IFt1bmlmb3Jtc10gLSBDdXN0b20gdW5pZm9ybXMgdG8gdXNlIHRvIGF1Z21lbnQgdGhlIGJ1aWx0LWluIG9uZXMuXG4gKlxuICogQHJldHVybnMge1BJWEkuU2hhZGVyfSBhbiBzaGlueSBuZXcgUGl4aSBzaGFkZXIhXG4gKi9cblNoYWRlci5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmVydGV4U3JjLCBmcmFnbWVudFNyYywgdW5pZm9ybXMpXG57XG4gICAgdmFyIHByb2dyYW0gPSBQcm9ncmFtLmZyb20odmVydGV4U3JjLCBmcmFnbWVudFNyYyk7XG5cbiAgICByZXR1cm4gbmV3IFNoYWRlcihwcm9ncmFtLCB1bmlmb3Jtcyk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU2hhZGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDIgKTtcblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG52YXIgQkxFTkQgPSAwO1xudmFyIE9GRlNFVCA9IDE7XG52YXIgQ1VMTElORyA9IDI7XG52YXIgREVQVEhfVEVTVCA9IDM7XG52YXIgV0lORElORyA9IDQ7XG5cbi8qKlxuICogVGhpcyBpcyBhIFdlYkdMIHN0YXRlLCBhbmQgaXMgaXMgcGFzc2VkIFRoZSBXZWJHTCBTdGF0ZU1hbmFnZXIuXG4gKlxuICogRWFjaCBtZXNoIHJlbmRlcmVkIG1heSByZXF1aXJlIFdlYkdMIHRvIGJlIGluIGEgZGlmZmVyZW50IHN0YXRlLlxuICogRm9yIGV4YW1wbGUgeW91IG1heSB3YW50IGRpZmZlcmVudCBibGVuZCBtb2RlIG9yIHRvIGVuYWJsZSBwb2x5Z29uIG9mZnNldHNcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBTdGF0ZSA9IGZ1bmN0aW9uIFN0YXRlKClcbntcbiAgICB0aGlzLmRhdGEgPSAwO1xuXG4gICAgdGhpcy5ibGVuZE1vZGUgPSBCTEVORF9NT0RFUy5OT1JNQUw7XG4gICAgdGhpcy5wb2x5Z29uT2Zmc2V0ID0gMDtcblxuICAgIHRoaXMuYmxlbmQgPSB0cnVlO1xuICAgIC8vICB0aGlzLmRlcHRoVGVzdCA9IHRydWU7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDMgPSB7IGJsZW5kOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG9mZnNldHM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sY3VsbGluZzogeyBjb25maWd1cmFibGU6IHRydWUgfSxkZXB0aFRlc3Q6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sY2xvY2t3aXNlRnJvbnRGYWNlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGJsZW5kTW9kZTogeyBjb25maWd1cmFibGU6IHRydWUgfSxwb2x5Z29uT2Zmc2V0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qKlxuICogQWN0aXZhdGVzIGJsZW5kaW5nIG9mIHRoZSBjb21wdXRlZCBmcmFnbWVudCBjb2xvciB2YWx1ZXNcbiAqXG4gKiBAbWVtYmVyIHtib29sZWFufVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5ibGVuZC5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiAhISh0aGlzLmRhdGEgJiAoMSA8PCBCTEVORCkpO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDMuYmxlbmQuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICBpZiAoISEodGhpcy5kYXRhICYgKDEgPDwgQkxFTkQpKSAhPT0gdmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLmRhdGEgXj0gKDEgPDwgQkxFTkQpO1xuICAgIH1cbn07XG5cbi8qKlxuICogQWN0aXZhdGVzIGFkZGluZyBhbiBvZmZzZXQgdG8gZGVwdGggdmFsdWVzIG9mIHBvbHlnb24ncyBmcmFnbWVudHNcbiAqXG4gKiBAbWVtYmVyIHtib29sZWFufVxuICogQGRlZmF1bHQgZmFsc2VcbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDMub2Zmc2V0cy5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiAhISh0aGlzLmRhdGEgJiAoMSA8PCBPRkZTRVQpKTtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQzLm9mZnNldHMuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICBpZiAoISEodGhpcy5kYXRhICYgKDEgPDwgT0ZGU0VUKSkgIT09IHZhbHVlKVxuICAgIHtcbiAgICAgICAgdGhpcy5kYXRhIF49ICgxIDw8IE9GRlNFVCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBBY3RpdmF0ZXMgY3VsbGluZyBvZiBwb2x5Z29ucy5cbiAqXG4gKiBAbWVtYmVyIHtib29sZWFufVxuICogQGRlZmF1bHQgZmFsc2VcbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDMuY3VsbGluZy5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiAhISh0aGlzLmRhdGEgJiAoMSA8PCBDVUxMSU5HKSk7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5jdWxsaW5nLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG57XG4gICAgaWYgKCEhKHRoaXMuZGF0YSAmICgxIDw8IENVTExJTkcpKSAhPT0gdmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLmRhdGEgXj0gKDEgPDwgQ1VMTElORyk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBBY3RpdmF0ZXMgZGVwdGggY29tcGFyaXNvbnMgYW5kIHVwZGF0ZXMgdG8gdGhlIGRlcHRoIGJ1ZmZlci5cbiAqXG4gKiBAbWVtYmVyIHtib29sZWFufVxuICogQGRlZmF1bHQgZmFsc2VcbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDMuZGVwdGhUZXN0LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmICgxIDw8IERFUFRIX1RFU1QpKTtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQzLmRlcHRoVGVzdC5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xue1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAoMSA8PCBERVBUSF9URVNUKSkgIT09IHZhbHVlKVxuICAgIHtcbiAgICAgICAgdGhpcy5kYXRhIF49ICgxIDw8IERFUFRIX1RFU1QpO1xuICAgIH1cbn07XG5cbi8qKlxuICogU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IGZyb250IG9yIGJhY2stZmFjaW5nIHBvbHlnb25zIGNhbiBiZSBjdWxsZWQuXG4gKiBAbWVtYmVyIHtib29sZWFufVxuICogQGRlZmF1bHQgZmFsc2VcbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDMuY2xvY2t3aXNlRnJvbnRGYWNlLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmICgxIDw8IFdJTkRJTkcpKTtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQzLmNsb2Nrd2lzZUZyb250RmFjZS5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xue1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAoMSA8PCBXSU5ESU5HKSkgIT09IHZhbHVlKVxuICAgIHtcbiAgICAgICAgdGhpcy5kYXRhIF49ICgxIDw8IFdJTkRJTkcpO1xuICAgIH1cbn07XG5cbi8qKlxuICogVGhlIGJsZW5kIG1vZGUgdG8gYmUgYXBwbGllZCB3aGVuIHRoaXMgc3RhdGUgaXMgc2V0LiBBcHBseSBhIHZhbHVlIG9mIGBQSVhJLkJMRU5EX01PREVTLk5PUk1BTGAgdG8gcmVzZXQgdGhlIGJsZW5kIG1vZGUuXG4gKiBTZXR0aW5nIHRoaXMgbW9kZSB0byBhbnl0aGluZyBvdGhlciB0aGFuIE5PX0JMRU5EIHdpbGwgYXV0b21hdGljYWxseSBzd2l0Y2ggYmxlbmRpbmcgb24uXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICogQGRlZmF1bHQgUElYSS5CTEVORF9NT0RFUy5OT1JNQUxcbiAqIEBzZWUgUElYSS5CTEVORF9NT0RFU1xuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5ibGVuZE1vZGUuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy5fYmxlbmRNb2RlO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDMuYmxlbmRNb2RlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG57XG4gICAgdGhpcy5ibGVuZCA9ICh2YWx1ZSAhPT0gQkxFTkRfTU9ERVMuTk9ORSk7XG4gICAgdGhpcy5fYmxlbmRNb2RlID0gdmFsdWU7XG59O1xuXG4vKipcbiAqIFRoZSBwb2x5Z29uIG9mZnNldC4gU2V0dGluZyB0aGlzIHByb3BlcnR5IHRvIGFueXRoaW5nIG90aGVyIHRoYW4gMCB3aWxsIGF1dG9tYXRpY2FsbHkgZW5hYmxlIHBvbHlnb24gb2Zmc2V0IGZpbGwuXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICogQGRlZmF1bHQgMFxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5wb2x5Z29uT2Zmc2V0LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMuX3BvbHlnb25PZmZzZXQ7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5wb2x5Z29uT2Zmc2V0LnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG57XG4gICAgdGhpcy5vZmZzZXRzID0gISF2YWx1ZTtcbiAgICB0aGlzLl9wb2x5Z29uT2Zmc2V0ID0gdmFsdWU7XG59O1xuXG5TdGF0ZS5mb3IyZCA9IGZ1bmN0aW9uIGZvcjJkICgpXG57XG4gICAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKCk7XG5cbiAgICBzdGF0ZS5kZXB0aFRlc3QgPSBmYWxzZTtcbiAgICBzdGF0ZS5ibGVuZCA9IHRydWU7XG5cbiAgICByZXR1cm4gc3RhdGU7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3RhdGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMyApO1xuXG52YXIgZGVmYXVsdFZlcnRleCQxID0gXCJhdHRyaWJ1dGUgdmVjMiBhVmVydGV4UG9zaXRpb247XFxuXFxudW5pZm9ybSBtYXQzIHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxudW5pZm9ybSB2ZWM0IGlucHV0U2l6ZTtcXG51bmlmb3JtIHZlYzQgb3V0cHV0RnJhbWU7XFxuXFxudmVjNCBmaWx0ZXJWZXJ0ZXhQb3NpdGlvbiggdm9pZCApXFxue1xcbiAgICB2ZWMyIHBvc2l0aW9uID0gYVZlcnRleFBvc2l0aW9uICogbWF4KG91dHB1dEZyYW1lLnp3LCB2ZWMyKDAuKSkgKyBvdXRwdXRGcmFtZS54eTtcXG5cXG4gICAgcmV0dXJuIHZlYzQoKHByb2plY3Rpb25NYXRyaXggKiB2ZWMzKHBvc2l0aW9uLCAxLjApKS54eSwgMC4wLCAxLjApO1xcbn1cXG5cXG52ZWMyIGZpbHRlclRleHR1cmVDb29yZCggdm9pZCApXFxue1xcbiAgICByZXR1cm4gYVZlcnRleFBvc2l0aW9uICogKG91dHB1dEZyYW1lLnp3ICogaW5wdXRTaXplLnp3KTtcXG59XFxuXFxudm9pZCBtYWluKHZvaWQpXFxue1xcbiAgICBnbF9Qb3NpdGlvbiA9IGZpbHRlclZlcnRleFBvc2l0aW9uKCk7XFxuICAgIHZUZXh0dXJlQ29vcmQgPSBmaWx0ZXJUZXh0dXJlQ29vcmQoKTtcXG59XFxuXCI7XG5cbnZhciBkZWZhdWx0RnJhZ21lbnQkMSA9IFwidmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXI7XFxuXFxudm9pZCBtYWluKHZvaWQpe1xcbiAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlciwgdlRleHR1cmVDb29yZCk7XFxufVxcblwiO1xuXG4vKipcbiAqIEZpbHRlciBpcyBhIHNwZWNpYWwgdHlwZSBvZiBXZWJHTCBzaGFkZXIgdGhhdCBpcyBhcHBsaWVkIHRvIHRoZSBzY3JlZW4uXG4gKlxuICoge0BsaW5rIGh0dHA6Ly9waXhpanMuaW8vZXhhbXBsZXMvIy9maWx0ZXJzL2JsdXItZmlsdGVyLmpzIEV4YW1wbGV9IG9mIHRoZVxuICoge0BsaW5rIFBJWEkuZmlsdGVycy5CbHVyRmlsdGVyIEJsdXJGaWx0ZXJ9LlxuICpcbiAqICMjIyBVc2FnZVxuICogRmlsdGVycyBjYW4gYmUgYXBwbGllZCB0byBhbnkgRGlzcGxheU9iamVjdCBvciBDb250YWluZXIuXG4gKiBQaXhpSlMnIGBGaWx0ZXJTeXN0ZW1gIHJlbmRlcnMgdGhlIGNvbnRhaW5lciBpbnRvIHRlbXBvcmFyeSBGcmFtZWJ1ZmZlcixcbiAqIHRoZW4gZmlsdGVyIHJlbmRlcnMgaXQgdG8gdGhlIHNjcmVlbi5cbiAqIE11bHRpcGxlIGZpbHRlcnMgY2FuIGJlIGFkZGVkIHRvIHRoZSBgZmlsdGVyc2AgYXJyYXkgcHJvcGVydHkgYW5kIHN0YWNrZWQgb24gZWFjaCBvdGhlci5cbiAqXG4gKiBgYGBcbiAqIGNvbnN0IGZpbHRlciA9IG5ldyBQSVhJLkZpbHRlcihteVNoYWRlclZlcnQsIG15U2hhZGVyRnJhZywgeyBteVVuaWZvcm06IDAuNSB9KTtcbiAqIGNvbnN0IGNvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xuICogY29udGFpbmVyLmZpbHRlcnMgPSBbZmlsdGVyXTtcbiAqIGBgYFxuICpcbiAqICMjIyBQcmV2aW91cyBWZXJzaW9uIERpZmZlcmVuY2VzXG4gKlxuICogSW4gUGl4aUpTICoqdjMqKiwgYSBmaWx0ZXIgd2FzIGFsd2F5cyBhcHBsaWVkIHRvIF93aG9sZSBzY3JlZW5fLlxuICpcbiAqIEluIFBpeGlKUyAqKnY0KiosIGEgZmlsdGVyIGNhbiBiZSBhcHBsaWVkIF9vbmx5IHBhcnQgb2YgdGhlIHNjcmVlbl8uXG4gKiBEZXZlbG9wZXJzIGhhZCB0byBjcmVhdGUgYSBzZXQgb2YgdW5pZm9ybXMgdG8gZGVhbCB3aXRoIGNvb3JkaW5hdGVzLlxuICpcbiAqIEluIFBpeGlKUyAqKnY1KiogY29tYmluZXMgX2JvdGggYXBwcm9hY2hlc18uXG4gKiBEZXZlbG9wZXJzIGNhbiB1c2Ugbm9ybWFsIGNvb3JkaW5hdGVzIG9mIHYzIGFuZCB0aGVuIGFsbG93IGZpbHRlciB0byB1c2UgcGFydGlhbCBGcmFtZWJ1ZmZlcnMsXG4gKiBicmluZ2luZyB0aG9zZSBleHRyYSB1bmlmb3JtcyBpbnRvIGFjY291bnQuXG4gKlxuICogQWxzbyBiZSBhd2FyZSB0aGF0IHdlIGhhdmUgY2hhbmdlZCBkZWZhdWx0IHZlcnRleCBzaGFkZXIsIHBsZWFzZSBjb25zdWx0XG4gKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3BpeGlqcy9waXhpLmpzL3dpa2kvdjUtQ3JlYXRpbmctZmlsdGVycyBXaWtpfS5cbiAqXG4gKiAjIyMgQnVpbHQtaW4gVW5pZm9ybXNcbiAqXG4gKiBQaXhpSlMgdmlld3BvcnQgdXNlcyBzY3JlZW4gKENTUykgY29vcmRpbmF0ZXMsIGAoMCwgMCwgcmVuZGVyZXIuc2NyZWVuLndpZHRoLCByZW5kZXJlci5zY3JlZW4uaGVpZ2h0KWAsXG4gKiBhbmQgYHByb2plY3Rpb25NYXRyaXhgIHVuaWZvcm0gbWFwcyBpdCB0byB0aGUgZ2wgdmlld3BvcnQuXG4gKlxuICogKip1U2FtcGxlcioqXG4gKlxuICogVGhlIG1vc3QgaW1wb3J0YW50IHVuaWZvcm0gaXMgdGhlIGlucHV0IHRleHR1cmUgdGhhdCBjb250YWluZXIgd2FzIHJlbmRlcmVkIGludG8uXG4gKiBfSW1wb3J0YW50IG5vdGU6IGFzIHdpdGggYWxsIEZyYW1lYnVmZmVycyBpbiBQaXhpSlMsIGJvdGggaW5wdXQgYW5kIG91dHB1dCBhcmVcbiAqIHByZW11bHRpcGxpZWQgYnkgYWxwaGEuX1xuICpcbiAqIEJ5IGRlZmF1bHQsIGlucHV0IG5vcm1hbGl6ZWQgY29vcmRpbmF0ZXMgYXJlIHBhc3NlZCB0byBmcmFnbWVudCBzaGFkZXIgd2l0aCBgdlRleHR1cmVDb29yZGAuXG4gKiBVc2UgaXQgdG8gc2FtcGxlIHRoZSBpbnB1dC5cbiAqXG4gKiBgYGBcbiAqIGNvbnN0IGZyYWdtZW50ID0gYFxuICogdmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XG4gKiB1bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcbiAqIHZvaWQgbWFpbih2b2lkKVxuICoge1xuICogICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyLCB2VGV4dHVyZUNvb3JkKTtcbiAqIH1cbiAqIGA7XG4gKlxuICogY29uc3QgbXlGaWx0ZXIgPSBuZXcgUElYSS5GaWx0ZXIobnVsbCwgZnJhZ21lbnQpO1xuICogYGBgXG4gKlxuICogVGhpcyBmaWx0ZXIgaXMganVzdCBvbmUgdW5pZm9ybSBsZXNzIHRoYW4ge0BsaW5rIFBJWEkuZmlsdGVycy5BbHBoYUZpbHRlciBBbHBoYUZpbHRlcn0uXG4gKlxuICogKipvdXRwdXRGcmFtZSoqXG4gKlxuICogVGhlIGBvdXRwdXRGcmFtZWAgaG9sZHMgdGhlIHJlY3RhbmdsZSB3aGVyZSBmaWx0ZXIgaXMgYXBwbGllZCBpbiBzY3JlZW4gKENTUykgY29vcmRpbmF0ZXMuXG4gKiBJdCdzIHRoZSBzYW1lIGFzIGByZW5kZXJlci5zY3JlZW5gIGZvciBhIGZ1bGxzY3JlZW4gZmlsdGVyLlxuICogT25seSBhIHBhcnQgb2YgIGBvdXRwdXRGcmFtZS56d2Agc2l6ZSBvZiB0ZW1wb3JhcnkgRnJhbWVidWZmZXIgaXMgdXNlZCxcbiAqIGAoMCwgMCwgb3V0cHV0RnJhbWUud2lkdGgsIG91dHB1dEZyYW1lLmhlaWdodClgLFxuICpcbiAqIEZpbHRlcnMgdXNlcyB0aGlzIHF1YWQgdG8gbm9ybWFsaXplZCAoMC0xKSBzcGFjZSwgaXRzIHBhc3NlZCBpbnRvIGBhVmVydGV4UG9zaXRpb25gIGF0dHJpYnV0ZS5cbiAqIFRvIGNhbGN1bGF0ZSB2ZXJ0ZXggcG9zaXRpb24gaW4gc2NyZWVuIHNwYWNlIHVzaW5nIG5vcm1hbGl6ZWQgKDAtMSkgc3BhY2U6XG4gKlxuICogYGBgXG4gKiB2ZWM0IGZpbHRlclZlcnRleFBvc2l0aW9uKCB2b2lkIClcbiAqIHtcbiAqICAgICB2ZWMyIHBvc2l0aW9uID0gYVZlcnRleFBvc2l0aW9uICogbWF4KG91dHB1dEZyYW1lLnp3LCB2ZWMyKDAuKSkgKyBvdXRwdXRGcmFtZS54eTtcbiAqICAgICByZXR1cm4gdmVjNCgocHJvamVjdGlvbk1hdHJpeCAqIHZlYzMocG9zaXRpb24sIDEuMCkpLnh5LCAwLjAsIDEuMCk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAqKmlucHV0U2l6ZSoqXG4gKlxuICogVGVtcG9yYXJ5IGZyYW1lYnVmZmVyIGlzIGRpZmZlcmVudCwgaXQgY2FuIGJlIGVpdGhlciB0aGUgc2l6ZSBvZiBzY3JlZW4sIGVpdGhlciBwb3dlci1vZi10d28uXG4gKiBUaGUgYGlucHV0U2l6ZS54eWAgYXJlIHNpemUgb2YgdGVtcG9yYXJ5IGZyYW1lYnVmZmVyIHRoYXQgaG9sZHMgaW5wdXQuXG4gKiBUaGUgYGlucHV0U2l6ZS56d2AgaXMgaW52ZXJ0ZWQsIGl0J3MgYSBzaG9ydGN1dCB0byBldmFkZSBkaXZpc2lvbiBpbnNpZGUgdGhlIHNoYWRlci5cbiAqXG4gKiBTZXQgYGlucHV0U2l6ZS54eSA9IG91dHB1dEZyYW1lLnp3YCBmb3IgYSBmdWxsc2NyZWVuIGZpbHRlci5cbiAqXG4gKiBUbyBjYWxjdWxhdGUgaW5wdXQgbm9ybWFsaXplZCBjb29yZGluYXRlLCB5b3UgaGF2ZSB0byBtYXAgaXQgdG8gZmlsdGVyIG5vcm1hbGl6ZWQgc3BhY2UuXG4gKiBNdWx0aXBseSBieSBgb3V0cHV0RnJhbWUuendgIHRvIGdldCBpbnB1dCBjb29yZGluYXRlLlxuICogRGl2aWRlIGJ5IGBpbnB1dFNpemUueHlgIHRvIGdldCBpbnB1dCBub3JtYWxpemVkIGNvb3JkaW5hdGUuXG4gKlxuICogYGBgXG4gKiB2ZWMyIGZpbHRlclRleHR1cmVDb29yZCggdm9pZCApXG4gKiB7XG4gKiAgICAgcmV0dXJuIGFWZXJ0ZXhQb3NpdGlvbiAqIChvdXRwdXRGcmFtZS56dyAqIGlucHV0U2l6ZS56dyk7IC8vIHNhbWUgYXMgL2lucHV0U2l6ZS54eVxuICogfVxuICogYGBgXG4gKiAqKnJlc29sdXRpb24qKlxuICpcbiAqIFRoZSBgcmVzb2x1dGlvbmAgaXMgdGhlIHJhdGlvIG9mIHNjcmVlbiAoQ1NTKSBwaXhlbHMgdG8gcmVhbCBwaXhlbHMuXG4gKlxuICogKippbnB1dFBpeGVsKipcbiAqXG4gKiBgaW5wdXRQaXhlbC54eWAgaXMgdGhlIHNpemUgb2YgZnJhbWVidWZmZXIgaW4gcmVhbCBwaXhlbHMsIHNhbWUgYXMgYGlucHV0U2l6ZS54eSAqIHJlc29sdXRpb25gXG4gKiBgaW5wdXRQaXhlbC56d2AgaXMgaW52ZXJ0ZWQgYGlucHV0UGl4ZWwueHlgLlxuICpcbiAqIEl0J3MgaGFuZHkgZm9yIGZpbHRlcnMgdGhhdCB1c2UgbmVpZ2hib3VyIHBpeGVscywgbGlrZSB7QGxpbmsgUElYSS5maWx0ZXJzLkZYQUFGaWx0ZXIgRlhBQUZpbHRlcn0uXG4gKlxuICogKippbnB1dENsYW1wKipcbiAqXG4gKiBJZiB5b3UgdHJ5IHRvIGdldCBpbmZvIGZyb20gb3V0c2lkZSBvZiB1c2VkIHBhcnQgb2YgRnJhbWVidWZmZXIgLSB5b3UnbGwgZ2V0IHVuZGVmaW5lZCBiZWhhdmlvdXIuXG4gKiBGb3IgZGlzcGxhY2VtZW50cywgY29vcmRpbmF0ZXMgaGFzIHRvIGJlIGNsYW1wZWQuXG4gKlxuICogVGhlIGBpbnB1dENsYW1wLnh5YCBpcyBsZWZ0LXRvcCBwaXhlbCBjZW50ZXIsIHlvdSBtYXkgaWdub3JlIGl0LCBiZWNhdXNlIHdlIHVzZSBsZWZ0LXRvcCBwYXJ0IG9mIEZyYW1lYnVmZmVyXG4gKiBgaW5wdXRDbGFtcC56d2AgaXMgYm90dG9tLXJpZ2h0IHBpeGVsIGNlbnRlci5cbiAqXG4gKiBgYGBcbiAqIHZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXIsIGNsYW1wKG1vZGlmaWdlZFRleHR1cmVDb29yZCwgaW5wdXRDbGFtcC54eSwgaW5wdXRDbGFtcC56dykpXG4gKiBgYGBcbiAqIE9SXG4gKiBgYGBcbiAqIHZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXIsIG1pbihtb2RpZmlnZWRUZXh0dXJlQ29vcmQsIGlucHV0Q2xhbXAuencpKVxuICogYGBgXG4gKlxuICogIyMjIEFkZGl0aW9uYWwgSW5mb3JtYXRpb25cbiAqXG4gKiBDb21wbGV0ZSBkb2N1bWVudGF0aW9uIG9uIEZpbHRlciB1c2FnZSBpcyBsb2NhdGVkIGluIHRoZVxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpanMvcGl4aS5qcy93aWtpL3Y1LUNyZWF0aW5nLWZpbHRlcnMgV2lraX0uXG4gKlxuICogU2luY2UgUGl4aUpTIG9ubHkgaGFkIGEgaGFuZGZ1bCBvZiBidWlsdC1pbiBmaWx0ZXJzLCBhZGRpdGlvbmFsIGZpbHRlcnMgY2FuIGJlIGRvd25sb2FkZWRcbiAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vcGl4aWpzL3BpeGktZmlsdGVycyBoZXJlfSBmcm9tIHRoZSBQaXhpSlMgRmlsdGVycyByZXBvc2l0b3J5LlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqIEBleHRlbmRzIFBJWEkuU2hhZGVyXG4gKi9cbnZhciBGaWx0ZXIgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTaGFkZXIpIHtcbiAgICBmdW5jdGlvbiBGaWx0ZXIodmVydGV4U3JjLCBmcmFnbWVudFNyYywgdW5pZm9ybXMpXG4gICAge1xuICAgICAgICB2YXIgcHJvZ3JhbSA9IFByb2dyYW0uZnJvbSh2ZXJ0ZXhTcmMgfHwgRmlsdGVyLmRlZmF1bHRWZXJ0ZXhTcmMsXG4gICAgICAgICAgICBmcmFnbWVudFNyYyB8fCBGaWx0ZXIuZGVmYXVsdEZyYWdtZW50U3JjKTtcblxuICAgICAgICBTaGFkZXIuY2FsbCh0aGlzLCBwcm9ncmFtLCB1bmlmb3Jtcyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwYWRkaW5nIG9mIHRoZSBmaWx0ZXIuIFNvbWUgZmlsdGVycyByZXF1aXJlIGV4dHJhIHNwYWNlIHRvIGJyZWF0aCBzdWNoIGFzIGEgYmx1ci5cbiAgICAgICAgICogSW5jcmVhc2luZyB0aGlzIHdpbGwgYWRkIGV4dHJhIHdpZHRoIGFuZCBoZWlnaHQgdG8gdGhlIGJvdW5kcyBvZiB0aGUgb2JqZWN0IHRoYXQgdGhlXG4gICAgICAgICAqIGZpbHRlciBpcyBhcHBsaWVkIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBhZGRpbmcgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmVzb2x1dGlvbiBvZiB0aGUgZmlsdGVyLiBTZXR0aW5nIHRoaXMgdG8gYmUgbG93ZXIgd2lsbCBsb3dlciB0aGUgcXVhbGl0eSBidXRcbiAgICAgICAgICogaW5jcmVhc2UgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZSBmaWx0ZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzb2x1dGlvbiA9IHNldHRpbmdzLkZJTFRFUl9SRVNPTFVUSU9OO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBlbmFibGVkIGlzIHRydWUgdGhlIGZpbHRlciBpcyBhcHBsaWVkLCBpZiBmYWxzZSBpdCB3aWxsIG5vdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGVuYWJsZWQsIFBpeGlKUyB3aWxsIGZpdCB0aGUgZmlsdGVyIGFyZWEgaW50byBib3VuZGFyaWVzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gICAgICAgICAqIFN3aXRjaCBpdCBvZmYgaWYgaXQgZG9lcyBub3Qgd29yayBmb3Igc3BlY2lmaWMgc2hhZGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hdXRvRml0ID0gdHJ1ZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTGVnYWN5IGZpbHRlcnMgdXNlIHBvc2l0aW9uIGFuZCB1dnMgZnJvbSBhdHRyaWJ1dGVzXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZWdhY3kgPSAhIXRoaXMucHJvZ3JhbS5hdHRyaWJ1dGVEYXRhLmFUZXh0dXJlQ29vcmQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBXZWJHTCBzdGF0ZSB0aGUgZmlsdGVyIHJlcXVpcmVzIHRvIHJlbmRlclxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlN0YXRlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBTdGF0ZSgpO1xuICAgIH1cblxuICAgIGlmICggU2hhZGVyICkgRmlsdGVyLl9fcHJvdG9fXyA9IFNoYWRlcjtcbiAgICBGaWx0ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU2hhZGVyICYmIFNoYWRlci5wcm90b3R5cGUgKTtcbiAgICBGaWx0ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmlsdGVyO1xuXG4gICAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgYmxlbmRNb2RlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG4gICAgdmFyIHN0YXRpY0FjY2Vzc29ycyA9IHsgZGVmYXVsdFZlcnRleFNyYzogeyBjb25maWd1cmFibGU6IHRydWUgfSxkZWZhdWx0RnJhZ21lbnRTcmM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIGZpbHRlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLnN5c3RlbXMuRmlsdGVyU3lzdGVtfSBmaWx0ZXJNYW5hZ2VyIC0gVGhlIHJlbmRlcmVyIHRvIHJldHJpZXZlIHRoZSBmaWx0ZXIgZnJvbVxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSBpbnB1dCAtIFRoZSBpbnB1dCByZW5kZXIgdGFyZ2V0LlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSBvdXRwdXQgLSBUaGUgdGFyZ2V0IHRvIG91dHB1dCB0by5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsZWFyIC0gU2hvdWxkIHRoZSBvdXRwdXQgYmUgY2xlYXJlZCBiZWZvcmUgcmVuZGVyaW5nIHRvIGl0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtjdXJyZW50U3RhdGVdIC0gSXQncyBjdXJyZW50IHN0YXRlIG9mIGZpbHRlci5cbiAgICAgKiAgICAgICAgVGhlcmUgYXJlIHNvbWUgdXNlZnVsIHByb3BlcnRpZXMgaW4gdGhlIGN1cnJlbnRTdGF0ZSA6XG4gICAgICogICAgICAgIHRhcmdldCwgZmlsdGVycywgc291cmNlRnJhbWUsIGRlc3RpbmF0aW9uRnJhbWUsIHJlbmRlclRhcmdldCwgcmVzb2x1dGlvblxuICAgICAqL1xuICAgIEZpbHRlci5wcm90b3R5cGUuYXBwbHkgPSBmdW5jdGlvbiBhcHBseSAoZmlsdGVyTWFuYWdlciwgaW5wdXQsIG91dHB1dCwgY2xlYXIsIGN1cnJlbnRTdGF0ZSlcbiAgICB7XG4gICAgICAgIC8vIGRvIGFzIHlvdSBwbGVhc2UhXG5cbiAgICAgICAgZmlsdGVyTWFuYWdlci5hcHBseUZpbHRlcih0aGlzLCBpbnB1dCwgb3V0cHV0LCBjbGVhciwgY3VycmVudFN0YXRlKTtcblxuICAgICAgICAvLyBvciBqdXN0IGRvIGEgcmVndWxhciByZW5kZXIuLlxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBibGVuZG1vZGUgb2YgdGhlIGZpbHRlclxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IFBJWEkuQkxFTkRfTU9ERVMuTk9STUFMXG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmJsZW5kTW9kZS5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuYmxlbmRNb2RlO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuYmxlbmRNb2RlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kTW9kZSA9IHZhbHVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCB2ZXJ0ZXggc2hhZGVyIHNvdXJjZVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgc3RhdGljQWNjZXNzb3JzLmRlZmF1bHRWZXJ0ZXhTcmMuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmVydGV4JDE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IGZyYWdtZW50IHNoYWRlciBzb3VyY2VcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIHN0YXRpY0FjY2Vzc29ycy5kZWZhdWx0RnJhZ21lbnRTcmMuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RnJhZ21lbnQkMTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEZpbHRlci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBGaWx0ZXIsIHN0YXRpY0FjY2Vzc29ycyApO1xuXG4gICAgcmV0dXJuIEZpbHRlcjtcbn0oU2hhZGVyKSk7XG5cbi8qKlxuICogVXNlZCBmb3IgY2FjaGluZyBzaGFkZXIgSURzXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge29iamVjdH1cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuRmlsdGVyLlNPVVJDRV9LRVlfTUFQID0ge307XG5cbnZhciB2ZXJ0ZXggPSBcImF0dHJpYnV0ZSB2ZWMyIGFWZXJ0ZXhQb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiBhVGV4dHVyZUNvb3JkO1xcblxcbnVuaWZvcm0gbWF0MyBwcm9qZWN0aW9uTWF0cml4O1xcbnVuaWZvcm0gbWF0MyBvdGhlck1hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzIgdk1hc2tDb29yZDtcXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG52b2lkIG1haW4odm9pZClcXG57XFxuICAgIGdsX1Bvc2l0aW9uID0gdmVjNCgocHJvamVjdGlvbk1hdHJpeCAqIHZlYzMoYVZlcnRleFBvc2l0aW9uLCAxLjApKS54eSwgMC4wLCAxLjApO1xcblxcbiAgICB2VGV4dHVyZUNvb3JkID0gYVRleHR1cmVDb29yZDtcXG4gICAgdk1hc2tDb29yZCA9ICggb3RoZXJNYXRyaXggKiB2ZWMzKCBhVGV4dHVyZUNvb3JkLCAxLjApICApLnh5O1xcbn1cXG5cIjtcblxudmFyIGZyYWdtZW50ID0gXCJ2YXJ5aW5nIHZlYzIgdk1hc2tDb29yZDtcXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXNrO1xcbnVuaWZvcm0gZmxvYXQgYWxwaGE7XFxudW5pZm9ybSBmbG9hdCBucG1BbHBoYTtcXG51bmlmb3JtIHZlYzQgbWFza0NsYW1wO1xcblxcbnZvaWQgbWFpbih2b2lkKVxcbntcXG4gICAgZmxvYXQgY2xpcCA9IHN0ZXAoMy41LFxcbiAgICAgICAgc3RlcChtYXNrQ2xhbXAueCwgdk1hc2tDb29yZC54KSArXFxuICAgICAgICBzdGVwKG1hc2tDbGFtcC55LCB2TWFza0Nvb3JkLnkpICtcXG4gICAgICAgIHN0ZXAodk1hc2tDb29yZC54LCBtYXNrQ2xhbXAueikgK1xcbiAgICAgICAgc3RlcCh2TWFza0Nvb3JkLnksIG1hc2tDbGFtcC53KSk7XFxuXFxuICAgIHZlYzQgb3JpZ2luYWwgPSB0ZXh0dXJlMkQodVNhbXBsZXIsIHZUZXh0dXJlQ29vcmQpO1xcbiAgICB2ZWM0IG1hc2t5ID0gdGV4dHVyZTJEKG1hc2ssIHZNYXNrQ29vcmQpO1xcbiAgICBmbG9hdCBhbHBoYU11bCA9IDEuMCAtIG5wbUFscGhhICogKDEuMCAtIG1hc2t5LmEpO1xcblxcbiAgICBvcmlnaW5hbCAqPSAoYWxwaGFNdWwgKiBtYXNreS5yICogYWxwaGEgKiBjbGlwKTtcXG5cXG4gICAgZ2xfRnJhZ0NvbG9yID0gb3JpZ2luYWw7XFxufVxcblwiO1xuXG52YXIgdGVtcE1hdCA9IG5ldyBNYXRyaXgoKTtcblxuLyoqXG4gKiBDbGFzcyBjb250cm9scyB1diBtYXBwaW5nIGZyb20gVGV4dHVyZSBub3JtYWwgc3BhY2UgdG8gQmFzZVRleHR1cmUgbm9ybWFsIHNwYWNlLlxuICpcbiAqIFRha2VzIGB0cmltYCBhbmQgYHJvdGF0ZWAgaW50byBhY2NvdW50LiBNYXkgY29udGFpbiBjbGFtcCBzZXR0aW5ncyBmb3IgTWVzaGVzIGFuZCBUaWxpbmdTcHJpdGUuXG4gKlxuICogQ2FuIGJlIHVzZWQgaW4gVGV4dHVyZSBgdXZNYXRyaXhgIGZpZWxkLCBvciBzZXBhcmF0ZWx5LCB5b3UgY2FuIHVzZSBkaWZmZXJlbnQgY2xhbXAgc2V0dGluZ3Mgb24gdGhlIHNhbWUgdGV4dHVyZS5cbiAqIElmIHlvdSB3YW50IHRvIGFkZCBzdXBwb3J0IGZvciB0ZXh0dXJlIHJlZ2lvbiBvZiBjZXJ0YWluIGZlYXR1cmUgb3IgZmlsdGVyLCB0aGF0J3Mgd2hhdCB5b3UncmUgbG9va2luZyBmb3IuXG4gKlxuICogVGFrZXMgdHJhY2sgb2YgVGV4dHVyZSBjaGFuZ2VzIHRocm91Z2ggYF9sYXN0VGV4dHVyZUlEYCBwcml2YXRlIGZpZWxkLlxuICogVXNlIGB1cGRhdGUoKWAgbWV0aG9kIGNhbGwgdG8gdHJhY2sgaXQgZnJvbSBvdXRzaWRlLlxuICpcbiAqIEBzZWUgUElYSS5UZXh0dXJlXG4gKiBAc2VlIFBJWEkuTWVzaFxuICogQHNlZSBQSVhJLlRpbGluZ1Nwcml0ZVxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgVGV4dHVyZU1hdHJpeCA9IGZ1bmN0aW9uIFRleHR1cmVNYXRyaXgodGV4dHVyZSwgY2xhbXBNYXJnaW4pXG57XG4gICAgdGhpcy5fdGV4dHVyZSA9IHRleHR1cmU7XG5cbiAgICAvKipcbiAgICAgKiBNYXRyaXggb3BlcmF0aW9uIHRoYXQgY29udmVydHMgdGV4dHVyZSByZWdpb24gY29vcmRzIHRvIHRleHR1cmUgY29vcmRzXG4gICAgICogQG1lbWJlciB7UElYSS5NYXRyaXh9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgdGhpcy5tYXBDb29yZCA9IG5ldyBNYXRyaXgoKTtcblxuICAgIC8qKlxuICAgICAqIENsYW1wIHJlZ2lvbiBmb3Igbm9ybWFsaXplZCBjb29yZHMsIGxlZnQtdG9wIHBpeGVsIGNlbnRlciBpbiB4eSAsIGJvdHRvbS1yaWdodCBpbiB6dy5cbiAgICAgKiBDYWxjdWxhdGVkIGJhc2VkIG9uIGNsYW1wT2Zmc2V0LlxuICAgICAqIEBtZW1iZXIge0Zsb2F0MzJBcnJheX1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICB0aGlzLnVDbGFtcEZyYW1lID0gbmV3IEZsb2F0MzJBcnJheSg0KTtcblxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZWQgY2xhbXAgb2Zmc2V0LlxuICAgICAqIENhbGN1bGF0ZWQgYmFzZWQgb24gY2xhbXBPZmZzZXQuXG4gICAgICogQG1lbWJlciB7RmxvYXQzMkFycmF5fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHRoaXMudUNsYW1wT2Zmc2V0ID0gbmV3IEZsb2F0MzJBcnJheSgyKTtcblxuICAgIC8qKlxuICAgICAqIFRyYWNrcyBUZXh0dXJlIGZyYW1lIGNoYW5nZXNcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHRoaXMuX3VwZGF0ZUlEID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIGZyYW1lIGNsYW1waW5nXG4gICAgICogV29ya3Mgd2l0aCBUaWxpbmdTcHJpdGUgYW5kIE1lc2hcbiAgICAgKiBDaGFuZ2UgdG8gMS41IGlmIHlvdSB0ZXh0dXJlIGhhcyByZXBlYXRlZCByaWdodCBhbmQgYm90dG9tIGxpbmVzLCB0aGF0IGxlYWRzIHRvIHNtb290aGVyIGJvcmRlcnNcbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5jbGFtcE9mZnNldCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIGZyYW1lIGNsYW1waW5nXG4gICAgICogV29ya3Mgd2l0aCBUaWxpbmdTcHJpdGUgYW5kIE1lc2hcbiAgICAgKiBDaGFuZ2UgdG8gLTAuNSB0byBhZGQgYSBwaXhlbCB0byB0aGUgZWRnZSwgcmVjb21tZW5kZWQgZm9yIHRyYW5zcGFyZW50IHRyaW1tZWQgdGV4dHVyZXMgaW4gYXRsYXNcbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IDAuNVxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmNsYW1wTWFyZ2luID0gKHR5cGVvZiBjbGFtcE1hcmdpbiA9PT0gJ3VuZGVmaW5lZCcpID8gMC41IDogY2xhbXBNYXJnaW47XG5cbiAgICAvKipcbiAgICAgKiBJZiB0ZXh0dXJlIHNpemUgaXMgdGhlIHNhbWUgYXMgYmFzZVRleHR1cmVcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgdGhpcy5pc1NpbXBsZSA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQ0ID0geyB0ZXh0dXJlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qKlxuICogdGV4dHVyZSBwcm9wZXJ0eVxuICogQG1lbWJlciB7UElYSS5UZXh0dXJlfVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkNC50ZXh0dXJlLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMuX3RleHR1cmU7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkNC50ZXh0dXJlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG57XG4gICAgdGhpcy5fdGV4dHVyZSA9IHZhbHVlO1xuICAgIHRoaXMuX3VwZGF0ZUlEID0gLTE7XG59O1xuXG4vKipcbiAqIE11bHRpcGxpZXMgdXZzIGFycmF5IHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IHV2cyBtZXNoIHV2c1xuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IFtvdXQ9dXZzXSBvdXRwdXRcbiAqIEByZXR1cm5zIHtGbG9hdDMyQXJyYXl9IG91dHB1dFxuICovXG5UZXh0dXJlTWF0cml4LnByb3RvdHlwZS5tdWx0aXBseVV2cyA9IGZ1bmN0aW9uIG11bHRpcGx5VXZzICh1dnMsIG91dClcbntcbiAgICBpZiAob3V0ID09PSB1bmRlZmluZWQpXG4gICAge1xuICAgICAgICBvdXQgPSB1dnM7XG4gICAgfVxuXG4gICAgdmFyIG1hdCA9IHRoaXMubWFwQ29vcmQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHV2cy5sZW5ndGg7IGkgKz0gMilcbiAgICB7XG4gICAgICAgIHZhciB4ID0gdXZzW2ldO1xuICAgICAgICB2YXIgeSA9IHV2c1tpICsgMV07XG5cbiAgICAgICAgb3V0W2ldID0gKHggKiBtYXQuYSkgKyAoeSAqIG1hdC5jKSArIG1hdC50eDtcbiAgICAgICAgb3V0W2kgKyAxXSA9ICh4ICogbWF0LmIpICsgKHkgKiBtYXQuZCkgKyBtYXQudHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogdXBkYXRlcyBtYXRyaWNlcyBpZiB0ZXh0dXJlIHdhcyBjaGFuZ2VkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmb3JjZVVwZGF0ZT1mYWxzZV0gaWYgdHJ1ZSwgbWF0cmljZXMgd2lsbCBiZSB1cGRhdGVkIGFueSBjYXNlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciBvciBub3QgaXQgd2FzIHVwZGF0ZWRcbiAqL1xuVGV4dHVyZU1hdHJpeC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChmb3JjZVVwZGF0ZSlcbntcbiAgICB2YXIgdGV4ID0gdGhpcy5fdGV4dHVyZTtcblxuICAgIGlmICghdGV4IHx8ICF0ZXgudmFsaWQpXG4gICAge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFmb3JjZVVwZGF0ZVxuICAgICAgICAmJiB0aGlzLl91cGRhdGVJRCA9PT0gdGV4Ll91cGRhdGVJRClcbiAgICB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVJRCA9IHRleC5fdXBkYXRlSUQ7XG5cbiAgICB2YXIgdXZzID0gdGV4Ll91dnM7XG5cbiAgICB0aGlzLm1hcENvb3JkLnNldCh1dnMueDEgLSB1dnMueDAsIHV2cy55MSAtIHV2cy55MCwgdXZzLngzIC0gdXZzLngwLCB1dnMueTMgLSB1dnMueTAsIHV2cy54MCwgdXZzLnkwKTtcblxuICAgIHZhciBvcmlnID0gdGV4Lm9yaWc7XG4gICAgdmFyIHRyaW0gPSB0ZXgudHJpbTtcblxuICAgIGlmICh0cmltKVxuICAgIHtcbiAgICAgICAgdGVtcE1hdC5zZXQob3JpZy53aWR0aCAvIHRyaW0ud2lkdGgsIDAsIDAsIG9yaWcuaGVpZ2h0IC8gdHJpbS5oZWlnaHQsXG4gICAgICAgICAgICAtdHJpbS54IC8gdHJpbS53aWR0aCwgLXRyaW0ueSAvIHRyaW0uaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5tYXBDb29yZC5hcHBlbmQodGVtcE1hdCk7XG4gICAgfVxuXG4gICAgdmFyIHRleEJhc2UgPSB0ZXguYmFzZVRleHR1cmU7XG4gICAgdmFyIGZyYW1lID0gdGhpcy51Q2xhbXBGcmFtZTtcbiAgICB2YXIgbWFyZ2luID0gdGhpcy5jbGFtcE1hcmdpbiAvIHRleEJhc2UucmVzb2x1dGlvbjtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5jbGFtcE9mZnNldDtcblxuICAgIGZyYW1lWzBdID0gKHRleC5fZnJhbWUueCArIG1hcmdpbiArIG9mZnNldCkgLyB0ZXhCYXNlLndpZHRoO1xuICAgIGZyYW1lWzFdID0gKHRleC5fZnJhbWUueSArIG1hcmdpbiArIG9mZnNldCkgLyB0ZXhCYXNlLmhlaWdodDtcbiAgICBmcmFtZVsyXSA9ICh0ZXguX2ZyYW1lLnggKyB0ZXguX2ZyYW1lLndpZHRoIC0gbWFyZ2luICsgb2Zmc2V0KSAvIHRleEJhc2Uud2lkdGg7XG4gICAgZnJhbWVbM10gPSAodGV4Ll9mcmFtZS55ICsgdGV4Ll9mcmFtZS5oZWlnaHQgLSBtYXJnaW4gKyBvZmZzZXQpIC8gdGV4QmFzZS5oZWlnaHQ7XG4gICAgdGhpcy51Q2xhbXBPZmZzZXRbMF0gPSBvZmZzZXQgLyB0ZXhCYXNlLnJlYWxXaWR0aDtcbiAgICB0aGlzLnVDbGFtcE9mZnNldFsxXSA9IG9mZnNldCAvIHRleEJhc2UucmVhbEhlaWdodDtcblxuICAgIHRoaXMuaXNTaW1wbGUgPSB0ZXguX2ZyYW1lLndpZHRoID09PSB0ZXhCYXNlLndpZHRoXG4gICAgICAgICYmIHRleC5fZnJhbWUuaGVpZ2h0ID09PSB0ZXhCYXNlLmhlaWdodFxuICAgICAgICAmJiB0ZXgucm90YXRlID09PSAwO1xuXG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVGV4dHVyZU1hdHJpeC5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQ0ICk7XG5cbi8qKlxuICogVGhpcyBoYW5kbGVzIGEgU3ByaXRlIGFjdGluZyBhcyBhIG1hc2ssIGFzIG9wcG9zZWQgdG8gYSBHcmFwaGljLlxuICpcbiAqIFdlYkdMIG9ubHkuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLkZpbHRlclxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFNwcml0ZU1hc2tGaWx0ZXIgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChGaWx0ZXIpIHtcbiAgICBmdW5jdGlvbiBTcHJpdGVNYXNrRmlsdGVyKHNwcml0ZSlcbiAgICB7XG4gICAgICAgIHZhciBtYXNrTWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgICAgIEZpbHRlci5jYWxsKHRoaXMsIHZlcnRleCwgZnJhZ21lbnQpO1xuXG4gICAgICAgIHNwcml0ZS5yZW5kZXJhYmxlID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwcml0ZSBtYXNrXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuU3ByaXRlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXNrU3ByaXRlID0gc3ByaXRlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXNrIG1hdHJpeFxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLk1hdHJpeH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWFza01hdHJpeCA9IG1hc2tNYXRyaXg7XG4gICAgfVxuXG4gICAgaWYgKCBGaWx0ZXIgKSBTcHJpdGVNYXNrRmlsdGVyLl9fcHJvdG9fXyA9IEZpbHRlcjtcbiAgICBTcHJpdGVNYXNrRmlsdGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEZpbHRlciAmJiBGaWx0ZXIucHJvdG90eXBlICk7XG4gICAgU3ByaXRlTWFza0ZpbHRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcHJpdGVNYXNrRmlsdGVyO1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgZmlsdGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuc3lzdGVtcy5GaWx0ZXJTeXN0ZW19IGZpbHRlck1hbmFnZXIgLSBUaGUgcmVuZGVyZXIgdG8gcmV0cmlldmUgdGhlIGZpbHRlciBmcm9tXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IGlucHV0IC0gVGhlIGlucHV0IHJlbmRlciB0YXJnZXQuXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IG91dHB1dCAtIFRoZSB0YXJnZXQgdG8gb3V0cHV0IHRvLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xlYXIgLSBTaG91bGQgdGhlIG91dHB1dCBiZSBjbGVhcmVkIGJlZm9yZSByZW5kZXJpbmcgdG8gaXQuXG4gICAgICovXG4gICAgU3ByaXRlTWFza0ZpbHRlci5wcm90b3R5cGUuYXBwbHkgPSBmdW5jdGlvbiBhcHBseSAoZmlsdGVyTWFuYWdlciwgaW5wdXQsIG91dHB1dCwgY2xlYXIpXG4gICAge1xuICAgICAgICB2YXIgbWFza1Nwcml0ZSA9IHRoaXMubWFza1Nwcml0ZTtcbiAgICAgICAgdmFyIHRleCA9IHRoaXMubWFza1Nwcml0ZS50ZXh0dXJlO1xuXG4gICAgICAgIGlmICghdGV4LnZhbGlkKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0ZXgudHJhbnNmb3JtKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBtYXJnaW4gPSAwLjAsIGxldCBpdCBibGVlZCBhIGJpdCwgc2hhZGVyIGNvZGUgYmVjb21lcyBlYXNpZXJcbiAgICAgICAgICAgIC8vIGFzc3VtaW5nIHRoYXQgYXRsYXMgdGV4dHVyZXMgd2VyZSBtYWRlIHdpdGggMS1waXhlbCBwYWRkaW5nXG4gICAgICAgICAgICB0ZXgudHJhbnNmb3JtID0gbmV3IFRleHR1cmVNYXRyaXgodGV4LCAwLjApO1xuICAgICAgICB9XG4gICAgICAgIHRleC50cmFuc2Zvcm0udXBkYXRlKCk7XG5cbiAgICAgICAgdGhpcy51bmlmb3Jtcy5ucG1BbHBoYSA9IHRleC5iYXNlVGV4dHVyZS5wcmVtdWx0aXBseUFscGhhID8gMC4wIDogMS4wO1xuICAgICAgICB0aGlzLnVuaWZvcm1zLm1hc2sgPSB0ZXg7XG4gICAgICAgIC8vIGdldCBfbm9ybWFsaXplZCBzcHJpdGUgdGV4dHVyZSBjb29yZHNfIGFuZCBjb252ZXJ0IHRoZW0gdG8gX25vcm1hbGl6ZWQgYXRsYXMgdGV4dHVyZSBjb29yZHNfIHdpdGggYHByZXBlbmRgXG4gICAgICAgIHRoaXMudW5pZm9ybXMub3RoZXJNYXRyaXggPSBmaWx0ZXJNYW5hZ2VyLmNhbGN1bGF0ZVNwcml0ZU1hdHJpeCh0aGlzLm1hc2tNYXRyaXgsIG1hc2tTcHJpdGUpXG4gICAgICAgICAgICAucHJlcGVuZCh0ZXgudHJhbnNmb3JtLm1hcENvb3JkKTtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5hbHBoYSA9IG1hc2tTcHJpdGUud29ybGRBbHBoYTtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5tYXNrQ2xhbXAgPSB0ZXgudHJhbnNmb3JtLnVDbGFtcEZyYW1lO1xuXG4gICAgICAgIGZpbHRlck1hbmFnZXIuYXBwbHlGaWx0ZXIodGhpcywgaW5wdXQsIG91dHB1dCwgY2xlYXIpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3ByaXRlTWFza0ZpbHRlcjtcbn0oRmlsdGVyKSk7XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIG1hc2tzLlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5TeXN0ZW1cbiAqIEBtZW1iZXJvZiBQSVhJLnN5c3RlbXNcbiAqL1xudmFyIE1hc2tTeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBNYXNrU3lzdGVtKHJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgU3lzdGVtLmNhbGwodGhpcywgcmVuZGVyZXIpO1xuXG4gICAgICAgIC8vIFRPRE8gLSB3ZSBkb24ndCBuZWVkIGJvdGghXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBgdHJ1ZWAgaWYgY3VycmVudCBwdXNoZWQgbWFza2VkIGlzIHNjaXNzb3JcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjaXNzb3IgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFzayBkYXRhXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuR3JhcGhpY3N9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zY2lzc29yRGF0YSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRhcmdldCB0byBtYXNrXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuRGlzcGxheU9iamVjdH1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjaXNzb3JSZW5kZXJUYXJnZXQgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgc2Npc3NvclxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZW5hYmxlU2Npc3NvciA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQb29sIG9mIHVzZWQgc3ByaXRlIG1hc2sgZmlsdGVyc1xuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlNwcml0ZU1hc2tGaWx0ZXJbXX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFscGhhTWFza1Bvb2wgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudCBpbmRleCBvZiBhbHBoYSBtYXNrIHBvb2xcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hbHBoYU1hc2tJbmRleCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBNYXNrU3lzdGVtLl9fcHJvdG9fXyA9IFN5c3RlbTtcbiAgICBNYXNrU3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgTWFza1N5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNYXNrU3lzdGVtO1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgTWFzayBhbmQgYWRkcyBpdCB0byB0aGUgY3VycmVudCBmaWx0ZXIgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gdGFyZ2V0IC0gRGlzcGxheSBPYmplY3QgdG8gcHVzaCB0aGUgbWFzayB0b1xuICAgICAqIEBwYXJhbSB7UElYSS5TcHJpdGV8UElYSS5HcmFwaGljc30gbWFza0RhdGEgLSBUaGUgbWFza2luZyBkYXRhLlxuICAgICAqL1xuICAgIE1hc2tTeXN0ZW0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoICh0YXJnZXQsIG1hc2tEYXRhKVxuICAgIHtcbiAgICAgICAgLy8gVE9ETyB0aGUgcm9vdCBjaGVjayBtZWFucyBzY2lzc29yIHJlY3Qgd2lsbCBub3RcbiAgICAgICAgLy8gYmUgdXNlZCBvbiByZW5kZXIgdGV4dHVyZXMgbW9yZSBpbmZvIGhlcmU6XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpanMvcGl4aS5qcy9wdWxsLzM1NDVcblxuICAgICAgICBpZiAobWFza0RhdGEuaXNTcHJpdGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucHVzaFNwcml0ZU1hc2sodGFyZ2V0LCBtYXNrRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5lbmFibGVTY2lzc29yXG4gICAgICAgICAgICAmJiAhdGhpcy5zY2lzc29yXG4gICAgICAgICAgICAmJiB0aGlzLnJlbmRlcmVyLl9hY3RpdmVSZW5kZXJUYXJnZXQucm9vdFxuICAgICAgICAgICAgJiYgIXRoaXMucmVuZGVyZXIuc3RlbmNpbC5zdGVuY2lsTWFza1N0YWNrLmxlbmd0aFxuICAgICAgICAgICAgJiYgbWFza0RhdGEuaXNGYXN0UmVjdCgpKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgbWF0cml4ID0gbWFza0RhdGEud29ybGRUcmFuc2Zvcm07XG5cbiAgICAgICAgICAgIHZhciByb3QgPSBNYXRoLmF0YW4yKG1hdHJpeC5iLCBtYXRyaXguYSk7XG5cbiAgICAgICAgICAgIC8vIHVzZSB0aGUgbmVhcmVzdCBkZWdyZWUhXG4gICAgICAgICAgICByb3QgPSBNYXRoLnJvdW5kKHJvdCAqICgxODAgLyBNYXRoLlBJKSk7XG5cbiAgICAgICAgICAgIGlmIChyb3QgJSA5MClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2hTdGVuY2lsTWFzayhtYXNrRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoU2Npc3Nvck1hc2sodGFyZ2V0LCBtYXNrRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnB1c2hTdGVuY2lsTWFzayhtYXNrRGF0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgbGFzdCBtYXNrIGZyb20gdGhlIG1hc2sgc3RhY2sgYW5kIGRvZXNuJ3QgcmV0dXJuIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IHRhcmdldCAtIERpc3BsYXkgT2JqZWN0IHRvIHBvcCB0aGUgbWFzayBmcm9tXG4gICAgICogQHBhcmFtIHtQSVhJLlNwcml0ZXxQSVhJLkdyYXBoaWNzfSBtYXNrRGF0YSAtIFRoZSBtYXNraW5nIGRhdGEuXG4gICAgICovXG4gICAgTWFza1N5c3RlbS5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gcG9wICh0YXJnZXQsIG1hc2tEYXRhKVxuICAgIHtcbiAgICAgICAgaWYgKG1hc2tEYXRhLmlzU3ByaXRlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnBvcFNwcml0ZU1hc2sodGFyZ2V0LCBtYXNrRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5lbmFibGVTY2lzc29yICYmICF0aGlzLnJlbmRlcmVyLnN0ZW5jaWwuc3RlbmNpbE1hc2tTdGFjay5sZW5ndGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucG9wU2Npc3Nvck1hc2sodGFyZ2V0LCBtYXNrRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnBvcFN0ZW5jaWxNYXNrKHRhcmdldCwgbWFza0RhdGEpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIE1hc2sgYW5kIGFkZHMgaXQgdG8gdGhlIGN1cnJlbnQgZmlsdGVyIHN0YWNrLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IHRhcmdldCAtIERpc3BsYXkgT2JqZWN0IHRvIHB1c2ggdGhlIHNwcml0ZSBtYXNrIHRvXG4gICAgICogQHBhcmFtIHtQSVhJLlNwcml0ZX0gbWFza0RhdGEgLSBTcHJpdGUgdG8gYmUgdXNlZCBhcyB0aGUgbWFza1xuICAgICAqL1xuICAgIE1hc2tTeXN0ZW0ucHJvdG90eXBlLnB1c2hTcHJpdGVNYXNrID0gZnVuY3Rpb24gcHVzaFNwcml0ZU1hc2sgKHRhcmdldCwgbWFza0RhdGEpXG4gICAge1xuICAgICAgICB2YXIgYWxwaGFNYXNrRmlsdGVyID0gdGhpcy5hbHBoYU1hc2tQb29sW3RoaXMuYWxwaGFNYXNrSW5kZXhdO1xuXG4gICAgICAgIGlmICghYWxwaGFNYXNrRmlsdGVyKVxuICAgICAgICB7XG4gICAgICAgICAgICBhbHBoYU1hc2tGaWx0ZXIgPSB0aGlzLmFscGhhTWFza1Bvb2xbdGhpcy5hbHBoYU1hc2tJbmRleF0gPSBbbmV3IFNwcml0ZU1hc2tGaWx0ZXIobWFza0RhdGEpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFscGhhTWFza0ZpbHRlclswXS5yZXNvbHV0aW9uID0gdGhpcy5yZW5kZXJlci5yZXNvbHV0aW9uO1xuICAgICAgICBhbHBoYU1hc2tGaWx0ZXJbMF0ubWFza1Nwcml0ZSA9IG1hc2tEYXRhO1xuXG4gICAgICAgIHZhciBzdGFzaEZpbHRlckFyZWEgPSB0YXJnZXQuZmlsdGVyQXJlYTtcblxuICAgICAgICB0YXJnZXQuZmlsdGVyQXJlYSA9IG1hc2tEYXRhLmdldEJvdW5kcyh0cnVlKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5maWx0ZXIucHVzaCh0YXJnZXQsIGFscGhhTWFza0ZpbHRlcik7XG4gICAgICAgIHRhcmdldC5maWx0ZXJBcmVhID0gc3Rhc2hGaWx0ZXJBcmVhO1xuXG4gICAgICAgIHRoaXMuYWxwaGFNYXNrSW5kZXgrKztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgbGFzdCBmaWx0ZXIgZnJvbSB0aGUgZmlsdGVyIHN0YWNrIGFuZCBkb2Vzbid0IHJldHVybiBpdC5cbiAgICAgKlxuICAgICAqL1xuICAgIE1hc2tTeXN0ZW0ucHJvdG90eXBlLnBvcFNwcml0ZU1hc2sgPSBmdW5jdGlvbiBwb3BTcHJpdGVNYXNrICgpXG4gICAge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmZpbHRlci5wb3AoKTtcbiAgICAgICAgdGhpcy5hbHBoYU1hc2tJbmRleC0tO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBNYXNrIGFuZCBhZGRzIGl0IHRvIHRoZSBjdXJyZW50IGZpbHRlciBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5TcHJpdGV8UElYSS5HcmFwaGljc30gbWFza0RhdGEgLSBUaGUgbWFza2luZyBkYXRhLlxuICAgICAqL1xuICAgIE1hc2tTeXN0ZW0ucHJvdG90eXBlLnB1c2hTdGVuY2lsTWFzayA9IGZ1bmN0aW9uIHB1c2hTdGVuY2lsTWFzayAobWFza0RhdGEpXG4gICAge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmJhdGNoLmZsdXNoKCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc3RlbmNpbC5wdXNoU3RlbmNpbChtYXNrRGF0YSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGxhc3QgZmlsdGVyIGZyb20gdGhlIGZpbHRlciBzdGFjayBhbmQgZG9lc24ndCByZXR1cm4gaXQuXG4gICAgICpcbiAgICAgKi9cbiAgICBNYXNrU3lzdGVtLnByb3RvdHlwZS5wb3BTdGVuY2lsTWFzayA9IGZ1bmN0aW9uIHBvcFN0ZW5jaWxNYXNrICgpXG4gICAge1xuICAgICAgICAvLyB0aGlzLnJlbmRlcmVyLmN1cnJlbnRSZW5kZXJlci5zdG9wKCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc3RlbmNpbC5wb3BTdGVuY2lsKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IHRhcmdldCAtIERpc3BsYXkgT2JqZWN0IHRvIHB1c2ggdGhlIG1hc2sgdG9cbiAgICAgKiBAcGFyYW0ge1BJWEkuR3JhcGhpY3N9IG1hc2tEYXRhIC0gVGhlIG1hc2tpbmcgZGF0YS5cbiAgICAgKi9cbiAgICBNYXNrU3lzdGVtLnByb3RvdHlwZS5wdXNoU2Npc3Nvck1hc2sgPSBmdW5jdGlvbiBwdXNoU2Npc3Nvck1hc2sgKHRhcmdldCwgbWFza0RhdGEpXG4gICAge1xuICAgICAgICBtYXNrRGF0YS5yZW5kZXJhYmxlID0gdHJ1ZTtcblxuICAgICAgICB2YXIgcmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJlci5fYWN0aXZlUmVuZGVyVGFyZ2V0O1xuXG4gICAgICAgIHZhciBib3VuZHMgPSBtYXNrRGF0YS5nZXRCb3VuZHMoKTtcblxuICAgICAgICBib3VuZHMuZml0KHJlbmRlclRhcmdldC5zaXplKTtcbiAgICAgICAgbWFza0RhdGEucmVuZGVyYWJsZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMucmVuZGVyZXIuZ2wuZW5hYmxlKHRoaXMucmVuZGVyZXIuZ2wuU0NJU1NPUl9URVNUKTtcblxuICAgICAgICB2YXIgcmVzb2x1dGlvbiA9IHRoaXMucmVuZGVyZXIucmVzb2x1dGlvbjtcblxuICAgICAgICB0aGlzLnJlbmRlcmVyLmdsLnNjaXNzb3IoXG4gICAgICAgICAgICBib3VuZHMueCAqIHJlc29sdXRpb24sXG4gICAgICAgICAgICAocmVuZGVyVGFyZ2V0LnJvb3QgPyByZW5kZXJUYXJnZXQuc2l6ZS5oZWlnaHQgLSBib3VuZHMueSAtIGJvdW5kcy5oZWlnaHQgOiBib3VuZHMueSkgKiByZXNvbHV0aW9uLFxuICAgICAgICAgICAgYm91bmRzLndpZHRoICogcmVzb2x1dGlvbixcbiAgICAgICAgICAgIGJvdW5kcy5oZWlnaHQgKiByZXNvbHV0aW9uXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5zY2lzc29yUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0O1xuICAgICAgICB0aGlzLnNjaXNzb3JEYXRhID0gbWFza0RhdGE7XG4gICAgICAgIHRoaXMuc2Npc3NvciA9IHRydWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBvcCBzY2lzc29yIG1hc2tcbiAgICAgKlxuICAgICAqL1xuICAgIE1hc2tTeXN0ZW0ucHJvdG90eXBlLnBvcFNjaXNzb3JNYXNrID0gZnVuY3Rpb24gcG9wU2Npc3Nvck1hc2sgKClcbiAgICB7XG4gICAgICAgIHRoaXMuc2Npc3NvclJlbmRlclRhcmdldCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2Npc3NvckRhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLnNjaXNzb3IgPSBmYWxzZTtcblxuICAgICAgICAvLyBtdXN0IGJlIHNjaXNzb3IhXG4gICAgICAgIHZhciByZWYgPSB0aGlzLnJlbmRlcmVyO1xuICAgICAgICB2YXIgZ2wgPSByZWYuZ2w7XG5cbiAgICAgICAgZ2wuZGlzYWJsZShnbC5TQ0lTU09SX1RFU1QpO1xuICAgIH07XG5cbiAgICByZXR1cm4gTWFza1N5c3RlbTtcbn0oU3lzdGVtKSk7XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIHN0ZW5jaWxzICh1c2VkIGZvciBtYXNrcykuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICovXG52YXIgU3RlbmNpbFN5c3RlbSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN5c3RlbSkge1xuICAgIGZ1bmN0aW9uIFN0ZW5jaWxTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtYXNrIHN0YWNrXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuR3JhcGhpY3NbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RlbmNpbE1hc2tTdGFjayA9IFtdO1xuICAgIH1cblxuICAgIGlmICggU3lzdGVtICkgU3RlbmNpbFN5c3RlbS5fX3Byb3RvX18gPSBTeXN0ZW07XG4gICAgU3RlbmNpbFN5c3RlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTeXN0ZW0gJiYgU3lzdGVtLnByb3RvdHlwZSApO1xuICAgIFN0ZW5jaWxTeXN0ZW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3RlbmNpbFN5c3RlbTtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIG1hc2sgc3RhY2sgdGhhdCBpcyB1c2VkIGJ5IHRoaXMgU3lzdGVtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkdyYXBoaWNzW119IHN0ZW5jaWxNYXNrU3RhY2sgLSBUaGUgbWFzayBzdGFja1xuICAgICAqL1xuICAgIFN0ZW5jaWxTeXN0ZW0ucHJvdG90eXBlLnNldE1hc2tTdGFjayA9IGZ1bmN0aW9uIHNldE1hc2tTdGFjayAoc3RlbmNpbE1hc2tTdGFjaylcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMucmVuZGVyZXIuZ2w7XG4gICAgICAgIHZhciBjdXJTdGFja0xlbiA9IHRoaXMuc3RlbmNpbE1hc2tTdGFjay5sZW5ndGg7XG5cbiAgICAgICAgdGhpcy5zdGVuY2lsTWFza1N0YWNrID0gc3RlbmNpbE1hc2tTdGFjaztcbiAgICAgICAgaWYgKHN0ZW5jaWxNYXNrU3RhY2subGVuZ3RoICE9PSBjdXJTdGFja0xlbilcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHN0ZW5jaWxNYXNrU3RhY2subGVuZ3RoID09PSAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGdsLmRpc2FibGUoZ2wuU1RFTkNJTF9URVNUKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnbC5lbmFibGUoZ2wuU1RFTkNJTF9URVNUKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91c2VDdXJyZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgTWFzayBhbmQgYWRkcyBpdCB0byB0aGUgY3VycmVudCBzdGVuY2lsIHN0YWNrLiBAYWx2aW5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5HcmFwaGljc30gZ3JhcGhpY3MgLSBUaGUgbWFza1xuICAgICAqL1xuICAgIFN0ZW5jaWxTeXN0ZW0ucHJvdG90eXBlLnB1c2hTdGVuY2lsID0gZnVuY3Rpb24gcHVzaFN0ZW5jaWwgKGdyYXBoaWNzKVxuICAgIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5yZW5kZXJlci5nbDtcbiAgICAgICAgdmFyIHByZXZNYXNrQ291bnQgPSB0aGlzLnN0ZW5jaWxNYXNrU3RhY2subGVuZ3RoO1xuXG4gICAgICAgIGlmIChwcmV2TWFza0NvdW50ID09PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBmb3JjZSB1c2Ugc3RlbmNpbCB0ZXh0dXJlIGluIGN1cnJlbnQgZnJhbWVidWZmZXJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuZnJhbWVidWZmZXIuZm9yY2VTdGVuY2lsKCk7XG4gICAgICAgICAgICBnbC5lbmFibGUoZ2wuU1RFTkNJTF9URVNUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RlbmNpbE1hc2tTdGFjay5wdXNoKGdyYXBoaWNzKTtcblxuICAgICAgICAvLyBJbmNyZW1lbnQgdGhlIHJlZmVyZW5jZSBzdGVuY2lsIHZhbHVlIHdoZXJlIHRoZSBuZXcgbWFzayBvdmVybGFwcyB3aXRoIHRoZSBvbGQgb25lcy5cbiAgICAgICAgZ2wuY29sb3JNYXNrKGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgZ2wuc3RlbmNpbEZ1bmMoZ2wuRVFVQUwsIHByZXZNYXNrQ291bnQsIHRoaXMuX2dldEJpdHdpc2VNYXNrKCkpO1xuICAgICAgICBnbC5zdGVuY2lsT3AoZ2wuS0VFUCwgZ2wuS0VFUCwgZ2wuSU5DUik7XG5cbiAgICAgICAgZ3JhcGhpY3MucmVuZGVyYWJsZSA9IHRydWU7XG4gICAgICAgIGdyYXBoaWNzLnJlbmRlcih0aGlzLnJlbmRlcmVyKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5iYXRjaC5mbHVzaCgpO1xuICAgICAgICBncmFwaGljcy5yZW5kZXJhYmxlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fdXNlQ3VycmVudCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBsYXN0IG1hc2sgZnJvbSB0aGUgc3RlbmNpbCBzdGFjay4gQGFsdmluXG4gICAgICovXG4gICAgU3RlbmNpbFN5c3RlbS5wcm90b3R5cGUucG9wU3RlbmNpbCA9IGZ1bmN0aW9uIHBvcFN0ZW5jaWwgKClcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMucmVuZGVyZXIuZ2w7XG4gICAgICAgIHZhciBncmFwaGljcyA9IHRoaXMuc3RlbmNpbE1hc2tTdGFjay5wb3AoKTtcblxuICAgICAgICBpZiAodGhpcy5zdGVuY2lsTWFza1N0YWNrLmxlbmd0aCA9PT0gMClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gdGhlIHN0YWNrIGlzIGVtcHR5IVxuICAgICAgICAgICAgZ2wuZGlzYWJsZShnbC5TVEVOQ0lMX1RFU1QpO1xuICAgICAgICAgICAgZ2wuY2xlYXIoZ2wuU1RFTkNJTF9CVUZGRVJfQklUKTtcbiAgICAgICAgICAgIGdsLmNsZWFyU3RlbmNpbCgwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIERlY3JlbWVudCB0aGUgcmVmZXJlbmNlIHN0ZW5jaWwgdmFsdWUgd2hlcmUgdGhlIHBvcHBlZCBtYXNrIG92ZXJsYXBzIHdpdGggdGhlIG90aGVyIG9uZXNcbiAgICAgICAgICAgIGdsLmNvbG9yTWFzayhmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICBnbC5zdGVuY2lsT3AoZ2wuS0VFUCwgZ2wuS0VFUCwgZ2wuREVDUik7XG5cbiAgICAgICAgICAgIGdyYXBoaWNzLnJlbmRlcmFibGUgPSB0cnVlO1xuICAgICAgICAgICAgZ3JhcGhpY3MucmVuZGVyKHRoaXMucmVuZGVyZXIpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5iYXRjaC5mbHVzaCgpO1xuICAgICAgICAgICAgZ3JhcGhpY3MucmVuZGVyYWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICB0aGlzLl91c2VDdXJyZW50KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0dXAgcmVuZGVyZXIgdG8gdXNlIHRoZSBjdXJyZW50IHN0ZW5jaWwgZGF0YS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFN0ZW5jaWxTeXN0ZW0ucHJvdG90eXBlLl91c2VDdXJyZW50ID0gZnVuY3Rpb24gX3VzZUN1cnJlbnQgKClcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMucmVuZGVyZXIuZ2w7XG5cbiAgICAgICAgZ2wuY29sb3JNYXNrKHRydWUsIHRydWUsIHRydWUsIHRydWUpO1xuICAgICAgICBnbC5zdGVuY2lsRnVuYyhnbC5FUVVBTCwgdGhpcy5zdGVuY2lsTWFza1N0YWNrLmxlbmd0aCwgdGhpcy5fZ2V0Qml0d2lzZU1hc2soKSk7XG4gICAgICAgIGdsLnN0ZW5jaWxPcChnbC5LRUVQLCBnbC5LRUVQLCBnbC5LRUVQKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmlsbCAxcyBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIGFjaXR2ZSBzdGVuY2lsIG1hc2tzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgYml0d2lzZSBtYXNrLlxuICAgICAqL1xuICAgIFN0ZW5jaWxTeXN0ZW0ucHJvdG90eXBlLl9nZXRCaXR3aXNlTWFzayA9IGZ1bmN0aW9uIF9nZXRCaXR3aXNlTWFzayAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICgxIDw8IHRoaXMuc3RlbmNpbE1hc2tTdGFjay5sZW5ndGgpIC0gMTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIG1hc2sgc3RhY2suXG4gICAgICpcbiAgICAgKi9cbiAgICBTdGVuY2lsU3lzdGVtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxuICAgIHtcbiAgICAgICAgU3lzdGVtLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcywgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5zdGVuY2lsTWFza1N0YWNrID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN0ZW5jaWxTeXN0ZW07XG59KFN5c3RlbSkpO1xuXG4vKipcbiAqIFN5c3RlbSBwbHVnaW4gdG8gdGhlIHJlbmRlcmVyIHRvIG1hbmFnZSB0aGUgcHJvamVjdGlvbiBtYXRyaXguXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICovXG5cbnZhciBQcm9qZWN0aW9uU3lzdGVtID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU3lzdGVtKSB7XG4gICAgZnVuY3Rpb24gUHJvamVjdGlvblN5c3RlbShyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIFN5c3RlbS5jYWxsKHRoaXMsIHJlbmRlcmVyKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVzdGluYXRpb24gZnJhbWVcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5SZWN0YW5nbGV9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkZyYW1lID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU291cmNlIGZyYW1lXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUmVjdGFuZ2xlfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc291cmNlRnJhbWUgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZhdWx0IGRlc3RpbmF0aW9uIGZyYW1lXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUmVjdGFuZ2xlfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVmYXVsdEZyYW1lID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvamVjdCBtYXRyaXhcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5NYXRyaXh9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHRyYW5zZm9ybSB0aGF0IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIHByb2plY3Rpb24gbWF0cml4XG4gICAgICAgICAqIGlmIG51bGwsIG5vdGhpbmcgd2lsbCBiZSBhcHBsaWVkXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuTWF0cml4fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSBudWxsO1xuICAgIH1cblxuICAgIGlmICggU3lzdGVtICkgUHJvamVjdGlvblN5c3RlbS5fX3Byb3RvX18gPSBTeXN0ZW07XG4gICAgUHJvamVjdGlvblN5c3RlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTeXN0ZW0gJiYgU3lzdGVtLnByb3RvdHlwZSApO1xuICAgIFByb2plY3Rpb25TeXN0ZW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUHJvamVjdGlvblN5c3RlbTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHByb2plY3Rpb24gbWF0cml4IGJhc2VkIG9uIGEgcHJvamVjdGlvbiBmcmFtZSAod2hpY2ggaXMgYSByZWN0YW5nbGUpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBkZXN0aW5hdGlvbkZyYW1lIC0gVGhlIGRlc3RpbmF0aW9uIGZyYW1lLlxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IHNvdXJjZUZyYW1lIC0gVGhlIHNvdXJjZSBmcmFtZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmVzb2x1dGlvbiAtIFJlc29sdXRpb25cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJvb3QgLSBJZiBpcyByb290XG4gICAgICovXG4gICAgUHJvamVjdGlvblN5c3RlbS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkZXN0aW5hdGlvbkZyYW1lLCBzb3VyY2VGcmFtZSwgcmVzb2x1dGlvbiwgcm9vdClcbiAgICB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25GcmFtZSA9IGRlc3RpbmF0aW9uRnJhbWUgfHwgdGhpcy5kZXN0aW5hdGlvbkZyYW1lIHx8IHRoaXMuZGVmYXVsdEZyYW1lO1xuICAgICAgICB0aGlzLnNvdXJjZUZyYW1lID0gc291cmNlRnJhbWUgfHwgdGhpcy5zb3VyY2VGcmFtZSB8fCBkZXN0aW5hdGlvbkZyYW1lO1xuXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlUHJvamVjdGlvbih0aGlzLmRlc3RpbmF0aW9uRnJhbWUsIHRoaXMuc291cmNlRnJhbWUsIHJlc29sdXRpb24sIHJvb3QpO1xuXG4gICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4LmFwcGVuZCh0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVuZGVyZXIgPSAgdGhpcy5yZW5kZXJlcjtcblxuICAgICAgICByZW5kZXJlci5nbG9iYWxVbmlmb3Jtcy51bmlmb3Jtcy5wcm9qZWN0aW9uTWF0cml4ID0gdGhpcy5wcm9qZWN0aW9uTWF0cml4O1xuICAgICAgICByZW5kZXJlci5nbG9iYWxVbmlmb3Jtcy51cGRhdGUoKTtcblxuICAgICAgICAvLyB0aGlzIHdpbGwgd29yayBmb3Igbm93XG4gICAgICAgIC8vIGJ1dCB3b3VsZCBiZSBzd2VldCB0byBzdGljayBhbmQgZXZlbiBvbiB0aGUgZ2xvYmFsIHVuaWZvcm1zLi5cbiAgICAgICAgaWYgKHJlbmRlcmVyLnNoYWRlci5zaGFkZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlbmRlcmVyLnNoYWRlci5zeW5jVW5pZm9ybUdyb3VwKHJlbmRlcmVyLnNoYWRlci5zaGFkZXIudW5pZm9ybXMuZ2xvYmFscyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcHJvamVjdGlvbiBtYXRyaXggYmFzZWQgb24gYSBwcm9qZWN0aW9uIGZyYW1lICh3aGljaCBpcyBhIHJlY3RhbmdsZSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IGRlc3RpbmF0aW9uRnJhbWUgLSBUaGUgZGVzdGluYXRpb24gZnJhbWUuXG4gICAgICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gc291cmNlRnJhbWUgLSBUaGUgc291cmNlIGZyYW1lLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByZXNvbHV0aW9uIC0gUmVzb2x1dGlvblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcm9vdCAtIElmIGlzIHJvb3RcbiAgICAgKi9cbiAgICBQcm9qZWN0aW9uU3lzdGVtLnByb3RvdHlwZS5jYWxjdWxhdGVQcm9qZWN0aW9uID0gZnVuY3Rpb24gY2FsY3VsYXRlUHJvamVjdGlvbiAoZGVzdGluYXRpb25GcmFtZSwgc291cmNlRnJhbWUsIHJlc29sdXRpb24sIHJvb3QpXG4gICAge1xuICAgICAgICB2YXIgcG0gPSB0aGlzLnByb2plY3Rpb25NYXRyaXg7XG5cbiAgICAgICAgLy8gSSBkb24ndCB0aGluayB3ZSB3aWxsIG5lZWQgdGhpcyBsaW5lLi5cbiAgICAgICAgLy8gcG0uaWRlbnRpdHkoKTtcblxuICAgICAgICBpZiAoIXJvb3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBtLmEgPSAoMSAvIGRlc3RpbmF0aW9uRnJhbWUud2lkdGggKiAyKSAqIHJlc29sdXRpb247XG4gICAgICAgICAgICBwbS5kID0gKDEgLyBkZXN0aW5hdGlvbkZyYW1lLmhlaWdodCAqIDIpICogcmVzb2x1dGlvbjtcblxuICAgICAgICAgICAgcG0udHggPSAtMSAtIChzb3VyY2VGcmFtZS54ICogcG0uYSk7XG4gICAgICAgICAgICBwbS50eSA9IC0xIC0gKHNvdXJjZUZyYW1lLnkgKiBwbS5kKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBtLmEgPSAoMSAvIGRlc3RpbmF0aW9uRnJhbWUud2lkdGggKiAyKSAqIHJlc29sdXRpb247XG4gICAgICAgICAgICBwbS5kID0gKC0xIC8gZGVzdGluYXRpb25GcmFtZS5oZWlnaHQgKiAyKSAqIHJlc29sdXRpb247XG5cbiAgICAgICAgICAgIHBtLnR4ID0gLTEgLSAoc291cmNlRnJhbWUueCAqIHBtLmEpO1xuICAgICAgICAgICAgcG0udHkgPSAxIC0gKHNvdXJjZUZyYW1lLnkgKiBwbS5kKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0cmFuc2Zvcm0gb2YgdGhlIGFjdGl2ZSByZW5kZXIgdGFyZ2V0IHRvIHRoZSBnaXZlbiBtYXRyaXhcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5NYXRyaXh9IG1hdHJpeCAtIFRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXhcbiAgICAgKi9cbiAgICBQcm9qZWN0aW9uU3lzdGVtLnByb3RvdHlwZS5zZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbiBzZXRUcmFuc2Zvcm0gKCkvLyBtYXRyaXgpXG4gICAge1xuICAgICAgICAvLyB0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQudHJhbnNmb3JtID0gbWF0cml4O1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvamVjdGlvblN5c3RlbTtcbn0oU3lzdGVtKSk7XG5cbnZhciB0ZW1wUmVjdCA9IG5ldyBSZWN0YW5nbGUoKTtcblxuLyoqXG4gKiBTeXN0ZW0gcGx1Z2luIHRvIHRoZSByZW5kZXJlciB0byBtYW5hZ2UgcmVuZGVyIHRleHR1cmVzLlxuICpcbiAqIFNob3VsZCBiZSBhZGRlZCBhZnRlciBGcmFtZWJ1ZmZlclN5c3RlbVxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5TeXN0ZW1cbiAqIEBtZW1iZXJvZiBQSVhJLnN5c3RlbXNcbiAqL1xuXG52YXIgUmVuZGVyVGV4dHVyZVN5c3RlbSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN5c3RlbSkge1xuICAgIGZ1bmN0aW9uIFJlbmRlclRleHR1cmVTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjbGVhciBiYWNrZ3JvdW5kIGNvbG9yIGFzIHJnYmFcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsZWFyQ29sb3IgPSByZW5kZXJlci5fYmFja2dyb3VuZENvbG9yUmdiYTtcblxuICAgICAgICAvLyBUT0RPIG1vdmUgdGhpcyBwcm9wZXJ0eSBzb21ld2hlcmUgZWxzZSFcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpc3Qgb2YgbWFza3MgZm9yIHRoZSBTdGVuY2lsU3lzdGVtXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuR3JhcGhpY3NbXX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlZmF1bHRNYXNrU3RhY2sgPSBbXTtcblxuICAgICAgICAvLyBlbXB0eSByZW5kZXIgdGV4dHVyZT9cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbmRlciB0ZXh0dXJlXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUmVuZGVyVGV4dHVyZX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTb3VyY2UgZnJhbWVcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5SZWN0YW5nbGV9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zb3VyY2VGcmFtZSA9IG5ldyBSZWN0YW5nbGUoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVzdGluYXRpb24gZnJhbWVcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5SZWN0YW5nbGV9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkZyYW1lID0gbmV3IFJlY3RhbmdsZSgpO1xuICAgIH1cblxuICAgIGlmICggU3lzdGVtICkgUmVuZGVyVGV4dHVyZVN5c3RlbS5fX3Byb3RvX18gPSBTeXN0ZW07XG4gICAgUmVuZGVyVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTeXN0ZW0gJiYgU3lzdGVtLnByb3RvdHlwZSApO1xuICAgIFJlbmRlclRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVuZGVyVGV4dHVyZVN5c3RlbTtcblxuICAgIC8qKlxuICAgICAqIEJpbmQgdGhlIGN1cnJlbnQgcmVuZGVyIHRleHR1cmVcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gW3JlbmRlclRleHR1cmVdIC0gUmVuZGVyVGV4dHVyZSB0byBiaW5kLCBieSBkZWZhdWx0IGl0cyBgbnVsbGAsIHRoZSBzY3JlZW5cbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBbc291cmNlRnJhbWVdIC0gcGFydCBvZiBzY3JlZW4gdGhhdCBpcyBtYXBwZWQgdG8gdGhlIHJlbmRlclRleHR1cmVcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBbZGVzdGluYXRpb25GcmFtZV0gLSBwYXJ0IG9mIHJlbmRlclRleHR1cmUsIGJ5IGRlZmF1bHQgaXQgaGFzIHRoZSBzYW1lIHNpemUgYXMgc291cmNlRnJhbWVcbiAgICAgKi9cbiAgICBSZW5kZXJUZXh0dXJlU3lzdGVtLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCAocmVuZGVyVGV4dHVyZSwgc291cmNlRnJhbWUsIGRlc3RpbmF0aW9uRnJhbWUpXG4gICAge1xuICAgICAgICBpZiAoIHJlbmRlclRleHR1cmUgPT09IHZvaWQgMCApIHJlbmRlclRleHR1cmUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuY3VycmVudCA9IHJlbmRlclRleHR1cmU7XG5cbiAgICAgICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblxuICAgICAgICB2YXIgcmVzb2x1dGlvbjtcblxuICAgICAgICBpZiAocmVuZGVyVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGJhc2VUZXh0dXJlID0gcmVuZGVyVGV4dHVyZS5iYXNlVGV4dHVyZTtcblxuICAgICAgICAgICAgcmVzb2x1dGlvbiA9IGJhc2VUZXh0dXJlLnJlc29sdXRpb247XG5cbiAgICAgICAgICAgIGlmICghZGVzdGluYXRpb25GcmFtZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZW1wUmVjdC53aWR0aCA9IGJhc2VUZXh0dXJlLnJlYWxXaWR0aDtcbiAgICAgICAgICAgICAgICB0ZW1wUmVjdC5oZWlnaHQgPSBiYXNlVGV4dHVyZS5yZWFsSGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25GcmFtZSA9IHRlbXBSZWN0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXNvdXJjZUZyYW1lKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNvdXJjZUZyYW1lID0gZGVzdGluYXRpb25GcmFtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5mcmFtZWJ1ZmZlci5iaW5kKGJhc2VUZXh0dXJlLmZyYW1lYnVmZmVyLCBkZXN0aW5hdGlvbkZyYW1lKTtcblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5wcm9qZWN0aW9uLnVwZGF0ZShkZXN0aW5hdGlvbkZyYW1lLCBzb3VyY2VGcmFtZSwgcmVzb2x1dGlvbiwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zdGVuY2lsLnNldE1hc2tTdGFjayhiYXNlVGV4dHVyZS5zdGVuY2lsTWFza1N0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlc29sdXRpb24gPSB0aGlzLnJlbmRlcmVyLnJlc29sdXRpb247XG5cbiAgICAgICAgICAgIC8vIFRPRE8gdGhlc2UgdmFsaWRhdGlvbiBjaGVja3MgaGFwcGVuIGRlZXBlciBkb3duLi5cbiAgICAgICAgICAgIC8vIHRoaW5nIHRoZXkgY2FuIGJlIGF2b2lkZWQuLlxuICAgICAgICAgICAgaWYgKCFkZXN0aW5hdGlvbkZyYW1lKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRlbXBSZWN0LndpZHRoID0gcmVuZGVyZXIud2lkdGg7XG4gICAgICAgICAgICAgICAgdGVtcFJlY3QuaGVpZ2h0ID0gcmVuZGVyZXIuaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25GcmFtZSA9IHRlbXBSZWN0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXNvdXJjZUZyYW1lKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNvdXJjZUZyYW1lID0gZGVzdGluYXRpb25GcmFtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVuZGVyZXIuZnJhbWVidWZmZXIuYmluZChudWxsLCBkZXN0aW5hdGlvbkZyYW1lKTtcblxuICAgICAgICAgICAgLy8gVE9ETyBzdG9yZSB0aGlzLi5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucHJvamVjdGlvbi51cGRhdGUoZGVzdGluYXRpb25GcmFtZSwgc291cmNlRnJhbWUsIHJlc29sdXRpb24sIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zdGVuY2lsLnNldE1hc2tTdGFjayh0aGlzLmRlZmF1bHRNYXNrU3RhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zb3VyY2VGcmFtZS5jb3B5RnJvbShzb3VyY2VGcmFtZSk7XG5cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkZyYW1lLnggPSBkZXN0aW5hdGlvbkZyYW1lLnggLyByZXNvbHV0aW9uO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uRnJhbWUueSA9IGRlc3RpbmF0aW9uRnJhbWUueSAvIHJlc29sdXRpb247XG5cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkZyYW1lLndpZHRoID0gZGVzdGluYXRpb25GcmFtZS53aWR0aCAvIHJlc29sdXRpb247XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25GcmFtZS5oZWlnaHQgPSBkZXN0aW5hdGlvbkZyYW1lLmhlaWdodCAvIHJlc29sdXRpb247XG5cbiAgICAgICAgaWYgKHNvdXJjZUZyYW1lID09PSBkZXN0aW5hdGlvbkZyYW1lKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZUZyYW1lLmNvcHlGcm9tKHRoaXMuZGVzdGluYXRpb25GcmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXJhc2VzIHRoZSByZW5kZXIgdGV4dHVyZSBhbmQgZmlsbHMgdGhlIGRyYXdpbmcgYXJlYSB3aXRoIGEgY29sb3VyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBbY2xlYXJDb2xvcl0gLSBUaGUgY29sb3IgYXMgcmdiYSwgZGVmYXVsdCB0byB1c2UgdGhlIHJlbmRlcmVyIGJhY2tncm91bmRDb2xvclxuICAgICAqIEByZXR1cm4ge1BJWEkuUmVuZGVyZXJ9IFJldHVybnMgaXRzZWxmLlxuICAgICAqL1xuICAgIFJlbmRlclRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKGNsZWFyQ29sb3IpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50KVxuICAgICAgICB7XG4gICAgICAgICAgICBjbGVhckNvbG9yID0gY2xlYXJDb2xvciB8fCB0aGlzLmN1cnJlbnQuYmFzZVRleHR1cmUuY2xlYXJDb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNsZWFyQ29sb3IgPSBjbGVhckNvbG9yIHx8IHRoaXMuY2xlYXJDb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVuZGVyZXIuZnJhbWVidWZmZXIuY2xlYXIoY2xlYXJDb2xvclswXSwgY2xlYXJDb2xvclsxXSwgY2xlYXJDb2xvclsyXSwgY2xlYXJDb2xvclszXSk7XG4gICAgfTtcblxuICAgIFJlbmRlclRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIHJlc2l6ZSAoKS8vIHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpXG4gICAge1xuICAgICAgICAvLyByZXNpemUgdGhlIHJvb3Qgb25seSFcbiAgICAgICAgdGhpcy5iaW5kKG51bGwpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgcmVuZGVyVGV4dHVyZSBzdGF0ZVxuICAgICAqL1xuICAgIFJlbmRlclRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQgKClcbiAgICB7XG4gICAgICAgIHRoaXMuYmluZChudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlbmRlclRleHR1cmVTeXN0ZW07XG59KFN5c3RlbSkpO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBjcmVhdGUgYSBXZWJHTCBQcm9ncmFtXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgR0xQcm9ncmFtID0gZnVuY3Rpb24gR0xQcm9ncmFtKHByb2dyYW0sIHVuaWZvcm1EYXRhKVxue1xuICAgIC8qKlxuICAgICAqIFRoZSBzaGFkZXIgcHJvZ3JhbVxuICAgICAqXG4gICAgICogQG1lbWJlciB7V2ViR0xQcm9ncmFtfVxuICAgICAqL1xuICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG5cbiAgICAvKipcbiAgICAgKiBob2xkcyB0aGUgdW5pZm9ybSBkYXRhIHdoaWNoIGNvbnRhaW5zIHVuaWZvcm0gbG9jYXRpb25zXG4gICAgICogYW5kIGN1cnJlbnQgdW5pZm9ybSB2YWx1ZXMgdXNlZCBmb3IgY2FjaGluZyBhbmQgcHJldmVudGluZyB1bm5lZWRlZCBHUFUgY29tbWFuZHNcbiAgICAgKiBAbWVtYmVyIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy51bmlmb3JtRGF0YSA9IHVuaWZvcm1EYXRhO1xuXG4gICAgLyoqXG4gICAgICogdW5pZm9ybUdyb3VwcyBob2xkcyB0aGUgdmFyaW91cyB1cGxvYWQgZnVuY3Rpb25zIGZvciB0aGUgc2hhZGVyLiBFYWNoIHVuaWZvcm0gZ3JvdXBcbiAgICAgKiBhbmQgcHJvZ3JhbSBoYXZlIGEgdW5pcXVlIHVwbG9hZCBmdW5jdGlvbiBnZW5lcmF0ZWQuXG4gICAgICogQG1lbWJlciB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMudW5pZm9ybUdyb3VwcyA9IHt9O1xufTtcblxuLyoqXG4gKiBEZXN0cm95cyB0aGlzIHByb2dyYW1cbiAqL1xuR0xQcm9ncmFtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIHRoaXMudW5pZm9ybURhdGEgPSBudWxsO1xuICAgIHRoaXMudW5pZm9ybUdyb3VwcyA9IG51bGw7XG4gICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcbn07XG5cbnZhciBVSUQkNCA9IDA7XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIHNoYWRlcnMuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSS5zeXN0ZW1zXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICovXG52YXIgU2hhZGVyU3lzdGVtID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU3lzdGVtKSB7XG4gICAgZnVuY3Rpb24gU2hhZGVyU3lzdGVtKHJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgU3lzdGVtLmNhbGwodGhpcywgcmVuZGVyZXIpO1xuXG4gICAgICAgIC8vIFZhbGlkYXRpb24gY2hlY2sgdGhhdCB0aGlzIGVudmlyb25tZW50IHN1cHBvcnQgYG5ldyBGdW5jdGlvbmBcbiAgICAgICAgdGhpcy5zeXN0ZW1DaGVjaygpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY3VycmVudCBXZWJHTCByZW5kZXJpbmcgY29udGV4dFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdsID0gbnVsbDtcblxuICAgICAgICB0aGlzLnNoYWRlciA9IG51bGw7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhY2hlIHRvIGhvbGRzIHRoZSBnZW5lcmF0ZWQgZnVuY3Rpb25zLiBTdG9yZWQgYWdhaW5zdCBVbmlmb3JtT2JqZWN0cyB1bmlxdWUgc2lnbmF0dXJlXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhY2hlID0ge307XG5cbiAgICAgICAgdGhpcy5pZCA9IFVJRCQ0Kys7XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBTaGFkZXJTeXN0ZW0uX19wcm90b19fID0gU3lzdGVtO1xuICAgIFNoYWRlclN5c3RlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTeXN0ZW0gJiYgU3lzdGVtLnByb3RvdHlwZSApO1xuICAgIFNoYWRlclN5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFkZXJTeXN0ZW07XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZWFibGUgZnVuY3Rpb24gYnkgYEBwaXhpL3Vuc2FmZS1ldmFsYCB0byBzaWxlbmNlXG4gICAgICogdGhyb3dpbmcgYW4gZXJyb3IgaWYgcGxhdGZvcm0gZG9lc24ndCBzdXBwb3J0IHVuc2FmZS1ldmFscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgU2hhZGVyU3lzdGVtLnByb3RvdHlwZS5zeXN0ZW1DaGVjayA9IGZ1bmN0aW9uIHN5c3RlbUNoZWNrICgpXG4gICAge1xuICAgICAgICBpZiAoIXVuc2FmZUV2YWxTdXBwb3J0ZWQoKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IGFsbG93IHVuc2FmZS1ldmFsLCAnXG4gICAgICAgICAgICAgICAgKyAncGxlYXNlIHVzZSBAcGl4aS91bnNhZmUtZXZhbCBtb2R1bGUgdG8gZW5hYmxlIHN1cHBvcnQuJyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2hhZGVyU3lzdGVtLnByb3RvdHlwZS5jb250ZXh0Q2hhbmdlID0gZnVuY3Rpb24gY29udGV4dENoYW5nZSAoZ2wpXG4gICAge1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgY3VycmVudCBzaGFkZXIgdG8gdGhlIG9uZSBnaXZlbiBpbiBwYXJhbWV0ZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5TaGFkZXJ9IHNoYWRlciAtIHRoZSBuZXcgc2hhZGVyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBkb250U3luYyAtIGZhbHNlIGlmIHRoZSBzaGFkZXIgc2hvdWxkIGF1dG9tYXRpY2FsbHkgc3luYyBpdHMgdW5pZm9ybXMuXG4gICAgICogQHJldHVybnMge1BJWEkuR0xQcm9ncmFtfSB0aGUgZ2xQcm9ncmFtIHRoYXQgYmVsb25ncyB0byB0aGUgc2hhZGVyLlxuICAgICAqL1xuICAgIFNoYWRlclN5c3RlbS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQgKHNoYWRlciwgZG9udFN5bmMpXG4gICAge1xuICAgICAgICBzaGFkZXIudW5pZm9ybXMuZ2xvYmFscyA9IHRoaXMucmVuZGVyZXIuZ2xvYmFsVW5pZm9ybXM7XG5cbiAgICAgICAgdmFyIHByb2dyYW0gPSBzaGFkZXIucHJvZ3JhbTtcbiAgICAgICAgdmFyIGdsUHJvZ3JhbSA9IHByb2dyYW0uZ2xQcm9ncmFtc1t0aGlzLnJlbmRlcmVyLkNPTlRFWFRfVUlEXSB8fCB0aGlzLmdlbmVyYXRlU2hhZGVyKHNoYWRlcik7XG5cbiAgICAgICAgdGhpcy5zaGFkZXIgPSBzaGFkZXI7XG5cbiAgICAgICAgLy8gVE9ETyAtIHNvbWUgY3VycmVudCBQaXhpIHBsdWdpbnMgYnlwYXNzIHRoaXMuLiBzbyBpdCBub3Qgc2FmZSB0byB1c2UgeWV0Li5cbiAgICAgICAgaWYgKHRoaXMucHJvZ3JhbSAhPT0gcHJvZ3JhbSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShnbFByb2dyYW0ucHJvZ3JhbSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRvbnRTeW5jKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnN5bmNVbmlmb3JtR3JvdXAoc2hhZGVyLnVuaWZvcm1Hcm91cCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2xQcm9ncmFtO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGxvYWRzIHRoZSB1bmlmb3JtcyB2YWx1ZXMgdG8gdGhlIGN1cnJlbnRseSBib3VuZCBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdW5pZm9ybXMgLSB0aGUgdW5pZm9ybXMgdmFsdWVzIHRoYXQgYmUgYXBwbGllZCB0byB0aGUgY3VycmVudCBzaGFkZXJcbiAgICAgKi9cbiAgICBTaGFkZXJTeXN0ZW0ucHJvdG90eXBlLnNldFVuaWZvcm1zID0gZnVuY3Rpb24gc2V0VW5pZm9ybXMgKHVuaWZvcm1zKVxuICAgIHtcbiAgICAgICAgdmFyIHNoYWRlciA9IHRoaXMuc2hhZGVyLnByb2dyYW07XG4gICAgICAgIHZhciBnbFByb2dyYW0gPSBzaGFkZXIuZ2xQcm9ncmFtc1t0aGlzLnJlbmRlcmVyLkNPTlRFWFRfVUlEXTtcblxuICAgICAgICBzaGFkZXIuc3luY1VuaWZvcm1zKGdsUHJvZ3JhbS51bmlmb3JtRGF0YSwgdW5pZm9ybXMsIHRoaXMucmVuZGVyZXIpO1xuICAgIH07XG5cbiAgICBTaGFkZXJTeXN0ZW0ucHJvdG90eXBlLnN5bmNVbmlmb3JtR3JvdXAgPSBmdW5jdGlvbiBzeW5jVW5pZm9ybUdyb3VwIChncm91cClcbiAgICB7XG4gICAgICAgIHZhciBnbFByb2dyYW0gPSB0aGlzLmdldGdsUHJvZ3JhbSgpO1xuXG4gICAgICAgIGlmICghZ3JvdXAuc3RhdGljIHx8IGdyb3VwLmRpcnR5SWQgIT09IGdsUHJvZ3JhbS51bmlmb3JtR3JvdXBzW2dyb3VwLmlkXSlcbiAgICAgICAge1xuICAgICAgICAgICAgZ2xQcm9ncmFtLnVuaWZvcm1Hcm91cHNbZ3JvdXAuaWRdID0gZ3JvdXAuZGlydHlJZDtcblxuICAgICAgICAgICAgdGhpcy5zeW5jVW5pZm9ybXMoZ3JvdXAsIGdsUHJvZ3JhbSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVhYmxlIGJ5IHRoZSBAcGl4aS91bnNhZmUtZXZhbCBwYWNrYWdlIHRvIHVzZSBzdGF0aWNcbiAgICAgKiBzeW5jVW5mb3JtcyBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBTaGFkZXJTeXN0ZW0ucHJvdG90eXBlLnN5bmNVbmlmb3JtcyA9IGZ1bmN0aW9uIHN5bmNVbmlmb3JtcyAoZ3JvdXAsIGdsUHJvZ3JhbSlcbiAgICB7XG4gICAgICAgIHZhciBzeW5jRnVuYyA9IGdyb3VwLnN5bmNVbmlmb3Jtc1t0aGlzLnNoYWRlci5wcm9ncmFtLmlkXSB8fCB0aGlzLmNyZWF0ZVN5bmNHcm91cHMoZ3JvdXApO1xuXG4gICAgICAgIHN5bmNGdW5jKGdsUHJvZ3JhbS51bmlmb3JtRGF0YSwgZ3JvdXAudW5pZm9ybXMsIHRoaXMucmVuZGVyZXIpO1xuICAgIH07XG5cbiAgICBTaGFkZXJTeXN0ZW0ucHJvdG90eXBlLmNyZWF0ZVN5bmNHcm91cHMgPSBmdW5jdGlvbiBjcmVhdGVTeW5jR3JvdXBzIChncm91cClcbiAgICB7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuZ2V0U2lnbmF0dXJlKGdyb3VwLCB0aGlzLnNoYWRlci5wcm9ncmFtLnVuaWZvcm1EYXRhKTtcblxuICAgICAgICBpZiAoIXRoaXMuY2FjaGVbaWRdKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlW2lkXSA9IGdlbmVyYXRlVW5pZm9ybXNTeW5jKGdyb3VwLCB0aGlzLnNoYWRlci5wcm9ncmFtLnVuaWZvcm1EYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdyb3VwLnN5bmNVbmlmb3Jtc1t0aGlzLnNoYWRlci5wcm9ncmFtLmlkXSA9IHRoaXMuY2FjaGVbaWRdO1xuXG4gICAgICAgIHJldHVybiBncm91cC5zeW5jVW5pZm9ybXNbdGhpcy5zaGFkZXIucHJvZ3JhbS5pZF07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRha2VzIGEgdW5pZm9ybSBncm91cCBhbmQgZGF0YSBhbmQgZ2VuZXJhdGVzIGEgdW5pcXVlIHNpZ25hdHVyZSBmb3IgdGhlbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5Vbmlmb3JtR3JvdXB9IGdyb3VwIHRoZSB1bmlmb3JtIGdyb3VwIHRvIGdldCBzaWduYXR1cmUgb2ZcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdW5pZm9ybURhdGEgdW5pZm9ybSBpbmZvcm1hdGlvbiBnZW5lcmF0ZWQgYnkgdGhlIHNoYWRlclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IFVuaXF1ZSBzaWduYXR1cmUgb2YgdGhlIHVuaWZvcm0gZ3JvdXBcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFNoYWRlclN5c3RlbS5wcm90b3R5cGUuZ2V0U2lnbmF0dXJlID0gZnVuY3Rpb24gZ2V0U2lnbmF0dXJlIChncm91cCwgdW5pZm9ybURhdGEpXG4gICAge1xuICAgICAgICB2YXIgdW5pZm9ybXMgPSBncm91cC51bmlmb3JtcztcblxuICAgICAgICB2YXIgc3RyaW5ncyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgaW4gdW5pZm9ybXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHN0cmluZ3MucHVzaChpKTtcblxuICAgICAgICAgICAgaWYgKHVuaWZvcm1EYXRhW2ldKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZ3MucHVzaCh1bmlmb3JtRGF0YVtpXS50eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHJpbmdzLmpvaW4oJy0nKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyBHTFNoYWRlIHJvZiB0aGUgY3VycmVudGx5IGJvdW5kIHNoYWRlci5cbiAgICAgKiBUaGlzIGNhbiBiZSBoYW5keSBmb3Igd2hlbiB5b3UgdG8gaGF2ZSBhIGxpdHRsZSBtb3JlIGNvbnRyb2wgb3ZlciB0aGUgc2V0dGluZyBvZiB5b3VyIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UElYSS5HTFByb2dyYW19IHRoZSBnbFByb2dyYW0gZm9yIHRoZSBjdXJyZW50bHkgYm91bmQgU2hhZGVyIGZvciB0aGlzIGNvbnRleHRcbiAgICAgKi9cbiAgICBTaGFkZXJTeXN0ZW0ucHJvdG90eXBlLmdldGdsUHJvZ3JhbSA9IGZ1bmN0aW9uIGdldGdsUHJvZ3JhbSAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuc2hhZGVyKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaGFkZXIucHJvZ3JhbS5nbFByb2dyYW1zW3RoaXMucmVuZGVyZXIuQ09OVEVYVF9VSURdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIGdsUHJvZ3JhbSB2ZXJzaW9uIG9mIHRoZSBTaGFkZXIgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7UElYSS5TaGFkZXJ9IHNoYWRlciB0aGUgc2hhZGVyIHRoYXQgdGhlIGdsUHJvZ3JhbSB3aWxsIGJlIGJhc2VkIG9uLlxuICAgICAqIEByZXR1cm4ge1BJWEkuR0xQcm9ncmFtfSBBIHNoaW55IG5ldyBnbFByb2dyYW0hXG4gICAgICovXG4gICAgU2hhZGVyU3lzdGVtLnByb3RvdHlwZS5nZW5lcmF0ZVNoYWRlciA9IGZ1bmN0aW9uIGdlbmVyYXRlU2hhZGVyIChzaGFkZXIpXG4gICAge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgIHZhciBwcm9ncmFtID0gc2hhZGVyLnByb2dyYW07XG5cbiAgICAgICAgdmFyIGF0dHJpYk1hcCA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGkgaW4gcHJvZ3JhbS5hdHRyaWJ1dGVEYXRhKVxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJNYXBbaV0gPSBwcm9ncmFtLmF0dHJpYnV0ZURhdGFbaV0ubG9jYXRpb247XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hhZGVyUHJvZ3JhbSA9IGNvbXBpbGVQcm9ncmFtKGdsLCBwcm9ncmFtLnZlcnRleFNyYywgcHJvZ3JhbS5mcmFnbWVudFNyYywgYXR0cmliTWFwKTtcbiAgICAgICAgdmFyIHVuaWZvcm1EYXRhID0ge307XG5cbiAgICAgICAgZm9yICh2YXIgaSQxIGluIHByb2dyYW0udW5pZm9ybURhdGEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gcHJvZ3JhbS51bmlmb3JtRGF0YVtpJDFdO1xuXG4gICAgICAgICAgICB1bmlmb3JtRGF0YVtpJDFdID0ge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgaSQxKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGVmYXVsdFZhbHVlKGRhdGEudHlwZSwgZGF0YS5zaXplKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ2xQcm9ncmFtID0gbmV3IEdMUHJvZ3JhbShzaGFkZXJQcm9ncmFtLCB1bmlmb3JtRGF0YSk7XG5cbiAgICAgICAgcHJvZ3JhbS5nbFByb2dyYW1zW3RoaXMucmVuZGVyZXIuQ09OVEVYVF9VSURdID0gZ2xQcm9ncmFtO1xuXG4gICAgICAgIHJldHVybiBnbFByb2dyYW07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyBTaGFkZXJTeXN0ZW0gc3RhdGUsIGRvZXMgbm90IGFmZmVjdCBXZWJHTCBzdGF0ZVxuICAgICAqL1xuICAgIFNoYWRlclN5c3RlbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgdGhpcy5zaGFkZXIgPSBudWxsO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGlzIFN5c3RlbSBhbmQgcmVtb3ZlcyBhbGwgaXRzIHRleHR1cmVzXG4gICAgICovXG4gICAgU2hhZGVyU3lzdGVtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxuICAgIHtcbiAgICAgICAgLy8gVE9ETyBpbXBsZW1lbnQgZGVzdHJveSBtZXRob2QgZm9yIFNoYWRlclN5c3RlbVxuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBTaGFkZXJTeXN0ZW07XG59KFN5c3RlbSkpO1xuXG4vKipcbiAqIE1hcHMgZ2wgYmxlbmQgY29tYmluYXRpb25zIHRvIFdlYkdMLlxuICpcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAZnVuY3Rpb24gbWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gVGhlIHJlbmRlcmluZyBjb250ZXh0LlxuICogQHBhcmFtIHtudW1iZXJbXVtdfSBbYXJyYXk9W11dIC0gVGhlIGFycmF5IHRvIG91dHB1dCBpbnRvLlxuICogQHJldHVybiB7bnVtYmVyW11bXX0gTWFwcGVkIG1vZGVzLlxuICovXG5mdW5jdGlvbiBtYXBXZWJHTEJsZW5kTW9kZXNUb1BpeGkoZ2wsIGFycmF5KVxue1xuICAgIGlmICggYXJyYXkgPT09IHZvaWQgMCApIGFycmF5ID0gW107XG5cbiAgICAvLyBUT0RPIC0gcHJlbXVsdGlwbHkgYWxwaGEgd291bGQgYmUgZGlmZmVyZW50LlxuICAgIC8vIGFkZCBhIGJvb2xlYW4gZm9yIHRoYXQhXG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuTk9STUFMXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkFERF0gPSBbZ2wuT05FLCBnbC5PTkVdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLk1VTFRJUExZXSA9IFtnbC5EU1RfQ09MT1IsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuU0NSRUVOXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQ09MT1IsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuT1ZFUkxBWV0gPSBbZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5EQVJLRU5dID0gW2dsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuTElHSFRFTl0gPSBbZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5DT0xPUl9ET0RHRV0gPSBbZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5DT0xPUl9CVVJOXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkhBUkRfTElHSFRdID0gW2dsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuU09GVF9MSUdIVF0gPSBbZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5ESUZGRVJFTkNFXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkVYQ0xVU0lPTl0gPSBbZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5IVUVdID0gW2dsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuU0FUVVJBVElPTl0gPSBbZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5DT0xPUl0gPSBbZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5MVU1JTk9TSVRZXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLk5PTkVdID0gWzAsIDBdO1xuXG4gICAgLy8gbm90LXByZW11bHRpcGxpZWQgYmxlbmQgbW9kZXNcbiAgICBhcnJheVtCTEVORF9NT0RFUy5OT1JNQUxfTlBNXSA9IFtnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuQUREX05QTV0gPSBbZ2wuU1JDX0FMUEhBLCBnbC5PTkUsIGdsLk9ORSwgZ2wuT05FXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5TQ1JFRU5fTlBNXSA9IFtnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQ09MT1IsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG5cbiAgICAvLyBjb21wb3NpdGUgb3BlcmF0aW9uc1xuICAgIGFycmF5W0JMRU5EX01PREVTLlNSQ19JTl0gPSBbZ2wuRFNUX0FMUEhBLCBnbC5aRVJPXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5TUkNfT1VUXSA9IFtnbC5PTkVfTUlOVVNfRFNUX0FMUEhBLCBnbC5aRVJPXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5TUkNfQVRPUF0gPSBbZ2wuRFNUX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5EU1RfT1ZFUl0gPSBbZ2wuT05FX01JTlVTX0RTVF9BTFBIQSwgZ2wuT05FXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5EU1RfSU5dID0gW2dsLlpFUk8sIGdsLlNSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuRFNUX09VVF0gPSBbZ2wuWkVSTywgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuRFNUX0FUT1BdID0gW2dsLk9ORV9NSU5VU19EU1RfQUxQSEEsIGdsLlNSQ19BTFBIQV07XG5cbiAgICAvLyBTVUJUUkFDVCBmcm9tIGZsYXNoXG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuU1VCVFJBQ1RdID0gW2dsLk9ORSwgZ2wuT05FLCBnbC5PTkUsIGdsLk9ORSwgZ2wuRlVOQ19SRVZFUlNFX1NVQlRSQUNULCBnbC5GVU5DX0FERF07XG5cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbnZhciBCTEVORCQxID0gMDtcbnZhciBPRkZTRVQkMSA9IDE7XG52YXIgQ1VMTElORyQxID0gMjtcbnZhciBERVBUSF9URVNUJDEgPSAzO1xudmFyIFdJTkRJTkckMSA9IDQ7XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIFdlYkdMIHN0YXRlIG1hY2hpbmVzLlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5TeXN0ZW1cbiAqIEBtZW1iZXJvZiBQSVhJLnN5c3RlbXNcbiAqL1xudmFyIFN0YXRlU3lzdGVtID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU3lzdGVtKSB7XG4gICAgZnVuY3Rpb24gU3RhdGVTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdMIGNvbnRleHRcbiAgICAgICAgICogQG1lbWJlciB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2wgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdGF0ZSBJRFxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGF0ZUlkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUG9seWdvbiBvZmZzZXRcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucG9seWdvbk9mZnNldCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJsZW5kIG1vZGVcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCBQSVhJLkJMRU5EX01PREVTLk5PTkVcbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJsZW5kTW9kZSA9IEJMRU5EX01PREVTLk5PTkU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgY3VycmVudCBibGVuZCBlcXVhdGlvbiBpcyBkaWZmZXJlbnRcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYmxlbmRFcSA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2xsZWN0aW9uIG9mIGNhbGxzXG4gICAgICAgICAqIEBtZW1iZXIge2Z1bmN0aW9uW119XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXAgPSBbXTtcblxuICAgICAgICAvLyBtYXAgZnVuY3Rpb25zIGZvciB3aGVuIHdlIHNldCBzdGF0ZS4uXG4gICAgICAgIHRoaXMubWFwW0JMRU5EJDFdID0gdGhpcy5zZXRCbGVuZDtcbiAgICAgICAgdGhpcy5tYXBbT0ZGU0VUJDFdID0gdGhpcy5zZXRPZmZzZXQ7XG4gICAgICAgIHRoaXMubWFwW0NVTExJTkckMV0gPSB0aGlzLnNldEN1bGxGYWNlO1xuICAgICAgICB0aGlzLm1hcFtERVBUSF9URVNUJDFdID0gdGhpcy5zZXREZXB0aFRlc3Q7XG4gICAgICAgIHRoaXMubWFwW1dJTkRJTkckMV0gPSB0aGlzLnNldEZyb250RmFjZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29sbGVjdGlvbiBvZiBjaGVjayBjYWxsc1xuICAgICAgICAgKiBAbWVtYmVyIHtmdW5jdGlvbltdfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2hlY2tzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmF1bHQgV2ViR0wgU3RhdGVcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5TdGF0ZX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlZmF1bHRTdGF0ZSA9IG5ldyBTdGF0ZSgpO1xuICAgICAgICB0aGlzLmRlZmF1bHRTdGF0ZS5ibGVuZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVmYXVsdFN0YXRlLmRlcHRoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIFN5c3RlbSApIFN0YXRlU3lzdGVtLl9fcHJvdG9fXyA9IFN5c3RlbTtcbiAgICBTdGF0ZVN5c3RlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTeXN0ZW0gJiYgU3lzdGVtLnByb3RvdHlwZSApO1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN0YXRlU3lzdGVtO1xuXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLmNvbnRleHRDaGFuZ2UgPSBmdW5jdGlvbiBjb250ZXh0Q2hhbmdlIChnbClcbiAgICB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcblxuICAgICAgICB0aGlzLmJsZW5kTW9kZXMgPSBtYXBXZWJHTEJsZW5kTW9kZXNUb1BpeGkoZ2wpO1xuXG4gICAgICAgIHRoaXMuc2V0KHRoaXMuZGVmYXVsdFN0YXRlKTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gc3RhdGUgLSBUaGUgc3RhdGUgdG8gc2V0LlxuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQgKHN0YXRlKVxuICAgIHtcbiAgICAgICAgc3RhdGUgPSBzdGF0ZSB8fCB0aGlzLmRlZmF1bHRTdGF0ZTtcblxuICAgICAgICAvLyBUT0RPIG1heWJlIHRvIGFuIG9iamVjdCBjaGVjaz8gKCB0aGlzLnN0YXRlID09PSBzdGF0ZSApP1xuICAgICAgICBpZiAodGhpcy5zdGF0ZUlkICE9PSBzdGF0ZS5kYXRhKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZGlmZiA9IHRoaXMuc3RhdGVJZCBeIHN0YXRlLmRhdGE7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgICAgIC8vIG9yZGVyIGZyb20gbGVhc3QgdG8gbW9zdCBjb21tb25cbiAgICAgICAgICAgIHdoaWxlIChkaWZmKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChkaWZmICYgMSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHN0YXRlIGNoYW5nZSFcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBbaV0uY2FsbCh0aGlzLCAhIShzdGF0ZS5kYXRhICYgKDEgPDwgaSkpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkaWZmID0gZGlmZiA+PiAxO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zdGF0ZUlkID0gc3RhdGUuZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJhc2VkIG9uIHRoZSBhYm92ZSBzZXR0aW5ncyB3ZSBjaGVjayBmb3Igc3BlY2lmaWMgbW9kZXMuLlxuICAgICAgICAvLyBmb3IgZXhhbXBsZSBpZiBibGVuZCBpcyBhY3RpdmUgd2UgY2hlY2sgYW5kIHNldCB0aGUgYmxlbmQgbW9kZXNcbiAgICAgICAgLy8gb3Igb2YgcG9seWdvbiBvZmZzZXQgaXMgYWN0aXZlIHdlIGNoZWNrIHRoZSBwb2x5IGRlcHRoLlxuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCB0aGlzLmNoZWNrcy5sZW5ndGg7IGkkMSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrc1tpJDFdKHRoaXMsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGF0ZSwgd2hlbiBwcmV2aW91cyBzdGF0ZSBpcyB1bmtub3duXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHN0YXRlIC0gVGhlIHN0YXRlIHRvIHNldFxuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZS5mb3JjZVN0YXRlID0gZnVuY3Rpb24gZm9yY2VTdGF0ZSAoc3RhdGUpXG4gICAge1xuICAgICAgICBzdGF0ZSA9IHN0YXRlIHx8IHRoaXMuZGVmYXVsdFN0YXRlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubWFwLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLm1hcFtpXS5jYWxsKHRoaXMsICEhKHN0YXRlLmRhdGEgJiAoMSA8PCBpKSkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHRoaXMuY2hlY2tzLmxlbmd0aDsgaSQxKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tzW2kkMV0odGhpcywgc3RhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZUlkID0gc3RhdGUuZGF0YTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBvciBkaXNhYmxlZCBibGVuZGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSBUdXJuIG9uIG9yIG9mZiB3ZWJnbCBibGVuZGluZy5cbiAgICAgKi9cbiAgICBTdGF0ZVN5c3RlbS5wcm90b3R5cGUuc2V0QmxlbmQgPSBmdW5jdGlvbiBzZXRCbGVuZCAodmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLnVwZGF0ZUNoZWNrKFN0YXRlU3lzdGVtLmNoZWNrQmxlbmRNb2RlLCB2YWx1ZSk7XG5cbiAgICAgICAgdGhpcy5nbFt2YWx1ZSA/ICdlbmFibGUnIDogJ2Rpc2FibGUnXSh0aGlzLmdsLkJMRU5EKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBvciBkaXNhYmxlIHBvbHlnb24gb2Zmc2V0IGZpbGxcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSBUdXJuIG9uIG9yIG9mZiB3ZWJnbCBwb2x5Z29uIG9mZnNldCB0ZXN0aW5nLlxuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZS5zZXRPZmZzZXQgPSBmdW5jdGlvbiBzZXRPZmZzZXQgKHZhbHVlKVxuICAgIHtcbiAgICAgICAgdGhpcy51cGRhdGVDaGVjayhTdGF0ZVN5c3RlbS5jaGVja1BvbHlnb25PZmZzZXQsIHZhbHVlKTtcblxuICAgICAgICB0aGlzLmdsW3ZhbHVlID8gJ2VuYWJsZScgOiAnZGlzYWJsZSddKHRoaXMuZ2wuUE9MWUdPTl9PRkZTRVRfRklMTCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciB0byBlbmFibGUgb3IgZGlzYWJsZSBkZXB0aCB0ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIGRlcHRoIHRlc3RpbmcuXG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLnNldERlcHRoVGVzdCA9IGZ1bmN0aW9uIHNldERlcHRoVGVzdCAodmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLmdsW3ZhbHVlID8gJ2VuYWJsZScgOiAnZGlzYWJsZSddKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciB0byBlbmFibGUgb3IgZGlzYWJsZSBjdWxsIGZhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIC0gVHVybiBvbiBvciBvZmYgd2ViZ2wgY3VsbCBmYWNlLlxuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZS5zZXRDdWxsRmFjZSA9IGZ1bmN0aW9uIHNldEN1bGxGYWNlICh2YWx1ZSlcbiAgICB7XG4gICAgICAgIHRoaXMuZ2xbdmFsdWUgPyAnZW5hYmxlJyA6ICdkaXNhYmxlJ10odGhpcy5nbC5DVUxMX0ZBQ0UpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnbCBmcm9udCBmYWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIHRydWUgaXMgY2xvY2t3aXNlIGFuZCBmYWxzZSBpcyBjb3VudGVyLWNsb2Nrd2lzZVxuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZS5zZXRGcm9udEZhY2UgPSBmdW5jdGlvbiBzZXRGcm9udEZhY2UgKHZhbHVlKVxuICAgIHtcbiAgICAgICAgdGhpcy5nbC5mcm9udEZhY2UodGhpcy5nbFt2YWx1ZSA/ICdDVycgOiAnQ0NXJ10pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBibGVuZCBtb2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIGJsZW5kIG1vZGUgdG8gc2V0IHRvLlxuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZS5zZXRCbGVuZE1vZGUgPSBmdW5jdGlvbiBzZXRCbGVuZE1vZGUgKHZhbHVlKVxuICAgIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB0aGlzLmJsZW5kTW9kZSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ibGVuZE1vZGUgPSB2YWx1ZTtcblxuICAgICAgICB2YXIgbW9kZSA9IHRoaXMuYmxlbmRNb2Rlc1t2YWx1ZV07XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgICAgICAgaWYgKG1vZGUubGVuZ3RoID09PSAyKVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC5ibGVuZEZ1bmMobW9kZVswXSwgbW9kZVsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC5ibGVuZEZ1bmNTZXBhcmF0ZShtb2RlWzBdLCBtb2RlWzFdLCBtb2RlWzJdLCBtb2RlWzNdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZS5sZW5ndGggPT09IDYpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2JsZW5kRXEgPSB0cnVlO1xuICAgICAgICAgICAgZ2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKG1vZGVbNF0sIG1vZGVbNV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2JsZW5kRXEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2JsZW5kRXEgPSBmYWxzZTtcbiAgICAgICAgICAgIGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZShnbC5GVU5DX0FERCwgZ2wuRlVOQ19BREQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBvbHlnb24gb2Zmc2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdGhlIHBvbHlnb24gb2Zmc2V0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlIC0gdGhlIHBvbHlnb24gb2Zmc2V0IHNjYWxlXG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLnNldFBvbHlnb25PZmZzZXQgPSBmdW5jdGlvbiBzZXRQb2x5Z29uT2Zmc2V0ICh2YWx1ZSwgc2NhbGUpXG4gICAge1xuICAgICAgICB0aGlzLmdsLnBvbHlnb25PZmZzZXQodmFsdWUsIHNjYWxlKTtcbiAgICB9O1xuXG4gICAgLy8gdXNlZFxuICAgIC8qKlxuICAgICAqIFJlc2V0cyBhbGwgdGhlIGxvZ2ljIGFuZCBkaXNhYmxlcyB0aGUgdmFvc1xuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0ICgpXG4gICAge1xuICAgICAgICB0aGlzLmdsLnBpeGVsU3RvcmVpKHRoaXMuZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuZm9yY2VTdGF0ZSgwKTtcblxuICAgICAgICB0aGlzLl9ibGVuZEVxID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ibGVuZE1vZGUgPSAtMTtcbiAgICAgICAgdGhpcy5zZXRCbGVuZE1vZGUoMCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGNoZWNrcyB0byBzZWUgd2hpY2ggdXBkYXRlcyBzaG91bGQgYmUgY2hlY2tlZCBiYXNlZCBvbiB3aGljaCBzZXR0aW5ncyBoYXZlIGJlZW4gYWN0aXZhdGVkLlxuICAgICAqIEZvciBleGFtcGxlLCBpZiBibGVuZCBpcyBlbmFibGVkIHRoZW4gd2Ugc2hvdWxkIGNoZWNrIHRoZSBibGVuZCBtb2RlcyBlYWNoIHRpbWUgdGhlIHN0YXRlIGlzIGNoYW5nZWRcbiAgICAgKiBvciBpZiBwb2x5Z29uIGZpbGwgaXMgYWN0aXZhdGVkIHRoZW4gd2UgbmVlZCB0byBjaGVjayBpZiB0aGUgcG9seWdvbiBvZmZzZXQgY2hhbmdlcy5cbiAgICAgKiBUaGUgaWRlYSBpcyB0aGF0IHdlIG9ubHkgY2hlY2sgd2hhdCB3ZSBoYXZlIHRvby5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgIHRoZSBjaGVja2luZyBmdW5jdGlvbiB0byBhZGQgb3IgcmVtb3ZlXG4gICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAgc2hvdWxkIHRoZSBjaGVjayBmdW5jdGlvbiBiZSBhZGRlZCBvciByZW1vdmVkLlxuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZS51cGRhdGVDaGVjayA9IGZ1bmN0aW9uIHVwZGF0ZUNoZWNrIChmdW5jLCB2YWx1ZSlcbiAgICB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuY2hlY2tzLmluZGV4T2YoZnVuYyk7XG5cbiAgICAgICAgaWYgKHZhbHVlICYmIGluZGV4ID09PSAtMSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5jaGVja3MucHVzaChmdW5jKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdmFsdWUgJiYgaW5kZXggIT09IC0xKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgcHJpdmF0ZSBsaXR0bGUgd3JhcHBlciBmdW5jdGlvbiB0aGF0IHdlIGNhbGwgdG8gY2hlY2sgdGhlIGJsZW5kIG1vZGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1BJWEkuU3RhdGVTeXN0ZW19IFN5c3RlbSAgdGhlIFN5c3RlbSB0byBwZXJmb3JtIHRoZSBzdGF0ZSBjaGVjayBvblxuICAgICAqIEBwYXJhbSB7UElYSS5TdGF0ZX0gc3RhdGUgIHRoZSBzdGF0ZSB0aGF0IHRoZSBibGVuZE1vZGUgd2lsbCBwdWxsZWQgZnJvbVxuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLmNoZWNrQmxlbmRNb2RlID0gZnVuY3Rpb24gY2hlY2tCbGVuZE1vZGUgKHN5c3RlbSwgc3RhdGUpXG4gICAge1xuICAgICAgICBzeXN0ZW0uc2V0QmxlbmRNb2RlKHN0YXRlLmJsZW5kTW9kZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgcHJpdmF0ZSBsaXR0bGUgd3JhcHBlciBmdW5jdGlvbiB0aGF0IHdlIGNhbGwgdG8gY2hlY2sgdGhlIHBvbHlnb24gb2Zmc2V0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtQSVhJLlN0YXRlU3lzdGVtfSBTeXN0ZW0gIHRoZSBTeXN0ZW0gdG8gcGVyZm9ybSB0aGUgc3RhdGUgY2hlY2sgb25cbiAgICAgKiBAcGFyYW0ge1BJWEkuU3RhdGV9IHN0YXRlICB0aGUgc3RhdGUgdGhhdCB0aGUgYmxlbmRNb2RlIHdpbGwgcHVsbGVkIGZyb21cbiAgICAgKi9cbiAgICBTdGF0ZVN5c3RlbS5jaGVja1BvbHlnb25PZmZzZXQgPSBmdW5jdGlvbiBjaGVja1BvbHlnb25PZmZzZXQgKHN5c3RlbSwgc3RhdGUpXG4gICAge1xuICAgICAgICBzeXN0ZW0uc2V0UG9seWdvbk9mZnNldChzdGF0ZS5wb2x5Z29uT2Zmc2V0LCAwKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN0YXRlU3lzdGVtO1xufShTeXN0ZW0pKTtcblxuLyoqXG4gKiBTeXN0ZW0gcGx1Z2luIHRvIHRoZSByZW5kZXJlciB0byBtYW5hZ2UgdGV4dHVyZSBnYXJiYWdlIGNvbGxlY3Rpb24gb24gdGhlIEdQVSxcbiAqIGVuc3VyaW5nIHRoYXQgaXQgZG9lcyBub3QgZ2V0IGNsb2dnZWQgdXAgd2l0aCB0ZXh0dXJlcyB0aGF0IGFyZSBubyBsb25nZXIgYmVpbmcgdXNlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJLnN5c3RlbXNcbiAqIEBleHRlbmRzIFBJWEkuU3lzdGVtXG4gKi9cbnZhciBUZXh0dXJlR0NTeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBUZXh0dXJlR0NTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvdW50XG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgY291bnRcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2hlY2tDb3VudCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1heGltdW0gaWRsZSB0aW1lLCBpbiBzZWNvbmRzXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHNlZSBQSVhJLnNldHRpbmdzLkdDX01BWF9JRExFXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1heElkbGUgPSBzZXR0aW5ncy5HQ19NQVhfSURMRTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWF4aW11bSBudW1iZXIgb2YgaXRlbSB0byBjaGVja1xuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBzZWUgUElYSS5zZXR0aW5ncy5HQ19NQVhfQ0hFQ0tfQ09VTlRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2hlY2tDb3VudE1heCA9IHNldHRpbmdzLkdDX01BWF9DSEVDS19DT1VOVDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudCBnYXJhYmFnZSBjb2xsZWN0aW9uIG1vZGVcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5HQ19NT0RFU31cbiAgICAgICAgICogQHNlZSBQSVhJLnNldHRpbmdzLkdDX01PREVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubW9kZSA9IHNldHRpbmdzLkdDX01PREU7XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBUZXh0dXJlR0NTeXN0ZW0uX19wcm90b19fID0gU3lzdGVtO1xuICAgIFRleHR1cmVHQ1N5c3RlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTeXN0ZW0gJiYgU3lzdGVtLnByb3RvdHlwZSApO1xuICAgIFRleHR1cmVHQ1N5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXh0dXJlR0NTeXN0ZW07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdG8gc2VlIHdoZW4gdGhlIGxhc3QgdGltZSBhIHRleHR1cmUgd2FzIHVzZWRcbiAgICAgKiBpZiB0aGUgdGV4dHVyZSBoYXMgbm90IGJlZW4gdXNlZCBmb3IgYSBzcGVjaWZpZWQgYW1vdW50IG9mIHRpbWUgaXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIEdQVVxuICAgICAqL1xuICAgIFRleHR1cmVHQ1N5c3RlbS5wcm90b3R5cGUucG9zdHJlbmRlciA9IGZ1bmN0aW9uIHBvc3RyZW5kZXIgKClcbiAgICB7XG4gICAgICAgIHRoaXMuY291bnQrKztcblxuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBHQ19NT0RFUy5NQU5VQUwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hlY2tDb3VudCsrO1xuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ291bnQgPiB0aGlzLmNoZWNrQ291bnRNYXgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tDb3VudCA9IDA7XG5cbiAgICAgICAgICAgIHRoaXMucnVuKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRvIHNlZSB3aGVuIHRoZSBsYXN0IHRpbWUgYSB0ZXh0dXJlIHdhcyB1c2VkXG4gICAgICogaWYgdGhlIHRleHR1cmUgaGFzIG5vdCBiZWVuIHVzZWQgZm9yIGEgc3BlY2lmaWVkIGFtb3VudCBvZiB0aW1lIGl0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBHUFVcbiAgICAgKi9cbiAgICBUZXh0dXJlR0NTeXN0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKVxuICAgIHtcbiAgICAgICAgdmFyIHRtID0gdGhpcy5yZW5kZXJlci50ZXh0dXJlO1xuICAgICAgICB2YXIgbWFuYWdlZFRleHR1cmVzID0gIHRtLm1hbmFnZWRUZXh0dXJlcztcbiAgICAgICAgdmFyIHdhc1JlbW92ZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hbmFnZWRUZXh0dXJlcy5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHRleHR1cmUgPSBtYW5hZ2VkVGV4dHVyZXNbaV07XG5cbiAgICAgICAgICAgIC8vIG9ubHkgc3VwcG9ydHMgbm9uIGdlbmVyYXRlZCB0ZXh0dXJlcyBhdCB0aGUgbW9tZW50IVxuICAgICAgICAgICAgaWYgKCF0ZXh0dXJlLmZyYW1lYnVmZmVyICYmIHRoaXMuY291bnQgLSB0ZXh0dXJlLnRvdWNoZWQgPiB0aGlzLm1heElkbGUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG0uZGVzdHJveVRleHR1cmUodGV4dHVyZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbWFuYWdlZFRleHR1cmVzW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICB3YXNSZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3YXNSZW1vdmVkKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgaiA9IDA7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IG1hbmFnZWRUZXh0dXJlcy5sZW5ndGg7IGkkMSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChtYW5hZ2VkVGV4dHVyZXNbaSQxXSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZWRUZXh0dXJlc1tqKytdID0gbWFuYWdlZFRleHR1cmVzW2kkMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYW5hZ2VkVGV4dHVyZXMubGVuZ3RoID0gajtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCB0aGUgdGV4dHVyZXMgd2l0aGluIHRoZSBzcGVjaWZpZWQgZGlzcGxheU9iamVjdCBhbmQgaXRzIGNoaWxkcmVuIGZyb20gdGhlIEdQVVxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IGRpc3BsYXlPYmplY3QgLSB0aGUgZGlzcGxheU9iamVjdCB0byByZW1vdmUgdGhlIHRleHR1cmVzIGZyb20uXG4gICAgICovXG4gICAgVGV4dHVyZUdDU3lzdGVtLnByb3RvdHlwZS51bmxvYWQgPSBmdW5jdGlvbiB1bmxvYWQgKGRpc3BsYXlPYmplY3QpXG4gICAge1xuICAgICAgICB2YXIgdG0gPSB0aGlzLnJlbmRlcmVyLnRleHR1cmVTeXN0ZW07XG5cbiAgICAgICAgLy8gb25seSBkZXN0cm95IG5vbiBnZW5lcmF0ZWQgdGV4dHVyZXNcbiAgICAgICAgaWYgKGRpc3BsYXlPYmplY3QuX3RleHR1cmUgJiYgZGlzcGxheU9iamVjdC5fdGV4dHVyZS5fZ2xSZW5kZXJUYXJnZXRzKVxuICAgICAgICB7XG4gICAgICAgICAgICB0bS5kZXN0cm95VGV4dHVyZShkaXNwbGF5T2JqZWN0Ll90ZXh0dXJlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSBkaXNwbGF5T2JqZWN0LmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnVubG9hZChkaXNwbGF5T2JqZWN0LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gVGV4dHVyZUdDU3lzdGVtO1xufShTeXN0ZW0pKTtcblxuLyoqXG4gKiBJbnRlcm5hbCB0ZXh0dXJlIGZvciBXZWJHTCBjb250ZXh0XG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBHTFRleHR1cmUgPSBmdW5jdGlvbiBHTFRleHR1cmUodGV4dHVyZSlcbntcbiAgICAvKipcbiAgICAgKiBUaGUgV2ViR0wgdGV4dHVyZVxuICAgICAqIEBtZW1iZXIge1dlYkdMVGV4dHVyZX1cbiAgICAgKi9cbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuXG4gICAgLyoqXG4gICAgICogV2lkdGggb2YgdGV4dHVyZSB0aGF0IHdhcyB1c2VkIGluIHRleEltYWdlMkRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy53aWR0aCA9IC0xO1xuXG4gICAgLyoqXG4gICAgICogSGVpZ2h0IG9mIHRleHR1cmUgdGhhdCB3YXMgdXNlZCBpbiB0ZXhJbWFnZTJEXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuaGVpZ2h0ID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBUZXh0dXJlIGNvbnRlbnRzIGRpcnR5IGZsYWdcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5kaXJ0eUlkID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBUZXh0dXJlIHN0eWxlIGRpcnR5IGZsYWdcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5kaXJ0eVN0eWxlSWQgPSAtMTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgbWlwIGxldmVscyBoYXMgdG8gYmUgZ2VuZXJhdGVkXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLm1pcG1hcCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogV3JhcE1vZGUgY29waWVkIGZyb20gYmFzZVRleHR1cmVcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy53cmFwTW9kZSA9IDMzMDcxO1xuXG4gICAgLyoqXG4gICAgICogVHlwZSBjb3BpZWQgZnJvbSBiYXNlVGV4dHVyZVxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSA2NDA4O1xuXG4gICAgLyoqXG4gICAgICogVHlwZSBjb3BpZWQgZnJvbSBiYXNlVGV4dHVyZVxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmludGVybmFsRm9ybWF0ID0gNTEyMTtcbn07XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIHRleHR1cmVzLlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5TeXN0ZW1cbiAqIEBtZW1iZXJvZiBQSVhJLnN5c3RlbXNcbiAqL1xudmFyIFRleHR1cmVTeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBUZXh0dXJlU3lzdGVtKHJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgU3lzdGVtLmNhbGwodGhpcywgcmVuZGVyZXIpO1xuXG4gICAgICAgIC8vIFRPRE8gc2V0IHRvIG1heCB0ZXh0dXJlcy4uLlxuICAgICAgICAvKipcbiAgICAgICAgICogQm91bmQgdGV4dHVyZXNcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5CYXNlVGV4dHVyZVtdfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYm91bmRUZXh0dXJlcyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudCBsb2NhdGlvblxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jdXJyZW50TG9jYXRpb24gPSAtMTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTGlzdCBvZiBtYW5hZ2VkIHRleHR1cmVzXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuQmFzZVRleHR1cmVbXX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1hbmFnZWRUZXh0dXJlcyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaWQgc29tZW9uZSB0ZW1wZXIgd2l0aCB0ZXh0dXJlcyBzdGF0ZT8gV2UnbGwgb3ZlcndyaXRlIHRoZW0gd2hlbiB3ZSBuZWVkIHRvIHVuYmluZCBzb21ldGhpbmcuXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl91bmtub3duQm91bmRUZXh0dXJlcyA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCYXNlVGV4dHVyZSB2YWx1ZSB0aGF0IHNob3dzIHRoYXQgd2UgZG9uJ3Qga25vdyB3aGF0IGlzIGJvdW5kXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuQmFzZVRleHR1cmV9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51bmtub3duVGV4dHVyZSA9IG5ldyBCYXNlVGV4dHVyZSgpO1xuICAgIH1cblxuICAgIGlmICggU3lzdGVtICkgVGV4dHVyZVN5c3RlbS5fX3Byb3RvX18gPSBTeXN0ZW07XG4gICAgVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTeXN0ZW0gJiYgU3lzdGVtLnByb3RvdHlwZSApO1xuICAgIFRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV4dHVyZVN5c3RlbTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdXAgdGhlIHJlbmRlcmVyIGNvbnRleHQgYW5kIG5lY2Vzc2FyeSBidWZmZXJzLlxuICAgICAqL1xuICAgIFRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLmNvbnRleHRDaGFuZ2UgPSBmdW5jdGlvbiBjb250ZXh0Q2hhbmdlICgpXG4gICAge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsID0gdGhpcy5yZW5kZXJlci5nbDtcblxuICAgICAgICB0aGlzLkNPTlRFWFRfVUlEID0gdGhpcy5yZW5kZXJlci5DT05URVhUX1VJRDtcblxuICAgICAgICB0aGlzLndlYkdMVmVyc2lvbiA9IHRoaXMucmVuZGVyZXIuY29udGV4dC53ZWJHTFZlcnNpb247XG5cbiAgICAgICAgdmFyIG1heFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTKTtcblxuICAgICAgICB0aGlzLmJvdW5kVGV4dHVyZXMubGVuZ3RoID0gbWF4VGV4dHVyZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhUZXh0dXJlczsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmJvdW5kVGV4dHVyZXNbaV0gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETyBtb3ZlIHRoaXMuLiB0byBhIG5pY2UgbWFrZSBlbXB0eSB0ZXh0dXJlcyBjbGFzcy4uXG4gICAgICAgIHRoaXMuZW1wdHlUZXh0dXJlcyA9IHt9O1xuXG4gICAgICAgIHZhciBlbXB0eVRleHR1cmUyRCA9IG5ldyBHTFRleHR1cmUoZ2wuY3JlYXRlVGV4dHVyZSgpKTtcblxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBlbXB0eVRleHR1cmUyRC50ZXh0dXJlKTtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCAxLCAxLCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBuZXcgVWludDhBcnJheSg0KSk7XG5cbiAgICAgICAgdGhpcy5lbXB0eVRleHR1cmVzW2dsLlRFWFRVUkVfMkRdID0gZW1wdHlUZXh0dXJlMkQ7XG4gICAgICAgIHRoaXMuZW1wdHlUZXh0dXJlc1tnbC5URVhUVVJFX0NVQkVfTUFQXSA9IG5ldyBHTFRleHR1cmUoZ2wuY3JlYXRlVGV4dHVyZSgpKTtcblxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFX0NVQkVfTUFQLCB0aGlzLmVtcHR5VGV4dHVyZXNbZ2wuVEVYVFVSRV9DVUJFX01BUF0udGV4dHVyZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgNjsgaSQxKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSQxLCAwLCBnbC5SR0JBLCAxLCAxLCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV9DVUJFX01BUCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfQ1VCRV9NQVAsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcblxuICAgICAgICBmb3IgKHZhciBpJDIgPSAwOyBpJDIgPCB0aGlzLmJvdW5kVGV4dHVyZXMubGVuZ3RoOyBpJDIrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5iaW5kKG51bGwsIGkkMik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQmluZCBhIHRleHR1cmUgdG8gYSBzcGVjaWZpYyBsb2NhdGlvblxuICAgICAqXG4gICAgICogSWYgeW91IHdhbnQgdG8gdW5iaW5kIHNvbWV0aGluZywgcGxlYXNlIHVzZSBgdW5iaW5kKHRleHR1cmUpYCBpbnN0ZWFkIG9mIGBiaW5kKG51bGwsIHRleHR1cmVMb2NhdGlvbilgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuVGV4dHVyZXxQSVhJLkJhc2VUZXh0dXJlfSB0ZXh0dXJlIC0gVGV4dHVyZSB0byBiaW5kXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb2NhdGlvbj0wXSAtIExvY2F0aW9uIHRvIGJpbmQgYXRcbiAgICAgKi9cbiAgICBUZXh0dXJlU3lzdGVtLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCAodGV4dHVyZSwgbG9jYXRpb24pXG4gICAge1xuICAgICAgICBpZiAoIGxvY2F0aW9uID09PSB2b2lkIDAgKSBsb2NhdGlvbiA9IDA7XG5cbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBnbCA9IHJlZi5nbDtcblxuICAgICAgICBpZiAodGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGV4dHVyZSA9IHRleHR1cmUuYmFzZVRleHR1cmUgfHwgdGV4dHVyZTtcblxuICAgICAgICAgICAgaWYgKHRleHR1cmUudmFsaWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS50b3VjaGVkID0gdGhpcy5yZW5kZXJlci50ZXh0dXJlR0MuY291bnQ7XG5cbiAgICAgICAgICAgICAgICB2YXIgZ2xUZXh0dXJlID0gdGV4dHVyZS5fZ2xUZXh0dXJlc1t0aGlzLkNPTlRFWFRfVUlEXSB8fCB0aGlzLmluaXRUZXh0dXJlKHRleHR1cmUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudExvY2F0aW9uICE9PSBsb2NhdGlvbilcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgICAgICAgICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyBsb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRUZXh0dXJlc1tsb2NhdGlvbl0gIT09IHRleHR1cmUpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBnbC5iaW5kVGV4dHVyZSh0ZXh0dXJlLnRhcmdldCwgZ2xUZXh0dXJlLnRleHR1cmUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChnbFRleHR1cmUuZGlydHlJZCAhPT0gdGV4dHVyZS5kaXJ0eUlkKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUZXh0dXJlKHRleHR1cmUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuYm91bmRUZXh0dXJlc1tsb2NhdGlvbl0gPSB0ZXh0dXJlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudExvY2F0aW9uICE9PSBsb2NhdGlvbilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICAgICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyBsb2NhdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMuZW1wdHlUZXh0dXJlc1tnbC5URVhUVVJFXzJEXS50ZXh0dXJlKTtcbiAgICAgICAgICAgIHRoaXMuYm91bmRUZXh0dXJlc1tsb2NhdGlvbl0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0ZXh0dXJlIGxvY2F0aW9uIGFuZCBib3VuZCB0ZXh0dXJlc1xuICAgICAqXG4gICAgICogQWN0dWFsIGBiaW5kKG51bGwsIGkpYCBjYWxscyB3aWxsIGJlIHBlcmZvcm1lZCBhdCBuZXh0IGB1bmJpbmQoKWAgY2FsbFxuICAgICAqL1xuICAgIFRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQgKClcbiAgICB7XG4gICAgICAgIHRoaXMuX3Vua25vd25Cb3VuZFRleHR1cmVzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jdXJyZW50TG9jYXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYm91bmRUZXh0dXJlcy5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5ib3VuZFRleHR1cmVzW2ldID0gdGhpcy51bmtub3duVGV4dHVyZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVbmJpbmQgYSB0ZXh0dXJlXG4gICAgICogQHBhcmFtIHtQSVhJLlRleHR1cmV8UElYSS5CYXNlVGV4dHVyZX0gdGV4dHVyZSAtIFRleHR1cmUgdG8gYmluZFxuICAgICAqL1xuICAgIFRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCAodGV4dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgZ2wgPSByZWYuZ2w7XG4gICAgICAgIHZhciBib3VuZFRleHR1cmVzID0gcmVmLmJvdW5kVGV4dHVyZXM7XG5cbiAgICAgICAgaWYgKHRoaXMuX3Vua25vd25Cb3VuZFRleHR1cmVzKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl91bmtub3duQm91bmRUZXh0dXJlcyA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gc29tZW9uZSBjaGFuZ2VkIHdlYkdMIHN0YXRlLFxuICAgICAgICAgICAgLy8gd2UgaGF2ZSB0byBiZSBzdXJlIHRoYXQgb3VyIHRleHR1cmUgZG9lcyBub3QgYXBwZWFyIGluIG11bHRpLXRleHR1cmUgcmVuZGVyZXIgc2FtcGxlcnNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRUZXh0dXJlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoYm91bmRUZXh0dXJlc1tpXSA9PT0gdGhpcy51bmtub3duVGV4dHVyZSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmluZChudWxsLCBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBib3VuZFRleHR1cmVzLmxlbmd0aDsgaSQxKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChib3VuZFRleHR1cmVzW2kkMV0gPT09IHRleHR1cmUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudExvY2F0aW9uICE9PSBpJDEpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgaSQxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TG9jYXRpb24gPSBpJDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5lbXB0eVRleHR1cmVzW3RleHR1cmUudGFyZ2V0XS50ZXh0dXJlKTtcbiAgICAgICAgICAgICAgICBib3VuZFRleHR1cmVzW2kkMV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgYSB0ZXh0dXJlXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gdGV4dHVyZSAtIFRleHR1cmUgdG8gaW5pdGlhbGl6ZVxuICAgICAqL1xuICAgIFRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLmluaXRUZXh0dXJlID0gZnVuY3Rpb24gaW5pdFRleHR1cmUgKHRleHR1cmUpXG4gICAge1xuICAgICAgICB2YXIgZ2xUZXh0dXJlID0gbmV3IEdMVGV4dHVyZSh0aGlzLmdsLmNyZWF0ZVRleHR1cmUoKSk7XG5cbiAgICAgICAgLy8gZ3VhcmFudGVlIGFuIHVwZGF0ZS4uXG4gICAgICAgIGdsVGV4dHVyZS5kaXJ0eUlkID0gLTE7XG5cbiAgICAgICAgdGV4dHVyZS5fZ2xUZXh0dXJlc1t0aGlzLkNPTlRFWFRfVUlEXSA9IGdsVGV4dHVyZTtcblxuICAgICAgICB0aGlzLm1hbmFnZWRUZXh0dXJlcy5wdXNoKHRleHR1cmUpO1xuICAgICAgICB0ZXh0dXJlLm9uKCdkaXNwb3NlJywgdGhpcy5kZXN0cm95VGV4dHVyZSwgdGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIGdsVGV4dHVyZTtcbiAgICB9O1xuXG4gICAgVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUuaW5pdFRleHR1cmVUeXBlID0gZnVuY3Rpb24gaW5pdFRleHR1cmVUeXBlICh0ZXh0dXJlLCBnbFRleHR1cmUpXG4gICAge1xuICAgICAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDtcbiAgICAgICAgZ2xUZXh0dXJlLnR5cGUgPSB0ZXh0dXJlLnR5cGU7XG4gICAgICAgIGlmICh0aGlzLndlYkdMVmVyc2lvbiAhPT0gMilcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBnbCA9IHRoaXMucmVuZGVyZXIuZ2w7XG5cbiAgICAgICAgaWYgKHRleHR1cmUudHlwZSA9PT0gZ2wuRkxPQVRcbiAgICAgICAgICAgICYmIHRleHR1cmUuZm9ybWF0ID09PSBnbC5SR0JBKVxuICAgICAgICB7XG4gICAgICAgICAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBMzJGO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoYXQncyBXZWJHTDEgSEFMRl9GTE9BVF9PRVNcbiAgICAgICAgLy8gd2UgaGF2ZSB0byBjb252ZXJ0IGl0IHRvIFdlYkdMIEhBTEZfRkxPQVRcbiAgICAgICAgaWYgKHRleHR1cmUudHlwZSA9PT0gVFlQRVMuSEFMRl9GTE9BVClcbiAgICAgICAge1xuICAgICAgICAgICAgZ2xUZXh0dXJlLnR5cGUgPSBnbC5IQUxGX0ZMT0FUO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnbFRleHR1cmUudHlwZSA9PT0gZ2wuSEFMRl9GTE9BVFxuICAgICAgICAgICAgJiYgdGV4dHVyZS5mb3JtYXQgPT09IGdsLlJHQkEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkExNkY7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGEgdGV4dHVyZVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IHRleHR1cmUgLSBUZXh0dXJlIHRvIGluaXRpYWxpemVcbiAgICAgKi9cbiAgICBUZXh0dXJlU3lzdGVtLnByb3RvdHlwZS51cGRhdGVUZXh0dXJlID0gZnVuY3Rpb24gdXBkYXRlVGV4dHVyZSAodGV4dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciBnbFRleHR1cmUgPSB0ZXh0dXJlLl9nbFRleHR1cmVzW3RoaXMuQ09OVEVYVF9VSURdO1xuXG4gICAgICAgIGlmICghZ2xUZXh0dXJlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXG4gICAgICAgIHRoaXMuaW5pdFRleHR1cmVUeXBlKHRleHR1cmUsIGdsVGV4dHVyZSk7XG5cbiAgICAgICAgaWYgKHRleHR1cmUucmVzb3VyY2UgJiYgdGV4dHVyZS5yZXNvdXJjZS51cGxvYWQocmVuZGVyZXIsIHRleHR1cmUsIGdsVGV4dHVyZSkpXG4gICAgICAgIDtcbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBkZWZhdWx0LCByZW5kZXJUZXh0dXJlLWxpa2UgbG9naWNcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHRleHR1cmUucmVhbFdpZHRoO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHRleHR1cmUucmVhbEhlaWdodDtcbiAgICAgICAgICAgIHZhciBnbCA9IHJlbmRlcmVyLmdsO1xuXG4gICAgICAgICAgICBpZiAoZ2xUZXh0dXJlLndpZHRoICE9PSB3aWR0aFxuICAgICAgICAgICAgICAgIHx8IGdsVGV4dHVyZS5oZWlnaHQgIT09IGhlaWdodFxuICAgICAgICAgICAgICAgIHx8IGdsVGV4dHVyZS5kaXJ0eUlkIDwgMClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnbFRleHR1cmUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICBnbFRleHR1cmUuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRCh0ZXh0dXJlLnRhcmdldCwgMCxcbiAgICAgICAgICAgICAgICAgICAgZ2xUZXh0dXJlLmludGVybmFsRm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGV0cyBvbmx5IHVwZGF0ZSB3aGF0IGNoYW5nZXMuLlxuICAgICAgICBpZiAodGV4dHVyZS5kaXJ0eVN0eWxlSWQgIT09IGdsVGV4dHVyZS5kaXJ0eVN0eWxlSWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVGV4dHVyZVN0eWxlKHRleHR1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGdsVGV4dHVyZS5kaXJ0eUlkID0gdGV4dHVyZS5kaXJ0eUlkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIHRoZSB0ZXh0dXJlIGZyb20gV2ViR0xcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfFBJWEkuVGV4dHVyZX0gdGV4dHVyZSAtIHRoZSB0ZXh0dXJlIHRvIGRlc3Ryb3lcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwUmVtb3ZlPWZhbHNlXSAtIFdoZXRoZXIgdG8gc2tpcCByZW1vdmluZyB0aGUgdGV4dHVyZSBmcm9tIHRoZSBUZXh0dXJlTWFuYWdlci5cbiAgICAgKi9cbiAgICBUZXh0dXJlU3lzdGVtLnByb3RvdHlwZS5kZXN0cm95VGV4dHVyZSA9IGZ1bmN0aW9uIGRlc3Ryb3lUZXh0dXJlICh0ZXh0dXJlLCBza2lwUmVtb3ZlKVxuICAgIHtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBnbCA9IHJlZi5nbDtcblxuICAgICAgICB0ZXh0dXJlID0gdGV4dHVyZS5iYXNlVGV4dHVyZSB8fCB0ZXh0dXJlO1xuXG4gICAgICAgIGlmICh0ZXh0dXJlLl9nbFRleHR1cmVzW3RoaXMuQ09OVEVYVF9VSURdKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZCh0ZXh0dXJlKTtcblxuICAgICAgICAgICAgZ2wuZGVsZXRlVGV4dHVyZSh0ZXh0dXJlLl9nbFRleHR1cmVzW3RoaXMuQ09OVEVYVF9VSURdLnRleHR1cmUpO1xuICAgICAgICAgICAgdGV4dHVyZS5vZmYoJ2Rpc3Bvc2UnLCB0aGlzLmRlc3Ryb3lUZXh0dXJlLCB0aGlzKTtcblxuICAgICAgICAgICAgZGVsZXRlIHRleHR1cmUuX2dsVGV4dHVyZXNbdGhpcy5DT05URVhUX1VJRF07XG5cbiAgICAgICAgICAgIGlmICghc2tpcFJlbW92ZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMubWFuYWdlZFRleHR1cmVzLmluZGV4T2YodGV4dHVyZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gLTEpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVJdGVtcyh0aGlzLm1hbmFnZWRUZXh0dXJlcywgaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0ZXh0dXJlIHN0eWxlIHN1Y2ggYXMgbWlwbWFwIGZsYWdcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSB0ZXh0dXJlIC0gVGV4dHVyZSB0byB1cGRhdGVcbiAgICAgKi9cbiAgICBUZXh0dXJlU3lzdGVtLnByb3RvdHlwZS51cGRhdGVUZXh0dXJlU3R5bGUgPSBmdW5jdGlvbiB1cGRhdGVUZXh0dXJlU3R5bGUgKHRleHR1cmUpXG4gICAge1xuICAgICAgICB2YXIgZ2xUZXh0dXJlID0gdGV4dHVyZS5fZ2xUZXh0dXJlc1t0aGlzLkNPTlRFWFRfVUlEXTtcblxuICAgICAgICBpZiAoIWdsVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCh0ZXh0dXJlLm1pcG1hcCA9PT0gTUlQTUFQX01PREVTLlBPVzIgfHwgdGhpcy53ZWJHTFZlcnNpb24gIT09IDIpICYmICF0ZXh0dXJlLmlzUG93ZXJPZlR3bylcbiAgICAgICAge1xuICAgICAgICAgICAgZ2xUZXh0dXJlLm1pcG1hcCA9IDA7XG4gICAgICAgICAgICBnbFRleHR1cmUud3JhcE1vZGUgPSBXUkFQX01PREVTLkNMQU1QO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgZ2xUZXh0dXJlLm1pcG1hcCA9IHRleHR1cmUubWlwbWFwID49IDE7XG4gICAgICAgICAgICBnbFRleHR1cmUud3JhcE1vZGUgPSB0ZXh0dXJlLndyYXBNb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRleHR1cmUucmVzb3VyY2UgJiYgdGV4dHVyZS5yZXNvdXJjZS5zdHlsZSh0aGlzLnJlbmRlcmVyLCB0ZXh0dXJlLCBnbFRleHR1cmUpKVxuICAgICAgICA7XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHlsZSh0ZXh0dXJlLCBnbFRleHR1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2xUZXh0dXJlLmRpcnR5U3R5bGVJZCA9IHRleHR1cmUuZGlydHlTdHlsZUlkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgc3R5bGUgZm9yIHRleHR1cmVcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSB0ZXh0dXJlIC0gVGV4dHVyZSB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge1BJWEkuR0xUZXh0dXJlfSBnbFRleHR1cmVcbiAgICAgKi9cbiAgICBUZXh0dXJlU3lzdGVtLnByb3RvdHlwZS5zZXRTdHlsZSA9IGZ1bmN0aW9uIHNldFN0eWxlICh0ZXh0dXJlLCBnbFRleHR1cmUpXG4gICAge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgIGlmIChnbFRleHR1cmUubWlwbWFwKVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC5nZW5lcmF0ZU1pcG1hcCh0ZXh0dXJlLnRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKHRleHR1cmUudGFyZ2V0LCBnbC5URVhUVVJFX1dSQVBfUywgZ2xUZXh0dXJlLndyYXBNb2RlKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaSh0ZXh0dXJlLnRhcmdldCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsVGV4dHVyZS53cmFwTW9kZSk7XG5cbiAgICAgICAgaWYgKGdsVGV4dHVyZS5taXBtYXApXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGV4dHVyZS50YXJnZXQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgdGV4dHVyZS5zY2FsZU1vZGUgPyBnbC5MSU5FQVJfTUlQTUFQX0xJTkVBUiA6IGdsLk5FQVJFU1RfTUlQTUFQX05FQVJFU1QpO1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG4gICAgICAgICAgICB2YXIgYW5pc290cm9waWNFeHQgPSB0aGlzLnJlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucy5hbmlzb3Ryb3BpY0ZpbHRlcmluZztcblxuICAgICAgICAgICAgaWYgKGFuaXNvdHJvcGljRXh0ICYmIHRleHR1cmUuYW5pc290cm9waWNMZXZlbCA+IDAgJiYgdGV4dHVyZS5zY2FsZU1vZGUgPT09IFNDQUxFX01PREVTLkxJTkVBUilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgbGV2ZWwgPSBNYXRoLm1pbih0ZXh0dXJlLmFuaXNvdHJvcGljTGV2ZWwsIGdsLmdldFBhcmFtZXRlcihhbmlzb3Ryb3BpY0V4dC5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpKTtcblxuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmYodGV4dHVyZS50YXJnZXQsIGFuaXNvdHJvcGljRXh0LlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBsZXZlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKHRleHR1cmUudGFyZ2V0LCBnbC5URVhUVVJFX01JTl9GSUxURVIsIHRleHR1cmUuc2NhbGVNb2RlID8gZ2wuTElORUFSIDogZ2wuTkVBUkVTVCk7XG4gICAgICAgIH1cblxuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKHRleHR1cmUudGFyZ2V0LCBnbC5URVhUVVJFX01BR19GSUxURVIsIHRleHR1cmUuc2NhbGVNb2RlID8gZ2wuTElORUFSIDogZ2wuTkVBUkVTVCk7XG4gICAgfTtcblxuICAgIHJldHVybiBUZXh0dXJlU3lzdGVtO1xufShTeXN0ZW0pKTtcblxuLyoqXG4gKiBTeXN0ZW1zIGFyZSBpbmRpdmlkdWFsIGNvbXBvbmVudHMgdG8gdGhlIFJlbmRlcmVyIHBpcGVsaW5lLlxuICogQG5hbWVzcGFjZSBQSVhJLnN5c3RlbXNcbiAqL1xuXG52YXIgc3lzdGVtcyA9ICh7XG4gICAgRmlsdGVyU3lzdGVtOiBGaWx0ZXJTeXN0ZW0sXG4gICAgQmF0Y2hTeXN0ZW06IEJhdGNoU3lzdGVtLFxuICAgIENvbnRleHRTeXN0ZW06IENvbnRleHRTeXN0ZW0sXG4gICAgRnJhbWVidWZmZXJTeXN0ZW06IEZyYW1lYnVmZmVyU3lzdGVtLFxuICAgIEdlb21ldHJ5U3lzdGVtOiBHZW9tZXRyeVN5c3RlbSxcbiAgICBNYXNrU3lzdGVtOiBNYXNrU3lzdGVtLFxuICAgIFN0ZW5jaWxTeXN0ZW06IFN0ZW5jaWxTeXN0ZW0sXG4gICAgUHJvamVjdGlvblN5c3RlbTogUHJvamVjdGlvblN5c3RlbSxcbiAgICBSZW5kZXJUZXh0dXJlU3lzdGVtOiBSZW5kZXJUZXh0dXJlU3lzdGVtLFxuICAgIFNoYWRlclN5c3RlbTogU2hhZGVyU3lzdGVtLFxuICAgIFN0YXRlU3lzdGVtOiBTdGF0ZVN5c3RlbSxcbiAgICBUZXh0dXJlR0NTeXN0ZW06IFRleHR1cmVHQ1N5c3RlbSxcbiAgICBUZXh0dXJlU3lzdGVtOiBUZXh0dXJlU3lzdGVtXG59KTtcblxudmFyIHRlbXBNYXRyaXggPSBuZXcgTWF0cml4KCk7XG5cbi8qKlxuICogVGhlIEFic3RyYWN0UmVuZGVyZXIgaXMgdGhlIGJhc2UgZm9yIGEgUGl4aUpTIFJlbmRlcmVyLiBJdCBpcyBleHRlbmRlZCBieSB0aGUge0BsaW5rIFBJWEkuQ2FudmFzUmVuZGVyZXJ9XG4gKiBhbmQge0BsaW5rIFBJWEkuUmVuZGVyZXJ9IHdoaWNoIGNhbiBiZSB1c2VkIGZvciByZW5kZXJpbmcgYSBQaXhpSlMgc2NlbmUuXG4gKlxuICogQGFic3RyYWN0XG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkudXRpbHMuRXZlbnRFbWl0dGVyXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgQWJzdHJhY3RSZW5kZXJlciA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEV2ZW50RW1pdHRlcikge1xuICAgIGZ1bmN0aW9uIEFic3RyYWN0UmVuZGVyZXIoc3lzdGVtLCBvcHRpb25zKVxuICAgIHtcbiAgICAgICAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICAgICAgLy8gQWRkIHRoZSBkZWZhdWx0IHJlbmRlciBvcHRpb25zXG4gICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBzZXR0aW5ncy5SRU5ERVJfT1BUSU9OUywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gRGVwcmVjYXRpb24gbm90aWNlIGZvciByZW5kZXJlciByb3VuZFBpeGVscyBvcHRpb25cbiAgICAgICAgaWYgKG9wdGlvbnMucm91bmRQaXhlbHMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNldHRpbmdzLlJPVU5EX1BJWEVMUyA9IG9wdGlvbnMucm91bmRQaXhlbHM7XG4gICAgICAgICAgICBkZXByZWNhdGlvbignNS4wLjAnLCAnUmVuZGVyZXIgcm91bmRQaXhlbHMgb3B0aW9uIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgUElYSS5zZXR0aW5ncy5ST1VORF9QSVhFTFMnLCAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc3VwcGxpZWQgY29uc3RydWN0b3Igb3B0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fVxuICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0eXBlIG9mIHRoZSByZW5kZXJlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCBQSVhJLlJFTkRFUkVSX1RZUEUuVU5LTk9XTlxuICAgICAgICAgKiBAc2VlIFBJWEkuUkVOREVSRVJfVFlQRVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50eXBlID0gUkVOREVSRVJfVFlQRS5VTktOT1dOO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZWFzdXJlbWVudHMgb2YgdGhlIHNjcmVlbi4gKDAsIDAsIHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJdHMgc2FmZSB0byB1c2UgYXMgZmlsdGVyQXJlYSBvciBoaXRBcmVhIGZvciB0aGUgd2hvbGUgc3RhZ2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUmVjdGFuZ2xlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zY3JlZW4gPSBuZXcgUmVjdGFuZ2xlKDAsIDAsIG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNhbnZhcyBlbGVtZW50IHRoYXQgZXZlcnl0aGluZyBpcyBkcmF3biB0by5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7SFRNTENhbnZhc0VsZW1lbnR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZpZXcgPSBvcHRpb25zLnZpZXcgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByZXNvbHV0aW9uIC8gZGV2aWNlIHBpeGVsIHJhdGlvIG9mIHRoZSByZW5kZXJlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAxXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlc29sdXRpb24gPSBvcHRpb25zLnJlc29sdXRpb24gfHwgc2V0dGluZ3MuUkVTT0xVVElPTjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aGUgcmVuZGVyIHZpZXcgaXMgdHJhbnNwYXJlbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyYW5zcGFyZW50ID0gb3B0aW9ucy50cmFuc3BhcmVudDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciBDU1MgZGltZW5zaW9ucyBvZiBjYW52YXMgdmlldyBzaG91bGQgYmUgcmVzaXplZCB0byBzY3JlZW4gZGltZW5zaW9ucyBhdXRvbWF0aWNhbGx5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hdXRvRGVuc2l0eSA9IG9wdGlvbnMuYXV0b0RlbnNpdHkgfHwgb3B0aW9ucy5hdXRvUmVzaXplIHx8IGZhbHNlO1xuICAgICAgICAvLyBhdXRvUmVzaXplIGlzIGRlcHJlY2F0ZWQsIHByb3ZpZGVzIGZhbGxiYWNrIHN1cHBvcnRcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHZhbHVlIG9mIHRoZSBwcmVzZXJ2ZURyYXdpbmdCdWZmZXIgZmxhZyBhZmZlY3RzIHdoZXRoZXIgb3Igbm90IHRoZSBjb250ZW50cyBvZlxuICAgICAgICAgKiB0aGUgc3RlbmNpbCBidWZmZXIgaXMgcmV0YWluZWQgYWZ0ZXIgcmVuZGVyaW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcmVzZXJ2ZURyYXdpbmdCdWZmZXIgPSBvcHRpb25zLnByZXNlcnZlRHJhd2luZ0J1ZmZlcjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBzZXRzIGlmIHRoZSBDYW52YXNSZW5kZXJlciB3aWxsIGNsZWFyIHRoZSBjYW52YXMgb3Igbm90IGJlZm9yZSB0aGUgbmV3IHJlbmRlciBwYXNzLlxuICAgICAgICAgKiBJZiB0aGUgc2NlbmUgaXMgTk9UIHRyYW5zcGFyZW50IFBpeGlKUyB3aWxsIHVzZSBhIGNhbnZhcyBzaXplZCBmaWxsUmVjdCBvcGVyYXRpb24gZXZlcnlcbiAgICAgICAgICogZnJhbWUgdG8gc2V0IHRoZSBjYW52YXMgYmFja2dyb3VuZCBjb2xvci4gSWYgdGhlIHNjZW5lIGlzIHRyYW5zcGFyZW50IFBpeGlKUyB3aWxsIHVzZSBjbGVhclJlY3RcbiAgICAgICAgICogdG8gY2xlYXIgdGhlIGNhbnZhcyBldmVyeSBmcmFtZS4gRGlzYWJsZSB0aGlzIGJ5IHNldHRpbmcgdGhpcyB0byBmYWxzZS4gRm9yIGV4YW1wbGUsIGlmXG4gICAgICAgICAqIHlvdXIgZ2FtZSBoYXMgYSBjYW52YXMgZmlsbGluZyBiYWNrZ3JvdW5kIGltYWdlIHlvdSBvZnRlbiBkb24ndCBuZWVkIHRoaXMgc2V0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jbGVhckJlZm9yZVJlbmRlciA9IG9wdGlvbnMuY2xlYXJCZWZvcmVSZW5kZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIGFzIGEgbnVtYmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRDb2xvciA9IDB4MDAwMDAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYmFja2dyb3VuZCBjb2xvciBhcyBhbiBbUiwgRywgQl0gYXJyYXkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcltdfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kQ29sb3JSZ2JhID0gWzAsIDAsIDAsIDBdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYmFja2dyb3VuZCBjb2xvciBhcyBhIHN0cmluZy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kQ29sb3JTdHJpbmcgPSAnIzAwMDAwMCc7XG5cbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvciB8fCB0aGlzLl9iYWNrZ3JvdW5kQ29sb3I7IC8vIHJ1biBiZyBjb2xvciBzZXR0ZXJcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyB0ZW1wb3JhcnkgZGlzcGxheSBvYmplY3QgdXNlZCBhcyB0aGUgcGFyZW50IG9mIHRoZSBjdXJyZW50bHkgYmVpbmcgcmVuZGVyZWQgaXRlbS5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5EaXNwbGF5T2JqZWN0fVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudCA9IG5ldyBDb250YWluZXIoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxhc3Qgcm9vdCBvYmplY3QgdGhhdCB0aGUgcmVuZGVyZXIgdHJpZWQgdG8gcmVuZGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkRpc3BsYXlPYmplY3R9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2xhc3RPYmplY3RSZW5kZXJlZCA9IHRoaXMuX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2xsZWN0aW9uIG9mIHBsdWdpbnMuXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBsdWdpbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIEV2ZW50RW1pdHRlciApIEFic3RyYWN0UmVuZGVyZXIuX19wcm90b19fID0gRXZlbnRFbWl0dGVyO1xuICAgIEFic3RyYWN0UmVuZGVyZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZlbnRFbWl0dGVyICYmIEV2ZW50RW1pdHRlci5wcm90b3R5cGUgKTtcbiAgICBBYnN0cmFjdFJlbmRlcmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFic3RyYWN0UmVuZGVyZXI7XG5cbiAgICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyB3aWR0aDogeyBjb25maWd1cmFibGU6IHRydWUgfSxoZWlnaHQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sYmFja2dyb3VuZENvbG9yOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoZSBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0aWNNYXAgLSBUaGUgZGljdGlvbmFyeSBvZiBzdGF0aWNhbGx5IHNhdmVkIHBsdWdpbnMuXG4gICAgICovXG4gICAgQWJzdHJhY3RSZW5kZXJlci5wcm90b3R5cGUuaW5pdFBsdWdpbnMgPSBmdW5jdGlvbiBpbml0UGx1Z2lucyAoc3RhdGljTWFwKVxuICAgIHtcbiAgICAgICAgZm9yICh2YXIgbyBpbiBzdGF0aWNNYXApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luc1tvXSA9IG5ldyAoc3RhdGljTWFwW29dKSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIHZpZXcud2lkdGgsIGFjdHVhbCBudW1iZXIgb2YgcGl4ZWxzIGluIHRoZSBjYW52YXMgYnkgaG9yaXpvbnRhbC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAZGVmYXVsdCA4MDBcbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMud2lkdGguZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcud2lkdGg7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNhbWUgYXMgdmlldy5oZWlnaHQsIGFjdHVhbCBudW1iZXIgb2YgcGl4ZWxzIGluIHRoZSBjYW52YXMgYnkgdmVydGljYWwuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQGRlZmF1bHQgNjAwXG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmhlaWdodC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5oZWlnaHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc2l6ZXMgdGhlIHNjcmVlbiBhbmQgY2FudmFzIHRvIHRoZSBzcGVjaWZpZWQgd2lkdGggYW5kIGhlaWdodC5cbiAgICAgKiBDYW52YXMgZGltZW5zaW9ucyBhcmUgbXVsdGlwbGllZCBieSByZXNvbHV0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjcmVlbldpZHRoIC0gVGhlIG5ldyB3aWR0aCBvZiB0aGUgc2NyZWVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JlZW5IZWlnaHQgLSBUaGUgbmV3IGhlaWdodCBvZiB0aGUgc2NyZWVuLlxuICAgICAqL1xuICAgIEFic3RyYWN0UmVuZGVyZXIucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIHJlc2l6ZSAoc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodClcbiAgICB7XG4gICAgICAgIHRoaXMuc2NyZWVuLndpZHRoID0gc2NyZWVuV2lkdGg7XG4gICAgICAgIHRoaXMuc2NyZWVuLmhlaWdodCA9IHNjcmVlbkhlaWdodDtcblxuICAgICAgICB0aGlzLnZpZXcud2lkdGggPSBzY3JlZW5XaWR0aCAqIHRoaXMucmVzb2x1dGlvbjtcbiAgICAgICAgdGhpcy52aWV3LmhlaWdodCA9IHNjcmVlbkhlaWdodCAqIHRoaXMucmVzb2x1dGlvbjtcblxuICAgICAgICBpZiAodGhpcy5hdXRvRGVuc2l0eSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy52aWV3LnN0eWxlLndpZHRoID0gc2NyZWVuV2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICB0aGlzLnZpZXcuc3R5bGUuaGVpZ2h0ID0gc2NyZWVuSGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWZ1bCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSB0ZXh0dXJlIG9mIHRoZSBkaXNwbGF5IG9iamVjdCB0aGF0IGNhbiB0aGVuIGJlIHVzZWQgdG8gY3JlYXRlIHNwcml0ZXNcbiAgICAgKiBUaGlzIGNhbiBiZSBxdWl0ZSB1c2VmdWwgaWYgeW91ciBkaXNwbGF5T2JqZWN0IGlzIGNvbXBsaWNhdGVkIGFuZCBuZWVkcyB0byBiZSByZXVzZWQgbXVsdGlwbGUgdGltZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gZGlzcGxheU9iamVjdCAtIFRoZSBkaXNwbGF5T2JqZWN0IHRoZSBvYmplY3Qgd2lsbCBiZSBnZW5lcmF0ZWQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVNb2RlIC0gU2hvdWxkIGJlIG9uZSBvZiB0aGUgc2NhbGVNb2RlIGNvbnN0cy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmVzb2x1dGlvbiAtIFRoZSByZXNvbHV0aW9uIC8gZGV2aWNlIHBpeGVsIHJhdGlvIG9mIHRoZSB0ZXh0dXJlIGJlaW5nIGdlbmVyYXRlZC5cbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBbcmVnaW9uXSAtIFRoZSByZWdpb24gb2YgdGhlIGRpc3BsYXlPYmplY3QsIHRoYXQgc2hhbGwgYmUgcmVuZGVyZWQsXG4gICAgICogICAgICAgIGlmIG5vIHJlZ2lvbiBpcyBzcGVjaWZpZWQsIGRlZmF1bHRzIHRvIHRoZSBsb2NhbCBib3VuZHMgb2YgdGhlIGRpc3BsYXlPYmplY3QuXG4gICAgICogQHJldHVybiB7UElYSS5SZW5kZXJUZXh0dXJlfSBBIHRleHR1cmUgb2YgdGhlIGdyYXBoaWNzIG9iamVjdC5cbiAgICAgKi9cbiAgICBBYnN0cmFjdFJlbmRlcmVyLnByb3RvdHlwZS5nZW5lcmF0ZVRleHR1cmUgPSBmdW5jdGlvbiBnZW5lcmF0ZVRleHR1cmUgKGRpc3BsYXlPYmplY3QsIHNjYWxlTW9kZSwgcmVzb2x1dGlvbiwgcmVnaW9uKVxuICAgIHtcbiAgICAgICAgcmVnaW9uID0gcmVnaW9uIHx8IGRpc3BsYXlPYmplY3QuZ2V0TG9jYWxCb3VuZHMoKTtcblxuICAgICAgICAvLyBtaW5pbXVtIHRleHR1cmUgc2l6ZSBpcyAxeDEsIDB4MCB3aWxsIHRocm93IGFuIGVycm9yXG4gICAgICAgIGlmIChyZWdpb24ud2lkdGggPT09IDApIHsgcmVnaW9uLndpZHRoID0gMTsgfVxuICAgICAgICBpZiAocmVnaW9uLmhlaWdodCA9PT0gMCkgeyByZWdpb24uaGVpZ2h0ID0gMTsgfVxuXG4gICAgICAgIHZhciByZW5kZXJUZXh0dXJlID0gUmVuZGVyVGV4dHVyZS5jcmVhdGUocmVnaW9uLndpZHRoIHwgMCwgcmVnaW9uLmhlaWdodCB8IDAsIHNjYWxlTW9kZSwgcmVzb2x1dGlvbik7XG5cbiAgICAgICAgdGVtcE1hdHJpeC50eCA9IC1yZWdpb24ueDtcbiAgICAgICAgdGVtcE1hdHJpeC50eSA9IC1yZWdpb24ueTtcblxuICAgICAgICB0aGlzLnJlbmRlcihkaXNwbGF5T2JqZWN0LCByZW5kZXJUZXh0dXJlLCBmYWxzZSwgdGVtcE1hdHJpeCwgISFkaXNwbGF5T2JqZWN0LnBhcmVudCk7XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlclRleHR1cmU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZXZlcnl0aGluZyBmcm9tIHRoZSByZW5kZXJlciBhbmQgb3B0aW9uYWxseSByZW1vdmVzIHRoZSBDYW52YXMgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZW1vdmVWaWV3PWZhbHNlXSAtIFJlbW92ZXMgdGhlIENhbnZhcyBlbGVtZW50IGZyb20gdGhlIERPTS5cbiAgICAgKi9cbiAgICBBYnN0cmFjdFJlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAocmVtb3ZlVmlldylcbiAgICB7XG4gICAgICAgIGZvciAodmFyIG8gaW4gdGhpcy5wbHVnaW5zKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbnNbb10uZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5wbHVnaW5zW29dID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW1vdmVWaWV3ICYmIHRoaXMudmlldy5wYXJlbnROb2RlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnZpZXcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnZpZXcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wbHVnaW5zID0gbnVsbDtcblxuICAgICAgICB0aGlzLnR5cGUgPSBSRU5ERVJFUl9UWVBFLlVOS05PV047XG5cbiAgICAgICAgdGhpcy52aWV3ID0gbnVsbDtcblxuICAgICAgICB0aGlzLnNjcmVlbiA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5yZXNvbHV0aW9uID0gMDtcblxuICAgICAgICB0aGlzLnRyYW5zcGFyZW50ID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5hdXRvRGVuc2l0eSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuYmxlbmRNb2RlcyA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gbnVsbDtcblxuICAgICAgICB0aGlzLnByZXNlcnZlRHJhd2luZ0J1ZmZlciA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNsZWFyQmVmb3JlUmVuZGVyID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fYmFja2dyb3VuZENvbG9yID0gMDtcbiAgICAgICAgdGhpcy5fYmFja2dyb3VuZENvbG9yUmdiYSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRDb2xvclN0cmluZyA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9sYXN0T2JqZWN0UmVuZGVyZWQgPSBudWxsO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFja2dyb3VuZCBjb2xvciB0byBmaWxsIGlmIG5vdCB0cmFuc3BhcmVudFxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5iYWNrZ3JvdW5kQ29sb3IuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kQ29sb3I7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5iYWNrZ3JvdW5kQ29sb3Iuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRDb2xvciA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kQ29sb3JTdHJpbmcgPSBoZXgyc3RyaW5nKHZhbHVlKTtcbiAgICAgICAgaGV4MnJnYih2YWx1ZSwgdGhpcy5fYmFja2dyb3VuZENvbG9yUmdiYSk7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBBYnN0cmFjdFJlbmRlcmVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICByZXR1cm4gQWJzdHJhY3RSZW5kZXJlcjtcbn0oRXZlbnRFbWl0dGVyKSk7XG5cbi8qKlxuICogVGhlIFJlbmRlcmVyIGRyYXdzIHRoZSBzY2VuZSBhbmQgYWxsIGl0cyBjb250ZW50IG9udG8gYSBXZWJHTCBlbmFibGVkIGNhbnZhcy5cbiAqXG4gKiBUaGlzIHJlbmRlcmVyIHNob3VsZCBiZSB1c2VkIGZvciBicm93c2VycyB0aGF0IHN1cHBvcnQgV2ViR0wuXG4gKlxuICogVGhpcyByZW5kZXJlciB3b3JrcyBieSBhdXRvbWF0aWNhbGx5IG1hbmFnaW5nIFdlYkdMQmF0Y2hlc20sIHNvIG5vIG5lZWQgZm9yIFNwcml0ZSBCYXRjaGVzIG9yIFNwcml0ZSBDbG91ZHMuXG4gKiBEb24ndCBmb3JnZXQgdG8gYWRkIHRoZSB2aWV3IHRvIHlvdXIgRE9NIG9yIHlvdSB3aWxsIG5vdCBzZWUgYW55dGhpbmchXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQGV4dGVuZHMgUElYSS5BYnN0cmFjdFJlbmRlcmVyXG4gKi9cbnZhciBSZW5kZXJlciA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEFic3RyYWN0UmVuZGVyZXIpIHtcbiAgICBmdW5jdGlvbiBSZW5kZXJlcihvcHRpb25zKVxuICAgIHtcbiAgICAgICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgICAgICAgQWJzdHJhY3RSZW5kZXJlci5jYWxsKHRoaXMsICdXZWJHTCcsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIHRoZSBvcHRpb25zIHdpbGwgaGF2ZSBiZWVuIG1vZGlmaWVkIGhlcmUgaW4gdGhlIHN1cGVyIGNvbnN0cnVjdG9yIHdpdGggcGl4aSdzIGRlZmF1bHQgc2V0dGluZ3MuLlxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGlzIHJlbmRlcmVyIGFzIGEgc3RhbmRhcmRpemVkIGNvbnN0XG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHNlZSBQSVhJLlJFTkRFUkVSX1RZUEVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9IFJFTkRFUkVSX1RZUEUuV0VCR0w7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlYkdMIGNvbnRleHQsIHNldCBieSB0aGUgY29udGV4dFN5c3RlbSAodGhpcy5jb250ZXh0KVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQG1lbWJlciB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nbCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5DT05URVhUX1VJRCA9IDA7XG5cbiAgICAgICAgLy8gVE9ETyBsZWdhY3khXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEludGVybmFsIHNpZ25hbCBpbnN0YW5jZXMgb2YgKipydW5uZXIqKiwgdGhlc2VcbiAgICAgICAgICogYXJlIGFzc2lnbmVkIHRvIGVhY2ggc3lzdGVtIGNyZWF0ZWQuXG4gICAgICAgICAqIEBzZWUgUElYSS5SdW5uZXJcbiAgICAgICAgICogQG5hbWUgUElYSS5SZW5kZXJlciNydW5uZXJzXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAcHJvcGVydHkge1BJWEkuUnVubmVyfSBkZXN0cm95IC0gRGVzdHJveSBydW5uZXJcbiAgICAgICAgICogQHByb3BlcnR5IHtQSVhJLlJ1bm5lcn0gY29udGV4dENoYW5nZSAtIENvbnRleHQgY2hhbmdlIHJ1bm5lclxuICAgICAgICAgKiBAcHJvcGVydHkge1BJWEkuUnVubmVyfSByZXNldCAtIFJlc2V0IHJ1bm5lclxuICAgICAgICAgKiBAcHJvcGVydHkge1BJWEkuUnVubmVyfSB1cGRhdGUgLSBVcGRhdGUgcnVubmVyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7UElYSS5SdW5uZXJ9IHBvc3RyZW5kZXIgLSBQb3N0LXJlbmRlciBydW5uZXJcbiAgICAgICAgICogQHByb3BlcnR5IHtQSVhJLlJ1bm5lcn0gcHJlcmVuZGVyIC0gUHJlLXJlbmRlciBydW5uZXJcbiAgICAgICAgICogQHByb3BlcnR5IHtQSVhJLlJ1bm5lcn0gcmVzaXplIC0gUmVzaXplIHJ1bm5lclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ydW5uZXJzID0ge1xuICAgICAgICAgICAgZGVzdHJveTogbmV3IFJ1bm5lcignZGVzdHJveScpLFxuICAgICAgICAgICAgY29udGV4dENoYW5nZTogbmV3IFJ1bm5lcignY29udGV4dENoYW5nZScsIDEpLFxuICAgICAgICAgICAgcmVzZXQ6IG5ldyBSdW5uZXIoJ3Jlc2V0JyksXG4gICAgICAgICAgICB1cGRhdGU6IG5ldyBSdW5uZXIoJ3VwZGF0ZScpLFxuICAgICAgICAgICAgcG9zdHJlbmRlcjogbmV3IFJ1bm5lcigncG9zdHJlbmRlcicpLFxuICAgICAgICAgICAgcHJlcmVuZGVyOiBuZXcgUnVubmVyKCdwcmVyZW5kZXInKSxcbiAgICAgICAgICAgIHJlc2l6ZTogbmV3IFJ1bm5lcigncmVzaXplJywgMiksXG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdsb2JhbCB1bmlmb3Jtc1xuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlVuaWZvcm1Hcm91cH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2xvYmFsVW5pZm9ybXMgPSBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgICAgICAgIHByb2plY3Rpb25NYXRyaXg6IG5ldyBNYXRyaXgoKSxcbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hc2sgc3lzdGVtIGluc3RhbmNlXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5NYXNrU3lzdGVtfSBtYXNrXG4gICAgICAgICAqIEBtZW1iZXJvZiBQSVhJLlJlbmRlcmVyI1xuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWRkU3lzdGVtKE1hc2tTeXN0ZW0sICdtYXNrJylcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udGV4dCBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5Db250ZXh0U3lzdGVtfSBjb250ZXh0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgUElYSS5SZW5kZXJlciNcbiAgICAgICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAuYWRkU3lzdGVtKENvbnRleHRTeXN0ZW0sICdjb250ZXh0JylcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3RhdGUgc3lzdGVtIGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLnN5c3RlbXMuU3RhdGVTeXN0ZW19IHN0YXRlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgUElYSS5SZW5kZXJlciNcbiAgICAgICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAuYWRkU3lzdGVtKFN0YXRlU3lzdGVtLCAnc3RhdGUnKVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTaGFkZXIgc3lzdGVtIGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLnN5c3RlbXMuU2hhZGVyU3lzdGVtfSBzaGFkZXJcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBQSVhJLlJlbmRlcmVyI1xuICAgICAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC5hZGRTeXN0ZW0oU2hhZGVyU3lzdGVtLCAnc2hhZGVyJylcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGV4dHVyZSBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5UZXh0dXJlU3lzdGVtfSB0ZXh0dXJlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgUElYSS5SZW5kZXJlciNcbiAgICAgICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAuYWRkU3lzdGVtKFRleHR1cmVTeXN0ZW0sICd0ZXh0dXJlJylcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2VvbWV0cnkgc3lzdGVtIGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLnN5c3RlbXMuR2VvbWV0cnlTeXN0ZW19IGdlb21ldHJ5XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgUElYSS5SZW5kZXJlciNcbiAgICAgICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAuYWRkU3lzdGVtKEdlb21ldHJ5U3lzdGVtLCAnZ2VvbWV0cnknKVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGcmFtZWJ1ZmZlciBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5GcmFtZWJ1ZmZlclN5c3RlbX0gZnJhbWVidWZmZXJcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBQSVhJLlJlbmRlcmVyI1xuICAgICAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC5hZGRTeXN0ZW0oRnJhbWVidWZmZXJTeXN0ZW0sICdmcmFtZWJ1ZmZlcicpXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFN0ZW5jaWwgc3lzdGVtIGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLnN5c3RlbXMuU3RlbmNpbFN5c3RlbX0gc3RlbmNpbFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFBJWEkuUmVuZGVyZXIjXG4gICAgICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLmFkZFN5c3RlbShTdGVuY2lsU3lzdGVtLCAnc3RlbmNpbCcpXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByb2plY3Rpb24gc3lzdGVtIGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLnN5c3RlbXMuUHJvamVjdGlvblN5c3RlbX0gcHJvamVjdGlvblxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFBJWEkuUmVuZGVyZXIjXG4gICAgICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLmFkZFN5c3RlbShQcm9qZWN0aW9uU3lzdGVtLCAncHJvamVjdGlvbicpXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRleHR1cmUgZ2FyYmFnZSBjb2xsZWN0b3Igc3lzdGVtIGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLnN5c3RlbXMuVGV4dHVyZUdDU3lzdGVtfSB0ZXh0dXJlR0NcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBQSVhJLlJlbmRlcmVyI1xuICAgICAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC5hZGRTeXN0ZW0oVGV4dHVyZUdDU3lzdGVtLCAndGV4dHVyZUdDJylcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmlsdGVyIHN5c3RlbSBpbnN0YW5jZVxuICAgICAgICAgICAgICogQG1lbWJlciB7UElYSS5zeXN0ZW1zLkZpbHRlclN5c3RlbX0gZmlsdGVyXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgUElYSS5SZW5kZXJlciNcbiAgICAgICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAuYWRkU3lzdGVtKEZpbHRlclN5c3RlbSwgJ2ZpbHRlcicpXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbmRlclRleHR1cmUgc3lzdGVtIGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLnN5c3RlbXMuUmVuZGVyVGV4dHVyZVN5c3RlbX0gcmVuZGVyVGV4dHVyZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFBJWEkuUmVuZGVyZXIjXG4gICAgICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLmFkZFN5c3RlbShSZW5kZXJUZXh0dXJlU3lzdGVtLCAncmVuZGVyVGV4dHVyZScpXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQmF0Y2ggc3lzdGVtIGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLnN5c3RlbXMuQmF0Y2hTeXN0ZW19IGJhdGNoXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgUElYSS5SZW5kZXJlciNcbiAgICAgICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAuYWRkU3lzdGVtKEJhdGNoU3lzdGVtLCAnYmF0Y2gnKTtcblxuICAgICAgICB0aGlzLmluaXRQbHVnaW5zKFJlbmRlcmVyLl9fcGx1Z2lucyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBvcHRpb25zIHBhc3NlZCBpbiB0byBjcmVhdGUgYSBuZXcgV2ViR0wgY29udGV4dC5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChvcHRpb25zLmNvbnRleHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5pbml0RnJvbUNvbnRleHQob3B0aW9ucy5jb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5pbml0RnJvbU9wdGlvbnMoe1xuICAgICAgICAgICAgICAgIGFscGhhOiB0aGlzLnRyYW5zcGFyZW50LFxuICAgICAgICAgICAgICAgIGFudGlhbGlhczogb3B0aW9ucy5hbnRpYWxpYXMsXG4gICAgICAgICAgICAgICAgcHJlbXVsdGlwbGllZEFscGhhOiB0aGlzLnRyYW5zcGFyZW50ICYmIHRoaXMudHJhbnNwYXJlbnQgIT09ICdub3RNdWx0aXBsaWVkJyxcbiAgICAgICAgICAgICAgICBzdGVuY2lsOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogb3B0aW9ucy5wcmVzZXJ2ZURyYXdpbmdCdWZmZXIsXG4gICAgICAgICAgICAgICAgcG93ZXJQcmVmZXJlbmNlOiB0aGlzLm9wdGlvbnMucG93ZXJQcmVmZXJlbmNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyBpZiB3ZSBhcmUgcmVuZGVyaW5nIHRvIHRoZSBzY3JlZW4gdnMgcmVuZGVyVGV4dHVyZVxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZW5kZXJpbmdUb1NjcmVlbiA9IHRydWU7XG5cbiAgICAgICAgc2F5SGVsbG8odGhpcy5jb250ZXh0LndlYkdMVmVyc2lvbiA9PT0gMiA/ICdXZWJHTCAyJyA6ICdXZWJHTCAxJyk7XG5cbiAgICAgICAgdGhpcy5yZXNpemUodGhpcy5vcHRpb25zLndpZHRoLCB0aGlzLm9wdGlvbnMuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBpZiAoIEFic3RyYWN0UmVuZGVyZXIgKSBSZW5kZXJlci5fX3Byb3RvX18gPSBBYnN0cmFjdFJlbmRlcmVyO1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEFic3RyYWN0UmVuZGVyZXIgJiYgQWJzdHJhY3RSZW5kZXJlci5wcm90b3R5cGUgKTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZW5kZXJlcjtcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIG5ldyBzeXN0ZW0gdG8gdGhlIHJlbmRlcmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IENsYXNzUmVmIC0gQ2xhc3MgcmVmZXJlbmNlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXSAtIFByb3BlcnR5IG5hbWUgZm9yIHN5c3RlbSwgaWYgbm90IHNwZWNpZmllZFxuICAgICAqICAgICAgICB3aWxsIHVzZSBhIHN0YXRpYyBgbmFtZWAgcHJvcGVydHkgb24gdGhlIGNsYXNzIGl0c2VsZi4gVGhpc1xuICAgICAqICAgICAgICBuYW1lIHdpbGwgYmUgYXNzaWduZWQgYXMgcyBwcm9wZXJ0eSBvbiB0aGUgUmVuZGVyZXIgc28gbWFrZVxuICAgICAqICAgICAgICBzdXJlIGl0IGRvZXNuJ3QgY29sbGlkZSB3aXRoIHByb3BlcnRpZXMgb24gUmVuZGVyZXIuXG4gICAgICogQHJldHVybiB7UElYSS5SZW5kZXJlcn0gUmV0dXJuIGluc3RhbmNlIG9mIHJlbmRlcmVyXG4gICAgICovXG4gICAgUmVuZGVyZXIuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlIChvcHRpb25zKVxuICAgIHtcbiAgICAgICAgaWYgKGlzV2ViR0xTdXBwb3J0ZWQoKSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZW5kZXJlcihvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignV2ViR0wgdW5zdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyLCB1c2UgXCJwaXhpLmpzLWxlZ2FjeVwiIGZvciBmYWxsYmFjayBjYW52YXMyZCBzdXBwb3J0LicpO1xuICAgIH07XG5cbiAgICBSZW5kZXJlci5wcm90b3R5cGUuYWRkU3lzdGVtID0gZnVuY3Rpb24gYWRkU3lzdGVtIChDbGFzc1JlZiwgbmFtZSlcbiAgICB7XG4gICAgICAgIGlmICghbmFtZSlcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZSA9IENsYXNzUmVmLm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3lzdGVtID0gbmV3IENsYXNzUmVmKHRoaXMpO1xuXG4gICAgICAgIGlmICh0aGlzW25hbWVdKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKFwiV2hvb3BzISBUaGUgbmFtZSBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIGFscmVhZHkgaW4gdXNlXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNbbmFtZV0gPSBzeXN0ZW07XG5cbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLnJ1bm5lcnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucnVubmVyc1tpXS5hZGQoc3lzdGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCBhZnRlciByZW5kZXJpbmcgZmluaXNoZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBQSVhJLlJlbmRlcmVyI3Bvc3RyZW5kZXJcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIGJlZm9yZSByZW5kZXJpbmcgc3RhcnRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgUElYSS5SZW5kZXJlciNwcmVyZW5kZXJcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gdGhlIFdlYkdMIGNvbnRleHQgaXMgc2V0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgUElYSS5SZW5kZXJlciNjb250ZXh0XG4gICAgICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIFdlYkdMIGNvbnRleHQuXG4gICAgICAgICAqL1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIHRoZSBvYmplY3QgdG8gaXRzIFdlYkdMIHZpZXdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBkaXNwbGF5T2JqZWN0IC0gVGhlIG9iamVjdCB0byBiZSByZW5kZXJlZC5cbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gW3JlbmRlclRleHR1cmVdIC0gVGhlIHJlbmRlciB0ZXh0dXJlIHRvIHJlbmRlciB0by5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjbGVhcj10cnVlXSAtIFNob3VsZCB0aGUgY2FudmFzIGJlIGNsZWFyZWQgYmVmb3JlIHRoZSBuZXcgcmVuZGVyLlxuICAgICAqIEBwYXJhbSB7UElYSS5NYXRyaXh9IFt0cmFuc2Zvcm1dIC0gQSB0cmFuc2Zvcm0gdG8gYXBwbHkgdG8gdGhlIHJlbmRlciB0ZXh0dXJlIGJlZm9yZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbc2tpcFVwZGF0ZVRyYW5zZm9ybT1mYWxzZV0gLSBTaG91bGQgd2Ugc2tpcCB0aGUgdXBkYXRlIHRyYW5zZm9ybSBwYXNzP1xuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKGRpc3BsYXlPYmplY3QsIHJlbmRlclRleHR1cmUsIGNsZWFyLCB0cmFuc2Zvcm0sIHNraXBVcGRhdGVUcmFuc2Zvcm0pXG4gICAge1xuICAgICAgICAvLyBjYW4gYmUgaGFuZHkgdG8ga25vdyFcbiAgICAgICAgdGhpcy5yZW5kZXJpbmdUb1NjcmVlbiA9ICFyZW5kZXJUZXh0dXJlO1xuXG4gICAgICAgIHRoaXMucnVubmVycy5wcmVyZW5kZXIucnVuKCk7XG4gICAgICAgIHRoaXMuZW1pdCgncHJlcmVuZGVyJyk7XG5cbiAgICAgICAgLy8gYXBwbHkgYSB0cmFuc2Zvcm0gYXQgYSBHUFUgbGV2ZWxcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcblxuICAgICAgICAvLyBubyBwb2ludCByZW5kZXJpbmcgaWYgb3VyIGNvbnRleHQgaGFzIGJlZW4gYmxvd24gdXAhXG4gICAgICAgIGlmICh0aGlzLmNvbnRleHQuaXNMb3N0KVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlbmRlclRleHR1cmUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RPYmplY3RSZW5kZXJlZCA9IGRpc3BsYXlPYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBVcGRhdGVUcmFuc2Zvcm0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgc2NlbmUgZ3JhcGhcbiAgICAgICAgICAgIHZhciBjYWNoZVBhcmVudCA9IGRpc3BsYXlPYmplY3QucGFyZW50O1xuXG4gICAgICAgICAgICBkaXNwbGF5T2JqZWN0LnBhcmVudCA9IHRoaXMuX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50O1xuICAgICAgICAgICAgZGlzcGxheU9iamVjdC51cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIGRpc3BsYXlPYmplY3QucGFyZW50ID0gY2FjaGVQYXJlbnQ7XG4gICAgICAgICAgICAvLyBkaXNwbGF5T2JqZWN0LmhpdEFyZWEgPSAvL1RPRE8gYWRkIGEgdGVtcCBoaXQgYXJlYVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJUZXh0dXJlLmJpbmQocmVuZGVyVGV4dHVyZSk7XG4gICAgICAgIHRoaXMuYmF0Y2guY3VycmVudFJlbmRlcmVyLnN0YXJ0KCk7XG5cbiAgICAgICAgaWYgKGNsZWFyICE9PSB1bmRlZmluZWQgPyBjbGVhciA6IHRoaXMuY2xlYXJCZWZvcmVSZW5kZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVGV4dHVyZS5jbGVhcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlzcGxheU9iamVjdC5yZW5kZXIodGhpcyk7XG5cbiAgICAgICAgLy8gYXBwbHkgdHJhbnNmb3JtLi5cbiAgICAgICAgdGhpcy5iYXRjaC5jdXJyZW50UmVuZGVyZXIuZmx1c2goKTtcblxuICAgICAgICBpZiAocmVuZGVyVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmVuZGVyVGV4dHVyZS5iYXNlVGV4dHVyZS51cGRhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucnVubmVycy5wb3N0cmVuZGVyLnJ1bigpO1xuXG4gICAgICAgIC8vIHJlc2V0IHRyYW5zZm9ybSBhZnRlciByZW5kZXJcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uLnRyYW5zZm9ybSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5lbWl0KCdwb3N0cmVuZGVyJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc2l6ZXMgdGhlIFdlYkdMIHZpZXcgdG8gdGhlIHNwZWNpZmllZCB3aWR0aCBhbmQgaGVpZ2h0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjcmVlbldpZHRoIC0gVGhlIG5ldyB3aWR0aCBvZiB0aGUgc2NyZWVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JlZW5IZWlnaHQgLSBUaGUgbmV3IGhlaWdodCBvZiB0aGUgc2NyZWVuLlxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiByZXNpemUgKHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpXG4gICAge1xuICAgICAgICBBYnN0cmFjdFJlbmRlcmVyLnByb3RvdHlwZS5yZXNpemUuY2FsbCh0aGlzLCBzY3JlZW5XaWR0aCwgc2NyZWVuSGVpZ2h0KTtcblxuICAgICAgICB0aGlzLnJ1bm5lcnMucmVzaXplLnJ1bihzY3JlZW5XaWR0aCwgc2NyZWVuSGVpZ2h0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBXZWJHTCBzdGF0ZSBzbyB5b3UgY2FuIHJlbmRlciB0aGluZ3MgaG93ZXZlciB5b3UgZmFuY3khXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQSVhJLlJlbmRlcmVyfSBSZXR1cm5zIGl0c2VsZi5cbiAgICAgKi9cbiAgICBSZW5kZXJlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5ydW5uZXJzLnJlc2V0LnJ1bigpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciB0aGUgZnJhbWUgYnVmZmVyXG4gICAgICovXG4gICAgUmVuZGVyZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZnJhbWVidWZmZXIuYmluZCgpO1xuICAgICAgICB0aGlzLmZyYW1lYnVmZmVyLmNsZWFyKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZXZlcnl0aGluZyBmcm9tIHRoZSByZW5kZXJlciAoZXZlbnQgbGlzdGVuZXJzLCBzcHJpdGViYXRjaCwgZXRjLi4uKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmVtb3ZlVmlldz1mYWxzZV0gLSBSZW1vdmVzIHRoZSBDYW52YXMgZWxlbWVudCBmcm9tIHRoZSBET00uXG4gICAgICogIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3BpeGlqcy9waXhpLmpzL2lzc3Vlcy8yMjMzXG4gICAgICovXG4gICAgUmVuZGVyZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95IChyZW1vdmVWaWV3KVxuICAgIHtcbiAgICAgICAgdGhpcy5ydW5uZXJzLmRlc3Ryb3kucnVuKCk7XG5cbiAgICAgICAgZm9yICh2YXIgciBpbiB0aGlzLnJ1bm5lcnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucnVubmVyc1tyXS5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjYWxsIGJhc2UgZGVzdHJveVxuICAgICAgICBBYnN0cmFjdFJlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcywgcmVtb3ZlVmlldyk7XG5cbiAgICAgICAgLy8gVE9ETyBudWxsaWZ5IGFsbCB0aGUgbWFuYWdlcnMuLlxuICAgICAgICB0aGlzLmdsID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiBpbnN0YWxsZWQgcGx1Z2lucy4gVGhlc2UgYXJlIGluY2x1ZGVkIGJ5IGRlZmF1bHQgaW4gUElYSSwgYnV0IGNhbiBiZSBleGNsdWRlZFxuICAgICAqIGJ5IGNyZWF0aW5nIGEgY3VzdG9tIGJ1aWxkLiBDb25zdWx0IHRoZSBSRUFETUUgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgY3JlYXRpbmcgY3VzdG9tXG4gICAgICogYnVpbGRzIGFuZCBleGNsdWRpbmcgcGx1Z2lucy5cbiAgICAgKiBAbmFtZSBQSVhJLlJlbmRlcmVyI3BsdWdpbnNcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEByZWFkb25seVxuICAgICAqIEBwcm9wZXJ0eSB7UElYSS5hY2Nlc3NpYmlsaXR5LkFjY2Vzc2liaWxpdHlNYW5hZ2VyfSBhY2Nlc3NpYmlsaXR5IFN1cHBvcnQgdGFiYmluZyBpbnRlcmFjdGl2ZSBlbGVtZW50cy5cbiAgICAgKiBAcHJvcGVydHkge1BJWEkuZXh0cmFjdC5FeHRyYWN0fSBleHRyYWN0IEV4dHJhY3QgaW1hZ2UgZGF0YSBmcm9tIHJlbmRlcmVyLlxuICAgICAqIEBwcm9wZXJ0eSB7UElYSS5pbnRlcmFjdGlvbi5JbnRlcmFjdGlvbk1hbmFnZXJ9IGludGVyYWN0aW9uIEhhbmRsZXMgbW91c2UsIHRvdWNoIGFuZCBwb2ludGVyIGV2ZW50cy5cbiAgICAgKiBAcHJvcGVydHkge1BJWEkucHJlcGFyZS5QcmVwYXJlfSBwcmVwYXJlIFByZS1yZW5kZXIgZGlzcGxheSBvYmplY3RzLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBsdWdpbk5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN0b3IgLSBUaGUgY29uc3RydWN0b3IgZnVuY3Rpb24gb3IgY2xhc3MgZm9yIHRoZSBwbHVnaW4uXG4gICAgICovXG4gICAgUmVuZGVyZXIucmVnaXN0ZXJQbHVnaW4gPSBmdW5jdGlvbiByZWdpc3RlclBsdWdpbiAocGx1Z2luTmFtZSwgY3RvcilcbiAgICB7XG4gICAgICAgIFJlbmRlcmVyLl9fcGx1Z2lucyA9IFJlbmRlcmVyLl9fcGx1Z2lucyB8fCB7fTtcbiAgICAgICAgUmVuZGVyZXIuX19wbHVnaW5zW3BsdWdpbk5hbWVdID0gY3RvcjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlbmRlcmVyO1xufShBYnN0cmFjdFJlbmRlcmVyKSk7XG5cbi8qKlxuICogVGhpcyBoZWxwZXIgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGRldGVjdCB3aGljaCByZW5kZXJlciB5b3Ugc2hvdWxkIGJlIHVzaW5nLlxuICogV2ViR0wgaXMgdGhlIHByZWZlcnJlZCByZW5kZXJlciBhcyBpdCBpcyBhIGxvdCBmYXN0ZXIuIElmIFdlYkdMIGlzIG5vdCBzdXBwb3J0ZWQgYnlcbiAqIHRoZSBicm93c2VyIHRoZW4gdGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBhIGNhbnZhcyByZW5kZXJlclxuICpcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAZnVuY3Rpb24gYXV0b0RldGVjdFJlbmRlcmVyXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gVGhlIG9wdGlvbmFsIHJlbmRlcmVyIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53aWR0aD04MDBdIC0gdGhlIHdpZHRoIG9mIHRoZSByZW5kZXJlcnMgdmlld1xuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmhlaWdodD02MDBdIC0gdGhlIGhlaWdodCBvZiB0aGUgcmVuZGVyZXJzIHZpZXdcbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IFtvcHRpb25zLnZpZXddIC0gdGhlIGNhbnZhcyB0byB1c2UgYXMgYSB2aWV3LCBvcHRpb25hbFxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFuc3BhcmVudD1mYWxzZV0gLSBJZiB0aGUgcmVuZGVyIHZpZXcgaXMgdHJhbnNwYXJlbnQsIGRlZmF1bHQgZmFsc2VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXV0b0RlbnNpdHk9ZmFsc2VdIC0gUmVzaXplcyByZW5kZXJlciB2aWV3IGluIENTUyBwaXhlbHMgdG8gYWxsb3cgZm9yXG4gKiAgIHJlc29sdXRpb25zIG90aGVyIHRoYW4gMVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hbnRpYWxpYXM9ZmFsc2VdIC0gc2V0cyBhbnRpYWxpYXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJlc2VydmVEcmF3aW5nQnVmZmVyPWZhbHNlXSAtIGVuYWJsZXMgZHJhd2luZyBidWZmZXIgcHJlc2VydmF0aW9uLCBlbmFibGUgdGhpcyBpZiB5b3VcbiAqICBuZWVkIHRvIGNhbGwgdG9EYXRhVXJsIG9uIHRoZSB3ZWJnbCBjb250ZXh0XG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuYmFja2dyb3VuZENvbG9yPTB4MDAwMDAwXSAtIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIHRoZSByZW5kZXJlZCBhcmVhXG4gKiAgKHNob3duIGlmIG5vdCB0cmFuc3BhcmVudCkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNsZWFyQmVmb3JlUmVuZGVyPXRydWVdIC0gVGhpcyBzZXRzIGlmIHRoZSByZW5kZXJlciB3aWxsIGNsZWFyIHRoZSBjYW52YXMgb3JcbiAqICAgbm90IGJlZm9yZSB0aGUgbmV3IHJlbmRlciBwYXNzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnJlc29sdXRpb249MV0gLSBUaGUgcmVzb2x1dGlvbiAvIGRldmljZSBwaXhlbCByYXRpbyBvZiB0aGUgcmVuZGVyZXIsIHJldGluYSB3b3VsZCBiZSAyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZvcmNlQ2FudmFzPWZhbHNlXSAtIHByZXZlbnRzIHNlbGVjdGlvbiBvZiBXZWJHTCByZW5kZXJlciwgZXZlbiBpZiBzdWNoIGlzIHByZXNlbnQsIHRoaXNcbiAqICAgb3B0aW9uIG9ubHkgaXMgYXZhaWxhYmxlIHdoZW4gdXNpbmcgKipwaXhpLmpzLWxlZ2FjeSoqIG9yICoqQHBpeGkvY2FudmFzLXJlbmRlcmVyKiogbW9kdWxlcywgb3RoZXJ3aXNlXG4gKiAgIGl0IGlzIGlnbm9yZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZvcmNlRlhBQT1mYWxzZV0gLSBmb3JjZXMgRlhBQSBhbnRpYWxpYXNpbmcgdG8gYmUgdXNlZCBvdmVyIG5hdGl2ZS5cbiAqICBGWEFBIGlzIGZhc3RlciwgYnV0IG1heSBub3QgYWx3YXlzIGxvb2sgYXMgZ3JlYXQgKip3ZWJnbCBvbmx5KipcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5wb3dlclByZWZlcmVuY2VdIC0gUGFyYW1ldGVyIHBhc3NlZCB0byB3ZWJnbCBjb250ZXh0LCBzZXQgdG8gXCJoaWdoLXBlcmZvcm1hbmNlXCJcbiAqICBmb3IgZGV2aWNlcyB3aXRoIGR1YWwgZ3JhcGhpY3MgY2FyZCAqKndlYmdsIG9ubHkqKlxuICogQHJldHVybiB7UElYSS5SZW5kZXJlcnxQSVhJLkNhbnZhc1JlbmRlcmVyfSBSZXR1cm5zIFdlYkdMIHJlbmRlcmVyIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIENhbnZhc1JlbmRlcmVyXG4gKi9cbmZ1bmN0aW9uIGF1dG9EZXRlY3RSZW5kZXJlcihvcHRpb25zKVxue1xuICAgIHJldHVybiBSZW5kZXJlci5jcmVhdGUob3B0aW9ucyk7XG59XG5cbnZhciBfZGVmYXVsdCA9IFwiYXR0cmlidXRlIHZlYzIgYVZlcnRleFBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIGFUZXh0dXJlQ29vcmQ7XFxuXFxudW5pZm9ybSBtYXQzIHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxudm9pZCBtYWluKHZvaWQpXFxue1xcbiAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoKHByb2plY3Rpb25NYXRyaXggKiB2ZWMzKGFWZXJ0ZXhQb3NpdGlvbiwgMS4wKSkueHksIDAuMCwgMS4wKTtcXG4gICAgdlRleHR1cmVDb29yZCA9IGFUZXh0dXJlQ29vcmQ7XFxufVwiO1xuXG52YXIgZGVmYXVsdEZpbHRlciA9IFwiYXR0cmlidXRlIHZlYzIgYVZlcnRleFBvc2l0aW9uO1xcblxcbnVuaWZvcm0gbWF0MyBwcm9qZWN0aW9uTWF0cml4O1xcblxcbnZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xcblxcbnVuaWZvcm0gdmVjNCBpbnB1dFNpemU7XFxudW5pZm9ybSB2ZWM0IG91dHB1dEZyYW1lO1xcblxcbnZlYzQgZmlsdGVyVmVydGV4UG9zaXRpb24oIHZvaWQgKVxcbntcXG4gICAgdmVjMiBwb3NpdGlvbiA9IGFWZXJ0ZXhQb3NpdGlvbiAqIG1heChvdXRwdXRGcmFtZS56dywgdmVjMigwLikpICsgb3V0cHV0RnJhbWUueHk7XFxuXFxuICAgIHJldHVybiB2ZWM0KChwcm9qZWN0aW9uTWF0cml4ICogdmVjMyhwb3NpdGlvbiwgMS4wKSkueHksIDAuMCwgMS4wKTtcXG59XFxuXFxudmVjMiBmaWx0ZXJUZXh0dXJlQ29vcmQoIHZvaWQgKVxcbntcXG4gICAgcmV0dXJuIGFWZXJ0ZXhQb3NpdGlvbiAqIChvdXRwdXRGcmFtZS56dyAqIGlucHV0U2l6ZS56dyk7XFxufVxcblxcbnZvaWQgbWFpbih2b2lkKVxcbntcXG4gICAgZ2xfUG9zaXRpb24gPSBmaWx0ZXJWZXJ0ZXhQb3NpdGlvbigpO1xcbiAgICB2VGV4dHVyZUNvb3JkID0gZmlsdGVyVGV4dHVyZUNvb3JkKCk7XFxufVxcblwiO1xuXG4vKipcbiAqIEEgVGV4dHVyZSB0aGF0IGRlcGVuZHMgb24gc2l4IG90aGVyIHJlc291cmNlcy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuQmFzZVRleHR1cmVcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBDdWJlVGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEJhc2VUZXh0dXJlKSB7XG4gICAgZnVuY3Rpb24gQ3ViZVRleHR1cmUgKCkge1xuICAgICAgICBCYXNlVGV4dHVyZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGlmICggQmFzZVRleHR1cmUgKSBDdWJlVGV4dHVyZS5fX3Byb3RvX18gPSBCYXNlVGV4dHVyZTtcbiAgICBDdWJlVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCYXNlVGV4dHVyZSAmJiBCYXNlVGV4dHVyZS5wcm90b3R5cGUgKTtcbiAgICBDdWJlVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlVGV4dHVyZTtcblxuICAgIEN1YmVUZXh0dXJlLmZyb20gPSBmdW5jdGlvbiBmcm9tIChyZXNvdXJjZXMsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IEN1YmVUZXh0dXJlKG5ldyBDdWJlUmVzb3VyY2UocmVzb3VyY2VzLCBvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDdWJlVGV4dHVyZTtcbn0oQmFzZVRleHR1cmUpKTtcblxuLyoqXG4gKiBVc2VkIGJ5IHRoZSBiYXRjaGVyIHRvIGRyYXcgYmF0Y2hlcy5cbiAqIEVhY2ggb25lIG9mIHRoZXNlIGNvbnRhaW5zIGFsbCBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byBkcmF3IGEgYm91bmQgZ2VvbWV0cnkuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgQmF0Y2hEcmF3Q2FsbCA9IGZ1bmN0aW9uIEJhdGNoRHJhd0NhbGwoKVxue1xuICAgIHRoaXMudGV4dHVyZXMgPSBbXTtcbiAgICB0aGlzLmlkcyA9IFtdO1xuICAgIHRoaXMuYmxlbmQgPSAwO1xuICAgIHRoaXMudGV4dHVyZUNvdW50ID0gMDtcbiAgICB0aGlzLnN0YXJ0ID0gMDtcbiAgICB0aGlzLnNpemUgPSAwO1xuICAgIHRoaXMudHlwZSA9IDQ7XG59O1xuXG4vKipcbiAqIEZsZXhpYmxlIHdyYXBwZXIgYXJvdW5kIGBBcnJheUJ1ZmZlcmAgdGhhdCBhbHNvIHByb3ZpZGVzXG4gKiB0eXBlZCBhcnJheSB2aWV3cyBvbiBkZW1hbmQuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgVmlld2FibGVCdWZmZXIgPSBmdW5jdGlvbiBWaWV3YWJsZUJ1ZmZlcihzaXplKVxue1xuICAgIC8qKlxuICAgICAqIFVuZGVybHlpbmcgYEFycmF5QnVmZmVyYCB0aGF0IGhvbGRzIGFsbCB0aGUgZGF0YVxuICAgICAqIGFuZCBpcyBvZiBjYXBhY2l0eSBgc2l6ZWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtBcnJheUJ1ZmZlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJhd0JpbmFyeURhdGEgPSBuZXcgQXJyYXlCdWZmZXIoc2l6ZSk7XG5cbiAgICAvKipcbiAgICAgKiBWaWV3IG9uIHRoZSByYXcgYmluYXJ5IGRhdGEgYXMgYSBgVWludDMyQXJyYXlgLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7VWludDMyQXJyYXl9XG4gICAgICovXG4gICAgdGhpcy51aW50MzJWaWV3ID0gbmV3IFVpbnQzMkFycmF5KHRoaXMucmF3QmluYXJ5RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBWaWV3IG9uIHRoZSByYXcgYmluYXJ5IGRhdGEgYXMgYSBgRmxvYXQzMkFycmF5YC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge0Zsb2F0MzJBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmZsb2F0MzJWaWV3ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLnJhd0JpbmFyeURhdGEpO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQ1ID0geyBpbnQ4VmlldzogeyBjb25maWd1cmFibGU6IHRydWUgfSx1aW50OFZpZXc6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0saW50MTZWaWV3OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHVpbnQxNlZpZXc6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0saW50MzJWaWV3OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qKlxuICogVmlldyBvbiB0aGUgcmF3IGJpbmFyeSBkYXRhIGFzIGEgYEludDhBcnJheWAuXG4gKlxuICogQG1lbWJlciB7SW50OEFycmF5fVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkNS5pbnQ4Vmlldy5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIGlmICghdGhpcy5faW50OFZpZXcpXG4gICAge1xuICAgICAgICB0aGlzLl9pbnQ4VmlldyA9IG5ldyBJbnQ4QXJyYXkodGhpcy5yYXdCaW5hcnlEYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faW50OFZpZXc7XG59O1xuXG4vKipcbiAqIFZpZXcgb24gdGhlIHJhdyBiaW5hcnkgZGF0YSBhcyBhIGBVaW50OEFycmF5YC5cbiAqXG4gKiBAbWVtYmVyIHtVaW50OEFycmF5fVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkNS51aW50OFZpZXcuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICBpZiAoIXRoaXMuX3VpbnQ4VmlldylcbiAgICB7XG4gICAgICAgIHRoaXMuX3VpbnQ4VmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMucmF3QmluYXJ5RGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3VpbnQ4Vmlldztcbn07XG5cbi8qKlxuICogVmlldyBvbiB0aGUgcmF3IGJpbmFyeSBkYXRhIGFzIGEgYEludDE2QXJyYXlgLlxuICpcbiAqIEBtZW1iZXIge0ludDE2QXJyYXl9XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycyQ1LmludDE2Vmlldy5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIGlmICghdGhpcy5faW50MTZWaWV3KVxuICAgIHtcbiAgICAgICAgdGhpcy5faW50MTZWaWV3ID0gbmV3IEludDE2QXJyYXkodGhpcy5yYXdCaW5hcnlEYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faW50MTZWaWV3O1xufTtcblxuLyoqXG4gKiBWaWV3IG9uIHRoZSByYXcgYmluYXJ5IGRhdGEgYXMgYSBgVWludDE2QXJyYXlgLlxuICpcbiAqIEBtZW1iZXIge1VpbnQxNkFycmF5fVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkNS51aW50MTZWaWV3LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgaWYgKCF0aGlzLl91aW50MTZWaWV3KVxuICAgIHtcbiAgICAgICAgdGhpcy5fdWludDE2VmlldyA9IG5ldyBVaW50MTZBcnJheSh0aGlzLnJhd0JpbmFyeURhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl91aW50MTZWaWV3O1xufTtcblxuLyoqXG4gKiBWaWV3IG9uIHRoZSByYXcgYmluYXJ5IGRhdGEgYXMgYSBgSW50MzJBcnJheWAuXG4gKlxuICogQG1lbWJlciB7SW50MzJBcnJheX1cbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDUuaW50MzJWaWV3LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgaWYgKCF0aGlzLl9pbnQzMlZpZXcpXG4gICAge1xuICAgICAgICB0aGlzLl9pbnQzMlZpZXcgPSBuZXcgSW50MzJBcnJheSh0aGlzLnJhd0JpbmFyeURhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9pbnQzMlZpZXc7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHZpZXcgb2YgdGhlIGdpdmVuIHR5cGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBPbmUgb2YgYGludDhgLCBgdWludDhgLCBgaW50MTZgLFxuICpgdWludDE2YCwgYGludDMyYCwgYHVpbnQzMmAsIGFuZCBgZmxvYXQzMmAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IHR5cGVkIGFycmF5IG9mIGdpdmVuIHR5cGVcbiAqL1xuVmlld2FibGVCdWZmZXIucHJvdG90eXBlLnZpZXcgPSBmdW5jdGlvbiB2aWV3ICh0eXBlKVxue1xuICAgIHJldHVybiB0aGlzWyh0eXBlICsgXCJWaWV3XCIpXTtcbn07XG5cbi8qKlxuICogRGVzdHJveXMgYWxsIGJ1ZmZlciByZWZlcmVuY2VzLiBEbyBub3QgdXNlIGFmdGVyIGNhbGxpbmdcbiAqIHRoaXMuXG4gKi9cblZpZXdhYmxlQnVmZmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIHRoaXMucmF3QmluYXJ5RGF0YSA9IG51bGw7XG4gICAgdGhpcy5faW50OFZpZXcgPSBudWxsO1xuICAgIHRoaXMuX3VpbnQ4VmlldyA9IG51bGw7XG4gICAgdGhpcy5faW50MTZWaWV3ID0gbnVsbDtcbiAgICB0aGlzLl91aW50MTZWaWV3ID0gbnVsbDtcbiAgICB0aGlzLl9pbnQzMlZpZXcgPSBudWxsO1xuICAgIHRoaXMudWludDMyVmlldyA9IG51bGw7XG4gICAgdGhpcy5mbG9hdDMyVmlldyA9IG51bGw7XG59O1xuXG5WaWV3YWJsZUJ1ZmZlci5zaXplT2YgPSBmdW5jdGlvbiBzaXplT2YgKHR5cGUpXG57XG4gICAgc3dpdGNoICh0eXBlKVxuICAgIHtcbiAgICAgICAgY2FzZSAnaW50OCc6XG4gICAgICAgIGNhc2UgJ3VpbnQ4JzpcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBjYXNlICdpbnQxNic6XG4gICAgICAgIGNhc2UgJ3VpbnQxNic6XG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgY2FzZSAnaW50MzInOlxuICAgICAgICBjYXNlICd1aW50MzInOlxuICAgICAgICBjYXNlICdmbG9hdDMyJzpcbiAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCh0eXBlICsgXCIgaXNuJ3QgYSB2YWxpZCB2aWV3IHR5cGVcIikpO1xuICAgIH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWaWV3YWJsZUJ1ZmZlci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQ1ICk7XG5cbi8qKlxuICogUmVuZGVyZXIgZGVkaWNhdGVkIHRvIGRyYXdpbmcgYW5kIGJhdGNoaW5nIHNwcml0ZXMuXG4gKlxuICogVGhpcyBpcyB0aGUgZGVmYXVsdCBiYXRjaCByZW5kZXJlci4gSXQgYnVmZmVycyBvYmplY3RzXG4gKiB3aXRoIHRleHR1cmUtYmFzZWQgZ2VvbWV0cmllcyBhbmQgcmVuZGVycyB0aGVtIGluXG4gKiBiYXRjaGVzLiBJdCB1cGxvYWRzIG11bHRpcGxlIHRleHR1cmVzIHRvIHRoZSBHUFUgdG9cbiAqIHJlZHVjZSB0byB0aGUgbnVtYmVyIG9mIGRyYXcgY2FsbHMuXG4gKlxuICogQGNsYXNzXG4gKiBAcHJvdGVjdGVkXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQGV4dGVuZHMgUElYSS5PYmplY3RSZW5kZXJlclxuICovXG52YXIgQWJzdHJhY3RCYXRjaFJlbmRlcmVyID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoT2JqZWN0UmVuZGVyZXIpIHtcbiAgICBmdW5jdGlvbiBBYnN0cmFjdEJhdGNoUmVuZGVyZXIocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBPYmplY3RSZW5kZXJlci5jYWxsKHRoaXMsIHJlbmRlcmVyKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBpcyB1c2VkIHRvIGdlbmVyYXRlIGEgc2hhZGVyIHRoYXQgY2FuXG4gICAgICAgICAqIGNvbG9yIGVhY2ggdmVydGV4IGJhc2VkIG9uIGEgYGFUZXh0dXJlSWRgXG4gICAgICAgICAqIGF0dHJpYnV0ZSB0aGF0IHBvaW50cyB0byBhbiB0ZXh0dXJlIGluIGB1U2FtcGxlcmAuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgZW5hYmxlcyB0aGUgb2JqZWN0cyB3aXRoIGRpZmZlcmVudCB0ZXh0dXJlc1xuICAgICAgICAgKiB0byBiZSBkcmF3biBpbiB0aGUgc2FtZSBkcmF3IGNhbGwuXG4gICAgICAgICAqXG4gICAgICAgICAqIFlvdSBjYW4gY3VzdG9taXplIHlvdXIgc2hhZGVyIGJ5IGNyZWF0aW5nIHlvdXJcbiAgICAgICAgICogY3VzdG9tIHNoYWRlciBnZW5lcmF0b3IuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuQmF0Y2hTaGFkZXJHZW5lcmF0b3J9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2hhZGVyR2VuZXJhdG9yID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNsYXNzIHRoYXQgcmVwcmVzZW50cyB0aGUgZ2VvbWV0cnkgb2Ygb2JqZWN0c1xuICAgICAgICAgKiB0aGF0IGFyZSBnb2luZyB0byBiZSBiYXRjaGVkIHdpdGggdGhpcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAgICAgKiBAZGVmYXVsdCBQSVhJLkJhdGNoR2VvbWV0cnlcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZW9tZXRyeUNsYXNzID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2l6ZSBvZiBkYXRhIGJlaW5nIGJ1ZmZlcmVkIHBlciB2ZXJ0ZXggaW4gdGhlXG4gICAgICAgICAqIGF0dHJpYnV0ZSBidWZmZXJzIChpbiBmbG9hdHMpLiBCeSBkZWZhdWx0LCB0aGVcbiAgICAgICAgICogYmF0Y2gtcmVuZGVyZXIgcGx1Z2luIHVzZXMgNjpcbiAgICAgICAgICpcbiAgICAgICAgICogfCBhVmVydGV4UG9zaXRpb24gfCAyIHxcbiAgICAgICAgICogfC0tLS0tLS0tLS0tLS0tLS0tfC0tLXxcbiAgICAgICAgICogfCBhVGV4dHVyZUNvb3JkcyAgfCAyIHxcbiAgICAgICAgICogfCBhQ29sb3IgICAgICAgICAgfCAxIHxcbiAgICAgICAgICogfCBhVGV4dHVyZUlkICAgICAgfCAxIHxcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmVydGV4U2l6ZSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBXZWJHTCBzdGF0ZSBpbiB3aGljaCB0aGlzIHJlbmRlcmVyIHdpbGwgd29yay5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5TdGF0ZX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuZm9yMmQoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG51bWJlciBvZiBidWZmZXJhYmxlIG9iamVjdHMgYmVmb3JlIGEgZmx1c2hcbiAgICAgICAgICogb2NjdXJzIGF1dG9tYXRpY2FsbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgc2V0dGluZ3MuU1BSSVRFX01BWF9URVhUVVJFU1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zaXplID0gMjAwMCAqIDQ7Ly8gc2V0dGluZ3MuU1BSSVRFX0JBVENIX1NJWkUsIDIwMDAgaXMgYSBuaWNlIGJhbGFuY2UgYmV0d2VlbiBtb2JpbGUvZGVza3RvcFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUb3RhbCBjb3VudCBvZiBhbGwgdmVydGljZXMgdXNlZCBieSB0aGUgY3VycmVudGx5XG4gICAgICAgICAqIGJ1ZmZlcmVkIG9iamVjdHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3ZlcnRleENvdW50ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVG90YWwgY291bnQgb2YgYWxsIGluZGljZXMgdXNlZCBieSB0aGUgY3VycmVudGx5XG4gICAgICAgICAqIGJ1ZmZlcmVkIG9iamVjdHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2luZGV4Q291bnQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWZmZXIgb2Ygb2JqZWN0cyB0aGF0IGFyZSB5ZXQgdG8gYmUgcmVuZGVyZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuRGlzcGxheU9iamVjdFtdfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYnVmZmVyZWRFbGVtZW50cyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOdW1iZXIgb2YgZWxlbWVudHMgdGhhdCBhcmUgYnVmZmVyZWQgYW5kIGFyZVxuICAgICAgICAgKiB3YWl0aW5nIHRvIGJlIGZsdXNoZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2J1ZmZlclNpemUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHNoYWRlciBpcyBnZW5lcmF0ZWQgYnkgYHRoaXMuc2hhZGVyR2VuZXJhdG9yYC5cbiAgICAgICAgICpcbiAgICAgICAgICogSXQgaXMgZ2VuZXJhdGVkIHNwZWNpZmljYWxseSB0byBoYW5kbGUgdGhlIHJlcXVpcmVkXG4gICAgICAgICAqIG51bWJlciBvZiB0ZXh0dXJlcyBiZWluZyBiYXRjaGVkIHRvZ2V0aGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlNoYWRlcn1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fc2hhZGVyID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUG9vbCBvZiBgdGhpcy5nZW9tZXRyeUNsYXNzYCBnZW9tZXRyeSBvYmplY3RzXG4gICAgICAgICAqIHRoYXQgc3RvcmUgYnVmZmVycy4gVGhleSBhcmUgdXNlZCB0byBwYXNzIGRhdGFcbiAgICAgICAgICogdG8gdGhlIHNoYWRlciBvbiBlYWNoIGRyYXcgY2FsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlc2UgYXJlIG5ldmVyIHJlLWFsbG9jYXRlZCBhZ2FpbiwgdW5sZXNzIGFcbiAgICAgICAgICogY29udGV4dCBjaGFuZ2Ugb2NjdXJzOyBob3dldmVyLCB0aGUgcG9vbCBtYXlcbiAgICAgICAgICogYmUgZXhwYW5kZWQgaWYgcmVxdWlyZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuR2VvbWV0cnlbXX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHNlZSBQSVhJLkFic3RyYWN0QmF0Y2hSZW5kZXJlci5jb250ZXh0Q2hhbmdlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9wYWNrZWRHZW9tZXRyaWVzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpemUgb2YgYHRoaXMuX3BhY2tlZEdlb21ldHJpZXNgLiBJdCBjYW4gYmUgZXhwYW5kZWRcbiAgICAgICAgICogaWYgbW9yZSB0aGFuIGB0aGlzLl9wYWNrZWRHZW9tZXRyeVBvb2xTaXplYCBmbHVzaGVzXG4gICAgICAgICAqIG9jY3VyIGluIGEgc2luZ2xlIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9wYWNrZWRHZW9tZXRyeVBvb2xTaXplID0gMjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSBmbHVzaCBtYXkgb2NjdXIgbXVsdGlwbGUgdGltZXMgaW4gYSBzaW5nbGVcbiAgICAgICAgICogZnJhbWUuIE9uIGlPUyBkZXZpY2VzIG9yIHdoZW5cbiAgICAgICAgICogYHNldHRpbmdzLkNBTl9VUExPQURfU0FNRV9CVUZGRVJgIGlzIGZhbHNlLCB0aGVcbiAgICAgICAgICogYmF0Y2ggcmVuZGVyZXIgZG9lcyBub3QgdXBsb2FkIGRhdGEgdG8gdGhlIHNhbWVcbiAgICAgICAgICogYFdlYkdMQnVmZmVyYCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBpcyB0aGUgaW5kZXggaW50byBgcGFja2VkR2VvbWV0cmllc2AgdGhhdCBwb2ludHMgdG9cbiAgICAgICAgICogZ2VvbWV0cnkgaG9sZGluZyB0aGUgbW9zdCByZWNlbnQgYnVmZmVycy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZmx1c2hJZCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBvb2wgb2YgYEJhdGNoRHJhd0NhbGxgIG9iamVjdHMgdGhhdCBgZmx1c2hgIHVzZWRcbiAgICAgICAgICogdG8gY3JlYXRlIFwiYmF0Y2hlc1wiIG9mIHRoZSBvYmplY3RzIGJlaW5nIHJlbmRlcmVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGVzZSBhcmUgbmV2ZXIgcmUtYWxsb2NhdGVkIGFnYWluLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIEJhdGNoRHJhd0NhbGxbXVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZHJhd0NhbGxzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLnNpemUgLyA0OyBrKyspXG4gICAgICAgIHsgLy8gaW5pdGlhbGl6ZSB0aGUgZHJhdy1jYWxscyBwb29sIHRvIG1heCBzaXplLlxuICAgICAgICAgICAgdGhpcy5fZHJhd0NhbGxzW2tdID0gbmV3IEJhdGNoRHJhd0NhbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQb29sIG9mIGBWaWV3YWJsZUJ1ZmZlcmAgb2JqZWN0cyB0aGF0IGFyZSBzb3J0ZWQgaW5cbiAgICAgICAgICogb3JkZXIgb2YgaW5jcmVhc2luZyBzaXplLiBUaGUgZmx1c2ggbWV0aG9kIHVzZXNcbiAgICAgICAgICogdGhlIGJ1ZmZlciB3aXRoIHRoZSBsZWFzdCBzaXplIGFib3ZlIHRoZSBhbW91bnRcbiAgICAgICAgICogaXQgcmVxdWlyZXMuIFRoZXNlIGFyZSB1c2VkIGZvciBwYXNzaW5nIGF0dHJpYnV0ZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBmaXJzdCBidWZmZXIgaGFzIGEgc2l6ZSBvZiA4OyBlYWNoIHN1YnNlcXVlbnRcbiAgICAgICAgICogYnVmZmVyIGhhcyBkb3VibGUgY2FwYWNpdHkgb2YgaXRzIHByZXZpb3VzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlZpZXdhYmxlQnVmZmVyfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAc2VlIFBJWEkuQWJzdHJhY3RCYXRjaFJlbmRlcmVyI2dldEF0dHJpYnV0ZUJ1ZmZlclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYUJ1ZmZlcnMgPSB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUG9vbCBvZiBgVWludDE2QXJyYXlgIG9iamVjdHMgdGhhdCBhcmUgc29ydGVkIGluXG4gICAgICAgICAqIG9yZGVyIG9mIGluY3JlYXNpbmcgc2l6ZS4gVGhlIGZsdXNoIG1ldGhvZCB1c2VzXG4gICAgICAgICAqIHRoZSBidWZmZXIgd2l0aCB0aGUgbGVhc3Qgc2l6ZSBhYm92ZSB0aGUgYW1vdW50XG4gICAgICAgICAqIGl0IHJlcXVpcmVzLiBUaGVzZSBhcmUgdXNlZCBmb3IgcGFzc2luZyBpbmRpY2VzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgZmlyc3QgYnVmZmVyIGhhcyBhIHNpemUgb2YgMTI7IGVhY2ggc3Vic2VxdWVudFxuICAgICAgICAgKiBidWZmZXIgaGFzIGRvdWJsZSBjYXBhY2l0eSBvZiBpdHMgcHJldmlvdXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1VpbnQxNkFycmF5W119XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBzZWUgUElYSS5BYnN0cmFjdEJhdGNoUmVuZGVyZXIjZ2V0SW5kZXhCdWZmZXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2lCdWZmZXJzID0ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1heGltdW0gbnVtYmVyIG9mIHRleHR1cmVzIHRoYXQgY2FuIGJlIHVwbG9hZGVkIHRvXG4gICAgICAgICAqIHRoZSBHUFUgdW5kZXIgdGhlIGN1cnJlbnQgY29udGV4dC4gSXQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgICAgICogcHJvcGVybHkgaW4gYHRoaXMuY29udGV4dENoYW5nZWAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHNlZSBQSVhJLkFic3RyYWN0QmF0Y2hSZW5kZXJlciNjb250ZXh0Q2hhbmdlXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5NQVhfVEVYVFVSRVMgPSAxO1xuXG4gICAgICAgIHRoaXMucmVuZGVyZXIub24oJ3ByZXJlbmRlcicsIHRoaXMub25QcmVyZW5kZXIsIHRoaXMpO1xuICAgICAgICByZW5kZXJlci5ydW5uZXJzLmNvbnRleHRDaGFuZ2UuYWRkKHRoaXMpO1xuICAgIH1cblxuICAgIGlmICggT2JqZWN0UmVuZGVyZXIgKSBBYnN0cmFjdEJhdGNoUmVuZGVyZXIuX19wcm90b19fID0gT2JqZWN0UmVuZGVyZXI7XG4gICAgQWJzdHJhY3RCYXRjaFJlbmRlcmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdFJlbmRlcmVyICYmIE9iamVjdFJlbmRlcmVyLnByb3RvdHlwZSApO1xuICAgIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBYnN0cmFjdEJhdGNoUmVuZGVyZXI7XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBgY29udGV4dENoYW5nZWAgc2lnbmFsLlxuICAgICAqXG4gICAgICogSXQgY2FsY3VsYXRlcyBgdGhpcy5NQVhfVEVYVFVSRVNgIGFuZCBhbGxvY2F0aW5nIHRoZVxuICAgICAqIHBhY2tlZC1nZW9tZXRyeSBvYmplY3QgcG9vbC5cbiAgICAgKi9cbiAgICBBYnN0cmFjdEJhdGNoUmVuZGVyZXIucHJvdG90eXBlLmNvbnRleHRDaGFuZ2UgPSBmdW5jdGlvbiBjb250ZXh0Q2hhbmdlICgpXG4gICAge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLnJlbmRlcmVyLmdsO1xuXG4gICAgICAgIGlmIChzZXR0aW5ncy5QUkVGRVJfRU5WID09PSBFTlYuV0VCR0xfTEVHQUNZKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLk1BWF9URVhUVVJFUyA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBzdGVwIDE6IGZpcnN0IGNoZWNrIG1heCB0ZXh0dXJlcyB0aGUgR1BVIGNhbiBoYW5kbGUuXG4gICAgICAgICAgICB0aGlzLk1BWF9URVhUVVJFUyA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgIGdsLmdldFBhcmFtZXRlcihnbC5NQVhfVEVYVFVSRV9JTUFHRV9VTklUUyksXG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuU1BSSVRFX01BWF9URVhUVVJFUyk7XG5cbiAgICAgICAgICAgIC8vIHN0ZXAgMjogY2hlY2sgdGhlIG1heGltdW0gbnVtYmVyIG9mIGlmIHN0YXRlbWVudHMgdGhlIHNoYWRlciBjYW4gaGF2ZSB0b28uLlxuICAgICAgICAgICAgdGhpcy5NQVhfVEVYVFVSRVMgPSBjaGVja01heElmU3RhdGVtZW50c0luU2hhZGVyKFxuICAgICAgICAgICAgICAgIHRoaXMuTUFYX1RFWFRVUkVTLCBnbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zaGFkZXIgPSB0aGlzLnNoYWRlckdlbmVyYXRvci5nZW5lcmF0ZVNoYWRlcih0aGlzLk1BWF9URVhUVVJFUyk7XG5cbiAgICAgICAgLy8gd2UgdXNlIHRoZSBzZWNvbmQgc2hhZGVyIGFzIHRoZSBmaXJzdCBvbmUgZGVwZW5kaW5nIG9uIHlvdXIgYnJvd3NlclxuICAgICAgICAvLyBtYXkgb21pdCBhVGV4dHVyZUlkIGFzIGl0IGlzIG5vdCB1c2VkIGJ5IHRoZSBzaGFkZXIgc28gaXMgb3B0aW1pemVkIG91dC5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9wYWNrZWRHZW9tZXRyeVBvb2xTaXplOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICAgICAgICAgIHRoaXMuX3BhY2tlZEdlb21ldHJpZXNbaV0gPSBuZXcgKHRoaXMuZ2VvbWV0cnlDbGFzcykoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBgcHJlcmVuZGVyYCBzaWduYWwuXG4gICAgICpcbiAgICAgKiBJdCBlbnN1cmVzIHRoYXQgZmx1c2hlcyBzdGFydCBmcm9tIHRoZSBmaXJzdCBnZW9tZXRyeVxuICAgICAqIG9iamVjdCBhZ2Fpbi5cbiAgICAgKi9cbiAgICBBYnN0cmFjdEJhdGNoUmVuZGVyZXIucHJvdG90eXBlLm9uUHJlcmVuZGVyID0gZnVuY3Rpb24gb25QcmVyZW5kZXIgKClcbiAgICB7XG4gICAgICAgIHRoaXMuX2ZsdXNoSWQgPSAwO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBCdWZmZXJzIHRoZSBcImJhdGNoYWJsZVwiIG9iamVjdC4gSXQgbmVlZCBub3QgYmUgcmVuZGVyZWRcbiAgICAgKiBpbW1lZGlhdGVseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5TcHJpdGV9IHNwcml0ZSAtIHRoZSBzcHJpdGUgdG8gcmVuZGVyIHdoZW5cbiAgICAgKiAgICB1c2luZyB0aGlzIHNwcml0ZWJhdGNoXG4gICAgICovXG4gICAgQWJzdHJhY3RCYXRjaFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKGVsZW1lbnQpXG4gICAge1xuICAgICAgICBpZiAoIWVsZW1lbnQuX3RleHR1cmUudmFsaWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl92ZXJ0ZXhDb3VudCArIChlbGVtZW50LnZlcnRleERhdGEubGVuZ3RoIC8gMikgPiB0aGlzLnNpemUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3ZlcnRleENvdW50ICs9IGVsZW1lbnQudmVydGV4RGF0YS5sZW5ndGggLyAyO1xuICAgICAgICB0aGlzLl9pbmRleENvdW50ICs9IGVsZW1lbnQuaW5kaWNlcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX2J1ZmZlcmVkRWxlbWVudHNbdGhpcy5fYnVmZmVyU2l6ZSsrXSA9IGVsZW1lbnQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgdGhlIGNvbnRlbnQgX25vd18gYW5kIGVtcHRpZXMgdGhlIGN1cnJlbnQgYmF0Y2guXG4gICAgICovXG4gICAgQWJzdHJhY3RCYXRjaFJlbmRlcmVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoICgpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5fdmVydGV4Q291bnQgPT09IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhdHRyaWJ1dGVCdWZmZXIgPSB0aGlzLmdldEF0dHJpYnV0ZUJ1ZmZlcih0aGlzLl92ZXJ0ZXhDb3VudCk7XG4gICAgICAgIHZhciBpbmRleEJ1ZmZlciA9IHRoaXMuZ2V0SW5kZXhCdWZmZXIodGhpcy5faW5kZXhDb3VudCk7XG4gICAgICAgIHZhciBnbCA9IHRoaXMucmVuZGVyZXIuZ2w7XG5cbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBlbGVtZW50cyA9IHJlZi5fYnVmZmVyZWRFbGVtZW50cztcbiAgICAgICAgdmFyIGRyYXdDYWxscyA9IHJlZi5fZHJhd0NhbGxzO1xuICAgICAgICB2YXIgTUFYX1RFWFRVUkVTID0gcmVmLk1BWF9URVhUVVJFUztcbiAgICAgICAgdmFyIHBhY2tlZEdlb21ldHJpZXMgPSByZWYuX3BhY2tlZEdlb21ldHJpZXM7XG4gICAgICAgIHZhciB2ZXJ0ZXhTaXplID0gcmVmLnZlcnRleFNpemU7XG5cbiAgICAgICAgdmFyIHRvdWNoID0gdGhpcy5yZW5kZXJlci50ZXh0dXJlR0MuY291bnQ7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIF9pbmRleENvdW50ID0gMDtcblxuICAgICAgICB2YXIgbmV4dFRleHR1cmU7XG4gICAgICAgIHZhciBjdXJyZW50VGV4dHVyZTtcbiAgICAgICAgdmFyIHRleHR1cmVDb3VudCA9IDA7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRHcm91cCA9IGRyYXdDYWxsc1swXTtcbiAgICAgICAgdmFyIGdyb3VwQ291bnQgPSAwO1xuXG4gICAgICAgIHZhciBibGVuZE1vZGUgPSAtMTsvLyBibGVuZC1tb2RlIG9mIHByZXZpb3VzIGVsZW1lbnQvc3ByaXRlL29iamVjdCFcblxuICAgICAgICBjdXJyZW50R3JvdXAudGV4dHVyZUNvdW50ID0gMDtcbiAgICAgICAgY3VycmVudEdyb3VwLnN0YXJ0ID0gMDtcbiAgICAgICAgY3VycmVudEdyb3VwLmJsZW5kID0gYmxlbmRNb2RlO1xuXG4gICAgICAgIHZhciBUSUNLID0gKytCYXNlVGV4dHVyZS5fZ2xvYmFsQmF0Y2g7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLl9idWZmZXJTaXplOyArK2kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBzcHJpdGUgPSBlbGVtZW50c1tpXTtcblxuICAgICAgICAgICAgZWxlbWVudHNbaV0gPSBudWxsO1xuICAgICAgICAgICAgbmV4dFRleHR1cmUgPSBzcHJpdGUuX3RleHR1cmUuYmFzZVRleHR1cmU7XG5cbiAgICAgICAgICAgIHZhciBzcHJpdGVCbGVuZE1vZGUgPSBwcmVtdWx0aXBseUJsZW5kTW9kZVtcbiAgICAgICAgICAgICAgICBuZXh0VGV4dHVyZS5wcmVtdWx0aXBseUFscGhhID8gMSA6IDBdW3Nwcml0ZS5ibGVuZE1vZGVdO1xuXG4gICAgICAgICAgICBpZiAoYmxlbmRNb2RlICE9PSBzcHJpdGVCbGVuZE1vZGUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmxlbmRNb2RlID0gc3ByaXRlQmxlbmRNb2RlO1xuXG4gICAgICAgICAgICAgICAgLy8gZm9yY2UgdGhlIGJhdGNoIHRvIGJyZWFrIVxuICAgICAgICAgICAgICAgIGN1cnJlbnRUZXh0dXJlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlQ291bnQgPSBNQVhfVEVYVFVSRVM7XG4gICAgICAgICAgICAgICAgVElDSysrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VycmVudFRleHR1cmUgIT09IG5leHRUZXh0dXJlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUZXh0dXJlID0gbmV4dFRleHR1cmU7XG5cbiAgICAgICAgICAgICAgICBpZiAobmV4dFRleHR1cmUuX2JhdGNoRW5hYmxlZCAhPT0gVElDSylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0dXJlQ291bnQgPT09IE1BWF9URVhUVVJFUylcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgVElDSysrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlQ291bnQgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50R3JvdXAuc2l6ZSA9IF9pbmRleENvdW50IC0gY3VycmVudEdyb3VwLnN0YXJ0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50R3JvdXAgPSBkcmF3Q2FsbHNbZ3JvdXBDb3VudCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRHcm91cC50ZXh0dXJlQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwLmJsZW5kID0gYmxlbmRNb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwLnN0YXJ0ID0gX2luZGV4Q291bnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBuZXh0VGV4dHVyZS50b3VjaGVkID0gdG91Y2g7XG4gICAgICAgICAgICAgICAgICAgIG5leHRUZXh0dXJlLl9iYXRjaEVuYWJsZWQgPSBUSUNLO1xuICAgICAgICAgICAgICAgICAgICBuZXh0VGV4dHVyZS5faWQgPSB0ZXh0dXJlQ291bnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwLnRleHR1cmVzW2N1cnJlbnRHcm91cC50ZXh0dXJlQ291bnQrK10gPSBuZXh0VGV4dHVyZTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZUNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnBhY2tJbnRlcmxlYXZlZEdlb21ldHJ5KHNwcml0ZSwgYXR0cmlidXRlQnVmZmVyLFxuICAgICAgICAgICAgICAgIGluZGV4QnVmZmVyLCBpbmRleCwgX2luZGV4Q291bnQpO1xuXG4gICAgICAgICAgICAvLyBwdXNoIGEgZ3JhcGhpY3MuLlxuICAgICAgICAgICAgaW5kZXggKz0gKHNwcml0ZS52ZXJ0ZXhEYXRhLmxlbmd0aCAvIDIpICogdmVydGV4U2l6ZTtcbiAgICAgICAgICAgIF9pbmRleENvdW50ICs9IHNwcml0ZS5pbmRpY2VzLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIEJhc2VUZXh0dXJlLl9nbG9iYWxCYXRjaCA9IFRJQ0s7XG4gICAgICAgIGN1cnJlbnRHcm91cC5zaXplID0gX2luZGV4Q291bnQgLSBjdXJyZW50R3JvdXAuc3RhcnQ7XG5cbiAgICAgICAgaWYgKCFzZXR0aW5ncy5DQU5fVVBMT0FEX1NBTUVfQlVGRkVSKVxuICAgICAgICB7IC8qIFVzdWFsbHkgb24gaU9TIGRldmljZXMsIHdoZXJlIHRoZSBicm93c2VyIGRvZXNuJ3RcbiAgICAgICAgICAgIGxpa2UgdXBsb2FkcyB0byB0aGUgc2FtZSBidWZmZXIgaW4gYSBzaW5nbGUgZnJhbWUuICovXG4gICAgICAgICAgICBpZiAodGhpcy5fcGFja2VkR2VvbWV0cnlQb29sU2l6ZSA8PSB0aGlzLl9mbHVzaElkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhY2tlZEdlb21ldHJ5UG9vbFNpemUrKztcbiAgICAgICAgICAgICAgICBwYWNrZWRHZW9tZXRyaWVzW3RoaXMuX2ZsdXNoSWRdID0gbmV3ICh0aGlzLmdlb21ldHJ5Q2xhc3MpKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhY2tlZEdlb21ldHJpZXNbdGhpcy5fZmx1c2hJZF0uX2J1ZmZlci51cGRhdGUoYXR0cmlidXRlQnVmZmVyLnJhd0JpbmFyeURhdGEsIDApO1xuICAgICAgICAgICAgcGFja2VkR2VvbWV0cmllc1t0aGlzLl9mbHVzaElkXS5faW5kZXhCdWZmZXIudXBkYXRlKGluZGV4QnVmZmVyLCAwKTtcblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5nZW9tZXRyeS5iaW5kKHBhY2tlZEdlb21ldHJpZXNbdGhpcy5fZmx1c2hJZF0pO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5nZW9tZXRyeS51cGRhdGVCdWZmZXJzKCk7XG4gICAgICAgICAgICB0aGlzLl9mbHVzaElkKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBsZXRzIHVzZSB0aGUgZmFzdGVyIG9wdGlvbiwgYWx3YXlzIHVzZSBidWZmZXIgbnVtYmVyIDBcbiAgICAgICAgICAgIHBhY2tlZEdlb21ldHJpZXNbdGhpcy5fZmx1c2hJZF0uX2J1ZmZlci51cGRhdGUoYXR0cmlidXRlQnVmZmVyLnJhd0JpbmFyeURhdGEsIDApO1xuICAgICAgICAgICAgcGFja2VkR2VvbWV0cmllc1t0aGlzLl9mbHVzaElkXS5faW5kZXhCdWZmZXIudXBkYXRlKGluZGV4QnVmZmVyLCAwKTtcblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5nZW9tZXRyeS51cGRhdGVCdWZmZXJzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGV4dHVyZVN5c3RlbSA9IHRoaXMucmVuZGVyZXIudGV4dHVyZTtcbiAgICAgICAgdmFyIHN0YXRlU3lzdGVtID0gdGhpcy5yZW5kZXJlci5zdGF0ZTtcblxuICAgICAgICAvLyBVcGxvYWQgdGV4dHVyZXMgYW5kIGRvIHRoZSBkcmF3IGNhbGxzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBncm91cENvdW50OyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBncm91cCA9IGRyYXdDYWxsc1tpXTtcbiAgICAgICAgICAgIHZhciBncm91cFRleHR1cmVDb3VudCA9IGdyb3VwLnRleHR1cmVDb3VudDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBncm91cFRleHR1cmVDb3VudDsgaisrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRleHR1cmVTeXN0ZW0uYmluZChncm91cC50ZXh0dXJlc1tqXSwgaik7XG4gICAgICAgICAgICAgICAgZ3JvdXAudGV4dHVyZXNbal0gPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGF0ZVN5c3RlbS5zZXRCbGVuZE1vZGUoZ3JvdXAuYmxlbmQpO1xuICAgICAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdyb3VwLnR5cGUsIGdyb3VwLnNpemUsIGdsLlVOU0lHTkVEX1NIT1JULCBncm91cC5zdGFydCAqIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVzZXQgZWxlbWVudHMgZm9yIHRoZSBuZXh0IGZsdXNoXG4gICAgICAgIHRoaXMuX2J1ZmZlclNpemUgPSAwO1xuICAgICAgICB0aGlzLl92ZXJ0ZXhDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX2luZGV4Q291bnQgPSAwO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdGFydHMgYSBuZXcgc3ByaXRlIGJhdGNoLlxuICAgICAqL1xuICAgIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiBzdGFydCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zdGF0ZS5zZXQodGhpcy5zdGF0ZSk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5zaGFkZXIuYmluZCh0aGlzLl9zaGFkZXIpO1xuXG4gICAgICAgIGlmIChzZXR0aW5ncy5DQU5fVVBMT0FEX1NBTUVfQlVGRkVSKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBiaW5kIGJ1ZmZlciAjMCwgd2UgZG9uJ3QgbmVlZCBvdGhlcnNcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuZ2VvbWV0cnkuYmluZCh0aGlzLl9wYWNrZWRHZW9tZXRyaWVzW3RoaXMuX2ZsdXNoSWRdKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdG9wcyBhbmQgZmx1c2hlcyB0aGUgY3VycmVudCBiYXRjaC5cbiAgICAgKi9cbiAgICBBYnN0cmFjdEJhdGNoUmVuZGVyZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiBzdG9wICgpXG4gICAge1xuICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgYEFic3RyYWN0QmF0Y2hSZW5kZXJlcmAuIEl0IGNhbm5vdCBiZSB1c2VkIGFnYWluLlxuICAgICAqL1xuICAgIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbiAgICB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fcGFja2VkR2VvbWV0cnlQb29sU2l6ZTsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcGFja2VkR2VvbWV0cmllc1tpXSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYWNrZWRHZW9tZXRyaWVzW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVuZGVyZXIub2ZmKCdwcmVyZW5kZXInLCB0aGlzLm9uUHJlcmVuZGVyLCB0aGlzKTtcblxuICAgICAgICB0aGlzLl9hQnVmZmVycyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lCdWZmZXJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGFja2VkR2VvbWV0cmllcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2RyYXdDYWxscyA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuX3NoYWRlcilcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fc2hhZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3RSZW5kZXJlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGFuIGF0dHJpYnV0ZSBidWZmZXIgZnJvbSBgdGhpcy5fYUJ1ZmZlcnNgIHRoYXRcbiAgICAgKiBjYW4gaG9sZCBhdGxlYXN0IGBzaXplYCBmbG9hdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIG1pbmltdW0gY2FwYWNpdHkgcmVxdWlyZWRcbiAgICAgKiBAcmV0dXJuIHtWaWV3YWJsZUJ1ZmZlcn0gLSBidWZmZXIgdGhhbiBjYW4gaG9sZCBhdGxlYXN0IGBzaXplYCBmbG9hdHNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5wcm90b3R5cGUuZ2V0QXR0cmlidXRlQnVmZmVyID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlQnVmZmVyIChzaXplKVxuICAgIHtcbiAgICAgICAgLy8gOCB2ZXJ0aWNlcyBpcyBlbm91Z2ggZm9yIDIgcXVhZHNcbiAgICAgICAgdmFyIHJvdW5kZWRQMiA9IG5leHRQb3cyKE1hdGguY2VpbChzaXplIC8gOCkpO1xuICAgICAgICB2YXIgcm91bmRlZFNpemVJbmRleCA9IGxvZzIocm91bmRlZFAyKTtcbiAgICAgICAgdmFyIHJvdW5kZWRTaXplID0gcm91bmRlZFAyICogODtcblxuICAgICAgICBpZiAodGhpcy5fYUJ1ZmZlcnMubGVuZ3RoIDw9IHJvdW5kZWRTaXplSW5kZXgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2lCdWZmZXJzLmxlbmd0aCA9IHJvdW5kZWRTaXplSW5kZXggKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuX2FCdWZmZXJzW3JvdW5kZWRTaXplXTtcblxuICAgICAgICBpZiAoIWJ1ZmZlcilcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fYUJ1ZmZlcnNbcm91bmRlZFNpemVdID0gYnVmZmVyID0gbmV3IFZpZXdhYmxlQnVmZmVyKHJvdW5kZWRTaXplICogdGhpcy52ZXJ0ZXhTaXplICogNCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGFuIGluZGV4IGJ1ZmZlciBmcm9tIGB0aGlzLl9pQnVmZmVyc2AgdGhhdCBjYW5cbiAgICAgKiBoYXMgYXRsZWFzdCBgc2l6ZWAgY2FwYWNpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIG1pbmltdW0gcmVxdWlyZWQgY2FwYWNpdHlcbiAgICAgKiBAcmV0dXJuIHtVaW50MTZBcnJheX0gLSBidWZmZXIgdGhhdCBjYW4gZml0IGBzaXplYFxuICAgICAqICAgIGluZGljZXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBBYnN0cmFjdEJhdGNoUmVuZGVyZXIucHJvdG90eXBlLmdldEluZGV4QnVmZmVyID0gZnVuY3Rpb24gZ2V0SW5kZXhCdWZmZXIgKHNpemUpXG4gICAge1xuICAgICAgICAvLyAxMiBpbmRpY2VzIGlzIGVub3VnaCBmb3IgMiBxdWFkc1xuICAgICAgICB2YXIgcm91bmRlZFAyID0gbmV4dFBvdzIoTWF0aC5jZWlsKHNpemUgLyAxMikpO1xuICAgICAgICB2YXIgcm91bmRlZFNpemVJbmRleCA9IGxvZzIocm91bmRlZFAyKTtcbiAgICAgICAgdmFyIHJvdW5kZWRTaXplID0gcm91bmRlZFAyICogMTI7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lCdWZmZXJzLmxlbmd0aCA8PSByb3VuZGVkU2l6ZUluZGV4KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9pQnVmZmVycy5sZW5ndGggPSByb3VuZGVkU2l6ZUluZGV4ICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLl9pQnVmZmVyc1tyb3VuZGVkU2l6ZUluZGV4XTtcblxuICAgICAgICBpZiAoIWJ1ZmZlcilcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5faUJ1ZmZlcnNbcm91bmRlZFNpemVJbmRleF0gPSBidWZmZXIgPSBuZXcgVWludDE2QXJyYXkocm91bmRlZFNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgdGhlIGZvdXIgYmF0Y2hpbmcgcGFyYW1ldGVycyBvZiBgZWxlbWVudGAsIGludGVybGVhdmVzXG4gICAgICogYW5kIHB1c2hlcyB0aGVtIGludG8gdGhlIGJhdGNoaW5nIGF0dHJpYnV0ZS9pbmRleCBidWZmZXJzIGdpdmVuLlxuICAgICAqXG4gICAgICogSXQgdXNlcyB0aGVzZSBwcm9wZXJ0aWVzOiBgdmVydGV4RGF0YWAgYHV2c2AsIGB0ZXh0dXJlSWRgIGFuZFxuICAgICAqIGBpbmRpY2llc2AuIEl0IGFsc28gdXNlcyB0aGUgXCJ0aW50XCIgb2YgdGhlIGJhc2UtdGV4dHVyZSwgaWZcbiAgICAgKiBwcmVzZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlNwcml0ZX0gZWxlbWVudCAtIGVsZW1lbnQgYmVpbmcgcmVuZGVyZWRcbiAgICAgKiBAcGFyYW0ge1BJWEkuVmlld2FibGVCdWZmZXJ9IGF0dHJpYnV0ZUJ1ZmZlciAtIGF0dHJpYnV0ZSBidWZmZXIuXG4gICAgICogQHBhcmFtIHtVaW50MTZBcnJheX0gaW5kZXhCdWZmZXIgLSBpbmRleCBidWZmZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYUluZGV4IC0gbnVtYmVyIG9mIGZsb2F0cyBhbHJlYWR5IGluIHRoZSBhdHRyaWJ1dGUgYnVmZmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlJbmRleCAtIG51bWJlciBvZiBpbmRpY2VzIGFscmVhZHkgaW4gYGluZGV4QnVmZmVyYFxuICAgICAqL1xuICAgIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5wcm90b3R5cGUucGFja0ludGVybGVhdmVkR2VvbWV0cnkgPSBmdW5jdGlvbiBwYWNrSW50ZXJsZWF2ZWRHZW9tZXRyeSAoZWxlbWVudCwgYXR0cmlidXRlQnVmZmVyLCBpbmRleEJ1ZmZlciwgYUluZGV4LCBpSW5kZXgpXG4gICAge1xuICAgICAgICB2YXIgdWludDMyVmlldyA9IGF0dHJpYnV0ZUJ1ZmZlci51aW50MzJWaWV3O1xuICAgICAgICB2YXIgZmxvYXQzMlZpZXcgPSBhdHRyaWJ1dGVCdWZmZXIuZmxvYXQzMlZpZXc7XG5cbiAgICAgICAgdmFyIHBhY2tlZFZlcnRpY2VzID0gYUluZGV4IC8gdGhpcy52ZXJ0ZXhTaXplO1xuICAgICAgICB2YXIgdXZzID0gZWxlbWVudC51dnM7XG4gICAgICAgIHZhciBpbmRpY2llcyA9IGVsZW1lbnQuaW5kaWNlcztcbiAgICAgICAgdmFyIHZlcnRleERhdGEgPSBlbGVtZW50LnZlcnRleERhdGE7XG4gICAgICAgIHZhciB0ZXh0dXJlSWQgPSBlbGVtZW50Ll90ZXh0dXJlLmJhc2VUZXh0dXJlLl9pZDtcblxuICAgICAgICB2YXIgYWxwaGEgPSBNYXRoLm1pbihlbGVtZW50LndvcmxkQWxwaGEsIDEuMCk7XG4gICAgICAgIHZhciBhcmdiID0gKGFscGhhIDwgMS4wXG4gICAgICAgICAgJiYgZWxlbWVudC5fdGV4dHVyZS5iYXNlVGV4dHVyZS5wcmVtdWx0aXBseUFscGhhKVxuICAgICAgICAgICAgPyBwcmVtdWx0aXBseVRpbnQoZWxlbWVudC5fdGludFJHQiwgYWxwaGEpXG4gICAgICAgICAgICA6IGVsZW1lbnQuX3RpbnRSR0IgKyAoYWxwaGEgKiAyNTUgPDwgMjQpO1xuXG4gICAgICAgIC8vIGxldHMgbm90IHdvcnJ5IGFib3V0IHRpbnQhIGZvciBub3cuLlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRleERhdGEubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZsb2F0MzJWaWV3W2FJbmRleCsrXSA9IHZlcnRleERhdGFbaV07XG4gICAgICAgICAgICBmbG9hdDMyVmlld1thSW5kZXgrK10gPSB2ZXJ0ZXhEYXRhW2kgKyAxXTtcbiAgICAgICAgICAgIGZsb2F0MzJWaWV3W2FJbmRleCsrXSA9IHV2c1tpXTtcbiAgICAgICAgICAgIGZsb2F0MzJWaWV3W2FJbmRleCsrXSA9IHV2c1tpICsgMV07XG4gICAgICAgICAgICB1aW50MzJWaWV3W2FJbmRleCsrXSA9IGFyZ2I7XG4gICAgICAgICAgICBmbG9hdDMyVmlld1thSW5kZXgrK10gPSB0ZXh0dXJlSWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBpbmRpY2llcy5sZW5ndGg7IGkkMSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBpbmRleEJ1ZmZlcltpSW5kZXgrK10gPSBwYWNrZWRWZXJ0aWNlcyArIGluZGljaWVzW2kkMV07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEFic3RyYWN0QmF0Y2hSZW5kZXJlcjtcbn0oT2JqZWN0UmVuZGVyZXIpKTtcblxuLyoqXG4gKiBIZWxwZXIgdGhhdCBnZW5lcmF0ZXMgYmF0Y2hpbmcgbXVsdGktdGV4dHVyZSBzaGFkZXIuIFVzZSBpdCB3aXRoIHlvdXIgbmV3IEJhdGNoUmVuZGVyZXJcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBCYXRjaFNoYWRlckdlbmVyYXRvciA9IGZ1bmN0aW9uIEJhdGNoU2hhZGVyR2VuZXJhdG9yKHZlcnRleFNyYywgZnJhZ1RlbXBsYXRlKVxue1xuICAgIC8qKlxuICAgICAqIFJlZmVyZW5jZSB0byB0aGUgdmVydGV4IHNoYWRlciBzb3VyY2UuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0ZXhTcmMgPSB2ZXJ0ZXhTcmM7XG5cbiAgICAvKipcbiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGZyYWdlbWVudCBzaGFkZXIgdGVtcGxhdGUuIE11c3QgY29udGFpbiBcIiVjb3VudCVcIiBhbmQgXCIlZm9ybG9vcCVcIi5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmZyYWdUZW1wbGF0ZSA9IGZyYWdUZW1wbGF0ZTtcblxuICAgIHRoaXMucHJvZ3JhbUNhY2hlID0ge307XG4gICAgdGhpcy5kZWZhdWx0R3JvdXBDYWNoZSA9IHt9O1xuXG4gICAgaWYgKGZyYWdUZW1wbGF0ZS5pbmRleE9mKCclY291bnQlJykgPCAwKVxuICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGcmFnbWVudCB0ZW1wbGF0ZSBtdXN0IGNvbnRhaW4gXCIlY291bnQlXCIuJyk7XG4gICAgfVxuXG4gICAgaWYgKGZyYWdUZW1wbGF0ZS5pbmRleE9mKCclZm9ybG9vcCUnKSA8IDApXG4gICAge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZyYWdtZW50IHRlbXBsYXRlIG11c3QgY29udGFpbiBcIiVmb3Jsb29wJVwiLicpO1xuICAgIH1cbn07XG5cbkJhdGNoU2hhZGVyR2VuZXJhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZVNoYWRlciA9IGZ1bmN0aW9uIGdlbmVyYXRlU2hhZGVyIChtYXhUZXh0dXJlcylcbntcbiAgICBpZiAoIXRoaXMucHJvZ3JhbUNhY2hlW21heFRleHR1cmVzXSlcbiAgICB7XG4gICAgICAgIHZhciBzYW1wbGVWYWx1ZXMgPSBuZXcgSW50MzJBcnJheShtYXhUZXh0dXJlcyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhUZXh0dXJlczsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBzYW1wbGVWYWx1ZXNbaV0gPSBpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZWZhdWx0R3JvdXBDYWNoZVttYXhUZXh0dXJlc10gPSBVbmlmb3JtR3JvdXAuZnJvbSh7IHVTYW1wbGVyczogc2FtcGxlVmFsdWVzIH0sIHRydWUpO1xuXG4gICAgICAgIHZhciBmcmFnbWVudFNyYyA9IHRoaXMuZnJhZ1RlbXBsYXRlO1xuXG4gICAgICAgIGZyYWdtZW50U3JjID0gZnJhZ21lbnRTcmMucmVwbGFjZSgvJWNvdW50JS9naSwgKFwiXCIgKyBtYXhUZXh0dXJlcykpO1xuICAgICAgICBmcmFnbWVudFNyYyA9IGZyYWdtZW50U3JjLnJlcGxhY2UoLyVmb3Jsb29wJS9naSwgdGhpcy5nZW5lcmF0ZVNhbXBsZVNyYyhtYXhUZXh0dXJlcykpO1xuXG4gICAgICAgIHRoaXMucHJvZ3JhbUNhY2hlW21heFRleHR1cmVzXSA9IG5ldyBQcm9ncmFtKHRoaXMudmVydGV4U3JjLCBmcmFnbWVudFNyYyk7XG4gICAgfVxuXG4gICAgdmFyIHVuaWZvcm1zID0ge1xuICAgICAgICB0aW50OiBuZXcgRmxvYXQzMkFycmF5KFsxLCAxLCAxLCAxXSksXG4gICAgICAgIHRyYW5zbGF0aW9uTWF0cml4OiBuZXcgTWF0cml4KCksXG4gICAgICAgIGRlZmF1bHQ6IHRoaXMuZGVmYXVsdEdyb3VwQ2FjaGVbbWF4VGV4dHVyZXNdLFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFNoYWRlcih0aGlzLnByb2dyYW1DYWNoZVttYXhUZXh0dXJlc10sIHVuaWZvcm1zKTtcbn07XG5cbkJhdGNoU2hhZGVyR2VuZXJhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZVNhbXBsZVNyYyA9IGZ1bmN0aW9uIGdlbmVyYXRlU2FtcGxlU3JjIChtYXhUZXh0dXJlcylcbntcbiAgICB2YXIgc3JjID0gJyc7XG5cbiAgICBzcmMgKz0gJ1xcbic7XG4gICAgc3JjICs9ICdcXG4nO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhUZXh0dXJlczsgaSsrKVxuICAgIHtcbiAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICB7XG4gICAgICAgICAgICBzcmMgKz0gJ1xcbmVsc2UgJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpIDwgbWF4VGV4dHVyZXMgLSAxKVxuICAgICAgICB7XG4gICAgICAgICAgICBzcmMgKz0gXCJpZih2VGV4dHVyZUlkIDwgXCIgKyBpICsgXCIuNSlcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNyYyArPSAnXFxueyc7XG4gICAgICAgIHNyYyArPSBcIlxcblxcdGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1tcIiArIGkgKyBcIl0sIHZUZXh0dXJlQ29vcmQpO1wiO1xuICAgICAgICBzcmMgKz0gJ1xcbn0nO1xuICAgIH1cblxuICAgIHNyYyArPSAnXFxuJztcbiAgICBzcmMgKz0gJ1xcbic7XG5cbiAgICByZXR1cm4gc3JjO1xufTtcblxuLyoqXG4gKiBHZW9tZXRyeSB1c2VkIHRvIGJhdGNoIHN0YW5kYXJkIFBJWEkgY29udGVudCAoZS5nLiBNZXNoLCBTcHJpdGUsIEdyYXBoaWNzIG9iamVjdHMpLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEJhdGNoR2VvbWV0cnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChHZW9tZXRyeSkge1xuICAgIGZ1bmN0aW9uIEJhdGNoR2VvbWV0cnkoX3N0YXRpYylcbiAgICB7XG4gICAgICAgIGlmICggX3N0YXRpYyA9PT0gdm9pZCAwICkgX3N0YXRpYyA9IGZhbHNlO1xuXG4gICAgICAgIEdlb21ldHJ5LmNhbGwodGhpcyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJ1ZmZlciB1c2VkIGZvciBwb3NpdGlvbiwgY29sb3IsIHRleHR1cmUgSURzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuQnVmZmVyfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9idWZmZXIgPSBuZXcgQnVmZmVyKG51bGwsIF9zdGF0aWMsIGZhbHNlKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5kZXggYnVmZmVyIGRhdGFcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5CdWZmZXJ9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2luZGV4QnVmZmVyID0gbmV3IEJ1ZmZlcihudWxsLCBfc3RhdGljLCB0cnVlKTtcblxuICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZSgnYVZlcnRleFBvc2l0aW9uJywgdGhpcy5fYnVmZmVyLCAyLCBmYWxzZSwgVFlQRVMuRkxPQVQpXG4gICAgICAgICAgICAuYWRkQXR0cmlidXRlKCdhVGV4dHVyZUNvb3JkJywgdGhpcy5fYnVmZmVyLCAyLCBmYWxzZSwgVFlQRVMuRkxPQVQpXG4gICAgICAgICAgICAuYWRkQXR0cmlidXRlKCdhQ29sb3InLCB0aGlzLl9idWZmZXIsIDQsIHRydWUsIFRZUEVTLlVOU0lHTkVEX0JZVEUpXG4gICAgICAgICAgICAuYWRkQXR0cmlidXRlKCdhVGV4dHVyZUlkJywgdGhpcy5fYnVmZmVyLCAxLCB0cnVlLCBUWVBFUy5GTE9BVClcbiAgICAgICAgICAgIC5hZGRJbmRleCh0aGlzLl9pbmRleEJ1ZmZlcik7XG4gICAgfVxuXG4gICAgaWYgKCBHZW9tZXRyeSApIEJhdGNoR2VvbWV0cnkuX19wcm90b19fID0gR2VvbWV0cnk7XG4gICAgQmF0Y2hHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeSAmJiBHZW9tZXRyeS5wcm90b3R5cGUgKTtcbiAgICBCYXRjaEdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJhdGNoR2VvbWV0cnk7XG5cbiAgICByZXR1cm4gQmF0Y2hHZW9tZXRyeTtcbn0oR2VvbWV0cnkpKTtcblxudmFyIGRlZmF1bHRWZXJ0ZXgkMiA9IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbmF0dHJpYnV0ZSB2ZWMyIGFWZXJ0ZXhQb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiBhVGV4dHVyZUNvb3JkO1xcbmF0dHJpYnV0ZSB2ZWM0IGFDb2xvcjtcXG5hdHRyaWJ1dGUgZmxvYXQgYVRleHR1cmVJZDtcXG5cXG51bmlmb3JtIG1hdDMgcHJvamVjdGlvbk1hdHJpeDtcXG51bmlmb3JtIG1hdDMgdHJhbnNsYXRpb25NYXRyaXg7XFxudW5pZm9ybSB2ZWM0IHRpbnQ7XFxuXFxudmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxudmFyeWluZyB2ZWM0IHZDb2xvcjtcXG52YXJ5aW5nIGZsb2F0IHZUZXh0dXJlSWQ7XFxuXFxudm9pZCBtYWluKHZvaWQpe1xcbiAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoKHByb2plY3Rpb25NYXRyaXggKiB0cmFuc2xhdGlvbk1hdHJpeCAqIHZlYzMoYVZlcnRleFBvc2l0aW9uLCAxLjApKS54eSwgMC4wLCAxLjApO1xcblxcbiAgICB2VGV4dHVyZUNvb3JkID0gYVRleHR1cmVDb29yZDtcXG4gICAgdlRleHR1cmVJZCA9IGFUZXh0dXJlSWQ7XFxuICAgIHZDb2xvciA9IGFDb2xvciAqIHRpbnQ7XFxufVxcblwiO1xuXG52YXIgZGVmYXVsdEZyYWdtZW50JDIgPSBcInZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xcbnZhcnlpbmcgdmVjNCB2Q29sb3I7XFxudmFyeWluZyBmbG9hdCB2VGV4dHVyZUlkO1xcbnVuaWZvcm0gc2FtcGxlcjJEIHVTYW1wbGVyc1slY291bnQlXTtcXG5cXG52b2lkIG1haW4odm9pZCl7XFxuICAgIHZlYzQgY29sb3I7XFxuICAgICVmb3Jsb29wJVxcbiAgICBnbF9GcmFnQ29sb3IgPSBjb2xvciAqIHZDb2xvcjtcXG59XFxuXCI7XG5cbi8qKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQGhpZGVjb25zdHJ1Y3RvclxuICovXG52YXIgQmF0Y2hQbHVnaW5GYWN0b3J5ID0gZnVuY3Rpb24gQmF0Y2hQbHVnaW5GYWN0b3J5ICgpIHt9O1xuXG52YXIgc3RhdGljQWNjZXNzb3JzJDEgPSB7IGRlZmF1bHRWZXJ0ZXhTcmM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sZGVmYXVsdEZyYWdtZW50VGVtcGxhdGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuQmF0Y2hQbHVnaW5GYWN0b3J5LmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSAob3B0aW9ucylcbntcbiAgICB2YXIgcmVmID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIHZlcnRleDogZGVmYXVsdFZlcnRleCQyLFxuICAgICAgICBmcmFnbWVudDogZGVmYXVsdEZyYWdtZW50JDIsXG4gICAgICAgIGdlb21ldHJ5Q2xhc3M6IEJhdGNoR2VvbWV0cnksXG4gICAgICAgIHZlcnRleFNpemU6IDYsXG4gICAgfSwgb3B0aW9ucyk7XG4gICAgICAgIHZhciB2ZXJ0ZXggPSByZWYudmVydGV4O1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSByZWYuZnJhZ21lbnQ7XG4gICAgICAgIHZhciB2ZXJ0ZXhTaXplID0gcmVmLnZlcnRleFNpemU7XG4gICAgICAgIHZhciBnZW9tZXRyeUNsYXNzID0gcmVmLmdlb21ldHJ5Q2xhc3M7XG5cbiAgICByZXR1cm4gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQWJzdHJhY3RCYXRjaFJlbmRlcmVyKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBCYXRjaFBsdWdpbihyZW5kZXJlcilcbiAgICAgICAge1xuICAgICAgICAgICAgQWJzdHJhY3RCYXRjaFJlbmRlcmVyLmNhbGwodGhpcywgcmVuZGVyZXIpO1xuXG4gICAgICAgICAgICB0aGlzLnNoYWRlckdlbmVyYXRvciA9IG5ldyBCYXRjaFNoYWRlckdlbmVyYXRvcih2ZXJ0ZXgsIGZyYWdtZW50KTtcbiAgICAgICAgICAgIHRoaXMuZ2VvbWV0cnlDbGFzcyA9IGdlb21ldHJ5Q2xhc3M7XG4gICAgICAgICAgICB0aGlzLnZlcnRleFNpemUgPSB2ZXJ0ZXhTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggQWJzdHJhY3RCYXRjaFJlbmRlcmVyICkgQmF0Y2hQbHVnaW4uX19wcm90b19fID0gQWJzdHJhY3RCYXRjaFJlbmRlcmVyO1xuICAgICAgICAgICAgQmF0Y2hQbHVnaW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQWJzdHJhY3RCYXRjaFJlbmRlcmVyICYmIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5wcm90b3R5cGUgKTtcbiAgICAgICAgICAgIEJhdGNoUGx1Z2luLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJhdGNoUGx1Z2luO1xuXG4gICAgICAgICAgICByZXR1cm4gQmF0Y2hQbHVnaW47XG4gICAgICAgIH0oQWJzdHJhY3RCYXRjaFJlbmRlcmVyKSk7XG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHZlcnRleCBzaGFkZXIgc291cmNlXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdGFudFxuICovXG5zdGF0aWNBY2Nlc3NvcnMkMS5kZWZhdWx0VmVydGV4U3JjLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIGRlZmF1bHRWZXJ0ZXgkMjtcbn07XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgZnJhZ21lbnQgc2hhZGVyIHNvdXJjZVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAY29uc3RhbnRcbiAqL1xuc3RhdGljQWNjZXNzb3JzJDEuZGVmYXVsdEZyYWdtZW50VGVtcGxhdGUuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gZGVmYXVsdEZyYWdtZW50JDI7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggQmF0Y2hQbHVnaW5GYWN0b3J5LCBzdGF0aWNBY2Nlc3NvcnMkMSApO1xuXG4vLyBTZXR1cCB0aGUgZGVmYXVsdCBCYXRjaFJlbmRlcmVyIHBsdWdpbiwgdGhpcyBpcyB3aGF0XG4vLyB3ZSdsbCBhY3R1YWxseSBleHBvcnQgYXQgdGhlIHJvb3QgbGV2ZWxcbnZhciBCYXRjaFJlbmRlcmVyID0gQmF0Y2hQbHVnaW5GYWN0b3J5LmNyZWF0ZSgpO1xuXG5leHBvcnQgeyBBYnN0cmFjdEJhdGNoUmVuZGVyZXIsIEFic3RyYWN0UmVuZGVyZXIsIEF0dHJpYnV0ZSwgQmFzZVJlbmRlclRleHR1cmUsIEJhc2VUZXh0dXJlLCBCYXRjaERyYXdDYWxsLCBCYXRjaEdlb21ldHJ5LCBCYXRjaFBsdWdpbkZhY3RvcnksIEJhdGNoUmVuZGVyZXIsIEJhdGNoU2hhZGVyR2VuZXJhdG9yLCBCdWZmZXIsIEN1YmVUZXh0dXJlLCBGaWx0ZXIsIEZyYW1lYnVmZmVyLCBHTFByb2dyYW0sIEJhc2VUZXh0dXJlIGFzIEdMVGV4dHVyZSwgR2VvbWV0cnksIE9iamVjdFJlbmRlcmVyLCBQcm9ncmFtLCBRdWFkLCBRdWFkVXYsIFJlbmRlclRleHR1cmUsIFJlbmRlclRleHR1cmVQb29sLCBSZW5kZXJlciwgU2hhZGVyLCBTcHJpdGVNYXNrRmlsdGVyLCBTdGF0ZSwgU3lzdGVtLCBUZXh0dXJlLCBUZXh0dXJlTWF0cml4LCBUZXh0dXJlVXZzLCBVbmlmb3JtR3JvdXAsIFZpZXdhYmxlQnVmZmVyLCBhdXRvRGV0ZWN0UmVuZGVyZXIsIGNoZWNrTWF4SWZTdGF0ZW1lbnRzSW5TaGFkZXIsIGRlZmF1bHRGaWx0ZXIgYXMgZGVmYXVsdEZpbHRlclZlcnRleCwgX2RlZmF1bHQgYXMgZGVmYXVsdFZlcnRleCwgaW5kZXggYXMgcmVzb3VyY2VzLCBzeXN0ZW1zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3JlLmVzLmpzLm1hcFxuIiwiLyohXG4gKiBAcGl4aS9maWx0ZXItcGl4ZWxhdGUgLSB2My4wLjNcbiAqIENvbXBpbGVkIFdlZCwgMjkgTWF5IDIwMTkgMDM6MDQ6MDUgVVRDXG4gKlxuICogQHBpeGkvZmlsdGVyLXBpeGVsYXRlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSAnQHBpeGkvY29yZSc7XG5cbnZhciB2ZXJ0ZXggPSBcImF0dHJpYnV0ZSB2ZWMyIGFWZXJ0ZXhQb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiBhVGV4dHVyZUNvb3JkO1xcblxcbnVuaWZvcm0gbWF0MyBwcm9qZWN0aW9uTWF0cml4O1xcblxcbnZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xcblxcbnZvaWQgbWFpbih2b2lkKVxcbntcXG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KChwcm9qZWN0aW9uTWF0cml4ICogdmVjMyhhVmVydGV4UG9zaXRpb24sIDEuMCkpLnh5LCAwLjAsIDEuMCk7XFxuICAgIHZUZXh0dXJlQ29vcmQgPSBhVGV4dHVyZUNvb3JkO1xcbn1cIjtcblxudmFyIGZyYWdtZW50ID0gXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG51bmlmb3JtIHZlYzIgc2l6ZTtcXG51bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcXG5cXG51bmlmb3JtIHZlYzQgZmlsdGVyQXJlYTtcXG5cXG52ZWMyIG1hcENvb3JkKCB2ZWMyIGNvb3JkIClcXG57XFxuICAgIGNvb3JkICo9IGZpbHRlckFyZWEueHk7XFxuICAgIGNvb3JkICs9IGZpbHRlckFyZWEuenc7XFxuXFxuICAgIHJldHVybiBjb29yZDtcXG59XFxuXFxudmVjMiB1bm1hcENvb3JkKCB2ZWMyIGNvb3JkIClcXG57XFxuICAgIGNvb3JkIC09IGZpbHRlckFyZWEuenc7XFxuICAgIGNvb3JkIC89IGZpbHRlckFyZWEueHk7XFxuXFxuICAgIHJldHVybiBjb29yZDtcXG59XFxuXFxudmVjMiBwaXhlbGF0ZSh2ZWMyIGNvb3JkLCB2ZWMyIHNpemUpXFxue1xcblxcdHJldHVybiBmbG9vciggY29vcmQgLyBzaXplICkgKiBzaXplO1xcbn1cXG5cXG52b2lkIG1haW4odm9pZClcXG57XFxuICAgIHZlYzIgY29vcmQgPSBtYXBDb29yZCh2VGV4dHVyZUNvb3JkKTtcXG5cXG4gICAgY29vcmQgPSBwaXhlbGF0ZShjb29yZCwgc2l6ZSk7XFxuXFxuICAgIGNvb3JkID0gdW5tYXBDb29yZChjb29yZCk7XFxuXFxuICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlciwgY29vcmQpO1xcbn1cXG5cIjtcblxuLyoqXG4gKiBUaGlzIGZpbHRlciBhcHBsaWVzIGEgcGl4ZWxhdGUgZWZmZWN0IG1ha2luZyBkaXNwbGF5IG9iamVjdHMgYXBwZWFyICdibG9ja3knLjxicj5cbiAqICFbb3JpZ2luYWxdKC4uL3Rvb2xzL3NjcmVlbnNob3RzL2Rpc3Qvb3JpZ2luYWwucG5nKSFbZmlsdGVyXSguLi90b29scy9zY3JlZW5zaG90cy9kaXN0L3BpeGVsYXRlLnBuZylcbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuRmlsdGVyXG4gKiBAbWVtYmVyb2YgUElYSS5maWx0ZXJzXG4gKiBAc2VlIHtAbGluayBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AcGl4aS9maWx0ZXItcGl4ZWxhdGV8QHBpeGkvZmlsdGVyLXBpeGVsYXRlfVxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGl4aS1maWx0ZXJzfHBpeGktZmlsdGVyc31cbiAqIEBwYXJhbSB7UElYSS5Qb2ludHxBcnJheTxudW1iZXI+fG51bWJlcn0gW3NpemU9MTBdIEVpdGhlciB0aGUgd2lkdGgvaGVpZ2h0IG9mIHRoZSBzaXplIG9mIHRoZSBwaXhlbHMsIG9yIHNxdWFyZSBzaXplXG4gKi9cbnZhciBQaXhlbGF0ZUZpbHRlciA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEZpbHRlcikge1xuICAgIGZ1bmN0aW9uIFBpeGVsYXRlRmlsdGVyKHNpemUpIHtcbiAgICAgICAgaWYgKCBzaXplID09PSB2b2lkIDAgKSBzaXplID0gMTA7XG5cbiAgICAgICAgRmlsdGVyLmNhbGwodGhpcywgdmVydGV4LCBmcmFnbWVudCk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgfVxuXG4gICAgaWYgKCBGaWx0ZXIgKSBQaXhlbGF0ZUZpbHRlci5fX3Byb3RvX18gPSBGaWx0ZXI7XG4gICAgUGl4ZWxhdGVGaWx0ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRmlsdGVyICYmIEZpbHRlci5wcm90b3R5cGUgKTtcbiAgICBQaXhlbGF0ZUZpbHRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQaXhlbGF0ZUZpbHRlcjtcblxuICAgIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHNpemU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgYSBwb2ludCB0aGF0IGRlc2NyaWJlcyB0aGUgc2l6ZSBvZiB0aGUgYmxvY2tzLlxuICAgICAqIHggaXMgdGhlIHdpZHRoIG9mIHRoZSBibG9jayBhbmQgeSBpcyB0aGUgaGVpZ2h0LlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5Qb2ludHxBcnJheTxudW1iZXI+fG51bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxMFxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5zaXplLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuc2l6ZTtcbiAgICB9O1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5zaXplLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdmFsdWUgPSBbdmFsdWUsIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuaWZvcm1zLnNpemUgPSB2YWx1ZTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFBpeGVsYXRlRmlsdGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICByZXR1cm4gUGl4ZWxhdGVGaWx0ZXI7XG59KEZpbHRlcikpO1xuXG5leHBvcnQgeyBQaXhlbGF0ZUZpbHRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLXBpeGVsYXRlLmVzbS5qcy5tYXBcbiIsIi8qIVxuICogQHBpeGkvZmlsdGVyLWNvbG9yLXJlcGxhY2UgLSB2My4wLjNcbiAqIENvbXBpbGVkIFdlZCwgMjkgTWF5IDIwMTkgMDM6MDQ6MDUgVVRDXG4gKlxuICogQHBpeGkvZmlsdGVyLWNvbG9yLXJlcGxhY2UgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovXG5pbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICdAcGl4aS9jb3JlJztcbmltcG9ydCB7IGhleDJyZ2IsIHJnYjJoZXggfSBmcm9tICdAcGl4aS91dGlscyc7XG5cbnZhciB2ZXJ0ZXggPSBcImF0dHJpYnV0ZSB2ZWMyIGFWZXJ0ZXhQb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiBhVGV4dHVyZUNvb3JkO1xcblxcbnVuaWZvcm0gbWF0MyBwcm9qZWN0aW9uTWF0cml4O1xcblxcbnZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xcblxcbnZvaWQgbWFpbih2b2lkKVxcbntcXG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KChwcm9qZWN0aW9uTWF0cml4ICogdmVjMyhhVmVydGV4UG9zaXRpb24sIDEuMCkpLnh5LCAwLjAsIDEuMCk7XFxuICAgIHZUZXh0dXJlQ29vcmQgPSBhVGV4dHVyZUNvb3JkO1xcbn1cIjtcblxudmFyIGZyYWdtZW50ID0gXCJ2YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG51bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcXG51bmlmb3JtIHZlYzMgb3JpZ2luYWxDb2xvcjtcXG51bmlmb3JtIHZlYzMgbmV3Q29sb3I7XFxudW5pZm9ybSBmbG9hdCBlcHNpbG9uO1xcbnZvaWQgbWFpbih2b2lkKSB7XFxuICAgIHZlYzQgY3VycmVudENvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyLCB2VGV4dHVyZUNvb3JkKTtcXG4gICAgdmVjMyBjb2xvckRpZmYgPSBvcmlnaW5hbENvbG9yIC0gKGN1cnJlbnRDb2xvci5yZ2IgLyBtYXgoY3VycmVudENvbG9yLmEsIDAuMDAwMDAwMDAwMSkpO1xcbiAgICBmbG9hdCBjb2xvckRpc3RhbmNlID0gbGVuZ3RoKGNvbG9yRGlmZik7XFxuICAgIGZsb2F0IGRvUmVwbGFjZSA9IHN0ZXAoY29sb3JEaXN0YW5jZSwgZXBzaWxvbik7XFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQobWl4KGN1cnJlbnRDb2xvci5yZ2IsIChuZXdDb2xvciArIGNvbG9yRGlmZikgKiBjdXJyZW50Q29sb3IuYSwgZG9SZXBsYWNlKSwgY3VycmVudENvbG9yLmEpO1xcbn1cXG5cIjtcblxuLyoqXG4gKiBDb2xvclJlcGxhY2VGaWx0ZXIsIG9yaWdpbmFsbHkgYnkgbWlzaGFhLCB1cGRhdGVkIGJ5IHRpbWV0b2NvZGVcbiAqIGh0dHA6Ly93d3cuaHRtbDVnYW1lZGV2cy5jb20vdG9waWMvMTA2NDAtb3V0bGluZS1hLXNwcml0ZS1jaGFuZ2UtY2VydGFpbi1jb2xvcnMvP3A9Njk5NjY8YnI+XG4gKiAhW29yaWdpbmFsXSguLi90b29scy9zY3JlZW5zaG90cy9kaXN0L29yaWdpbmFsLnBuZykhW2ZpbHRlcl0oLi4vdG9vbHMvc2NyZWVuc2hvdHMvZGlzdC9jb2xvci1yZXBsYWNlLnBuZylcbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuRmlsdGVyXG4gKiBAbWVtYmVyb2YgUElYSS5maWx0ZXJzXG4gKiBAc2VlIHtAbGluayBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AcGl4aS9maWx0ZXItY29sb3ItcmVwbGFjZXxAcGl4aS9maWx0ZXItY29sb3ItcmVwbGFjZX1cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3BpeGktZmlsdGVyc3xwaXhpLWZpbHRlcnN9XG4gKiBAcGFyYW0ge251bWJlcnxBcnJheTxudW1iZXI+fSBbb3JpZ2luYWxDb2xvcj0weEZGMDAwMF0gVGhlIGNvbG9yIHRoYXQgd2lsbCBiZSBjaGFuZ2VkLCBhcyBhIDMgY29tcG9uZW50IFJHQiBlLmcuIFsxLjAsIDEuMCwgMS4wXVxuICogQHBhcmFtIHtudW1iZXJ8QXJyYXk8bnVtYmVyPn0gW25ld0NvbG9yPTB4MDAwMDAwXSBUaGUgcmVzdWx0aW5nIGNvbG9yLCBhcyBhIDMgY29tcG9uZW50IFJHQiBlLmcuIFsxLjAsIDAuNSwgMS4wXVxuICogQHBhcmFtIHtudW1iZXJ9IFtlcHNpbG9uPTAuNF0gVG9sZXJhbmNlL3NlbnNpdGl2aXR5IG9mIHRoZSBmbG9hdGluZy1wb2ludCBjb21wYXJpc29uIGJldHdlZW4gY29sb3JzIChsb3dlciA9IG1vcmUgZXhhY3QsIGhpZ2hlciA9IG1vcmUgaW5jbHVzaXZlKVxuICpcbiAqIEBleGFtcGxlXG4gKiAgLy8gcmVwbGFjZXMgdHJ1ZSByZWQgd2l0aCB0cnVlIGJsdWVcbiAqICBzb21lU3ByaXRlLmZpbHRlcnMgPSBbbmV3IENvbG9yUmVwbGFjZUZpbHRlcihcbiAqICAgWzEsIDAsIDBdLFxuICogICBbMCwgMCwgMV0sXG4gKiAgIDAuMDAxXG4gKiAgICldO1xuICogIC8vIHJlcGxhY2VzIHRoZSBSR0IgY29sb3IgMjIwLCAyMjAsIDIyMCB3aXRoIHRoZSBSR0IgY29sb3IgMjI1LCAyMDAsIDIxNVxuICogIHNvbWVPdGhlclNwcml0ZS5maWx0ZXJzID0gW25ldyBDb2xvclJlcGxhY2VGaWx0ZXIoXG4gKiAgIFsyMjAvMjU1LjAsIDIyMC8yNTUuMCwgMjIwLzI1NS4wXSxcbiAqICAgWzIyNS8yNTUuMCwgMjAwLzI1NS4wLCAyMTUvMjU1LjBdLFxuICogICAwLjAwMVxuICogICApXTtcbiAqICAvLyByZXBsYWNlcyB0aGUgUkdCIGNvbG9yIDIyMCwgMjIwLCAyMjAgd2l0aCB0aGUgUkdCIGNvbG9yIDIyNSwgMjAwLCAyMTVcbiAqICBzb21lT3RoZXJTcHJpdGUuZmlsdGVycyA9IFtuZXcgQ29sb3JSZXBsYWNlRmlsdGVyKDB4ZGNkY2RjLCAweGUxYzhkNywgMC4wMDEpXTtcbiAqXG4gKi9cbnZhciBDb2xvclJlcGxhY2VGaWx0ZXIgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChGaWx0ZXIpIHtcbiAgICBmdW5jdGlvbiBDb2xvclJlcGxhY2VGaWx0ZXIob3JpZ2luYWxDb2xvciwgbmV3Q29sb3IsIGVwc2lsb24pIHtcbiAgICAgICAgaWYgKCBvcmlnaW5hbENvbG9yID09PSB2b2lkIDAgKSBvcmlnaW5hbENvbG9yID0gMHhGRjAwMDA7XG4gICAgICAgIGlmICggbmV3Q29sb3IgPT09IHZvaWQgMCApIG5ld0NvbG9yID0gMHgwMDAwMDA7XG4gICAgICAgIGlmICggZXBzaWxvbiA9PT0gdm9pZCAwICkgZXBzaWxvbiA9IDAuNDtcblxuICAgICAgICBGaWx0ZXIuY2FsbCh0aGlzLCB2ZXJ0ZXgsIGZyYWdtZW50KTtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5vcmlnaW5hbENvbG9yID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5uZXdDb2xvciA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIHRoaXMub3JpZ2luYWxDb2xvciA9IG9yaWdpbmFsQ29sb3I7XG4gICAgICAgIHRoaXMubmV3Q29sb3IgPSBuZXdDb2xvcjtcbiAgICAgICAgdGhpcy5lcHNpbG9uID0gZXBzaWxvbjtcbiAgICB9XG5cbiAgICBpZiAoIEZpbHRlciApIENvbG9yUmVwbGFjZUZpbHRlci5fX3Byb3RvX18gPSBGaWx0ZXI7XG4gICAgQ29sb3JSZXBsYWNlRmlsdGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEZpbHRlciAmJiBGaWx0ZXIucHJvdG90eXBlICk7XG4gICAgQ29sb3JSZXBsYWNlRmlsdGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbG9yUmVwbGFjZUZpbHRlcjtcblxuICAgIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IG9yaWdpbmFsQ29sb3I6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbmV3Q29sb3I6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sZXBzaWxvbjogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbG9yIHRoYXQgd2lsbCBiZSBjaGFuZ2VkLCBhcyBhIDMgY29tcG9uZW50IFJHQiBlLmcuIFsxLjAsIDEuMCwgMS4wXVxuICAgICAqIEBtZW1iZXIge251bWJlcnxBcnJheTxudW1iZXI+fVxuICAgICAqIEBkZWZhdWx0IDB4RkYwMDAwXG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLm9yaWdpbmFsQ29sb3Iuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBhcnIgPSB0aGlzLnVuaWZvcm1zLm9yaWdpbmFsQ29sb3I7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBoZXgycmdiKHZhbHVlLCBhcnIpO1xuICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxDb2xvciA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXJyWzBdID0gdmFsdWVbMF07XG4gICAgICAgICAgICBhcnJbMV0gPSB2YWx1ZVsxXTtcbiAgICAgICAgICAgIGFyclsyXSA9IHZhbHVlWzJdO1xuICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxDb2xvciA9IHJnYjJoZXgoYXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLm9yaWdpbmFsQ29sb3IuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JpZ2luYWxDb2xvcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlc3VsdGluZyBjb2xvciwgYXMgYSAzIGNvbXBvbmVudCBSR0IgZS5nLiBbMS4wLCAwLjUsIDEuMF1cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ8QXJyYXk8bnVtYmVyPn1cbiAgICAgKiBAZGVmYXVsdCAweDAwMDAwMFxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5uZXdDb2xvci5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGFyciA9IHRoaXMudW5pZm9ybXMubmV3Q29sb3I7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBoZXgycmdiKHZhbHVlLCBhcnIpO1xuICAgICAgICAgICAgdGhpcy5fbmV3Q29sb3IgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFyclswXSA9IHZhbHVlWzBdO1xuICAgICAgICAgICAgYXJyWzFdID0gdmFsdWVbMV07XG4gICAgICAgICAgICBhcnJbMl0gPSB2YWx1ZVsyXTtcbiAgICAgICAgICAgIHRoaXMuX25ld0NvbG9yID0gcmdiMmhleChhcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMubmV3Q29sb3IuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmV3Q29sb3I7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRvbGVyYW5jZS9zZW5zaXRpdml0eSBvZiB0aGUgZmxvYXRpbmctcG9pbnQgY29tcGFyaXNvbiBiZXR3ZWVuIGNvbG9ycyAobG93ZXIgPSBtb3JlIGV4YWN0LCBoaWdoZXIgPSBtb3JlIGluY2x1c2l2ZSlcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMC40XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmVwc2lsb24uc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuZXBzaWxvbiA9IHZhbHVlO1xuICAgIH07XG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmVwc2lsb24uZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5lcHNpbG9uO1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggQ29sb3JSZXBsYWNlRmlsdGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICByZXR1cm4gQ29sb3JSZXBsYWNlRmlsdGVyO1xufShGaWx0ZXIpKTtcblxuZXhwb3J0IHsgQ29sb3JSZXBsYWNlRmlsdGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXItY29sb3ItcmVwbGFjZS5lc20uanMubWFwXG4iLCJpbXBvcnQgTWF0dGVyIGZyb20gJ21hdHRlci1qcy9idWlsZC9tYXR0ZXIubWluLmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUaWxlQ29sbGlkZXIge1xyXG4gICAgY29uc3RydWN0b3IoeCx5LHIsbGVmdExlZGdlLCByaWdodExlZGdlLCBoYXNXYWxrQm94KXtcclxuXHJcbiAgICAgICAgdGhpcy54ID0geCAqIHI7XHJcbiAgICAgICAgdGhpcy55ID0geSAqIHI7XHJcbiAgICAgICAgdGhpcy53ID0gcjtcclxuICAgICAgICB0aGlzLmggPSByO1xyXG5cclxuICAgICAgICAvLyBwaHlzaWNzIGNvbGxpZGVyXHJcbiAgICAgICAgdGhpcy5Db2xsaWRlciA9IG5ldyBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZSh0aGlzLngsdGhpcy55LHIscix7IGlzU3RhdGljIDogdHJ1ZSB9KTtcclxuICAgICAgICB0aGlzLmVkZ2VCb3hlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZWRnZUJveFdpZHRoID0gMTtcclxuICAgICAgICB0aGlzLmVkZ2VCb3hIZWlnaHQgPSAyO1xyXG4gICAgICAgIGNvbnN0IGVkZ2VCb3hPZmZzZXQgPSAyMDtcclxuICAgICAgICBjb25zdCB4b2Zmc2V0ID0gLTE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy53YWxrQm94SGVpZ2h0ID0gMjA7XHJcblxyXG4gICAgICAgIGlmICggcmlnaHRMZWRnZSApe1xyXG5cclxuICAgICAgICAgICAgbGV0IHRyaWdnZXJjb2xsaWRlciA9IG5ldyBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZSggdGhpcy54ICsgci8yIC0gdGhpcy5lZGdlQm94V2lkdGgvMiAsIFxyXG4gICAgICAgICAgICAgICAgdGhpcy55IC0gci8yICsgZWRnZUJveE9mZnNldCwgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkZ2VCb3hXaWR0aCxcclxuICAgICAgICAgICAgICAgIHRoaXMud2Fsa0JveEhlaWdodCwgXHJcbiAgICAgICAgICAgICAgICAgeyBcclxuICAgICAgICAgICAgICAgICAgIGlzU3RhdGljIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgIGlzU2Vuc29yIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB0cmlnZ2VyY29sbGlkZXIuaXNFZGdlQm94ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB0cmlnZ2VyY29sbGlkZXIuaXNSaWdodCA9IHRydWU7XHJcbiAgICAgICAgICAgICB0aGlzLmVkZ2VCb3hlcy5wdXNoKHRyaWdnZXJjb2xsaWRlcik7XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCBsZWZ0TGVkZ2UgKXtcclxuICAgICAgICAgICAgbGV0IHRyaWdnZXJjb2xsaWRlciA9IG5ldyBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZSggdGhpcy54IC0gci8yICsgdGhpcy5lZGdlQm94V2lkdGgvMiAsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnkgLSByLzIgKyBlZGdlQm94T2Zmc2V0LCBcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRnZUJveFdpZHRoLCBcclxuICAgICAgICAgICAgICAgIHRoaXMud2Fsa0JveEhlaWdodCwgXHJcbiAgICAgICAgICAgICAgICAgeyBcclxuICAgICAgICAgICAgICAgICAgIGlzU3RhdGljIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgIGlzU2Vuc29yIDogdHJ1ZSBcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB0cmlnZ2VyY29sbGlkZXIuaXNFZGdlQm94ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB0cmlnZ2VyY29sbGlkZXIuaXNSaWdodCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIHRoaXMuZWRnZUJveGVzLnB1c2godHJpZ2dlcmNvbGxpZGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCBoYXNXYWxrQm94ICl7XHJcbiAgICAgICAgICAgIHRoaXMud2Fsa0JveCA9IG5ldyBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZSh0aGlzLngsIHRoaXMueSAtIChyLzIpIC0gKHRoaXMud2Fsa0JveEhlaWdodC8yKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLCB0aGlzLndhbGtCb3hIZWlnaHQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaXNTdGF0aWMgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2Vuc29yIDogdHJ1ZSAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMud2Fsa0JveC5pc0VkZ2VCb3ggPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBkcmF3IHJlY3QgZ2l2ZW4gaW5wdXQgUElYSSBHcmFwaGljcyBvYmplY3RcclxuICAgIGRyYXdSZWN0KGdyYXBoaWNzLCBkZWJ1Z0dyYXBoaWNzKSB7XHJcbiAgICAgICAgLy8gZHJhdyBjb2xsaXNpb24gYm94IHJlY3RhbmdsZVxyXG4gICAgICAgIGdyYXBoaWNzLmJlZ2luRmlsbCgweDYwMzJhOCk7XHJcbiAgICAgICAgLy9ncmFwaGljcy5kcmF3UmVjdCggdGhpcy54IC0gKHRoaXMudy8yKSAsIHRoaXMueSAtICh0aGlzLmgvMikgLTEsIHRoaXMudyAsIHRoaXMuaCApO1xyXG4gICAgICAgIGdyYXBoaWNzLmRyYXdSZWN0KCB0aGlzLkNvbGxpZGVyLnZlcnRpY2VzWzBdLngsIHRoaXMuQ29sbGlkZXIudmVydGljZXNbMF0ueSwgdGhpcy53ICwgdGhpcy5oICk7XHJcbiAgICAgICAgZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGRyYXcgc2Vuc29yIHdhbGtCb3ggZm9yIGRlYnVnXHJcbiAgICAgICAgaWYgKCB0aGlzLndhbGtCb3ggKXtcclxuICAgICAgICAgICAgZGVidWdHcmFwaGljcy5iZWdpbkZpbGwoMHgzMmE4NDIsIDAuNSk7XHJcbiAgICAgICAgICAgIGRlYnVnR3JhcGhpY3MuZHJhd1JlY3QodGhpcy54IC0gKHRoaXMudy8yKSAsIHRoaXMud2Fsa0JveC5wb3NpdGlvbi55IC0gKHRoaXMud2Fsa0JveEhlaWdodC8yKSwgdGhpcy53LCB0aGlzLndhbGtCb3hIZWlnaHQpO1xyXG4gICAgICAgICAgICBkZWJ1Z0dyYXBoaWNzLmVuZEZpbGwoKTtcclxuICAgICAgICB9IFxyXG5cclxuXHJcbiAgICAgICAgLy8gZHJhdyBzZW5zb3IgZWRnZWJveGVzXHJcbiAgICAgICAgaWYgKHRoaXMuZWRnZUJveGVzLmxlbmd0aCAhPSAwICl7XHJcbiAgICAgICAgICAgIGZvciAoIGxldCBib3ggb2YgdGhpcy5lZGdlQm94ZXMpIHtcclxuICAgICAgICAgICAgICAgIGRlYnVnR3JhcGhpY3MuYmVnaW5GaWxsKDB4ZmMwMzAzLCAwLjgpO1xyXG4gICAgICAgICAgICAgICAgZGVidWdHcmFwaGljcy5kcmF3UmVjdCggYm94LnBvc2l0aW9uLnggLSAodGhpcy5lZGdlQm94V2lkdGgvMikgLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gucG9zaXRpb24ueSAtICh0aGlzLmVkZ2VCb3hXaWR0aC8yKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGdlQm94V2lkdGgsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZUJveEhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBkZWJ1Z0dyYXBoaWNzLmVuZEZpbGwoKTtcclxuICAgICAgICAgICAgfSAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBUaWxlQmxvYiB7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHgseSx3LGgsIHRpbGVzZXQpe1xyXG4gICAgICAgICAgICB0aGlzLnRpbGVzID0gW107XHJcbiAgICAgICAgICAgIGxldCBlZGdlTGVuZ3RoID0gMTAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGgsIGkrKzsgKXtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPTA7IGogPCB3LCBqKys7ICl7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHVzaCBuZXcgVGlsZSB0byB0aGUgc3RhY2sgXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gICAgU2V0cyBvZiBDb2xsaWRlcnMgZm9yIHBoeXNpY3MgY29sbGlzaW9ucyBhbmQgUGxheWVyIGFjdGlvbiB0cmlnZ2Vyc1xyXG4qL1xyXG5pbXBvcnQgTWF0dGVyIGZyb20gJ21hdHRlci1qcy9idWlsZC9tYXR0ZXIubWluLmpzJztcclxuaW1wb3J0IHtDb3JuZXJ9IGZyb20gJy4uL2xpZ2h0aW5nL2dlb21ldHJ5LmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCb3VuZGFyeSAge1xyXG4gICAgY29uc3RydWN0b3IoeDEseTEseDIseTIsIGlzRWRnZSA9IGZhbHNlKXtcclxuICAgICAgICB0aGlzLmEgPSBuZXcgTWF0dGVyLlZlY3Rvci5jcmVhdGUoeDEseTEpO1xyXG4gICAgICAgIHRoaXMuYiA9IG5ldyBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh4Mix5Mik7XHJcbiAgICAgICAgdGhpcy5pc0VkZ2UgPSBpc0VkZ2U7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmVjdFNlZ21lbnRze1xyXG4gICAgY29uc3RydWN0b3IoeCx5LHcsaCl7XHJcbiAgICAgICAgdmFyIEEgPSBuZXcgTWF0dGVyLlZlY3Rvci5jcmVhdGUoeCAtICh3LzIpLCB5IC0gKGgvMikpO1xyXG4gICAgICAgIHZhciBCID0gbmV3IE1hdHRlci5WZWN0b3IuY3JlYXRlKHggKyAody8yKSwgeSAtIChoLzIpKTtcclxuICAgICAgICB2YXIgQyA9IG5ldyBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh4IC0gKHcvMiksIHkgKyAoaC8yKSk7XHJcbiAgICAgICAgdmFyIEQgPSBuZXcgTWF0dGVyLlZlY3Rvci5jcmVhdGUoeCArICh3LzIpLCB5ICsgKGgvMikpO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBbbmV3IEJvdW5kYXJ5KEEueCxBLnksIEIueCxCLnkpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICBuZXcgQm91bmRhcnkoQS54LEEueSwgQy54LEMueSksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIG5ldyBCb3VuZGFyeShDLngsQy55LCBELngsRC55KSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJvdW5kYXJ5KEIueCxCLnksIEQueCxELnkpXVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRlcnJhaW57XHJcbiAgICBjb25zdHJ1Y3Rvcih4LHksdyxoKXtcclxuICAgICAgICAgICAgLy8gY29sbGlzaW9uIHJlY3RhbmdsZSBcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICAgICAgdGhpcy53ID0gdztcclxuICAgICAgICB0aGlzLmggPSBoO1xyXG5cclxuICAgICAgICB0aGlzLkEgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh4IC0gKHcvMiksIHkgLSAoaC8yKSk7XHJcbiAgICAgICAgdGhpcy5CID0gTWF0dGVyLlZlY3Rvci5jcmVhdGUoeCArICh3LzIpLCB5IC0gKGgvMikpO1xyXG4gICAgICAgIHRoaXMuQyA9IE1hdHRlci5WZWN0b3IuY3JlYXRlKHggLSAody8yKSwgeSArIChoLzIpKTtcclxuICAgICAgICB0aGlzLkQgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh4ICsgKHcvMiksIHkgKyAoaC8yKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYm91bmRzID0gWyhuZXcgQm91bmRhcnkodGhpcy5BLngsIHRoaXMuQS55LCB0aGlzLkIueCwgdGhpcy5CLnkpKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgKG5ldyBCb3VuZGFyeSh0aGlzLkEueCwgdGhpcy5BLnksIHRoaXMuQy54LCB0aGlzLkMueSkpLCBcclxuICAgICAgICAgICAgICAgICAgICAobmV3IEJvdW5kYXJ5KHRoaXMuQy54LCB0aGlzLkMueSwgdGhpcy5ELngsIHRoaXMuRC55KSksIFxyXG4gICAgICAgICAgICAgICAgICAgIChuZXcgQm91bmRhcnkodGhpcy5CLngsIHRoaXMuQi55LCB0aGlzLkQueCwgdGhpcy5ELnkpKV07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gRm9yIGVkZ2UgcmF5Y2FzdGluZyBnZW9tZXRyeVxyXG4gICAgICAgIHRoaXMuY29ybmVycyA9IFtuZXcgQ29ybmVyKHRoaXMuQSwgdGhpcy5CLCB0aGlzLkMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29ybmVyKHRoaXMuQiwgdGhpcy5BLCB0aGlzLkQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29ybmVyKHRoaXMuQywgdGhpcy5BLCB0aGlzLkQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29ybmVyKHRoaXMuRCwgdGhpcy5CLCB0aGlzLkMpXTtcclxuXHJcbiAgICAgICAgLy90aGlzLnNlZ21lbnRzID0gbmV3IFJlY3RTZWdtZW50cyh4LHksdyxoKTtcclxuXHJcbiAgICAgICAgLy8gcGh5c2ljcyBjb2xsaWRlclxyXG4gICAgICAgIHRoaXMuQ29sbGlkZXIgPSBuZXcgTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUoeCx5LHcsaCx7IGlzU3RhdGljIDogdHJ1ZSB9KTtcclxuICAgICAgICB0aGlzLndhbGtCb3hIZWlnaHQgPSAyMDtcclxuXHJcbiAgICAgICAgLy8gYWN0aW9uIHRyaWdnZXIgY29sbGlkZXJzXHJcbiAgICAgICAgdGhpcy53YWxrQm94ID0gbmV3IE1hdHRlci5Cb2RpZXMucmVjdGFuZ2xlKHgsIHkgLSAoaC8yKSAtICh0aGlzLndhbGtCb3hIZWlnaHQvMiksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LCB0aGlzLndhbGtCb3hIZWlnaHQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBpc1N0YXRpYyA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2Vuc29yIDogdHJ1ZSAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLndhbGtCb3guaXNFZGdlQm94ID0gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5lZGdlQm94V2lkdGggPSAxMDtcclxuICAgICAgICB0aGlzLmVkZ2VCb3hIZWlnaHQgPSAxMDtcclxuICAgICAgICBjb25zdCBlZGdlQm94T2Zmc2V0ID0gMjA7XHJcbiAgICAgICAgdGhpcy5lZGdlQm94ZXMgPSBbbmV3IE1hdHRlci5Cb2RpZXMucmVjdGFuZ2xlKCB4ICsgdy8yICsgdGhpcy5lZGdlQm94V2lkdGgvMiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5IC0gaC8yICsgZWRnZUJveE9mZnNldCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVkZ2VCb3hXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2Fsa0JveEhlaWdodCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU3RhdGljIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2Vuc29yIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUoIHggLSB3LzIgLSB0aGlzLmVkZ2VCb3hXaWR0aC8yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSAtIGgvMiArIGVkZ2VCb3hPZmZzZXQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGdlQm94V2lkdGgsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53YWxrQm94SGVpZ2h0LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTdGF0aWMgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZW5zb3IgOiB0cnVlIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgdGhpcy5lZGdlQm94ZXNbMF0uaXNFZGdlQm94ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmVkZ2VCb3hlc1sxXS5pc0VkZ2VCb3ggPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZWRnZUJveGVzWzBdLmlzUmlnaHQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZWRnZUJveGVzWzFdLmlzUmlnaHQgPSBmYWxzZVxyXG5cclxuXHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgLy8gZHJhdyByZWN0IGdpdmVuIGlucHV0IFBJWEkgR3JhcGhpY3Mgb2JqZWN0XHJcbiAgICBkcmF3UmVjdChncmFwaGljcykge1xyXG4gICAgICAgIC8vIGRyYXcgY29sbGlzaW9uIGJveCByZWN0YW5nbGVcclxuICAgICAgICBncmFwaGljcy5iZWdpbkZpbGwoMHg2MDMyYTgpO1xyXG4gICAgICAgIGdyYXBoaWNzLmRyYXdSZWN0KCB0aGlzLnggLSAodGhpcy53LzIpICwgdGhpcy55IC0gKHRoaXMuaC8yKSAtMSwgdGhpcy53ICwgdGhpcy5oICk7XHJcbiAgICAgICAgZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGRyYXcgc2Vuc29yIHdhbGtCb3ggZm9yIGRlYnVnXHJcbiAgICAgICAgZ3JhcGhpY3MuYmVnaW5GaWxsKDB4MzJhODQyLCAwLjUpO1xyXG4gICAgICAgIGdyYXBoaWNzLmRyYXdSZWN0KHRoaXMueCAtICh0aGlzLncvMikgLCB0aGlzLndhbGtCb3gucG9zaXRpb24ueSAtICh0aGlzLndhbGtCb3hIZWlnaHQvMiksIHRoaXMudywgdGhpcy53YWxrQm94SGVpZ2h0KTtcclxuICAgICAgICBncmFwaGljcy5lbmRGaWxsKCk7XHJcblxyXG4gICAgICAgIC8vIGRyYXcgc2Vuc29yIGVkZ2Vib3hlc1xyXG4gICAgICAgIGZvciAoIGxldCBib3ggb2YgdGhpcy5lZGdlQm94ZXMpIHtcclxuICAgICAgICAgICAgZ3JhcGhpY3MuYmVnaW5GaWxsKDB4ZmMwMzAzLCAwLjgpO1xyXG4gICAgICAgICAgICBncmFwaGljcy5kcmF3UmVjdCggYm94LnBvc2l0aW9uLnggLSAodGhpcy5lZGdlQm94V2lkdGgvMikgLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5wb3NpdGlvbi55IC0gKHRoaXMuZWRnZUJveFdpZHRoLzIpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZUJveFdpZHRoLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZUJveEhlaWdodCk7XHJcbiAgICAgICAgICAgIGdyYXBoaWNzLmVuZEZpbGwoKTtcclxuICAgICAgICB9ICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBkcmF3IHdhbGtCb3ggZm9yIGRlYnVnXHJcbmZ1bmN0aW9uIGRyYXdDb21wb25lbnQoZ3JhcGhpY3MsIGNvbG9yLCByZWN0YW5nbGUgKSB7IFxyXG4gICAgZ3JhcGhpY3MuYmVnaW5GaWxsKGNvbG9yKTtcclxuICAgIGdyYXBoaWNzLmRyYXdSZWN0KCByZWN0YW5nbGUucG9zaXRpb24ueCAtIChyZWN0YW5nbGUud2lkdGgvMikgLCBcclxuICAgICAgICAgICAgICAgICAgICAgICByZWN0YW5nbGUueSAtIChyZWN0YW5nbGUuaGVpZ2h0LzIpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICByZWN0YW5nbGUud2lkdGgsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHJlY3RhbmdsZS5oZWlnaHQpO1xyXG4gICAgZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG59XHJcbmV4cG9ydCB7ZHJhd0NvbXBvbmVudH0iLCJpbXBvcnQgTWF0dGVyIGZyb20gJ21hdHRlci1qcy9idWlsZC9tYXR0ZXIubWluLmpzJztcclxuZXhwb3J0IGNsYXNzIFJheSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3MsIGFuZ2xlLCBlbmRwb2ludCkge1xyXG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xyXG4gICAgICAgIC8vdGhpcy5kaXIgPSBwNS5WZWN0b3IuZnJvbUFuZ2xlKGFuZ2xlKTtcclxuICAgICAgICB0aGlzLmRpciA9IE1hdHRlci5WZWN0b3IuY3JlYXRlKDEsMCk7XHJcbiAgICAgICAgdGhpcy5kaXIgPSBNYXR0ZXIuVmVjdG9yLnJvdGF0ZUFib3V0KHRoaXMuZGlyLCBhbmdsZSwgTWF0dGVyLlZlY3Rvci5jcmVhdGUoMCwwKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYW5nbGUgPSBhbmdsZTtcclxuXHJcbiAgICAgICAgdGhpcy5lbmRwb2ludCA9IGVuZHBvaW50O1xyXG4gICAgICAgIHRoaXMuY2xvc2VzdFBvaW50ID0gZW5kcG9pbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RGlyKGRpclZlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuZGlyID0gZGlyVmVjdG9yO1xyXG4gICAgICAgIHRoaXMuYW5nbGUgPSBNYXR0ZXIuVmVjdG9yLmFuZ2xlKHRoaXMuZGlyLCBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSgwLDApKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgbG9va0F0KHgseSkge1xyXG4gICAgICAgIHRoaXMuZGlyLnggPSB4IC0gdGhpcy5wb3MueDtcclxuICAgICAgICB0aGlzLmRpci55ID0geSAtIHRoaXMucG9zLnk7XHJcbiAgICAgICAgdGhpcy5kaXIgPSBNYXR0ZXIuVmVjdG9yLm5vcm1hbGlzZSh0aGlzLmRpcilcclxuICAgIH1cclxuXHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIHN0cm9rZSgxMjcpO1xyXG4gICAgICAgIHB1c2goKTtcclxuICAgICAgICB0cmFuc2xhdGUodGhpcy5wb3MueCwgdGhpcy5wb3MueSk7XHJcbiAgICAgICAgbGluZSgwLCAwLCB0aGlzLmRpci54ICogMTAsIHRoaXMuZGlyLnkgKiAxMCk7XHJcbiAgICAgICAgcG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FzdCh3YWxsKSB7XHJcbiAgICAgICAgY29uc3QgeDEgPSB3YWxsLmEueCxcclxuICAgICAgICAgICAgICB5MSA9IHdhbGwuYS55LCAgXHJcbiAgICAgICAgICAgICAgeDIgPSB3YWxsLmIueCwgIFxyXG4gICAgICAgICAgICAgIHkyID0gd2FsbC5iLnksICBcclxuXHJcbiAgICAgICAgICAgICAgeDMgPSB0aGlzLnBvcy54LFxyXG4gICAgICAgICAgICAgIHkzID0gdGhpcy5wb3MueSxcclxuICAgICAgICAgICAgICB4NCA9IHRoaXMucG9zLnggKyB0aGlzLmRpci54LFxyXG4gICAgICAgICAgICAgIHk0ID0gdGhpcy5wb3MueSArIHRoaXMuZGlyLnk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlbiA9ICh4MSAtIHgyKSAqICh5MyAtIHk0KSAtICh5MSAtIHkyKSAqICh4My14NCk7XHJcbiAgICAgICAgaWYgKCBkZW4gPT0gMCApIFxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IHQgPSAoKHgxIC0geDMpICogKHkzIC0geTQpIC0gKHkxIC0geTMpICogKHgzIC0geDQpKSAvIGRlbjtcclxuICAgICAgICBjb25zdCB1ID0gLSgoeDEgLSB4MikgKiAoeTEgLSB5MykgLSAoeTEgLSB5MikgKiAoeDEgLSB4MykpIC8gZGVuO1xyXG5cclxuICAgICAgICBpZiAoIHQgPiAwICYmIHQgPCAxICYmIHUgPiAwICkge1xyXG4gICAgICAgICAgICBjb25zdCBwdCA9IE1hdHRlci5WZWN0b3IuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHB0LnggPSB4MSArIHQgKiAoIHgyIC0geDEpO1xyXG4gICAgICAgICAgICBwdC55ID0geTEgKyB0ICogKCB5MiAtIHkxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHB0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTsiLCJpbXBvcnQgTWF0dGVyIGZyb20gJ21hdHRlci1qcy9idWlsZC9tYXR0ZXIubWluLmpzJztcclxuaW1wb3J0IHtSYXl9IGZyb20gXCIuL3JheS5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJheVNvdXJjZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoeCwgeSwgc2VnbWVudHMsIGVuZHBvaW50cywgc2hhZGVyUHJvZ3JhbSl7XHJcbiAgICAgICAgdGhpcy5wb3MgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh4LCB5KTsgIC8vIHJheSBzb3VyY2UgcG9pbnRcclxuICAgICAgICB0aGlzLnJheXMgPSBbXTsgLy8gYWxsIHRoZSByYXlzXHJcbiAgICAgICAgdGhpcy5jb3JuZXJSYXlzID0gW107IC8vIGF1eGlsYXJ5IHJheXNcclxuICAgICAgICB0aGlzLmhhbmdSYXkgPSBuZXcgUmF5KHRoaXMucG9zLDAsTWF0dGVyLlZlY3Rvci5jcmVhdGUoMCwwKSk7IC8vIGZvciB2aXN1YWwgb2YgaGFuZ2luZyBmcm9tIHRoZSBjZWlsaW5nXHJcbiAgICAgICAgdGhpcy5oYW5nUmF5LnNldERpcihNYXR0ZXIuVmVjdG9yLmNyZWF0ZSgwLC0xKSk7IC8vIHBvaW50IHVwd2FyZHNcclxuICAgICAgICB0aGlzLmVuZHBvaW50cyA9IGVuZHBvaW50czsgLy8gYWxsIHRlcnJhaW4gdmVydGljZXNcclxuICAgICAgICB0aGlzLnNlZ21lbnRzID0gc2VnbWVudHM7IC8vIGFsbCB0ZXJyYWluIGxpbmUgc2VnbWVudHNcclxuICAgICAgICB0aGlzLnRyaXMgPSBbXTtcclxuICAgICAgICB0aGlzLnNoYWRlclByb2dyYW0gPSBzaGFkZXJQcm9ncmFtO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBbMSwgMC44MzEsIDAuMzIyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgMSwgMC44MzEsIDAuMzIyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgMSwgMC44MzEsIDAuMzIyLF1cclxuXHJcbiAgICAgICAgLy8gaW5pdCBhbGwgbWFpbiByYXlzXHJcbiAgICAgICAgZm9yICggbGV0IGVuZHBvaW50IG9mIGVuZHBvaW50cyApIHtcclxuICAgICAgICAgICAgbGV0IHJheURpciA9IE1hdHRlci5WZWN0b3IuY3JlYXRlKGVuZHBvaW50LnggLSB0aGlzLnBvcy54LCBlbmRwb2ludC55IC0gdGhpcy5wb3MueSk7XHJcbiAgICAgICAgICAgIE1hdHRlci5WZWN0b3Iubm9ybWFsaXNlKHJheURpcik7XHJcbiAgICAgICAgICAgIGxldCBuZXdSYXkgPSBuZXcgUmF5KHRoaXMucG9zLCAwLCBlbmRwb2ludCk7XHJcbiAgICAgICAgICAgIG5ld1JheS5zZXREaXIocmF5RGlyKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMucmF5cy5wdXNoKG5ld1JheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSBQSVhJLmF1dG9EZXRlY3RSZW5kZXJlcigpO1xyXG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSB7XHJcbiAgICAgICAgICAgIGRpbWVuc2lvbnM6ICAgIFt3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0XSxcclxuICAgICAgICAgICAgLy8gZGltZW5zaW9uczogW3RoaXMucmVuZGVyZXIud2lkdGgsIHRoaXMucmVuZGVyZXIuaGVpZ2h0XSxcclxuICAgICAgICAgICAgcG9zaXRpb246IFt0aGlzLnBvcy54LCB0aGlzLnBvcy55XSAsXHJcbiAgICAgICAgICAgIHRpbWUgOiBNYXRoLnJhbmRvbSgpXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zaGFkZXIgPSBuZXcgUElYSS5TaGFkZXIuZnJvbShzaGFkZXJQcm9ncmFtLnZlcnQsIHNoYWRlclByb2dyYW0uZnJhZywgdGhpcy51bmlmb3Jtcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIGNvbXBhcmUgMiByYXlzIGJ5IGFuZ2xlXHJcbiAgICBjb21wYXJlKGEsYikge1xyXG4gICAgICAgIGNvbnN0IGFuZ2xlQSA9IGEuYW5nbGU7XHJcbiAgICAgICAgY29uc3QgYW5nbGVCID0gYi5hbmdsZTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiBhbmdsZUEgLSBhbmdsZUI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZm9yIG1vdmluZyBsaWdodFxyXG4gICAgdXBkYXRlKHgseSkge1xyXG4gICAgICAgIHRoaXMucG9zLnggPSB4O1xyXG4gICAgICAgIHRoaXMucG9zLnkgPSB5O1xyXG5cclxuICAgICAgICB0aGlzLnJheXMgPSBbXTsgXHJcbiAgICAgICAgXHJcbiAgICAgXHJcblxyXG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSB7XHJcbiAgICAgICAgICAgIGRpbWVuc2lvbnM6ICAgIFt3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0XSxcclxuICAgICAgICAgICAgLy8gZGltZW5zaW9uczogW3RoaXMucmVuZGVyZXIud2lkdGgsIHRoaXMucmVuZGVyZXIuaGVpZ2h0XSxcclxuICAgICAgICAgICAgcG9zaXRpb246IFt4LCB5XSxcclxuICAgICAgICAgICAgdGltZTogTWF0aC5yYW5kb20oKVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5zaGFkZXIgPSBuZXcgUElYSS5TaGFkZXIuZnJvbSh0aGlzLnNoYWRlclByb2dyYW0udmVydCwgdGhpcy5zaGFkZXJQcm9ncmFtLmZyYWcsIHRoaXMudW5pZm9ybXMpO1xyXG4gICAgICAgIHRoaXMuY29ybmVyUmF5cyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKCBsZXQgZW5kcG9pbnQgb2YgdGhpcy5lbmRwb2ludHMpIHtcclxuICAgICAgICAgICAgbGV0IHJheURpciA9IE1hdHRlci5WZWN0b3IuY3JlYXRlKGVuZHBvaW50LnggLSB0aGlzLnBvcy54LCBlbmRwb2ludC55IC0gdGhpcy5wb3MueSk7XHJcbiAgICAgICAgICAgIE1hdHRlci5WZWN0b3Iubm9ybWFsaXNlKHJheURpcik7XHJcbiAgICAgICAgICAgIGxldCBuZXdSYXkgPSBuZXcgUmF5KHRoaXMucG9zLCAwLCBlbmRwb2ludCk7XHJcbiAgICAgICAgICAgIG5ld1JheS5zZXREaXIocmF5RGlyKTsgXHJcbiAgICAgICAgICAgIHRoaXMucmF5cy5wdXNoKG5ld1JheSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxvb2soKTtcclxuICAgICAgICB0aGlzLmF1eExvb2soKTtcclxuICAgIH1cclxuXHJcbiAgICBsb29rKCkge1xyXG4gICAgICAgIGZvciAoIGxldCByYXkgb2YgdGhpcy5yYXlzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FzdChyYXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjYXN0KHJheSkge1xyXG4gICAgICAgIGxldCBjbG9zZXN0ID0gcmF5LmVuZHBvaW50O1xyXG4gICAgICAgIGxldCByZWNvcmQgPSBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy5wb3MueCAtIGNsb3Nlc3QueCwyKSArIE1hdGgucG93KHRoaXMucG9zLnkgLSBjbG9zZXN0LnksMikpO1xyXG4gICAgICAgIGZvciAoIGxldCB3YWxsIG9mIHRoaXMuc2VnbWVudHMpIHsgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBwdCA9IHJheS5jYXN0KHdhbGwpO1xyXG4gICAgICAgICAgICBpZiAocHQpIHtcclxuICAgICAgICAgICAgICAgIC8vY29uc3QgZCA9IHA1LlZlY3Rvci5kaXN0KHRoaXMucG9zLCBwdCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkID0gTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMucG9zLnggLSBwdC54LDIpICsgTWF0aC5wb3codGhpcy5wb3MueSAtIHB0LnksMikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCBkIDwgcmVjb3JkICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VzdCA9IHB0O1xyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCBjbG9zZXN0ICkge1xyXG4gICAgICAgICAgICByYXkuY2xvc2VzdFBvaW50ID0gY2xvc2VzdDtcclxuICAgICAgICAgICAgaWYgKCBjbG9zZXN0ID09IHJheS5lbmRwb2ludCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJheTEgPSBuZXcgUmF5KHRoaXMucG9zLCAwLCBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSgtNTAwMCwwKSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmF5MiA9IG5ldyBSYXkodGhpcy5wb3MsIDAsIE1hdHRlci5WZWN0b3IuY3JlYXRlKC01MDAwLDApKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcmF5MS5zZXREaXIoTWF0dGVyLlZlY3Rvci5yb3RhdGUocmF5LmRpciwtMC4wMDUpKTtcclxuICAgICAgICAgICAgICAgIHJheTIuc2V0RGlyKE1hdHRlci5WZWN0b3Iucm90YXRlKHJheS5kaXIsMC4wMDUpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvcm5lclJheXMucHVzaChyYXkxLCByYXkyKTtcclxuICAgICAgICAgICAgfSAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXV4TG9vaygpIHtcclxuICAgICAgICBmb3IgKCBsZXQgcmF5IG9mIHRoaXMuY29ybmVyUmF5cykge1xyXG4gICAgICAgICAgIHJheSA9IHRoaXMuYXV4Q2FzdChyYXkpO1xyXG4gICAgICAgICAgIHRoaXMucmF5cy5wdXNoKHJheSk7XHJcbiAgICAgICAgfSAgICAgXHJcbiAgICAgICAgdGhpcy5yYXlzLnNvcnQodGhpcy5jb21wYXJlKTtcclxuICAgIH1cclxuXHJcbiAgICBhdXhDYXN0KHJheSkge1xyXG4gICAgICAgIGxldCBjbG9zZXN0ID0gbnVsbFxyXG4gICAgICAgIGxldCByZWNvcmQgPSBJbmZpbml0eTtcclxuICAgICAgICBmb3IgKCBsZXQgd2FsbCBvZiB0aGlzLnNlZ21lbnRzKSB7ICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgcHQgPSByYXkuY2FzdCh3YWxsKTtcclxuICAgICAgICAgICAgaWYgKHB0KSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnN0IGQgPSBwNS5WZWN0b3IuZGlzdCh0aGlzLnBvcywgcHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IE1hdGguc3FydChNYXRoLnBvdyh0aGlzLnBvcy54IC0gcHQueCwyKSArIE1hdGgucG93KHRoaXMucG9zLnkgLSBwdC55LDIpKTtcclxuICAgICAgICAgICAgICAgIGlmICggZCA8IHJlY29yZCApIHtcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmQgPSBkO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb3Nlc3QgPSBwdDtcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggY2xvc2VzdCApIHtcclxuICAgICAgICAgICAgcmF5LmNsb3Nlc3RQb2ludCA9IGNsb3Nlc3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByYXk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvdyhncmFwaGljcykge1xyXG4gICAgICAgIC8vIENpcmNsZVxyXG4gICAgICAgIGdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweERFMzI0OSk7IC8vIGRyYXcgYSBjaXJjbGUsIHNldCB0aGUgbGluZVN0eWxlIHRvIHplcm8gc28gdGhlIGNpcmNsZSBkb2Vzbid0IGhhdmUgYW4gb3V0bGluZVxyXG4gICAgICAgIGdyYXBoaWNzLmJlZ2luRmlsbCgweEZFRUI3NywgMSk7XHJcbiAgICAgICAgZ3JhcGhpY3MuZHJhd0NpcmNsZSh0aGlzLnBvcy54LCB0aGlzLnBvcy55LCAxMCk7XHJcbiAgICAgICAgZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdMaWdodChncmFwaGljcyl7XHJcbiAgICAgICAgZ3JhcGhpY3MubGluZVN0eWxlKDApO1xyXG4gICAgICAgIGdyYXBoaWNzLmJlZ2luRmlsbCgweEZFRUI3NywgMC41KTtcclxuXHJcbiAgICAgICAgZ3JhcGhpY3MuZHJhd1BvbHlnb24oW3RoaXMucG9zLngsIHRoaXMucG9zLnksXHJcbiAgICAgICAgICAgIHRoaXMucmF5c1swXS5jbG9zZXN0UG9pbnQueCwgdGhpcy5yYXlzWzBdLmNsb3Nlc3RQb2ludC55LFxyXG4gICAgICAgICAgICB0aGlzLnJheXNbdGhpcy5yYXlzLmxlbmd0aC0xXS5jbG9zZXN0UG9pbnQueCwgXHJcbiAgICAgICAgICAgIHRoaXMucmF5c1t0aGlzLnJheXMubGVuZ3RoLTFdLmNsb3Nlc3RQb2ludC55XSk7XHJcbiAgICAgICAgICAgIGdyYXBoaWNzLmVuZEZpbGwoKTtcclxuXHJcbiAgICAgICAgZm9yICggbGV0IGkgPSAxOyBpIDwgdGhpcy5yYXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGdyYXBoaWNzLmJlZ2luRmlsbCgweEZFRUI3NywgMC41KTtcclxuICAgICAgICAgICAgZ3JhcGhpY3MuZHJhd1BvbHlnb24oW3RoaXMucG9zLngsIHRoaXMucG9zLnksXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yYXlzW2ktMV0uY2xvc2VzdFBvaW50LngsIHRoaXMucmF5c1tpLTFdLmNsb3Nlc3RQb2ludC55LFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmF5c1tpXS5jbG9zZXN0UG9pbnQueCwgdGhpcy5yYXlzW2ldLmNsb3Nlc3RQb2ludC55XSk7XHJcbiAgICAgICAgICAgIGdyYXBoaWNzLmVuZEZpbGwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbWFrZSB3ZWJnbCBtZXNoZXMgdG8gZHJhdyBsaWdodCwgcGFzcyBzaGFkZXIgZnJvbSBjb25zdHJ1Y3RvclxyXG4gICAgZHJhd01lc2goZmlsdGVycykge1xyXG4gICAgICAgIHRoaXMudHJpcyA9IFtdO1xyXG4gICAgICAgIC8vIGRyYXcgYSB0cmlhbmdsZSBiZXdlZW4gdGhlIGVuZHBvaW50cyAmIHNvdXJjZSBvZiBldmVyeSByYXlcclxuICAgICAgICBmb3IgKCBsZXQgaSA9IDE7IGkgPCB0aGlzLnJheXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgdHJpYW5nbGUgPSBuZXcgUElYSS5HZW9tZXRyeSgpXHJcbiAgICAgICAgICAgICAgICAuYWRkQXR0cmlidXRlKCdhVmVydGV4UG9zaXRpb24nLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgWyB0aGlzLnBvcy54LCAgdGhpcy5wb3MueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJheXNbaS0xXS5jbG9zZXN0UG9pbnQueCwgdGhpcy5yYXlzW2ktMV0uY2xvc2VzdFBvaW50LnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYXlzW2ldLmNsb3Nlc3RQb2ludC54LCB0aGlzLnJheXNbaV0uY2xvc2VzdFBvaW50LnldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAyKVxyXG4gICAgICAgICAgICAgICAgLmFkZEF0dHJpYnV0ZSgnYUNvbG9yJywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3IsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAzKTtcclxuICAgICAgICAgICAgY29uc3QgdHJpTWVzaCA9IG5ldyBQSVhJLk1lc2godHJpYW5nbGUsIHRoaXMuc2hhZGVyKTtcclxuICAgICAgICAgICAgdHJpTWVzaC5maWx0ZXJzID0gZmlsdGVycztcclxuICAgICAgICAgICAgdGhpcy50cmlzLnB1c2godHJpTWVzaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGRyYXcgYW4gZXh0cmEgdHJpYW5nbGUgdG8gY29ubmVjdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIGFycmF5XHJcbiAgICAgICAgY29uc3QgZmlyc3RUcmkgPSBuZXcgUElYSS5HZW9tZXRyeSgpXHJcbiAgICAgICAgLmFkZEF0dHJpYnV0ZSgnYVZlcnRleFBvc2l0aW9uJywgXHJcbiAgICAgICAgW3RoaXMucG9zLngsICB0aGlzLnBvcy55LFxyXG4gICAgICAgICAgICB0aGlzLnJheXNbMF0uY2xvc2VzdFBvaW50LngsIHRoaXMucmF5c1swXS5jbG9zZXN0UG9pbnQueSxcclxuICAgICAgICAgICAgdGhpcy5yYXlzW3RoaXMucmF5cy5sZW5ndGgtMV0uY2xvc2VzdFBvaW50LngsIFxyXG4gICAgICAgICAgICB0aGlzLnJheXNbdGhpcy5yYXlzLmxlbmd0aC0xXS5jbG9zZXN0UG9pbnQueV0sXHJcbiAgICAgICAgICAgIDIpXHJcbiAgICAgICAgLmFkZEF0dHJpYnV0ZSgnYUNvbG9yJywgXHJcbiAgICAgICAgICAgIHRoaXMuY29sb3IsIFxyXG4gICAgICAgICAgICAzKTtcclxuICAgICAgICBjb25zdCBmaXJzdFRyaU1lc2ggPSBuZXcgUElYSS5NZXNoKGZpcnN0VHJpLCB0aGlzLnNoYWRlcik7XHJcbiAgICAgICAgZmlyc3RUcmlNZXNoLmZpbHRlcnMgPSBmaWx0ZXJzO1xyXG4gICAgICAgIHRoaXMudHJpcy5wdXNoKGZpcnN0VHJpTWVzaCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgTWF0dGVyIGZyb20gJ21hdHRlci1qcy9idWlsZC9tYXR0ZXIubWluLmpzJztcclxuaW1wb3J0IHtSYXlTb3VyY2V9IGZyb20gJy4vcmF5U291cmNlLmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQb2ludExpZ2h0IHtcclxuICBjb25zdHJ1Y3Rvcih4LHksIGNhc3RTZWdtZW50cywgZW5kcG9pbnRzLCBzaGFkZXJQcm9ncmFtLCB0b3JjaEZyYW1lcykge1xyXG4gICAgdGhpcy5wb3MgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh4LHkpO1xyXG4gICAgdGhpcy5jYXN0U2VnbWVudHMgPSBjYXN0U2VnbWVudHM7XHJcblxyXG4gICAgdGhpcy52aXNpb25Tb3VyY2UgPSBuZXcgUmF5U291cmNlKCB4LCB5LCBjYXN0U2VnbWVudHMsIGVuZHBvaW50cywgc2hhZGVyUHJvZ3JhbSApO1xyXG4gICAgdGhpcy5udW1TdGF0aWNSYXlzID0gdGhpcy52aXNpb25Tb3VyY2UucmF5cy5sZW5ndGg7XHJcbiAgICB0aGlzLnZlbCA9IC0xLjU7XHJcbiAgICB0aGlzLnZpc2lvblNvdXJjZS5sb29rKCk7XHJcbiAgICB0aGlzLnZpc2lvblNvdXJjZS5hdXhMb29rKCk7XHJcbiAgICB0aGlzLmxpZ2h0Q29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XHJcblxyXG4gICAgdGhpcy50b3JjaCA9IG5ldyBUb3JjaEFuaW1hdGlvbih4LHksdG9yY2hGcmFtZXMpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKHRpbWVzY2FsZSkge1xyXG4gICAgdGhpcy5saWdodENvbnRhaW5lci5kZXN0cm95KHsgXCJjaGlsZHJlblwiIDogdHJ1ZSB9KTtcclxuICAgIHRoaXMubGlnaHRDb250YWluZXIgPSBuZXcgUElYSS5Db250YWluZXIoKTtcclxuICAgIHRoaXMucG9zLnggKz0gdGhpcy52ZWwqdGltZXNjYWxlO1xyXG4gICAgdGhpcy52aXNpb25Tb3VyY2UudXBkYXRlKHRoaXMucG9zLngsIHRoaXMucG9zLnkpO1xyXG4gICAgdGhpcy52aXNpb25Tb3VyY2UuZHJhd01lc2goKTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMudmlzaW9uU291cmNlLnRyaXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdGhpcy5saWdodENvbnRhaW5lci5hZGRDaGlsZCh0aGlzLnZpc2lvblNvdXJjZS50cmlzW2ldKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIFRvcmNoQW5pbWF0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih4LHksIGZyYW1lcyl7XHJcbiAgICB0aGlzLmFuaW1hdGlvbiA9IG5ldyBQSVhJLkFuaW1hdGVkU3ByaXRlKGZyYW1lcyk7XHJcbiAgICB0aGlzLmFuaW1hdGlvbi5wb3NpdGlvbi5zZXQoeCx5KTtcclxuICAgIHRoaXMuYW5pbWF0aW9uLmFuY2hvci5zZXQoMC41KTtcclxuICAgIHRoaXMuYW5pbWF0aW9uLnNjYWxlLnNldCgxLjUsMS41KTtcclxuICAgIHRoaXMuYW5pbWF0aW9uLmFuaW1hdGlvblNwZWVkID0gMC4yO1xyXG4gICAgdGhpcy5hbmltYXRpb24uZ290b0FuZFBsYXkoTWF0aC5yYW5kb20oKSAqIDkpO1xyXG4gIH1cclxufSIsImltcG9ydCBNYXR0ZXIgZnJvbSAnbWF0dGVyLWpzL2J1aWxkL21hdHRlci5taW4uanMnO1xyXG5leHBvcnQgY2xhc3MgUG93ZXJ1cHtcclxuICAgIGNvbnN0cnVjdG9yKHgseSx0ZXh0dXJlKXtcclxuICAgICAgICB0aGlzLnNwcml0ZSA9IG5ldyBQSVhJLlNwcml0ZS5mcm9tKHRleHR1cmUpO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLnBvc2l0aW9uLnNldCh4LHkpO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLmFuY2hvci5zZXQoMC41KTtcclxuICAgICAgICB0aGlzLnNwcml0ZS5zY2FsZS5zZXQoMi41KTtcclxuXHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG5cclxuICAgICAgICB0aGlzLnRpbWVzY2FsZSA9IDAuMDAzO1xyXG4gICAgICAgIHRoaXMubWF4T2Zmc2V0ID0gMTA7XHJcblxyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnNwcml0ZS53aWR0aC8vKiB0aGlzLnNwcml0ZS5zY2FsZS54O1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5zcHJpdGUuaGVpZ2h0Ly8qIHRoaXMuc3ByaXRlLnNjYWxlLnk7XHJcblxyXG4gICAgICAgIHRoaXMudGlja2VyID0gbmV3IFBJWEkuVGlja2VyKCk7XHJcbiAgICAgICAgdGhpcy50aWNrZXIuYXV0b1N0YXJ0ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuRGlzc29sdmVWYWx1ZSA9IDAuODtcclxuXHJcbiAgICAgICAgdGhpcy5jb2xsaWRlciA9IG5ldyBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZSggXHJcbiAgICAgICAgICAgIHgsIFxyXG4gICAgICAgICAgICB5LCBcclxuICAgICAgICAgICAgdGhpcy53aWR0aCxcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQsIFxyXG4gICAgICAgICAgICAgeyBcclxuICAgICAgICAgICAgICAgaXNTdGF0aWMgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICBpc1NlbnNvciA6IHRydWUsXHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmNvbGxpZGVyLmlzQ2F0bmlwID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmNvbGxpZGVyLnNwcml0ZVJlZmVyZW5jZSA9IHRoaXMuc3ByaXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSh0aWNrcyl7XHJcbiAgICAgICAgbGV0IHNjYWxlZFRpY2tzID0gdGlja3MgKiB0aGlzLnRpbWVzY2FsZVxyXG4gICAgICAgIHRoaXMuc3ByaXRlLnkgPSB0aGlzLnkgKyB0aGlzLm1heE9mZnNldCAqIE1hdGguc2luKHNjYWxlZFRpY2tzKTtcclxuICAgICAgICBpZiAoIHRoaXMuc3ByaXRlLmZpbHRlcnMpe1xyXG4gICAgICAgICAgICB0aGlzLkRpc3NvbHZlVmFsdWUgLT0gMC4wMTtcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGUuZmlsdGVyc1swXS51bmlmb3Jtcy5EaXNzb2x2ZVZhbCA9IHRoaXMuRGlzc29sdmVWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICggdGhpcy5EaXNzb2x2ZVZhbHVlIDw9IDApeyAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlLnJlbmRlcmFibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlLmZpbHRlcnNbMF0udW5pZm9ybXMuRGlzc29sdmVWYWwgPSAwLjc1O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGUuZmlsdGVycyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge1RpbGVDb2xsaWRlcn0gZnJvbSAnLi90aWxlcy5qcydcclxuaW1wb3J0IHtCb3VuZGFyeX0gZnJvbSAnLi90ZXJyYWluLmpzJ1xyXG5pbXBvcnQge1BvaW50TGlnaHR9IGZyb20gJy4uL2xpZ2h0aW5nL1BvaW50TGlnaHQuanMnXHJcbmltcG9ydCB7UG93ZXJ1cH0gZnJvbSAnLi9wb3dlcnVwcy5qcydcclxuXHJcblxyXG4vLyBwYXJlbnQgb2YgYWxsIG90aGVyIHByb2NlZHVyYWwgZ2VuZXJhdGlvbiBtYXAgY2xhc3Nlc1xyXG5jbGFzcyBBYnN0cmFjdE1hcHtcclxuICAgIGNvbnN0cnVjdG9yKHcsaCx0aWxlU2l6ZSwgbnVtTGlnaHRzLCBzaGFkZXJQcm9ncmFtLCB0aWxlc2V0LCB0b3JjaEZyYW1lcykge1xyXG4gICAgICAgIHRoaXMudyA9IHc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aWR0aCBvZiBtYXAgaW4gdGlsZXNcclxuICAgICAgICB0aGlzLmggPSBoOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGVpZ2h0IG9mIG1hcCBpbiB0aWxlc1xyXG4gICAgICAgIHRoaXMudGlsZVNpemUgPSB0aWxlU2l6ZTsgICAgICAgICAgICAgICAvLyBlZGdlIGxlbmd0aCBvZiB0aWxlcyBpbiBwaXhlbHNcclxuXHJcbiAgICAgICAgdGhpcy50aWxlTWFwID0ge30gICAgICAgICAgICAgICAgICAgICAgIC8vIGhhc2htYXAgb2YgY2hhcmFjdGVycyByZXByZXNlbnRpbmcgbWFwIGZlYXR1cmVzXHJcbiAgICAgICAgdGhpcy50aWxlc2V0ID0gdGlsZXNldDsgICAgICAgICAgICAgICAgIC8vIGhhc2htYXAgb2YgdGV4dHVyZXNcclxuICAgICAgICB0aGlzLm51bUxpZ2h0cyA9IG51bUxpZ2h0czsgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIGxpZ2h0cyB0byByYW5kb21seSBwbGFjZSBpbiBtYXBcclxuICAgICAgICB0aGlzLmZyZWVDZWxscyA9IFtdOyAgICAgICAgICAgICAgICAgICAgLy8ga2V5cyBmb3IgZW1wdHkgbWFwIHRpbGVzXHJcbiAgICAgICAgdGhpcy5ncm91bmRUaWxlcyA9IFtdOyAgICAgICAgICAgICAgICAgIC8vIGtleXMgZm9yIHRpbGVzIHdpdGggd2Fsa2JveGVzXHJcblxyXG4gICAgICAgIHRoaXMudGVycmFpbiA9IFtdOyAgICAgICAgICAgICAgICAgICAgICAvLyBib3ggY29sbGlkZXJzIGZvciB3YWxsc1xyXG4gICAgICAgIHRoaXMubGlnaHRzID0gW107ICAgICAgICAgICAgICAgICAgICAgICAvLyBsaWdodCBzaGFkaW5nIG1lc2hlcyBcclxuICAgICAgICB0aGlzLnRvcmNoRnJhbWVzID0gdG9yY2hGcmFtZXM7ICAgICAgICAgLy8gdG9yY2ggYW5pbWF0aW9uIHRleHR1cmVzXHJcbiAgICAgICAgdGhpcy50b3JjaFNwcml0ZXMgPSBbXTsgICAgICAgICAgICAgICAgIC8vIHRvcmNoIGFuaW1hdGVkIHNwcml0ZXNcclxuICAgICAgICB0aGlzLnNoYWRlclByb2dyYW0gPSBzaGFkZXJQcm9ncmFtOyAgICAgLy8gbGlnaHQgbWVzaCB3ZWJnbCBzaGFkZXIgXHJcblxyXG4gICAgICAgIC8vIGNvbnRhaW5lcnMgZm9yIGRpc3BsYXkgb2JqZWN0c1xyXG4gICAgICAgIHRoaXMudGlsZUNvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xyXG4gICAgICAgIHRoaXMudG9yY2hDb250YWluZXIgPSBuZXcgUElYSS5Db250YWluZXIoKTtcclxuXHJcbiAgICAgICAgLy8gdXNpbmcgc2V0cyBoZXJlIHRvIGZpbHRlciBvdXQgZHVwbGljYXRlIGVkZ2VzL3ZlcnRpY2VzXHJcbiAgICAgICAgLy8gZmVlZCB0aGVzZSBpbnRvIHJheWNhc3RpbmcgZnVuY3Rpb25zXHJcbiAgICAgICAgdGhpcy5lZGdlcyA9IG5ldyBTZXQoKTtcclxuICAgICAgICB0aGlzLnZlcnRpY2VzID0gbmV3IFNldCgpO1xyXG5cclxuICAgICAgICB0aGlzLnBvd2VydXBzID0gW107XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlcGxhY2UgcmFuZG9tIG9wZW4gY2VsbHMgd2l0aCBsaWdodHMgaW4gdGhlIGZlYXR1cmUgaGFzaG1hcFxyXG4gICAgZ2VuZXJhdGVMaWdodHMoZnJlZUNlbGxzLCBudW1MaWdodHMpe1xyXG4gICAgICAgIGZvciAobGV0IGk9MDtpPG51bUxpZ2h0cztpKyspIHtcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihST1QuUk5HLmdldFVuaWZvcm0oKSAqIGZyZWVDZWxscy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBsZXQga2V5ID0gZnJlZUNlbGxzLnNwbGljZShpbmRleCwgMSlbMF07XHJcbiAgICAgICAgICAgIHRoaXMudGlsZU1hcFtrZXldID0gXCIqXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE1ha2Ugd2ViZ2wgbWVzaGVzIGZyb20gdGhlIGxpZ2h0IHNoYWRlciAmIHJheWNhc3RpbmcgZGF0YVxyXG4gICAgYWRkTGlnaHRzKHNoYWRlclByb2dyYW0pe1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLnRpbGVNYXApe1xyXG4gICAgICAgICAgICBpZiAodGhpcy50aWxlTWFwW2tleV0gPT0gJyonKXtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJ0cyA9IGtleS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHBhcnNlSW50KHBhcnRzWzBdKTtcclxuICAgICAgICAgICAgICAgIGxldCB5ID0gcGFyc2VJbnQocGFydHNbMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGlnaHRzLnB1c2gobmV3IFBvaW50TGlnaHQoeCp0aGlzLnRpbGVTaXplLCB5KnRoaXMudGlsZVNpemUsIHRoaXMuZWRnZXMsIHRoaXMudmVydGljZXMsIHNoYWRlclByb2dyYW0sIHRoaXMudG9yY2hGcmFtZXMpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpZ2h0cy5mb3JFYWNoKCAobGlnaHQpID0+e1xyXG4gICAgICAgICAgICB0aGlzLnRvcmNoU3ByaXRlcy5wdXNoKGxpZ2h0LnRvcmNoLmFuaW1hdGlvbik7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwYXJhbGxheFNjcm9sbChjYW1lcmFDZW50ZXIsIHhTcGVlZCwgeVNwZWVkKXtcclxuICAgICAgICAvLyB0aGlzLmJhY2tncm91bmRDb250YWluZXIucGl2b3QuY29weUZyb20oY2FtZXJhQ2VudGVyKTtcclxuICAgICAgICB0aGlzLmJhY2tncm91bmRDb250YWluZXIueCA9IGNhbWVyYUNlbnRlci54IC8geFNwZWVkOyAvLy0gKHRoaXMudyAqIHRoaXMudGlsZVNpemUgKSAvIDI7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29udGFpbmVyLnkgPSBjYW1lcmFDZW50ZXIueSAvIHlTcGVlZDsgLy8tICh0aGlzLmggKiB0aGlzLnRpbGVTaXplICkgLyAyO1xyXG4gICAgfVxyXG5cclxuICAgIHRpbGVTcHJpdGVJbml0KHgseSx0ZXh0dXJlLCBzY2FsZSA9IDApe1xyXG4gICAgICAgIGxldCBzcHJpdGUgPSBuZXcgUElYSS5TcHJpdGUuZnJvbSh0ZXh0dXJlKTtcclxuXHJcbiAgICAgICAgc3ByaXRlLndpZHRoID0gdGhpcy50aWxlU2l6ZSAtNjtcclxuICAgICAgICBzcHJpdGUuaGVpZ2h0ID0gdGhpcy50aWxlU2l6ZTtcclxuXHJcbiAgICAgICAgaWYgKHNjYWxlICE9IDAgKVxyXG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0KHNjYWxlKTtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgc3ByaXRlLmFuY2hvci5zZXQoMC41KTtcclxuICAgICAgICBzcHJpdGUucG9zaXRpb24ueCA9IHgqdGhpcy50aWxlU2l6ZTtcclxuICAgICAgICBzcHJpdGUucG9zaXRpb24ueSA9IHkqdGhpcy50aWxlU2l6ZTsgIFxyXG5cclxuICAgICAgICB0aGlzLnRpbGVDb250YWluZXIuYWRkQ2hpbGQoc3ByaXRlKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gZWxsZXIgbWF6ZSBtYXBcclxuLy8gY3VycmVudGx5IHRoaXMgc3RpbGwgZHJhd3MgdGlsZXMgYXMgcmVjdGFuZ2xlIGdyYXBoaWNzIHByaW1pdGl2ZXNcclxuY2xhc3MgTWF6ZU1hcCBleHRlbmRzIEFic3RyYWN0TWFwIHtcclxuICAgIGNvbnN0cnVjdG9yKHcsaCx0aWxlU2l6ZSwgbnVtTGlnaHRzLCBzaGFkZXJQcm9ncmFtLCB0aWxlc2V0LCB0b3JjaEZyYW1lcyl7XHJcbiAgICAgICAgc3VwZXIodyxoLHRpbGVTaXplLCBudW1MaWdodHMsIHNoYWRlclByb2dyYW0sIHRpbGVzZXQsIHRvcmNoRnJhbWVzKVxyXG5cclxuICAgICAgICB0aGlzLmVsbGVyTWF6ZSA9IG5ldyBST1QuTWFwLkVsbGVyTWF6ZSh3LCBoKTtcclxuICAgICAgICB0aGlzLmRlYnVnR3JhcGhpY3MgPSBuZXcgUElYSS5HcmFwaGljcygpO1xyXG4gICAgICAgIHRoaXMudGlsZUNvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmRlYnVnR3JhcGhpY3MpO1xyXG5cclxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvbiBmb3IgbWF6ZSBjcmVhdGlvblxyXG4gICAgICAgIHRoaXMuZWxsZXJNYXplLmNyZWF0ZSggKHgsIHksIHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBrZXkgPSB4K1wiLFwiK3k7XHJcbiAgICAgICAgICAgIHRoaXMudGlsZU1hcFtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZnJlZUNlbGxzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyByYW5kb21seSBwbGFjZSBsaWdodHMgaW4gZW1wdHkgY2VsbHNcclxuICAgICAgICB0aGlzLmdlbmVyYXRlTGlnaHRzKHRoaXMuZnJlZUNlbGxzLCBudW1MaWdodHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIG1ha2Ugd2FsbCBjZWxsc1xyXG4gICAgICAgIHRoaXMuYWRkV2FsbHMoKTtcclxuXHJcbiAgICAgICAgLy8gbWFrZSBQb2ludExpZ2h0IG9iamVjdHMgXHJcbiAgICAgICAgdGhpcy5hZGRMaWdodHMoc2hhZGVyUHJvZ3JhbSk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoUk9ULlJORy5nZXRVbmlmb3JtKCkgKiB0aGlzLmZyZWVDZWxscy5sZW5ndGgpO1xyXG4gICAgICAgIGxldCBrZXkgPSB0aGlzLmZyZWVDZWxscy5zcGxpY2UoaW5kZXgsIDEpWzBdO1xyXG4gICAgICAgIGxldCBwYXJ0cyA9IGtleS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJTcGF3biA9IG5ldyBQSVhJLlBvaW50KHBhcnNlSW50KHBhcnRzWzBdKSp0aGlzLnRpbGVTaXplLCBwYXJzZUludChwYXJ0c1sxXSkqdGhpcy50aWxlU2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkV2FsbHMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGlsZU1hcCl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbGVNYXBba2V5XSA9PSAxKXsgICAgXHJcbiAgICAgICAgICAgICAgICBsZXQgcGFydHMgPSBrZXkuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHggPSBwYXJzZUludChwYXJ0c1swXSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgeSA9IHBhcnNlSW50KHBhcnRzWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgbmVpZ2hib3Igd2FsbHNcclxuICAgICAgICAgICAgICAgIGxldCBsZWZ0TmVpZ2hib3IsIHJpZ2h0TmVpZ2hib3IsIHRvcE5laWdoYm9yLCBib3ROZWlnaGJvcjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbGVNYXBbICh4LTEpICsnLCcrICB5IF0gPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0TmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGlsZU1hcFsgKHgrMSkgKycsJysgIHkgXSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0TmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGlsZU1hcFsgeCAgICAgKycsJysgKHktMSldID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wTmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGlsZU1hcFsgeCAgICAgKycsJysgKHkrMSldID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgYm90TmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGlsZSwgYm9vbGVhbiBsb2dpYyBkZXRlcm1pbmVzIGlmIGNsaW1iL3dhbGsgdHJpZ2dlciBjb2xsaWRlcnMgbmVlZCB0byBiZSBtYWRlXHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3VGlsZSA9IG5ldyBUaWxlQ29sbGlkZXIoeCx5LCB0aGlzLnRpbGVTaXplLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICghbGVmdE5laWdoYm9yICAmJiAhdG9wTmVpZ2hib3IpLCAvLyBsZWZ0IGxlZGdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIXJpZ2h0TmVpZ2hib3IgJiYgIXRvcE5laWdoYm9yKSwgLy8gcmlnaHQgbGVkZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdG9wTmVpZ2hib3IpICAgICAgICAgICAgICAgICAgICAvLyB3YWxrYm94XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVidWdHcmFwaGljcy5iZWdpbkZpbGwoMHg2NjAwNjYpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlYnVnR3JhcGhpY3MuZHJhd1JlY3QoeCp0aGlzLnRpbGVTaXplIC0gdGhpcy50aWxlU2l6ZS8yLCB5KnRoaXMudGlsZVNpemUgLSB0aGlzLnRpbGVTaXplLzIsIHRoaXMudGlsZVNpemUsIHRoaXMudGlsZVNpemUpXHJcbiAgICAgICAgICAgICAgICAvLyBwdXNoIHRpbGUgdG8gbGluZWFyIGFycmF5IG9mIHRpbGVzXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRlcnJhaW4ucHVzaChuZXdUaWxlKTsgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBwdXNoIHZlcnRpY2VzIHRvIHNldCBvZiB2ZXJ0aWNlc1xyXG4gICAgICAgICAgICAgICAgbGV0IHZlcnRzID0gbmV3VGlsZS5Db2xsaWRlci52ZXJ0aWNlcztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmVydHMuZm9yRWFjaCggKHZlcnRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmVydGljZXMuYWRkKHZlcnRleCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBwdXNoIGxpbmUgc2VnbWVudHMgdG8gc2V0IG9mIGVkZ2VzXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkZ2VzLmFkZChuZXcgQm91bmRhcnkodmVydHNbMF0ueCwgdmVydHNbMF0ueSwgdmVydHNbMV0ueCwgdmVydHNbMV0ueSkpOyAgIC8vIHRvcCBlZGdlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkZ2VzLmFkZChuZXcgQm91bmRhcnkodmVydHNbMV0ueCwgdmVydHNbMV0ueSwgdmVydHNbMl0ueCwgdmVydHNbMl0ueSkpOyAgIC8vIHJpZ2h0IGVkZ2VcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMuYWRkKG5ldyBCb3VuZGFyeSh2ZXJ0c1szXS54LCB2ZXJ0c1szXS55LCB2ZXJ0c1syXS54LCB2ZXJ0c1syXS55KSk7ICAgLy8gYm90IGVkZ2VcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMuYWRkKG5ldyBCb3VuZGFyeSh2ZXJ0c1swXS54LCB2ZXJ0c1swXS55LCB2ZXJ0c1szXS54LCB2ZXJ0c1szXS55KSk7ICAgLy8gbGVmdCBlZGdlXHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyB0ZXh0dXJlZCBjYXZlIG1hcCBmcm9tIGNlbGx1bGFyIGF1dG9tYXRhXHJcbmNsYXNzIENlbGx1bGFyTWFwIGV4dGVuZHMgQWJzdHJhY3RNYXB7XHJcbiAgICBjb25zdHJ1Y3Rvcih3LGgsdGlsZVNpemUsIG51bUxpZ2h0cywgc2hhZGVyUHJvZ3JhbSwgIHRpbGVzZXQsIHRvcmNoRnJhbWVzKXtcclxuICAgICAgICBzdXBlcih3LGgsdGlsZVNpemUsbnVtTGlnaHRzLHNoYWRlclByb2dyYW0sIHRpbGVzZXQsdG9yY2hGcmFtZXMpO1xyXG5cclxuICAgICAgICB0aGlzLmNlbGxNYXAgPSBuZXcgUk9ULk1hcC5DZWxsdWxhcih3LCBoLCB7XHJcbiAgICAgICAgICAgIGJvcm46IFs0LCA1LCA2LCA3LCA4XSxcclxuICAgICAgICAgICAgc3Vydml2ZTogWzIsIDMsIDQsIDVdXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2VsbE1hcC5yYW5kb21pemUoMC41KTsgLy8gcmFuZG9tIHNlZWQgd2l0aCA1MC81MCBkZWFkL2FsaXZlIGNlbGxzXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gZ2VuZXJhdGUgZmlyc3QgaXRlcmF0aW9uc1xyXG4gICAgICAgIGZvciAodmFyIGk9ODsgaT49MDsgaS0tKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2VsbE1hcC5jcmVhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29ubmVjdCB3YWxscywgdGhlbiBjb25uZWN0IGVtcHR5IGNlbGxzXHJcbiAgICAgICAgdGhpcy5jZWxsTWFwLmNvbm5lY3QobnVsbCwgMSk7XHJcbiAgICAgICAgdGhpcy5jZWxsTWFwLmNvbm5lY3QoKHgsIHksIHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBrZXkgPSB4K1wiLFwiK3k7XHJcbiAgICAgICAgICAgIHRoaXMudGlsZU1hcFtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gZG8gbGFzdCBtaW51dGUgdHdlYWtzIHRvIHRoZSBjZWxsIG1hcCBiZWZvcmUgZ2VuZXJhdGluZyB0aWxpbmdcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy50aWxlTWFwKXtcclxuICAgICAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgbGV0IHggPSBwYXJzZUludChwYXJ0c1swXSk7XHJcbiAgICAgICAgICAgIGxldCB5ID0gcGFyc2VJbnQocGFydHNbMV0pO1xyXG5cclxuICAgICAgICAgICAgLy8gY2xvc2Ugb2ZmIGVkZ2VzXHJcbiAgICAgICAgICAgIGlmICh4ID09IDAgfHwgeSA9PSAwIHx8IHggPT0gKHctMSkgfHwgeSA9PSAoaC0xKSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVNYXBba2V5XSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3JlIGFsbCBlbXB0eSBjZWxscyBmb3IgcGxhY2luZyByYW5kb20gb2JqZWN0c1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudGlsZU1hcFtrZXldKVxyXG4gICAgICAgICAgICAgICB0aGlzLmZyZWVDZWxscy5wdXNoKGtleSk7XHJcbiAgICAgICAgfSAgICAgICBcclxuXHJcbiAgICAgICAgLy8gcmFuZG9tbHkgcGxhY2UgbGlnaHRzIGluIGVtcHR5IGNlbGxzXHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUxpZ2h0cyh0aGlzLmZyZWVDZWxscywgbnVtTGlnaHRzKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBtYWtlIHdhbGwgY2VsbHNcclxuICAgICAgICB0aGlzLmNhdmVXYWxscyh0aGlzLnRpbGVNYXAsIHRydWUsIHRoaXMudGlsZUNvbnRhaW5lciwgdGhpcy50aWxlU2l6ZSk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHJhbmRvbWx5IHBsYWNlIGNhdG5pcCBvbiBncm91bmQgY2VsbHNcclxuICAgICAgICB0aGlzLmdlbmVyYXRlQ2F0bmlwKDEwKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIGJhY2tncm91ZG4gdGlsZXNcclxuICAgICAgICB0aGlzLmJhY2tncm91bmRUaWxpbmcoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBhZGQgZ3Jhc3MgYW5kIHNwaWtlcyB0byByYW5kb20gZWRnZSB0aWxlc1NcclxuICAgICAgICB0aGlzLmFkZEZlYXR1cmVzKHRoaXMuZnJlZUNlbGxzLCB0aGlzLnRpbGVNYXApICBcclxuICAgICAgICAvLyBhZGQgY2F0bmlwIHNwcml0ZXMgdG8gdGhlIG1hcFxyXG4gICAgICAgIHRoaXMuYWRkQ2F0bmlwKCk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwicmF5IGNhc3QgdmVydGljZXM6IFwiLCB0aGlzLnZlcnRpY2VzLnNpemUpO1xyXG5cclxuICAgICAgICAvLyBtYWtlIFBvaW50TGlnaHQgb2JqZWN0cyBcclxuICAgICAgICB0aGlzLmFkZExpZ2h0cyhzaGFkZXJQcm9ncmFtKTtcclxuXHJcbiAgICAgICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihST1QuUk5HLmdldFVuaWZvcm0oKSAqIHRoaXMuZnJlZUNlbGxzLmxlbmd0aCk7XHJcbiAgICAgICAgbGV0IGtleSA9IHRoaXMuZnJlZUNlbGxzLnNwbGljZShpbmRleCwgMSlbMF07XHJcbiAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICB0aGlzLnBsYXllclNwYXduID0gbmV3IFBJWEkuUG9pbnQocGFyc2VJbnQocGFydHNbMF0pKnRoaXMudGlsZVNpemUsIHBhcnNlSW50KHBhcnRzWzFdKSp0aGlzLnRpbGVTaXplKTtcclxuICAgIH1cclxuXHJcbiAgICBjYXZlV2FsbHModGlsZU1hcCwgZG9lc0NvbGxpc2lvbnMsIHRpbGVDb250YWluZXIsIHRpbGVTaXplKXtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGlsZU1hcCl7XHJcbiAgICAgICAgICAgIGlmICh0aWxlTWFwW2tleV0gPT0gMSl7ICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgICAgIGxldCB4ID0gcGFyc2VJbnQocGFydHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IHkgPSBwYXJzZUludChwYXJ0c1sxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIG5laWdoYm9yIHdhbGxzXHJcbiAgICAgICAgICAgICAgICBsZXQgbGVmdE5laWdoYm9yPSBmYWxzZSwgcmlnaHROZWlnaGJvcj0gZmFsc2UsIHRvcE5laWdoYm9yPSBmYWxzZSwgYm90TmVpZ2hib3I9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIFRMTmVpZ2hib3I9IGZhbHNlLCBUUk5laWdoYm9yPSBmYWxzZSwgQlJOZWlnaGJvcj0gZmFsc2UsIEJMTmVpZ2hib3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aWxlTWFwWyAoeC0xKSArJywnKyAgeSBdID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdE5laWdoYm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aWxlTWFwWyAoeCsxKSArJywnKyAgeSBdID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHROZWlnaGJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGlsZU1hcFsgeCAgICAgKycsJysgKHktMSldID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wTmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbGVNYXBbIHggICAgICsnLCcrICh5KzEpXSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIGJvdE5laWdoYm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aWxlTWFwWyAoeC0xKSAgICsnLCcrICh5LTEpXSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIFRMTmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbGVNYXBbICh4KzEpICAgKycsJysgKHktMSldID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgVFJOZWlnaGJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGlsZU1hcFsgKHgrMSkgICsnLCcrICh5KzEpXSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIEJSTmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbGVNYXBbICh4IC0xKSAgKycsJysgKHkrMSldID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgQkxOZWlnaGJvciA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0b3BOZWlnaGJvciAmJiB5ID4gMClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyb3VuZFRpbGVzLnB1c2goa2V5KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGRvZXNDb2xsaXNpb25zKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGlsZSwgYm9vbGVhbiBsb2dpYyBkZXRlcm1pbmVzIGlmIGNsaW1iL3dhbGsgdHJpZ2dlciBjb2xsaWRlcnMgbmVlZCB0byBiZSBtYWRlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1RpbGUgPSBuZXcgVGlsZUNvbGxpZGVyKHgseSwgdGhpcy50aWxlU2l6ZSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICghbGVmdE5laWdoYm9yICAmJiAhdG9wTmVpZ2hib3IpLCAvLyBsZWZ0IGxlZGdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICghcmlnaHROZWlnaGJvciAmJiAhdG9wTmVpZ2hib3IpLCAvLyByaWdodCBsZWRnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAhdG9wTmVpZ2hib3IpICAgICAgICAgICAgICAgICAgICAvLyB3YWxrYm94XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggdGlsZSB0byBsaW5lYXIgYXJyYXkgb2YgdGlsZXNcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlcnJhaW4ucHVzaChuZXdUaWxlKTsgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBwdXNoIHZlcnRpY2VzIHRvIHNldCBvZiB2ZXJ0aWNlc1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2ZXJ0cyA9IG5ld1RpbGUuQ29sbGlkZXIudmVydGljZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmVydHMuZm9yRWFjaCggKHZlcnRleCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmVydGV4ID0gTWF0dGVyLlZlY3Rvci5hZGQodmVydGV4LCBuZXdUaWxlLkNvbGxpZGVyLnBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGluZGV4KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoIWxlZnROZWlnaGJvciAmJiAhdG9wTmVpZ2hib3IpIHx8ICghdG9wTmVpZ2hib3IgJiYgVExOZWlnaGJvcikgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmVydGljZXMuYWRkKHZlcnRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoIXJpZ2h0TmVpZ2hib3IgJiYgIXRvcE5laWdoYm9yKSB8fCAoIXRvcE5laWdoYm9yICYmIFRSTmVpZ2hib3IpIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZlcnRpY2VzLmFkZCh2ZXJ0ZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCFyaWdodE5laWdoYm9yICYmICFib3ROZWlnaGJvcikgfHwgKCFib3ROZWlnaGJvciAmJiBCUk5laWdoYm9yKSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcy5hZGQodmVydGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghbGVmdE5laWdoYm9yICYmICFib3ROZWlnaGJvcikgfHwgKCFib3ROZWlnaGJvciAmJiBCTE5laWdoYm9yKSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcy5hZGQodmVydGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHVzaCBsaW5lIHNlZ21lbnRzIHRvIHNldCBvZiBlZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdG9wTmVpZ2hib3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMuYWRkKG5ldyBCb3VuZGFyeSh2ZXJ0c1swXS54LCB2ZXJ0c1swXS55LCB2ZXJ0c1sxXS54LCB2ZXJ0c1sxXS55KSk7ICAgLy8gdG9wIGVkZ2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJpZ2h0TmVpZ2hib3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMuYWRkKG5ldyBCb3VuZGFyeSh2ZXJ0c1sxXS54LCB2ZXJ0c1sxXS55LCB2ZXJ0c1syXS54LCB2ZXJ0c1syXS55KSk7ICAgLy8gcmlnaHQgZWRnZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYm90TmVpZ2hib3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMuYWRkKG5ldyBCb3VuZGFyeSh2ZXJ0c1szXS54LCB2ZXJ0c1szXS55LCB2ZXJ0c1syXS54LCB2ZXJ0c1syXS55KSk7ICAgLy8gYm90IGVkZ2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxlZnROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGdlcy5hZGQobmV3IEJvdW5kYXJ5KHZlcnRzWzBdLngsIHZlcnRzWzBdLnksIHZlcnRzWzNdLngsIHZlcnRzWzNdLnkpKTsgICAvLyBsZWZ0IGVkZ2VcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gZGVjaWRlIHdoaWNoIHNwcml0ZSB0byB1c2VcclxuICAgICAgICAgICAgICAgIC8vIGludGVyaW9yIHRpbGVcclxuICAgICAgICAgICAgICAgIGxldCB0aWxlVHlwZTtcclxuICAgICAgICAgICAgICAgIGlmICggdG9wTmVpZ2hib3IgJiYgYm90TmVpZ2hib3IgJiYgcmlnaHROZWlnaGJvciAmJiBsZWZ0TmVpZ2hib3IgKVxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVUeXBlID0gXCJJbnRlcmlvclwiOyAgIFxyXG4gICAgICAgICAgICAgICAgLy8gdG9wIGVkZ2VcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0b3BOZWlnaGJvciAmJiBsZWZ0TmVpZ2hib3IgJiYgcmlnaHROZWlnaGJvciAmJiBib3ROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICB0aWxlVHlwZSA9IFwiVG9wRWRnZVwiO1xyXG4gICAgICAgICAgICAgICAgLy8gYm90IGVkZ2VcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRvcE5laWdoYm9yICYmIGxlZnROZWlnaGJvciAmJiByaWdodE5laWdoYm9yICYmICFib3ROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICB0aWxlVHlwZSA9IFwiQm90dG9tRWRnZVwiO1xyXG4gICAgICAgICAgICAgICAgLy8gcmlnaHQgZWRnZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9wTmVpZ2hib3IgJiYgbGVmdE5laWdoYm9yICYmICFyaWdodE5laWdoYm9yICYmIGJvdE5laWdoYm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVUeXBlID0gXCJSaWdodEVkZ2VcIjtcclxuICAgICAgICAgICAgICAgIC8vIGxlZnQgZWRnZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9wTmVpZ2hib3IgJiYgIWxlZnROZWlnaGJvciAmJiByaWdodE5laWdoYm9yICYmIGJvdE5laWdoYm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVUeXBlID0gXCJMZWZ0RWRnZVwiO1xyXG4gICAgICAgICAgICAgICAgLy8gdG9wIGxlZnQgY29ybmVyXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdG9wTmVpZ2hib3IgJiYgIWxlZnROZWlnaGJvciAmJiByaWdodE5laWdoYm9yICYmIGJvdE5laWdoYm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVUeXBlID0gXCJUTENvcm5lclwiO1xyXG4gICAgICAgICAgICAgICAgLy8gdG9wIHJpZ2h0IGNvcm5lclxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXRvcE5laWdoYm9yICYmIGxlZnROZWlnaGJvciAmJiAhcmlnaHROZWlnaGJvciAmJiBib3ROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICB0aWxlVHlwZSA9IFwiVFJDb3JuZXJcIjtcclxuICAgICAgICAgICAgICAgIC8vIGJvdHRvbSBsZWZ0IGNvcm5lclxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9wTmVpZ2hib3IgJiYgIWxlZnROZWlnaGJvciAmJiByaWdodE5laWdoYm9yICYmICFib3ROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICB0aWxlVHlwZSA9IFwiQkxDb3JuZXJcIjtcclxuICAgICAgICAgICAgICAgIC8vIGJvdHRvbSByaWdodCBjb3JuZXJcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRvcE5laWdoYm9yICYmIGxlZnROZWlnaGJvciAmJiAhcmlnaHROZWlnaGJvciAmJiAhYm90TmVpZ2hib3IpXHJcbiAgICAgICAgICAgICAgICAgICAgdGlsZVR5cGUgPSBcIkJSQ29ybmVyXCI7XHJcbiAgICAgICAgICAgICAgICAvLyB3YW5nXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgodG9wTmVpZ2hib3IgKyBsZWZ0TmVpZ2hib3IgKyByaWdodE5laWdoYm9yICsgYm90TmVpZ2hib3IpID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgdGlsZVR5cGUgPSBcIldhbmdcIjtcclxuICAgICAgICAgICAgICAgIC8vIHNoYWZ0XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoKHRvcE5laWdoYm9yICsgYm90TmVpZ2hib3IpID09IDIpIHx8ICgobGVmdE5laWdoYm9yICsgcmlnaHROZWlnaGJvcikgPT0gMikpXHJcbiAgICAgICAgICAgICAgICAgICAgdGlsZVR5cGUgPSBcIlNoYWZ0XCI7XHJcbiAgICAgICAgICAgICAgICAvLyBsb25lIHRpbGVcclxuICAgICAgICAgICAgICAgIGVsc2UgXHJcbiAgICAgICAgICAgICAgICAgICAgdGlsZVR5cGUgPSBcIkxvbmVyXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYWRqdXN0IGRpbWVuc2lvbnMgYW5kIGFkZCB0byBjb250YWluZXJcclxuICAgICAgICAgICAgICAgIGlmICggdGlsZVR5cGUgKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3ByaXRlID0gbmV3IFBJWEkuU3ByaXRlLmZyb20odGhpcy50aWxlc2V0LmdldCh0aWxlVHlwZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZS53aWR0aCA9IHRpbGVTaXplICsyO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZS5oZWlnaHQgPSB0aWxlU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5jaG9yLnNldCgwLjUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZS5wb3NpdGlvbi54ID0geCp0aWxlU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUucG9zaXRpb24ueSA9IHkqdGlsZVNpemU7ICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aWxlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiV2FuZ1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlZnROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5nbGUgPSA5MDsgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0b3BOZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5nbGUgPSAxODA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyaWdodE5laWdoYm9yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5hbmdsZSA9IDI3MDsgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlNoYWZ0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVmdE5laWdoYm9yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5hbmdsZSA9IDkwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVDb250YWluZXIuYWRkQ2hpbGQoc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYmFja2dyb3VuZFRpbGluZygpe1xyXG4gICAgICAgIHRoaXMuYmdTY2FsZSA9IDI7XHJcbiAgICAgICAgbGV0IGJnU3ByaXRlID0gbmV3IFBJWEkuVGlsaW5nU3ByaXRlKHRoaXMudGlsZXNldC5nZXQoXCJCYWNrZ3JvdW5kXCIpLCB0aGlzLnRpbGVTaXplKiB0aGlzLncqIHRoaXMuYmdTY2FsZSwgdGhpcy50aWxlU2l6ZSogdGhpcy5oICogdGhpcy5iZ1NjYWxlKTtcclxuICAgICAgICBiZ1Nwcml0ZS54IC09ICh0aGlzLncgKiB0aGlzLnRpbGVTaXplICp0aGlzLmJnU2NhbGUpLzI7XHJcbiAgICAgICAgYmdTcHJpdGUueSAtPSAodGhpcy5oICogdGhpcy50aWxlU2l6ZSp0aGlzLmJnU2NhbGUpLzI7XHJcbiAgICAgICAgYmdTcHJpdGUudGlsZVNjYWxlLnggPSAodGhpcy50aWxlU2l6ZSAvIHRoaXMudGlsZXNldC5nZXQoXCJCYWNrZ3JvdW5kXCIpLndpZHRoKSouNzU7XHJcbiAgICAgICAgYmdTcHJpdGUudGlsZVNjYWxlLnkgPSAodGhpcy50aWxlU2l6ZSAvIHRoaXMudGlsZXNldC5nZXQoXCJCYWNrZ3JvdW5kXCIpLmhlaWdodCkqLjc1O1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbnRhaW5lci5hZGRDaGlsZChiZ1Nwcml0ZSk7XHJcbiAgICAgICAgdGhpcy5iZ1Nwcml0ZSA9IGJnU3ByaXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEZlYXR1cmVzKGZyZWVDZWxscywgdGlsZU1hcCl7XHJcbiAgICAgICAgZm9yICggbGV0IGtleSBvZiBmcmVlQ2VsbHMpe1xyXG4gICAgICAgICAgICBsZXQgcGFydHMgPSBrZXkuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICBsZXQgeCA9IHBhcnNlSW50KHBhcnRzWzBdKTtcclxuICAgICAgICAgICAgbGV0IHkgPSBwYXJzZUludChwYXJ0c1sxXSk7XHJcbiAgICAgICAgICAgIC8vIDEgaW4geCB0ZXN0XHJcbiAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKFJPVC5STkcuZ2V0VW5pZm9ybSgpICogMykgPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0b3AgbmVpZ2hib3IgdGlsZSBpcyBhIHdhbGxcclxuICAgICAgICAgICAgICAgIGlmICh0aWxlTWFwWyB4ICsnLCcrICh5LTEpXSA9PSAxIClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbGVTcHJpdGVJbml0KHgseSwgdGhpcy50aWxlc2V0LmdldChcIlNwaWtlc1wiKSk7XHJcbiAgICAgICAgICAgICAgICAgLy8gaWYgYm90dG9tIG5laWdoYm9yIHRpbGUgaXMgYSB3YWxsXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aWxlTWFwWyB4ICsnLCcrICh5KzEpXSA9PSAxKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyByYW5kb21seSBwaWNrIGJldHdlZW4gZ3Jhc3Mgc3ByaXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoTWF0aC5mbG9vcihST1QuUk5HLmdldFVuaWZvcm0oKSAqIDIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aWxlU3ByaXRlSW5pdCh4LHksIHRoaXMudGlsZXNldC5nZXQoXCJHcmFzcy0xXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbGVTcHJpdGVJbml0KHgseSwgdGhpcy50aWxlc2V0LmdldChcIkdyYXNzLTJcIiksKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQ2F0bmlwKG51bVNwYXducyl7XHJcbiAgICAgICAgZm9yIChsZXQgaT0wO2k8bnVtU3Bhd25zO2krKykge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSBNYXRoLmZsb29yKFJPVC5STkcuZ2V0VW5pZm9ybSgpICogdGhpcy5ncm91bmRUaWxlcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBsZXQga2V5ID0gdGhpcy5ncm91bmRUaWxlcy5zcGxpY2UoaW5kZXgsIDEpWzBdO1xyXG5cclxuICAgICAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgbGV0IHggPSBwYXJzZUludChwYXJ0c1swXSk7XHJcbiAgICAgICAgICAgIGxldCB5ID0gcGFyc2VJbnQocGFydHNbMV0pO1xyXG5cclxuICAgICAgICAgICAgeS09MTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGlsZU1hcFtrZXldID0gXCJOXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGFkZCBjYXRuaXAgc3ByaXRlcyB0byBmb3JlZ3JvdW5kIGNvbnRhaW5lclxyXG4gICAgYWRkQ2F0bmlwKCl7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGlsZU1hcCl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbGVNYXBba2V5XSA9PSAnTicpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KFwiLFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHBhcnNlSW50KHBhcnRzWzBdKTtcclxuICAgICAgICAgICAgICAgIGxldCB5ID0gcGFyc2VJbnQocGFydHNbMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgLy8gdGhpcy50aWxlU3ByaXRlSW5pdCh4LC0teSwgdGhpcy50aWxlc2V0LmdldChcImNhdG5pcFwiKSwgMy4wKTtcclxuICAgICAgICAgICAgICAgbGV0IGNhdG5pcCA9IG5ldyBQb3dlcnVwKHgqdGhpcy50aWxlU2l6ZSwgLS15KiB0aGlzLnRpbGVTaXplLCB0aGlzLnRpbGVzZXQuZ2V0KFwiY2F0bmlwXCIpKTtcclxuICAgICAgICAgICAgICAgdGhpcy5wb3dlcnVwcy5wdXNoKGNhdG5pcCk7XHJcblxyXG4gICAgICAgICAgICAgICB0aGlzLnRpbGVDb250YWluZXIuYWRkQ2hpbGQoY2F0bmlwLnNwcml0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge01hemVNYXAsIENlbGx1bGFyTWFwfSIsImV4cG9ydCBjbGFzcyBNeVRpbWVye1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVuZFRpbWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSBudWxsO1xyXG4gICAgICAgIC8vIHNhdmUgdGhlIGluaXQgdGltZSBvZiB0aGUgdGltZXIgY3V6IHdoeSBub3RcclxuICAgICAgICBsZXQgY2xvY2sgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuaW5pdFRpbWUgPSBjbG9jay5nZXRUaW1lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKXtcclxuICAgICAgIC8vIGlmICggISB0aGlzLmlzUnVubmluZyl7XHJcbiAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV0IGNsb2NrID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBjbG9jay5nZXRUaW1lKCk7XHJcbiAgICAgIC8vICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcCgpe1xyXG4gICAgICAgIGlmICggdGhpcy5pc1J1bm5pbmcgKSAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNoZWNrIGVsYXBzZWQgdGltZSB3aXRob3V0IHN0b3BwaW5nIHRoZSB0aW1lclxyXG4gICAgZ2V0RWxhcHNlZFRpbWUoKXtcclxuICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmcpe1xyXG4gICAgICAgICAgICBsZXQgY2xvY2sgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gKGNsb2NrLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcblxyXG59IiwiaW1wb3J0IE1hdHRlciBmcm9tICdtYXR0ZXItanMvYnVpbGQvbWF0dGVyLm1pbi5qcyc7XHJcbmltcG9ydCB7Qm91bmRhcnl9IGZyb20gXCIuL3RlcnJhaW4uanNcIjtcclxuaW1wb3J0IHtNeVRpbWVyfSBmcm9tIFwiLi9teVRpbWVyLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUGxheWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvc2l0aW9uLCBhbmltYXRpb25NYXApIHtcclxuICAgICAgICAvLyBzdG9yZSBtb3N0IHJlY2VudCBpbnB1dCBmb3IgbGVkZ2UgY2xpbWJpbmcgbG9naWNcclxuICAgICAgICB0aGlzLmxhc3RJbnB1dCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wcmV2VGltZVNjYWxlID0gMS4wO1xyXG4gICAgICAgIHRoaXMucHJldlZlbCA9IDAuMFxyXG5cclxuICAgICAgICAvLyBwaHlzaWNzIHZhcmlhYmxlc1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBuZXcgUElYSS5Qb2ludChwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcclxuICAgICAgICB0aGlzLnNjYWxlID0gMy41O1xyXG4gICAgICAgIHRoaXMubWF4VmVsID0gNTtcclxuICAgICAgICB0aGlzLmRlZmF1bHRNYXhWZWwgPSA1O1xyXG4gICAgICAgIHRoaXMudHJpcE1heFZlbCA9IDYuNVxyXG4gICAgICAgIHRoaXMuanVtcFZlbCA9IC0yNTtcclxuICAgICAgICB0aGlzLmRlZmF1bHRKdW1wVmVsID0gLTI1O1xyXG4gICAgICAgIHRoaXMudHJpcEp1bXBWZWwgPSAtMzA7XHJcbiAgICAgICAgdGhpcy51blNjYWxlZEp1bXBWZWwgPSAtMjU7XHJcbiAgICAgICAgdGhpcy54VmVsID0gMDtcclxuXHJcbiAgICAgICAgLy8gYWN0aW9uIGZsYWdzXHJcbiAgICAgICAgdGhpcy5pc0dyb3VuZGVkID0gZmFsc2UsXHJcbiAgICAgICAgdGhpcy5pblNsaWRlID0gZmFsc2UsXHJcbiAgICAgICAgdGhpcy5pblNsb3dEb3duID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5qdW1wSW5wdXQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzSGFuZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhU25hcHBlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5ib3VuY3lCdWcgPSAwO1xyXG5cclxuICAgICAgICAvLyBjb2xsaXNpb24gZXZlbnQgdGltZXJcclxuICAgICAgICB0aGlzLmNvbGxpc2lvblRpbWVyID0gbmV3IE15VGltZXIoKTtcclxuICAgICAgICB0aGlzLndhbGxKdW1wVGltZXIgPSBuZXcgTXlUaW1lcigpO1xyXG4gICAgICAgIHRoaXMubGF0ZUp1bXBEdXJhdGlvbiA9IDIyNTsgLy8gaG93IG1hbnkgbXMgdG8gZ2l2ZSB0aGUgcGxheWVyIGZvciBhIGxhdGUganVtcCB3aGVuIGZhbGxpbmcgb2ZmIGEgbGVkZ2VcclxuICAgICAgICB0aGlzLmZhbGxEYW1hZ2VNUyA9IDE1MDA7XHJcbiAgICAgICAgdGhpcy5ncmFwcGxlTVMgPSAxMjU7XHJcblxyXG4gICAgICAgIC8vIGFjY2VsZXJhdGlvbiBsaW5lYXJseSBpbmNyZWFzZXMgZnJvbSAxLjAgdG8gMi41IG92ZXIgdGhlIGZpcnN0IDc1IHVwZGF0ZXMgb2YgZmFsbGluZ1xyXG4gICAgICAgIHRoaXMuZmFsbERhbWFnZVZlbCA9IDEwOyBcclxuICAgICAgICB0aGlzLmlkbGVGcmFtZUNvdW50ID0gMDtcclxuICAgICAgICB0aGlzLm1heElkbGVGcmFtZXMgPSA2MDtcclxuXHJcbiAgICAgICAgLy8gaGVscCB3aXRoIGxlZGdlIGNsaW1iaW5nXHJcbiAgICAgICAgdGhpcy5jbGltYlRyYW5zbGF0aW9uID0gbmV3IFBJWEkuUG9pbnQoMCwwKTtcclxuICAgICAgICB0aGlzLmNhbWVyYU1vdmVtZW50ID0gbmV3IFBJWEkuUG9pbnQoMCwwKTtcclxuXHJcbiAgICAgICAgLy8gdG8gY2hlY2sgc3ByaXRlIGZsaXAgY29udmVuaWVudGx5XHJcbiAgICAgICAgdGhpcy5mbGlwID0gXCJsZWZ0XCI7XHJcblxyXG4gICAgICAgIC8vIEtleS12YWx1ZSBwYWlycyBvZiBzdHJpbmdzIGFuZCBhbmltYXRpb25zXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zID0gYW5pbWF0aW9uTWFwO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9IFwibm9uZVwiO1xyXG5cclxuICAgICAgICAvLyBjb2xsaWRlciBkaW1lbnNpb25zLCBzZXQgdG8gdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHdhbGsgYW5pbWF0aW9uIGZvciBub3dcclxuICAgICAgICB0aGlzLmNvbGxpZGVyV2lkdGggPSB0aGlzLmFuaW1hdGlvbnMuZ2V0KFwid2Fsa1wiKS53aWR0aDtcclxuICAgICAgICB0aGlzLmNvbGxpZGVySGVpZ2h0ID0gdGhpcy5hbmltYXRpb25zLmdldChcIndhbGtcIikuaGVpZ2h0OyBcclxuXHJcbiAgICAgICAgLy8gY29sbGlzaW9uIGJveCBsaW5lIHNlZ21lbnRzXHJcbiAgICAgICAgdGhpcy5BID0gTWF0dGVyLlZlY3Rvci5jcmVhdGUodGhpcy5wb3NpdGlvbi54IC0gKHRoaXMuY29sbGlkZXJXaWR0aC8yKSwgdGhpcy5wb3NpdGlvbi55IC0gKHRoaXMuY29sbGlkZXJIZWlnaHQvMikpO1xyXG4gICAgICAgIHRoaXMuQiA9IE1hdHRlci5WZWN0b3IuY3JlYXRlKHRoaXMucG9zaXRpb24ueCArICh0aGlzLmNvbGxpZGVyV2lkdGgvMiksIHRoaXMucG9zaXRpb24ueSAtICh0aGlzLmNvbGxpZGVySGVpZ2h0LzIpKTtcclxuICAgICAgICB0aGlzLkMgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh0aGlzLnBvc2l0aW9uLnggLSAodGhpcy5jb2xsaWRlcldpZHRoLzIpLCB0aGlzLnBvc2l0aW9uLnkgKyAodGhpcy5jb2xsaWRlckhlaWdodC8yKSk7XHJcbiAgICAgICAgdGhpcy5EID0gTWF0dGVyLlZlY3Rvci5jcmVhdGUodGhpcy5wb3NpdGlvbi54ICsgKHRoaXMuY29sbGlkZXJXaWR0aC8yKSwgdGhpcy5wb3NpdGlvbi55ICsgKHRoaXMuY29sbGlkZXJIZWlnaHQvMikpO1xyXG4gICAgICAgIC8vIGFycmF5IG9mIHRoZSA0IGNvbGxpc2lvbiBib3ggc2VnbWVudHNcclxuICAgICAgICB0aGlzLmJvdW5kcyA9IFsobmV3IEJvdW5kYXJ5KHRoaXMuQS54LCB0aGlzLkEueSwgdGhpcy5CLngsIHRoaXMuQi55KSksIFxyXG4gICAgICAgICAgICAgICAgICAgIChuZXcgQm91bmRhcnkodGhpcy5BLngsIHRoaXMuQS55LCB0aGlzLkMueCwgdGhpcy5DLnkpKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgKG5ldyBCb3VuZGFyeSh0aGlzLkMueCwgdGhpcy5DLnksIHRoaXMuRC54LCB0aGlzLkQueSkpLCBcclxuICAgICAgICAgICAgICAgICAgICAobmV3IEJvdW5kYXJ5KHRoaXMuQi54LCB0aGlzLkIueSwgdGhpcy5ELngsIHRoaXMuRC55KSldO1xyXG5cclxuICAgICAgICB0aGlzLmJvZHkgPSBuZXcgTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnksIHRoaXMuY29sbGlkZXJXaWR0aCwgdGhpcy5jb2xsaWRlckhlaWdodCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNpdHk6IDAuMDAwNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmljdGlvbkFpcjogMC4wNixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0aXR1dGlvbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmljdGlvbjogMC4wMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmVydGlhOiBJbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgICAgIH0pOyBcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUodGltZXNjYWxlKXsgIFxyXG4gICAgICAgIGlmICggIXRoaXMuaXNHcm91bmRlZCAmJiB0aGlzLmJvZHkudmVsb2NpdHkueSA+IDEgKXtcclxuICAgICAgICAgICAgdGhpcy5wcmV2VmVsID0gdGhpcy5ib2R5LnZlbG9jaXR5Lnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggdGhpcy53YWxsSnVtcFRpbWVyLmlzUnVubmluZyAmJiB0aGlzLndhbGxKdW1wVGltZXIuZ2V0RWxhcHNlZFRpbWUoKSA+IHRoaXMuZ3JhcHBsZU1TICkgIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIHRoaXMubGFzdElucHV0KTtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFdmVudCh7IHR5cGU6IFwiaW5wdXREb3duXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IHRoaXMubGFzdElucHV0IH0pO1xyXG4gICAgICAgICAgICB0aGlzLndhbGxKdW1wVGltZXIuc3RvcCgpO1xyXG4gICAgICAgIH0gICAgIFxyXG5cclxuICAgICAgICBpZiAoIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9PSBcInN0b3BcIiAmJiAhdGhpcy5hbmltYXRpb25zLmdldChcInN0b3BcIikucGxheWluZyl7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwiaWRsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9PSAnaWRsZScgJiYgIXRoaXMuYW5pbWF0aW9ucy5nZXQoXCJpZGxlXCIpLnBsYXlpbmcpe1xyXG4gICAgICAgICAgICB0aGlzLmlkbGVGcmFtZUNvdW50Kys7XHJcbiAgICAgICAgICAgIGlmICggdGhpcy5pZGxlRnJhbWVDb3VudCA+IHRoaXMubWF4SWRsZUZyYW1lcyApe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pZGxlRnJhbWVDb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcImlkbGVcIiwgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heElkbGVGcmFtZXMgPSBNYXRoLnJhbmRvbSgpICogMjAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAgICBcclxuICAgIFxyXG4gICAgICAgIC8vIHRyYW5zaXRpb24gZnJvbSBlbmQgb2YgY2xpbWJcclxuICAgICAgICBpZiAoIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9PSBcImNsaW1iXCIpe1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sYXN0SW5wdXQgIT0gXCJlbmRcIiAmJiB0aGlzLmxhc3RJbnB1dCAhPSB0aGlzLmZsaXAgJiYgdGhpcy5hbmltYXRpb25zLmdldChcImNsaW1iXCIpLmN1cnJlbnRGcmFtZSA8IDQgKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2xpbWIgY2FuY2VsXCIsIHRoaXMubGFzdElucHV0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwianVtcFwiLCA1KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxpcCh0aGlzLmxhc3RJbnB1dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzR3JvdW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5qdW1wSW5wdXQgPSBmYWxzZTsgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmFTbmFwcGVkID0gdHJ1ZTsgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBNYXR0ZXIuQm9keS5zZXRTdGF0aWModGhpcy5ib2R5LCBmYWxzZSk7ICBcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNIYW5naW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbHNlIGlmICghdGhpcy5hbmltYXRpb25zLmdldChcImNsaW1iXCIpLnBsYXlpbmcpIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIE1hdHRlci5Cb2R5LnNldFBvc2l0aW9uKHRoaXMuYm9keSwgbmV3IE1hdHRlci5WZWN0b3IuY3JlYXRlKHRoaXMuY2xpbWJUcmFuc2xhdGlvbi54LCB0aGlzLmNsaW1iVHJhbnNsYXRpb24ueSkpO1xyXG4gICAgICAgICAgICAgICAgTWF0dGVyLkJvZHkuc2V0VmVsb2NpdHkodGhpcy5ib2R5LCBuZXcgTWF0dGVyLlZlY3Rvci5jcmVhdGUoMCwwKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXN0SW5wdXQgIT0gdGhpcy5mbGlwKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnB1dCA9IFwiZW5kXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmxhc3RJbnB1dCl7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJpZ2h0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwid2Fsa1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy54VmVsID0gdGhpcy5tYXhWZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5TbG93RG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcIndhbGtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFZlbCA9IC10aGlzLm1heFZlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pblNsb3dEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwic3RvcFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pblNsb3dEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NrQ2FtZXJhKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmJvdW5jeUJ1ZylcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvdW5jeUJ1ZyA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0dyb3VuZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5qdW1wSW5wdXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNIYW5naW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBNYXR0ZXIuQm9keS5zZXRTdGF0aWModGhpcy5ib2R5LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgLy8gYXBwbHkgdmVsb2NpdHkgZnJvbSBpbnB1dFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTWF0dGVyLkJvZHkuc2V0VmVsb2NpdHkodGhpcy5ib2R5LCBuZXcgTWF0dGVyLlZlY3Rvci5jcmVhdGUodGhpcy54VmVsLCB0aGlzLmJvZHkudmVsb2NpdHkueSkgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE1vdmUgdGhlIHNwcml0ZXMgdG8gZm9sbG93IHRoZWlyIHBoeXNpY2lzIGJvZHlcclxuICAgICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMuYm9keS5wb3NpdGlvbi54LCB0aGlzLmJvZHkucG9zaXRpb24ueSk7XHJcblxyXG4gICAgICAgIC8vIGFwcGx5IGZyaWN0aW9uIGlmIG5lZWRlZFxyXG4gICAgICAgIGlmICggdGhpcy5pblNsb3dEb3duKXtcclxuICAgICAgICAgICAgdGhpcy5zbG93VmVsb2NpdHkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gY2hhbmdlIGFuaW1hdGlvbiBzcGVlZCB3aXRoIHRpbWVzY2FsZVxyXG4gICAgICAgIGlmICh0aW1lc2NhbGUgIT0gdGhpcy5wcmV2VGltZVNjYWxlKXtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHNwcml0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVzY2FsZSA9PSAwLjUpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvblNwZWVkICo9IDAuNTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5pbWF0aW9uU3BlZWQgKj0gMjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdGhpcy5wcmV2VGltZVNjYWxlID0gdGltZXNjYWxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGF0ZSBqdW1tcCBzeXN0ZW1cclxuICAgICAgICBsZXQgZmFsbEFuaW1hdGlvblRpbWUgPSAodGhpcy5sYXRlSnVtcER1cmF0aW9uLzUpIC8gdGltZXNjYWxlO1xyXG4gICAgICAgIGxldCB3YWl0VGltZTtcclxuICAgICAgICBpZiAodGhpcy5pblNsaWRlKXtcclxuICAgICAgICAgICAgZmFsbEFuaW1hdGlvblRpbWUgPSBmYWxsQW5pbWF0aW9uVGltZSAvIDI7XHJcbiAgICAgICAgICAgIHdhaXRUaW1lID0gZmFsbEFuaW1hdGlvblRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgd2FpdFRpbWUgPSB0aGlzLmxhdGVKdW1wRHVyYXRpb24gLyB0aW1lc2NhbGU7XHJcblxyXG4gICAgICAgIGlmICggIXRoaXMuaXNIYW5naW5nICYmIHRoaXMuY29sbGlzaW9uVGltZXIuaXNSdW5uaW5nICYmIHRoaXMuY29sbGlzaW9uVGltZXIuZ2V0RWxhcHNlZFRpbWUoKSAgPiBmYWxsQW5pbWF0aW9uVGltZSApe1xyXG4gICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcImp1bXBcIiwgNSk7XHJcbiAgICAgICAgfSAgICAgXHJcbiAgICAgICAgaWYgKCAhdGhpcy5pc0hhbmdpbmcgJiYgdGhpcy5jb2xsaXNpb25UaW1lci5pc1J1bm5pbmcgJiYgdGhpcy5jb2xsaXNpb25UaW1lci5nZXRFbGFwc2VkVGltZSgpICA+IHdhaXRUaW1lICl7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uVGltZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICB0aGlzLmlzR3JvdW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5pblNsaWRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuanVtcElucHV0ID0gZmFsc2U7ICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBNb3ZlIGFsbCBzcHJpdGVzXHJcbiAgICBzZXRQb3NpdGlvbihpeCxpeSkge1xyXG4gICAgICAgIC8vIG1vdmUgb3JpZ2luIHBvaW50XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi54ID0gaXg7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0gaXk7XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgY29sbGlzaW9uIGJvdW5kYXJpZXNcclxuICAgICAgICB0aGlzLkEgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh0aGlzLnBvc2l0aW9uLnggLSAodGhpcy5jb2xsaWRlcldpZHRoLzIpLCB0aGlzLnBvc2l0aW9uLnkgLSAodGhpcy5jb2xsaWRlckhlaWdodC8yKSk7XHJcbiAgICAgICAgdGhpcy5CID0gTWF0dGVyLlZlY3Rvci5jcmVhdGUodGhpcy5wb3NpdGlvbi54ICsgKHRoaXMuY29sbGlkZXJXaWR0aC8yKSwgdGhpcy5wb3NpdGlvbi55IC0gKHRoaXMuY29sbGlkZXJIZWlnaHQvMikpO1xyXG4gICAgICAgIHRoaXMuQyA9IE1hdHRlci5WZWN0b3IuY3JlYXRlKHRoaXMucG9zaXRpb24ueCAtICh0aGlzLmNvbGxpZGVyV2lkdGgvMiksIHRoaXMucG9zaXRpb24ueSArICh0aGlzLmNvbGxpZGVySGVpZ2h0LzIpKTtcclxuICAgICAgICB0aGlzLkQgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh0aGlzLnBvc2l0aW9uLnggKyAodGhpcy5jb2xsaWRlcldpZHRoLzIpLCB0aGlzLnBvc2l0aW9uLnkgKyAodGhpcy5jb2xsaWRlckhlaWdodC8yKSk7XHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBbKG5ldyBCb3VuZGFyeSh0aGlzLkEueCwgdGhpcy5BLnksIHRoaXMuQi54LCB0aGlzLkIueSkpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAobmV3IEJvdW5kYXJ5KHRoaXMuQS54LCB0aGlzLkEueSwgdGhpcy5DLngsIHRoaXMuQy55KSksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIChuZXcgQm91bmRhcnkodGhpcy5DLngsIHRoaXMuQy55LCB0aGlzLkQueCwgdGhpcy5ELnkpKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgKG5ldyBCb3VuZGFyeSh0aGlzLkIueCwgdGhpcy5CLnksIHRoaXMuRC54LCB0aGlzLkQueSkpXTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBtb3ZlIGFuaW1hdGlvbiBzcHJpdGVzICAgICAgICAgICAgICBcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3ByaXRlKSB7XHJcbiAgICAgICAgICAgIHNwcml0ZS54ID0gaXg7XHJcbiAgICAgICAgICAgIHNwcml0ZS55ID0gaXk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBjaGFuZ2UgYWN0aXZlIGFuaW1hdGlvbiwgcGxheSBhdCBnaXZlbiBmcmFtZVxyXG4gICAgc2V0QW5pbWF0aW9uKGtleSwgZnJhbWUgPSAwLCBvdmVycmlkZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgLy8gY2xlYXIgYWxsIHByZXZpb3VzIGFuaW1hdGlvbnNcclxuICAgICAgICBpZiAoIGtleSAhPSB0aGlzLmN1cnJlbnRBbmltYXRpb24gfHwgb3ZlcnJpZGUgKXtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uID0ga2V5O1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdmFyIGFjdGl2ZUFuaW0gPSB0aGlzLmFuaW1hdGlvbnMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIGFjdGl2ZUFuaW0udmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGFjdGl2ZUFuaW0uZ290b0FuZFBsYXkoZnJhbWUpO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMuc2V0KGtleSwgYWN0aXZlQW5pbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBcclxuICAgIFxyXG4gICAgLy8gZmxpcCBzcHJpdGVzIGFyb3VuZCB5IGF4aXMgXHJcbiAgICBzZXRGbGlwKGRpcikge1xyXG4gICAgICAgIHZhciBsb2NhbFNjYWxlO1xyXG4gICAgICAgIGlmICh0aGlzLmNhbWVyYVNuYXBwZWQpe1xyXG4gICAgICAgICAgICBpZiAoIGRpciA9PSBcInJpZ2h0XCIgKSB7XHJcbiAgICAgICAgICAgICAgICBsb2NhbFNjYWxlID0gLU1hdGguYWJzKHRoaXMuc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IC1NYXRoLmFicyh0aGlzLnNjYWxlKTs7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZsaXAgPSBcInJpZ2h0XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIGRpciA9PSBcImxlZnRcIikge1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTY2FsZSA9IE1hdGguYWJzKHRoaXMuc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IE1hdGguYWJzKHRoaXMuc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mbGlwID0gXCJsZWZ0XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5zY2FsZS54ID0gbG9jYWxTY2FsZTtcclxuICAgICAgICAgICAgfSkgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyBBaXIgZnJpY3Rpb24gZm9yIGR1bW1pZXNcclxuICAgIHNsb3dWZWxvY2l0eSgpIHtcclxuICAgICAgICBpZiAoIHRoaXMueFZlbCA+IDAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMueFZlbCAtPSAwLjE7XHJcbiAgICAgICAgICBpZiAoIHRoaXMueFZlbCA8PSAwICkge1xyXG4gICAgICAgICAgICB0aGlzLnhWZWwgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmluU2xvd0Rvd24gPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIHRoaXMueFZlbCA8IDAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMueFZlbCArPSAwLjFcclxuICAgICAgICAgIGlmICggdGhpcy54VmVsID49IDAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMueFZlbCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuaW5TbG93RG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkcmF3Q29sbGlkZXIocmVuZGVyZXIpe1xyXG4gICAgICAgIHJlbmRlcmVyLmNsZWFyKCk7XHJcbiAgICAgICAgcmVuZGVyZXIuYmVnaW5GaWxsKDB4ZmM4ODAzLCAwLjUpO1xyXG4gICAgICAgIHJlbmRlcmVyLmRyYXdSZWN0KCB0aGlzLnBvc2l0aW9uLnggLSAodGhpcy5jb2xsaWRlcldpZHRoLzIpICwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueSAtICh0aGlzLmNvbGxpZGVySGVpZ2h0LzIpIC0xLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsaWRlcldpZHRoICwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGlkZXJIZWlnaHQgKTtcclxuICAgICAgICByZW5kZXJlci5lbmRGaWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIGNhbWVyYSBtb3ZlbWVudCBkdXJpbmcgY2xpbWIgYW5pbWF0aW9uXHJcbiAgICBnZXRDbGltYkRpc3RhbmNlKHgseSl7XHJcbiAgICAgICAgY29uc3QgZnJhbWVzID0gdGhpcy5hbmltYXRpb25zLmdldChcImNsaW1iXCIpLnRvdGFsRnJhbWVzO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhTW92ZW1lbnQueCA9ICh4IC0gdGhpcy5wb3NpdGlvbi54KSAvICg5KjUpO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhTW92ZW1lbnQueSA9ICh5IC0gdGhpcy5wb3NpdGlvbi55KSAvICg5KjUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0TGVkZ2VDbGltYihsZWRnZVBvc2l0aW9uLCBpc1JpZ2h0TGVkZ2Upe1xyXG4gICAgICAgIGxldCBWZWN0b3IgPSBNYXR0ZXIuVmVjdG9yO1xyXG4gICAgICAgIHRoaXMuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNHcm91bmRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNIYW5naW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcImNsaW1iXCIpOyBcclxuICAgICAgICBsZXQgeE9mZnNldCA9IDQwLCAgIC8vIGhvdyBmYXIgYXdheSBmcm9tIHRoZSBsZWRnZSB3ZSB3aWxsIGFuY2hvciB0aGUgY2F0XHJcbiAgICAgICAgICAgIHlPZmZzZXQgPSAwLFxyXG4gICAgICAgICAgICB4Q2xpbWJPZmZzZXQgPSAtNjAsXHJcbiAgICAgICAgICAgIHlDbGltYk9mZnNldCA9IC01MjtcclxuICAgICAgICBpZiAoIGlzUmlnaHRMZWRnZSl7XHJcbiAgICAgICAgICB0aGlzLnNldEZsaXAoXCJsZWZ0XCIpO1xyXG4gICAgICAgIH0gIFxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICB4T2Zmc2V0ICo9IC0xO1xyXG4gICAgICAgICAgeENsaW1iT2Zmc2V0ICo9IC0xO1xyXG4gICAgICAgICAgdGhpcy5zZXRGbGlwKFwicmlnaHRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgLy8gbW92ZSB0aGUgcGxheWVyIHRvIGdyYWIgdGhlIGxlZGdlXHJcbiAgICAgICAgbGV0IGhhbmdQb3NpdGlvbiA9IG5ldyBWZWN0b3IuY3JlYXRlKGxlZGdlUG9zaXRpb24ueCArIHhPZmZzZXQsIGxlZGdlUG9zaXRpb24ueSArIHlPZmZzZXQpO1xyXG4gICAgICAgIE1hdHRlci5Cb2R5LnNldFN0YXRpYyh0aGlzLmJvZHksIHRydWUpO1xyXG4gICAgICAgIE1hdHRlci5Cb2R5LnNldFZlbG9jaXR5KHRoaXMuYm9keSwgbmV3IFZlY3Rvci5jcmVhdGUoMCwgMCkgKTtcclxuICAgICAgICBNYXR0ZXIuQm9keS5zZXRQb3NpdGlvbih0aGlzLmJvZHksIGhhbmdQb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5jbGltYlRyYW5zbGF0aW9uLnNldChoYW5nUG9zaXRpb24ueCArIHhDbGltYk9mZnNldCwgaGFuZ1Bvc2l0aW9uLnkgKyB5Q2xpbWJPZmZzZXQpO1xyXG4gICAgICAgIHRoaXMuZ2V0Q2xpbWJEaXN0YW5jZSh0aGlzLmNsaW1iVHJhbnNsYXRpb24ueCwgdGhpcy5jbGltYlRyYW5zbGF0aW9uLnkpO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhU25hcHBlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGxvY2tDYW1lcmEoKXtcclxuICAgICAgICB0aGlzLmNhbWVyYVNuYXBwZWQgPSB0cnVlOyBcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVFdmVudChldmVudCl7XHJcbiAgICAgICAgc3dpdGNoKGV2ZW50LnR5cGUpe1xyXG4gICAgICAgICAgICBjYXNlIFwiaW5wdXREb3duXCI6XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhldmVudC50eXBlLCBldmVudC5kaXJlY3Rpb24pXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goZXZlbnQuZGlyZWN0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXBcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8ganVtcCBmcm9tIGdyb3VuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMuaXNHcm91bmRlZCAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXR0ZXIuQm9keS5zZXRWZWxvY2l0eSh0aGlzLmJvZHksIE1hdHRlci5WZWN0b3IuY3JlYXRlKHRoaXMueFZlbCwgdGhpcy5qdW1wVmVsKSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9NYXR0ZXIuQm9keS5hcHBseUZvcmNlKHRoaXMuYm9keSwge3g6IHRoaXMucG9zaXRpb24ueCwgeTogdGhpcy5wb3NpdGlvbi55fSwge3g6IDAuMCwgeTogLTAuMX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcImp1bXBcIiwgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzR3JvdW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuanVtcElucHV0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGp1bXAgZnJvbSB3YWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCB0aGlzLmluU2xpZGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndhbGxKdW1wVGltZXIuc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJpZ2h0IHNpZGUgb2YgY2F0IGlzIGluIGNvbnRhY3Qgd2l0aCB3YWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMuZmxpcCA9PSBcInJpZ2h0XCIgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGbGlwKFwibGVmdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnhWZWwgPSAtdGhpcy5tYXhWZWwgKiAxLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0dGVyLkJvZHkuc2V0VmVsb2NpdHkodGhpcy5ib2R5LCBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh0aGlzLnhWZWwsIC44NSp0aGlzLmp1bXBWZWwpICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oXCJqdW1wXCIsIDAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuanVtcElucHV0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGxlZnQgc2lkZSBvZiBjYXQgaXMgaW4gY29udGFjdCB3aXRoIHdhbGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZmxpcCA9PSBcImxlZnRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxpcChcInJpZ2h0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFZlbCA9IHRoaXMubWF4VmVsICogMS41O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdHRlci5Cb2R5LnNldFZlbG9jaXR5KHRoaXMuYm9keSwgTWF0dGVyLlZlY3Rvci5jcmVhdGUodGhpcy54VmVsLCAuODUqdGhpcy5qdW1wVmVsKSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwianVtcFwiLCAwLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluU2xpZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmp1bXBJbnB1dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkb3duXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0dyb3VuZGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oXCJ3YWxrXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZsaXAoXCJyaWdodFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pblNsb3dEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFZlbCA9IHRoaXMubWF4VmVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnB1dCA9IFwicmlnaHRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNHcm91bmRlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwid2Fsa1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGbGlwKFwibGVmdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pblNsb3dEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFZlbCA9IC10aGlzLm1heFZlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0SW5wdXQgPSBcImxlZnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiaW5wdXRVcFwiOlxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZXZlbnQudHlwZSwgZXZlbnQuZGlyZWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKGV2ZW50LmRpcmVjdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVwXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkb3duXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnB1dCA9IFwiZW5kXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLmlzR3JvdW5kZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcInN0b3BcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnhWZWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pblNsb3dEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnB1dCA9IFwiZW5kXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5pc0dyb3VuZGVkICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oXCJzdG9wXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy54VmVsID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5TbG93RG93biA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07IiwiaW1wb3J0IG5pcHBsZWpzIGZyb20gJ25pcHBsZWpzL2Rpc3QvbmlwcGxlanMuanMnO1xyXG5pbXBvcnQgTWF0dGVyIGZyb20gJ21hdHRlci1qcy9idWlsZC9tYXR0ZXIubWluLmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb250cm9sbGVye1xyXG4gICAgLy8gcGFzcyBieSByZWZlcmVuY2UgZm9yIGR1bW1pZXNcclxuICAgIGNvbnN0cnVjdG9yKGNhdFBsYXllciwgY2F0Qm9keSkge1xyXG4gICAgICAgIC8vIGluaXQgam95c3RpY2tcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHsgbW9kZSA6ICdzdGF0aWMnLFxyXG4gICAgICAgIHBvc2l0aW9uOiB7IGxlZnQ6ICcyNSUnLCB0b3A6ICc4MCUnfSxcclxuICAgICAgICB6b25lIDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215Q2FudmFzJylcclxuICAgICAgfTtcclxuICAgICAgICB0aGlzLm1hbmFnZXIgPSBuaXBwbGVqcy5jcmVhdGUob3B0aW9ucyk7XHJcblxyXG4gICAgICAgIC8vIGJpbmQgam95c3RpY2sgZXZlbnRzIHRvIGdhbWUgYWN0aW9uc1xyXG4gICAgICAgIHRoaXMubWFuYWdlci5vbignc3RhcnQnLCBmdW5jdGlvbiAoZXZ0LCBuaXBwbGUpIHtcclxuICAgICAgICAgIC8vIG1vb253YWxrXHJcbiAgICAgICAgICBpZiAoY2F0UGxheWVyLmlzR3JvdW5kZWQpIHtcclxuICAgICAgICAgICAgY2F0UGxheWVyLnNldEFuaW1hdGlvbihcIndhbGtcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyB3YWxrIHJpZ2h0XHJcbiAgICAgICAgICBuaXBwbGUub24oJ2RpcjpyaWdodCcsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgaWYgKCFjYXRQbGF5ZXIuaXNIYW5naW5nKXtcclxuICAgICAgICAgICAgICBpZiAoY2F0UGxheWVyLmlzR3JvdW5kZWQpXHJcbiAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuc2V0QW5pbWF0aW9uKFwid2Fsa1wiKTtcclxuICAgICAgICAgICAgICBjYXRQbGF5ZXIuc2V0RmxpcChcInJpZ2h0XCIpO1xyXG4gICAgICAgICAgICAgIGNhdFBsYXllci5pblNsb3dEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgY2F0UGxheWVyLnhWZWwgPSBjYXRQbGF5ZXIubWF4VmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdFBsYXllci5sYXN0SW5wdXQgPSBcInJpZ2h0XCI7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIC8vIHdhbGsgbGVmdFxyXG4gICAgICAgICAgbmlwcGxlLm9uKCdkaXI6bGVmdCcsIGZ1bmN0aW9uIChldnQpIHsgXHJcbiAgICAgICAgICAgIGlmICghY2F0UGxheWVyLmlzSGFuZ2luZyl7IFxyXG4gICAgICAgICAgICAgIGlmIChjYXRQbGF5ZXIuaXNHcm91bmRlZClcclxuICAgICAgICAgICAgICAgIGNhdFBsYXllci5zZXRBbmltYXRpb24oXCJ3YWxrXCIpO1xyXG4gICAgICAgICAgICAgIGNhdFBsYXllci5zZXRGbGlwKFwibGVmdFwiKTtcclxuICAgICAgICAgICAgICBjYXRQbGF5ZXIuaW5TbG93RG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIGNhdFBsYXllci54VmVsID0gLWNhdFBsYXllci5tYXhWZWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0UGxheWVyLmxhc3RJbnB1dCA9IFwibGVmdFwiO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICAvLyBqdW1wIFxyXG4gICAgICAgICAgbmlwcGxlLm9uKCdkaXI6dXAnLCBmdW5jdGlvbihldnQpIHtcclxuICAgICAgICAgICAgLy8ganVtcCBmcm9tIGdyb3VuZFxyXG4gICAgICAgICAgICBpZiAoIWNhdFBsYXllci5pc0hhbmdpbmcpeyBcclxuICAgICAgICAgICAgICBpZiAoIGNhdFBsYXllci5pc0dyb3VuZGVkICYmIGNhdFBsYXllci5jYW1lcmFTbmFwcGVkICkge1xyXG4gICAgICAgICAgICAgICAgTWF0dGVyLkJvZHkuc2V0VmVsb2NpdHkoY2F0Qm9keSwgTWF0dGVyLlZlY3Rvci5jcmVhdGUoY2F0UGxheWVyLnhWZWwsIGNhdFBsYXllci5qdW1wVmVsKSApO1xyXG4gICAgICAgICAgICAgICAgY2F0UGxheWVyLnNldEFuaW1hdGlvbihcImp1bXBcIiwgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuaXNHcm91bmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY2F0UGxheWVyLmp1bXBJbnB1dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvLyBqdW1wIGZyb20gd2FsbFxyXG4gICAgICAgICAgICAgIGVsc2UgaWYgKCBjYXRQbGF5ZXIuaW5TbGlkZSAmJiBjYXRQbGF5ZXIuY2FtZXJhU25hcHBlZCApIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHJpZ2h0IHNpZGUgb2YgY2F0IGlzIGluIGNvbnRhY3Qgd2l0aCB3YWxsXHJcbiAgICAgICAgICAgICAgICBjYXRQbGF5ZXIud2FsbEp1bXBUaW1lci5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCBjYXRQbGF5ZXIuZmxpcCA9PSBcInJpZ2h0XCIgKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNhdFBsYXllci5zZXRGbGlwKFwibGVmdFwiKTtcclxuICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLnhWZWwgPSAtY2F0UGxheWVyLm1heFZlbCAqIDEuNTtcclxuICAgICAgICAgICAgICAgICAgTWF0dGVyLkJvZHkuc2V0VmVsb2NpdHkoY2F0Qm9keSwgTWF0dGVyLlZlY3Rvci5jcmVhdGUoY2F0UGxheWVyLnhWZWwsIC44NSpjYXRQbGF5ZXIuanVtcFZlbCkgKTtcclxuICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLnNldEFuaW1hdGlvbihcImp1bXBcIiwgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgIGNhdFBsYXllci5pblNsaWRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgIGNhdFBsYXllci5qdW1wSW5wdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gaWYgbGVmdCBzaWRlIG9mIGNhdCBpcyBpbiBjb250YWN0IHdpdGggd2FsbFxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2F0UGxheWVyLmZsaXAgPT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLnNldEZsaXAoXCJyaWdodFwiKTtcclxuICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLnhWZWwgPSBjYXRQbGF5ZXIubWF4VmVsICogMS41O1xyXG4gICAgICAgICAgICAgICAgICBNYXR0ZXIuQm9keS5zZXRWZWxvY2l0eShjYXRCb2R5LCBNYXR0ZXIuVmVjdG9yLmNyZWF0ZShjYXRQbGF5ZXIueFZlbCwgLjg1KmNhdFBsYXllci5qdW1wVmVsKSApO1xyXG4gICAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuc2V0QW5pbWF0aW9uKFwianVtcFwiLCAwLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLmluU2xpZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLmp1bXBJbnB1dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9ICAgIFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBuaXBwbGUub24oJ2VuZCcsIGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICAgICAgICAgIGNhdFBsYXllci5sYXN0SW5wdXQgPSBcImVuZFwiO1xyXG4gICAgICAgICAgICAgIGlmICggY2F0UGxheWVyLmlzR3JvdW5kZWQgKSB7XHJcbiAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuc2V0QW5pbWF0aW9uKFwic3RvcFwiKTtcclxuICAgICAgICAgICAgICAgIGNhdFBsYXllci54VmVsID0gMDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuaW5TbG93RG93biA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0gXHJcblxyXG4vLyB1c2luZyBvbGQgc3ludGF4IGZvciBub3dcclxudmFyIEtCQ29udHJvbGxlciA9IGZ1bmN0aW9uKGNhdFBsYXllciwgY2F0Qm9keSwgZ2FtZVRpY2tlciwgY2FtZXJhLCBwYXVzZU1lbnUpIHtcclxuICAgIC8vIGtleWJvYXJkIGNvbnRyb2xzXHJcbiAgICB0aGlzLnJpZ2h0RG93biA9IGZhbHNlO1xyXG4gICAgdGhpcy5sZWZ0RG93biA9IGZhbHNlO1xyXG4gICAgZG9jdW1lbnQub25rZXlkb3duID0gY2hlY2tLZXlEb3duO1xyXG4gICAgZG9jdW1lbnQub25rZXl1cCA9IGNoZWNrS2V5VXA7XHJcbiAgICBmdW5jdGlvbiBjaGVja0tleURvd24oZSkge1xyXG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICBsZXQgbXlFdmVudCA9IHtcclxuICAgICAgICAgIHR5cGU6IFwiaW5wdXREb3duXCJ9O1xyXG5cclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09ICczOCcpIFxyXG4gICAgICAgICAgbXlFdmVudC5kaXJlY3Rpb24gPSBcInVwXCJcclxuXHJcbiAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09ICc0MCcpIFxyXG4gICAgICAgICAgbXlFdmVudC5kaXJlY3Rpb24gPSBcImRvd25cIjsgXHJcblxyXG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAnMzcnICYmICF0aGlzLmxlZnREb3duICkge1xyXG4gICAgICAgICAgbXlFdmVudC5kaXJlY3Rpb24gPSBcImxlZnRcIjtcclxuICAgICAgICAgIHRoaXMucmlnaHREb3duID0gZmFsc2U7XHJcbiAgICAgICAgICB0aGlzLmxlZnREb3duID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAnMzknICYmICF0aGlzLnJpZ2h0RG93biApIHtcclxuICAgICAgICAgIG15RXZlbnQuZGlyZWN0aW9uID0gXCJyaWdodFwiO1xyXG4gICAgICAgICAgdGhpcy5sZWZ0RG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgdGhpcy5yaWdodERvd24gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzcGFjZWJhclxyXG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAnMzInKXtcclxuICAgICAgICAgIGlmIChwYXVzZU1lbnUuaXNPcGVuKVxyXG4gICAgICAgICAgICBteUV2ZW50LmRpcmVjdGlvbiA9IFwiZW50ZXJcIlxyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgIGdhbWVUaWNrZXIuc3BlZWQgPSAwLjU7XHJcbiAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gJ3gnIGtleVxyXG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAnODgnKSB7XHJcbiAgICAgICAgICBjYXRQbGF5ZXIuc2hvd0RlYnVnICBePSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAnZicga2V5XHJcbiAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09ICc3MCcpIHtcclxuICAgICAgICAgIGNhbWVyYS5hZGRUcmF1bWEoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVzYyBrZXlcclxuICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gJzI3Jyl7XHJcbiAgICAgICAgICBwYXVzZU1lbnUub25DbGljayhnYW1lVGlja2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdXNlTWVudS5pc09wZW4pe1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAobXlFdmVudC5kaXJlY3Rpb24gPT0gXCJ1cFwiKVxyXG4gICAgICAgICAgICBteUV2ZW50LmRpcmVjdGlvbiA9IFwibGVmdFwiO1xyXG4gICAgICAgICAgZWxzZSBpZiAobXlFdmVudC5kaXJlY3Rpb24gPT0gXCJkb3duXCIpXHJcbiAgICAgICAgICAgIG15RXZlbnQuZGlyZWN0aW9uID0gXCJyaWdodFwiO1xyXG4gICAgICAgICAgcGF1c2VNZW51LmhhbmRsZUV2ZW50KG15RXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBjYXRQbGF5ZXIuaGFuZGxlRXZlbnQobXlFdmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrS2V5VXAoZSkge1xyXG5cclxuICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgbGV0IG15RXZlbnQgPSB7XHJcbiAgICAgICAgICB0eXBlOiBcImlucHV0VXBcIn07XHJcblxyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT0gJzM4Jykge1xyXG4gICAgICAgICAgICAvLyB1cCBhcnJvd1xyXG4gICAgICAgICAgICBteUV2ZW50LmRpcmVjdGlvbiA9IFwidXBcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gJzQwJykge1xyXG4gICAgICAgICAgICAvLyBkb3duIGFycm93XHJcbiAgICAgICAgICAgIG15RXZlbnQuZGlyZWN0aW9uID0gXCJkb3duXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09ICczNycgJiYgdGhpcy5sZWZ0RG93bikge1xyXG4gICAgICAgICAgbXlFdmVudC5kaXJlY3Rpb24gPSBcImxlZnRcIlxyXG4gICAgICAgICAgICB0aGlzLmxlZnREb3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gJzM5JyAmJiB0aGlzLnJpZ2h0RG93bikge1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0RG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBteUV2ZW50LmRpcmVjdGlvbiA9IFwicmlnaHRcIlxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09ICczMicpe1xyXG4gICAgICAgICAgZ2FtZVRpY2tlci5zcGVlZCA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdFBsYXllci5oYW5kbGVFdmVudChteUV2ZW50KTtcclxuICAgIH1cclxufVxyXG5cclxuS0JDb250cm9sbGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEtCQ29udHJvbGxlclxyXG5leHBvcnQge0tCQ29udHJvbGxlcn07IiwiZXhwb3J0IGNsYXNzIFNoYWRvd01hcCB7XHJcbiAgICBjb25zdHJ1Y3RvcihsaWdodHMsIHRpbGVNYXAsIHJlbmRlcmVyKSB7XHJcbiAgICAgICAgbGV0IHNoYXBlciA9IG5ldyBQSVhJLkdyYXBoaWNzKCk7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbmV3IFBJWEkuR3JhcGhpY3MoKTtcclxuICAgICAgICBsZXQgYmx1clNpemUgPSAzMjtcclxuXHJcbiAgICAgICAgbGV0IHRpbGVTaXplID0gdGlsZU1hcC50aWxlU2l6ZVxyXG4gICAgICAgIGxldCB3ID0gdGlsZU1hcC53O1xyXG4gICAgICAgIGxldCBoID0gdGlsZU1hcC5oO1xyXG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IG5ldyBQSVhJLlJlY3RhbmdsZSgtdGlsZVNpemUvMiwgLXRpbGVTaXplLzIsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3KnRpbGVTaXplICwgaCp0aWxlU2l6ZSApO1xyXG5cclxuICAgICAgICAvL2NvbnN0IGJvdW5kcyA9IG5ldyBQSVhJLlJlY3RhbmdsZSgtdGlsZVNpemUvMiwgLXRpbGVTaXplLzIsIDQwMDAsNDAwMCk7XHJcblxyXG4gICAgICAgIHNoYXBlci5iZWdpbkZpbGwoMHhGRkZGRkYsMSk7XHJcbiAgICAgICAgc2hhcGVyLmRyYXdSZWN0KC10aWxlU2l6ZS8yLCAtdGlsZVNpemUvMiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHcqdGlsZVNpemUgLCBoKnRpbGVTaXplICk7XHJcbiAgICAgICAgc2hhcGVyLmVuZEZpbGwoKTtcclxuXHJcblxyXG4gICAgICAgIGxpZ2h0cy5mb3JFYWNoKCAobGlnaHQpID0+IHtcclxuICAgICAgICAgICAgbGlnaHQubGlnaHRDb250YWluZXIuY2hpbGRyZW4uZm9yRWFjaCggKG1lc2gpID0+e1xyXG4gICAgICAgICAgICAgICAgbGV0IGdlb21ldHJ5ID0gbWVzaC5nZW9tZXRyeTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdmVydGljZXMgPSBnZW9tZXRyeS5nZXRCdWZmZXIoXCJhVmVydGV4UG9zaXRpb25cIikuZGF0YTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgc2hhcGVyLmJlZ2luRmlsbCgwLCAxKTtcclxuICAgICAgICAgICAgICAgIHNoYXBlci5tb3ZlVG8odmVydGljZXNbMF0sIHZlcnRpY2VzWzFdKTtcclxuICAgICAgICAgICAgICAgIHNoYXBlci5saW5lVG8odmVydGljZXNbMl0sIHZlcnRpY2VzWzNdKTtcclxuICAgICAgICAgICAgICAgIHNoYXBlci5saW5lVG8odmVydGljZXNbNF0sIHZlcnRpY2VzWzVdKTtcclxuICAgICAgICAgICAgICAgIHNoYXBlci5saW5lVG8odmVydGljZXNbMF0sIHZlcnRpY2VzWzFdKTtcclxuICAgICAgICAgICAgICAgIHNoYXBlci5lbmRGaWxsKCk7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBzaGFwZXIuZmlsdGVycyA9IFtuZXcgUElYSS5maWx0ZXJzLkJsdXJGaWx0ZXIoYmx1clNpemUpXVxyXG5cclxuICAgICAgICBjb25zdCB0ZXh0dXJlID0gcmVuZGVyZXIuZ2VuZXJhdGVUZXh0dXJlKHNoYXBlciwgUElYSS5TQ0FMRV9NT0RFUy5ORUFSRVNULCAxLCBib3VuZHMpO1xyXG4gICAgICAgIHRoaXMuZm9jdXMgPSBuZXcgUElYSS5TcHJpdGUodGV4dHVyZSk7XHJcbiAgICAgICAgdGhpcy5mb2N1cy54ID0gLXRpbGVTaXplLzI7XHJcbiAgICAgICAgdGhpcy5mb2N1cy55ID0gLXRpbGVTaXplLzI7XHJcblxyXG4gICAgICAgIHRoaXMubWVzaC5iZWdpbkZpbGwoMHgwMDAwMDAsIDAuNCk7XHJcbiAgICAgICAgdGhpcy5tZXNoLmRyYXdSZWN0KC10aWxlU2l6ZS8yLCAtdGlsZVNpemUvMiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3KnRpbGVTaXplICwgaCp0aWxlU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5tZXNoLmVuZEZpbGwoKTtcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLm1hc2sgPSB0aGlzLmZvY3VzO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgbWFrZU5vaXNlMkQgfSBmcm9tIFwib3Blbi1zaW1wbGV4LW5vaXNlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTXlDYW1lcmEge1xyXG4gICAgY29uc3RydWN0b3IocGxheWVyUG9zaXRpb24pe1xyXG4gICAgICAgIHRoaXMudGFyZ2V0UG9zID0gcGxheWVyUG9zaXRpb247XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBsYXllclBvc2l0aW9uO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gbmV3IFBJWEkuUG9pbnQoMC4wLDAuMCk7XHJcbiAgICAgICAgdGhpcy5hbmdsZU9mZnNldCA9IDAuMDtcclxuICAgICAgICB0aGlzLm1heE9mZnNldCA9IDI1MDtcclxuICAgICAgICB0aGlzLm1heEFuZ2xlT2Zmc2V0ID0gMTA7XHJcbiAgICAgICAgdGhpcy5mbGlwT2Zmc2V0ID0gNzU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zaGFrZSA9IDAuMDtcclxuICAgICAgICB0aGlzLnRyYXVtYSA9IDAuMDtcclxuXHJcbiAgICAgICAgdGhpcy5iYXNlU2VlZCA9IERhdGUubm93KCk7XHJcblxyXG4gICAgICAgIHRoaXMueE5vaXNlID0gbWFrZU5vaXNlMkQodGhpcy5iYXNlU2VlZCk7XHJcbiAgICAgICAgdGhpcy55Tm9pc2UgPSBtYWtlTm9pc2UyRCh0aGlzLmJhc2VTZWVkKzEpO1xyXG4gICAgICAgIHRoaXMuck5vaXNlID0gbWFrZU5vaXNlMkQodGhpcy5iYXNlU2VlZCsyKTtcclxuXHJcbiAgICAgICAgdGhpcy5ub2lzZUluY3JlbWVudCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHBsYXllclBvc2l0aW9uLCBmbGlwLCB0aW1lc2NhbGUpe1xyXG4gICAgICAgIHRoaXMubm9pc2VJbmNyZW1lbnQgKz0gdGltZXNjYWxlO1xyXG4gICAgICAgIHRoaXMudHJhdW1hIC09IDAuMDE1ICogdGltZXNjYWxlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICggdGhpcy50cmF1bWEgPCAwKVxyXG4gICAgICAgICAgICB0aGlzLnRyYXVtYSA9IDA7XHJcbiAgICAgICAgdGhpcy5zaGFrZSA9IE1hdGgucG93KHRoaXMudHJhdW1hLCAyKTtcclxuXHJcbiAgICAgICAgdGhpcy5zaW1wbGV4U2hha2UoKTtcclxuICAgICAgICBsZXQgdGFyZ2V0UG9zaXRpb24gPSBuZXcgUElYSS5Qb2ludCgpO1xyXG4gICAgICAgIHRhcmdldFBvc2l0aW9uLmNvcHlGcm9tKHBsYXllclBvc2l0aW9uKTtcclxuICAgICAgICBpZiAoIGZsaXAgPT0gXCJyaWdodFwiKVxyXG4gICAgICAgICAgICB0YXJnZXRQb3NpdGlvbi54ICs9IHRoaXMuZmxpcE9mZnNldDtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uLnggLT0gdGhpcy5mbGlwT2Zmc2V0O1xyXG5cclxuICAgICAgICAvLyB0aGlzLnBvc2l0aW9uLmNvcHlGcm9tKHBsYXllclBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5hc3ltcHRvdGljQXZlcmFnZSh0YXJnZXRQb3NpdGlvbiwgMC4wNSk7XHJcblxyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCArPSB0aGlzLm9mZnNldC54O1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueSArPSB0aGlzLm9mZnNldC55O1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFRyYXVtYSh0cmF1bWEpe1xyXG4gICAgICAgIHRoaXMudHJhdW1hICs9IHRyYXVtYTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInRyYXVtYSArPSBcIiwgdHJhdW1hKTtcclxuICAgIH1cclxuXHJcbiAgICByYW5kb21TaGFrZSgpe1xyXG4gICAgICAgIHRoaXMub2Zmc2V0LnggPSB0aGlzLm1heE9mZnNldCAqIHRoaXMuc2hha2UgKiAoTWF0aC5yYW5kb20oKSoyIC0xKTtcclxuICAgICAgICB0aGlzLm9mZnNldC55ID0gdGhpcy5tYXhPZmZzZXQgKiB0aGlzLnNoYWtlICogKE1hdGgucmFuZG9tKCkqMiAtMSk7XHJcbiAgICAgICAgdGhpcy5hbmdsZU9mZnNldCA9IHRoaXMubWF4QW5nbGVPZmZzZXQgKiB0aGlzLnNoYWtlICogKE1hdGgucmFuZG9tKCkqMiAtMSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2ltcGxleFNoYWtlKCl7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQueCA9IHRoaXMubWF4T2Zmc2V0ICogdGhpcy5zaGFrZSAqIHRoaXMueE5vaXNlKHRoaXMubm9pc2VJbmNyZW1lbnQsIDApO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0LnkgPSB0aGlzLm1heE9mZnNldCAqIHRoaXMuc2hha2UgKiB0aGlzLnlOb2lzZSh0aGlzLm5vaXNlSW5jcmVtZW50LCAwKTtcclxuICAgICAgICB0aGlzLmFuZ2xlT2Zmc2V0ID0gdGhpcy5tYXhBbmdsZU9mZnNldCAqIHRoaXMuc2hha2UgKiB0aGlzLnJOb2lzZSh0aGlzLm5vaXNlSW5jcmVtZW50LCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3ltcHRvdGljQXZlcmFnZSh0YXJnZXQsIHdlaWdodCl7XHJcbiAgICAgICAgY29uc3QgaW52ZXJzZVdlaWdodCA9IDEuMCAtIHdlaWdodDtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnggPSBpbnZlcnNlV2VpZ2h0ICogdGhpcy5wb3NpdGlvbi54ICsgd2VpZ2h0KnRhcmdldC54O1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueSA9IGludmVyc2VXZWlnaHQgKiB0aGlzLnBvc2l0aW9uLnkgKyB3ZWlnaHQqdGFyZ2V0Lnk7XHJcbiAgICB9XHJcblxyXG59IiwiY2xhc3MgTXlCdXR0b24ge1xyXG4gICAgY29uc3RydWN0b3IodGV4dHVyZXMpe1xyXG4gICAgICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IG5ldyBNYXAoW1tcInVucHJlc3NlZFwiLG5ldyBQSVhJLlNwcml0ZS5mcm9tKHRleHR1cmVzWzBdKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wicHJlc3NlZFwiLCBuZXcgUElYSS5TcHJpdGUuZnJvbSh0ZXh0dXJlc1sxXSldXSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goIChzcHJpdGUpID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLmludGVyYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgc3ByaXRlLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnNldCg3KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMuc3ByaXRlcy5nZXQoXCJ1bnByZXNzZWRcIikudmlzaWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb25SZWN0YW5nbGUgPSBuZXcgUElYSS5SZWN0YW5nbGUoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImhlbGxvXCIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBQbGF5ZXJCdXR0b24gZXh0ZW5kcyBNeUJ1dHRvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0dXJlcywgdHlwZSwgcG9zaXRpb24sIGV2ZW50Q2FsbGJhY2ssIHBhdXNlQ2FsbGJhY2spe1xyXG4gICAgICAgIHN1cGVyKHRleHR1cmVzKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuZXZlbnRDYWxsYmFjayA9IGV2ZW50Q2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5wYXVzZUNhbGxiYWNrID0gcGF1c2VDYWxsYmFjaztcclxuXHJcbiAgICAgICAgdGhpcy5pblBhdXNlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuc3ByaXRlcy5mb3JFYWNoKCAoc3ByaXRlKSA9PiB7XHJcbiAgICAgICAgICAgIHNwcml0ZS5wb3NpdGlvbi5jb3B5RnJvbShwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIHNwcml0ZS5hbHBoYSA9IDAuNTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLnNwcml0ZXMuZ2V0KFwidW5wcmVzc2VkXCIpLmhlaWdodDtcclxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5zcHJpdGVzLmdldChcInVucHJlc3NlZFwiKS53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBvblByZXNzKCl7XHJcbiAgICAgICAgdGhpcy5zd2FwQnV0dG9ucygpO1xyXG4gICAgICAgIGNvbnN0IGV2ZW50ID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBcImlucHV0RG93blwiLFxyXG4gICAgICAgICAgICBkaXJlY3Rpb246IHRoaXMudHlwZVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pblBhdXNlKXtcclxuICAgICAgICAgICAgaWYgKCBldmVudC5kaXJlY3Rpb24gPT0gXCJ1cFwiICl7XHJcbiAgICAgICAgICAgICAgICBldmVudC5kaXJlY3Rpb24gPSBcImVudGVyXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wYXVzZUNhbGxiYWNrKGV2ZW50KTtcclxuICAgICAgICB9ICAgICAgIFxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5ldmVudENhbGxiYWNrKGV2ZW50KTtcclxuICAgICAgICB0aGlzLnByZXNzZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRW5kKCl7XHJcbiAgICAgICAgdGhpcy5zd2FwQnV0dG9ucygpO1xyXG4gICAgICAgIGNvbnN0IGV2ZW50ID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBcImlucHV0VXBcIixcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiB0aGlzLnR5cGVcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaW5QYXVzZSlcclxuICAgICAgICAgICAgdGhpcy5wYXVzZUNhbGxiYWNrKGV2ZW50KTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRDYWxsYmFjayhldmVudCk7XHJcbiAgICAgICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3ZlKGV2ZW50KXtcclxuICAgICAgICBsZXQgcG9zaXRpb24gPSBldmVudC5kYXRhLmdsb2JhbDtcclxuICAgICAgICBpZiAoIHRoaXMucHJlc3NlZCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc3ByaXRlcy5nZXQoXCJwcmVzc2VkXCIpLmdldEJvdW5kcygpLmNvbnRhaW5zKHBvc2l0aW9uLngscG9zaXRpb24ueSkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIHRoaXMuc3ByaXRlcy5nZXQoXCJ1bnByZXNzZWRcIikuZ2V0Qm91bmRzKCkuY29udGFpbnMocG9zaXRpb24ueCxwb3NpdGlvbi55KSlcclxuICAgICAgICAgICAgICAgIHRoaXMub25QcmVzcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwb3NpdGlvbi54LCBwb3Npc3Rpb24ueSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3dhcEJ1dHRvbnMoKXtcclxuICAgICAgICBpZiAodGhpcy5zcHJpdGVzLmdldChcInVucHJlc3NlZFwiKS52aXNpYmxlKXtcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGVzLmdldChcInVucHJlc3NlZFwiKS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5nZXQoXCJwcmVzc2VkXCIpLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZXMuZ2V0KFwidW5wcmVzc2VkXCIpLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZXMuZ2V0KFwicHJlc3NlZFwiKS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldFBvc2l0aW9uKHBvc2l0aW9uLCBvZmZzZXQpe1xyXG4gICAgICAgIGxldCBuZXdQb3NpdGlvbiA9IG5ldyBQSVhJLlBvaW50KCk7XHJcbiAgICAgICAgbmV3UG9zaXRpb24uY29weUZyb20ocG9zaXRpb24pO1xyXG4gICAgICAgIG5ld1Bvc2l0aW9uLnggKz0gb2Zmc2V0Lng7XHJcbiAgICAgICAgbmV3UG9zaXRpb24ueSArPSBvZmZzZXQueTtcclxuICAgICAgICB0aGlzLnNwcml0ZXMuZm9yRWFjaCgoc3ByaXRlKSA9PiB7XHJcbiAgICAgICAgICAgIHNwcml0ZS5wb3NpdGlvbi5jb3B5RnJvbShuZXdQb3NpdGlvbik7XHJcbiAgICAgICAgfSApXHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEJ1dHRvbkNvbnRyb2xsZXJ7XHJcbiAgICBjb25zdHJ1Y3RvciggYnV0dG9uRnJhbWVzLCBwbGF5ZXJQb3MsIGV2ZW50Q2FsbGJhY2ssIHBhdXNlQ2FsbGJhY2ssIGNhbnZhc0NvbnRleHQsIHBhdXNlTWVudSl7XHJcbiAgICAgICAgdGhpcy5jbGllbnRUb3BMZWZ0ID0gbmV3IFBJWEkuUG9pbnQocGxheWVyUG9zLnggLSB3aW5kb3cuaW5uZXJXaWR0aCwgcGxheWVyUG9zLnkgLSB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jbGllbnRUb3BMZWZ0KVxyXG5cclxuICAgICAgICAvLyBhZGQgYnV0dG9uIGV2ZW50IGxpc3RlbmVycyB0byBjYW52YXNcclxuICAgICAgICBjYW52YXNDb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMuaGFuZGxlVG91Y2hlcy5iaW5kKHRoaXMpKTtcclxuICAgICAgICBjYW52YXNDb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLmhhbmRsZVRvdWNoZXMuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgY2FudmFzQ29udGV4dC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuaGFuZGxlVG91Y2hlcy5iaW5kKHRoaXMpKTtcclxuICAgICAgICBjYW52YXNDb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjbGljazogeDogXCIsIGV2ZW50LmNsaWVudFgsIFwieTogXCIsIGV2ZW50LmNsaWVudFkpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vIG1ha2UgYnV0dG9uIGRpc3BsYXkgb2JqZWN0c1xyXG4gICAgICAgIHRoaXMuYnV0dG9uQ29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XHJcbiAgICAgICAgdGhpcy5idXR0b25zID0gbmV3IE1hcChbW1wibGVmdFwiLCBuZXcgUGxheWVyQnV0dG9uKGJ1dHRvbkZyYW1lcy5nZXQoXCJsZWZ0XCIpLCBcImxlZnRcIixwbGF5ZXJQb3MsIGV2ZW50Q2FsbGJhY2ssIHBhdXNlQ2FsbGJhY2spXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJyaWdodFwiLCBuZXcgUGxheWVyQnV0dG9uKGJ1dHRvbkZyYW1lcy5nZXQoXCJyaWdodFwiKSwgXCJyaWdodFwiLHBsYXllclBvcywgZXZlbnRDYWxsYmFjaywgcGF1c2VDYWxsYmFjayldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInVwXCIsIG5ldyBQbGF5ZXJCdXR0b24oYnV0dG9uRnJhbWVzLmdldChcInVwXCIpLCBcInVwXCIscGxheWVyUG9zLCBldmVudENhbGxiYWNrLCBwYXVzZUNhbGxiYWNrKV1dKVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICAvLyBhZGQgdG8gb25lIHBhcmVudCBjb250YWluZXJcclxuICAgICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCggKGJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICBidXR0b24uc3ByaXRlcy5mb3JFYWNoKCAoc3ByaXRlICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25Db250YWluZXIuYWRkQ2hpbGQoIHNwcml0ZSApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gd2luZG93IG9mZnNldHMgZm9yIGJ1dHRvbnNcclxuICAgICAgICB0aGlzLmxlZnRCdXR0b25PZmZzZXQgPSBuZXcgUElYSS5Qb2ludCgtd2luZG93LmlubmVyV2lkdGggKyAxMCwgd2luZG93LmlubmVySGVpZ2h0LSAodGhpcy5idXR0b25zLmdldChcImxlZnRcIikuaGVpZ2h0ICsgMTApKTtcclxuICAgICAgICB0aGlzLnJpZ2h0QnV0dG9uT2Zmc2V0ID0gbmV3IFBJWEkuUG9pbnQodGhpcy5sZWZ0QnV0dG9uT2Zmc2V0LnggKyB0aGlzLmJ1dHRvbnMuZ2V0KFwibGVmdFwiKS53aWR0aCArIDUsIHRoaXMubGVmdEJ1dHRvbk9mZnNldC55KTtcclxuICAgICAgICB0aGlzLnVwQnV0dG9uT2Zmc2V0ID0gbmV3IFBJWEkuUG9pbnQod2luZG93LmlubmVyV2lkdGggLSB0aGlzLmJ1dHRvbnMuZ2V0KFwibGVmdFwiKS53aWR0aCAtICA1LCB0aGlzLmxlZnRCdXR0b25PZmZzZXQueSk7XHJcblxyXG4gICAgICAgIC8vIHRlc3QgYnV0dG9uIGJvdW5kc1xyXG4gICAgICAgIGxldCBsZWZ0QnV0dG9uID0gdGhpcy5idXR0b25zLmdldChcImxlZnRcIikuc3ByaXRlcy5nZXQoXCJ1bnByZXNzZWRcIik7XHJcbiAgICAgICAgY29uc29sZS5sb2cobGVmdEJ1dHRvbi5nZXRCb3VuZHMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlVG91Y2hlcyhldmVudCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidG91Y2hlczogXCIsIGV2ZW50LnRvdWNoZXMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCggKGJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdG91Y2hJbkJ1dHRvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBldmVudC50b3VjaGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0b3VjaCA9IGV2ZW50LnRvdWNoZXMuaXRlbShpKTtcclxuICAgICAgICAgICAgICAgIGlmICggYnV0dG9uLmludGVyYWN0aW9uUmVjdGFuZ2xlLmNvbnRhaW5zKHRvdWNoLmNsaWVudFgsIHRvdWNoLmNsaWVudFkpICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdWNoSW5CdXR0b24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICggdG91Y2hJbkJ1dHRvbiAhPSBidXR0b24ucHJlc3NlZCApe1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnByZXNzZWQgPSB0b3VjaEluQnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgaWYgKCBidXR0b24ucHJlc3NlZCApXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLm9uUHJlc3MoKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLm9uRW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIG9uTW92ZShldmVudCl7XHJcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gZXZlbnQuZGF0YS5nbG9iYWw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goIChidXR0b24pID0+IHtcclxuICAgICAgICAgICAgaWYgKCBidXR0b24ucHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFidXR0b24uc3ByaXRlcy5nZXQoXCJwcmVzc2VkXCIpLmdldEJvdW5kcygpLmNvbnRhaW5zKHBvc2l0aW9uLngscG9zaXRpb24ueSkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLm9uRW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIGJ1dHRvbi5zcHJpdGVzLmdldChcInVucHJlc3NlZFwiKS5nZXRCb3VuZHMoKS5jb250YWlucyhwb3NpdGlvbi54LHBvc2l0aW9uLnkpKVxyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5vblByZXNzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIG1vdmVCdXR0b25zKGNhbWVyYVBvcyl7XHJcbiAgICAgICAgdGhpcy5idXR0b25zLmdldChcImxlZnRcIikuaW50ZXJhY3Rpb25SZWN0YW5nbGUgPSB0aGlzLmJ1dHRvbnMuZ2V0KFwibGVmdFwiKS5zcHJpdGVzLmdldChcInVucHJlc3NlZFwiKS5nZXRCb3VuZHMoKTtcclxuICAgICAgICB0aGlzLmJ1dHRvbnMuZ2V0KFwicmlnaHRcIikuaW50ZXJhY3Rpb25SZWN0YW5nbGUgPSB0aGlzLmJ1dHRvbnMuZ2V0KFwicmlnaHRcIikuc3ByaXRlcy5nZXQoXCJ1bnByZXNzZWRcIikuZ2V0Qm91bmRzKCk7XHJcbiAgICAgICAgdGhpcy5idXR0b25zLmdldChcInVwXCIpLmludGVyYWN0aW9uUmVjdGFuZ2xlID0gdGhpcy5idXR0b25zLmdldChcInVwXCIpLnNwcml0ZXMuZ2V0KFwidW5wcmVzc2VkXCIpLmdldEJvdW5kcygpO1xyXG5cclxuICAgICAgICB0aGlzLmJ1dHRvbnMuZ2V0KFwibGVmdFwiKS5zZXRQb3NpdGlvbihjYW1lcmFQb3MsIHRoaXMubGVmdEJ1dHRvbk9mZnNldCk7XHJcbiAgICAgICAgdGhpcy5idXR0b25zLmdldChcInJpZ2h0XCIpLnNldFBvc2l0aW9uKGNhbWVyYVBvcywgdGhpcy5yaWdodEJ1dHRvbk9mZnNldCk7XHJcbiAgICAgICAgdGhpcy5idXR0b25zLmdldChcInVwXCIpLnNldFBvc2l0aW9uKGNhbWVyYVBvcywgdGhpcy51cEJ1dHRvbk9mZnNldCk7XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBvblJlc2l6ZSgpe1xyXG4gICAgICAgIHRoaXMubGVmdEJ1dHRvbk9mZnNldCA9IG5ldyBQSVhJLlBvaW50KC13aW5kb3cuaW5uZXJXaWR0aCArIDEwLCB3aW5kb3cuaW5uZXJIZWlnaHQtICh0aGlzLmJ1dHRvbnMuZ2V0KFwibGVmdFwiKS5oZWlnaHQgKyAxMCkpO1xyXG4gICAgICAgIHRoaXMucmlnaHRCdXR0b25PZmZzZXQgPSBuZXcgUElYSS5Qb2ludCh0aGlzLmxlZnRCdXR0b25PZmZzZXQueCArIHRoaXMuYnV0dG9ucy5nZXQoXCJsZWZ0XCIpLndpZHRoICsgNSwgdGhpcy5sZWZ0QnV0dG9uT2Zmc2V0LnkpO1xyXG4gICAgICAgIHRoaXMudXBCdXR0b25PZmZzZXQgPSBuZXcgUElYSS5Qb2ludCh3aW5kb3cuaW5uZXJXaWR0aCAtIHRoaXMuYnV0dG9ucy5nZXQoXCJsZWZ0XCIpLndpZHRoIC0gIDUsIHRoaXMubGVmdEJ1dHRvbk9mZnNldC55KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHtQbGF5ZXJCdXR0b24gLCBNeUJ1dHRvbiwgQnV0dG9uQ29udHJvbGxlcn07IiwiY2xhc3MgUGF1c2VUb2dnbGVCdXR0b257XHJcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0dXJlcyl7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVzID0gbmV3IE1hcChbWydwYXVzZScsIFBJWEkuU3ByaXRlLmZyb20odGV4dHVyZXNbMF0pXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ2V4aXQnLCBQSVhJLlNwcml0ZS5mcm9tKHRleHR1cmVzWzFdKV0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgdGhpcy5idXR0b25Db250YWluZXIgPSBuZXcgUElYSS5Db250YWluZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goIChzcHJpdGUpID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLmludGVyYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgc3ByaXRlLmFscGhhID0gMC41O1xyXG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0KDMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5idXR0b25Db250YWluZXIuYWRkQ2hpbGQoc3ByaXRlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuc3ByaXRlcy5nZXQoXCJleGl0XCIpLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5zcHJpdGVzLmdldChcImV4aXRcIikuaGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLnNwcml0ZXMuZ2V0KFwiZXhpdFwiKS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0UG9zaXRpb24ocG9zaXRpb24sIG9mZnNldCl7XHJcbiAgICAgICAgbGV0IG5ld1Bvc2l0aW9uID0gbmV3IFBJWEkuUG9pbnQoKTtcclxuICAgICAgICBuZXdQb3NpdGlvbi5jb3B5RnJvbShwb3NpdGlvbik7XHJcbiAgICAgICAgbmV3UG9zaXRpb24ueCArPSBvZmZzZXQueDtcclxuICAgICAgICBuZXdQb3NpdGlvbi55ICs9IG9mZnNldC55O1xyXG4gICAgICAgIHRoaXMuYnV0dG9uQ29udGFpbmVyLmNoaWxkcmVuLmZvckVhY2goIChzcHJpdGUpID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLnBvc2l0aW9uLmNvcHlGcm9tKG5ld1Bvc2l0aW9uKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBhdXNlTWVudXtcclxuICAgIGNvbnN0cnVjdG9yKGJ1dHRvblRleHR1cmVzLCB0aWNrZXIsIHBsYXllclBvcywgYW5pbWF0aW9uQ29udGFpbmVyLCBzb3VuZCwgZm9udCkge1xyXG4gICAgICAgIHRoaXMudGlja2VyID0gdGlja2VyO1xyXG4gICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b24gPSBuZXcgUGF1c2VUb2dnbGVCdXR0b24oW2J1dHRvblRleHR1cmVzLmdldChcInBhdXNlXCIpLCBidXR0b25UZXh0dXJlcy5nZXQoXCJleGl0XCIpXSk7XHJcbiAgICAgICAgLy90aGlzLmF1ZGlvQ3R4ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xyXG4gICAgICAgLy8gdGhpcy5tdXNpYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXVkaW9cIik7XHJcbiAgICAgIC8vICB0aGlzLm11c2ljLmxvb3AgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBzdWJzY3JpYmUgcGF1c2UgYnV0dG9uIHRvIGNsaWNrIGFuZCB0YXAgZXZlbnRzXHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b24uc3ByaXRlcy5mb3JFYWNoKCAoc3ByaXRlKSA9PiB7XHJcbiAgICAgICAgICAgIHNwcml0ZS5vbihcImNsaWNrXCIsIHRoaXMub25DbGljay5iaW5kKHRoaXMsIHRpY2tlcikpO1xyXG4gICAgICAgICAgICBzcHJpdGUub24oXCJ0YXBcIiwgdGhpcy5vbkNsaWNrLmJpbmQodGhpcywgdGlja2VyKSk7XHJcbiAgICAgICAgICAgIHNwcml0ZS5wb3NpdGlvbi5zZXQocGxheWVyUG9zLngsIHBsYXllclBvcy55KTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAvLyBibGlua2luZyBwYXVzZWQgdGV4dFxyXG4gICAgICAgIHRoaXMucGF1c2VkVGV4dCA9IHRoaXMuc3RhdGljVGV4dChidXR0b25UZXh0dXJlcyk7XHJcbiAgICAgICAgdGhpcy5wYXVzZVRpY2tlciA9IG5ldyBQSVhJLlRpY2tlcigpO1xyXG4gICAgICAgIHRoaXMucGF1c2VUaWNrZXIuYWRkKHRoaXMucGF1c2VCbGlua2VyLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuUEFVU0VfQkxJTktFUl9JTlRFUlZBTCA9IDUwMDtcclxuICAgICAgICB0aGlzLnBhdXNlQmxpbmtlckxhZyA9IDA7XHJcblxyXG4gICAgICAgIC8vIHRvdWNoIGNvbnRyb2xzXHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25PZmZzZXQgPSBuZXcgUElYSS5Qb2ludCh3aW5kb3cuaW5uZXJXaWR0aCAtIHRoaXMudG9nZ2xlQnV0dG9uLndpZHRoIC0gMTYsIC13aW5kb3cuaW5uZXJIZWlnaHQgKyAzMik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gYWRkIGFsbCBpbnRlcmFjdGl2ZSBidXR0b25zIHRvIG9uZSBjb250YWluZXJcclxuICAgICAgICB0aGlzLmJ1dHRvbkNvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgIHRoaXMuYnV0dG9uQ29udGFpbmVyLmFkZENoaWxkKCB0aGlzLnRvZ2dsZUJ1dHRvbi5idXR0b25Db250YWluZXIsIHRoaXMucGF1c2VkVGV4dCk7XHJcblxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uQ29udGFpbmVyID0gYW5pbWF0aW9uQ29udGFpbmVyO1xyXG5cclxuICAgICAgICAvLyBtYWtlIG1lbnUgbGlzdCBvYmplY3RcclxuICAgICAgICB0aGlzLm1lbnVMaXN0ID0gbmV3IE1lbnVMaXN0KHBsYXllclBvcywgZm9udCk7XHJcblxyXG4gICAgICAgIHRoaXMubWVudUxpc3Qub3B0aW9ucy5mb3JFYWNoKCBlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgdGhpcy5idXR0b25Db250YWluZXIuYWRkQ2hpbGQoZWxlbWVudC5pbmFjdGl2ZVNwcml0ZSk7ICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmJ1dHRvbkNvbnRhaW5lci5hZGRDaGlsZChlbGVtZW50LmFjdGl2ZVNwcml0ZSk7XHJcbiAgICAgICAgfSkgXHJcblxyXG4gICAgfVxyXG4gIFxyXG4gICAgb25DbGljayh0aWNrZXIpe1xyXG4gICAgICAgIC8vIHRvZ2dsZSBib29sc1xyXG4gICAgICAgIHRoaXMuaXNPcGVuIF49IDE7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b24uc3ByaXRlcy5mb3JFYWNoKCAoc3ByaXRlKSA9PiB7XHJcbiAgICAgICAgICAgIHNwcml0ZS52aXNpYmxlIF49IDE7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5tZW51TGlzdC5vblRvZ2dsZSh0aGlzLmlzT3Blbik7XHJcblxyXG4gICAgICAgIGlmICggdGhpcy5jb250cm9sbGVyICkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuYnV0dG9ucy5mb3JFYWNoKCBidXR0b24gPT4ge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmluUGF1c2UgPSB0aGlzLmlzT3BlbjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHBhdXNlIHRoZSBnYW1lXHJcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuKXtcclxuICAgICAgICAgICAvLyB0aGlzLm11c2ljLnBsYXkoKTsgIFxyXG4gICAgICAgICAgIC8vIHRoaXMubXVzaWMubG9vcCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMucGF1c2VUaWNrZXIuc3RhcnQoKTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZWRUZXh0LnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlQmxpbmtlckxhZyA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMucGF1c2VCbGlua2VyKCk7XHJcbiAgICAgICAgICAgIHRpY2tlci5zcGVlZCA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXIpeyAvLyBkaXNhYmxlIHRvdWNoIGNvbnRyb2xzIGlmIGFwcGxpY2FibGVcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlci5idXR0b25Db250YWluZXIuY2hpbGRyZW4uZm9yRWFjaCggKGJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5pbnRlcmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwYXVzZSBhbGwgYW5pbWF0aW9uc1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRhaW5lci5jaGlsZHJlbi5mb3JFYWNoKCAoIGFuaW1hdGlvbiApID0+IHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5zdG9wKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlc3VtZSB0aGUgZ2FtZVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgLy8gIHRoaXMubXVzaWMucGF1c2UoKTtcclxuICAgICAgICAgICAgLy90aGlzLm11c2ljLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgICAgICAgdGlja2VyLnNwZWVkID0gMTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZWRUZXh0LnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZVRpY2tlci5zdG9wKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGF1c2VCbGlua2VyKClcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlcil7IC8vIGVuYWJsZSB0b3VjaCBjb250cm9scyBpZiBhcHBsaWNhYmxlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuYnV0dG9uQ29udGFpbmVyLmNoaWxkcmVuLmZvckVhY2goIChidXR0b24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24uaW50ZXJhY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyByZXN1bWUgYWxsIGFuaW1hdGlvbnNcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Db250YWluZXIuY2hpbGRyZW4uZm9yRWFjaCggKCBhbmltYXRpb24gKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucGxheSgpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVFdmVudChldmVudCl7XHJcbiAgICAgICAgbGV0IG5vVXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKXtcclxuICAgICAgICAgICAgY2FzZSBcImlucHV0RG93blwiOlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudC5kaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLm1lbnVMaXN0LmN1cnJlbnRJbmRleCA+PSB0aGlzLm1lbnVMaXN0Lm9wdGlvbnMubGVuZ3RoIC0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVudUxpc3QuY3VycmVudEluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZW51TGlzdC5jdXJyZW50SW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLm1lbnVMaXN0LmN1cnJlbnRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZW51TGlzdC5jdXJyZW50S2V5ID0gdGhpcy5tZW51TGlzdC5vcHRpb25zW2ldLmxhYmVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZW51TGlzdC5jdXJyZW50SW5kZXggPT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVudUxpc3QuY3VycmVudEluZGV4ID0gdGhpcy5tZW51TGlzdC5vcHRpb25zLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVudUxpc3QuY3VycmVudEluZGV4LS07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBqID0gdGhpcy5tZW51TGlzdC5jdXJyZW50SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVudUxpc3QuY3VycmVudEtleSA9IHRoaXMubWVudUxpc3Qub3B0aW9uc1tqXS5sYWJlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVudGVyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVwXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggdGhpcy5tZW51TGlzdC5jdXJyZW50S2V5ICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUkVTVU1FXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ2xpY2sodGhpcy50aWNrZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUkVST0xMXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUmVyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5vVXBkYXRlKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVudUxpc3QudXBkYXRlT3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uUmVyb2xsKCl7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgICAgZGVsZXRlIGFsbDpcclxuICAgICAgICAgICAgICAgIC0gZGlzcGxheSBvYmplY3RzXHJcbiAgICAgICAgICAgICAgICAtIHBoeXNpY3Mgb2JqZWN0c1xyXG4gICAgICAgICAgICAgICAgLSBtYXAgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICAtIFBpeGkgYXBwbGljYXRpb25cclxuICAgICAgICAgICAgICAgIC0gY2FudmFzIGVsZW1lbnRcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNhbGwgc2V0dXAgZnVuY3Rpb24gaW4gbWFpbi5qc1xyXG5cclxuICAgICAgICAgICAgT1JcclxuXHJcbiAgICAgICAgICAgIGp1c3QgcmVmcmVzaCB0aGUgcGFnZVxyXG4gICAgICAgICovXHJcblxyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBhdHRhY2hDb250cm9sbGVyKGNvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uQ29udGFpbmVyLmFkZENoaWxkKHRoaXMuY29udHJvbGxlci5idXR0b25Db250YWluZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpY1RleHQoYnV0dG9uVGV4dHVyZXMpIHtcclxuICAgICAgICBjb25zdCBzdHlsZSA9IHtcclxuICAgICAgICAgICAgZmlsbDogMHhmZmZmZmYsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiA1MixcclxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0FSQ0FERUNMQVNTSUMnXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgcGF1c2VUZXh0ID0gbmV3IFBJWEkuVGV4dChcIlBBVVNFRFwiLCBzdHlsZSlcclxuICAgICAgICBwYXVzZVRleHQudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIC8vcGF1c2VUZXh0LnNjYWxlLnNldCgxNCk7XHJcbiAgICAgICAgcGF1c2VUZXh0LmFuY2hvci5zZXQoMC41KTtcclxuICAgICAgICAvL3BhdXNlVGV4dC5hbHBoYSA9IDAuNTtcclxuICAgICAgICByZXR1cm4gcGF1c2VUZXh0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwYXVzZUJsaW5rZXIoKXtcclxuICAgICAgICB0aGlzLnBhdXNlQmxpbmtlckxhZyArPSB0aGlzLnBhdXNlVGlja2VyLmRlbHRhTVM7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhdXNlQmxpbmtlckxhZyA+IHRoaXMuUEFVU0VfQkxJTktFUl9JTlRFUlZBTCl7XHJcbiAgICAgICAgICAgIHRoaXMucGF1c2VCbGlua2VyTGFnIC09IHRoaXMuUEFVU0VfQkxJTktFUl9JTlRFUlZBTDtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZWRUZXh0LnZpc2libGUgXj0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBtb3ZlQnV0dG9ucyhwb3NpdGlvbil7XHJcbiAgICAgICAgaWYgKCB0aGlzLmNvbnRyb2xsZXIgKVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIubW92ZUJ1dHRvbnMocG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uLnNldFBvc2l0aW9uKHBvc2l0aW9uLCB0aGlzLnRvZ2dsZUJ1dHRvbk9mZnNldCk7XHJcbiAgICAgICAgdGhpcy5wYXVzZWRUZXh0LnBvc2l0aW9uLmNvcHlGcm9tKHBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLnBhdXNlZFRleHQueSAtPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAodGhpcy5wYXVzZWRUZXh0LmhlaWdodC8yICsgNik7XHJcbiAgICAgICAgdGhpcy5tZW51TGlzdC5tb3ZlRWxlbWVudHModGhpcy5wYXVzZWRUZXh0LnBvc2l0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIG9uUmVzaXplKCl7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25PZmZzZXQgPSBuZXcgUElYSS5Qb2ludCh3aW5kb3cuaW5uZXJXaWR0aCAtIHRoaXMudG9nZ2xlQnV0dG9uLndpZHRoIC0gMTYsIC13aW5kb3cuaW5uZXJIZWlnaHQgKyAzMik7XHJcbiAgICAgICAgaWYgKCB0aGlzLmNvbnRyb2xsZXIpXHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlci5vblJlc2l6ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBNZW51TGlzdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3NpdGlvbiwgZm9udCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gWyBuZXcgTWVudUxpc3RFbGVtZW50KFwiUkVTVU1FXCIsIFwicGxhY2Vob2xkZXJcIiwgZm9udCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWVudUxpc3RFbGVtZW50KFwiUkVST0xMXCIsIFwicGxhY2Vob2xkZXJcIiwgZm9udCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWVudUxpc3RFbGVtZW50KFwiUEFMRVRURVwiLCBcInBsYWNlaG9sZGVyXCIsIGZvbnQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1lbnVMaXN0RWxlbWVudChcIk9QVElPTlNcIiwgXCJwbGFjZWhvbGRlclwiLCBmb250KSxcclxuICAgICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jdXJyZW50S2V5ID0gdGhpcy5vcHRpb25zWzBdLmxhYmVsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubW92ZUVsZW1lbnRzKHBvc2l0aW9uKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBtb3ZlRWxlbWVudHMocG9zaXRpb24pe1xyXG4gICAgICAgIGNvbnN0IGluZGVudCA9IDQwO1xyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IDEwMDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaCggKCBlbGVtZW50LCBpbmRleCApID0+IHtcclxuICAgICAgICAgICAgZWxlbWVudC5hY3RpdmVTcHJpdGUucG9zaXRpb24uY29weUZyb20ocG9zaXRpb24pO1xyXG4gICAgICAgICAgICBlbGVtZW50LmluYWN0aXZlU3ByaXRlLnBvc2l0aW9uLmNvcHlGcm9tKHBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWN0aXZlU3ByaXRlLnkgKz0gb2Zmc2V0O1xyXG4gICAgICAgICAgICBlbGVtZW50LmluYWN0aXZlU3ByaXRlLnkgKz0gb2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5pbmFjdGl2ZVNwcml0ZS54IC09ICgyMDApO1xyXG4gICAgICAgICAgICBlbGVtZW50LmFjdGl2ZVNwcml0ZS54IC09ICgyMDApO1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5hY3RpdmVTcHJpdGUueCArPSBpbmRlbnQgKiBpbmRleDtcclxuICAgICAgICAgICAgZWxlbWVudC5hY3RpdmVTcHJpdGUueSArPSBlbGVtZW50LmFjdGl2ZVNwcml0ZS5oZWlnaHQgKiBpbmRleDtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuaW5hY3RpdmVTcHJpdGUueCArPSBpbmRlbnQgKiBpbmRleDtcclxuICAgICAgICAgICAgZWxlbWVudC5pbmFjdGl2ZVNwcml0ZS55ICs9IGVsZW1lbnQuYWN0aXZlU3ByaXRlLmhlaWdodCAqIGluZGV4OyAgICAgICBcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZU9mZnNldCA9IDU7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LmFjdGl2ZVNwcml0ZS54ICs9IGFjdGl2ZU9mZnNldDtcclxuICAgICAgICAgICAgZWxlbWVudC5hY3RpdmVTcHJpdGUueSAtPSBhY3RpdmVPZmZzZXQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Ub2dnbGUoaXNQYXVzZU1lbnVPcGVuKXtcclxuICAgICAgICBpZiAoIGlzUGF1c2VNZW51T3BlbiApe1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IDA7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaCAoIChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5pbmFjdGl2ZVNwcml0ZS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWN0aXZlU3ByaXRlLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFjdGl2ZVNwcml0ZS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaCAoIGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5pbmFjdGl2ZVNwcml0ZS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFjdGl2ZVNwcml0ZS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVPcHRpb25zKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwic3VjY2Vzc2Z1bCBwYXVzZSBtZW51IGV2ZW50XCIpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoICggKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWN0aXZlU3ByaXRlLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCBpbmRleCA9PSB0aGlzLmN1cnJlbnRJbmRleCApe1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5hY3RpdmVTcHJpdGUudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE1lbnVMaXN0RWxlbWVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBjYWxsYmFjaywgZm9udCl7XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIGNvbnN0IHN0eWxlMSA9IHtcclxuICAgICAgICAgICAgZmlsbDogMHhmZmEyNTIsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiA1MixcclxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0FSQ0FERUNMQVNTSUMnXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBzdHlsZTIgPSB7XHJcbiAgICAgICAgICAgIGZpbGw6IDB4ZmZmZmZmLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogNTIsXHJcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdBUkNBREVDTEFTU0lDJ1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluYWN0aXZlU3ByaXRlID0gbmV3IFBJWEkuVGV4dChuYW1lLCBzdHlsZTEpO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlU3ByaXRlID0gbmV3IFBJWEkuVGV4dChuYW1lLCBzdHlsZTIpO1xyXG5cclxuICAgICAgICB0aGlzLmluYWN0aXZlU3ByaXRlLmNhY2hlQXNCaXRtYXAgPSB0cnVlOyAgXHJcbiAgICAgICAgdGhpcy5hY3RpdmVTcHJpdGUuY2FjaGVBc0JpdG1hcCA9IHRydWU7ICBcclxuXHJcbiAgICAgICAgdGhpcy5hY3RpdmVTcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW5hY3RpdmVTcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBcclxufSIsImV4cG9ydCBjbGFzcyBEaXNzb2x2ZUZpbHRlciBleHRlbmRzIFBJWEkuRmlsdGVyXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtQSVhJLlNwcml0ZX0gc3ByaXRlIC0gbm9pc2UgdGV4dHVyZSBmb3IgdGhlIGRpc3NvbHZlIGVmZmVjdFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzaGFkZXJdIC0gcGFyZW50IG9iamVjdCBmb3Igc2hhZGVyIHByb2dyYW0sIG11c3QgaGF2ZSB2ZXJ0IGFuZCBmcmFnIG1lbWJlcnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc3ByaXRlLCBzaGFkZXIsIHNjYWxlKSB7XHJcbiAgICAgICAgY29uc3QgbWFza01hdHJpeCA9IG5ldyBQSVhJLk1hdHJpeCgpO1xyXG5cclxuICAgICAgICBzcHJpdGUucmVuZGVyYWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBsZXQgdW5pZm9ybXMgPSB7XHJcbiAgICAgICAgICAgIG1hcFNhbXBsZXI6IHNwcml0ZS5fdGV4dHVyZSxcclxuICAgICAgICAgICAgZmlsdGVyTWF0cml4OiBtYXNrTWF0cml4LFxyXG4gICAgICAgICAgICBzY2FsZTogeyB4OiAxLCB5OiAxIH0sXHJcbiAgICAgICAgICAgIERpc3NvbHZlVmFsOiAxLjBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1cGVyKHNoYWRlci52ZXJ0LCBzaGFkZXIuZnJhZywgdW5pZm9ybXMpO1xyXG5cclxuICAgICAgICB0aGlzLm1hc2tTcHJpdGUgPSBzcHJpdGU7XHJcbiAgICAgICAgdGhpcy5tYXNrTWF0cml4ID0gbWFza01hdHJpeDtcclxuXHJcbiAgICAgICAgaWYgKHNjYWxlID09PSBudWxsIHx8IHNjYWxlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2FsZSA9IDIwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogc2NhbGVYLCBzY2FsZVkgZm9yIGRpc3BsYWNlbWVudHNcclxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlBvaW50fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXcgUElYSS5Qb2ludChzY2FsZSwgc2NhbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbGllcyB0aGUgZmlsdGVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UElYSS5zeXN0ZW1zLkZpbHRlclN5c3RlbX0gZmlsdGVyTWFuYWdlciAtIFRoZSBtYW5hZ2VyLlxyXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IGlucHV0IC0gVGhlIGlucHV0IHRhcmdldC5cclxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSBvdXRwdXQgLSBUaGUgb3V0cHV0IHRhcmdldC5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xlYXIgLSBTaG91bGQgdGhlIG91dHB1dCBiZSBjbGVhcmVkIGJlZm9yZSByZW5kZXJpbmcgdG8gaXQuXHJcbiAgICAgKi9cclxuICAgIGFwcGx5KGZpbHRlck1hbmFnZXIsIGlucHV0LCBvdXRwdXQsIGNsZWFyKVxyXG4gICAge1xyXG4gICAgICAgIC8vIGZpbGwgbWFza01hdHJpeCB3aXRoIF9ub3JtYWxpemVkIHNwcml0ZSB0ZXh0dXJlIGNvb3Jkc19cclxuICAgICAgICB0aGlzLnVuaWZvcm1zLmZpbHRlck1hdHJpeCA9IGZpbHRlck1hbmFnZXIuY2FsY3VsYXRlU3ByaXRlTWF0cml4KHRoaXMubWFza01hdHJpeCwgdGhpcy5tYXNrU3ByaXRlKTtcclxuICAgICAgICB0aGlzLnVuaWZvcm1zLnNjYWxlLnggPSB0aGlzLnNjYWxlLng7XHJcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5zY2FsZS55ID0gdGhpcy5zY2FsZS55O1xyXG5cclxuICAgICAgICAvLyBkcmF3IHRoZSBmaWx0ZXIuLi5cclxuICAgICAgICBmaWx0ZXJNYW5hZ2VyLmFwcGx5RmlsdGVyKHRoaXMsIGlucHV0LCBvdXRwdXQsIGNsZWFyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0ZXh0dXJlIHVzZWQgZm9yIHRoZSBkaXNwbGFjZW1lbnQgbWFwLiBNdXN0IGJlIHBvd2VyIG9mIDIgc2l6ZWQgdGV4dHVyZS5cclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyIHtQSVhJLlRleHR1cmV9XHJcbiAgICAgKi9cclxuICAgIGdldCBtYXAoKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLm1hcFNhbXBsZXI7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG1hcCh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5tYXBTYW1wbGVyID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG59IiwiLyoqXHJcbiAqIFRoZSBEaXNwbGFjZW1lbnRGaWx0ZXIgY2xhc3MgdXNlcyB0aGUgcGl4ZWwgdmFsdWVzIGZyb20gdGhlIHNwZWNpZmllZCB0ZXh0dXJlXHJcbiAqIChjYWxsZWQgdGhlIGRpc3BsYWNlbWVudCBtYXApIHRvIHBlcmZvcm0gYSBkaXNwbGFjZW1lbnQgb2YgYW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBZb3UgY2FuIHVzZSB0aGlzIGZpbHRlciB0byBhcHBseSBhbGwgbWFub3Igb2YgY3Jhenkgd2FycGluZyBlZmZlY3RzLlxyXG4gKiBDdXJyZW50bHkgdGhlIGByYCBwcm9wZXJ0eSBvZiB0aGUgdGV4dHVyZSBpcyB1c2VkIHRvIG9mZnNldCB0aGUgYHhgXHJcbiAqIGFuZCB0aGUgYGdgIHByb3BlcnR5IG9mIHRoZSB0ZXh0dXJlIGlzIHVzZWQgdG8gb2Zmc2V0IHRoZSBgeWAuXHJcbiAqXHJcbiAqIFRoZSB3YXkgaXQgd29ya3MgaXMgaXQgdXNlcyB0aGUgdmFsdWVzIG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwIHRvIGxvb2sgdXAgdGhlXHJcbiAqIGNvcnJlY3QgcGl4ZWxzIHRvIG91dHB1dC4gVGhpcyBtZWFucyBpdCdzIG5vdCB0ZWNobmljYWxseSBtb3ZpbmcgdGhlIG9yaWdpbmFsLlxyXG4gKiBJbnN0ZWFkLCBpdCdzIHN0YXJ0aW5nIGF0IHRoZSBvdXRwdXQgYW5kIGFza2luZyBcIndoaWNoIHBpeGVsIGZyb20gdGhlIG9yaWdpbmFsIGdvZXMgaGVyZVwiLlxyXG4gKiBGb3IgZXhhbXBsZSwgaWYgYSBkaXNwbGFjZW1lbnQgbWFwIHBpeGVsIGhhcyBgcmVkID0gMWAgYW5kIHRoZSBmaWx0ZXIgc2NhbGUgaXMgYDIwYCxcclxuICogdGhpcyBmaWx0ZXIgd2lsbCBvdXRwdXQgdGhlIHBpeGVsIGFwcHJveGltYXRlbHkgMjAgcGl4ZWxzIHRvIHRoZSByaWdodCBvZiB0aGUgb3JpZ2luYWwuXHJcbiAqXHJcbiAqIEBjbGFzc1xyXG4gKiBAZXh0ZW5kcyBQSVhJLkZpbHRlclxyXG4gKiBAbWVtYmVyb2YgUElYSS5maWx0ZXJzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQmV6aWVyRGlzcGxhY2VtZW50RmlsdGVyIGV4dGVuZHMgUElYSS5GaWx0ZXJcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuU3ByaXRlfSBzcHJpdGUgLSBUaGUgc3ByaXRlIHVzZWQgZm9yIHRoZSBkaXNwbGFjZW1lbnQgbWFwLiAobWFrZSBzdXJlIGl0cyBhZGRlZCB0byB0aGUgc2NlbmUhKVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzY2FsZV0gLSBUaGUgc2NhbGUgb2YgdGhlIGRpc3BsYWNlbWVudFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzcHJpdGUsIHNoYWRlciwgc2NhbGUpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgbWFza01hdHJpeCA9IG5ldyBQSVhJLk1hdHJpeCgpO1xyXG5cclxuICAgICAgICBzcHJpdGUucmVuZGVyYWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBzdXBlcihzaGFkZXIudmVydCwgc2hhZGVyLmZyYWcsIHtcclxuICAgICAgICAgICAgbWFwU2FtcGxlcjogc3ByaXRlLl90ZXh0dXJlLFxyXG4gICAgICAgICAgICBmaWx0ZXJNYXRyaXg6IG1hc2tNYXRyaXgsXHJcbiAgICAgICAgICAgIHNjYWxlOiB7IHg6IDEsIHk6IDEgfSxcclxuICAgICAgICAgICAgcm90YXRpb246IG5ldyBGbG9hdDMyQXJyYXkoWzEsIDAsIDAsIDFdKSxcclxuICAgICAgICAgICAgYmV6aWVyVmFsOiAwLjBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXNrU3ByaXRlID0gc3ByaXRlO1xyXG4gICAgICAgIHRoaXMubWFza01hdHJpeCA9IG1hc2tNYXRyaXg7XHJcblxyXG4gICAgICAgIGlmIChzY2FsZSA9PT0gbnVsbCB8fCBzY2FsZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2NhbGUgPSAyMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHNjYWxlWCwgc2NhbGVZIGZvciBkaXNwbGFjZW1lbnRzXHJcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5Qb2ludH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNjYWxlID0gbmV3IFBJWEkuUG9pbnQoc2NhbGUsIHNjYWxlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGxpZXMgdGhlIGZpbHRlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuc3lzdGVtcy5GaWx0ZXJTeXN0ZW19IGZpbHRlck1hbmFnZXIgLSBUaGUgbWFuYWdlci5cclxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSBpbnB1dCAtIFRoZSBpbnB1dCB0YXJnZXQuXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gb3V0cHV0IC0gVGhlIG91dHB1dCB0YXJnZXQuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsZWFyIC0gU2hvdWxkIHRoZSBvdXRwdXQgYmUgY2xlYXJlZCBiZWZvcmUgcmVuZGVyaW5nIHRvIGl0LlxyXG4gICAgICovXHJcbiAgICBhcHBseShmaWx0ZXJNYW5hZ2VyLCBpbnB1dCwgb3V0cHV0LCBjbGVhcilcclxuICAgIHtcclxuICAgICAgICAvLyBmaWxsIG1hc2tNYXRyaXggd2l0aCBfbm9ybWFsaXplZCBzcHJpdGUgdGV4dHVyZSBjb29yZHNfXHJcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5maWx0ZXJNYXRyaXggPSBmaWx0ZXJNYW5hZ2VyLmNhbGN1bGF0ZVNwcml0ZU1hdHJpeCh0aGlzLm1hc2tNYXRyaXgsIHRoaXMubWFza1Nwcml0ZSk7XHJcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5zY2FsZS54ID0gdGhpcy5zY2FsZS54O1xyXG4gICAgICAgIHRoaXMudW5pZm9ybXMuc2NhbGUueSA9IHRoaXMuc2NhbGUueTtcclxuXHJcbiAgICAgICAgLy8gRXh0cmFjdCByb3RhdGlvbiBmcm9tIHdvcmxkIHRyYW5zZm9ybVxyXG4gICAgICAgIGNvbnN0IHd0ID0gdGhpcy5tYXNrU3ByaXRlLnRyYW5zZm9ybS53b3JsZFRyYW5zZm9ybTtcclxuICAgICAgICBjb25zdCBsZW5YID0gTWF0aC5zcXJ0KCh3dC5hICogd3QuYSkgKyAod3QuYiAqIHd0LmIpKTtcclxuICAgICAgICBjb25zdCBsZW5ZID0gTWF0aC5zcXJ0KCh3dC5jICogd3QuYykgKyAod3QuZCAqIHd0LmQpKTtcclxuXHJcbiAgICAgICAgaWYgKGxlblggIT09IDAgJiYgbGVuWSAhPT0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMucm90YXRpb25bMF0gPSB3dC5hIC8gbGVuWDtcclxuICAgICAgICAgICAgdGhpcy51bmlmb3Jtcy5yb3RhdGlvblsxXSA9IHd0LmIgLyBsZW5YO1xyXG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1zLnJvdGF0aW9uWzJdID0gd3QuYyAvIGxlblk7XHJcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMucm90YXRpb25bM10gPSB3dC5kIC8gbGVuWTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRyYXcgdGhlIGZpbHRlci4uLlxyXG4gICAgICAgIGZpbHRlck1hbmFnZXIuYXBwbHlGaWx0ZXIodGhpcywgaW5wdXQsIG91dHB1dCwgY2xlYXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRleHR1cmUgdXNlZCBmb3IgdGhlIGRpc3BsYWNlbWVudCBtYXAuIE11c3QgYmUgcG93ZXIgb2YgMiBzaXplZCB0ZXh0dXJlLlxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXIge1BJWEkuVGV4dHVyZX1cclxuICAgICAqL1xyXG4gICAgZ2V0IG1hcCgpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMubWFwU2FtcGxlcjtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbWFwKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcclxuICAgIHtcclxuICAgICAgICB0aGlzLnVuaWZvcm1zLm1hcFNhbXBsZXIgPSB2YWx1ZTtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBCZXppZXJDdXJ2ZXtcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5wb2ludHMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBJWEkuUG9pbnQoMC4wLDAuMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBJWEkuUG9pbnQoMC41LDAuMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBJWEkuUG9pbnQoMC41LDEuMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBJWEkuUG9pbnQoMS4wLDEuMCkgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0WSh0KXtcclxuICAgICAgICBsZXQgeSA9IE1hdGgucG93KCgxLjAgLSB0KSwzKSAqIHRoaXMucG9pbnRzWzBdLnk7XHJcbiAgICAgICAgeSArPSAzICogTWF0aC5wb3coKDEuMC10KSwyKSAqIHQgKiB0aGlzLnBvaW50c1sxXS55O1xyXG4gICAgICAgIHkgKz0gMyAqICgxLjAgLSB0ICkgKiBNYXRoLnBvdyh0LDIpICogdGhpcy5wb2ludHNbMl0ueTtcclxuICAgICAgICB5ICs9IE1hdGgucG93KHQsMykgKiB0aGlzLnBvaW50c1szXS55O1xyXG5cclxuICAgICAgICByZXR1cm4geTtcclxuICAgIH1cclxufSIsImltcG9ydCB7QmV6aWVyRGlzcGxhY2VtZW50RmlsdGVyfSBmcm9tICcuL0JlemllckRpc3BsYWNlbWVudC5qcydcclxuaW1wb3J0IHtCZXppZXJDdXJ2ZX0gZnJvbSAnLi9CZXppZXJDdXJ2ZS5qcydcclxuaW1wb3J0IHtNeVRpbWVyfSBmcm9tICcuLi9lbnRpdGllcy9teVRpbWVyLmpzJ1xyXG5cclxuZXhwb3J0IGNsYXNzIENhdG5pcFRyaXB7XHJcbiAgICBjb25zdHJ1Y3RvcihzaGFkZXIsIHBsYXllcil7XHJcbiAgICAgICAgLy8gcGh5c2ljcyB2YWx1ZXMgdGhhdCB3aWxsIGJlIHRvZ2dsZWQgZHVyaW5nIHRoZSBlZmZlY3RcclxuICAgICAgICB0aGlzLnBsYXllckRlZmF1bHRWZWwgPSBwbGF5ZXIubWF4VmVsO1xyXG4gICAgICAgIHRoaXMucGxheWVyVHJpcFZlbCA9IHBsYXllci5tYXhWZWwgKiAxLjM7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJEZWZhdWx0SnVtcCA9IHBsYXllci5qdW1wVmVsO1xyXG4gICAgICAgIHRoaXMucGxheWVyVHJpcEp1bXAgPSBwbGF5ZXIuanVtcFZlbCAqIDEuMjtcclxuICAgICAgICB0aGlzLmNhbWVyYVJvdGF0aW9uID0gMDtcclxuXHJcbiAgICAgICAgLy8gdGltaW5nXHJcbiAgICAgICAgdGhpcy5iZXppZXJUaW1lID0gMDsgICAgLy8gdCBpbnB1dCBmb3IgYSA0IHBvaW50IGJlemllciBjdXJ2ZVxyXG4gICAgICAgIHRoaXMuZmlsdGVyVGltZSA9IDA7ICAgIC8vIHRpbWUgc3BlbnQgaW4gdHJpcCBlZmZlY3RcclxuICAgICAgICB0aGlzLmZpbHRlclRyYW5zaXRpb25NUyA9IDMwMDAuMDsgICAvLyBkdXJhdGlvbiBpbiBtaWxpc2Vjb25kcyBvZiB0aGUgYmV6aWUgY3VydmUgdHJhbnNpdGlvbiBpbnRvIHRyaXBwaW5nXHJcbiAgICAgICAgdGhpcy5maWx0ZXJTdGF0aWNNUyA9IDEwMDAwLjA7ICAgICAgLy8gZHVyYXRpb24gb2YgdGhlIHRyaXAgd2hlcmUgdGhlIGJlemllciB2YWx1ZSB3aWxsIHJlbWFpbiBhdCAxIFxyXG4gICAgICAgIHRoaXMuZGlzcGxhY2VtZW50SW5jcmVtZW50ID0gMC41OyAgIC8vIGhvdyBtdWNoIHRoZSBub2lzZSB0ZXh0dXJlIHdpbGwgYmUgbW92ZWQgZWFjaCBmcmFtZVxyXG4gICAgICAgIHRoaXMuYmV6aWVySW5jcmVtZW50ID0gMS4wIC8gKHRoaXMuZmlsdGVyVHJhbnNpdGlvbk1TIC8gMTYuNjY2KTsgICAgLy8gaG93IG11Y2ggdG8gc3RlcCBmb3J3YXJkIHRoZSBiZXppZXIgdCB2YWxsdWUgZWFjaCB1cGRhdGVcclxuXHJcbiAgICAgICAgdGhpcy5iZXppZXJDdXJ2ZSA9IG5ldyBCZXppZXJDdXJ2ZSgpO1xyXG4gICAgICAgIHRoaXMudGltZXIgPSBuZXcgTXlUaW1lcigpO1xyXG4gICAgICAgIHRoaXMucG93ZXJ1cFRpbWVyID0gbmV3IE15VGltZXI7XHJcbiAgICAgICAgdGhpcy5wb3dlcnVwVGltZXIuc3RhcnQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kTm9pc2UgPSBQSVhJLlNwcml0ZS5mcm9tSW1hZ2UoJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2R2eGlreWJ5aS9pbWFnZS91cGxvYWQvdjE0ODY2MzQxMTMvMnlZYXlaa192cXN5engucG5nJyk7XHJcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kTm9pc2UudGV4dHVyZS5iYXNlVGV4dHVyZS53cmFwTW9kZSA9IFBJWEkuV1JBUF9NT0RFUy5SRVBFQVQ7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kTm9pc2UgPSBQSVhJLlNwcml0ZS5mcm9tSW1hZ2UoJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2R2eGlreWJ5aS9pbWFnZS91cGxvYWQvdjE0ODY2MzQxMTMvMnlZYXlaa192cXN5engucG5nJyk7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kTm9pc2UudGV4dHVyZS5iYXNlVGV4dHVyZS53cmFwTW9kZSA9IFBJWEkuV1JBUF9NT0RFUy5SRVBFQVQ7XHJcblxyXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZE5vaXNlLnNjYWxlLnNldCgwLjYpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZE5vaXNlLnNjYWxlLnNldCgwLjYpO1xyXG5cclxuICAgICAgICB0aGlzLmZvcmVncm91bmRGaWx0ZXIgPSBuZXcgQmV6aWVyRGlzcGxhY2VtZW50RmlsdGVyKHRoaXMuZm9yZWdyb3VuZE5vaXNlLCBzaGFkZXIpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZEZpbHRlciA9IG5ldyBCZXppZXJEaXNwbGFjZW1lbnRGaWx0ZXIodGhpcy5iYWNrZ3JvdW5kTm9pc2UsIHNoYWRlcik7XHJcblxyXG4gICAgICAgIHRoaXMuYmFkRmlsdGVyU29sdXRpb24gPSBuZXcgUElYSS5HcmFwaGljcygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5iZWdpbkZpbGwoMCwwLjApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kcmF3UmVjdCgtMjAwMCwtMjAwMCwgODAwMCwgODAwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVuZEZpbGwoKTtcclxuXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKCl7XHJcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kTm9pc2UucG9zaXRpb24uc2V0KHRoaXMuZmlsdGVyVGltZSwgdGhpcy5maWx0ZXJUaW1lKTtcclxuICAgICAgICB0aGlzLmJhY2tncm91bmROb2lzZS5wb3NpdGlvbi5zZXQodGhpcy5maWx0ZXJUaW1lLCB0aGlzLmZpbHRlclRpbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIEZpeGVkVXBkYXRlKHBsYXllciwgZm9yZWdyb3VuZEZpbHRlcnMsIGJhY2tncm91bmRGaWx0ZXJzLCBwb3dlcnVwcyApe1xyXG4gICAgICAgIGlmICh0aGlzLnRpbWVyLmlzUnVubmluZyl7XHJcbiAgICAgICAgICAgIHBsYXllci5tYXhWZWwgPSB0aGlzLnBsYXllclRyaXBWZWw7XHJcbiAgICAgICAgICAgIHBsYXllci5qdW1wVmVsID0gdGhpcy5wbGF5ZXJUcmlwSnVtcDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyVGltZSArPSB0aGlzLmRpc3BsYWNlbWVudEluY3JlbWVudDtcclxuICAgICAgICAgICAgbGV0IGJlemllclk7XHJcbiAgICAgICAgICAgIGlmICggdGhpcy5iZXppZXJUaW1lID4gMSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJlemllclRpbWUgPSAxO1xyXG4gICAgICAgICAgICAgICAgYmV6aWVyWSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiZXppZXJZID0gdGhpcy5iZXppZXJDdXJ2ZS5nZXRZKHRoaXMuYmV6aWVyVGltZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9yZWdyb3VuZEZpbHRlci51bmlmb3Jtcy5iZXppZXJWYWwgPSBiZXppZXJZO1xyXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRGaWx0ZXIudW5pZm9ybXMuYmV6aWVyVmFsID0gYmV6aWVyWTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhUm90YXRpb24gPSAwLjAxNSAqIGJlemllclkqICBNYXRoLnNpbih0aGlzLmZpbHRlclRpbWUgKiAwLjAyKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggdGhpcy50aW1lci5nZXRFbGFwc2VkVGltZSgpIDwgdGhpcy5maWx0ZXJUcmFuc2l0aW9uTVMpeyAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5iZXppZXJUaW1lICs9IHRoaXMuYmV6aWVySW5jcmVtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudGltZXIuZ2V0RWxhcHNlZFRpbWUoKSA+ICh0aGlzLmZpbHRlclRyYW5zaXRpb25NUyArIHRoaXMuZmlsdGVyU3RhdGljTVMpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJlemllclRpbWUgLT0gdGhpcy5iZXppZXJJbmNyZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCB0aGlzLnRpbWVyLmdldEVsYXBzZWRUaW1lKCkgPiAoMip0aGlzLmZpbHRlclRyYW5zaXRpb25NUyArIHRoaXMuZmlsdGVyU3RhdGljTVMpICkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJUaW1lID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iZXppZXJUaW1lID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lci5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICBmb3JlZ3JvdW5kRmlsdGVycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZEZpbHRlcnMgPSBbXTsgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy90aGlzLmFwcC50aWNrZXIuc3BlZWQgPSAxLjA7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIuanVtcFZlbCA9IHRoaXMucGxheWVyRGVmYXVsdEp1bXA7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIubWF4VmVsID0gdGhpcy5wbGF5ZXJEZWZhdWx0VmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwb3dlcnVwcy5mb3JFYWNoKCAocG93ZXJ1cCkgPT4ge1xyXG4gICAgICAgICAgICBwb3dlcnVwLnVwZGF0ZSh0aGlzLnBvd2VydXBUaW1lci5nZXRFbGFwc2VkVGltZSgpKTtcclxuICAgICAgICB9IClcclxuICAgIH1cclxuXHJcbiAgICBhZGRUb1N0YWdlKGZvcmVncm91bmRDb250YWluZXIsIGJhY2tncm91bmRDb250YWluZXIpe1xyXG4gICAgICAgIGZvcmVncm91bmRDb250YWluZXIuYWRkQ2hpbGQodGhpcy5mb3JlZ3JvdW5kTm9pc2UpO1xyXG4gICAgICAgIGJhY2tncm91bmRDb250YWluZXIuYWRkQ2hpbGQodGhpcy5iYWNrZ3JvdW5kTm9pc2UpO1xyXG5cclxuICAgICAgICBmb3JlZ3JvdW5kQ29udGFpbmVyLmFkZENoaWxkKHRoaXMuYmFkRmlsdGVyU29sdXRpb24pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICAvL2ZvcmVncm91bmRGaWx0ZXJzID0gW3RoaXMuZm9yZWdyb3VuZEZpbHRlcl07XHJcbiAgICAgICAvLyBiYWNrZ3JvdW5kRmlsdGVycyA9IFt0aGlzLmJhY2tncm91bmRGaWx0ZXJdO1xyXG4gICAgICAgIHRoaXMudGltZXIuc3RhcnQoKTtcclxuICAgIH1cclxufSIsImltcG9ydCBNYXR0ZXIgZnJvbSAnbWF0dGVyLWpzL2J1aWxkL21hdHRlci5taW4uanMnO1xyXG5pbXBvcnQge1BpeGVsYXRlRmlsdGVyfSBmcm9tICdAcGl4aS9maWx0ZXItcGl4ZWxhdGUnO1xyXG5pbXBvcnQge0NvbG9yUmVwbGFjZUZpbHRlcn0gZnJvbSAnQHBpeGkvZmlsdGVyLWNvbG9yLXJlcGxhY2UnO1xyXG5cclxuaW1wb3J0IHsgQ2VsbHVsYXJNYXAgfSBmcm9tIFwiLi4vZW50aXRpZXMvbWFwR2VuLmpzXCI7XHJcbmltcG9ydCB7UGxheWVyfSBmcm9tICcuLi9lbnRpdGllcy9wbGF5ZXIuanMnO1xyXG5pbXBvcnQgeyBLQkNvbnRyb2xsZXJ9IGZyb20gJy4uL2VudGl0aWVzL2NvbnRyb2xsZXIuanMnO1xyXG5pbXBvcnQge1NoYWRvd01hcH0gZnJvbSAnLi4vbGlnaHRpbmcvc2hhZG93TWFwLmpzJztcclxuaW1wb3J0IHtNeUNhbWVyYX0gZnJvbSAnLi4vZW50aXRpZXMvbXlDYW1lcmEuanMnO1xyXG5pbXBvcnQge0J1dHRvbkNvbnRyb2xsZXJ9IGZyb20gJy4uL2VudGl0aWVzL2J1dHRvbnMuanMnO1xyXG5pbXBvcnQge1BhdXNlTWVudX0gZnJvbSAnLi4vZW50aXRpZXMvbXlNZW51LmpzJztcclxuaW1wb3J0IHtEaXNzb2x2ZUZpbHRlcn0gZnJvbSAnLi4vZmlsdGVycy9EaXNzb2x2ZUZpbHRlci5qcyc7XHJcbmltcG9ydCB7Q2F0bmlwVHJpcH0gZnJvbSAnLi4vZmlsdGVycy9jYXRUcmlwU3RhdGUuanMnXHJcbi8vIEFsaWFzZXNcclxubGV0IEVuZ2luZSA9IE1hdHRlci5FbmdpbmUsXHJcbldvcmxkID0gTWF0dGVyLldvcmxkLFxyXG5FdmVudHMgPSBNYXR0ZXIuRXZlbnRzO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWUgeyAgXHJcbiAgICBjb25zdHJ1Y3Rvcihsb2FkZXIsIGFwcCl7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICAgICAgLy9QSVhJLnNldHRpbmdzLlNQUklURV9NQVhfVEVYVFVSRVMgPSAxNjtcclxuICAgICAgICAvLyBkaXNwbGF5IG9iamVjdCBjb250YWluZXJzICAgICAgICBcclxuICAgICAgICB0aGlzLndvcmxkQ29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7ICAgICAgLy8gZXZlcnkgZGlzcGxheSBvYmplY3QgaW4gdGhlIGdhbWUgd29ybGRcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpOyAgLy8gZXZlcnkgYW5pbWF0ZWQgc3ByaXRlIGluIHRoZSBnYW1lXHJcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kQ29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7IC8vIG9iamVjdHMgd2l0aCBubyBwYXJhbGxheCBzY3JvbGxcclxuICAgICAgICB0aGlzLmJhY2tncm91bmRDb250YWluZXIgPSBuZXcgUElYSS5Db250YWluZXIoKTsgLy8gb2JqZWN0cyBhZmZlY3RlZCBieSBwYXJhbGxheFxyXG4gICAgICAgIHRoaXMucGF1c2VNdXNpYyA9IGxvYWRlci5wYXVzZU11c2ljO1xyXG5cclxuICAgICAgICAvLyBkaXNzb2x2ZSBlZmZlY3Qgc2hhZGVyXHJcbiAgICAgICAgdGhpcy5kaXNzb2x2ZVNwcml0ZSA9IG5ldyBQSVhJLlNwcml0ZS5mcm9tKCdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kdnhpa3lieWkvaW1hZ2UvdXBsb2FkL3YxNDg2NjM0MTEzLzJ5WWF5WmtfdnFzeXp4LnBuZycpOyAgIFxyXG4gICAgICAgIHRoaXMuZGlzc29sdmVTcHJpdGUudGV4dHVyZS5iYXNlVGV4dHVyZS53cmFwTW9kZSA9IFBJWEkuV1JBUF9NT0RFUy5SRVBFQVQ7XHJcblxyXG4gICAgICAgIHRoaXMuZGlzc29sdmVTcHJpdGUuc2NhbGUuc2V0KDAuMik7XHJcbiAgICAgICAgdGhpcy5kaXNzb2x2ZVNoYWRlciA9IGxvYWRlci5kaXNzb2x2ZVNoYWRlcjtcclxuICAgICAgICB0aGlzLmJlemllckRpc3BsYWNlbWVudFNoYWRlciA9IGxvYWRlci5kaXNwbGFjZW1lbnRTaGFkZXI7XHJcbiAgXHJcbiAgICAgICAgdGhpcy53b3JsZENvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmRpc3NvbHZlU3ByaXRlKTtcclxuICAgICAgICAvL3RoaXMuZGlzc29sdmVFZmZlY3QgPSBuZXcgRGlzc29sdmVGaWx0ZXIodGhpcy5kaXNzb2x2ZVNwcml0ZSwgbG9hZGVyLmRpc3NvbHZlU2hhZGVyLCAxKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBwaHlzaWNzIEVuZ2luZVxyXG4gICAgICAgIHRoaXMuZW5naW5lID0gRW5naW5lLmNyZWF0ZSgpO1xyXG4gICAgICAgIHRoaXMud29ybGQgPSB0aGlzLmVuZ2luZS53b3JsZDtcclxuICAgICAgICB0aGlzLnVwZGF0ZUxhZyA9IDA7XHJcblxyXG4gICAgICAgIC8vIHByb2NlZHVyYWwgY2F2ZSBnZW5lcmF0b3JcclxuICAgICAgICB0aGlzLnRpbGVNYXAgPSBuZXcgQ2VsbHVsYXJNYXAoMjUsMjUsMTUwLDYsIGxvYWRlci5saWdodFNoYWRlciwgbG9hZGVyLnRpbGVzZXQsIGxvYWRlci50b3JjaEZyYW1lcyk7XHJcbiAgICAgICAgLy8gdGhpcy50aWxlTWFwID0gbmV3IE1hemVNYXAoMjUsMjUsMTUwLDYsIGxvYWRlci5saWdodFNoYWRlciwgbG9hZGVyLnRpbGVzZXQsIGxvYWRlci50b3JjaEZyYW1lcyk7XHJcbiAgICAgICAgdGhpcy5hbGxMaWdodHMgPSBuZXcgUElYSS5Db250YWluZXIoKTtcclxuXHJcbiAgICAgICAgLy8gQ29udGFpbnMgcGxheWVyIGFuaW1hdGlvbnMsIHBoeXNpY3MgYm9kaWVzLCBmbGFncywgYmVoYXZpb3IgZnVuY3Rpb25zeGNcclxuICAgICAgICBsZXQgcGxheWVyUG9zID0gdGhpcy50aWxlTWFwLnBsYXllclNwYXduO1xyXG4gICAgICAgIHRoaXMucGxheWVyID0gbmV3IFBsYXllcihwbGF5ZXJQb3MsIGxvYWRlci5jYXRBbmltYXRpb25zKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5wbGF5ZXIpO1xyXG5cclxuICAgICAgICB0aGlzLmNhdG5pcFRyaXAgPSBuZXcgQ2F0bmlwVHJpcCh0aGlzLmJlemllckRpc3BsYWNlbWVudFNoYWRlciwgdGhpcy5wbGF5ZXIpO1xyXG5cclxuICAgICAgICAvLyBmaWxsIHRoZSBhbmltYXRpb24gY29udGFpbmVyXHJcbiAgICAgICAgdGhpcy50aWxlTWFwLnRvcmNoU3ByaXRlcy5mb3JFYWNoKCAoYW5pbWF0aW9uKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRhaW5lci5hZGRDaGlsZChhbmltYXRpb24pOyAvLyBhZGQgdG9yY2hlc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHRoaXMuYW5pbWF0aW9uQ29udGFpbmVyLmFkZENoaWxkKHRoaXMudGlsZU1hcC50b3JjaENvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIuYW5pbWF0aW9ucy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5hbmltYXRpb25Db250YWluZXIuYWRkQ2hpbGQodmFsdWUpOyAgLy8gYWRkIHBsYXllciBhbmltYXRpb25zIFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgcGxheWVyJ3MgcmlnaWRib2R5IHRvIG1hdHRlcmpzIHdvcmxkXHJcbiAgICAgICAgV29ybGQuYWRkKHRoaXMud29ybGQsIHRoaXMucGxheWVyLmJvZHkpO1xyXG5cclxuICAgICAgICAvLyBBZGQgdGlsZSBjb2xsaWRlcnMgdG8gbWF0dGVyanMgZW5naW5lXHJcbiAgICAgICAgdGhpcy50aWxlTWFwLnRlcnJhaW4uZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBXb3JsZC5hZGQodGhpcy53b3JsZCwgZWxlbWVudC5Db2xsaWRlcik7XHJcbiAgICAgICAgICAgIGlmICggZWxlbWVudC53YWxrQm94KVxyXG4gICAgICAgICAgICAgICAgV29ybGQuYWRkKHRoaXMud29ybGQsIGVsZW1lbnQud2Fsa0JveCk7XHJcblxyXG4gICAgICAgICAgICBXb3JsZC5hZGQodGhpcy53b3JsZCwgZWxlbWVudC5lZGdlQm94ZXMpXHJcbiAgICAgICAgfSk7IFxyXG5cclxuICAgICAgICB0aGlzLnRpbGVNYXAucG93ZXJ1cHMuZm9yRWFjaCggKHBvd2VydXApID0+IHtcclxuICAgICAgICAgIFdvcmxkLmFkZCh0aGlzLndvcmxkLCBwb3dlcnVwLmNvbGxpZGVyKTtcclxuICAgICAgICAgIC8vY29uc29sZS5sb2cocG93ZXJ1cC5jb2xsaWRlcik7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAvLyBJbnB1dCBoYW5kbGVyc1xyXG4gICAgICAgIC8vIGNhbWVyYSBtb3ZlbWVudCBjb250cm9sXHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgTXlDYW1lcmEocGxheWVyUG9zKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBwYXNzIHRoZSB0aWNrZXIgYW5kIGFuaW1hdGlvbiBjb250YWluZXIgdG8gcGF1c2UgdGhlIGdhbWUgbG9vcFxyXG4gICAgICAgIHRoaXMucGF1c2VNZW51ID0gbmV3IFBhdXNlTWVudShsb2FkZXIubWVudUJ1dHRvbnMsIHRoaXMuYXBwLnRpY2tlciwgcGxheWVyUG9zLCB0aGlzLmFuaW1hdGlvbkNvbnRhaW5lciwgdGhpcy5wYXVzZU11c2ljLCBsb2FkZXIubWVudUZvbnQpO1xyXG5cclxuICAgICAgICB0aGlzLmJ1dHRvbkNvbnRyb2xsZXIgPSBudWxsO1xyXG4gICAgICAgIGlmICggXCJvbnRvdWNoc3RhcnRcIiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgKXtcclxuICAgICAgICAgIHRoaXMuYnV0dG9uQ29udHJvbGxlciA9IG5ldyBCdXR0b25Db250cm9sbGVyKGxvYWRlci5idXR0b25GcmFtZXMsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnBvc2l0aW9uLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5oYW5kbGVFdmVudC5iaW5kKHRoaXMucGxheWVyKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXVzZU1lbnUuaGFuZGxlRXZlbnQuYmluZCh0aGlzLnBhdXNlTWVudSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAucmVuZGVyZXIudmlld1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB0aGlzLnBhdXNlTWVudS5hdHRhY2hDb250cm9sbGVyKHRoaXMuYnV0dG9uQ29udHJvbGxlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdmlydHVhbCBqb3lzdGlja1xyXG4gICAgICAgIC8vIGlmIChcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmN1c3RvbUpveXN0aWNrID0gbmV3IENvbnRyb2xsZXIodGhpcy5wbGF5ZXIsIHRoaXMucGxheWVyLmJvZHkpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAgICAgLy8ga2V5Ym9hcmRcclxuICAgICAgICB0aGlzLktCSW5wdXQgPSBuZXcgS0JDb250cm9sbGVyKHRoaXMucGxheWVyLCB0aGlzLnBsYXllci5ib2R5LCB0aGlzLmFwcC50aWNrZXIsIHRoaXMuY2FtZXJhLCB0aGlzLnBhdXNlTWVudSk7XHJcblxyXG4gICAgICAgIC8vIHJlc2l6ZSBjYW52YXMgb24gd2luZG93IHJlc2l6ZVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZS5iaW5kKHRoaXMpLCBmYWxzZSApO1xyXG5cclxuICAgICAgICAvLyBnYW1lIHN0YXRlIGNoYW5naW5nIGNvbGxpc2lvbiBldmVudHNcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbkV2ZW50U2V0dXAoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuc3RhZ2UucG9zaXRpb24uc2V0KHRoaXMuYXBwLnNjcmVlbi53aWR0aC8yLCB0aGlzLmFwcC5zY3JlZW4uaGVpZ2h0LzIpO1xyXG5cclxuICAgICAgICAvLyBkcmF3IHRoZSBzdGF0aWMgbGlnaHRcclxuICAgICAgICB0aGlzLnRpbGVNYXAubGlnaHRzLmZvckVhY2goIChsaWdodCkgPT4ge1xyXG4gICAgICAgIGxpZ2h0LnVwZGF0ZSh0aGlzLmFwcC50aWNrZXIuc3BlZWQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgb2JqZWN0cyB0byBwaXhpIHN0YWdlXHJcbiAgICAgICAgdGhpcy5pbml0TGF5ZXJzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLnN0YWdlLnNjYWxlLnNldCgwLjUpO1xyXG5cclxuICAgICAgICAvLyBTdGFydCB0aGUgZ2FtZSBsb29wIFxyXG4gICAgICAgIHRoaXMuYXBwLnRpY2tlci5hZGQoZGVsdGEgPT4gdGhpcy5sb29wKGRlbHRhKSk7ICAgXHJcbiAgICB9XHJcblxyXG4gICAgLy8gbWFpbiBnYW1lIGxvb3AsIGRvZXMgbm90IHVwZGF0ZSBhdCBhIGNvbnN0YW50IHJhdGVcclxuICAgIGxvb3AoZGVsdGEpe1xyXG4gICAgICAgIC8vIHVwZGF0ZSBwaHlzaWNzIGJvZGllcyBhdCA2MCBoeiBjb25zdGFudFxyXG4gICAgICAgIHRoaXMuRml4ZWRVcGRhdGUoKTtcclxuICAgICAgICBpZiAoIHRoaXMuY2F0bmlwVHJpcC50aW1lci5pc1J1bm5pbmcpXHJcbiAgICAgICAgICB0aGlzLndvcmxkQ29udGFpbmVyLnJvdGF0aW9uID0gdGhpcy5jYXRuaXBUcmlwLmNhbWVyYVJvdGF0aW9uO1xyXG5cclxuICAgICAgICB0aGlzLnBhdXNlTWVudS5tb3ZlQnV0dG9ucyh0aGlzLmNhbWVyYS5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIC8vIGFkanVzdCBzdGFnZSBmb3IgY2FtZXJhIG1vdmVtZW50XHJcbiAgICAgICAgdGhpcy5hcHAuc3RhZ2UucGl2b3QuY29weUZyb20odGhpcy5jYW1lcmEucG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMuYXBwLnN0YWdlLmFuZ2xlID0gdGhpcy5jYW1lcmEuYW5nbGVPZmZzZXQ7XHJcblxyXG4gICAgICAgIHRoaXMudGlsZU1hcC5wYXJhbGxheFNjcm9sbCh0aGlzLmFwcC5zdGFnZS5waXZvdCwgMS4yLCAxLjIpO1xyXG5cclxuICAgICAgICB0aGlzLmNhdG5pcFRyaXAudXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgRml4ZWRVcGRhdGUoKXtcclxuICAgICAgdGhpcy51cGRhdGVMYWcgKz0gdGhpcy5hcHAudGlja2VyLmRlbHRhTVM7XHJcbiAgICAgIHdoaWxlICggdGhpcy51cGRhdGVMYWcgPj0gMTYuNjY2ICl7XHJcbiAgICAgICAgICAvLyBhcHBseSBwbGF5ZXIgaW5wdXQgdG8gcGh5c2ljcyBib2RpZXNcclxuICAgICAgICAgIHRoaXMucGxheWVyLnVwZGF0ZSh0aGlzLmFwcC50aWNrZXIuc3BlZWQpO1xyXG4gICAgICAgICAgRW5naW5lLnVwZGF0ZSh0aGlzLmVuZ2luZSk7XHJcbiAgICAgICAgICBpZiAoIHRoaXMucGxheWVyLmNhbWVyYVNuYXBwZWQpXHJcbiAgICAgICAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlKHRoaXMucGxheWVyLnBvc2l0aW9uLCB0aGlzLnBsYXllci5mbGlwLCB0aGlzLmFwcC50aWNrZXIuc3BlZWQpO1xyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS51cGRhdGUodGhpcy5wbGF5ZXIuY2xpbWJUcmFuc2xhdGlvbiwgdGhpcy5wbGF5ZXIuZmxpcCwgdGhpcy5hcHAudGlja2VyLnNwZWVkKTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBpbmNyZWFzZSBncmF2aXR5IGlmIHBsYXllciBpcyBmYWxsaW5nXHJcbiAgICAgICAgICBpZiAoIXRoaXMucGxheWVyLmlzR3JvdW5kZWQgJiYgIXRoaXMucGxheWVyLmluU2xpZGUgJiYgIXRoaXMucGxheWVyLmlzSGFuZ2luZyAmJiB0aGlzLnBsYXllci5ib2R5LnZlbG9jaXR5LnkgPiAwKXtcclxuICAgICAgICAgICAgICBpZiAoIHRoaXMud29ybGQuZ3Jhdml0eS55IDwgMy41IClcclxuICAgICAgICAgICAgICAgIHRoaXMud29ybGQuZ3Jhdml0eS55ICs9IDAuMDE1O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy53b3JsZC5ncmF2aXR5LnkgPSAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gbW92ZSBmb3J3YXJkIG9uZSB0aW1lIHN0ZXBcclxuICAgICAgICAgIHRoaXMudXBkYXRlTGFnIC09IDE2LjY2NlxyXG4gICAgICAgICAgdGhpcy50aWxlTWFwLmxpZ2h0cy5mb3JFYWNoKCAobGlnaHQpID0+IHtcclxuICAgICAgICAgICAgbGlnaHQubGlnaHRDb250YWluZXIuY2hpbGRyZW4uZm9yRWFjaCggKCBtZXNoICkgPT4ge1xyXG4gICAgICAgICAgICBtZXNoLnNoYWRlci51bmlmb3Jtcy50aW1lICs9IDAuMDAwMDM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHVwZGF0ZSBjYXRuaXAgdHJpcCBlZmZlY3RcclxuICAgICAgICB0aGlzLmNhdG5pcFRyaXAuRml4ZWRVcGRhdGUodGhpcy5wbGF5ZXIsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5maWx0ZXJzLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhY2tncm91bmRDb250YWluZXIuZmlsdGVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbGVNYXAucG93ZXJ1cHMpO1xyXG4gICAgICAgIFxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYWRkIHBpeGkgb2JqZWN0cyB0byBnbG9iYWwgcmVuZGVyZXIsIFxyXG4gICAgLy8gd29ya3MgbGlrZSBhIHN0YWNrLCBsYXN0IGVsZW1lbnQgYWRkZWQgPSB0b3AgZ3JhcGhpY3MgbGF5ZXJcclxuICAgIGluaXRMYXllcnMoKSB7XHJcbiAgICAgICAgLy8gYmFja2dyb3VuZCAvIHVuaW50ZXJhY3RhYmxlIHRpbGVzXHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29udGFpbmVyLmFkZENoaWxkKHRoaXMudGlsZU1hcC5iYWNrZ3JvdW5kQ29udGFpbmVyKTtcclxuICAgICAgICB0aGlzLndvcmxkQ29udGFpbmVyLmFkZENoaWxkKHRoaXMuYmFja2dyb3VuZENvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIC8vIGFkZCBhbmltYXRpb25zXHJcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kQ29udGFpbmVyLmFkZENoaWxkKHRoaXMuYW5pbWF0aW9uQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHRlcnJhaW4gdGlsZXNcclxuICAgICAgICB0aGlzLmZvcmVncm91bmRDb250YWluZXIuYWRkQ2hpbGQodGhpcy50aWxlTWFwLnRpbGVDb250YWluZXIpO1xyXG4gICAgICBcclxuICAgICAgICB0aGlzLnRpbGVNYXAubGlnaHRzLmZvckVhY2goIChsaWdodCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5hbGxMaWdodHMuYWRkQ2hpbGQobGlnaHQubGlnaHRDb250YWluZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmFsbExpZ2h0cyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gbWFrZXMgYSBtYXNrIGZvciBzaGFkb3dzXHJcbiAgICAgICAgbGV0IHNoYWRvd01hcCA9IG5ldyBTaGFkb3dNYXAodGhpcy50aWxlTWFwLmxpZ2h0cywgdGhpcy50aWxlTWFwLCB0aGlzLmFwcC5yZW5kZXJlcik7XHJcbiAgICAgIFxyXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5hZGRDaGlsZChzaGFkb3dNYXAuZm9jdXMpO1xyXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5hZGRDaGlsZChzaGFkb3dNYXAubWVzaCk7XHJcblxyXG4gICAgICAgIHRoaXMud29ybGRDb250YWluZXIuYWRkQ2hpbGQodGhpcy5mb3JlZ3JvdW5kQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuc3RhZ2UuYWRkQ2hpbGQodGhpcy53b3JsZENvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIC8vIGFkZCB1aSBidXR0b25zIHRvIHRoZSB0b3AgbGF5ZXJcclxuICAgICAgICB0aGlzLmFwcC5zdGFnZS5hZGRDaGlsZCh0aGlzLnBhdXNlTWVudS5idXR0b25Db250YWluZXIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmNhdG5pcFRyaXAuZm9yZWdyb3VuZE5vaXNlKTtcclxuICAgICAgICB0aGlzLmZvcmVncm91bmRDb250YWluZXIuYWRkQ2hpbGQodGhpcy5jYXRuaXBUcmlwLmJhZEZpbHRlclNvbHV0aW9uKTtcclxuICAgICAgICB0aGlzLnRpbGVNYXAuYmFja2dyb3VuZENvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmNhdG5pcFRyaXAuYmFja2dyb3VuZE5vaXNlKTtcclxuXHJcbiAgICAgICAgLy8gaGlkZSB0aGUgY2F0J3MgZXllcywgSSB0aGluayB0aGV5IGFyZSB0b28gc21hbGwgZm9yIHRoZSBwaXhlbGF0aW9uIGZpbHRlclxyXG4gICAgICAgIGxldCBjb2xvclN3YXBwZXIgPSBuZXcgQ29sb3JSZXBsYWNlRmlsdGVyKDB4MTgxMDAwLCAweGZmYTI1MiwgMC4wMDEpO1xyXG5cclxuICAgICAgICAvLyBhcHBseSBmaWx0ZXJzIHRvIGNvbnRhaW5lcnNcclxuICAgICAgICAgdGhpcy53b3JsZENvbnRhaW5lci5maWx0ZXJzID0gW25ldyBQaXhlbGF0ZUZpbHRlcigzKV07XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25Db250YWluZXIuZmlsdGVycyA9IFtjb2xvclN3YXBwZXJdO1xyXG4gICAgICB9XHJcblxyXG4gICAgLy8gTlNGVyBTcGFnaGV0dGkgY29kZVxyXG4gICAgY29sbGlzaW9uRXZlbnRTZXR1cCgpIHtcclxuICAgICAgICBFdmVudHMub24odGhpcy5lbmdpbmUsICdjb2xsaXNpb25BY3RpdmUnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgIHZhciBpbldhbGtCb3ggPSBmYWxzZTtcclxuICAgICAgICAgIHZhciBjYXRDb2xsaXNpb24gPSBmYWxzZTtcclxuICAgICAgICAgIHZhciBwYWlycyA9IGV2ZW50LnBhaXJzO1xyXG4gICAgICAgICAgdmFyIHBoeXNpY3NDb2xsaXNpb25zID0gMDtcclxuICAgICAgICBcclxuICAgICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBjb2xsaXNpb24gcGFpcnNcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgXHJcbiAgICAgICAgICAgIGxldCBwYWlyID0gcGFpcnNbaV07XHJcbiAgICAgICAgICAgIGxldCBvdGhlckJvZHk7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBjb2xsaXNpb24gaW52b2x2ZXMgdGhlIGNhdFxyXG4gICAgICAgICAgICBpZiAoIHBhaXIuYm9keUEuaWQgPT0gdGhpcy5wbGF5ZXIuYm9keS5pZCApXHJcbiAgICAgICAgICAgICAgICBvdGhlckJvZHkgPSBwYWlyLmJvZHlCO1xyXG4gICAgICAgICAgICBlbHNlIGlmICggcGFpci5ib2R5Qi5pZCA9PSB0aGlzLnBsYXllci5ib2R5LmlkIClcclxuICAgICAgICAgICAgICAgIG90aGVyQm9keSA9IHBhaXIuYm9keUE7XHJcbiAgICAgIFxyXG4gICAgICAgICAgICAvLyBpZ25vcmUgY29sbGlzaW9uIGlmIHBsYXllciBub3QgaW52b2x2ZWRcclxuICAgICAgICAgICAgZWxzZSBjb250aW51ZTtcclxuICAgICAgXHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGNvbGxpc2lvbiB3aXRoIHNlbnNvcnNcclxuICAgICAgICAgICAgaWYgKCBvdGhlckJvZHkuaXNTZW5zb3IgKSB7XHJcbiAgICAgICAgICAgICAgLy8gaWYgY29sbGRpbmcgd2l0aCBhIGxlZGdlIGNsaW1iIHRyaWdnZXIgY29sbGlkZXJcclxuICAgICAgICAgICAgICBpZiAoIG90aGVyQm9keS5pc0VkZ2VCb3ggKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHRoaXMucGxheWVyLmxhc3RJbnB1dCA9PSBcInJpZ2h0XCIgJiYgIW90aGVyQm9keS5pc1JpZ2h0KSB8fCB0aGlzLnBsYXllci5sYXN0SW5wdXQgPT0gXCJsZWZ0XCIgJiYgb3RoZXJCb2R5LmlzUmlnaHQpe1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLndvcmxkLmdyYXZpdHkueSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGltcGFjdFZlbCA9IHRoaXMucGxheWVyLnByZXZWZWw7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChpbXBhY3RWZWwgPiB0aGlzLnBsYXllci5mYWxsRGFtYWdlVmVsKSBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5hZGRUcmF1bWEoaW1wYWN0VmVsIC8gKHRoaXMucGxheWVyLmZhbGxEYW1hZ2VWZWwgKiAyKSk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnN0YXJ0TGVkZ2VDbGltYihvdGhlckJvZHkucG9zaXRpb24sIG90aGVyQm9keS5pc1JpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICByZXR1cm47IC8vIHNraXAgdGhlIHJlc3Qgb2YgdGhlIGNvbGxpc2lvbiBjaGVja3MgZm9yIHRoaXMgZnJhbWU7IHRoZSBwbGF5ZXIgd2lsbCBiZSBsb2NrZWQgaW4gcGxhY2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICBpbldhbGtCb3ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuaXNHcm91bmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5pblNsaWRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8gaWYgY29sbGlkaW5nIHdpdGggYSBncm91bmQgdHJpZ2dlciBjb2xsaWRlclxyXG4gICAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLnBsYXllci5pc0hhbmdpbmcpXHJcbiAgICAgICAgICAgICAgICBpbldhbGtCb3ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoIG90aGVyQm9keS5pc0NhdG5pcCApe1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmZvcmVncm91bmRDb250YWluZXIuZmlsdGVycyA9IFt0aGlzLmNhdG5pcFRyaXAuZm9yZWdyb3VuZEZpbHRlcl07XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMudGlsZU1hcC5iYWNrZ3JvdW5kQ29udGFpbmVyLmZpbHRlcnMgPSBbdGhpcy5jYXRuaXBUcmlwLmJhY2tncm91bmRGaWx0ZXJdO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmNhdG5pcFRyaXAuc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgV29ybGQucmVtb3ZlKHRoaXMud29ybGQsIG90aGVyQm9keSk7XHJcbiAgICAgICAgICAgICAgICAgIG90aGVyQm9keS5zcHJpdGVSZWZlcmVuY2UuZmlsdGVycyA9IFtuZXcgRGlzc29sdmVGaWx0ZXIodGhpcy5kaXNzb2x2ZVNwcml0ZSwgdGhpcy5kaXNzb2x2ZVNoYWRlciwgMSldO1xyXG4gICAgICAgICAgICAgICAgICAvLyB0aGlzLnRpbGVNYXAudGlsZUNvbnRhaW5lci5yZW1vdmVDaGlsZChvdGhlckJvZHkuc3ByaXRlUmVmZXJlbmNlKTtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cob3RoZXJCb2R5LnNwcml0ZVJlZmVyZW5jZSlcclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgIHsvLyBpZiBwaHlzaWNzIGNvbGxpc2lvblxyXG4gICAgICAgICAgICAgIHRoaXMucGxheWVyLmNvbGxpc2lvblRpbWVyLnN0b3AoKTtcclxuICAgICAgICAgICAgICBjYXRDb2xsaXNpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgIHBoeXNpY3NDb2xsaXNpb25zKys7XHJcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocGh5c2ljc0NvbGxpc2lvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIGNhdCBpcyBzbGlkaW5nIG9uIGEgd2FsbCBjYXNlXHJcbiAgICAgICAgICBpZiAoIWluV2Fsa0JveCAmJiBjYXRDb2xsaXNpb24gJiYgIXRoaXMucGxheWVyLmlzR3JvdW5kZWQgKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyLndhbGxKdW1wVGltZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllci54VmVsID0gMDtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIuaW5TbGlkZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICggdGhpcy5wbGF5ZXIuZmxpcCA9PSBcInJpZ2h0XCIpe1xyXG4gICAgICAgICAgICAgIHZhciBzbGlkZUFuaW1hdGlvbiA9IHRoaXMucGxheWVyLmFuaW1hdGlvbnMuZ2V0KFwic2xpZGVcIik7XHJcbiAgICAgICAgICAgICAgc2xpZGVBbmltYXRpb24uc2NhbGUueCA9IC10aGlzLnBsYXllci5zY2FsZTtcclxuICAgICAgICAgICAgICBzbGlkZUFuaW1hdGlvbi5hbmdsZSA9IC05MDtcclxuICAgICAgICAgICAgICB0aGlzLnBsYXllci5hbmltYXRpb25zLnNldChcInNsaWRlXCIsIHNsaWRlQW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICggdGhpcy5wbGF5ZXIuZmxpcCA9PSBcImxlZnRcIil7XHJcbiAgICAgICAgICAgICAgdmFyIHNsaWRlQW5pbWF0aW9uID0gdGhpcy5wbGF5ZXIuYW5pbWF0aW9ucy5nZXQoXCJzbGlkZVwiKTtcclxuICAgICAgICAgICAgICBzbGlkZUFuaW1hdGlvbi5zY2FsZS54ID0gLXRoaXMucGxheWVyLnNjYWxlO1xyXG4gICAgICAgICAgICAgIHNsaWRlQW5pbWF0aW9uLmFuZ2xlID0gOTA7XHJcbiAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuYW5pbWF0aW9ucy5zZXQoXCJzbGlkZVwiLCBzbGlkZUFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc2V0QW5pbWF0aW9uKFwic2xpZGVcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIGlmIGxhbmRpbmcgICBcclxuICAgICAgICAgIGVsc2UgaWYgKCAhdGhpcy5wbGF5ZXIuaXNHcm91bmRlZCAmJiAoIChpbldhbGtCb3ggJiYgY2F0Q29sbGlzaW9uICYmICF0aGlzLnBsYXllci5pblNsaWRlKSB8fCAocGh5c2ljc0NvbGxpc2lvbnMgPj0gMiAmJiBpbldhbGtCb3ggKSApICkgIHsgIFxyXG4gICAgICAgICAgICB0aGlzLndvcmxkLmdyYXZpdHkueSA9IDE7XHJcbiAgICAgICAgICAgIGNvbnN0IGltcGFjdFZlbCA9IHRoaXMucGxheWVyLnByZXZWZWw7XHJcbiAgICAgICAgICAgIGlmIChpbXBhY3RWZWwgPiB0aGlzLnBsYXllci5mYWxsRGFtYWdlVmVsKSBcclxuICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5hZGRUcmF1bWEoaW1wYWN0VmVsIC8gKHRoaXMucGxheWVyLmZhbGxEYW1hZ2VWZWwgKiAyKSk7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyLnByZXZWZWwgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyLmlzR3JvdW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllci5pblNsaWRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICggdGhpcy5wbGF5ZXIueFZlbCA9PSAwIHx8IHRoaXMucGxheWVyLmluU2xvd0Rvd24gKVxyXG4gICAgICAgICAgICAgIHRoaXMucGxheWVyLnNldEFuaW1hdGlvbihcInN0b3BcIik7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCAhdGhpcy5wbGF5ZXIuaW5TbG93RG93biApXHJcbiAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc2V0QW5pbWF0aW9uKFwid2Fsa1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgICAvLyBzdGFydCBhIHRpbWVyIGlmIHRoZSBwbGF5ZXIgZW5kcyBhIGNvbGxpc2lvbiB3aXRoIGEgcGh5c2ljcyBjb2xsaWRlclxyXG4gICAgICAgIEV2ZW50cy5vbih0aGlzLmVuZ2luZSwgJ2NvbGxpc2lvbkVuZCcsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgbGV0IHBhaXJzID0gZXZlbnQucGFpcnM7XHJcbiAgICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggY29sbGlzaW9uIHBhaXJzXHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBwYWlyID0gcGFpcnNbaV07XHJcbiAgICAgICAgICAgIGxldCBvdGhlckJvZHk7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBjb2xsaXNpb24gaW52b2x2ZXMgdGhlIGNhdFxyXG4gICAgICAgICAgICBpZiAoIHBhaXIuYm9keUEuaWQgPT0gdGhpcy5wbGF5ZXIuYm9keS5pZCApXHJcbiAgICAgICAgICAgICAgICBvdGhlckJvZHkgPSBwYWlyLmJvZHlCO1xyXG4gICAgICAgICAgICBlbHNlIGlmICggcGFpci5ib2R5Qi5pZCA9PSB0aGlzLnBsYXllci5ib2R5LmlkIClcclxuICAgICAgICAgICAgICAgIG90aGVyQm9keSA9IHBhaXIuYm9keUE7XHJcbiAgICAgIFxyXG4gICAgICAgICAgICBpZiAoIW90aGVyQm9keS5pc1NlbnNvcikge1xyXG4gICAgICAgICAgICAgIHRoaXMucGxheWVyLmNvbGxpc2lvblRpbWVyLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMucGxheWVyLmJvZHkudmVsb2NpdHkueSA8IDApe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc2V0QW5pbWF0aW9uKFwianVtcFwiLCA1KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmNvbGxpc2lvblRpbWVyLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmlzR3JvdW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmluU2xpZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmp1bXBJbnB1dCA9IGZhbHNlOyAgICBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVzaXplIGFuZCBjZW50ZXIgY2FudmFzXHJcbiAgICBvbldpbmRvd1Jlc2l6ZSgpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJyZXNpemVcIilcclxuICAgICAgICAvLyBHZXQgY2FudmFzIHBhcmVudCBub2RlXHJcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5hcHAudmlldy5wYXJlbnROb2RlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFJlc2l6ZSB0aGUgcmVuZGVyZXJcclxuICAgICAgICB0aGlzLmFwcC5yZW5kZXJlci5yZXNpemUocGFyZW50LmNsaWVudFdpZHRoLCBwYXJlbnQuY2xpZW50SGVpZ2h0KTtcclxuICAgICAgICAvL3RoaXMuYXBwLnJlbmRlcmVyLnJlc2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgICAgICAvLyBMb2NrIHRoZSBjYW1lcmEgdG8gdGhlIGNhdCdzIHBvc2l0aW9uIFxyXG4gICAgICAgIHRoaXMuYXBwLnN0YWdlLnBvc2l0aW9uLnNldCh0aGlzLmFwcC5zY3JlZW4ud2lkdGgvMiwgdGhpcy5hcHAuc2NyZWVuLmhlaWdodC8yKTvvu7/vu79cclxuICAgICAgICAgIFxyXG4gICAgICAgIHRoaXMudGlsZU1hcC5saWdodHMuZm9yRWFjaCggKCBsaWdodCApID0+IHtcclxuICAgICAgICAgICBsaWdodC51cGRhdGUodGhpcy5hcHAudGlja2VyLnNwZWVkKTtcclxuICAgICAgICAgICB0aGlzLndvcmxkQ29udGFpbmVyLmFkZENoaWxkKGxpZ2h0LmxpZ2h0Q29udGFpbmVyKTtcclxuICAgICAgICAgfSk7ICAgICAgIFxyXG5cclxuICAgICAgICB0aGlzLnBhdXNlTWVudS5vblJlc2l6ZSgpO1xyXG4gICAgfVxyXG59IiwiLypcclxuICBXcml0dGVuIGJ5IEF1c3RpbiBCb2JjbywgU2VwdGVtYmVyIDIwMTlcclxuXHJcbiAgICBUaGlzIHByb2plY3QgaXMgY2FsbGVkIFwiQ2F0YXRvbmlhXCIuIE9yaWdpbmFsbHkgZGVzaWduZWQgdG8gYmUgYSAyRCBTdGVhbHRoL1xyXG4gIFBsYXRmb3JtZXIgZ2FtZS4gWW91IHBsYXkgYXMgYSBjYXQsIHRyeWluZyB0byBjbGltYiBmdXJuaXR1cmUgd2hpbGUgYXZvaWRpbmdcclxuICB5b3VyIG93bmVycycgdmlzaW9uLiBUaGlzIHNob3VsZCBydW4gb24gYWxsIHRoZSBtYWpvciBicm93c2VycyAoIENocm9tZSwgRmlyZWZveCxcclxuICBTYWZhcmksIElFL0VkZ2UsIGV0Yy4uICkgYW5kIHNob3VsZCBydW4gY3Jvc3MgcGxhdGZvcm0gb24gaU9TLCBhbmRyb2lkLCB3aW5kb3dzLCBtYWMsIFxyXG4gIGFuZCBsaW51eC4gVXNlcyBwaXhpLmpzIGZvciB0aGUgV2ViR0wvY2FudmFzIHJlbmRlcmluZyBiYWNrZW5kLiBcclxuICBcclxuICBEZXBlbmRlbmNpZXM6XHJcbiAgICBucG06ICAgICAgICBwYWNrYWdlIG1hbmFnZXJcclxuICAgIHdlYnBhY2s6ICAgIGFzc2V0IGJ1bmRsZXJcclxuICAgIHBpeGkuanM6ICAgIDJEIFdlYkdMIHJlbmRlcmVyXHJcbiAgICBtYXR0ZXIuanM6ICAyRCBwaHlzaWNzIGVuZ2luZSBcclxuICAgIG5pcHBsZWpzOiAgIHZpcnR1YWwgam95c3RpY2tzXHJcblxyXG4gIEJ1bmRsaW5nOlxyXG4gICAgRXhwb3J0IHNldHRpbmdzIGFyZSBpbiB0aGUgXCJ3ZWJwYWNrLmNvbmZpZy5qc1wiIGZpbGVcclxuICAgIEJ1aWxkIHRoZSBhcHAgZnJvbSB0aGUgdGVybWluYWwgd2l0aCB0aGlzIGNvbW1hbmQ6XHJcbiAgICAgICAgbnBtIHJ1biBidWlsZFxyXG5cclxuICBBcnQ6XHJcbiAgICAgIEFsbCBhcnQgZm9yIHRoaXMgZ2FtZSB3YXMgcmlwcGVkIGZyb20gXCJDYXN0bGV2YW5pYTogT3JkZXIgb2YgRWNjbGVzaWFcIiwgYSBcclxuICAgIE5pbnRlbmRvIERTIGV4Y2x1c2l2ZSwgb3JpZ2luYWxseSByZWxlYXNlZCBieSBLb25hbWkgb24gT2N0b2JlciAyMSwgMjAwOC4gSWYgeW91IGxpa2UgdGhlXHJcbiAgICBhcnQgaW4gdGhpcyBnYW1lLCBnbyBzdXBwb3J0IEtvbmFtaSBhbmQgYnV5IHRoYXQgZ2FtZSEgXHJcblxyXG4gICAgSWYgeW91IHdhbnQgdG8gbWFrZSB5b3VyIG93biBwcm9qZWN0IHdpdGggc3ByaXRlcyBmcm9tIHRoaXMgZ2FtZSwgeW91IGNhbiBmaW5kIHRoZW0gaGVyZTpcclxuICAgICAgaHR0cHM6Ly93d3cuc3ByaXRlcnMtcmVzb3VyY2UuY29tL2RzX2RzaS9jYXN0bGV2YW5pYW9yZGVyb2ZlY2NsZXNpYS9cclxuKi9cclxuXHJcbmltcG9ydCB7TXlMb2FkZXJ9IGZyb20gJy4vYXBwL215TG9hZGVyLmpzJztcclxuaW1wb3J0IHtHYW1lfSBmcm9tICcuL2FwcC9nYW1lLmpzJztcclxuaW1wb3J0IHt3YWl0Rm9yV2ViZm9udHN9IGZyb20gJy4vYXBwL2xvYWRGb250cy5qcydcclxuXHJcbmxldCBhcHA7XHJcbmxldCBteUdhbWU7XHJcblxyXG4vLyBEZXRlY3QgTGludXggXHJcbi8vIGlmIChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKFwiTGludXhcIikhPS0xKVxyXG4gIFxyXG4vLyBDcmVhdGUgUGl4aSBBcHBsaWNhdGlvblxyXG5cclxud2FpdEZvcldlYmZvbnRzKFsnQVJDQURFQ0xBU1NJQyddLCBJbml0UGl4aSgpKTtcclxuXHJcbi8vIEluaXRQaXhpKCk7XHJcblxyXG4vLyBsb2FkIGZpbGVzLCBjYWxsIHRoZSBzZXR1cCBmdW5jdGlvbiwgYmluZCB0aGUgY2FsbGluZyBjb250ZXh0IHRvIHRoaXMgZmlsZSdzIGdsb2JhbCBzY29wZVxyXG5sZXQgY3VzdG9tTG9hZGVyID0gbmV3IE15TG9hZGVyKHNldHVwLmJpbmQodGhpcykpO1xyXG5cclxuLy8gU2V0IHVwIHRoZSBnYW1lIGFmdGVyIGFsbCBmaWxlcyBsb2FkIFxyXG5mdW5jdGlvbiBzZXR1cCgpIHtcclxuICBteUdhbWUgPSBuZXcgR2FtZShjdXN0b21Mb2FkZXIsIGFwcCwgdGhpcyk7XHJcblxyXG4gIHByZXZlbnRTY3JvbGwoKTsgIC8vIHN0b3BzIGpveXN0aWNrIGZyb20gc2Nyb2xsaW5nIHBhZ2Ugb24gbW9iaWxlXHJcbn1cclxuXHJcbi8vPT09PT09PT09PT09PT09PT09PT0gSGVscGVyIEZ1bmN0aW9ucyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ly9cclxuXHJcbi8vIEluaXRpYWxpemUgUGl4aSBBcHBsaWNhdGlvblxyXG5mdW5jdGlvbiBJbml0UGl4aSgpIHtcclxuICAgIGFwcCA9IG5ldyBQSVhJLkFwcGxpY2F0aW9uKHsgXHJcbiAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCwgXHJcbiAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LCAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgIGFudGlhbGlhczogdHJ1ZSwgXHJcbiAgICAgIHRyYW5zcGFyZW50OiBmYWxzZSwgXHJcbiAgICAgIHJlc29sdXRpb246IDEsXHJcbiAgICAgIGJhY2tncm91bmRDb2xvcjogMHgwMDAwMDAgLFxyXG4gICAgICBhdXRvRGVuc2l0eTogdHJ1ZVxyXG4gICAgfVxyXG4gICk7XHJcbiAgLy8gRml0IHRoZSBjYW52YXMgdG8gdGhlIHdpbmRvd1xyXG4gIGFwcC5yZW5kZXJlci52aWV3LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gIGFwcC5yZW5kZXJlci52aWV3LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgLy8gQWRkIHRoZSBjYW52YXMgdG8gdGhlIGRvY3VtZW50XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215Q2FudmFzJykuYXBwZW5kQ2hpbGQoYXBwLnZpZXcpO1xyXG59XHJcblxyXG4vLyBQcmV2ZW50IHRvdWNoIGV2ZW50IHNjcm9sbGluZyBvbiBtb2JpbGVcclxuZnVuY3Rpb24gcHJldmVudFNjcm9sbCgpIHtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXlDYW52YXMnKS5vbnRvdWNoZW5kID0gKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICB9O1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUNhbnZhcycpLm9udG91Y2htb3ZlID0gKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICB9O1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUNhbnZhcycpLm9udG91Y2hzdGFydCA9IChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfTsgXHJcbn0iLCJmdW5jdGlvbiB3YWl0Rm9yV2ViZm9udHMoZm9udHMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgbG9hZGVkRm9udHMgPSAwO1xyXG4gICAgZm9yKHZhciBpID0gMCwgbCA9IGZvbnRzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgIChmdW5jdGlvbihmb250KSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgICAgICAvLyBDaGFyYWN0ZXJzIHRoYXQgdmFyeSBzaWduaWZpY2FudGx5IGFtb25nIGRpZmZlcmVudCBmb250c1xyXG4gICAgICAgICAgICBub2RlLmlubmVySFRNTCA9ICdnaUl0VDFXUXlAIS0vIyc7XHJcbiAgICAgICAgICAgIC8vIFZpc2libGUgLSBzbyB3ZSBjYW4gbWVhc3VyZSBpdCAtIGJ1dCBub3Qgb24gdGhlIHNjcmVlblxyXG4gICAgICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uICAgICAgPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgICAgICBub2RlLnN0eWxlLmxlZnQgICAgICAgICAgPSAnLTEwMDAwcHgnO1xyXG4gICAgICAgICAgICBub2RlLnN0eWxlLnRvcCAgICAgICAgICAgPSAnLTEwMDAwcHgnO1xyXG4gICAgICAgICAgICAvLyBMYXJnZSBmb250IHNpemUgbWFrZXMgZXZlbiBzdWJ0bGUgY2hhbmdlcyBvYnZpb3VzXHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuZm9udFNpemUgICAgICA9ICczMDBweCc7XHJcbiAgICAgICAgICAgIC8vIFJlc2V0IGFueSBmb250IHByb3BlcnRpZXNcclxuICAgICAgICAgICAgbm9kZS5zdHlsZS5mb250RmFtaWx5ICAgID0gJ3NhbnMtc2VyaWYnO1xyXG4gICAgICAgICAgICBub2RlLnN0eWxlLmZvbnRWYXJpYW50ICAgPSAnbm9ybWFsJztcclxuICAgICAgICAgICAgbm9kZS5zdHlsZS5mb250U3R5bGUgICAgID0gJ25vcm1hbCc7XHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuZm9udFdlaWdodCAgICA9ICdub3JtYWwnO1xyXG4gICAgICAgICAgICBub2RlLnN0eWxlLmxldHRlclNwYWNpbmcgPSAnMCc7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1lbWJlciB3aWR0aCB3aXRoIG5vIGFwcGxpZWQgd2ViIGZvbnRcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gbm9kZS5vZmZzZXRXaWR0aDtcclxuXHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuZm9udEZhbWlseSA9IGZvbnQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW50ZXJ2YWw7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrRm9udCgpIHtcclxuICAgICAgICAgICAgICAgIC8vIENvbXBhcmUgY3VycmVudCB3aWR0aCB3aXRoIG9yaWdpbmFsIHdpZHRoXHJcbiAgICAgICAgICAgICAgICBpZihub2RlICYmIG5vZGUub2Zmc2V0V2lkdGggIT0gd2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICArK2xvYWRlZEZvbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBhbGwgZm9udHMgaGF2ZSBiZWVuIGxvYWRlZFxyXG4gICAgICAgICAgICAgICAgaWYobG9hZGVkRm9udHMgPj0gZm9udHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGxvYWRlZEZvbnRzID09IGZvbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZighY2hlY2tGb250KCkpIHtcclxuICAgICAgICAgICAgICAgIGludGVydmFsID0gc2V0SW50ZXJ2YWwoY2hlY2tGb250LCA1MCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KShmb250c1tpXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQge3dhaXRGb3JXZWJmb250c307Il0sInNvdXJjZVJvb3QiOiIifQ==