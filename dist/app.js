!function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=14)}([function(t,e,i){(function(e){t.exports=function t(e,i,r){function n(o,a){if(!i[o]){if(!e[o]){if(s)return s(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var l=i[o]={exports:{}};e[o][0].call(l.exports,(function(t){return n(e[o][1][t]||t)}),l,l.exports,t,e,i,r)}return i[o].exports}for(var s=!1,o=0;o<r.length;o++)n(r[o]);return n}({1:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),s=t("../geometry/Vector"),o=t("../core/Sleeping"),a=(t("../render/Render"),t("../core/Common")),h=t("../geometry/Bounds"),l=t("../geometry/Axes");!function(){r._inertiaScale=4,r._nextCollidingGroupId=1,r._nextNonCollidingGroupId=-1,r._nextCategory=1,r.create=function(e){var i={id:a.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:n.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0},lineWidth:0}},r=a.extend(i,e);return t(r,e),r},r.nextGroup=function(t){return t?r._nextNonCollidingGroupId--:r._nextCollidingGroupId++},r.nextCategory=function(){return r._nextCategory=r._nextCategory<<1,r._nextCategory};var t=function(t,e){e=e||{},r.set(t,{bounds:t.bounds||h.create(t.vertices),positionPrev:t.positionPrev||s.clone(t.position),anglePrev:t.anglePrev||t.angle,vertices:t.vertices,parts:t.parts||[t],isStatic:t.isStatic,isSleeping:t.isSleeping,parent:t.parent||t}),n.rotate(t.vertices,t.angle,t.position),l.rotate(t.axes,t.angle),h.update(t.bounds,t.vertices,t.velocity),r.set(t,{axes:e.axes||t.axes,area:e.area||t.area,mass:e.mass||t.mass,inertia:e.inertia||t.inertia});var i=t.isStatic?"#2e2b44":a.choose(["#006BA6","#0496FF","#FFBC42","#D81159","#8F2D56"]);t.render.fillStyle=t.render.fillStyle||i,t.render.strokeStyle=t.render.strokeStyle||"#000",t.render.sprite.xOffset+=-(t.bounds.min.x-t.position.x)/(t.bounds.max.x-t.bounds.min.x),t.render.sprite.yOffset+=-(t.bounds.min.y-t.position.y)/(t.bounds.max.y-t.bounds.min.y)};r.set=function(t,e,i){var n;for(n in"string"==typeof e&&(n=e,(e={})[n]=i),e)if(i=e[n],e.hasOwnProperty(n))switch(n){case"isStatic":r.setStatic(t,i);break;case"isSleeping":o.set(t,i);break;case"mass":r.setMass(t,i);break;case"density":r.setDensity(t,i);break;case"inertia":r.setInertia(t,i);break;case"vertices":r.setVertices(t,i);break;case"position":r.setPosition(t,i);break;case"angle":r.setAngle(t,i);break;case"velocity":r.setVelocity(t,i);break;case"angularVelocity":r.setAngularVelocity(t,i);break;case"parts":r.setParts(t,i);break;default:t[n]=i}},r.setStatic=function(t,e){for(var i=0;i<t.parts.length;i++){var r=t.parts[i];r.isStatic=e,e?(r._original={restitution:r.restitution,friction:r.friction,mass:r.mass,inertia:r.inertia,density:r.density,inverseMass:r.inverseMass,inverseInertia:r.inverseInertia},r.restitution=0,r.friction=1,r.mass=r.inertia=r.density=1/0,r.inverseMass=r.inverseInertia=0,r.positionPrev.x=r.position.x,r.positionPrev.y=r.position.y,r.anglePrev=r.angle,r.angularVelocity=0,r.speed=0,r.angularSpeed=0,r.motion=0):r._original&&(r.restitution=r._original.restitution,r.friction=r._original.friction,r.mass=r._original.mass,r.inertia=r._original.inertia,r.density=r._original.density,r.inverseMass=r._original.inverseMass,r.inverseInertia=r._original.inverseInertia,delete r._original)}},r.setMass=function(t,e){var i=t.inertia/(t.mass/6);t.inertia=i*(e/6),t.inverseInertia=1/t.inertia,t.mass=e,t.inverseMass=1/t.mass,t.density=t.mass/t.area},r.setDensity=function(t,e){r.setMass(t,e*t.area),t.density=e},r.setInertia=function(t,e){t.inertia=e,t.inverseInertia=1/t.inertia},r.setVertices=function(t,e){e[0].body===t?t.vertices=e:t.vertices=n.create(e,t),t.axes=l.fromVertices(t.vertices),t.area=n.area(t.vertices),r.setMass(t,t.density*t.area);var i=n.centre(t.vertices);n.translate(t.vertices,i,-1),r.setInertia(t,r._inertiaScale*n.inertia(t.vertices,t.mass)),n.translate(t.vertices,t.position),h.update(t.bounds,t.vertices,t.velocity)},r.setParts=function(t,e,i){var s;for(e=e.slice(0),t.parts.length=0,t.parts.push(t),t.parent=t,s=0;s<e.length;s++){var o=e[s];o!==t&&(o.parent=t,t.parts.push(o))}if(1!==t.parts.length){if(i=void 0===i||i){var a=[];for(s=0;s<e.length;s++)a=a.concat(e[s].vertices);n.clockwiseSort(a);var h=n.hull(a),l=n.centre(h);r.setVertices(t,h),n.translate(t.vertices,l)}var u=r._totalProperties(t);t.area=u.area,t.parent=t,t.position.x=u.centre.x,t.position.y=u.centre.y,t.positionPrev.x=u.centre.x,t.positionPrev.y=u.centre.y,r.setMass(t,u.mass),r.setInertia(t,u.inertia),r.setPosition(t,u.centre)}},r.setPosition=function(t,e){var i=s.sub(e,t.position);t.positionPrev.x+=i.x,t.positionPrev.y+=i.y;for(var r=0;r<t.parts.length;r++){var o=t.parts[r];o.position.x+=i.x,o.position.y+=i.y,n.translate(o.vertices,i),h.update(o.bounds,o.vertices,t.velocity)}},r.setAngle=function(t,e){var i=e-t.angle;t.anglePrev+=i;for(var r=0;r<t.parts.length;r++){var o=t.parts[r];o.angle+=i,n.rotate(o.vertices,i,t.position),l.rotate(o.axes,i),h.update(o.bounds,o.vertices,t.velocity),r>0&&s.rotateAbout(o.position,i,t.position,o.position)}},r.setVelocity=function(t,e){t.positionPrev.x=t.position.x-e.x,t.positionPrev.y=t.position.y-e.y,t.velocity.x=e.x,t.velocity.y=e.y,t.speed=s.magnitude(t.velocity)},r.setAngularVelocity=function(t,e){t.anglePrev=t.angle-e,t.angularVelocity=e,t.angularSpeed=Math.abs(t.angularVelocity)},r.translate=function(t,e){r.setPosition(t,s.add(t.position,e))},r.rotate=function(t,e,i){if(i){var n=Math.cos(e),s=Math.sin(e),o=t.position.x-i.x,a=t.position.y-i.y;r.setPosition(t,{x:i.x+(o*n-a*s),y:i.y+(o*s+a*n)}),r.setAngle(t,t.angle+e)}else r.setAngle(t,t.angle+e)},r.scale=function(t,e,i,s){var o=0,a=0;s=s||t.position;for(var u=0;u<t.parts.length;u++){var c=t.parts[u];n.scale(c.vertices,e,i,s),c.axes=l.fromVertices(c.vertices),c.area=n.area(c.vertices),r.setMass(c,t.density*c.area),n.translate(c.vertices,{x:-c.position.x,y:-c.position.y}),r.setInertia(c,r._inertiaScale*n.inertia(c.vertices,c.mass)),n.translate(c.vertices,{x:c.position.x,y:c.position.y}),u>0&&(o+=c.area,a+=c.inertia),c.position.x=s.x+(c.position.x-s.x)*e,c.position.y=s.y+(c.position.y-s.y)*i,h.update(c.bounds,c.vertices,t.velocity)}t.parts.length>1&&(t.area=o,t.isStatic||(r.setMass(t,t.density*o),r.setInertia(t,a))),t.circleRadius&&(e===i?t.circleRadius*=e:t.circleRadius=null)},r.update=function(t,e,i,r){var o=Math.pow(e*i*t.timeScale,2),a=1-t.frictionAir*i*t.timeScale,u=t.position.x-t.positionPrev.x,c=t.position.y-t.positionPrev.y;t.velocity.x=u*a*r+t.force.x/t.mass*o,t.velocity.y=c*a*r+t.force.y/t.mass*o,t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.position.x+=t.velocity.x,t.position.y+=t.velocity.y,t.angularVelocity=(t.angle-t.anglePrev)*a*r+t.torque/t.inertia*o,t.anglePrev=t.angle,t.angle+=t.angularVelocity,t.speed=s.magnitude(t.velocity),t.angularSpeed=Math.abs(t.angularVelocity);for(var d=0;d<t.parts.length;d++){var p=t.parts[d];n.translate(p.vertices,t.velocity),d>0&&(p.position.x+=t.velocity.x,p.position.y+=t.velocity.y),0!==t.angularVelocity&&(n.rotate(p.vertices,t.angularVelocity,t.position),l.rotate(p.axes,t.angularVelocity),d>0&&s.rotateAbout(p.position,t.angularVelocity,t.position,p.position)),h.update(p.bounds,p.vertices,t.velocity)}},r.applyForce=function(t,e,i){t.force.x+=i.x,t.force.y+=i.y;var r=e.x-t.position.x,n=e.y-t.position.y;t.torque+=r*i.y-n*i.x},r._totalProperties=function(t){for(var e={mass:0,area:0,inertia:0,centre:{x:0,y:0}},i=1===t.parts.length?0:1;i<t.parts.length;i++){var r=t.parts[i],n=r.mass!==1/0?r.mass:1;e.mass+=n,e.area+=r.area,e.inertia+=r.inertia,e.centre=s.add(e.centre,s.mult(r.position,n))}return e.centre=s.div(e.centre,e.mass),e}}()},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31}],2:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Events"),s=t("../core/Common"),o=t("../geometry/Bounds"),a=t("./Body");r.create=function(t){return s.extend({id:s.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{}},t)},r.setModified=function(t,e,i,n){if(t.isModified=e,i&&t.parent&&r.setModified(t.parent,e,i,n),n)for(var s=0;s<t.composites.length;s++){var o=t.composites[s];r.setModified(o,e,i,n)}},r.add=function(t,e){var i=[].concat(e);n.trigger(t,"beforeAdd",{object:e});for(var o=0;o<i.length;o++){var a=i[o];switch(a.type){case"body":if(a.parent!==a){s.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}r.addBody(t,a);break;case"constraint":r.addConstraint(t,a);break;case"composite":r.addComposite(t,a);break;case"mouseConstraint":r.addConstraint(t,a.constraint)}}return n.trigger(t,"afterAdd",{object:e}),t},r.remove=function(t,e,i){var s=[].concat(e);n.trigger(t,"beforeRemove",{object:e});for(var o=0;o<s.length;o++){var a=s[o];switch(a.type){case"body":r.removeBody(t,a,i);break;case"constraint":r.removeConstraint(t,a,i);break;case"composite":r.removeComposite(t,a,i);break;case"mouseConstraint":r.removeConstraint(t,a.constraint)}}return n.trigger(t,"afterRemove",{object:e}),t},r.addComposite=function(t,e){return t.composites.push(e),e.parent=t,r.setModified(t,!0,!0,!1),t},r.removeComposite=function(t,e,i){var n=s.indexOf(t.composites,e);if(-1!==n&&(r.removeCompositeAt(t,n),r.setModified(t,!0,!0,!1)),i)for(var o=0;o<t.composites.length;o++)r.removeComposite(t.composites[o],e,!0);return t},r.removeCompositeAt=function(t,e){return t.composites.splice(e,1),r.setModified(t,!0,!0,!1),t},r.addBody=function(t,e){return t.bodies.push(e),r.setModified(t,!0,!0,!1),t},r.removeBody=function(t,e,i){var n=s.indexOf(t.bodies,e);if(-1!==n&&(r.removeBodyAt(t,n),r.setModified(t,!0,!0,!1)),i)for(var o=0;o<t.composites.length;o++)r.removeBody(t.composites[o],e,!0);return t},r.removeBodyAt=function(t,e){return t.bodies.splice(e,1),r.setModified(t,!0,!0,!1),t},r.addConstraint=function(t,e){return t.constraints.push(e),r.setModified(t,!0,!0,!1),t},r.removeConstraint=function(t,e,i){var n=s.indexOf(t.constraints,e);if(-1!==n&&r.removeConstraintAt(t,n),i)for(var o=0;o<t.composites.length;o++)r.removeConstraint(t.composites[o],e,!0);return t},r.removeConstraintAt=function(t,e){return t.constraints.splice(e,1),r.setModified(t,!0,!0,!1),t},r.clear=function(t,e,i){if(i)for(var n=0;n<t.composites.length;n++)r.clear(t.composites[n],e,!0);return e?t.bodies=t.bodies.filter((function(t){return t.isStatic})):t.bodies.length=0,t.constraints.length=0,t.composites.length=0,r.setModified(t,!0,!0,!1),t},r.allBodies=function(t){for(var e=[].concat(t.bodies),i=0;i<t.composites.length;i++)e=e.concat(r.allBodies(t.composites[i]));return e},r.allConstraints=function(t){for(var e=[].concat(t.constraints),i=0;i<t.composites.length;i++)e=e.concat(r.allConstraints(t.composites[i]));return e},r.allComposites=function(t){for(var e=[].concat(t.composites),i=0;i<t.composites.length;i++)e=e.concat(r.allComposites(t.composites[i]));return e},r.get=function(t,e,i){var n,s;switch(i){case"body":n=r.allBodies(t);break;case"constraint":n=r.allConstraints(t);break;case"composite":n=r.allComposites(t).concat(t)}return n?0===(s=n.filter((function(t){return t.id.toString()===e.toString()}))).length?null:s[0]:null},r.move=function(t,e,i){return r.remove(t,e),r.add(i,e),t},r.rebase=function(t){for(var e=r.allBodies(t).concat(r.allConstraints(t)).concat(r.allComposites(t)),i=0;i<e.length;i++)e[i].id=s.nextId();return r.setModified(t,!0,!0,!1),t},r.translate=function(t,e,i){for(var n=i?r.allBodies(t):t.bodies,s=0;s<n.length;s++)a.translate(n[s],e);return r.setModified(t,!0,!0,!1),t},r.rotate=function(t,e,i,n){for(var s=Math.cos(e),o=Math.sin(e),h=n?r.allBodies(t):t.bodies,l=0;l<h.length;l++){var u=h[l],c=u.position.x-i.x,d=u.position.y-i.y;a.setPosition(u,{x:i.x+(c*s-d*o),y:i.y+(c*o+d*s)}),a.rotate(u,e)}return r.setModified(t,!0,!0,!1),t},r.scale=function(t,e,i,n,s){for(var o=s?r.allBodies(t):t.bodies,h=0;h<o.length;h++){var l=o[h],u=l.position.x-n.x,c=l.position.y-n.y;a.setPosition(l,{x:n.x+u*e,y:n.y+c*i}),a.scale(l,e,i)}return r.setModified(t,!0,!0,!1),t},r.bounds=function(t){for(var e=r.allBodies(t),i=[],n=0;n<e.length;n+=1){var s=e[n];i.push(s.bounds.min,s.bounds.max)}return o.create(i)}},{"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"./Body":1}],3:[function(t,e,i){var r={};e.exports=r;var n=t("./Composite"),s=(t("../constraint/Constraint"),t("../core/Common"));r.create=function(t){var e=n.create();return s.extend(e,{label:"World",gravity:{x:0,y:1,scale:.001},bounds:{min:{x:-1/0,y:-1/0},max:{x:1/0,y:1/0}}},t)}},{"../constraint/Constraint":12,"../core/Common":14,"./Composite":2}],4:[function(t,e,i){var r={};e.exports=r,r.create=function(t){return{id:r.id(t),vertex:t,normalImpulse:0,tangentImpulse:0}},r.id=function(t){return t.body.id+"_"+t.index}},{}],5:[function(t,e,i){var r={};e.exports=r;var n=t("./SAT"),s=t("./Pair"),o=t("../geometry/Bounds");r.collisions=function(t,e){for(var i=[],a=e.pairs.table,h=0;h<t.length;h++){var l=t[h][0],u=t[h][1];if((!l.isStatic&&!l.isSleeping||!u.isStatic&&!u.isSleeping)&&r.canCollide(l.collisionFilter,u.collisionFilter)&&o.overlaps(l.bounds,u.bounds))for(var c=l.parts.length>1?1:0;c<l.parts.length;c++)for(var d=l.parts[c],p=u.parts.length>1?1:0;p<u.parts.length;p++){var f=u.parts[p];if(d===l&&f===u||o.overlaps(d.bounds,f.bounds)){var m,y=a[s.id(d,f)];m=y&&y.isActive?y.collision:null;var v=n.collides(d,f,m);v.collided&&i.push(v)}}}return i},r.canCollide=function(t,e){return t.group===e.group&&0!==t.group?t.group>0:0!=(t.mask&e.category)&&0!=(e.mask&t.category)}},{"../geometry/Bounds":26,"./Pair":7,"./SAT":11}],6:[function(t,e,i){var r={};e.exports=r;var n=t("./Pair"),s=t("./Detector"),o=t("../core/Common");r.create=function(t){var e={controller:r,detector:s.collisions,buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48};return o.extend(e,t)},r.update=function(t,e,i,n){var s,o,a,h,l,u=i.world,c=t.buckets,d=!1;for(s=0;s<e.length;s++){var p=e[s];if((!p.isSleeping||n)&&!(p.bounds.max.x<u.bounds.min.x||p.bounds.min.x>u.bounds.max.x||p.bounds.max.y<u.bounds.min.y||p.bounds.min.y>u.bounds.max.y)){var f=r._getRegion(t,p);if(!p.region||f.id!==p.region.id||n){p.region&&!n||(p.region=f);var m=r._regionUnion(f,p.region);for(o=m.startCol;o<=m.endCol;o++)for(a=m.startRow;a<=m.endRow;a++){h=c[l=r._getBucketId(o,a)];var y=o>=f.startCol&&o<=f.endCol&&a>=f.startRow&&a<=f.endRow,v=o>=p.region.startCol&&o<=p.region.endCol&&a>=p.region.startRow&&a<=p.region.endRow;!y&&v&&v&&h&&r._bucketRemoveBody(t,h,p),(p.region===f||y&&!v||n)&&(h||(h=r._createBucket(c,l)),r._bucketAddBody(t,h,p))}p.region=f,d=!0}}}d&&(t.pairsList=r._createActivePairsList(t))},r.clear=function(t){t.buckets={},t.pairs={},t.pairsList=[]},r._regionUnion=function(t,e){var i=Math.min(t.startCol,e.startCol),n=Math.max(t.endCol,e.endCol),s=Math.min(t.startRow,e.startRow),o=Math.max(t.endRow,e.endRow);return r._createRegion(i,n,s,o)},r._getRegion=function(t,e){var i=e.bounds,n=Math.floor(i.min.x/t.bucketWidth),s=Math.floor(i.max.x/t.bucketWidth),o=Math.floor(i.min.y/t.bucketHeight),a=Math.floor(i.max.y/t.bucketHeight);return r._createRegion(n,s,o,a)},r._createRegion=function(t,e,i,r){return{id:t+","+e+","+i+","+r,startCol:t,endCol:e,startRow:i,endRow:r}},r._getBucketId=function(t,e){return"C"+t+"R"+e},r._createBucket=function(t,e){return t[e]=[]},r._bucketAddBody=function(t,e,i){for(var r=0;r<e.length;r++){var s=e[r];if(!(i.id===s.id||i.isStatic&&s.isStatic)){var o=n.id(i,s),a=t.pairs[o];a?a[2]+=1:t.pairs[o]=[i,s,1]}}e.push(i)},r._bucketRemoveBody=function(t,e,i){e.splice(o.indexOf(e,i),1);for(var r=0;r<e.length;r++){var s=e[r],a=n.id(i,s),h=t.pairs[a];h&&(h[2]-=1)}},r._createActivePairsList=function(t){var e,i,r=[];e=o.keys(t.pairs);for(var n=0;n<e.length;n++)(i=t.pairs[e[n]])[2]>0?r.push(i):delete t.pairs[e[n]];return r}},{"../core/Common":14,"./Detector":5,"./Pair":7}],7:[function(t,e,i){var r={};e.exports=r;var n=t("./Contact");r.create=function(t,e){var i=t.bodyA,n=t.bodyB,s=t.parentA,o=t.parentB,a={id:r.id(i,n),bodyA:i,bodyB:n,contacts:{},activeContacts:[],separation:0,isActive:!0,isSensor:i.isSensor||n.isSensor,timeCreated:e,timeUpdated:e,inverseMass:s.inverseMass+o.inverseMass,friction:Math.min(s.friction,o.friction),frictionStatic:Math.max(s.frictionStatic,o.frictionStatic),restitution:Math.max(s.restitution,o.restitution),slop:Math.max(s.slop,o.slop)};return r.update(a,t,e),a},r.update=function(t,e,i){var s=t.contacts,o=e.supports,a=t.activeContacts,h=e.parentA,l=e.parentB;if(t.collision=e,t.inverseMass=h.inverseMass+l.inverseMass,t.friction=Math.min(h.friction,l.friction),t.frictionStatic=Math.max(h.frictionStatic,l.frictionStatic),t.restitution=Math.max(h.restitution,l.restitution),t.slop=Math.max(h.slop,l.slop),a.length=0,e.collided){for(var u=0;u<o.length;u++){var c=o[u],d=n.id(c),p=s[d];p?a.push(p):a.push(s[d]=n.create(c))}t.separation=e.depth,r.setActive(t,!0,i)}else!0===t.isActive&&r.setActive(t,!1,i)},r.setActive=function(t,e,i){e?(t.isActive=!0,t.timeUpdated=i):(t.isActive=!1,t.activeContacts.length=0)},r.id=function(t,e){return t.id<e.id?"A"+t.id+"B"+e.id:"A"+e.id+"B"+t.id}},{"./Contact":4}],8:[function(t,e,i){var r={};e.exports=r;var n=t("./Pair"),s=t("../core/Common");r._pairMaxIdleLife=1e3,r.create=function(t){return s.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},t)},r.update=function(t,e,i){var r,o,a,h,l=t.list,u=t.table,c=t.collisionStart,d=t.collisionEnd,p=t.collisionActive,f=[];for(c.length=0,d.length=0,p.length=0,h=0;h<e.length;h++)(r=e[h]).collided&&(o=n.id(r.bodyA,r.bodyB),f.push(o),(a=u[o])?(a.isActive?p.push(a):c.push(a),n.update(a,r,i)):(a=n.create(r,i),u[o]=a,c.push(a),l.push(a)));for(h=0;h<l.length;h++)(a=l[h]).isActive&&-1===s.indexOf(f,a.id)&&(n.setActive(a,!1,i),d.push(a))},r.removeOld=function(t,e){var i,n,s,o,a=t.list,h=t.table,l=[];for(o=0;o<a.length;o++)(n=(i=a[o]).collision).bodyA.isSleeping||n.bodyB.isSleeping?i.timeUpdated=e:e-i.timeUpdated>r._pairMaxIdleLife&&l.push(o);for(o=0;o<l.length;o++)delete h[(i=a[s=l[o]-o]).id],a.splice(s,1)},r.clear=function(t){return t.table={},t.list.length=0,t.collisionStart.length=0,t.collisionActive.length=0,t.collisionEnd.length=0,t}},{"../core/Common":14,"./Pair":7}],9:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),s=t("./SAT"),o=t("../geometry/Bounds"),a=t("../factory/Bodies"),h=t("../geometry/Vertices");r.collides=function(t,e){for(var i=[],r=0;r<e.length;r++){var n=e[r];if(o.overlaps(n.bounds,t.bounds))for(var a=1===n.parts.length?0:1;a<n.parts.length;a++){var h=n.parts[a];if(o.overlaps(h.bounds,t.bounds)){var l=s.collides(h,t);if(l.collided){i.push(l);break}}}}return i},r.ray=function(t,e,i,s){s=s||1e-100;for(var o=n.angle(e,i),h=n.magnitude(n.sub(e,i)),l=.5*(i.x+e.x),u=.5*(i.y+e.y),c=a.rectangle(l,u,h,s,{angle:o}),d=r.collides(c,t),p=0;p<d.length;p+=1){var f=d[p];f.body=f.bodyB=f.bodyA}return d},r.region=function(t,e,i){for(var r=[],n=0;n<t.length;n++){var s=t[n],a=o.overlaps(s.bounds,e);(a&&!i||!a&&i)&&r.push(s)}return r},r.point=function(t,e){for(var i=[],r=0;r<t.length;r++){var n=t[r];if(o.contains(n.bounds,e))for(var s=1===n.parts.length?0:1;s<n.parts.length;s++){var a=n.parts[s];if(o.contains(a.bounds,e)&&h.contains(a.vertices,e)){i.push(n);break}}}return i}},{"../factory/Bodies":23,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"./SAT":11}],10:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),s=t("../geometry/Vector"),o=t("../core/Common"),a=t("../geometry/Bounds");r._restingThresh=4,r._restingThreshTangent=6,r._positionDampen=.9,r._positionWarming=.8,r._frictionNormalMultiplier=5,r.preSolvePosition=function(t){var e,i,r;for(e=0;e<t.length;e++)(i=t[e]).isActive&&(r=i.activeContacts.length,i.collision.parentA.totalContacts+=r,i.collision.parentB.totalContacts+=r)},r.solvePosition=function(t,e){var i,n,o,a,h,l,u,c,d,p=s._temp[0],f=s._temp[1],m=s._temp[2],y=s._temp[3];for(i=0;i<t.length;i++)(n=t[i]).isActive&&!n.isSensor&&(a=(o=n.collision).parentA,h=o.parentB,l=o.normal,u=s.sub(s.add(h.positionImpulse,h.position,p),s.add(a.positionImpulse,s.sub(h.position,o.penetration,f),m),y),n.separation=s.dot(l,u));for(i=0;i<t.length;i++)(n=t[i]).isActive&&!n.isSensor&&(a=(o=n.collision).parentA,h=o.parentB,l=o.normal,d=(n.separation-n.slop)*e,(a.isStatic||h.isStatic)&&(d*=2),a.isStatic||a.isSleeping||(c=r._positionDampen/a.totalContacts,a.positionImpulse.x+=l.x*d*c,a.positionImpulse.y+=l.y*d*c),h.isStatic||h.isSleeping||(c=r._positionDampen/h.totalContacts,h.positionImpulse.x-=l.x*d*c,h.positionImpulse.y-=l.y*d*c))},r.postSolvePosition=function(t){for(var e=0;e<t.length;e++){var i=t[e];if(i.totalContacts=0,0!==i.positionImpulse.x||0!==i.positionImpulse.y){for(var o=0;o<i.parts.length;o++){var h=i.parts[o];n.translate(h.vertices,i.positionImpulse),a.update(h.bounds,h.vertices,i.velocity),h.position.x+=i.positionImpulse.x,h.position.y+=i.positionImpulse.y}i.positionPrev.x+=i.positionImpulse.x,i.positionPrev.y+=i.positionImpulse.y,s.dot(i.positionImpulse,i.velocity)<0?(i.positionImpulse.x=0,i.positionImpulse.y=0):(i.positionImpulse.x*=r._positionWarming,i.positionImpulse.y*=r._positionWarming)}}},r.preSolveVelocity=function(t){var e,i,r,n,o,a,h,l,u,c,d,p,f,m,y=s._temp[0],v=s._temp[1];for(e=0;e<t.length;e++)if((r=t[e]).isActive&&!r.isSensor)for(n=r.activeContacts,a=(o=r.collision).parentA,h=o.parentB,l=o.normal,u=o.tangent,i=0;i<n.length;i++)d=(c=n[i]).vertex,p=c.normalImpulse,f=c.tangentImpulse,0===p&&0===f||(y.x=l.x*p+u.x*f,y.y=l.y*p+u.y*f,a.isStatic||a.isSleeping||(m=s.sub(d,a.position,v),a.positionPrev.x+=y.x*a.inverseMass,a.positionPrev.y+=y.y*a.inverseMass,a.anglePrev+=s.cross(m,y)*a.inverseInertia),h.isStatic||h.isSleeping||(m=s.sub(d,h.position,v),h.positionPrev.x-=y.x*h.inverseMass,h.positionPrev.y-=y.y*h.inverseMass,h.anglePrev-=s.cross(m,y)*h.inverseInertia))},r.solveVelocity=function(t,e){for(var i=e*e,n=s._temp[0],a=s._temp[1],h=s._temp[2],l=s._temp[3],u=s._temp[4],c=s._temp[5],d=0;d<t.length;d++){var p=t[d];if(p.isActive&&!p.isSensor){var f=p.collision,m=f.parentA,y=f.parentB,v=f.normal,g=f.tangent,x=p.activeContacts,b=1/x.length;m.velocity.x=m.position.x-m.positionPrev.x,m.velocity.y=m.position.y-m.positionPrev.y,y.velocity.x=y.position.x-y.positionPrev.x,y.velocity.y=y.position.y-y.positionPrev.y,m.angularVelocity=m.angle-m.anglePrev,y.angularVelocity=y.angle-y.anglePrev;for(var w=0;w<x.length;w++){var _=x[w],S=_.vertex,C=s.sub(S,m.position,a),T=s.sub(S,y.position,h),I=s.add(m.velocity,s.mult(s.perp(C),m.angularVelocity),l),E=s.add(y.velocity,s.mult(s.perp(T),y.angularVelocity),u),A=s.sub(I,E,c),M=s.dot(v,A),P=s.dot(g,A),k=Math.abs(P),B=o.sign(P),O=(1+p.restitution)*M,R=o.clamp(p.separation+M,0,1)*r._frictionNormalMultiplier,F=P,D=1/0;k>p.friction*p.frictionStatic*R*i&&(D=k,F=o.clamp(p.friction*B*i,-D,D));var L=s.cross(C,v),U=s.cross(T,v),N=b/(m.inverseMass+y.inverseMass+m.inverseInertia*L*L+y.inverseInertia*U*U);if(O*=N,F*=N,M<0&&M*M>r._restingThresh*i)_.normalImpulse=0;else{var V=_.normalImpulse;_.normalImpulse=Math.min(_.normalImpulse+O,0),O=_.normalImpulse-V}if(P*P>r._restingThreshTangent*i)_.tangentImpulse=0;else{var X=_.tangentImpulse;_.tangentImpulse=o.clamp(_.tangentImpulse+F,-D,D),F=_.tangentImpulse-X}n.x=v.x*O+g.x*F,n.y=v.y*O+g.y*F,m.isStatic||m.isSleeping||(m.positionPrev.x+=n.x*m.inverseMass,m.positionPrev.y+=n.y*m.inverseMass,m.anglePrev+=s.cross(C,n)*m.inverseInertia),y.isStatic||y.isSleeping||(y.positionPrev.x-=n.x*y.inverseMass,y.positionPrev.y-=n.y*y.inverseMass,y.anglePrev-=s.cross(T,n)*y.inverseInertia)}}}}},{"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],11:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),s=t("../geometry/Vector");r.collides=function(t,e,i){var o,a,h,l,u=!1;if(i){var c=t.parent,d=e.parent,p=c.speed*c.speed+c.angularSpeed*c.angularSpeed+d.speed*d.speed+d.angularSpeed*d.angularSpeed;u=i&&i.collided&&p<.2,l=i}else l={collided:!1,bodyA:t,bodyB:e};if(i&&u){var f=l.axisBody,m=f===t?e:t,y=[f.axes[i.axisNumber]];if(h=r._overlapAxes(f.vertices,m.vertices,y),l.reused=!0,h.overlap<=0)return l.collided=!1,l}else{if((o=r._overlapAxes(t.vertices,e.vertices,t.axes)).overlap<=0)return l.collided=!1,l;if((a=r._overlapAxes(e.vertices,t.vertices,e.axes)).overlap<=0)return l.collided=!1,l;o.overlap<a.overlap?(h=o,l.axisBody=t):(h=a,l.axisBody=e),l.axisNumber=h.axisNumber}l.bodyA=t.id<e.id?t:e,l.bodyB=t.id<e.id?e:t,l.collided=!0,l.depth=h.overlap,l.parentA=l.bodyA.parent,l.parentB=l.bodyB.parent,t=l.bodyA,e=l.bodyB,s.dot(h.axis,s.sub(e.position,t.position))<0?l.normal={x:h.axis.x,y:h.axis.y}:l.normal={x:-h.axis.x,y:-h.axis.y},l.tangent=s.perp(l.normal),l.penetration=l.penetration||{},l.penetration.x=l.normal.x*l.depth,l.penetration.y=l.normal.y*l.depth;var v=r._findSupports(t,e,l.normal),g=[];if(n.contains(t.vertices,v[0])&&g.push(v[0]),n.contains(t.vertices,v[1])&&g.push(v[1]),g.length<2){var x=r._findSupports(e,t,s.neg(l.normal));n.contains(e.vertices,x[0])&&g.push(x[0]),g.length<2&&n.contains(e.vertices,x[1])&&g.push(x[1])}return g.length<1&&(g=[v[0]]),l.supports=g,l},r._overlapAxes=function(t,e,i){for(var n,o,a=s._temp[0],h=s._temp[1],l={overlap:Number.MAX_VALUE},u=0;u<i.length;u++){if(o=i[u],r._projectToAxis(a,t,o),r._projectToAxis(h,e,o),(n=Math.min(a.max-h.min,h.max-a.min))<=0)return l.overlap=n,l;n<l.overlap&&(l.overlap=n,l.axis=o,l.axisNumber=u)}return l},r._projectToAxis=function(t,e,i){for(var r=s.dot(e[0],i),n=r,o=1;o<e.length;o+=1){var a=s.dot(e[o],i);a>n?n=a:a<r&&(r=a)}t.min=r,t.max=n},r._findSupports=function(t,e,i){for(var r,n,o,a,h=Number.MAX_VALUE,l=s._temp[0],u=e.vertices,c=t.position,d=0;d<u.length;d++)n=u[d],l.x=n.x-c.x,l.y=n.y-c.y,(r=-s.dot(i,l))<h&&(h=r,o=n);return n=u[o.index-1>=0?o.index-1:u.length-1],l.x=n.x-c.x,l.y=n.y-c.y,h=-s.dot(i,l),a=n,n=u[(o.index+1)%u.length],l.x=n.x-c.x,l.y=n.y-c.y,(r=-s.dot(i,l))<h&&(a=n),[o,a]}},{"../geometry/Vector":28,"../geometry/Vertices":29}],12:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),s=t("../geometry/Vector"),o=t("../core/Sleeping"),a=t("../geometry/Bounds"),h=t("../geometry/Axes"),l=t("../core/Common");r._warming=.4,r._torqueDampen=1,r._minLength=1e-6,r.create=function(t){var e=t;e.bodyA&&!e.pointA&&(e.pointA={x:0,y:0}),e.bodyB&&!e.pointB&&(e.pointB={x:0,y:0});var i=e.bodyA?s.add(e.bodyA.position,e.pointA):e.pointA,r=e.bodyB?s.add(e.bodyB.position,e.pointB):e.pointB,n=s.magnitude(s.sub(i,r));e.length=void 0!==e.length?e.length:n,e.id=e.id||l.nextId(),e.label=e.label||"Constraint",e.type="constraint",e.stiffness=e.stiffness||(e.length>0?1:.7),e.damping=e.damping||0,e.angularStiffness=e.angularStiffness||0,e.angleA=e.bodyA?e.bodyA.angle:e.angleA,e.angleB=e.bodyB?e.bodyB.angle:e.angleB,e.plugin={};var o={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===e.length&&e.stiffness>.1?(o.type="pin",o.anchors=!1):e.stiffness<.9&&(o.type="spring"),e.render=l.extend(o,e.render),e},r.preSolveAll=function(t){for(var e=0;e<t.length;e+=1){var i=t[e],r=i.constraintImpulse;i.isStatic||0===r.x&&0===r.y&&0===r.angle||(i.position.x+=r.x,i.position.y+=r.y,i.angle+=r.angle)}},r.solveAll=function(t,e){for(var i=0;i<t.length;i+=1){var n=t[i],s=!n.bodyA||n.bodyA&&n.bodyA.isStatic,o=!n.bodyB||n.bodyB&&n.bodyB.isStatic;(s||o)&&r.solve(t[i],e)}for(i=0;i<t.length;i+=1)s=!(n=t[i]).bodyA||n.bodyA&&n.bodyA.isStatic,o=!n.bodyB||n.bodyB&&n.bodyB.isStatic,s||o||r.solve(t[i],e)},r.solve=function(t,e){var i=t.bodyA,n=t.bodyB,o=t.pointA,a=t.pointB;if(i||n){i&&!i.isStatic&&(s.rotate(o,i.angle-t.angleA,o),t.angleA=i.angle),n&&!n.isStatic&&(s.rotate(a,n.angle-t.angleB,a),t.angleB=n.angle);var h=o,l=a;if(i&&(h=s.add(i.position,o)),n&&(l=s.add(n.position,a)),h&&l){var u=s.sub(h,l),c=s.magnitude(u);c<r._minLength&&(c=r._minLength);var d,p,f,m,y,v=(c-t.length)/c,g=t.stiffness<1?t.stiffness*e:t.stiffness,x=s.mult(u,v*g),b=(i?i.inverseMass:0)+(n?n.inverseMass:0),w=b+((i?i.inverseInertia:0)+(n?n.inverseInertia:0));if(t.damping){var _=s.create();f=s.div(u,c),y=s.sub(n&&s.sub(n.position,n.positionPrev)||_,i&&s.sub(i.position,i.positionPrev)||_),m=s.dot(f,y)}i&&!i.isStatic&&(p=i.inverseMass/b,i.constraintImpulse.x-=x.x*p,i.constraintImpulse.y-=x.y*p,i.position.x-=x.x*p,i.position.y-=x.y*p,t.damping&&(i.positionPrev.x-=t.damping*f.x*m*p,i.positionPrev.y-=t.damping*f.y*m*p),d=s.cross(o,x)/w*r._torqueDampen*i.inverseInertia*(1-t.angularStiffness),i.constraintImpulse.angle-=d,i.angle-=d),n&&!n.isStatic&&(p=n.inverseMass/b,n.constraintImpulse.x+=x.x*p,n.constraintImpulse.y+=x.y*p,n.position.x+=x.x*p,n.position.y+=x.y*p,t.damping&&(n.positionPrev.x+=t.damping*f.x*m*p,n.positionPrev.y+=t.damping*f.y*m*p),d=s.cross(a,x)/w*r._torqueDampen*n.inverseInertia*(1-t.angularStiffness),n.constraintImpulse.angle+=d,n.angle+=d)}}},r.postSolveAll=function(t){for(var e=0;e<t.length;e++){var i=t[e],l=i.constraintImpulse;if(!(i.isStatic||0===l.x&&0===l.y&&0===l.angle)){o.set(i,!1);for(var u=0;u<i.parts.length;u++){var c=i.parts[u];n.translate(c.vertices,l),u>0&&(c.position.x+=l.x,c.position.y+=l.y),0!==l.angle&&(n.rotate(c.vertices,l.angle,i.position),h.rotate(c.axes,l.angle),u>0&&s.rotateAbout(c.position,l.angle,i.position,c.position)),a.update(c.bounds,c.vertices,i.velocity)}l.angle*=r._warming,l.x*=r._warming,l.y*=r._warming}}}},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],13:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),s=t("../core/Sleeping"),o=t("../core/Mouse"),a=t("../core/Events"),h=t("../collision/Detector"),l=t("./Constraint"),u=t("../body/Composite"),c=t("../core/Common"),d=t("../geometry/Bounds");r.create=function(t,e){var i=(t?t.mouse:null)||(e?e.mouse:null);i||(t&&t.render&&t.render.canvas?i=o.create(t.render.canvas):e&&e.element?i=o.create(e.element):(i=o.create(),c.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var n={type:"mouseConstraint",mouse:i,element:null,body:null,constraint:l.create({label:"Mouse Constraint",pointA:i.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},s=c.extend(n,e);return a.on(t,"beforeUpdate",(function(){var e=u.allBodies(t.world);r.update(s,e),r._triggerEvents(s)})),s},r.update=function(t,e){var i=t.mouse,r=t.constraint,o=t.body;if(0===i.button){if(r.bodyB)s.set(r.bodyB,!1),r.pointA=i.position;else for(var l=0;l<e.length;l++)if(o=e[l],d.contains(o.bounds,i.position)&&h.canCollide(o.collisionFilter,t.collisionFilter))for(var u=o.parts.length>1?1:0;u<o.parts.length;u++){var c=o.parts[u];if(n.contains(c.vertices,i.position)){r.pointA=i.position,r.bodyB=t.body=o,r.pointB={x:i.position.x-o.position.x,y:i.position.y-o.position.y},r.angleB=o.angle,s.set(o,!1),a.trigger(t,"startdrag",{mouse:i,body:o});break}}}else r.bodyB=t.body=null,r.pointB=null,o&&a.trigger(t,"enddrag",{mouse:i,body:o})},r._triggerEvents=function(t){var e=t.mouse,i=e.sourceEvents;i.mousemove&&a.trigger(t,"mousemove",{mouse:e}),i.mousedown&&a.trigger(t,"mousedown",{mouse:e}),i.mouseup&&a.trigger(t,"mouseup",{mouse:e}),o.clearSourceEvents(e)}},{"../body/Composite":2,"../collision/Detector":5,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../core/Sleeping":22,"../geometry/Bounds":26,"../geometry/Vertices":29,"./Constraint":12}],14:[function(t,i,r){(function(e){var r={};i.exports=r,function(){r._nextId=0,r._seed=0,r._nowStartTime=+new Date,r.extend=function(t,e){var i,n;"boolean"==typeof e?(i=2,n=e):(i=1,n=!0);for(var s=i;s<arguments.length;s++){var o=arguments[s];if(o)for(var a in o)n&&o[a]&&o[a].constructor===Object?t[a]&&t[a].constructor!==Object?t[a]=o[a]:(t[a]=t[a]||{},r.extend(t[a],n,o[a])):t[a]=o[a]}return t},r.clone=function(t,e){return r.extend({},e,t)},r.keys=function(t){if(Object.keys)return Object.keys(t);var e=[];for(var i in t)e.push(i);return e},r.values=function(t){var e=[];if(Object.keys){for(var i=Object.keys(t),r=0;r<i.length;r++)e.push(t[i[r]]);return e}for(var n in t)e.push(t[n]);return e},r.get=function(t,e,i,r){e=e.split(".").slice(i,r);for(var n=0;n<e.length;n+=1)t=t[e[n]];return t},r.set=function(t,e,i,n,s){var o=e.split(".").slice(n,s);return r.get(t,e,0,-1)[o[o.length-1]]=i,i},r.shuffle=function(t){for(var e=t.length-1;e>0;e--){var i=Math.floor(r.random()*(e+1)),n=t[e];t[e]=t[i],t[i]=n}return t},r.choose=function(t){return t[Math.floor(r.random()*t.length)]},r.isElement=function(t){return"undefined"!=typeof HTMLElement?t instanceof HTMLElement:!!(t&&t.nodeType&&t.nodeName)},r.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)},r.isFunction=function(t){return"function"==typeof t},r.isPlainObject=function(t){return"object"==typeof t&&t.constructor===Object},r.isString=function(t){return"[object String]"===toString.call(t)},r.clamp=function(t,e,i){return t<e?e:t>i?i:t},r.sign=function(t){return t<0?-1:1},r.now=function(){if(window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return new Date-r._nowStartTime},r.random=function(t,e){return e=void 0!==e?e:1,(t=void 0!==t?t:0)+i()*(e-t)};var i=function(){return r._seed=(9301*r._seed+49297)%233280,r._seed/233280};r.colorToNumber=function(t){return 3==(t=t.replace("#","")).length&&(t=t.charAt(0)+t.charAt(0)+t.charAt(1)+t.charAt(1)+t.charAt(2)+t.charAt(2)),parseInt(t,16)},r.logLevel=1,r.log=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.info=function(){console&&r.logLevel>0&&r.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.warn=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.nextId=function(){return r._nextId++},r.indexOf=function(t,e){if(t.indexOf)return t.indexOf(e);for(var i=0;i<t.length;i++)if(t[i]===e)return i;return-1},r.map=function(t,e){if(t.map)return t.map(e);for(var i=[],r=0;r<t.length;r+=1)i.push(e(t[r]));return i},r.topologicalSort=function(t){var e=[],i=[],n=[];for(var s in t)i[s]||n[s]||r._topologicalSort(s,i,n,t,e);return e},r._topologicalSort=function(t,e,i,n,s){var o=n[t]||[];i[t]=!0;for(var a=0;a<o.length;a+=1){var h=o[a];i[h]||e[h]||r._topologicalSort(h,e,i,n,s)}i[t]=!1,e[t]=!0,s.push(t)},r.chain=function(){for(var t=[],e=0;e<arguments.length;e+=1){var i=arguments[e];i._chained?t.push.apply(t,i._chained):t.push(i)}var r=function(){for(var e,i=new Array(arguments.length),r=0,n=arguments.length;r<n;r++)i[r]=arguments[r];for(r=0;r<t.length;r+=1){var s=t[r].apply(e,i);void 0!==s&&(e=s)}return e};return r._chained=t,r},r.chainPathBefore=function(t,e,i){return r.set(t,e,r.chain(i,r.get(t,e)))},r.chainPathAfter=function(t,e,i){return r.set(t,e,r.chain(r.get(t,e),i))},r._requireGlobal=function(i,r){return("undefined"!=typeof window?window[i]:void 0!==e?e[i]:null)||t(r)}}()}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],15:[function(t,e,i){var r={};e.exports=r;var n=t("../body/World"),s=t("./Sleeping"),o=t("../collision/Resolver"),a=t("../render/Render"),h=t("../collision/Pairs"),l=(t("./Metrics"),t("../collision/Grid")),u=t("./Events"),c=t("../body/Composite"),d=t("../constraint/Constraint"),p=t("./Common"),f=t("../body/Body");r.create=function(t,e){e=(e=p.isElement(t)?e:t)||{},((t=p.isElement(t)?t:null)||e.render)&&p.warn("Engine.create: engine.render is deprecated (see docs)");var i={positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},timing:{timestamp:0,timeScale:1},broadphase:{controller:l}},r=p.extend(i,e);if(t||r.render){var s={element:t,controller:a};r.render=p.extend(s,r.render)}return r.render&&r.render.controller&&(r.render=r.render.controller.create(r.render)),r.render&&(r.render.engine=r),r.world=e.world||n.create(r.world),r.pairs=h.create(),r.broadphase=r.broadphase.controller.create(r.broadphase),r.metrics=r.metrics||{extended:!1},r},r.update=function(t,e,i){e=e||1e3/60,i=i||1;var n,a=t.world,l=t.timing,p=t.broadphase,f=[];l.timestamp+=e*l.timeScale;var m={timestamp:l.timestamp};u.trigger(t,"beforeUpdate",m);var y=c.allBodies(a),v=c.allConstraints(a);for(t.enableSleeping&&s.update(y,l.timeScale),r._bodiesApplyGravity(y,a.gravity),r._bodiesUpdate(y,e,l.timeScale,i,a.bounds),d.preSolveAll(y),n=0;n<t.constraintIterations;n++)d.solveAll(v,l.timeScale);d.postSolveAll(y),p.controller?(a.isModified&&p.controller.clear(p),p.controller.update(p,y,t,a.isModified),f=p.pairsList):f=y,a.isModified&&c.setModified(a,!1,!1,!0);var g=p.detector(f,t),x=t.pairs,b=l.timestamp;for(h.update(x,g,b),h.removeOld(x,b),t.enableSleeping&&s.afterCollisions(x.list,l.timeScale),x.collisionStart.length>0&&u.trigger(t,"collisionStart",{pairs:x.collisionStart}),o.preSolvePosition(x.list),n=0;n<t.positionIterations;n++)o.solvePosition(x.list,l.timeScale);for(o.postSolvePosition(y),d.preSolveAll(y),n=0;n<t.constraintIterations;n++)d.solveAll(v,l.timeScale);for(d.postSolveAll(y),o.preSolveVelocity(x.list),n=0;n<t.velocityIterations;n++)o.solveVelocity(x.list,l.timeScale);return x.collisionActive.length>0&&u.trigger(t,"collisionActive",{pairs:x.collisionActive}),x.collisionEnd.length>0&&u.trigger(t,"collisionEnd",{pairs:x.collisionEnd}),r._bodiesClearForces(y),u.trigger(t,"afterUpdate",m),t},r.merge=function(t,e){if(p.extend(t,e),e.world){t.world=e.world,r.clear(t);for(var i=c.allBodies(t.world),n=0;n<i.length;n++){var o=i[n];s.set(o,!1),o.id=p.nextId()}}},r.clear=function(t){var e=t.world;h.clear(t.pairs);var i=t.broadphase;if(i.controller){var r=c.allBodies(e);i.controller.clear(i),i.controller.update(i,r,t,!0)}},r._bodiesClearForces=function(t){for(var e=0;e<t.length;e++){var i=t[e];i.force.x=0,i.force.y=0,i.torque=0}},r._bodiesApplyGravity=function(t,e){var i=void 0!==e.scale?e.scale:.001;if((0!==e.x||0!==e.y)&&0!==i)for(var r=0;r<t.length;r++){var n=t[r];n.isStatic||n.isSleeping||(n.force.y+=n.mass*e.y*i,n.force.x+=n.mass*e.x*i)}},r._bodiesUpdate=function(t,e,i,r,n){for(var s=0;s<t.length;s++){var o=t[s];o.isStatic||o.isSleeping||f.update(o,e,i,r)}}},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Grid":6,"../collision/Pairs":8,"../collision/Resolver":10,"../constraint/Constraint":12,"../render/Render":31,"./Common":14,"./Events":16,"./Metrics":18,"./Sleeping":22}],16:[function(t,e,i){var r={};e.exports=r;var n=t("./Common");r.on=function(t,e,i){for(var r,n=e.split(" "),s=0;s<n.length;s++)r=n[s],t.events=t.events||{},t.events[r]=t.events[r]||[],t.events[r].push(i);return i},r.off=function(t,e,i){if(e){"function"==typeof e&&(i=e,e=n.keys(t.events).join(" "));for(var r=e.split(" "),s=0;s<r.length;s++){var o=t.events[r[s]],a=[];if(i&&o)for(var h=0;h<o.length;h++)o[h]!==i&&a.push(o[h]);t.events[r[s]]=a}}else t.events={}},r.trigger=function(t,e,i){var r,s,o,a;if(t.events){i||(i={}),r=e.split(" ");for(var h=0;h<r.length;h++)if(s=r[h],o=t.events[s]){(a=n.clone(i,!1)).name=s,a.source=t;for(var l=0;l<o.length;l++)o[l].apply(t,[a])}}}},{"./Common":14}],17:[function(t,e,i){var r={};e.exports=r;var n=t("./Plugin"),s=t("./Common");r.name="matter-js",r.version="0.14.2",r.uses=[],r.used=[],r.use=function(){n.use(r,Array.prototype.slice.call(arguments))},r.before=function(t,e){return t=t.replace(/^Matter./,""),s.chainPathBefore(r,t,e)},r.after=function(t,e){return t=t.replace(/^Matter./,""),s.chainPathAfter(r,t,e)}},{"./Common":14,"./Plugin":20}],18:[function(t,e,i){},{"../body/Composite":2,"./Common":14}],19:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Common");r.create=function(t){var e={};return t||n.log("Mouse.create: element was undefined, defaulting to document.body","warn"),e.element=t||document.body,e.absolute={x:0,y:0},e.position={x:0,y:0},e.mousedownPosition={x:0,y:0},e.mouseupPosition={x:0,y:0},e.offset={x:0,y:0},e.scale={x:1,y:1},e.wheelDelta=0,e.button=-1,e.pixelRatio=e.element.getAttribute("data-pixel-ratio")||1,e.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},e.mousemove=function(t){var i=r._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches&&(e.button=0,t.preventDefault()),e.absolute.x=i.x,e.absolute.y=i.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.sourceEvents.mousemove=t},e.mousedown=function(t){var i=r._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches?(e.button=0,t.preventDefault()):e.button=t.button,e.absolute.x=i.x,e.absolute.y=i.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.mousedownPosition.x=e.position.x,e.mousedownPosition.y=e.position.y,e.sourceEvents.mousedown=t},e.mouseup=function(t){var i=r._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches&&t.preventDefault(),e.button=-1,e.absolute.x=i.x,e.absolute.y=i.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.mouseupPosition.x=e.position.x,e.mouseupPosition.y=e.position.y,e.sourceEvents.mouseup=t},e.mousewheel=function(t){e.wheelDelta=Math.max(-1,Math.min(1,t.wheelDelta||-t.detail)),t.preventDefault()},r.setElement(e,e.element),e},r.setElement=function(t,e){t.element=e,e.addEventListener("mousemove",t.mousemove),e.addEventListener("mousedown",t.mousedown),e.addEventListener("mouseup",t.mouseup),e.addEventListener("mousewheel",t.mousewheel),e.addEventListener("DOMMouseScroll",t.mousewheel),e.addEventListener("touchmove",t.mousemove),e.addEventListener("touchstart",t.mousedown),e.addEventListener("touchend",t.mouseup)},r.clearSourceEvents=function(t){t.sourceEvents.mousemove=null,t.sourceEvents.mousedown=null,t.sourceEvents.mouseup=null,t.sourceEvents.mousewheel=null,t.wheelDelta=0},r.setOffset=function(t,e){t.offset.x=e.x,t.offset.y=e.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y},r.setScale=function(t,e){t.scale.x=e.x,t.scale.y=e.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y},r._getRelativeMousePosition=function(t,e,i){var r,n,s=e.getBoundingClientRect(),o=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:o.scrollLeft,h=void 0!==window.pageYOffset?window.pageYOffset:o.scrollTop,l=t.changedTouches;return l?(r=l[0].pageX-s.left-a,n=l[0].pageY-s.top-h):(r=t.pageX-s.left-a,n=t.pageY-s.top-h),{x:r/(e.clientWidth/(e.width||e.clientWidth)*i),y:n/(e.clientHeight/(e.height||e.clientHeight)*i)}}},{"../core/Common":14}],20:[function(t,e,i){var r={};e.exports=r;var n=t("./Common");r._registry={},r.register=function(t){if(r.isPlugin(t)||n.warn("Plugin.register:",r.toString(t),"does not implement all required fields."),t.name in r._registry){var e=r._registry[t.name],i=r.versionParse(t.version).number,s=r.versionParse(e.version).number;i>s?(n.warn("Plugin.register:",r.toString(e),"was upgraded to",r.toString(t)),r._registry[t.name]=t):i<s?n.warn("Plugin.register:",r.toString(e),"can not be downgraded to",r.toString(t)):t!==e&&n.warn("Plugin.register:",r.toString(t),"is already registered to different plugin object")}else r._registry[t.name]=t;return t},r.resolve=function(t){return r._registry[r.dependencyParse(t).name]},r.toString=function(t){return"string"==typeof t?t:(t.name||"anonymous")+"@"+(t.version||t.range||"0.0.0")},r.isPlugin=function(t){return t&&t.name&&t.version&&t.install},r.isUsed=function(t,e){return t.used.indexOf(e)>-1},r.isFor=function(t,e){var i=t.for&&r.dependencyParse(t.for);return!t.for||e.name===i.name&&r.versionSatisfies(e.version,i.range)},r.use=function(t,e){if(t.uses=(t.uses||[]).concat(e||[]),0!==t.uses.length){for(var i=r.dependencies(t),s=n.topologicalSort(i),o=[],a=0;a<s.length;a+=1)if(s[a]!==t.name){var h=r.resolve(s[a]);h?r.isUsed(t,h.name)||(r.isFor(h,t)||(n.warn("Plugin.use:",r.toString(h),"is for",h.for,"but installed on",r.toString(t)+"."),h._warned=!0),h.install?h.install(t):(n.warn("Plugin.use:",r.toString(h),"does not specify an install function."),h._warned=!0),h._warned?(o.push("🔶 "+r.toString(h)),delete h._warned):o.push("✅ "+r.toString(h)),t.used.push(h.name)):o.push("❌ "+s[a])}o.length>0&&n.info(o.join("  "))}else n.warn("Plugin.use:",r.toString(t),"does not specify any dependencies to install.")},r.dependencies=function(t,e){var i=r.dependencyParse(t),s=i.name;if(!(s in(e=e||{}))){t=r.resolve(t)||t,e[s]=n.map(t.uses||[],(function(e){r.isPlugin(e)&&r.register(e);var s=r.dependencyParse(e),o=r.resolve(e);return o&&!r.versionSatisfies(o.version,s.range)?(n.warn("Plugin.dependencies:",r.toString(o),"does not satisfy",r.toString(s),"used by",r.toString(i)+"."),o._warned=!0,t._warned=!0):o||(n.warn("Plugin.dependencies:",r.toString(e),"used by",r.toString(i),"could not be resolved."),t._warned=!0),s.name}));for(var o=0;o<e[s].length;o+=1)r.dependencies(e[s][o],e);return e}},r.dependencyParse=function(t){return n.isString(t)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?))?$/.test(t)||n.warn("Plugin.dependencyParse:",t,"is not a valid dependency string."),{name:t.split("@")[0],range:t.split("@")[1]||"*"}):{name:t.name,range:t.range||t.version}},r.versionParse=function(t){/^\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?$/.test(t)||n.warn("Plugin.versionParse:",t,"is not a valid version or range.");var e=t.split("-");t=e[0];var i=isNaN(Number(t[0])),r=i?t.substr(1):t,s=n.map(r.split("."),(function(t){return Number(t)}));return{isRange:i,version:r,range:t,operator:i?t[0]:"",parts:s,prerelease:e[1],number:1e8*s[0]+1e4*s[1]+s[2]}},r.versionSatisfies=function(t,e){e=e||"*";var i=r.versionParse(e),n=i.parts,s=r.versionParse(t),o=s.parts;if(i.isRange){if("*"===i.operator||"*"===t)return!0;if("~"===i.operator)return o[0]===n[0]&&o[1]===n[1]&&o[2]>=n[2];if("^"===i.operator)return n[0]>0?o[0]===n[0]&&s.number>=i.number:n[1]>0?o[1]===n[1]&&o[2]>=n[2]:o[2]===n[2]}return t===e||"*"===t}},{"./Common":14}],21:[function(t,e,i){var r={};e.exports=r;var n=t("./Events"),s=t("./Engine"),o=t("./Common");!function(){var t,e,i;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),t||(t=function(t){i=setTimeout((function(){t(o.now())}),1e3/60)},e=function(){clearTimeout(i)}),r.create=function(t){var e=o.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},t);return e.delta=e.delta||1e3/e.fps,e.deltaMin=e.deltaMin||1e3/e.fps,e.deltaMax=e.deltaMax||1e3/(.5*e.fps),e.fps=1e3/e.delta,e},r.run=function(e,i){return void 0!==e.positionIterations&&(i=e,e=r.create()),function n(s){e.frameRequestId=t(n),s&&e.enabled&&r.tick(e,i,s)}(),e},r.tick=function(t,e,i){var r,o=e.timing,a=1,h={timestamp:o.timestamp};n.trigger(t,"beforeTick",h),n.trigger(e,"beforeTick",h),t.isFixed?r=t.delta:(r=i-t.timePrev||t.delta,t.timePrev=i,t.deltaHistory.push(r),t.deltaHistory=t.deltaHistory.slice(-t.deltaSampleSize),a=(r=(r=(r=Math.min.apply(null,t.deltaHistory))<t.deltaMin?t.deltaMin:r)>t.deltaMax?t.deltaMax:r)/t.delta,t.delta=r),0!==t.timeScalePrev&&(a*=o.timeScale/t.timeScalePrev),0===o.timeScale&&(a=0),t.timeScalePrev=o.timeScale,t.correction=a,t.frameCounter+=1,i-t.counterTimestamp>=1e3&&(t.fps=t.frameCounter*((i-t.counterTimestamp)/1e3),t.counterTimestamp=i,t.frameCounter=0),n.trigger(t,"tick",h),n.trigger(e,"tick",h),e.world.isModified&&e.render&&e.render.controller&&e.render.controller.clear&&e.render.controller.clear(e.render),n.trigger(t,"beforeUpdate",h),s.update(e,r,a),n.trigger(t,"afterUpdate",h),e.render&&e.render.controller&&(n.trigger(t,"beforeRender",h),n.trigger(e,"beforeRender",h),e.render.controller.world(e.render),n.trigger(t,"afterRender",h),n.trigger(e,"afterRender",h)),n.trigger(t,"afterTick",h),n.trigger(e,"afterTick",h)},r.stop=function(t){e(t.frameRequestId)},r.start=function(t,e){r.run(t,e)}}()},{"./Common":14,"./Engine":15,"./Events":16}],22:[function(t,e,i){var r={};e.exports=r;var n=t("./Events");r._motionWakeThreshold=.18,r._motionSleepThreshold=.08,r._minBias=.9,r.update=function(t,e){for(var i=e*e*e,n=0;n<t.length;n++){var s=t[n],o=s.speed*s.speed+s.angularSpeed*s.angularSpeed;if(0===s.force.x&&0===s.force.y){var a=Math.min(s.motion,o),h=Math.max(s.motion,o);s.motion=r._minBias*a+(1-r._minBias)*h,s.sleepThreshold>0&&s.motion<r._motionSleepThreshold*i?(s.sleepCounter+=1,s.sleepCounter>=s.sleepThreshold&&r.set(s,!0)):s.sleepCounter>0&&(s.sleepCounter-=1)}else r.set(s,!1)}},r.afterCollisions=function(t,e){for(var i=e*e*e,n=0;n<t.length;n++){var s=t[n];if(s.isActive){var o=s.collision,a=o.bodyA.parent,h=o.bodyB.parent;if(!(a.isSleeping&&h.isSleeping||a.isStatic||h.isStatic)&&(a.isSleeping||h.isSleeping)){var l=a.isSleeping&&!a.isStatic?a:h,u=l===a?h:a;!l.isStatic&&u.motion>r._motionWakeThreshold*i&&r.set(l,!1)}}}},r.set=function(t,e){var i=t.isSleeping;e?(t.isSleeping=!0,t.sleepCounter=t.sleepThreshold,t.positionImpulse.x=0,t.positionImpulse.y=0,t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.anglePrev=t.angle,t.speed=0,t.angularSpeed=0,t.motion=0,i||n.trigger(t,"sleepStart")):(t.isSleeping=!1,t.sleepCounter=0,i&&n.trigger(t,"sleepEnd"))}},{"./Events":16}],23:[function(t,e,i){var r={};e.exports=r;var n,s=t("../geometry/Vertices"),o=t("../core/Common"),a=t("../body/Body"),h=t("../geometry/Bounds"),l=t("../geometry/Vector");r.rectangle=function(t,e,i,r,n){n=n||{};var h={label:"Rectangle Body",position:{x:t,y:e},vertices:s.fromPath("L 0 0 L "+i+" 0 L "+i+" "+r+" L 0 "+r)};if(n.chamfer){var l=n.chamfer;h.vertices=s.chamfer(h.vertices,l.radius,l.quality,l.qualityMin,l.qualityMax),delete n.chamfer}return a.create(o.extend({},h,n))},r.trapezoid=function(t,e,i,r,n,h){h=h||{};var l,u=i*(n*=.5),c=u+(1-2*n)*i,d=c+u;l=n<.5?"L 0 0 L "+u+" "+-r+" L "+c+" "+-r+" L "+d+" 0":"L 0 0 L "+c+" "+-r+" L "+d+" 0";var p={label:"Trapezoid Body",position:{x:t,y:e},vertices:s.fromPath(l)};if(h.chamfer){var f=h.chamfer;p.vertices=s.chamfer(p.vertices,f.radius,f.quality,f.qualityMin,f.qualityMax),delete h.chamfer}return a.create(o.extend({},p,h))},r.circle=function(t,e,i,n,s){n=n||{};var a={label:"Circle Body",circleRadius:i};s=s||25;var h=Math.ceil(Math.max(10,Math.min(s,i)));return h%2==1&&(h+=1),r.polygon(t,e,h,i,o.extend({},a,n))},r.polygon=function(t,e,i,n,h){if(h=h||{},i<3)return r.circle(t,e,n,h);for(var l=2*Math.PI/i,u="",c=.5*l,d=0;d<i;d+=1){var p=c+d*l,f=Math.cos(p)*n,m=Math.sin(p)*n;u+="L "+f.toFixed(3)+" "+m.toFixed(3)+" "}var y={label:"Polygon Body",position:{x:t,y:e},vertices:s.fromPath(u)};if(h.chamfer){var v=h.chamfer;y.vertices=s.chamfer(y.vertices,v.radius,v.quality,v.qualityMin,v.qualityMax),delete h.chamfer}return a.create(o.extend({},y,h))},r.fromVertices=function(t,e,i,r,u,c,d){var p,f,m,y,v,g,x,b,w;for(n||(n=o._requireGlobal("decomp","poly-decomp")),r=r||{},f=[],u=void 0!==u&&u,c=void 0!==c?c:.01,d=void 0!==d?d:10,n||o.warn("Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull."),o.isArray(i[0])||(i=[i]),b=0;b<i.length;b+=1)if(y=i[b],(m=s.isConvex(y))||!n)y=m?s.clockwiseSort(y):s.hull(y),f.push({position:{x:t,y:e},vertices:y});else{var _=y.map((function(t){return[t.x,t.y]}));n.makeCCW(_),!1!==c&&n.removeCollinearPoints(_,c);var S=n.quickDecomp(_);for(v=0;v<S.length;v++){var C=S[v].map((function(t){return{x:t[0],y:t[1]}}));d>0&&s.area(C)<d||f.push({position:s.centre(C),vertices:C})}}for(v=0;v<f.length;v++)f[v]=a.create(o.extend(f[v],r));if(u)for(v=0;v<f.length;v++){var T=f[v];for(g=v+1;g<f.length;g++){var I=f[g];if(h.overlaps(T.bounds,I.bounds)){var E=T.vertices,A=I.vertices;for(x=0;x<T.vertices.length;x++)for(w=0;w<I.vertices.length;w++){var M=l.magnitudeSquared(l.sub(E[(x+1)%E.length],A[w])),P=l.magnitudeSquared(l.sub(E[x],A[(w+1)%A.length]));M<5&&P<5&&(E[x].isInternal=!0,A[w].isInternal=!0)}}}}return f.length>1?(p=a.create(o.extend({parts:f.slice(0)},r)),a.setPosition(p,{x:t,y:e}),p):f[0]}},{"../body/Body":1,"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],24:[function(t,e,i){var r={};e.exports=r;var n=t("../body/Composite"),s=t("../constraint/Constraint"),o=t("../core/Common"),a=t("../body/Body"),h=t("./Bodies");r.stack=function(t,e,i,r,s,o,h){for(var l,u=n.create({label:"Stack"}),c=t,d=e,p=0,f=0;f<r;f++){for(var m=0,y=0;y<i;y++){var v=h(c,d,y,f,l,p);if(v){var g=v.bounds.max.y-v.bounds.min.y,x=v.bounds.max.x-v.bounds.min.x;g>m&&(m=g),a.translate(v,{x:.5*x,y:.5*g}),c=v.bounds.max.x+s,n.addBody(u,v),l=v,p+=1}else c+=s}d+=m+o,c=t}return u},r.chain=function(t,e,i,r,a,h){for(var l=t.bodies,u=1;u<l.length;u++){var c=l[u-1],d=l[u],p=c.bounds.max.y-c.bounds.min.y,f=c.bounds.max.x-c.bounds.min.x,m=d.bounds.max.y-d.bounds.min.y,y={bodyA:c,pointA:{x:f*e,y:p*i},bodyB:d,pointB:{x:(d.bounds.max.x-d.bounds.min.x)*r,y:m*a}},v=o.extend(y,h);n.addConstraint(t,s.create(v))}return t.label+=" Chain",t},r.mesh=function(t,e,i,r,a){var h,l,u,c,d,p=t.bodies;for(h=0;h<i;h++){for(l=1;l<e;l++)u=p[l-1+h*e],c=p[l+h*e],n.addConstraint(t,s.create(o.extend({bodyA:u,bodyB:c},a)));if(h>0)for(l=0;l<e;l++)u=p[l+(h-1)*e],c=p[l+h*e],n.addConstraint(t,s.create(o.extend({bodyA:u,bodyB:c},a))),r&&l>0&&(d=p[l-1+(h-1)*e],n.addConstraint(t,s.create(o.extend({bodyA:d,bodyB:c},a)))),r&&l<e-1&&(d=p[l+1+(h-1)*e],n.addConstraint(t,s.create(o.extend({bodyA:d,bodyB:c},a))))}return t.label+=" Mesh",t},r.pyramid=function(t,e,i,n,s,o,h){return r.stack(t,e,i,n,s,o,(function(e,r,o,l,u,c){var d=Math.min(n,Math.ceil(i/2)),p=u?u.bounds.max.x-u.bounds.min.x:0;if(!(l>d||o<(l=d-l)||o>i-1-l))return 1===c&&a.translate(u,{x:(o+(i%2==1?1:-1))*p,y:0}),h(t+(u?o*p:0)+o*s,r,o,l,u,c)}))},r.newtonsCradle=function(t,e,i,r,o){for(var a=n.create({label:"Newtons Cradle"}),l=0;l<i;l++){var u=h.circle(t+l*(1.9*r),e+o,r,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),c=s.create({pointA:{x:t+l*(1.9*r),y:e},bodyB:u});n.addBody(a,u),n.addConstraint(a,c)}return a},r.car=function(t,e,i,r,o){var l=a.nextGroup(!0),u=.5*-i+20,c=.5*i-20,d=n.create({label:"Car"}),p=h.rectangle(t,e,i,r,{collisionFilter:{group:l},chamfer:{radius:.5*r},density:2e-4}),f=h.circle(t+u,e+0,o,{collisionFilter:{group:l},friction:.8}),m=h.circle(t+c,e+0,o,{collisionFilter:{group:l},friction:.8}),y=s.create({bodyB:p,pointB:{x:u,y:0},bodyA:f,stiffness:1,length:0}),v=s.create({bodyB:p,pointB:{x:c,y:0},bodyA:m,stiffness:1,length:0});return n.addBody(d,p),n.addBody(d,f),n.addBody(d,m),n.addConstraint(d,y),n.addConstraint(d,v),d},r.softBody=function(t,e,i,n,s,a,l,u,c,d){c=o.extend({inertia:1/0},c),d=o.extend({stiffness:.2,render:{type:"line",anchors:!1}},d);var p=r.stack(t,e,i,n,s,a,(function(t,e){return h.circle(t,e,u,c)}));return r.mesh(p,i,n,l,d),p.label="Soft Body",p}},{"../body/Body":1,"../body/Composite":2,"../constraint/Constraint":12,"../core/Common":14,"./Bodies":23}],25:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),s=t("../core/Common");r.fromVertices=function(t){for(var e={},i=0;i<t.length;i++){var r=(i+1)%t.length,o=n.normalise({x:t[r].y-t[i].y,y:t[i].x-t[r].x}),a=0===o.y?1/0:o.x/o.y;e[a=a.toFixed(3).toString()]=o}return s.values(e)},r.rotate=function(t,e){if(0!==e)for(var i=Math.cos(e),r=Math.sin(e),n=0;n<t.length;n++){var s,o=t[n];s=o.x*i-o.y*r,o.y=o.x*r+o.y*i,o.x=s}}},{"../core/Common":14,"../geometry/Vector":28}],26:[function(t,e,i){var r={};e.exports=r,r.create=function(t){var e={min:{x:0,y:0},max:{x:0,y:0}};return t&&r.update(e,t),e},r.update=function(t,e,i){t.min.x=1/0,t.max.x=-1/0,t.min.y=1/0,t.max.y=-1/0;for(var r=0;r<e.length;r++){var n=e[r];n.x>t.max.x&&(t.max.x=n.x),n.x<t.min.x&&(t.min.x=n.x),n.y>t.max.y&&(t.max.y=n.y),n.y<t.min.y&&(t.min.y=n.y)}i&&(i.x>0?t.max.x+=i.x:t.min.x+=i.x,i.y>0?t.max.y+=i.y:t.min.y+=i.y)},r.contains=function(t,e){return e.x>=t.min.x&&e.x<=t.max.x&&e.y>=t.min.y&&e.y<=t.max.y},r.overlaps=function(t,e){return t.min.x<=e.max.x&&t.max.x>=e.min.x&&t.max.y>=e.min.y&&t.min.y<=e.max.y},r.translate=function(t,e){t.min.x+=e.x,t.max.x+=e.x,t.min.y+=e.y,t.max.y+=e.y},r.shift=function(t,e){var i=t.max.x-t.min.x,r=t.max.y-t.min.y;t.min.x=e.x,t.max.x=e.x+i,t.min.y=e.y,t.max.y=e.y+r}},{}],27:[function(t,e,i){var r={};e.exports=r;var n=(t("../geometry/Bounds"),t("../core/Common"));r.pathToVertices=function(t,e){"undefined"==typeof window||"SVGPathSeg"in window||n.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var i,s,o,a,h,l,u,c,d,p,f,m=[],y=0,v=0,g=0;e=e||15;var x=function(t,e,i){var r=i%2==1&&i>1;if(!d||t!=d.x||e!=d.y){d&&r?(p=d.x,f=d.y):(p=0,f=0);var n={x:p+t,y:f+e};!r&&d||(d=n),m.push(n),v=p+t,g=f+e}},b=function(t){var e=t.pathSegTypeAsLetter.toUpperCase();if("Z"!==e){switch(e){case"M":case"L":case"T":case"C":case"S":case"Q":v=t.x,g=t.y;break;case"H":v=t.x;break;case"V":g=t.y}x(v,g,t.pathSegType)}};for(r._svgPathToAbsolute(t),o=t.getTotalLength(),l=[],i=0;i<t.pathSegList.numberOfItems;i+=1)l.push(t.pathSegList.getItem(i));for(u=l.concat();y<o;){if((h=l[t.getPathSegAtLength(y)])!=c){for(;u.length&&u[0]!=h;)b(u.shift());c=h}switch(h.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":a=t.getPointAtLength(y),x(a.x,a.y,0)}y+=e}for(i=0,s=u.length;i<s;++i)b(u[i]);return m},r._svgPathToAbsolute=function(t){for(var e,i,r,n,s,o,a=t.pathSegList,h=0,l=0,u=a.numberOfItems,c=0;c<u;++c){var d=a.getItem(c),p=d.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(p))"x"in d&&(h=d.x),"y"in d&&(l=d.y);else switch("x1"in d&&(r=h+d.x1),"x2"in d&&(s=h+d.x2),"y1"in d&&(n=l+d.y1),"y2"in d&&(o=l+d.y2),"x"in d&&(h+=d.x),"y"in d&&(l+=d.y),p){case"m":a.replaceItem(t.createSVGPathSegMovetoAbs(h,l),c);break;case"l":a.replaceItem(t.createSVGPathSegLinetoAbs(h,l),c);break;case"h":a.replaceItem(t.createSVGPathSegLinetoHorizontalAbs(h),c);break;case"v":a.replaceItem(t.createSVGPathSegLinetoVerticalAbs(l),c);break;case"c":a.replaceItem(t.createSVGPathSegCurvetoCubicAbs(h,l,r,n,s,o),c);break;case"s":a.replaceItem(t.createSVGPathSegCurvetoCubicSmoothAbs(h,l,s,o),c);break;case"q":a.replaceItem(t.createSVGPathSegCurvetoQuadraticAbs(h,l,r,n),c);break;case"t":a.replaceItem(t.createSVGPathSegCurvetoQuadraticSmoothAbs(h,l),c);break;case"a":a.replaceItem(t.createSVGPathSegArcAbs(h,l,d.r1,d.r2,d.angle,d.largeArcFlag,d.sweepFlag),c);break;case"z":case"Z":h=e,l=i}"M"!=p&&"m"!=p||(e=h,i=l)}}},{"../core/Common":14,"../geometry/Bounds":26}],28:[function(t,e,i){var r={};e.exports=r,r.create=function(t,e){return{x:t||0,y:e||0}},r.clone=function(t){return{x:t.x,y:t.y}},r.magnitude=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},r.magnitudeSquared=function(t){return t.x*t.x+t.y*t.y},r.rotate=function(t,e,i){var r=Math.cos(e),n=Math.sin(e);i||(i={});var s=t.x*r-t.y*n;return i.y=t.x*n+t.y*r,i.x=s,i},r.rotateAbout=function(t,e,i,r){var n=Math.cos(e),s=Math.sin(e);r||(r={});var o=i.x+((t.x-i.x)*n-(t.y-i.y)*s);return r.y=i.y+((t.x-i.x)*s+(t.y-i.y)*n),r.x=o,r},r.normalise=function(t){var e=r.magnitude(t);return 0===e?{x:0,y:0}:{x:t.x/e,y:t.y/e}},r.dot=function(t,e){return t.x*e.x+t.y*e.y},r.cross=function(t,e){return t.x*e.y-t.y*e.x},r.cross3=function(t,e,i){return(e.x-t.x)*(i.y-t.y)-(e.y-t.y)*(i.x-t.x)},r.add=function(t,e,i){return i||(i={}),i.x=t.x+e.x,i.y=t.y+e.y,i},r.sub=function(t,e,i){return i||(i={}),i.x=t.x-e.x,i.y=t.y-e.y,i},r.mult=function(t,e){return{x:t.x*e,y:t.y*e}},r.div=function(t,e){return{x:t.x/e,y:t.y/e}},r.perp=function(t,e){return{x:(e=!0===e?-1:1)*-t.y,y:e*t.x}},r.neg=function(t){return{x:-t.x,y:-t.y}},r.angle=function(t,e){return Math.atan2(e.y-t.y,e.x-t.x)},r._temp=[r.create(),r.create(),r.create(),r.create(),r.create(),r.create()]},{}],29:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),s=t("../core/Common");r.create=function(t,e){for(var i=[],r=0;r<t.length;r++){var n=t[r],s={x:n.x,y:n.y,index:r,body:e,isInternal:!1};i.push(s)}return i},r.fromPath=function(t,e){var i=[];return t.replace(/L?\s*([\-\d\.e]+)[\s,]*([\-\d\.e]+)*/gi,(function(t,e,r){i.push({x:parseFloat(e),y:parseFloat(r)})})),r.create(i,e)},r.centre=function(t){for(var e,i,s,o=r.area(t,!0),a={x:0,y:0},h=0;h<t.length;h++)s=(h+1)%t.length,e=n.cross(t[h],t[s]),i=n.mult(n.add(t[h],t[s]),e),a=n.add(a,i);return n.div(a,6*o)},r.mean=function(t){for(var e={x:0,y:0},i=0;i<t.length;i++)e.x+=t[i].x,e.y+=t[i].y;return n.div(e,t.length)},r.area=function(t,e){for(var i=0,r=t.length-1,n=0;n<t.length;n++)i+=(t[r].x-t[n].x)*(t[r].y+t[n].y),r=n;return e?i/2:Math.abs(i)/2},r.inertia=function(t,e){for(var i,r,s=0,o=0,a=t,h=0;h<a.length;h++)r=(h+1)%a.length,s+=(i=Math.abs(n.cross(a[r],a[h])))*(n.dot(a[r],a[r])+n.dot(a[r],a[h])+n.dot(a[h],a[h])),o+=i;return e/6*(s/o)},r.translate=function(t,e,i){var r;if(i)for(r=0;r<t.length;r++)t[r].x+=e.x*i,t[r].y+=e.y*i;else for(r=0;r<t.length;r++)t[r].x+=e.x,t[r].y+=e.y;return t},r.rotate=function(t,e,i){if(0!==e){for(var r=Math.cos(e),n=Math.sin(e),s=0;s<t.length;s++){var o=t[s],a=o.x-i.x,h=o.y-i.y;o.x=i.x+(a*r-h*n),o.y=i.y+(a*n+h*r)}return t}},r.contains=function(t,e){for(var i=0;i<t.length;i++){var r=t[i],n=t[(i+1)%t.length];if((e.x-r.x)*(n.y-r.y)+(e.y-r.y)*(r.x-n.x)>0)return!1}return!0},r.scale=function(t,e,i,s){if(1===e&&1===i)return t;s=s||r.centre(t);for(var o,a,h=0;h<t.length;h++)o=t[h],a=n.sub(o,s),t[h].x=s.x+a.x*e,t[h].y=s.y+a.y*i;return t},r.chamfer=function(t,e,i,r,o){e="number"==typeof e?[e]:e||[8],i=void 0!==i?i:-1,r=r||2,o=o||14;for(var a=[],h=0;h<t.length;h++){var l=t[h-1>=0?h-1:t.length-1],u=t[h],c=t[(h+1)%t.length],d=e[h<e.length?h:e.length-1];if(0!==d){var p=n.normalise({x:u.y-l.y,y:l.x-u.x}),f=n.normalise({x:c.y-u.y,y:u.x-c.x}),m=Math.sqrt(2*Math.pow(d,2)),y=n.mult(s.clone(p),d),v=n.normalise(n.mult(n.add(p,f),.5)),g=n.sub(u,n.mult(v,m)),x=i;-1===i&&(x=1.75*Math.pow(d,.32)),(x=s.clamp(x,r,o))%2==1&&(x+=1);for(var b=Math.acos(n.dot(p,f))/x,w=0;w<x;w++)a.push(n.add(n.rotate(y,b*w),g))}else a.push(u)}return a},r.clockwiseSort=function(t){var e=r.mean(t);return t.sort((function(t,i){return n.angle(e,t)-n.angle(e,i)})),t},r.isConvex=function(t){var e,i,r,n,s=0,o=t.length;if(o<3)return null;for(e=0;e<o;e++)if(r=(e+2)%o,n=(t[i=(e+1)%o].x-t[e].x)*(t[r].y-t[i].y),(n-=(t[i].y-t[e].y)*(t[r].x-t[i].x))<0?s|=1:n>0&&(s|=2),3===s)return!1;return 0!==s||null},r.hull=function(t){var e,i,r=[],s=[];for((t=t.slice(0)).sort((function(t,e){var i=t.x-e.x;return 0!==i?i:t.y-e.y})),i=0;i<t.length;i+=1){for(e=t[i];s.length>=2&&n.cross3(s[s.length-2],s[s.length-1],e)<=0;)s.pop();s.push(e)}for(i=t.length-1;i>=0;i-=1){for(e=t[i];r.length>=2&&n.cross3(r[r.length-2],r[r.length-1],e)<=0;)r.pop();r.push(e)}return r.pop(),s.pop(),r.concat(s)}},{"../core/Common":14,"../geometry/Vector":28}],30:[function(t,e,i){var r=e.exports=t("../core/Matter");r.Body=t("../body/Body"),r.Composite=t("../body/Composite"),r.World=t("../body/World"),r.Contact=t("../collision/Contact"),r.Detector=t("../collision/Detector"),r.Grid=t("../collision/Grid"),r.Pairs=t("../collision/Pairs"),r.Pair=t("../collision/Pair"),r.Query=t("../collision/Query"),r.Resolver=t("../collision/Resolver"),r.SAT=t("../collision/SAT"),r.Constraint=t("../constraint/Constraint"),r.MouseConstraint=t("../constraint/MouseConstraint"),r.Common=t("../core/Common"),r.Engine=t("../core/Engine"),r.Events=t("../core/Events"),r.Mouse=t("../core/Mouse"),r.Runner=t("../core/Runner"),r.Sleeping=t("../core/Sleeping"),r.Plugin=t("../core/Plugin"),r.Bodies=t("../factory/Bodies"),r.Composites=t("../factory/Composites"),r.Axes=t("../geometry/Axes"),r.Bounds=t("../geometry/Bounds"),r.Svg=t("../geometry/Svg"),r.Vector=t("../geometry/Vector"),r.Vertices=t("../geometry/Vertices"),r.Render=t("../render/Render"),r.RenderPixi=t("../render/RenderPixi"),r.World.add=r.Composite.add,r.World.remove=r.Composite.remove,r.World.addComposite=r.Composite.addComposite,r.World.addBody=r.Composite.addBody,r.World.addConstraint=r.Composite.addConstraint,r.World.clear=r.Composite.clear,r.Engine.run=r.Runner.run},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Contact":4,"../collision/Detector":5,"../collision/Grid":6,"../collision/Pair":7,"../collision/Pairs":8,"../collision/Query":9,"../collision/Resolver":10,"../collision/SAT":11,"../constraint/Constraint":12,"../constraint/MouseConstraint":13,"../core/Common":14,"../core/Engine":15,"../core/Events":16,"../core/Matter":17,"../core/Metrics":18,"../core/Mouse":19,"../core/Plugin":20,"../core/Runner":21,"../core/Sleeping":22,"../factory/Bodies":23,"../factory/Composites":24,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Svg":27,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31,"../render/RenderPixi":32}],31:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Common"),s=t("../body/Composite"),o=t("../geometry/Bounds"),a=t("../core/Events"),h=t("../collision/Grid"),l=t("../geometry/Vector"),u=t("../core/Mouse");!function(){var t,e;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout((function(){t(n.now())}),1e3/60)},e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(t){var e={controller:r,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,options:{width:800,height:600,pixelRatio:1,background:"#18181d",wireframeBackground:"#0f0f13",hasBounds:!!t.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},s=n.extend(e,t);return s.canvas&&(s.canvas.width=s.options.width||s.canvas.width,s.canvas.height=s.options.height||s.canvas.height),s.mouse=t.mouse,s.engine=t.engine,s.canvas=s.canvas||i(s.options.width,s.options.height),s.context=s.canvas.getContext("2d"),s.textures={},s.bounds=s.bounds||{min:{x:0,y:0},max:{x:s.canvas.width,y:s.canvas.height}},1!==s.options.pixelRatio&&r.setPixelRatio(s,s.options.pixelRatio),n.isElement(s.element)?s.element.appendChild(s.canvas):s.canvas.parentNode||n.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),s},r.run=function(e){!function i(n){e.frameRequestId=t(i),r.world(e)}()},r.stop=function(t){e(t.frameRequestId)},r.setPixelRatio=function(t,e){var i=t.options,r=t.canvas;"auto"===e&&(e=c(r)),i.pixelRatio=e,r.setAttribute("data-pixel-ratio",e),r.width=i.width*e,r.height=i.height*e,r.style.width=i.width+"px",r.style.height=i.height+"px",t.context.scale(e,e)},r.lookAt=function(t,e,i,r){r=void 0===r||r,e=n.isArray(e)?e:[e],i=i||{x:0,y:0};for(var s={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},o=0;o<e.length;o+=1){var a=e[o],h=a.bounds?a.bounds.min:a.min||a.position||a,l=a.bounds?a.bounds.max:a.max||a.position||a;h&&l&&(h.x<s.min.x&&(s.min.x=h.x),l.x>s.max.x&&(s.max.x=l.x),h.y<s.min.y&&(s.min.y=h.y),l.y>s.max.y&&(s.max.y=l.y))}var c=s.max.x-s.min.x+2*i.x,d=s.max.y-s.min.y+2*i.y,p=t.canvas.height,f=t.canvas.width/p,m=c/d,y=1,v=1;m>f?v=m/f:y=f/m,t.options.hasBounds=!0,t.bounds.min.x=s.min.x,t.bounds.max.x=s.min.x+c*y,t.bounds.min.y=s.min.y,t.bounds.max.y=s.min.y+d*v,r&&(t.bounds.min.x+=.5*c-c*y*.5,t.bounds.max.x+=.5*c-c*y*.5,t.bounds.min.y+=.5*d-d*v*.5,t.bounds.max.y+=.5*d-d*v*.5),t.bounds.min.x-=i.x,t.bounds.max.x-=i.x,t.bounds.min.y-=i.y,t.bounds.max.y-=i.y,t.mouse&&(u.setScale(t.mouse,{x:(t.bounds.max.x-t.bounds.min.x)/t.canvas.width,y:(t.bounds.max.y-t.bounds.min.y)/t.canvas.height}),u.setOffset(t.mouse,t.bounds.min))},r.startViewTransform=function(t){var e=t.bounds.max.x-t.bounds.min.x,i=t.bounds.max.y-t.bounds.min.y,r=e/t.options.width,n=i/t.options.height;t.context.scale(1/r,1/n),t.context.translate(-t.bounds.min.x,-t.bounds.min.y)},r.endViewTransform=function(t){t.context.setTransform(t.options.pixelRatio,0,0,t.options.pixelRatio,0,0)},r.world=function(t){var e,i=t.engine,n=i.world,c=t.canvas,d=t.context,f=t.options,m=s.allBodies(n),y=s.allConstraints(n),v=f.wireframes?f.wireframeBackground:f.background,g=[],x=[],b={timestamp:i.timing.timestamp};if(a.trigger(t,"beforeRender",b),t.currentBackground!==v&&p(t,v),d.globalCompositeOperation="source-in",d.fillStyle="transparent",d.fillRect(0,0,c.width,c.height),d.globalCompositeOperation="source-over",f.hasBounds){for(e=0;e<m.length;e++){var w=m[e];o.overlaps(w.bounds,t.bounds)&&g.push(w)}for(e=0;e<y.length;e++){var _=y[e],S=_.bodyA,C=_.bodyB,T=_.pointA,I=_.pointB;S&&(T=l.add(S.position,_.pointA)),C&&(I=l.add(C.position,_.pointB)),T&&I&&(o.contains(t.bounds,T)||o.contains(t.bounds,I))&&x.push(_)}r.startViewTransform(t),t.mouse&&(u.setScale(t.mouse,{x:(t.bounds.max.x-t.bounds.min.x)/t.canvas.width,y:(t.bounds.max.y-t.bounds.min.y)/t.canvas.height}),u.setOffset(t.mouse,t.bounds.min))}else x=y,g=m;!f.wireframes||i.enableSleeping&&f.showSleeping?r.bodies(t,g,d):(f.showConvexHulls&&r.bodyConvexHulls(t,g,d),r.bodyWireframes(t,g,d)),f.showBounds&&r.bodyBounds(t,g,d),(f.showAxes||f.showAngleIndicator)&&r.bodyAxes(t,g,d),f.showPositions&&r.bodyPositions(t,g,d),f.showVelocity&&r.bodyVelocity(t,g,d),f.showIds&&r.bodyIds(t,g,d),f.showSeparations&&r.separations(t,i.pairs.list,d),f.showCollisions&&r.collisions(t,i.pairs.list,d),f.showVertexNumbers&&r.vertexNumbers(t,g,d),f.showMousePosition&&r.mousePosition(t,t.mouse,d),r.constraints(x,d),f.showBroadphase&&i.broadphase.controller===h&&r.grid(t,i.broadphase,d),f.showDebug&&r.debug(t,d),f.hasBounds&&r.endViewTransform(t),a.trigger(t,"afterRender",b)},r.debug=function(t,e){var i=e,r=t.engine,n=r.world,o=r.metrics,a=t.options;if(s.allBodies(n),r.timing.timestamp-(t.debugTimestamp||0)>=500){var h="";o.timing&&(h+="fps: "+Math.round(o.timing.fps)+"    "),t.debugString=h,t.debugTimestamp=r.timing.timestamp}if(t.debugString){i.font="12px Arial",a.wireframes?i.fillStyle="rgba(255,255,255,0.5)":i.fillStyle="rgba(0,0,0,0.5)";for(var l=t.debugString.split("\n"),u=0;u<l.length;u++)i.fillText(l[u],50,50+18*u)}},r.constraints=function(t,e){for(var i=e,r=0;r<t.length;r++){var s=t[r];if(s.render.visible&&s.pointA&&s.pointB){var o,a,h=s.bodyA,u=s.bodyB;if(o=h?l.add(h.position,s.pointA):s.pointA,"pin"===s.render.type)i.beginPath(),i.arc(o.x,o.y,3,0,2*Math.PI),i.closePath();else{if(a=u?l.add(u.position,s.pointB):s.pointB,i.beginPath(),i.moveTo(o.x,o.y),"spring"===s.render.type)for(var c,d=l.sub(a,o),p=l.perp(l.normalise(d)),f=Math.ceil(n.clamp(s.length/5,12,20)),m=1;m<f;m+=1)c=m%2==0?1:-1,i.lineTo(o.x+d.x*(m/f)+p.x*c*4,o.y+d.y*(m/f)+p.y*c*4);i.lineTo(a.x,a.y)}s.render.lineWidth&&(i.lineWidth=s.render.lineWidth,i.strokeStyle=s.render.strokeStyle,i.stroke()),s.render.anchors&&(i.fillStyle=s.render.strokeStyle,i.beginPath(),i.arc(o.x,o.y,3,0,2*Math.PI),i.arc(a.x,a.y,3,0,2*Math.PI),i.closePath(),i.fill())}}},r.bodyShadows=function(t,e,i){for(var r=i,n=(t.engine,0);n<e.length;n++){var s=e[n];if(s.render.visible){if(s.circleRadius)r.beginPath(),r.arc(s.position.x,s.position.y,s.circleRadius,0,2*Math.PI),r.closePath();else{r.beginPath(),r.moveTo(s.vertices[0].x,s.vertices[0].y);for(var o=1;o<s.vertices.length;o++)r.lineTo(s.vertices[o].x,s.vertices[o].y);r.closePath()}var a=s.position.x-.5*t.options.width,h=s.position.y-.2*t.options.height,l=Math.abs(a)+Math.abs(h);r.shadowColor="rgba(0,0,0,0.15)",r.shadowOffsetX=.05*a,r.shadowOffsetY=.05*h,r.shadowBlur=1+12*Math.min(1,l/1e3),r.fill(),r.shadowColor=null,r.shadowOffsetX=null,r.shadowOffsetY=null,r.shadowBlur=null}}},r.bodies=function(t,e,i){var r,n,s,o,a=i,h=(t.engine,t.options),l=h.showInternalEdges||!h.wireframes;for(s=0;s<e.length;s++)if((r=e[s]).render.visible)for(o=r.parts.length>1?1:0;o<r.parts.length;o++)if((n=r.parts[o]).render.visible){if(h.showSleeping&&r.isSleeping?a.globalAlpha=.5*n.render.opacity:1!==n.render.opacity&&(a.globalAlpha=n.render.opacity),n.render.sprite&&n.render.sprite.texture&&!h.wireframes){var u=n.render.sprite,c=d(t,u.texture);a.translate(n.position.x,n.position.y),a.rotate(n.angle),a.drawImage(c,c.width*-u.xOffset*u.xScale,c.height*-u.yOffset*u.yScale,c.width*u.xScale,c.height*u.yScale),a.rotate(-n.angle),a.translate(-n.position.x,-n.position.y)}else{if(n.circleRadius)a.beginPath(),a.arc(n.position.x,n.position.y,n.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(n.vertices[0].x,n.vertices[0].y);for(var p=1;p<n.vertices.length;p++)!n.vertices[p-1].isInternal||l?a.lineTo(n.vertices[p].x,n.vertices[p].y):a.moveTo(n.vertices[p].x,n.vertices[p].y),n.vertices[p].isInternal&&!l&&a.moveTo(n.vertices[(p+1)%n.vertices.length].x,n.vertices[(p+1)%n.vertices.length].y);a.lineTo(n.vertices[0].x,n.vertices[0].y),a.closePath()}h.wireframes?(a.lineWidth=1,a.strokeStyle="#bbb",a.stroke()):(a.fillStyle=n.render.fillStyle,n.render.lineWidth&&(a.lineWidth=n.render.lineWidth,a.strokeStyle=n.render.strokeStyle,a.stroke()),a.fill())}a.globalAlpha=1}},r.bodyWireframes=function(t,e,i){var r,n,s,o,a,h=i,l=t.options.showInternalEdges;for(h.beginPath(),s=0;s<e.length;s++)if((r=e[s]).render.visible)for(a=r.parts.length>1?1:0;a<r.parts.length;a++){for(n=r.parts[a],h.moveTo(n.vertices[0].x,n.vertices[0].y),o=1;o<n.vertices.length;o++)!n.vertices[o-1].isInternal||l?h.lineTo(n.vertices[o].x,n.vertices[o].y):h.moveTo(n.vertices[o].x,n.vertices[o].y),n.vertices[o].isInternal&&!l&&h.moveTo(n.vertices[(o+1)%n.vertices.length].x,n.vertices[(o+1)%n.vertices.length].y);h.lineTo(n.vertices[0].x,n.vertices[0].y)}h.lineWidth=1,h.strokeStyle="#bbb",h.stroke()},r.bodyConvexHulls=function(t,e,i){var r,n,s,o=i;for(o.beginPath(),n=0;n<e.length;n++)if((r=e[n]).render.visible&&1!==r.parts.length){for(o.moveTo(r.vertices[0].x,r.vertices[0].y),s=1;s<r.vertices.length;s++)o.lineTo(r.vertices[s].x,r.vertices[s].y);o.lineTo(r.vertices[0].x,r.vertices[0].y)}o.lineWidth=1,o.strokeStyle="rgba(255,255,255,0.2)",o.stroke()},r.vertexNumbers=function(t,e,i){var r,n,s,o=i;for(r=0;r<e.length;r++){var a=e[r].parts;for(s=a.length>1?1:0;s<a.length;s++){var h=a[s];for(n=0;n<h.vertices.length;n++)o.fillStyle="rgba(255,255,255,0.2)",o.fillText(r+"_"+n,h.position.x+.8*(h.vertices[n].x-h.position.x),h.position.y+.8*(h.vertices[n].y-h.position.y))}}},r.mousePosition=function(t,e,i){var r=i;r.fillStyle="rgba(255,255,255,0.8)",r.fillText(e.position.x+"  "+e.position.y,e.position.x+5,e.position.y-5)},r.bodyBounds=function(t,e,i){var r=i,n=(t.engine,t.options);r.beginPath();for(var s=0;s<e.length;s++)if(e[s].render.visible)for(var o=e[s].parts,a=o.length>1?1:0;a<o.length;a++){var h=o[a];r.rect(h.bounds.min.x,h.bounds.min.y,h.bounds.max.x-h.bounds.min.x,h.bounds.max.y-h.bounds.min.y)}n.wireframes?r.strokeStyle="rgba(255,255,255,0.08)":r.strokeStyle="rgba(0,0,0,0.1)",r.lineWidth=1,r.stroke()},r.bodyAxes=function(t,e,i){var r,n,s,o,a=i,h=(t.engine,t.options);for(a.beginPath(),n=0;n<e.length;n++){var l=e[n],u=l.parts;if(l.render.visible)if(h.showAxes)for(s=u.length>1?1:0;s<u.length;s++)for(r=u[s],o=0;o<r.axes.length;o++){var c=r.axes[o];a.moveTo(r.position.x,r.position.y),a.lineTo(r.position.x+20*c.x,r.position.y+20*c.y)}else for(s=u.length>1?1:0;s<u.length;s++)for(r=u[s],o=0;o<r.axes.length;o++)a.moveTo(r.position.x,r.position.y),a.lineTo((r.vertices[0].x+r.vertices[r.vertices.length-1].x)/2,(r.vertices[0].y+r.vertices[r.vertices.length-1].y)/2)}h.wireframes?(a.strokeStyle="indianred",a.lineWidth=1):(a.strokeStyle="rgba(255, 255, 255, 0.4)",a.globalCompositeOperation="overlay",a.lineWidth=2),a.stroke(),a.globalCompositeOperation="source-over"},r.bodyPositions=function(t,e,i){var r,n,s,o,a=i,h=(t.engine,t.options);for(a.beginPath(),s=0;s<e.length;s++)if((r=e[s]).render.visible)for(o=0;o<r.parts.length;o++)n=r.parts[o],a.arc(n.position.x,n.position.y,3,0,2*Math.PI,!1),a.closePath();for(h.wireframes?a.fillStyle="indianred":a.fillStyle="rgba(0,0,0,0.5)",a.fill(),a.beginPath(),s=0;s<e.length;s++)(r=e[s]).render.visible&&(a.arc(r.positionPrev.x,r.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle="rgba(255,165,0,0.8)",a.fill()},r.bodyVelocity=function(t,e,i){var r=i;r.beginPath();for(var n=0;n<e.length;n++){var s=e[n];s.render.visible&&(r.moveTo(s.position.x,s.position.y),r.lineTo(s.position.x+2*(s.position.x-s.positionPrev.x),s.position.y+2*(s.position.y-s.positionPrev.y)))}r.lineWidth=3,r.strokeStyle="cornflowerblue",r.stroke()},r.bodyIds=function(t,e,i){var r,n,s=i;for(r=0;r<e.length;r++)if(e[r].render.visible){var o=e[r].parts;for(n=o.length>1?1:0;n<o.length;n++){var a=o[n];s.font="12px Arial",s.fillStyle="rgba(255,255,255,0.5)",s.fillText(a.id,a.position.x+10,a.position.y-10)}}},r.collisions=function(t,e,i){var r,n,s,o,a=i,h=t.options;for(a.beginPath(),s=0;s<e.length;s++)if((r=e[s]).isActive)for(n=r.collision,o=0;o<r.activeContacts.length;o++){var l=r.activeContacts[o].vertex;a.rect(l.x-1.5,l.y-1.5,3.5,3.5)}for(h.wireframes?a.fillStyle="rgba(255,255,255,0.7)":a.fillStyle="orange",a.fill(),a.beginPath(),s=0;s<e.length;s++)if((r=e[s]).isActive&&(n=r.collision,r.activeContacts.length>0)){var u=r.activeContacts[0].vertex.x,c=r.activeContacts[0].vertex.y;2===r.activeContacts.length&&(u=(r.activeContacts[0].vertex.x+r.activeContacts[1].vertex.x)/2,c=(r.activeContacts[0].vertex.y+r.activeContacts[1].vertex.y)/2),n.bodyB===n.supports[0].body||!0===n.bodyA.isStatic?a.moveTo(u-8*n.normal.x,c-8*n.normal.y):a.moveTo(u+8*n.normal.x,c+8*n.normal.y),a.lineTo(u,c)}h.wireframes?a.strokeStyle="rgba(255,165,0,0.7)":a.strokeStyle="orange",a.lineWidth=1,a.stroke()},r.separations=function(t,e,i){var r,n,s,o,a,h=i,l=t.options;for(h.beginPath(),a=0;a<e.length;a++)if((r=e[a]).isActive){s=(n=r.collision).bodyA;var u=1;(o=n.bodyB).isStatic||s.isStatic||(u=.5),o.isStatic&&(u=0),h.moveTo(o.position.x,o.position.y),h.lineTo(o.position.x-n.penetration.x*u,o.position.y-n.penetration.y*u),u=1,o.isStatic||s.isStatic||(u=.5),s.isStatic&&(u=0),h.moveTo(s.position.x,s.position.y),h.lineTo(s.position.x+n.penetration.x*u,s.position.y+n.penetration.y*u)}l.wireframes?h.strokeStyle="rgba(255,165,0,0.5)":h.strokeStyle="orange",h.stroke()},r.grid=function(t,e,i){var r=i;t.options.wireframes?r.strokeStyle="rgba(255,180,0,0.1)":r.strokeStyle="rgba(255,180,0,0.5)",r.beginPath();for(var s=n.keys(e.buckets),o=0;o<s.length;o++){var a=s[o];if(!(e.buckets[a].length<2)){var h=a.split(/C|R/);r.rect(.5+parseInt(h[1],10)*e.bucketWidth,.5+parseInt(h[2],10)*e.bucketHeight,e.bucketWidth,e.bucketHeight)}}r.lineWidth=1,r.stroke()},r.inspector=function(t,e){var i,r=(t.engine,t.selected),n=t.render,s=n.options;if(s.hasBounds){var o=n.bounds.max.x-n.bounds.min.x,a=n.bounds.max.y-n.bounds.min.y,h=o/n.options.width,l=a/n.options.height;e.scale(1/h,1/l),e.translate(-n.bounds.min.x,-n.bounds.min.y)}for(var u=0;u<r.length;u++){var c=r[u].data;switch(e.translate(.5,.5),e.lineWidth=1,e.strokeStyle="rgba(255,165,0,0.9)",e.setLineDash([1,2]),c.type){case"body":i=c.bounds,e.beginPath(),e.rect(Math.floor(i.min.x-3),Math.floor(i.min.y-3),Math.floor(i.max.x-i.min.x+6),Math.floor(i.max.y-i.min.y+6)),e.closePath(),e.stroke();break;case"constraint":var d=c.pointA;c.bodyA&&(d=c.pointB),e.beginPath(),e.arc(d.x,d.y,10,0,2*Math.PI),e.closePath(),e.stroke()}e.setLineDash([]),e.translate(-.5,-.5)}null!==t.selectStart&&(e.translate(.5,.5),e.lineWidth=1,e.strokeStyle="rgba(255,165,0,0.6)",e.fillStyle="rgba(255,165,0,0.1)",i=t.selectBounds,e.beginPath(),e.rect(Math.floor(i.min.x),Math.floor(i.min.y),Math.floor(i.max.x-i.min.x),Math.floor(i.max.y-i.min.y)),e.closePath(),e.stroke(),e.fill(),e.translate(-.5,-.5)),s.hasBounds&&e.setTransform(1,0,0,1,0,0)};var i=function(t,e){var i=document.createElement("canvas");return i.width=t,i.height=e,i.oncontextmenu=function(){return!1},i.onselectstart=function(){return!1},i},c=function(t){var e=t.getContext("2d");return(window.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1)},d=function(t,e){var i=t.textures[e];return i||((i=t.textures[e]=new Image).src=e,i)},p=function(t,e){var i=e;/(jpg|gif|png)$/.test(e)&&(i="url("+e+")"),t.canvas.style.background=i,t.canvas.style.backgroundSize="contain",t.currentBackground=e}}()},{"../body/Composite":2,"../collision/Grid":6,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../geometry/Bounds":26,"../geometry/Vector":28}],32:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Bounds"),s=t("../body/Composite"),o=t("../core/Common"),a=t("../core/Events"),h=t("../geometry/Vector");!function(){var t,e;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout((function(){t(o.now())}),1e3/60)},e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(t){o.warn("RenderPixi.create: Matter.RenderPixi is deprecated (see docs)");var e={controller:r,engine:null,element:null,frameRequestId:null,canvas:null,renderer:null,container:null,spriteContainer:null,pixiOptions:null,options:{width:800,height:600,background:"#fafafa",wireframeBackground:"#222",hasBounds:!1,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1}},i=o.extend(e,t),n=!i.options.wireframes&&"transparent"===i.options.background;return i.pixiOptions=i.pixiOptions||{view:i.canvas,transparent:n,antialias:!0,backgroundColor:t.background},i.mouse=t.mouse,i.engine=t.engine,i.renderer=i.renderer||new PIXI.WebGLRenderer(i.options.width,i.options.height,i.pixiOptions),i.container=i.container||new PIXI.Container,i.spriteContainer=i.spriteContainer||new PIXI.Container,i.canvas=i.canvas||i.renderer.view,i.bounds=i.bounds||{min:{x:0,y:0},max:{x:i.options.width,y:i.options.height}},a.on(i.engine,"beforeUpdate",(function(){r.clear(i)})),i.textures={},i.sprites={},i.primitives={},i.container.addChild(i.spriteContainer),o.isElement(i.element)?i.element.appendChild(i.canvas):o.warn('No "render.element" passed, "render.canvas" was not inserted into document.'),i.canvas.oncontextmenu=function(){return!1},i.canvas.onselectstart=function(){return!1},i},r.run=function(e){!function i(n){e.frameRequestId=t(i),r.world(e)}()},r.stop=function(t){e(t.frameRequestId)},r.clear=function(t){for(var e=t.container,i=t.spriteContainer;e.children[0];)e.removeChild(e.children[0]);for(;i.children[0];)i.removeChild(i.children[0]);var r=t.sprites["bg-0"];t.textures={},t.sprites={},t.primitives={},t.sprites["bg-0"]=r,r&&e.addChildAt(r,0),t.container.addChild(t.spriteContainer),t.currentBackground=null,e.scale.set(1,1),e.position.set(0,0)},r.setBackground=function(t,e){if(t.currentBackground!==e){var i=e.indexOf&&-1!==e.indexOf("#"),r=t.sprites["bg-0"];if(i){var n=o.colorToNumber(e);t.renderer.backgroundColor=n,r&&t.container.removeChild(r)}else if(!r){var s=u(t,e);(r=t.sprites["bg-0"]=new PIXI.Sprite(s)).position.x=0,r.position.y=0,t.container.addChildAt(r,0)}t.currentBackground=e}},r.world=function(t){var e,i=t.engine.world,o=t.renderer,a=t.container,l=t.options,u=s.allBodies(i),c=s.allConstraints(i),d=[];l.wireframes?r.setBackground(t,l.wireframeBackground):r.setBackground(t,l.background);var p=t.bounds.max.x-t.bounds.min.x,f=t.bounds.max.y-t.bounds.min.y,m=p/t.options.width,y=f/t.options.height;if(l.hasBounds){for(e=0;e<u.length;e++){var v=u[e];v.render.sprite.visible=n.overlaps(v.bounds,t.bounds)}for(e=0;e<c.length;e++){var g=c[e],x=g.bodyA,b=g.bodyB,w=g.pointA,_=g.pointB;x&&(w=h.add(x.position,g.pointA)),b&&(_=h.add(b.position,g.pointB)),w&&_&&(n.contains(t.bounds,w)||n.contains(t.bounds,_))&&d.push(g)}a.scale.set(1/m,1/y),a.position.set(-t.bounds.min.x*(1/m),-t.bounds.min.y*(1/y))}else d=c;for(e=0;e<u.length;e++)r.body(t,u[e]);for(e=0;e<d.length;e++)r.constraint(t,d[e]);o.render(a)},r.constraint=function(t,e){var i=(t.engine,e.bodyA),r=e.bodyB,n=e.pointA,s=e.pointB,a=t.container,h=e.render,l="c-"+e.id,u=t.primitives[l];u||(u=t.primitives[l]=new PIXI.Graphics),h.visible&&e.pointA&&e.pointB?(-1===o.indexOf(a.children,u)&&a.addChild(u),u.clear(),u.beginFill(0,0),u.lineStyle(h.lineWidth,o.colorToNumber(h.strokeStyle),1),i?u.moveTo(i.position.x+n.x,i.position.y+n.y):u.moveTo(n.x,n.y),r?u.lineTo(r.position.x+s.x,r.position.y+s.y):u.lineTo(s.x,s.y),u.endFill()):u.clear()},r.body=function(t,e){var r=(t.engine,e.render);if(r.visible)if(r.sprite&&r.sprite.texture){var n="b-"+e.id,s=t.sprites[n],a=t.spriteContainer;s||(s=t.sprites[n]=i(t,e)),-1===o.indexOf(a.children,s)&&a.addChild(s),s.position.x=e.position.x,s.position.y=e.position.y,s.rotation=e.angle,s.scale.x=r.sprite.xScale||1,s.scale.y=r.sprite.yScale||1}else{var h="b-"+e.id,u=t.primitives[h],c=t.container;u||((u=t.primitives[h]=l(t,e)).initialAngle=e.angle),-1===o.indexOf(c.children,u)&&c.addChild(u),u.position.x=e.position.x,u.position.y=e.position.y,u.rotation=e.angle-u.initialAngle}};var i=function(t,e){var i=e.render.sprite.texture,r=u(t,i),n=new PIXI.Sprite(r);return n.anchor.x=e.render.sprite.xOffset,n.anchor.y=e.render.sprite.yOffset,n},l=function(t,e){var i,r=e.render,n=t.options,s=new PIXI.Graphics,a=o.colorToNumber(r.fillStyle),h=o.colorToNumber(r.strokeStyle),l=o.colorToNumber(r.strokeStyle),u=o.colorToNumber("#bbb"),c=o.colorToNumber("#CD5C5C");s.clear();for(var d=e.parts.length>1?1:0;d<e.parts.length;d++){i=e.parts[d],n.wireframes?(s.beginFill(0,0),s.lineStyle(1,u,1)):(s.beginFill(a,1),s.lineStyle(r.lineWidth,h,1)),s.moveTo(i.vertices[0].x-e.position.x,i.vertices[0].y-e.position.y);for(var p=1;p<i.vertices.length;p++)s.lineTo(i.vertices[p].x-e.position.x,i.vertices[p].y-e.position.y);s.lineTo(i.vertices[0].x-e.position.x,i.vertices[0].y-e.position.y),s.endFill(),(n.showAngleIndicator||n.showAxes)&&(s.beginFill(0,0),n.wireframes?s.lineStyle(1,c,1):s.lineStyle(1,l),s.moveTo(i.position.x-e.position.x,i.position.y-e.position.y),s.lineTo((i.vertices[0].x+i.vertices[i.vertices.length-1].x)/2-e.position.x,(i.vertices[0].y+i.vertices[i.vertices.length-1].y)/2-e.position.y),s.endFill())}return s},u=function(t,e){var i=t.textures[e];return i||(i=t.textures[e]=PIXI.Texture.fromImage(e)),i}}()},{"../body/Composite":2,"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"../geometry/Vector":28}]},{},[30])(30)}).call(this,i(4))},function(t,e,i){var r,n,s;!function(i){var o=/iPhone/i,a=/iPod/i,h=/iPad/i,l=/\bAndroid(?:.+)Mobile\b/i,u=/Android/i,c=/\bAndroid(?:.+)SD4930UR\b/i,d=/\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i,p=/Windows Phone/i,f=/\bWindows(?:.+)ARM\b/i,m=/BlackBerry/i,y=/BB10/i,v=/Opera Mini/i,g=/\b(CriOS|Chrome)(?:.+)Mobile/i,x=/Mobile(?:.+)Firefox\b/i;function b(t,e){return t.test(e)}function w(t){var e=t||("undefined"!=typeof navigator?navigator.userAgent:""),i=e.split("[FBAN");void 0!==i[1]&&(e=i[0]),void 0!==(i=e.split("Twitter"))[1]&&(e=i[0]);var r={apple:{phone:b(o,e)&&!b(p,e),ipod:b(a,e),tablet:!b(o,e)&&b(h,e)&&!b(p,e),device:(b(o,e)||b(a,e)||b(h,e))&&!b(p,e)},amazon:{phone:b(c,e),tablet:!b(c,e)&&b(d,e),device:b(c,e)||b(d,e)},android:{phone:!b(p,e)&&b(c,e)||!b(p,e)&&b(l,e),tablet:!b(p,e)&&!b(c,e)&&!b(l,e)&&(b(d,e)||b(u,e)),device:!b(p,e)&&(b(c,e)||b(d,e)||b(l,e)||b(u,e))||b(/\bokhttp\b/i,e)},windows:{phone:b(p,e),tablet:b(f,e),device:b(p,e)||b(f,e)},other:{blackberry:b(m,e),blackberry10:b(y,e),opera:b(v,e),firefox:b(x,e),chrome:b(g,e),device:b(m,e)||b(y,e)||b(v,e)||b(x,e)||b(g,e)}};return r.any=r.apple.device||r.android.device||r.windows.device||r.other.device,r.phone=r.apple.phone||r.android.phone||r.windows.phone,r.tablet=r.apple.tablet||r.android.tablet||r.windows.tablet,r}t.exports&&"undefined"==typeof window?t.exports=w:t.exports&&"undefined"!=typeof window?(t.exports=w(),t.exports.isMobile=w):(n=[],r=i.isMobile=w(),void 0===(s="function"==typeof r?r.apply(e,n):r)||(t.exports=s))}(this)},function(t,e,i){"use strict";var r=i(7),n=i(9);function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=x,e.resolve=function(t,e){return x(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?x(t,!1,!0).resolveObject(e):e},e.format=function(t){n.isString(t)&&(t=x(t));return t instanceof s?t.format():s.prototype.format.call(t)},e.Url=s;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,h=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(l),c=["%","/","?",";","#"].concat(u),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},y={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},g=i(10);function x(t,e,i){if(t&&n.isObject(t)&&t instanceof s)return t;var r=new s;return r.parse(t,e,i),r}s.prototype.parse=function(t,e,i){if(!n.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var s=t.indexOf("?"),a=-1!==s&&s<t.indexOf("#")?"?":"#",l=t.split(a);l[0]=l[0].replace(/\\/g,"/");var x=t=l.join(a);if(x=x.trim(),!i&&1===t.split("#").length){var b=h.exec(x);if(b)return this.path=x,this.href=x,this.pathname=b[1],b[2]?(this.search=b[2],this.query=e?g.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var w=o.exec(x);if(w){var _=(w=w[0]).toLowerCase();this.protocol=_,x=x.substr(w.length)}if(i||w||x.match(/^\/\/[^@\/]+@[^@\/]+/)){var S="//"===x.substr(0,2);!S||w&&y[w]||(x=x.substr(2),this.slashes=!0)}if(!y[w]&&(S||w&&!v[w])){for(var C,T,I=-1,E=0;E<d.length;E++){-1!==(A=x.indexOf(d[E]))&&(-1===I||A<I)&&(I=A)}-1!==(T=-1===I?x.lastIndexOf("@"):x.lastIndexOf("@",I))&&(C=x.slice(0,T),x=x.slice(T+1),this.auth=decodeURIComponent(C)),I=-1;for(E=0;E<c.length;E++){var A;-1!==(A=x.indexOf(c[E]))&&(-1===I||A<I)&&(I=A)}-1===I&&(I=x.length),this.host=x.slice(0,I),x=x.slice(I),this.parseHost(),this.hostname=this.hostname||"";var M="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!M)for(var P=this.hostname.split(/\./),k=(E=0,P.length);E<k;E++){var B=P[E];if(B&&!B.match(p)){for(var O="",R=0,F=B.length;R<F;R++)B.charCodeAt(R)>127?O+="x":O+=B[R];if(!O.match(p)){var D=P.slice(0,E),L=P.slice(E+1),U=B.match(f);U&&(D.push(U[1]),L.unshift(U[2])),L.length&&(x="/"+L.join(".")+x),this.hostname=D.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),M||(this.hostname=r.toASCII(this.hostname));var N=this.port?":"+this.port:"",V=this.hostname||"";this.host=V+N,this.href+=this.host,M&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==x[0]&&(x="/"+x))}if(!m[_])for(E=0,k=u.length;E<k;E++){var X=u[E];if(-1!==x.indexOf(X)){var j=encodeURIComponent(X);j===X&&(j=escape(X)),x=x.split(X).join(j)}}var z=x.indexOf("#");-1!==z&&(this.hash=x.substr(z),x=x.slice(0,z));var G=x.indexOf("?");if(-1!==G?(this.search=x.substr(G),this.query=x.substr(G+1),e&&(this.query=g.parse(this.query)),x=x.slice(0,G)):e&&(this.search="",this.query={}),x&&(this.pathname=x),v[_]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){N=this.pathname||"";var H=this.search||"";this.path=N+H}return this.href=this.format(),this},s.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",i=this.pathname||"",r=this.hash||"",s=!1,o="";this.host?s=t+this.host:this.hostname&&(s=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&n.isObject(this.query)&&Object.keys(this.query).length&&(o=g.stringify(this.query));var a=this.search||o&&"?"+o||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||v[e])&&!1!==s?(s="//"+(s||""),i&&"/"!==i.charAt(0)&&(i="/"+i)):s||(s=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),e+s+(i=i.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(a=a.replace("#","%23"))+r},s.prototype.resolve=function(t){return this.resolveObject(x(t,!1,!0)).format()},s.prototype.resolveObject=function(t){if(n.isString(t)){var e=new s;e.parse(t,!1,!0),t=e}for(var i=new s,r=Object.keys(this),o=0;o<r.length;o++){var a=r[o];i[a]=this[a]}if(i.hash=t.hash,""===t.href)return i.href=i.format(),i;if(t.slashes&&!t.protocol){for(var h=Object.keys(t),l=0;l<h.length;l++){var u=h[l];"protocol"!==u&&(i[u]=t[u])}return v[i.protocol]&&i.hostname&&!i.pathname&&(i.path=i.pathname="/"),i.href=i.format(),i}if(t.protocol&&t.protocol!==i.protocol){if(!v[t.protocol]){for(var c=Object.keys(t),d=0;d<c.length;d++){var p=c[d];i[p]=t[p]}return i.href=i.format(),i}if(i.protocol=t.protocol,t.host||y[t.protocol])i.pathname=t.pathname;else{for(var f=(t.pathname||"").split("/");f.length&&!(t.host=f.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),i.pathname=f.join("/")}if(i.search=t.search,i.query=t.query,i.host=t.host||"",i.auth=t.auth,i.hostname=t.hostname||t.host,i.port=t.port,i.pathname||i.search){var m=i.pathname||"",g=i.search||"";i.path=m+g}return i.slashes=i.slashes||t.slashes,i.href=i.format(),i}var x=i.pathname&&"/"===i.pathname.charAt(0),b=t.host||t.pathname&&"/"===t.pathname.charAt(0),w=b||x||i.host&&t.pathname,_=w,S=i.pathname&&i.pathname.split("/")||[],C=(f=t.pathname&&t.pathname.split("/")||[],i.protocol&&!v[i.protocol]);if(C&&(i.hostname="",i.port=null,i.host&&(""===S[0]?S[0]=i.host:S.unshift(i.host)),i.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===f[0]?f[0]=t.host:f.unshift(t.host)),t.host=null),w=w&&(""===f[0]||""===S[0])),b)i.host=t.host||""===t.host?t.host:i.host,i.hostname=t.hostname||""===t.hostname?t.hostname:i.hostname,i.search=t.search,i.query=t.query,S=f;else if(f.length)S||(S=[]),S.pop(),S=S.concat(f),i.search=t.search,i.query=t.query;else if(!n.isNullOrUndefined(t.search)){if(C)i.hostname=i.host=S.shift(),(M=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=M.shift(),i.host=i.hostname=M.shift());return i.search=t.search,i.query=t.query,n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.href=i.format(),i}if(!S.length)return i.pathname=null,i.search?i.path="/"+i.search:i.path=null,i.href=i.format(),i;for(var T=S.slice(-1)[0],I=(i.host||t.host||S.length>1)&&("."===T||".."===T)||""===T,E=0,A=S.length;A>=0;A--)"."===(T=S[A])?S.splice(A,1):".."===T?(S.splice(A,1),E++):E&&(S.splice(A,1),E--);if(!w&&!_)for(;E--;E)S.unshift("..");!w||""===S[0]||S[0]&&"/"===S[0].charAt(0)||S.unshift(""),I&&"/"!==S.join("/").substr(-1)&&S.push("");var M,P=""===S[0]||S[0]&&"/"===S[0].charAt(0);C&&(i.hostname=i.host=P?"":S.length?S.shift():"",(M=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=M.shift(),i.host=i.hostname=M.shift()));return(w=w||i.host&&S.length)&&!P&&S.unshift(""),S.length?i.pathname=S.join("/"):(i.pathname=null,i.path=null),n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.auth=t.auth||i.auth,i.slashes=i.slashes||t.slashes,i.href=i.format(),i},s.prototype.parseHost=function(){var t=this.host,e=a.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(13);function n(t,e,i){return{dx:-e-t*r.SQUISH_2D,dy:-i-t*r.SQUISH_2D,xsb:e,ysb:i}}function s(t,e,i,n){return{dx:-e-t*r.SQUISH_3D,dy:-i-t*r.SQUISH_3D,dz:-n-t*r.SQUISH_3D,xsb:e,ysb:i,zsb:n}}function o(t,e,i,n,s){return{dx:-e-t*r.SQUISH_4D,dy:-i-t*r.SQUISH_4D,dz:-n-t*r.SQUISH_4D,dw:-s-t*r.SQUISH_4D,xsb:e,ysb:i,zsb:n,wsb:s}}function a(t){var e=new Uint32Array(1);return e[0]=1664525*t[0]+1013904223,e}e.makeNoise2D=function(t){for(var e=[],i=0;i<r.p2D.length;i+=4){for(var s=r.base2D[r.p2D[i]],o=null,h=null,l=0;l<s.length;l+=3)h=n(s[l],s[l+1],s[l+2]),null===o?e[i/4]=h:o.next=h,o=h;h.next=n(r.p2D[i+1],r.p2D[i+2],r.p2D[i+3])}var u=[];for(i=0;i<r.lookupPairs2D.length;i+=2)u[r.lookupPairs2D[i]]=e[r.lookupPairs2D[i+1]];var c=new Uint8Array(256),d=new Uint8Array(256),p=new Uint8Array(256);for(i=0;i<256;i++)p[i]=i;var f=new Uint32Array(1);for(f[0]=t,f=a(a(a(f))),i=255;i>=0;i--){f=a(f);var m=new Uint32Array(1);m[0]=(f[0]+31)%(i+1),m[0]<0&&(m[0]+=i+1),c[i]=p[m[0]],d[i]=14&c[i],p[m[0]]=p[i]}return function(t,e){for(var i=(t+e)*r.STRETCH_2D,n=t+i,s=e+i,o=Math.floor(n),a=Math.floor(s),h=(o+a)*r.SQUISH_2D,l=t-(o+h),p=e-(a+h),f=n-o,m=s-a,y=f+m,v=0,g=u[f-m+1|y<<1|y+m<<2|y+f<<4];void 0!==g;g=g.next){var x=l+g.dx,b=p+g.dy,w=2-x*x-b*b;if(w>0){var _=o+g.xsb,S=a+g.ysb,C=c[255&_],T=d[C+S&255];v+=w*w*w*w*(r.gradients2D[T]*x+r.gradients2D[T+1]*b)}}return v*r.NORM_2D}},e.makeNoise3D=function(t){for(var e=[],i=0;i<r.p3D.length;i+=9){for(var n=r.base3D[r.p3D[i]],o=null,h=null,l=0;l<n.length;l+=4)h=s(n[l],n[l+1],n[l+2],n[l+3]),null===o?e[i/9]=h:o.next=h,o=h;h.next=s(r.p3D[i+1],r.p3D[i+2],r.p3D[i+3],r.p3D[i+4]),h.next.next=s(r.p3D[i+5],r.p3D[i+6],r.p3D[i+7],r.p3D[i+8])}var u=[];for(i=0;i<r.lookupPairs3D.length;i+=2)u[r.lookupPairs3D[i]]=e[r.lookupPairs3D[i+1]];var c=new Uint8Array(256),d=new Uint8Array(256),p=new Uint8Array(256);for(i=0;i<256;i++)p[i]=i;var f=new Uint32Array(1);for(f[0]=t,f=a(a(a(f))),i=255;i>=0;i--){f=a(f);var m=new Uint32Array(1);m[0]=(f[0]+31)%(i+1),m[0]<0&&(m[0]+=i+1),c[i]=p[m[0]],d[i]=c[i]%24*3,p[m[0]]=p[i]}return function(t,e,i){for(var n=(t+e+i)*r.STRETCH_3D,s=t+n,o=e+n,a=i+n,h=Math.floor(s),l=Math.floor(o),p=Math.floor(a),f=(h+l+p)*r.SQUISH_3D,m=t-(h+f),y=e-(l+f),v=i-(p+f),g=s-h,x=o-l,b=a-p,w=g+x+b,_=0,S=u[x-b+1|g-x+1<<1|g-b+1<<2|w<<3|w+b<<5|w+x<<7|w+g<<9];void 0!==S;S=S.next){var C=m+S.dx,T=y+S.dy,I=v+S.dz,E=2-C*C-T*T-I*I;if(E>0){var A=h+S.xsb,M=l+S.ysb,P=p+S.zsb,k=c[255&A],B=c[k+M&255],O=d[B+P&255];_+=E*E*E*E*(r.gradients3D[O]*C+r.gradients3D[O+1]*T+r.gradients3D[O+2]*I)}}return _*r.NORM_3D}},e.makeNoise4D=function(t){for(var e=[],i=0;i<r.p4D.length;i+=16){for(var n=r.base4D[r.p4D[i]],s=null,h=null,l=0;l<n.length;l+=5)h=o(n[l],n[l+1],n[l+2],n[l+3],n[l+4]),null===s?e[i/16]=h:s.next=h,s=h;h.next=o(r.p4D[i+1],r.p4D[i+2],r.p4D[i+3],r.p4D[i+4],r.p4D[i+5]),h.next.next=o(r.p4D[i+6],r.p4D[i+7],r.p4D[i+8],r.p4D[i+9],r.p4D[i+10]),h.next.next.next=o(r.p4D[i+11],r.p4D[i+12],r.p4D[i+13],r.p4D[i+14],r.p4D[i+15])}var u=[];for(i=0;i<r.lookupPairs4D.length;i+=2)u[r.lookupPairs4D[i]]=e[r.lookupPairs4D[i+1]];var c=new Uint8Array(256),d=new Uint8Array(256),p=new Uint8Array(256);for(i=0;i<256;i++)p[i]=i;var f=new Uint32Array(1);for(f[0]=t,f=a(a(a(f))),i=255;i>=0;i--){f=a(f);var m=new Uint32Array(1);m[0]=(f[0]+31)%(i+1),m[0]<0&&(m[0]+=i+1),c[i]=p[m[0]],d[i]=252&c[i],p[m[0]]=p[i]}return function(t,e,i,n){for(var s=(t+e+i+n)*r.STRETCH_4D,o=t+s,a=e+s,h=i+s,l=n+s,p=Math.floor(o),f=Math.floor(a),m=Math.floor(h),y=Math.floor(l),v=(p+f+m+y)*r.SQUISH_4D,g=t-(p+v),x=e-(f+v),b=i-(m+v),w=n-(y+v),_=o-p,S=a-f,C=h-m,T=l-y,I=_+S+C+T,E=0,A=u[C-T+1|S-C+1<<1|S-T+1<<2|_-S+1<<3|_-C+1<<4|_-T+1<<5|I<<6|I+T<<8|I+C<<11|I+S<<14|I+_<<17];void 0!==A;A=A.next){var M=g+A.dx,P=x+A.dy,k=b+A.dz,B=w+A.dw,O=2-M*M-P*P-k*k-B*B;if(O>0){var R=p+A.xsb,F=f+A.ysb,D=m+A.zsb,L=y+A.wsb,U=c[255&R],N=c[U+F&255],V=c[N+D&255],X=d[V+L&255];E+=O*O*O*O*(r.gradients4D[X]*M+r.gradients4D[X+1]*P+r.gradients4D[X+2]*k+r.gradients4D[X+3]*B)}}return E*r.NORM_4D}}},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";var r=Object.prototype.hasOwnProperty,n="~";function s(){}function o(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function a(t,e,i,r,s){if("function"!=typeof i)throw new TypeError("The listener must be a function");var a=new o(i,r||t,s),h=n?n+e:e;return t._events[h]?t._events[h].fn?t._events[h]=[t._events[h],a]:t._events[h].push(a):(t._events[h]=a,t._eventsCount++),t}function h(t,e){0==--t._eventsCount?t._events=new s:delete t._events[e]}function l(){this._events=new s,this._eventsCount=0}Object.create&&(s.prototype=Object.create(null),(new s).__proto__||(n=!1)),l.prototype.eventNames=function(){var t,e,i=[];if(0===this._eventsCount)return i;for(e in t=this._events)r.call(t,e)&&i.push(n?e.slice(1):e);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},l.prototype.listeners=function(t){var e=n?n+t:t,i=this._events[e];if(!i)return[];if(i.fn)return[i.fn];for(var r=0,s=i.length,o=new Array(s);r<s;r++)o[r]=i[r].fn;return o},l.prototype.listenerCount=function(t){var e=n?n+t:t,i=this._events[e];return i?i.fn?1:i.length:0},l.prototype.emit=function(t,e,i,r,s,o){var a=n?n+t:t;if(!this._events[a])return!1;var h,l,u=this._events[a],c=arguments.length;if(u.fn){switch(u.once&&this.removeListener(t,u.fn,void 0,!0),c){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,e),!0;case 3:return u.fn.call(u.context,e,i),!0;case 4:return u.fn.call(u.context,e,i,r),!0;case 5:return u.fn.call(u.context,e,i,r,s),!0;case 6:return u.fn.call(u.context,e,i,r,s,o),!0}for(l=1,h=new Array(c-1);l<c;l++)h[l-1]=arguments[l];u.fn.apply(u.context,h)}else{var d,p=u.length;for(l=0;l<p;l++)switch(u[l].once&&this.removeListener(t,u[l].fn,void 0,!0),c){case 1:u[l].fn.call(u[l].context);break;case 2:u[l].fn.call(u[l].context,e);break;case 3:u[l].fn.call(u[l].context,e,i);break;case 4:u[l].fn.call(u[l].context,e,i,r);break;default:if(!h)for(d=1,h=new Array(c-1);d<c;d++)h[d-1]=arguments[d];u[l].fn.apply(u[l].context,h)}}return!0},l.prototype.on=function(t,e,i){return a(this,t,e,i,!1)},l.prototype.once=function(t,e,i){return a(this,t,e,i,!0)},l.prototype.removeListener=function(t,e,i,r){var s=n?n+t:t;if(!this._events[s])return this;if(!e)return h(this,s),this;var o=this._events[s];if(o.fn)o.fn!==e||r&&!o.once||i&&o.context!==i||h(this,s);else{for(var a=0,l=[],u=o.length;a<u;a++)(o[a].fn!==e||r&&!o[a].once||i&&o[a].context!==i)&&l.push(o[a]);l.length?this._events[s]=1===l.length?l[0]:l:h(this,s)}return this},l.prototype.removeAllListeners=function(t){var e;return t?(e=n?n+t:t,this._events[e]&&h(this,e)):(this._events=new s,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prefixed=n,l.EventEmitter=l,t.exports=l},function(t,e,i){"use strict";function r(t,e,i){i=i||2;var r,a,h,l,u,p,f,y=e&&e.length,v=y?e[0]*i:t.length,g=n(t,0,v,i,!0),x=[];if(!g||g.next===g.prev)return x;if(y&&(g=function(t,e,i,r){var o,a,h,l,u,p=[];for(o=0,a=e.length;o<a;o++)h=e[o]*r,l=o<a-1?e[o+1]*r:t.length,(u=n(t,h,l,r,!1))===u.next&&(u.steiner=!0),p.push(m(u));for(p.sort(c),o=0;o<p.length;o++)d(p[o],i),i=s(i,i.next);return i}(t,e,g,i)),t.length>80*i){r=h=t[0],a=l=t[1];for(var b=i;b<v;b+=i)(u=t[b])<r&&(r=u),(p=t[b+1])<a&&(a=p),u>h&&(h=u),p>l&&(l=p);f=0!==(f=Math.max(h-r,l-a))?1/f:0}return o(g,x,i,r,a,f),x}function n(t,e,i,r,n){var s,o;if(n===A(t,e,i,r)>0)for(s=e;s<i;s+=r)o=T(s,t[s],t[s+1],o);else for(s=i-r;s>=e;s-=r)o=T(s,t[s],t[s+1],o);return o&&x(o,o.next)&&(I(o),o=o.next),o}function s(t,e){if(!t)return t;e||(e=t);var i,r=t;do{if(i=!1,r.steiner||!x(r,r.next)&&0!==g(r.prev,r,r.next))r=r.next;else{if(I(r),(r=e=r.prev)===r.next)break;i=!0}}while(i||r!==e);return e}function o(t,e,i,r,n,c,d){if(t){!d&&c&&function(t,e,i,r){var n=t;do{null===n.z&&(n.z=f(n.x,n.y,e,i,r)),n.prevZ=n.prev,n.nextZ=n.next,n=n.next}while(n!==t);n.prevZ.nextZ=null,n.prevZ=null,function(t){var e,i,r,n,s,o,a,h,l=1;do{for(i=t,t=null,s=null,o=0;i;){for(o++,r=i,a=0,e=0;e<l&&(a++,r=r.nextZ);e++);for(h=l;a>0||h>0&&r;)0!==a&&(0===h||!r||i.z<=r.z)?(n=i,i=i.nextZ,a--):(n=r,r=r.nextZ,h--),s?s.nextZ=n:t=n,n.prevZ=s,s=n;i=r}s.nextZ=null,l*=2}while(o>1)}(n)}(t,r,n,c);for(var p,m,y=t;t.prev!==t.next;)if(p=t.prev,m=t.next,c?h(t,r,n,c):a(t))e.push(p.i/i),e.push(t.i/i),e.push(m.i/i),I(t),t=m.next,y=m.next;else if((t=m)===y){d?1===d?o(t=l(s(t),e,i),e,i,r,n,c,2):2===d&&u(t,e,i,r,n,c):o(s(t),e,i,r,n,c,1);break}}}function a(t){var e=t.prev,i=t,r=t.next;if(g(e,i,r)>=0)return!1;for(var n=t.next.next;n!==t.prev;){if(y(e.x,e.y,i.x,i.y,r.x,r.y,n.x,n.y)&&g(n.prev,n,n.next)>=0)return!1;n=n.next}return!0}function h(t,e,i,r){var n=t.prev,s=t,o=t.next;if(g(n,s,o)>=0)return!1;for(var a=n.x<s.x?n.x<o.x?n.x:o.x:s.x<o.x?s.x:o.x,h=n.y<s.y?n.y<o.y?n.y:o.y:s.y<o.y?s.y:o.y,l=n.x>s.x?n.x>o.x?n.x:o.x:s.x>o.x?s.x:o.x,u=n.y>s.y?n.y>o.y?n.y:o.y:s.y>o.y?s.y:o.y,c=f(a,h,e,i,r),d=f(l,u,e,i,r),p=t.prevZ,m=t.nextZ;p&&p.z>=c&&m&&m.z<=d;){if(p!==t.prev&&p!==t.next&&y(n.x,n.y,s.x,s.y,o.x,o.y,p.x,p.y)&&g(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,m!==t.prev&&m!==t.next&&y(n.x,n.y,s.x,s.y,o.x,o.y,m.x,m.y)&&g(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;p&&p.z>=c;){if(p!==t.prev&&p!==t.next&&y(n.x,n.y,s.x,s.y,o.x,o.y,p.x,p.y)&&g(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;m&&m.z<=d;){if(m!==t.prev&&m!==t.next&&y(n.x,n.y,s.x,s.y,o.x,o.y,m.x,m.y)&&g(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function l(t,e,i){var r=t;do{var n=r.prev,o=r.next.next;!x(n,o)&&b(n,r,r.next,o)&&S(n,o)&&S(o,n)&&(e.push(n.i/i),e.push(r.i/i),e.push(o.i/i),I(r),I(r.next),r=t=o),r=r.next}while(r!==t);return s(r)}function u(t,e,i,r,n,a){var h=t;do{for(var l=h.next.next;l!==h.prev;){if(h.i!==l.i&&v(h,l)){var u=C(h,l);return h=s(h,h.next),u=s(u,u.next),o(h,e,i,r,n,a),void o(u,e,i,r,n,a)}l=l.next}h=h.next}while(h!==t)}function c(t,e){return t.x-e.x}function d(t,e){if(e=function(t,e){var i,r=e,n=t.x,s=t.y,o=-1/0;do{if(s<=r.y&&s>=r.next.y&&r.next.y!==r.y){var a=r.x+(s-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(a<=n&&a>o){if(o=a,a===n){if(s===r.y)return r;if(s===r.next.y)return r.next}i=r.x<r.next.x?r:r.next}}r=r.next}while(r!==e);if(!i)return null;if(n===o)return i;var h,l=i,u=i.x,c=i.y,d=1/0;r=i;do{n>=r.x&&r.x>=u&&n!==r.x&&y(s<c?n:o,s,u,c,s<c?o:n,s,r.x,r.y)&&(h=Math.abs(s-r.y)/(n-r.x),S(r,t)&&(h<d||h===d&&(r.x>i.x||r.x===i.x&&p(i,r)))&&(i=r,d=h)),r=r.next}while(r!==l);return i}(t,e)){var i=C(e,t);s(i,i.next)}}function p(t,e){return g(t.prev,t,e.prev)<0&&g(e.next,t,t.next)<0}function f(t,e,i,r,n){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*n)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*n)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function m(t){var e=t,i=t;do{(e.x<i.x||e.x===i.x&&e.y<i.y)&&(i=e),e=e.next}while(e!==t);return i}function y(t,e,i,r,n,s,o,a){return(n-o)*(e-a)-(t-o)*(s-a)>=0&&(t-o)*(r-a)-(i-o)*(e-a)>=0&&(i-o)*(s-a)-(n-o)*(r-a)>=0}function v(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&b(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&(S(t,e)&&S(e,t)&&function(t,e){var i=t,r=!1,n=(t.x+e.x)/2,s=(t.y+e.y)/2;do{i.y>s!=i.next.y>s&&i.next.y!==i.y&&n<(i.next.x-i.x)*(s-i.y)/(i.next.y-i.y)+i.x&&(r=!r),i=i.next}while(i!==t);return r}(t,e)&&(g(t.prev,t,e.prev)||g(t,e.prev,e))||x(t,e)&&g(t.prev,t,t.next)>0&&g(e.prev,e,e.next)>0)}function g(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function x(t,e){return t.x===e.x&&t.y===e.y}function b(t,e,i,r){var n=_(g(t,e,i)),s=_(g(t,e,r)),o=_(g(i,r,t)),a=_(g(i,r,e));return n!==s&&o!==a||(!(0!==n||!w(t,i,e))||(!(0!==s||!w(t,r,e))||(!(0!==o||!w(i,t,r))||!(0!==a||!w(i,e,r)))))}function w(t,e,i){return e.x<=Math.max(t.x,i.x)&&e.x>=Math.min(t.x,i.x)&&e.y<=Math.max(t.y,i.y)&&e.y>=Math.min(t.y,i.y)}function _(t){return t>0?1:t<0?-1:0}function S(t,e){return g(t.prev,t,t.next)<0?g(t,e,t.next)>=0&&g(t,t.prev,e)>=0:g(t,e,t.prev)<0||g(t,t.next,e)<0}function C(t,e){var i=new E(t.i,t.x,t.y),r=new E(e.i,e.x,e.y),n=t.next,s=e.prev;return t.next=e,e.prev=t,i.next=n,n.prev=i,r.next=i,i.prev=r,s.next=r,r.prev=s,r}function T(t,e,i,r){var n=new E(t,e,i);return r?(n.next=r.next,n.prev=r,r.next.prev=n,r.next=n):(n.prev=n,n.next=n),n}function I(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function E(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function A(t,e,i,r){for(var n=0,s=e,o=i-r;s<i;s+=r)n+=(t[o]-t[s])*(t[s+1]+t[o+1]),o=s;return n}t.exports=r,t.exports.default=r,r.deviation=function(t,e,i,r){var n=e&&e.length,s=n?e[0]*i:t.length,o=Math.abs(A(t,0,s,i));if(n)for(var a=0,h=e.length;a<h;a++){var l=e[a]*i,u=a<h-1?e[a+1]*i:t.length;o-=Math.abs(A(t,l,u,i))}var c=0;for(a=0;a<r.length;a+=3){var d=r[a]*i,p=r[a+1]*i,f=r[a+2]*i;c+=Math.abs((t[d]-t[f])*(t[p+1]-t[d+1])-(t[d]-t[p])*(t[f+1]-t[d+1]))}return 0===o&&0===c?0:Math.abs((c-o)/o)},r.flatten=function(t){for(var e=t[0][0].length,i={vertices:[],holes:[],dimensions:e},r=0,n=0;n<t.length;n++){for(var s=0;s<t[n].length;s++)for(var o=0;o<e;o++)i.vertices.push(t[n][s][o]);n>0&&(r+=t[n-1].length,i.holes.push(r))}return i}},function(t,e,i){(function(t,r){var n;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(s){e&&e.nodeType,t&&t.nodeType;var o="object"==typeof r&&r;o.global!==o&&o.window!==o&&o.self;var a,h=2147483647,l=/^xn--/,u=/[^\x20-\x7E]/,c=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function m(t){throw new RangeError(d[t])}function y(t,e){for(var i=t.length,r=[];i--;)r[i]=e(t[i]);return r}function v(t,e){var i=t.split("@"),r="";return i.length>1&&(r=i[0]+"@",t=i[1]),r+y((t=t.replace(c,".")).split("."),e).join(".")}function g(t){for(var e,i,r=[],n=0,s=t.length;n<s;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<s?56320==(64512&(i=t.charCodeAt(n++)))?r.push(((1023&e)<<10)+(1023&i)+65536):(r.push(e),n--):r.push(e);return r}function x(t){return y(t,(function(t){var e="";return t>65535&&(e+=f((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=f(t)})).join("")}function b(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function w(t,e,i){var r=0;for(t=i?p(t/700):t>>1,t+=p(t/e);t>455;r+=36)t=p(t/35);return p(r+36*t/(t+38))}function _(t){var e,i,r,n,s,o,a,l,u,c,d,f=[],y=t.length,v=0,g=128,b=72;for((i=t.lastIndexOf("-"))<0&&(i=0),r=0;r<i;++r)t.charCodeAt(r)>=128&&m("not-basic"),f.push(t.charCodeAt(r));for(n=i>0?i+1:0;n<y;){for(s=v,o=1,a=36;n>=y&&m("invalid-input"),((l=(d=t.charCodeAt(n++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:36)>=36||l>p((h-v)/o))&&m("overflow"),v+=l*o,!(l<(u=a<=b?1:a>=b+26?26:a-b));a+=36)o>p(h/(c=36-u))&&m("overflow"),o*=c;b=w(v-s,e=f.length+1,0==s),p(v/e)>h-g&&m("overflow"),g+=p(v/e),v%=e,f.splice(v++,0,g)}return x(f)}function S(t){var e,i,r,n,s,o,a,l,u,c,d,y,v,x,_,S=[];for(y=(t=g(t)).length,e=128,i=0,s=72,o=0;o<y;++o)(d=t[o])<128&&S.push(f(d));for(r=n=S.length,n&&S.push("-");r<y;){for(a=h,o=0;o<y;++o)(d=t[o])>=e&&d<a&&(a=d);for(a-e>p((h-i)/(v=r+1))&&m("overflow"),i+=(a-e)*v,e=a,o=0;o<y;++o)if((d=t[o])<e&&++i>h&&m("overflow"),d==e){for(l=i,u=36;!(l<(c=u<=s?1:u>=s+26?26:u-s));u+=36)_=l-c,x=36-c,S.push(f(b(c+_%x,0))),l=p(_/x);S.push(f(b(l,0))),s=w(i,v,r==n),i=0,++r}++i,++e}return S.join("")}a={version:"1.4.1",ucs2:{decode:g,encode:x},decode:_,encode:S,toASCII:function(t){return v(t,(function(t){return u.test(t)?"xn--"+S(t):t}))},toUnicode:function(t){return v(t,(function(t){return l.test(t)?_(t.slice(4).toLowerCase()):t}))}},void 0===(n=function(){return a}.call(e,i,e,t))||(t.exports=n)}()}).call(this,i(8)(t),i(4))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,i){"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},function(t,e,i){"use strict";e.decode=e.parse=i(11),e.encode=e.stringify=i(12)},function(t,e,i){"use strict";function r(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,i,s){e=e||"&",i=i||"=";var o={};if("string"!=typeof t||0===t.length)return o;var a=/\+/g;t=t.split(e);var h=1e3;s&&"number"==typeof s.maxKeys&&(h=s.maxKeys);var l=t.length;h>0&&l>h&&(l=h);for(var u=0;u<l;++u){var c,d,p,f,m=t[u].replace(a,"%20"),y=m.indexOf(i);y>=0?(c=m.substr(0,y),d=m.substr(y+1)):(c=m,d=""),p=decodeURIComponent(c),f=decodeURIComponent(d),r(o,p)?n(o[p])?o[p].push(f):o[p]=[o[p],f]:o[p]=f}return o};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,i){"use strict";var r=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,i,a){return e=e||"&",i=i||"=",null===t&&(t=void 0),"object"==typeof t?s(o(t),(function(o){var a=encodeURIComponent(r(o))+i;return n(t[o])?s(t[o],(function(t){return a+encodeURIComponent(r(t))})).join(e):a+encodeURIComponent(r(t[o]))})).join(e):a?encodeURIComponent(r(a))+i+encodeURIComponent(r(t)):""};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function s(t,e){if(t.map)return t.map(e);for(var i=[],r=0;r<t.length;r++)i.push(e(t[r],r));return i}var o=Object.keys||function(t){var e=[];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.push(i);return e}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NORM_2D=1/47,e.NORM_3D=1/103,e.NORM_4D=1/30,e.SQUISH_2D=(Math.sqrt(3)-1)/2,e.SQUISH_3D=(Math.sqrt(4)-1)/3,e.SQUISH_4D=(Math.sqrt(5)-1)/4,e.STRETCH_2D=(1/Math.sqrt(3)-1)/2,e.STRETCH_3D=(1/Math.sqrt(4)-1)/3,e.STRETCH_4D=(1/Math.sqrt(5)-1)/4,e.base2D=[[1,1,0,1,0,1,0,0,0],[1,1,0,1,0,1,2,1,1]],e.base3D=[[0,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1],[2,1,1,0,2,1,0,1,2,0,1,1,3,1,1,1],[1,1,0,0,1,0,1,0,1,0,0,1,2,1,1,0,2,1,0,1,2,0,1,1]],e.base4D=[[0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1],[3,1,1,1,0,3,1,1,0,1,3,1,0,1,1,3,0,1,1,1,4,1,1,1,1],[1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,2,1,1,0,0,2,1,0,1,0,2,1,0,0,1,2,0,1,1,0,2,0,1,0,1,2,0,0,1,1],[3,1,1,1,0,3,1,1,0,1,3,1,0,1,1,3,0,1,1,1,2,1,1,0,0,2,1,0,1,0,2,1,0,0,1,2,0,1,1,0,2,0,1,0,1,2,0,0,1,1]],e.gradients2D=[5,2,2,5,-5,2,-2,5,5,-2,2,-5,-5,-2,-2,-5],e.gradients3D=[-11,4,4,-4,11,4,-4,4,11,11,4,4,4,11,4,4,4,11,-11,-4,4,-4,-11,4,-4,-4,11,11,-4,4,4,-11,4,4,-4,11,-11,4,-4,-4,11,-4,-4,4,-11,11,4,-4,4,11,-4,4,4,-11,-11,-4,-4,-4,-11,-4,-4,-4,-11,11,-4,-4,4,-11,-4,4,-4,-11],e.gradients4D=[3,1,1,1,1,3,1,1,1,1,3,1,1,1,1,3,-3,1,1,1,-1,3,1,1,-1,1,3,1,-1,1,1,3,3,-1,1,1,1,-3,1,1,1,-1,3,1,1,-1,1,3,-3,-1,1,1,-1,-3,1,1,-1,-1,3,1,-1,-1,1,3,3,1,-1,1,1,3,-1,1,1,1,-3,1,1,1,-1,3,-3,1,-1,1,-1,3,-1,1,-1,1,-3,1,-1,1,-1,3,3,-1,-1,1,1,-3,-1,1,1,-1,-3,1,1,-1,-1,3,-3,-1,-1,1,-1,-3,-1,1,-1,-1,-3,1,-1,-1,-1,3,3,1,1,-1,1,3,1,-1,1,1,3,-1,1,1,1,-3,-3,1,1,-1,-1,3,1,-1,-1,1,3,-1,-1,1,1,-3,3,-1,1,-1,1,-3,1,-1,1,-1,3,-1,1,-1,1,-3,-3,-1,1,-1,-1,-3,1,-1,-1,-1,3,-1,-1,-1,1,-3,3,1,-1,-1,1,3,-1,-1,1,1,-3,-1,1,1,-1,-3,-3,1,-1,-1,-1,3,-1,-1,-1,1,-3,-1,-1,1,-1,-3,3,-1,-1,-1,1,-3,-1,-1,1,-1,-3,-1,1,-1,-1,-3,-3,-1,-1,-1,-1,-3,-1,-1,-1,-1,-3,-1,-1,-1,-1,-3],e.lookupPairs2D=[0,1,1,0,4,1,17,0,20,2,21,2,22,5,23,5,26,4,39,3,42,4,43,3],e.lookupPairs3D=[0,2,1,1,2,2,5,1,6,0,7,0,32,2,34,2,129,1,133,1,160,5,161,5,518,0,519,0,546,4,550,4,645,3,647,3,672,5,673,5,674,4,677,3,678,4,679,3,680,13,681,13,682,12,685,14,686,12,687,14,712,20,714,18,809,21,813,23,840,20,841,21,1198,19,1199,22,1226,18,1230,19,1325,23,1327,22,1352,15,1353,17,1354,15,1357,17,1358,16,1359,16,1360,11,1361,10,1362,11,1365,10,1366,9,1367,9,1392,11,1394,11,1489,10,1493,10,1520,8,1521,8,1878,9,1879,9,1906,7,1910,7,2005,6,2007,6,2032,8,2033,8,2034,7,2037,6,2038,7,2039,6],e.lookupPairs4D=[0,3,1,2,2,3,5,2,6,1,7,1,8,3,9,2,10,3,13,2,16,3,18,3,22,1,23,1,24,3,26,3,33,2,37,2,38,1,39,1,41,2,45,2,54,1,55,1,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,256,3,258,3,264,3,266,3,272,3,274,3,280,3,282,3,2049,2,2053,2,2057,2,2061,2,2081,2,2085,2,2089,2,2093,2,2304,9,2305,9,2312,9,2313,9,16390,1,16391,1,16406,1,16407,1,16422,1,16423,1,16438,1,16439,1,16642,8,16646,8,16658,8,16662,8,18437,6,18439,6,18469,6,18471,6,18688,9,18689,9,18690,8,18693,6,18694,8,18695,6,18696,9,18697,9,18706,8,18710,8,18725,6,18727,6,131128,0,131129,0,131130,0,131131,0,131132,0,131133,0,131134,0,131135,0,131352,7,131354,7,131384,7,131386,7,133161,5,133165,5,133177,5,133181,5,133376,9,133377,9,133384,9,133385,9,133400,7,133402,7,133417,5,133421,5,133432,7,133433,5,133434,7,133437,5,147510,4,147511,4,147518,4,147519,4,147714,8,147718,8,147730,8,147734,8,147736,7,147738,7,147766,4,147767,4,147768,7,147770,7,147774,4,147775,4,149509,6,149511,6,149541,6,149543,6,149545,5,149549,5,149558,4,149559,4,149561,5,149565,5,149566,4,149567,4,149760,9,149761,9,149762,8,149765,6,149766,8,149767,6,149768,9,149769,9,149778,8,149782,8,149784,7,149786,7,149797,6,149799,6,149801,5,149805,5,149814,4,149815,4,149816,7,149817,5,149818,7,149821,5,149822,4,149823,4,149824,37,149825,37,149826,36,149829,34,149830,36,149831,34,149832,37,149833,37,149842,36,149846,36,149848,35,149850,35,149861,34,149863,34,149865,33,149869,33,149878,32,149879,32,149880,35,149881,33,149882,35,149885,33,149886,32,149887,32,150080,49,150082,48,150088,49,150098,48,150104,47,150106,47,151873,46,151877,45,151881,46,151909,45,151913,44,151917,44,152128,49,152129,46,152136,49,152137,46,166214,43,166215,42,166230,43,166247,42,166262,41,166263,41,166466,48,166470,43,166482,48,166486,43,168261,45,168263,42,168293,45,168295,42,168512,31,168513,28,168514,31,168517,28,168518,25,168519,25,280952,40,280953,39,280954,40,280957,39,280958,38,280959,38,281176,47,281178,47,281208,40,281210,40,282985,44,282989,44,283001,39,283005,39,283208,30,283209,27,283224,30,283241,27,283256,22,283257,22,297334,41,297335,41,297342,38,297343,38,297554,29,297558,24,297562,29,297590,24,297594,21,297598,21,299365,26,299367,23,299373,26,299383,23,299389,20,299391,20,299584,31,299585,28,299586,31,299589,28,299590,25,299591,25,299592,30,299593,27,299602,29,299606,24,299608,30,299610,29,299621,26,299623,23,299625,27,299629,26,299638,24,299639,23,299640,22,299641,22,299642,21,299645,20,299646,21,299647,20,299648,61,299649,60,299650,61,299653,60,299654,59,299655,59,299656,58,299657,57,299666,55,299670,54,299672,58,299674,55,299685,52,299687,51,299689,57,299693,52,299702,54,299703,51,299704,56,299705,56,299706,53,299709,50,299710,53,299711,50,299904,61,299906,61,299912,58,299922,55,299928,58,299930,55,301697,60,301701,60,301705,57,301733,52,301737,57,301741,52,301952,79,301953,79,301960,76,301961,76,316038,59,316039,59,316054,54,316071,51,316086,54,316087,51,316290,78,316294,78,316306,73,316310,73,318085,77,318087,77,318117,70,318119,70,318336,79,318337,79,318338,78,318341,77,318342,78,318343,77,430776,56,430777,56,430778,53,430781,50,430782,53,430783,50,431e3,75,431002,72,431032,75,431034,72,432809,74,432813,69,432825,74,432829,69,433032,76,433033,76,433048,75,433065,74,433080,75,433081,74,447158,71,447159,68,447166,71,447167,68,447378,73,447382,73,447386,72,447414,71,447418,72,447422,71,449189,70,449191,70,449197,69,449207,68,449213,69,449215,68,449408,67,449409,67,449410,66,449413,64,449414,66,449415,64,449416,67,449417,67,449426,66,449430,66,449432,65,449434,65,449445,64,449447,64,449449,63,449453,63,449462,62,449463,62,449464,65,449465,63,449466,65,449469,63,449470,62,449471,62,449472,19,449473,19,449474,18,449477,16,449478,18,449479,16,449480,19,449481,19,449490,18,449494,18,449496,17,449498,17,449509,16,449511,16,449513,15,449517,15,449526,14,449527,14,449528,17,449529,15,449530,17,449533,15,449534,14,449535,14,449728,19,449729,19,449730,18,449734,18,449736,19,449737,19,449746,18,449750,18,449752,17,449754,17,449784,17,449786,17,451520,19,451521,19,451525,16,451527,16,451528,19,451529,19,451557,16,451559,16,451561,15,451565,15,451577,15,451581,15,451776,19,451777,19,451784,19,451785,19,465858,18,465861,16,465862,18,465863,16,465874,18,465878,18,465893,16,465895,16,465910,14,465911,14,465918,14,465919,14,466114,18,466118,18,466130,18,466134,18,467909,16,467911,16,467941,16,467943,16,468160,13,468161,13,468162,13,468163,13,468164,13,468165,13,468166,13,468167,13,580568,17,580570,17,580585,15,580589,15,580598,14,580599,14,580600,17,580601,15,580602,17,580605,15,580606,14,580607,14,580824,17,580826,17,580856,17,580858,17,582633,15,582637,15,582649,15,582653,15,582856,12,582857,12,582872,12,582873,12,582888,12,582889,12,582904,12,582905,12,596982,14,596983,14,596990,14,596991,14,597202,11,597206,11,597210,11,597214,11,597234,11,597238,11,597242,11,597246,11,599013,10,599015,10,599021,10,599023,10,599029,10,599031,10,599037,10,599039,10,599232,13,599233,13,599234,13,599235,13,599236,13,599237,13,599238,13,599239,13,599240,12,599241,12,599250,11,599254,11,599256,12,599257,12,599258,11,599262,11,599269,10,599271,10,599272,12,599273,12,599277,10,599279,10,599282,11,599285,10,599286,11,599287,10,599288,12,599289,12,599290,11,599293,10,599294,11,599295,10],e.p2D=[0,0,1,-1,0,0,-1,1,0,2,1,1,1,2,2,0,1,2,0,2,1,0,0,0],e.p3D=[0,0,1,-1,0,0,1,0,-1,0,0,-1,1,0,0,0,1,-1,0,0,-1,0,1,0,0,-1,1,0,2,1,1,0,1,1,1,-1,0,2,1,0,1,1,1,-1,1,0,2,0,1,1,1,-1,1,1,1,3,2,1,0,3,1,2,0,1,3,2,0,1,3,1,0,2,1,3,0,2,1,3,0,1,2,1,1,1,0,0,2,2,0,0,1,1,0,1,0,2,0,2,0,1,1,0,0,1,2,0,0,2,2,0,0,0,0,1,1,-1,1,2,0,0,0,0,1,-1,1,1,2,0,0,0,0,1,1,1,-1,2,3,1,1,1,2,0,0,2,2,3,1,1,1,2,2,0,0,2,3,1,1,1,2,0,2,0,2,1,1,-1,1,2,0,0,2,2,1,1,-1,1,2,2,0,0,2,1,-1,1,1,2,0,0,2,2,1,-1,1,1,2,0,2,0,2,1,1,1,-1,2,2,0,0,2,1,1,1,-1,2,0,2,0],e.p4D=[0,0,1,-1,0,0,0,1,0,-1,0,0,1,0,0,-1,0,0,-1,1,0,0,0,0,1,-1,0,0,0,1,0,-1,0,0,-1,0,1,0,0,0,-1,1,0,0,0,0,1,-1,0,0,-1,0,0,1,0,0,-1,0,1,0,0,0,-1,1,0,2,1,1,0,0,1,1,1,-1,0,1,1,1,0,-1,0,2,1,0,1,0,1,1,-1,1,0,1,1,0,1,-1,0,2,0,1,1,0,1,-1,1,1,0,1,0,1,1,-1,0,2,1,0,0,1,1,1,-1,0,1,1,1,0,-1,1,0,2,0,1,0,1,1,-1,1,0,1,1,0,1,-1,1,0,2,0,0,1,1,1,-1,0,1,1,1,0,-1,1,1,1,4,2,1,1,0,4,1,2,1,0,4,1,1,2,0,1,4,2,1,0,1,4,1,2,0,1,4,1,1,0,2,1,4,2,0,1,1,4,1,0,2,1,4,1,0,1,2,1,4,0,2,1,1,4,0,1,2,1,4,0,1,1,2,1,2,1,1,0,0,3,2,1,0,0,3,1,2,0,0,1,2,1,0,1,0,3,2,0,1,0,3,1,0,2,0,1,2,0,1,1,0,3,0,2,1,0,3,0,1,2,0,1,2,1,0,0,1,3,2,0,0,1,3,1,0,0,2,1,2,0,1,0,1,3,0,2,0,1,3,0,1,0,2,1,2,0,0,1,1,3,0,0,2,1,3,0,0,1,2,2,3,1,1,1,0,2,1,1,1,-1,2,2,0,0,0,2,3,1,1,0,1,2,1,1,-1,1,2,2,0,0,0,2,3,1,0,1,1,2,1,-1,1,1,2,2,0,0,0,2,3,1,1,1,0,2,1,1,1,-1,2,0,2,0,0,2,3,1,1,0,1,2,1,1,-1,1,2,0,2,0,0,2,3,0,1,1,1,2,-1,1,1,1,2,0,2,0,0,2,3,1,1,1,0,2,1,1,1,-1,2,0,0,2,0,2,3,1,0,1,1,2,1,-1,1,1,2,0,0,2,0,2,3,0,1,1,1,2,-1,1,1,1,2,0,0,2,0,2,3,1,1,0,1,2,1,1,-1,1,2,0,0,0,2,2,3,1,0,1,1,2,1,-1,1,1,2,0,0,0,2,2,3,0,1,1,1,2,-1,1,1,1,2,0,0,0,2,2,1,1,1,-1,0,1,1,1,0,-1,0,0,0,0,0,2,1,1,-1,1,0,1,1,0,1,-1,0,0,0,0,0,2,1,-1,1,1,0,1,0,1,1,-1,0,0,0,0,0,2,1,1,-1,0,1,1,1,0,-1,1,0,0,0,0,0,2,1,-1,1,0,1,1,0,1,-1,1,0,0,0,0,0,2,1,-1,0,1,1,1,0,-1,1,1,0,0,0,0,0,2,1,1,1,-1,0,1,1,1,0,-1,2,2,0,0,0,2,1,1,-1,1,0,1,1,0,1,-1,2,2,0,0,0,2,1,1,-1,0,1,1,1,0,-1,1,2,2,0,0,0,2,1,1,1,-1,0,1,1,1,0,-1,2,0,2,0,0,2,1,-1,1,1,0,1,0,1,1,-1,2,0,2,0,0,2,1,-1,1,0,1,1,0,1,-1,1,2,0,2,0,0,2,1,1,-1,1,0,1,1,0,1,-1,2,0,0,2,0,2,1,-1,1,1,0,1,0,1,1,-1,2,0,0,2,0,2,1,-1,0,1,1,1,0,-1,1,1,2,0,0,2,0,2,1,1,-1,0,1,1,1,0,-1,1,2,0,0,0,2,2,1,-1,1,0,1,1,0,1,-1,1,2,0,0,0,2,2,1,-1,0,1,1,1,0,-1,1,1,2,0,0,0,2,3,1,1,0,0,0,2,2,0,0,0,2,1,1,1,-1,3,1,0,1,0,0,2,0,2,0,0,2,1,1,1,-1,3,1,0,0,1,0,2,0,0,2,0,2,1,1,1,-1,3,1,1,0,0,0,2,2,0,0,0,2,1,1,-1,1,3,1,0,1,0,0,2,0,2,0,0,2,1,1,-1,1,3,1,0,0,0,1,2,0,0,0,2,2,1,1,-1,1,3,1,1,0,0,0,2,2,0,0,0,2,1,-1,1,1,3,1,0,0,1,0,2,0,0,2,0,2,1,-1,1,1,3,1,0,0,0,1,2,0,0,0,2,2,1,-1,1,1,3,1,0,1,0,0,2,0,2,0,0,2,-1,1,1,1,3,1,0,0,1,0,2,0,0,2,0,2,-1,1,1,1,3,1,0,0,0,1,2,0,0,0,2,2,-1,1,1,1,3,3,2,1,0,0,3,1,2,0,0,4,1,1,1,1,3,3,2,0,1,0,3,1,0,2,0,4,1,1,1,1,3,3,0,2,1,0,3,0,1,2,0,4,1,1,1,1,3,3,2,0,0,1,3,1,0,0,2,4,1,1,1,1,3,3,0,2,0,1,3,0,1,0,2,4,1,1,1,1,3,3,0,0,2,1,3,0,0,1,2,4,1,1,1,1,3,3,2,1,0,0,3,1,2,0,0,2,1,1,1,-1,3,3,2,0,1,0,3,1,0,2,0,2,1,1,1,-1,3,3,0,2,1,0,3,0,1,2,0,2,1,1,1,-1,3,3,2,1,0,0,3,1,2,0,0,2,1,1,-1,1,3,3,2,0,0,1,3,1,0,0,2,2,1,1,-1,1,3,3,0,2,0,1,3,0,1,0,2,2,1,1,-1,1,3,3,2,0,1,0,3,1,0,2,0,2,1,-1,1,1,3,3,2,0,0,1,3,1,0,0,2,2,1,-1,1,1,3,3,0,0,2,1,3,0,0,1,2,2,1,-1,1,1,3,3,0,2,1,0,3,0,1,2,0,2,-1,1,1,1,3,3,0,2,0,1,3,0,1,0,2,2,-1,1,1,1,3,3,0,0,2,1,3,0,0,1,2,2,-1,1,1,1]},function(t,e,i){"use strict";i.r(e);class r{constructor(){this.filePaths=["sprites/catWalk1.json","sprites/catStop.json","sprites/catIdle.json","sprites/catJump.json","sprites/wallSlide.json","sprites/catHang.json","sprites/catClimbFull.json","sprites/catFall.json","sprites/cathouse_r1.png","sprites/tileSet2.json","sprites/torchSprites.json","sprites/keys.json","sprites/menuButtons.json","sprites/color_map_1.png","sprites/color_map_2.png","sprites/color_map_3.png","shaders/lightFilterVert.GLSL","shaders/lightFilterFrag.GLSL","shaders/lightVert.GLSL","shaders/lightFrag.GLSL","shaders/catnip-effect/catnipVert.GLSL","shaders/catnip-effect/catnipFrag.GLSL","shaders/dissolve/dissolveVert.GLSL","shaders/dissolve/dissolveFrag.GLSL","shaders/BezierDisplacementFilter/BezierDispVert.GLSL","shaders/BezierDisplacementFilter/BezierDispFrag.GLSL","shaders/PaletteSwap/paletteSwap.GLSL"]}array(){return this.filePaths}}let n=PIXI.loader,s=PIXI.loader.resources;var o=i(0),a=i.n(o),h=function(t){this.items=[],this._name=t,this._aliasCount=0},l={empty:{configurable:!0},name:{configurable:!0}};h.prototype.emit=function(t,e,i,r,n,s,o,a){if(arguments.length>8)throw new Error("max arguments reached");var h=this,l=h.name,u=h.items;this._aliasCount++;for(var c=0,d=u.length;c<d;c++)u[c][l](t,e,i,r,n,s,o,a);return u===this.items&&this._aliasCount--,this},h.prototype.ensureNonAliasedItems=function(){this._aliasCount>0&&this.items.length>1&&(this._aliasCount=0,this.items=this.items.slice(0))},h.prototype.add=function(t){return t[this._name]&&(this.ensureNonAliasedItems(),this.remove(t),this.items.push(t)),this},h.prototype.remove=function(t){var e=this.items.indexOf(t);return-1!==e&&(this.ensureNonAliasedItems(),this.items.splice(e,1)),this},h.prototype.contains=function(t){return-1!==this.items.indexOf(t)},h.prototype.removeAll=function(){return this.ensureNonAliasedItems(),this.items.length=0,this},h.prototype.destroy=function(){this.removeAll(),this.items=null,this._name=null},l.empty.get=function(){return 0===this.items.length},l.name.get=function(){return this._name},Object.defineProperties(h.prototype,l),h.prototype.dispatch=h.prototype.emit,h.prototype.run=h.prototype.emit;var u=i(1),c=i.n(u);var d={MIPMAP_TEXTURES:1,ANISOTROPIC_LEVEL:0,RESOLUTION:1,FILTER_RESOLUTION:1,SPRITE_MAX_TEXTURES:
/*!
 * @pixi/settings - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/settings is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
function(t){var e=!0;if(c.a.tablet||c.a.phone){if(e=!1,c.a.apple.device){var i=navigator.userAgent.match(/OS (\d+)_(\d+)?/);if(i)parseInt(i[1],10)>=11&&(e=!0)}if(c.a.android.device){var r=navigator.userAgent.match(/Android\s([0-9.]*)/);if(r)parseInt(r[1],10)>=7&&(e=!0)}}return e?t:4}(32),SPRITE_BATCH_SIZE:4096,RENDER_OPTIONS:{view:null,antialias:!1,forceFXAA:!1,autoDensity:!1,transparent:!1,backgroundColor:0,clearBeforeRender:!0,preserveDrawingBuffer:!1,width:800,height:600,legacy:!1},GC_MODE:0,GC_MAX_IDLE:3600,GC_MAX_CHECK_COUNT:600,WRAP_MODE:33071,SCALE_MODE:1,PRECISION_VERTEX:"highp",PRECISION_FRAGMENT:c.a.apple.device?"highp":"mediump",CAN_UPLOAD_SAME_BUFFER:!c.a.apple.device,CREATE_IMAGE_BITMAP:!1,ROUND_PIXELS:!1},p=i(5),f=i.n(p),m=(i(6),i(2)),y=i.n(m),v=0,g=1,x=2,b=0,w=1,_=0,S=1,C=2,T=3,I=4,E=5,A=6,M=7,P=8,k=9,B=10,O=11,R=12,F=13,D=14,L=15,U=16,N=17,V=18,X=19,j=20,z=21,G=22,H=23,W=24,Y=25,q=26,K=27,Z=28,Q=4,J=5,$=6408,tt=6402,et=3553,it=34067,rt=35866,nt=34069,st=5121,ot=5123,at=5126,ht=36193,lt=1,ut=0,ct=33071,dt=1,pt=1,ft="mediump",mt="highp";
/*!
 * @pixi/utils - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/utils is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
d.RETINA_PREFIX=/@([0-9\.]+)x/,d.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT=!0;var yt,vt=!1;function gt(t,e){return(e=e||[])[0]=(t>>16&255)/255,e[1]=(t>>8&255)/255,e[2]=(255&t)/255,e}function xt(t){return(255*t[0]<<16)+(255*t[1]<<8)+(255*t[2]|0)}var bt=function(){for(var t=[],e=[],i=0;i<32;i++)t[i]=i,e[i]=i;t[N]=_,t[V]=S,t[X]=T,e[_]=N,e[S]=V,e[T]=X;var r=[];return r.push(e),r.push(t),r}();function wt(t,e,i){var r,n=t.length;if(!(e>=n||0===i)){var s=n-(i=e+i>n?n-e:i);for(r=e;r<s;++r)t[r]=t[r+i];t.length=s}}var _t=0;function St(){return++_t}function Ct(t){return t+=0===t,--t,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,(t|=t>>>16)+1}function Tt(t){return!(t&t-1||!t)}function It(t){var e=(t>65535)<<4,i=((t>>>=e)>255)<<3;return e|=i,e|=i=((t>>>=i)>15)<<2,(e|=i=((t>>>=i)>3)<<1)|(t>>>=i)>>1}var Et={},At=Object.create(null),Mt=Object.create(null);var Pt=function(t,e,i){this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.resolution=i||d.RESOLUTION,this.resize(t,e)},kt={width:{configurable:!0},height:{configurable:!0}};Pt.prototype.clear=function(){this.context.setTransform(1,0,0,1,0,0),this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},Pt.prototype.resize=function(t,e){this.canvas.width=t*this.resolution,this.canvas.height=e*this.resolution},Pt.prototype.destroy=function(){this.context=null,this.canvas=null},kt.width.get=function(){return this.canvas.width},kt.width.set=function(t){this.canvas.width=t},kt.height.get=function(){return this.canvas.height},kt.height.set=function(t){this.canvas.height=t},Object.defineProperties(Pt.prototype,kt);var Bt;function Ot(t,e){var i=d.RETINA_PREFIX.exec(t);return i?parseFloat(i[1]):void 0!==e?e:1}var Rt={};
/*!
 * @pixi/ticker - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/ticker is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
d.TARGET_FPMS=.06;var Ft=0,Dt=-25,Lt=function(t,e,i,r){void 0===e&&(e=null),void 0===i&&(i=0),void 0===r&&(r=!1),this.fn=t,this.context=e,this.priority=i,this.once=r,this.next=null,this.previous=null,this._destroyed=!1};Lt.prototype.match=function(t,e){return e=e||null,this.fn===t&&this.context===e},Lt.prototype.emit=function(t){this.fn&&(this.context?this.fn.call(this.context,t):this.fn(t));var e=this.next;return this.once&&this.destroy(!0),this._destroyed&&(this.next=null),e},Lt.prototype.connect=function(t){this.previous=t,t.next&&(t.next.previous=this),this.next=t.next,t.next=this},Lt.prototype.destroy=function(t){void 0===t&&(t=!1),this._destroyed=!0,this.fn=null,this.context=null,this.previous&&(this.previous.next=this.next),this.next&&(this.next.previous=this.previous);var e=this.next;return this.next=t?null:e,this.previous=null,e};var Ut=function(){var t=this;this._head=new Lt(null,null,1/0),this._requestId=null,this._maxElapsedMS=100,this._minElapsedMS=0,this.autoStart=!1,this.deltaTime=1,this.deltaMS=1/d.TARGET_FPMS,this.elapsedMS=1/d.TARGET_FPMS,this.lastTime=-1,this.speed=1,this.started=!1,this._protected=!1,this._lastFrame=-1,this._tick=function(e){t._requestId=null,t.started&&(t.update(e),t.started&&null===t._requestId&&t._head.next&&(t._requestId=requestAnimationFrame(t._tick)))}},Nt={FPS:{configurable:!0},minFPS:{configurable:!0},maxFPS:{configurable:!0}},Vt={shared:{configurable:!0},system:{configurable:!0}};Ut.prototype._requestIfNeeded=function(){null===this._requestId&&this._head.next&&(this.lastTime=performance.now(),this._lastFrame=this.lastTime,this._requestId=requestAnimationFrame(this._tick))},Ut.prototype._cancelIfNeeded=function(){null!==this._requestId&&(cancelAnimationFrame(this._requestId),this._requestId=null)},Ut.prototype._startIfPossible=function(){this.started?this._requestIfNeeded():this.autoStart&&this.start()},Ut.prototype.add=function(t,e,i){return void 0===i&&(i=Ft),this._addListener(new Lt(t,e,i))},Ut.prototype.addOnce=function(t,e,i){return void 0===i&&(i=Ft),this._addListener(new Lt(t,e,i,!0))},Ut.prototype._addListener=function(t){var e=this._head.next,i=this._head;if(e){for(;e;){if(t.priority>e.priority){t.connect(i);break}i=e,e=e.next}t.previous||t.connect(i)}else t.connect(i);return this._startIfPossible(),this},Ut.prototype.remove=function(t,e){for(var i=this._head.next;i;)i=i.match(t,e)?i.destroy():i.next;return this._head.next||this._cancelIfNeeded(),this},Ut.prototype.start=function(){this.started||(this.started=!0,this._requestIfNeeded())},Ut.prototype.stop=function(){this.started&&(this.started=!1,this._cancelIfNeeded())},Ut.prototype.destroy=function(){if(!this._protected){this.stop();for(var t=this._head.next;t;)t=t.destroy(!0);this._head.destroy(),this._head=null}},Ut.prototype.update=function(t){var e;if(void 0===t&&(t=performance.now()),t>this.lastTime){if((e=this.elapsedMS=t-this.lastTime)>this._maxElapsedMS&&(e=this._maxElapsedMS),e*=this.speed,this._minElapsedMS){var i=t-this._lastFrame|0;if(i<this._minElapsedMS)return;this._lastFrame=t-i%this._minElapsedMS}this.deltaMS=e,this.deltaTime=this.deltaMS*d.TARGET_FPMS;for(var r=this._head,n=r.next;n;)n=n.emit(this.deltaTime);r.next||this._cancelIfNeeded()}else this.deltaTime=this.deltaMS=this.elapsedMS=0;this.lastTime=t},Nt.FPS.get=function(){return 1e3/this.elapsedMS},Nt.minFPS.get=function(){return 1e3/this._maxElapsedMS},Nt.minFPS.set=function(t){var e=Math.min(this.maxFPS,t),i=Math.min(Math.max(0,e)/1e3,d.TARGET_FPMS);this._maxElapsedMS=1/i},Nt.maxFPS.get=function(){return this._minElapsedMS?Math.round(1e3/this._minElapsedMS):0},Nt.maxFPS.set=function(t){if(0===t)this._minElapsedMS=0;else{var e=Math.max(this.minFPS,t);this._minElapsedMS=1/(e/1e3)}},Vt.shared.get=function(){if(!Ut._shared){var t=Ut._shared=new Ut;t.autoStart=!0,t._protected=!0}return Ut._shared},Vt.system.get=function(){if(!Ut._system){var t=Ut._system=new Ut;t.autoStart=!0,t._protected=!0}return Ut._system},Object.defineProperties(Ut.prototype,Nt),Object.defineProperties(Ut,Vt);var Xt=function(){};Xt.init=function(t){var e=this;t=Object.assign({autoStart:!0,sharedTicker:!1},t),Object.defineProperty(this,"ticker",{set:function(t){this._ticker&&this._ticker.remove(this.render,this),this._ticker=t,t&&t.add(this.render,this,Dt)},get:function(){return this._ticker}}),this.stop=function(){e._ticker.stop()},this.start=function(){e._ticker.start()},this._ticker=null,this.ticker=t.sharedTicker?Ut.shared:new Ut,t.autoStart&&this.start()},Xt.destroy=function(){if(this._ticker){var t=this._ticker;this.ticker=null,t.destroy()}};
/*!
 * @pixi/math - v5.1.0
 * Compiled Fri, 19 Jul 2019 21:54:36 UTC
 *
 * @pixi/math is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var jt=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e};jt.prototype.clone=function(){return new jt(this.x,this.y)},jt.prototype.copyFrom=function(t){return this.set(t.x,t.y),this},jt.prototype.copyTo=function(t){return t.set(this.x,this.y),t},jt.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},jt.prototype.set=function(t,e){this.x=t||0,this.y=e||(0!==e?this.x:0)};var zt=function(t,e,i,r){void 0===i&&(i=0),void 0===r&&(r=0),this._x=i,this._y=r,this.cb=t,this.scope=e},Gt={x:{configurable:!0},y:{configurable:!0}};zt.prototype.clone=function(t,e){void 0===t&&(t=null),void 0===e&&(e=null);var i=t||this.cb,r=e||this.scope;return new zt(i,r,this._x,this._y)},zt.prototype.set=function(t,e){var i=t||0,r=e||(0!==e?i:0);this._x===i&&this._y===r||(this._x=i,this._y=r,this.cb.call(this.scope))},zt.prototype.copyFrom=function(t){return this._x===t.x&&this._y===t.y||(this._x=t.x,this._y=t.y,this.cb.call(this.scope)),this},zt.prototype.copyTo=function(t){return t.set(this._x,this._y),t},zt.prototype.equals=function(t){return t.x===this._x&&t.y===this._y},Gt.x.get=function(){return this._x},Gt.x.set=function(t){this._x!==t&&(this._x=t,this.cb.call(this.scope))},Gt.y.get=function(){return this._y},Gt.y.set=function(t){this._y!==t&&(this._y=t,this.cb.call(this.scope))},Object.defineProperties(zt.prototype,Gt);var Ht=2*Math.PI,Wt=180/Math.PI,Yt=Math.PI/180,qt=0,Kt=1,Zt=2,Qt=3,Jt=4,$t=function(t,e,i,r,n,s){void 0===t&&(t=1),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=1),void 0===n&&(n=0),void 0===s&&(s=0),this.a=t,this.b=e,this.c=i,this.d=r,this.tx=n,this.ty=s,this.array=null},te={IDENTITY:{configurable:!0},TEMP_MATRIX:{configurable:!0}};$t.prototype.fromArray=function(t){this.a=t[0],this.b=t[1],this.c=t[3],this.d=t[4],this.tx=t[2],this.ty=t[5]},$t.prototype.set=function(t,e,i,r,n,s){return this.a=t,this.b=e,this.c=i,this.d=r,this.tx=n,this.ty=s,this},$t.prototype.toArray=function(t,e){this.array||(this.array=new Float32Array(9));var i=e||this.array;return t?(i[0]=this.a,i[1]=this.b,i[2]=0,i[3]=this.c,i[4]=this.d,i[5]=0,i[6]=this.tx,i[7]=this.ty,i[8]=1):(i[0]=this.a,i[1]=this.c,i[2]=this.tx,i[3]=this.b,i[4]=this.d,i[5]=this.ty,i[6]=0,i[7]=0,i[8]=1),i},$t.prototype.apply=function(t,e){e=e||new jt;var i=t.x,r=t.y;return e.x=this.a*i+this.c*r+this.tx,e.y=this.b*i+this.d*r+this.ty,e},$t.prototype.applyInverse=function(t,e){e=e||new jt;var i=1/(this.a*this.d+this.c*-this.b),r=t.x,n=t.y;return e.x=this.d*i*r+-this.c*i*n+(this.ty*this.c-this.tx*this.d)*i,e.y=this.a*i*n+-this.b*i*r+(-this.ty*this.a+this.tx*this.b)*i,e},$t.prototype.translate=function(t,e){return this.tx+=t,this.ty+=e,this},$t.prototype.scale=function(t,e){return this.a*=t,this.d*=e,this.c*=t,this.b*=e,this.tx*=t,this.ty*=e,this},$t.prototype.rotate=function(t){var e=Math.cos(t),i=Math.sin(t),r=this.a,n=this.c,s=this.tx;return this.a=r*e-this.b*i,this.b=r*i+this.b*e,this.c=n*e-this.d*i,this.d=n*i+this.d*e,this.tx=s*e-this.ty*i,this.ty=s*i+this.ty*e,this},$t.prototype.append=function(t){var e=this.a,i=this.b,r=this.c,n=this.d;return this.a=t.a*e+t.b*r,this.b=t.a*i+t.b*n,this.c=t.c*e+t.d*r,this.d=t.c*i+t.d*n,this.tx=t.tx*e+t.ty*r+this.tx,this.ty=t.tx*i+t.ty*n+this.ty,this},$t.prototype.setTransform=function(t,e,i,r,n,s,o,a,h){return this.a=Math.cos(o+h)*n,this.b=Math.sin(o+h)*n,this.c=-Math.sin(o-a)*s,this.d=Math.cos(o-a)*s,this.tx=t-(i*this.a+r*this.c),this.ty=e-(i*this.b+r*this.d),this},$t.prototype.prepend=function(t){var e=this.tx;if(1!==t.a||0!==t.b||0!==t.c||1!==t.d){var i=this.a,r=this.c;this.a=i*t.a+this.b*t.c,this.b=i*t.b+this.b*t.d,this.c=r*t.a+this.d*t.c,this.d=r*t.b+this.d*t.d}return this.tx=e*t.a+this.ty*t.c+t.tx,this.ty=e*t.b+this.ty*t.d+t.ty,this},$t.prototype.decompose=function(t){var e=this.a,i=this.b,r=this.c,n=this.d,s=-Math.atan2(-r,n),o=Math.atan2(i,e),a=Math.abs(s+o);return a<1e-5||Math.abs(Ht-a)<1e-5?(t.rotation=o,t.skew.x=t.skew.y=0):(t.rotation=0,t.skew.x=s,t.skew.y=o),t.scale.x=Math.sqrt(e*e+i*i),t.scale.y=Math.sqrt(r*r+n*n),t.position.x=this.tx,t.position.y=this.ty,t},$t.prototype.invert=function(){var t=this.a,e=this.b,i=this.c,r=this.d,n=this.tx,s=t*r-e*i;return this.a=r/s,this.b=-e/s,this.c=-i/s,this.d=t/s,this.tx=(i*this.ty-r*n)/s,this.ty=-(t*this.ty-e*n)/s,this},$t.prototype.identity=function(){return this.a=1,this.b=0,this.c=0,this.d=1,this.tx=0,this.ty=0,this},$t.prototype.clone=function(){var t=new $t;return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t},$t.prototype.copyTo=function(t){return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t},$t.prototype.copyFrom=function(t){return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.tx=t.tx,this.ty=t.ty,this},te.IDENTITY.get=function(){return new $t},te.TEMP_MATRIX.get=function(){return new $t},Object.defineProperties($t,te);var ee=[1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1,0,1],ie=[0,1,1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1],re=[0,-1,-1,-1,0,1,1,1,0,1,1,1,0,-1,-1,-1],ne=[1,1,0,-1,-1,-1,0,1,-1,-1,0,1,1,1,0,-1],se=[],oe=[],ae=Math.sign;!function(){for(var t=0;t<16;t++){var e=[];se.push(e);for(var i=0;i<16;i++)for(var r=ae(ee[t]*ee[i]+re[t]*ie[i]),n=ae(ie[t]*ee[i]+ne[t]*ie[i]),s=ae(ee[t]*re[i]+re[t]*ne[i]),o=ae(ie[t]*re[i]+ne[t]*ne[i]),a=0;a<16;a++)if(ee[a]===r&&ie[a]===n&&re[a]===s&&ne[a]===o){e.push(a);break}}for(var h=0;h<16;h++){var l=new $t;l.set(ee[h],ie[h],re[h],ne[h],0,0),oe.push(l)}}();var he={E:0,SE:1,S:2,SW:3,W:4,NW:5,N:6,NE:7,MIRROR_VERTICAL:8,MAIN_DIAGONAL:10,MIRROR_HORIZONTAL:12,REVERSE_DIAGONAL:14,uX:function(t){return ee[t]},uY:function(t){return ie[t]},vX:function(t){return re[t]},vY:function(t){return ne[t]},inv:function(t){return 8&t?15&t:7&-t},add:function(t,e){return se[t][e]},sub:function(t,e){return se[t][he.inv(e)]},rotate180:function(t){return 4^t},isVertical:function(t){return 2==(3&t)},byDirection:function(t,e){return 2*Math.abs(t)<=Math.abs(e)?e>=0?he.S:he.N:2*Math.abs(e)<=Math.abs(t)?t>0?he.E:he.W:e>0?t>0?he.SE:he.SW:t>0?he.NE:he.NW},matrixAppendRotationInv:function(t,e,i,r){void 0===i&&(i=0),void 0===r&&(r=0);var n=oe[he.inv(e)];n.tx=i,n.ty=r,t.append(n)}},le=function(){this.worldTransform=new $t,this.localTransform=new $t,this.position=new zt(this.onChange,this,0,0),this.scale=new zt(this.onChange,this,1,1),this.pivot=new zt(this.onChange,this,0,0),this.skew=new zt(this.updateSkew,this,0,0),this._rotation=0,this._cx=1,this._sx=0,this._cy=0,this._sy=1,this._localID=0,this._currentLocalID=0,this._worldID=0,this._parentID=0},ue={rotation:{configurable:!0}};le.prototype.onChange=function(){this._localID++},le.prototype.updateSkew=function(){this._cx=Math.cos(this._rotation+this.skew._y),this._sx=Math.sin(this._rotation+this.skew._y),this._cy=-Math.sin(this._rotation-this.skew._x),this._sy=Math.cos(this._rotation-this.skew._x),this._localID++},le.prototype.updateLocalTransform=function(){var t=this.localTransform;this._localID!==this._currentLocalID&&(t.a=this._cx*this.scale._x,t.b=this._sx*this.scale._x,t.c=this._cy*this.scale._y,t.d=this._sy*this.scale._y,t.tx=this.position._x-(this.pivot._x*t.a+this.pivot._y*t.c),t.ty=this.position._y-(this.pivot._x*t.b+this.pivot._y*t.d),this._currentLocalID=this._localID,this._parentID=-1)},le.prototype.updateTransform=function(t){var e=this.localTransform;if(this._localID!==this._currentLocalID&&(e.a=this._cx*this.scale._x,e.b=this._sx*this.scale._x,e.c=this._cy*this.scale._y,e.d=this._sy*this.scale._y,e.tx=this.position._x-(this.pivot._x*e.a+this.pivot._y*e.c),e.ty=this.position._y-(this.pivot._x*e.b+this.pivot._y*e.d),this._currentLocalID=this._localID,this._parentID=-1),this._parentID!==t._worldID){var i=t.worldTransform,r=this.worldTransform;r.a=e.a*i.a+e.b*i.c,r.b=e.a*i.b+e.b*i.d,r.c=e.c*i.a+e.d*i.c,r.d=e.c*i.b+e.d*i.d,r.tx=e.tx*i.a+e.ty*i.c+i.tx,r.ty=e.tx*i.b+e.ty*i.d+i.ty,this._parentID=t._worldID,this._worldID++}},le.prototype.setFromMatrix=function(t){t.decompose(this),this._localID++},ue.rotation.get=function(){return this._rotation},ue.rotation.set=function(t){this._rotation!==t&&(this._rotation=t,this.updateSkew())},Object.defineProperties(le.prototype,ue),le.IDENTITY=new le;var ce=function(t,e,i,r){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=0),this.x=Number(t),this.y=Number(e),this.width=Number(i),this.height=Number(r),this.type=Kt},de={left:{configurable:!0},right:{configurable:!0},top:{configurable:!0},bottom:{configurable:!0}},pe={EMPTY:{configurable:!0}};de.left.get=function(){return this.x},de.right.get=function(){return this.x+this.width},de.top.get=function(){return this.y},de.bottom.get=function(){return this.y+this.height},pe.EMPTY.get=function(){return new ce(0,0,0,0)},ce.prototype.clone=function(){return new ce(this.x,this.y,this.width,this.height)},ce.prototype.copyFrom=function(t){return this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this},ce.prototype.copyTo=function(t){return t.x=this.x,t.y=this.y,t.width=this.width,t.height=this.height,t},ce.prototype.contains=function(t,e){return!(this.width<=0||this.height<=0)&&(t>=this.x&&t<this.x+this.width&&e>=this.y&&e<this.y+this.height)},ce.prototype.pad=function(t,e){t=t||0,e=e||(0!==e?t:0),this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e},ce.prototype.fit=function(t){var e=Math.max(this.x,t.x),i=Math.min(this.x+this.width,t.x+t.width),r=Math.max(this.y,t.y),n=Math.min(this.y+this.height,t.y+t.height);this.x=e,this.width=Math.max(i-e,0),this.y=r,this.height=Math.max(n-r,0)},ce.prototype.ceil=function(t,e){void 0===t&&(t=1),void 0===e&&(e=.001);var i=Math.ceil((this.x+this.width-e)*t)/t,r=Math.ceil((this.y+this.height-e)*t)/t;this.x=Math.floor((this.x+e)*t)/t,this.y=Math.floor((this.y+e)*t)/t,this.width=i-this.x,this.height=r-this.y},ce.prototype.enlarge=function(t){var e=Math.min(this.x,t.x),i=Math.max(this.x+this.width,t.x+t.width),r=Math.min(this.y,t.y),n=Math.max(this.y+this.height,t.y+t.height);this.x=e,this.width=i-e,this.y=r,this.height=n-r},Object.defineProperties(ce.prototype,de),Object.defineProperties(ce,pe);var fe=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),this.x=t,this.y=e,this.radius=i,this.type=Zt};fe.prototype.clone=function(){return new fe(this.x,this.y,this.radius)},fe.prototype.contains=function(t,e){if(this.radius<=0)return!1;var i=this.radius*this.radius,r=this.x-t,n=this.y-e;return(r*=r)+(n*=n)<=i},fe.prototype.getBounds=function(){return new ce(this.x-this.radius,this.y-this.radius,2*this.radius,2*this.radius)};var me=function(t,e,i,r){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=0),this.x=t,this.y=e,this.width=i,this.height=r,this.type=Qt};me.prototype.clone=function(){return new me(this.x,this.y,this.width,this.height)},me.prototype.contains=function(t,e){if(this.width<=0||this.height<=0)return!1;var i=(t-this.x)/this.width,r=(e-this.y)/this.height;return(i*=i)+(r*=r)<=1},me.prototype.getBounds=function(){return new ce(this.x-this.width,this.y-this.height,this.width,this.height)};var ye=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(Array.isArray(t[0])&&(t=t[0]),t[0]instanceof jt){for(var i=[],r=0,n=t.length;r<n;r++)i.push(t[r].x,t[r].y);t=i}this.points=t,this.type=qt,this.closeStroke=!0};ye.prototype.clone=function(){var t=new ye(this.points.slice());return t.closeStroke=this.closeStroke,t},ye.prototype.contains=function(t,e){for(var i=!1,r=this.points.length/2,n=0,s=r-1;n<r;s=n++){var o=this.points[2*n],a=this.points[2*n+1],h=this.points[2*s],l=this.points[2*s+1];a>e!=l>e&&t<(e-a)/(l-a)*(h-o)+o&&(i=!i)}return i};var ve=function(t,e,i,r,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=0),void 0===n&&(n=20),this.x=t,this.y=e,this.width=i,this.height=r,this.radius=n,this.type=Jt};ve.prototype.clone=function(){return new ve(this.x,this.y,this.width,this.height,this.radius)},ve.prototype.contains=function(t,e){if(this.width<=0||this.height<=0)return!1;if(t>=this.x&&t<=this.x+this.width&&e>=this.y&&e<=this.y+this.height){if(e>=this.y+this.radius&&e<=this.y+this.height-this.radius||t>=this.x+this.radius&&t<=this.x+this.width-this.radius)return!0;var i=t-(this.x+this.radius),r=e-(this.y+this.radius),n=this.radius*this.radius;if(i*i+r*r<=n)return!0;if((i=t-(this.x+this.width-this.radius))*i+r*r<=n)return!0;if(i*i+(r=e-(this.y+this.height-this.radius))*r<=n)return!0;if((i=t-(this.x+this.radius))*i+r*r<=n)return!0}return!1},
/*!
 * @pixi/display - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/display is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
d.SORTABLE_CHILDREN=!1;var ge=function(){this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0,this.rect=null};ge.prototype.isEmpty=function(){return this.minX>this.maxX||this.minY>this.maxY},ge.prototype.clear=function(){this.updateID++,this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0},ge.prototype.getRectangle=function(t){return this.minX>this.maxX||this.minY>this.maxY?ce.EMPTY:((t=t||new ce(0,0,1,1)).x=this.minX,t.y=this.minY,t.width=this.maxX-this.minX,t.height=this.maxY-this.minY,t)},ge.prototype.addPoint=function(t){this.minX=Math.min(this.minX,t.x),this.maxX=Math.max(this.maxX,t.x),this.minY=Math.min(this.minY,t.y),this.maxY=Math.max(this.maxY,t.y)},ge.prototype.addQuad=function(t){var e=this.minX,i=this.minY,r=this.maxX,n=this.maxY,s=t[0],o=t[1];e=s<e?s:e,i=o<i?o:i,r=s>r?s:r,n=o>n?o:n,e=(s=t[2])<e?s:e,i=(o=t[3])<i?o:i,r=s>r?s:r,n=o>n?o:n,e=(s=t[4])<e?s:e,i=(o=t[5])<i?o:i,r=s>r?s:r,n=o>n?o:n,e=(s=t[6])<e?s:e,i=(o=t[7])<i?o:i,r=s>r?s:r,n=o>n?o:n,this.minX=e,this.minY=i,this.maxX=r,this.maxY=n},ge.prototype.addFrame=function(t,e,i,r,n){var s=t.worldTransform,o=s.a,a=s.b,h=s.c,l=s.d,u=s.tx,c=s.ty,d=this.minX,p=this.minY,f=this.maxX,m=this.maxY,y=o*e+h*i+u,v=a*e+l*i+c;d=y<d?y:d,p=v<p?v:p,f=y>f?y:f,m=v>m?v:m,d=(y=o*r+h*i+u)<d?y:d,p=(v=a*r+l*i+c)<p?v:p,f=y>f?y:f,m=v>m?v:m,d=(y=o*e+h*n+u)<d?y:d,p=(v=a*e+l*n+c)<p?v:p,f=y>f?y:f,m=v>m?v:m,d=(y=o*r+h*n+u)<d?y:d,p=(v=a*r+l*n+c)<p?v:p,f=y>f?y:f,m=v>m?v:m,this.minX=d,this.minY=p,this.maxX=f,this.maxY=m},ge.prototype.addVertexData=function(t,e,i){for(var r=this.minX,n=this.minY,s=this.maxX,o=this.maxY,a=e;a<i;a+=2){var h=t[a],l=t[a+1];r=h<r?h:r,n=l<n?l:n,s=h>s?h:s,o=l>o?l:o}this.minX=r,this.minY=n,this.maxX=s,this.maxY=o},ge.prototype.addVertices=function(t,e,i,r){for(var n=t.worldTransform,s=n.a,o=n.b,a=n.c,h=n.d,l=n.tx,u=n.ty,c=this.minX,d=this.minY,p=this.maxX,f=this.maxY,m=i;m<r;m+=2){var y=e[m],v=e[m+1],g=s*y+a*v+l,x=h*v+o*y+u;c=g<c?g:c,d=x<d?x:d,p=g>p?g:p,f=x>f?x:f}this.minX=c,this.minY=d,this.maxX=p,this.maxY=f},ge.prototype.addBounds=function(t){var e=this.minX,i=this.minY,r=this.maxX,n=this.maxY;this.minX=t.minX<e?t.minX:e,this.minY=t.minY<i?t.minY:i,this.maxX=t.maxX>r?t.maxX:r,this.maxY=t.maxY>n?t.maxY:n},ge.prototype.addBoundsMask=function(t,e){var i=t.minX>e.minX?t.minX:e.minX,r=t.minY>e.minY?t.minY:e.minY,n=t.maxX<e.maxX?t.maxX:e.maxX,s=t.maxY<e.maxY?t.maxY:e.maxY;if(i<=n&&r<=s){var o=this.minX,a=this.minY,h=this.maxX,l=this.maxY;this.minX=i<o?i:o,this.minY=r<a?r:a,this.maxX=n>h?n:h,this.maxY=s>l?s:l}},ge.prototype.addBoundsArea=function(t,e){var i=t.minX>e.x?t.minX:e.x,r=t.minY>e.y?t.minY:e.y,n=t.maxX<e.x+e.width?t.maxX:e.x+e.width,s=t.maxY<e.y+e.height?t.maxY:e.y+e.height;if(i<=n&&r<=s){var o=this.minX,a=this.minY,h=this.maxX,l=this.maxY;this.minX=i<o?i:o,this.minY=r<a?r:a,this.maxX=n>h?n:h,this.maxY=s>l?s:l}};var xe=function(t){function e(){t.call(this),this.tempDisplayObjectParent=null,this.transform=new le,this.alpha=1,this.visible=!0,this.renderable=!0,this.parent=null,this.worldAlpha=1,this._lastSortedIndex=0,this._zIndex=0,this.filterArea=null,this.filters=null,this._enabledFilters=null,this._bounds=new ge,this._boundsID=0,this._lastBoundsID=-1,this._boundsRect=null,this._localBoundsRect=null,this._mask=null,this._destroyed=!1,this.isSprite=!1}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={_tempDisplayObjectParent:{configurable:!0},x:{configurable:!0},y:{configurable:!0},worldTransform:{configurable:!0},localTransform:{configurable:!0},position:{configurable:!0},scale:{configurable:!0},pivot:{configurable:!0},skew:{configurable:!0},rotation:{configurable:!0},angle:{configurable:!0},zIndex:{configurable:!0},worldVisible:{configurable:!0},mask:{configurable:!0}};return e.mixin=function(t){for(var i=Object.keys(t),r=0;r<i.length;++r){var n=i[r];Object.defineProperty(e.prototype,n,Object.getOwnPropertyDescriptor(t,n))}},i._tempDisplayObjectParent.get=function(){return null===this.tempDisplayObjectParent&&(this.tempDisplayObjectParent=new e),this.tempDisplayObjectParent},e.prototype.updateTransform=function(){this.transform.updateTransform(this.parent.transform),this.worldAlpha=this.alpha*this.parent.worldAlpha,this._bounds.updateID++},e.prototype._recursivePostUpdateTransform=function(){this.parent?(this.parent._recursivePostUpdateTransform(),this.transform.updateTransform(this.parent.transform)):this.transform.updateTransform(this._tempDisplayObjectParent.transform)},e.prototype.getBounds=function(t,e){return t||(this.parent?(this._recursivePostUpdateTransform(),this.updateTransform()):(this.parent=this._tempDisplayObjectParent,this.updateTransform(),this.parent=null)),this._boundsID!==this._lastBoundsID&&(this.calculateBounds(),this._lastBoundsID=this._boundsID),e||(this._boundsRect||(this._boundsRect=new ce),e=this._boundsRect),this._bounds.getRectangle(e)},e.prototype.getLocalBounds=function(t){var e=this.transform,i=this.parent;this.parent=null,this.transform=this._tempDisplayObjectParent.transform,t||(this._localBoundsRect||(this._localBoundsRect=new ce),t=this._localBoundsRect);var r=this.getBounds(!1,t);return this.parent=i,this.transform=e,r},e.prototype.toGlobal=function(t,e,i){return void 0===i&&(i=!1),i||(this._recursivePostUpdateTransform(),this.parent?this.displayObjectUpdateTransform():(this.parent=this._tempDisplayObjectParent,this.displayObjectUpdateTransform(),this.parent=null)),this.worldTransform.apply(t,e)},e.prototype.toLocal=function(t,e,i,r){return e&&(t=e.toGlobal(t,i,r)),r||(this._recursivePostUpdateTransform(),this.parent?this.displayObjectUpdateTransform():(this.parent=this._tempDisplayObjectParent,this.displayObjectUpdateTransform(),this.parent=null)),this.worldTransform.applyInverse(t,i)},e.prototype.render=function(t){},e.prototype.setParent=function(t){if(!t||!t.addChild)throw new Error("setParent: Argument must be a Container");return t.addChild(this),t},e.prototype.setTransform=function(t,e,i,r,n,s,o,a,h){return void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=1),void 0===r&&(r=1),void 0===n&&(n=0),void 0===s&&(s=0),void 0===o&&(o=0),void 0===a&&(a=0),void 0===h&&(h=0),this.position.x=t,this.position.y=e,this.scale.x=i||1,this.scale.y=r||1,this.rotation=n,this.skew.x=s,this.skew.y=o,this.pivot.x=a,this.pivot.y=h,this},e.prototype.destroy=function(){this.removeAllListeners(),this.parent&&this.parent.removeChild(this),this.transform=null,this.parent=null,this._bounds=null,this._currentBounds=null,this._mask=null,this.filterArea=null,this.interactive=!1,this.interactiveChildren=!1,this._destroyed=!0},i.x.get=function(){return this.position.x},i.x.set=function(t){this.transform.position.x=t},i.y.get=function(){return this.position.y},i.y.set=function(t){this.transform.position.y=t},i.worldTransform.get=function(){return this.transform.worldTransform},i.localTransform.get=function(){return this.transform.localTransform},i.position.get=function(){return this.transform.position},i.position.set=function(t){this.transform.position.copyFrom(t)},i.scale.get=function(){return this.transform.scale},i.scale.set=function(t){this.transform.scale.copyFrom(t)},i.pivot.get=function(){return this.transform.pivot},i.pivot.set=function(t){this.transform.pivot.copyFrom(t)},i.skew.get=function(){return this.transform.skew},i.skew.set=function(t){this.transform.skew.copyFrom(t)},i.rotation.get=function(){return this.transform.rotation},i.rotation.set=function(t){this.transform.rotation=t},i.angle.get=function(){return this.transform.rotation*Wt},i.angle.set=function(t){this.transform.rotation=t*Yt},i.zIndex.get=function(){return this._zIndex},i.zIndex.set=function(t){this._zIndex=t,this.parent&&(this.parent.sortDirty=!0)},i.worldVisible.get=function(){var t=this;do{if(!t.visible)return!1;t=t.parent}while(t);return!0},i.mask.get=function(){return this._mask},i.mask.set=function(t){this._mask&&(this._mask.renderable=!0,this._mask.isMask=!1),this._mask=t,this._mask&&(this._mask.renderable=!1,this._mask.isMask=!0)},Object.defineProperties(e.prototype,i),e}(f.a);function be(t,e){return t.zIndex===e.zIndex?t._lastSortedIndex-e._lastSortedIndex:t.zIndex-e.zIndex}xe.prototype.displayObjectUpdateTransform=xe.prototype.updateTransform;var we=function(t){function e(){t.call(this),this.children=[],this.sortableChildren=d.SORTABLE_CHILDREN,this.sortDirty=!1}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={width:{configurable:!0},height:{configurable:!0}};return e.prototype.onChildrenChange=function(){},e.prototype.addChild=function(t){var e=arguments,i=arguments.length;if(i>1)for(var r=0;r<i;r++)this.addChild(e[r]);else t.parent&&t.parent.removeChild(t),t.parent=this,this.sortDirty=!0,t.transform._parentID=-1,this.children.push(t),this._boundsID++,this.onChildrenChange(this.children.length-1),this.emit("childAdded",t,this,this.children.length-1),t.emit("added",this);return t},e.prototype.addChildAt=function(t,e){if(e<0||e>this.children.length)throw new Error(t+"addChildAt: The index "+e+" supplied is out of bounds "+this.children.length);return t.parent&&t.parent.removeChild(t),t.parent=this,this.sortDirty=!0,t.transform._parentID=-1,this.children.splice(e,0,t),this._boundsID++,this.onChildrenChange(e),t.emit("added",this),this.emit("childAdded",t,this,e),t},e.prototype.swapChildren=function(t,e){if(t!==e){var i=this.getChildIndex(t),r=this.getChildIndex(e);this.children[i]=e,this.children[r]=t,this.onChildrenChange(i<r?i:r)}},e.prototype.getChildIndex=function(t){var e=this.children.indexOf(t);if(-1===e)throw new Error("The supplied DisplayObject must be a child of the caller");return e},e.prototype.setChildIndex=function(t,e){if(e<0||e>=this.children.length)throw new Error("The index "+e+" supplied is out of bounds "+this.children.length);var i=this.getChildIndex(t);wt(this.children,i,1),this.children.splice(e,0,t),this.onChildrenChange(e)},e.prototype.getChildAt=function(t){if(t<0||t>=this.children.length)throw new Error("getChildAt: Index ("+t+") does not exist.");return this.children[t]},e.prototype.removeChild=function(t){var e=arguments,i=arguments.length;if(i>1)for(var r=0;r<i;r++)this.removeChild(e[r]);else{var n=this.children.indexOf(t);if(-1===n)return null;t.parent=null,t.transform._parentID=-1,wt(this.children,n,1),this._boundsID++,this.onChildrenChange(n),t.emit("removed",this),this.emit("childRemoved",t,this,n)}return t},e.prototype.removeChildAt=function(t){var e=this.getChildAt(t);return e.parent=null,e.transform._parentID=-1,wt(this.children,t,1),this._boundsID++,this.onChildrenChange(t),e.emit("removed",this),this.emit("childRemoved",e,this,t),e},e.prototype.removeChildren=function(t,e){void 0===t&&(t=0);var i,r=t,n="number"==typeof e?e:this.children.length,s=n-r;if(s>0&&s<=n){i=this.children.splice(r,s);for(var o=0;o<i.length;++o)i[o].parent=null,i[o].transform&&(i[o].transform._parentID=-1);this._boundsID++,this.onChildrenChange(t);for(var a=0;a<i.length;++a)i[a].emit("removed",this),this.emit("childRemoved",i[a],this,a);return i}if(0===s&&0===this.children.length)return[];throw new RangeError("removeChildren: numeric values are outside the acceptable range.")},e.prototype.sortChildren=function(){for(var t=!1,e=0,i=this.children.length;e<i;++e){var r=this.children[e];r._lastSortedIndex=e,t||0===r.zIndex||(t=!0)}t&&this.children.length>1&&this.children.sort(be),this.sortDirty=!1},e.prototype.updateTransform=function(){this.sortableChildren&&this.sortDirty&&this.sortChildren(),this._boundsID++,this.transform.updateTransform(this.parent.transform),this.worldAlpha=this.alpha*this.parent.worldAlpha;for(var t=0,e=this.children.length;t<e;++t){var i=this.children[t];i.visible&&i.updateTransform()}},e.prototype.calculateBounds=function(){this._bounds.clear(),this._calculateBounds();for(var t=0;t<this.children.length;t++){var e=this.children[t];e.visible&&e.renderable&&(e.calculateBounds(),e._mask?(e._mask.calculateBounds(),this._bounds.addBoundsMask(e._bounds,e._mask._bounds)):e.filterArea?this._bounds.addBoundsArea(e._bounds,e.filterArea):this._bounds.addBounds(e._bounds))}this._lastBoundsID=this._boundsID},e.prototype._calculateBounds=function(){},e.prototype.render=function(t){if(this.visible&&!(this.worldAlpha<=0)&&this.renderable)if(this._mask||this.filters&&this.filters.length)this.renderAdvanced(t);else{this._render(t);for(var e=0,i=this.children.length;e<i;++e)this.children[e].render(t)}},e.prototype.renderAdvanced=function(t){t.batch.flush();var e=this.filters,i=this._mask;if(e){this._enabledFilters||(this._enabledFilters=[]),this._enabledFilters.length=0;for(var r=0;r<e.length;r++)e[r].enabled&&this._enabledFilters.push(e[r]);this._enabledFilters.length&&t.filter.push(this,this._enabledFilters)}i&&t.mask.push(this,this._mask),this._render(t);for(var n=0,s=this.children.length;n<s;n++)this.children[n].render(t);t.batch.flush(),i&&t.mask.pop(this,this._mask),e&&this._enabledFilters&&this._enabledFilters.length&&t.filter.pop()},e.prototype._render=function(t){},e.prototype.destroy=function(e){t.prototype.destroy.call(this),this.sortDirty=!1;var i="boolean"==typeof e?e:e&&e.children,r=this.removeChildren(0,this.children.length);if(i)for(var n=0;n<r.length;++n)r[n].destroy(e)},i.width.get=function(){return this.scale.x*this.getLocalBounds().width},i.width.set=function(t){var e=this.getLocalBounds().width;this.scale.x=0!==e?t/e:1,this._width=t},i.height.get=function(){return this.scale.y*this.getLocalBounds().height},i.height.set=function(t){var e=this.getLocalBounds().height;this.scale.y=0!==e?t/e:1,this._height=t},Object.defineProperties(e.prototype,i),e}(xe);we.prototype.containerUpdateTransform=we.prototype.updateTransform;
/*!
 * @pixi/core - v5.1.5
 * Compiled Tue, 24 Sep 2019 04:07:05 UTC
 *
 * @pixi/core is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var _e=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this._width=t,this._height=e,this.destroyed=!1,this.internal=!1,this.onResize=new h("setRealSize",2),this.onUpdate=new h("update"),this.onError=new h("onError",1)},Se={valid:{configurable:!0},width:{configurable:!0},height:{configurable:!0}};_e.prototype.bind=function(t){this.onResize.add(t),this.onUpdate.add(t),this.onError.add(t),(this._width||this._height)&&this.onResize.run(this._width,this._height)},_e.prototype.unbind=function(t){this.onResize.remove(t),this.onUpdate.remove(t),this.onError.remove(t)},_e.prototype.resize=function(t,e){t===this._width&&e===this._height||(this._width=t,this._height=e,this.onResize.run(t,e))},Se.valid.get=function(){return!!this._width&&!!this._height},_e.prototype.update=function(){this.destroyed||this.onUpdate.run()},_e.prototype.load=function(){return Promise.resolve()},Se.width.get=function(){return this._width},Se.height.get=function(){return this._height},_e.prototype.upload=function(t,e,i){return!1},_e.prototype.style=function(t,e,i){return!1},_e.prototype.dispose=function(){},_e.prototype.destroy=function(){this.destroyed||(this.destroyed=!0,this.dispose(),this.onError.removeAll(),this.onError=null,this.onResize.removeAll(),this.onResize=null,this.onUpdate.removeAll(),this.onUpdate=null)},Object.defineProperties(_e.prototype,Se);var Ce=function(t){function e(e){var i=e.naturalWidth||e.videoWidth||e.width,r=e.naturalHeight||e.videoHeight||e.height;t.call(this,i,r),this.source=e,this.noSubImage=!1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.crossOrigin=function(t,e,i){void 0===i&&0!==e.indexOf("data:")?t.crossOrigin=function(t,e){if(void 0===e&&(e=window.location),0===t.indexOf("data:"))return"";e=e||window.location,Bt||(Bt=document.createElement("a")),Bt.href=t;var i=!(t=y.a.parse(Bt.href)).port&&""===e.port||t.port===e.port;return t.hostname===e.hostname&&i&&t.protocol===e.protocol?"":"anonymous"}(e):!1!==i&&(t.crossOrigin="string"==typeof i?i:"anonymous")},e.prototype.upload=function(t,e,i,r){var n=t.gl,s=e.realWidth,o=e.realHeight;return r=r||this.source,n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),this.noSubImage||e.target!==n.TEXTURE_2D||i.width!==s||i.height!==o?(i.width=s,i.height=o,n.texImage2D(e.target,0,e.format,e.format,e.type,r)):n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.format,e.type,r),!0},e.prototype.update=function(){if(!this.destroyed){var e=this.source.naturalWidth||this.source.videoWidth||this.source.width,i=this.source.naturalHeight||this.source.videoHeight||this.source.height;this.resize(e,i),t.prototype.update.call(this)}},e.prototype.dispose=function(){this.source=null},e}(_e),Te=function(t){function e(e,i){if(i=i||{},!(e instanceof HTMLImageElement)){var r=new Image;t.crossOrigin(r,e,i.crossorigin),r.src=e,e=r}t.call(this,e),!e.complete&&this._width&&this._height&&(this._width=0,this._height=0),this.url=e.src,this._process=null,this.preserveBitmap=!1,this.createBitmap=(void 0!==i.createBitmap?i.createBitmap:d.CREATE_IMAGE_BITMAP)&&!!window.createImageBitmap,this.premultiplyAlpha=!1!==i.premultiplyAlpha,this.bitmap=null,this._load=null,!1!==i.autoLoad&&this.load()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.load=function(t){var e=this;return void 0!==t&&(this.createBitmap=t),this._load?this._load:(this._load=new Promise((function(t){e.url=e.source.src;var i=e.source,r=function(){e.destroyed||(i.onload=null,i.onerror=null,e.resize(i.width,i.height),e._load=null,e.createBitmap?t(e.process()):t(e))};i.complete&&i.src?r():(i.onload=r,i.onerror=function(t){return e.onError.run(t)})})),this._load)},e.prototype.process=function(){var t=this;return null!==this._process?this._process:null===this.bitmap&&window.createImageBitmap?(this._process=window.createImageBitmap(this.source,0,0,this.source.width,this.source.height,{premultiplyAlpha:this.premultiplyAlpha?"premultiply":"none"}).then((function(e){return t.destroyed?Promise.reject():(t.bitmap=e,t.update(),t._process=null,Promise.resolve(t))})),this._process):Promise.resolve(this)},e.prototype.upload=function(e,i,r){if(i.premultiplyAlpha=this.premultiplyAlpha,!this.createBitmap)return t.prototype.upload.call(this,e,i,r);if(!this.bitmap&&(this.process(),!this.bitmap))return!1;if(t.prototype.upload.call(this,e,i,r,this.bitmap),!this.preserveBitmap){var n=!0;for(var s in i._glTextures){var o=i._glTextures[s];if(o!==r&&o.dirtyId!==i.dirtyId){n=!1;break}}n&&(this.bitmap.close&&this.bitmap.close(),this.bitmap=null)}return!0},e.prototype.dispose=function(){this.source.onload=null,this.source.onerror=null,t.prototype.dispose.call(this),this.bitmap&&(this.bitmap.close(),this.bitmap=null),this._process=null,this._load=null},e}(Ce),Ie=[];function Ee(t,e){if(!t)return null;var i="";if("string"==typeof t){var r=/\.(\w{3,4})(?:$|\?|#)/i.exec(t);r&&(i=r[1].toLowerCase())}for(var n=Ie.length-1;n>=0;--n){var s=Ie[n];if(s.test&&s.test(t,i))return new s(t,e)}return new Te(t,e)}var Ae=function(t){function e(e,i){var r=i||{},n=r.width,s=r.height;if(!n||!s)throw new Error("BufferResource width or height invalid");t.call(this,n,s),this.data=e}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.upload=function(t,e,i){var r=t.gl;return r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),i.width===e.width&&i.height===e.height?r.texSubImage2D(e.target,0,0,0,e.width,e.height,e.format,e.type,this.data):(i.width=e.width,i.height=e.height,r.texImage2D(e.target,0,i.internalFormat,e.width,e.height,0,e.format,i.type,this.data)),!0},e.prototype.dispose=function(){this.data=null},e.test=function(t){return t instanceof Float32Array||t instanceof Uint8Array||t instanceof Uint32Array},e}(_e),Me={scaleMode:ut,format:$,premultiplyAlpha:!1},Pe=function(t){function e(e,i){void 0===e&&(e=null),void 0===i&&(i=null),t.call(this);var r=(i=i||{}).premultiplyAlpha,n=i.mipmap,s=i.anisotropicLevel,o=i.scaleMode,a=i.width,h=i.height,l=i.wrapMode,u=i.format,c=i.type,p=i.target,f=i.resolution,m=i.resourceOptions;!e||e instanceof _e||((e=Ee(e,m)).internal=!0),this.width=a||0,this.height=h||0,this.resolution=f||d.RESOLUTION,this.mipmap=void 0!==n?n:d.MIPMAP_TEXTURES,this.anisotropicLevel=void 0!==s?s:d.ANISOTROPIC_LEVEL,this.wrapMode=l||d.WRAP_MODE,this.scaleMode=void 0!==o?o:d.SCALE_MODE,this.format=u||$,this.type=c||st,this.target=p||et,this.premultiplyAlpha=!1!==r,this.uid=St(),this.touched=0,this.isPowerOfTwo=!1,this._refreshPOT(),this._glTextures={},this.dirtyId=0,this.dirtyStyleId=0,this.cacheId=null,this.valid=a>0&&h>0,this.textureCacheIds=[],this.destroyed=!1,this.resource=null,this._batchEnabled=0,this.setResource(e)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={realWidth:{configurable:!0},realHeight:{configurable:!0}};return i.realWidth.get=function(){return Math.ceil(this.width*this.resolution-1e-4)},i.realHeight.get=function(){return Math.ceil(this.height*this.resolution-1e-4)},e.prototype.setStyle=function(t,e){var i;return void 0!==t&&t!==this.scaleMode&&(this.scaleMode=t,i=!0),void 0!==e&&e!==this.mipmap&&(this.mipmap=e,i=!0),i&&this.dirtyStyleId++,this},e.prototype.setSize=function(t,e,i){return this.resolution=i||this.resolution,this.width=t,this.height=e,this._refreshPOT(),this.update(),this},e.prototype.setRealSize=function(t,e,i){return this.resolution=i||this.resolution,this.width=t/this.resolution,this.height=e/this.resolution,this._refreshPOT(),this.update(),this},e.prototype._refreshPOT=function(){this.isPowerOfTwo=Tt(this.realWidth)&&Tt(this.realHeight)},e.prototype.setResolution=function(t){var e=this.resolution;return e===t?this:(this.resolution=t,this.valid&&(this.width=this.width*e/t,this.height=this.height*e/t,this.emit("update",this)),this._refreshPOT(),this)},e.prototype.setResource=function(t){if(this.resource===t)return this;if(this.resource)throw new Error("Resource can be set only once");return t.bind(this),this.resource=t,this},e.prototype.update=function(){this.valid?(this.dirtyId++,this.dirtyStyleId++,this.emit("update",this)):this.width>0&&this.height>0&&(this.valid=!0,this.emit("loaded",this),this.emit("update",this))},e.prototype.onError=function(t){this.emit("error",this,t)},e.prototype.destroy=function(){this.resource&&(this.resource.unbind(this),this.resource.internal&&this.resource.destroy(),this.resource=null),this.cacheId&&(delete Mt[this.cacheId],delete At[this.cacheId],this.cacheId=null),this.dispose(),e.removeFromCache(this),this.textureCacheIds=null,this.destroyed=!0},e.prototype.dispose=function(){this.emit("dispose",this)},e.from=function(t,i){var r=null;"string"==typeof t?r=t:(t._pixiId||(t._pixiId="pixiid_"+St()),r=t._pixiId);var n=Mt[r];return n||((n=new e(t,i)).cacheId=r,e.addToCache(n,r)),n},e.fromBuffer=function(t,i,r,n){t=t||new Float32Array(i*r*4);var s=new Ae(t,{width:i,height:r}),o=t instanceof Float32Array?at:st;return new e(s,Object.assign(Me,n||{width:i,height:r,type:o}))},e.addToCache=function(t,e){e&&(-1===t.textureCacheIds.indexOf(e)&&t.textureCacheIds.push(e),Mt[e]&&console.warn("BaseTexture added to the cache with an id ["+e+"] that already had an entry"),Mt[e]=t)},e.removeFromCache=function(t){if("string"==typeof t){var e=Mt[t];if(e){var i=e.textureCacheIds.indexOf(t);return i>-1&&e.textureCacheIds.splice(i,1),delete Mt[t],e}}else if(t&&t.textureCacheIds){for(var r=0;r<t.textureCacheIds.length;++r)delete Mt[t.textureCacheIds[r]];return t.textureCacheIds.length=0,t}return null},Object.defineProperties(e.prototype,i),e}(f.a);Pe._globalBatch=0;var ke=function(t){function e(e,i){var r;i=i||{};var n=e;Array.isArray(e)&&(r=e,n=e.length),t.call(this,i.width,i.height),this.items=[],this.itemDirtyIds=[];for(var s=0;s<n;s++){var o=new Pe;this.items.push(o),this.itemDirtyIds.push(-1)}if(this.length=n,this._load=null,r)for(var a=0;a<n;a++)this.addResourceAt(Ee(r[a],i),a)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.dispose=function(){for(var t=0,e=this.length;t<e;t++)this.items[t].destroy();this.items=null,this.itemDirtyIds=null,this._load=null},e.prototype.addResourceAt=function(t,e){if(!this.items[e])throw new Error("Index "+e+" is out of bounds");return t.valid&&!this.valid&&this.resize(t.width,t.height),this.items[e].setResource(t),this},e.prototype.bind=function(e){t.prototype.bind.call(this,e),e.target=rt;for(var i=0;i<this.length;i++)this.items[i].on("update",e.update,e)},e.prototype.unbind=function(e){t.prototype.unbind.call(this,e);for(var i=0;i<this.length;i++)this.items[i].off("update",e.update,e)},e.prototype.load=function(){var t=this;if(this._load)return this._load;var e=this.items.map((function(t){return t.resource})),i=e.map((function(t){return t.load()}));return this._load=Promise.all(i).then((function(){var i=e[0],r=i.width,n=i.height;return t.resize(r,n),Promise.resolve(t)})),this._load},e.prototype.upload=function(t,e,i){var r=this.length,n=this.itemDirtyIds,s=this.items,o=t.gl;i.dirtyId<0&&o.texImage3D(o.TEXTURE_2D_ARRAY,0,e.format,this._width,this._height,r,0,e.format,e.type,null);for(var a=0;a<r;a++){var h=s[a];n[a]<h.dirtyId&&(n[a]=h.dirtyId,h.valid&&o.texSubImage3D(o.TEXTURE_2D_ARRAY,0,0,0,a,h.resource.width,h.resource.height,1,e.format,e.type,h.resource.source))}return!0},e}(_e),Be=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.test=function(t){var e=window.OffscreenCanvas;return!!(e&&t instanceof e)||t instanceof HTMLCanvasElement},e}(Ce),Oe=function(t){function e(i,r){if(r=r||{},t.call(this,i,r),this.length!==e.SIDES)throw new Error("Invalid length. Got "+this.length+", expected 6");for(var n=0;n<e.SIDES;n++)this.items[n].target=nt+n;!1!==r.autoLoad&&this.load()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.bind=function(e){t.prototype.bind.call(this,e),e.target=it},e.prototype.upload=function(t,i,r){for(var n=this.itemDirtyIds,s=0;s<e.SIDES;s++){var o=this.items[s];n[s]<o.dirtyId&&(n[s]=o.dirtyId,o.valid&&o.resource.upload(t,o,r))}return!0},e}(ke);Oe.SIDES=6;var Re=function(t){function e(e,i){i=i||{},t.call(this,document.createElement("canvas")),this._width=0,this._height=0,this.svg=e,this.scale=i.scale||1,this._overrideWidth=i.width,this._overrideHeight=i.height,this._resolve=null,this._crossorigin=i.crossorigin,this._load=null,!1!==i.autoLoad&&this.load()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.load=function(){var t=this;return this._load?this._load:(this._load=new Promise((function(e){if(t._resolve=function(){t.resize(t.source.width,t.source.height),e(t)},/^\<svg/.test(t.svg.trim())){if(!btoa)throw new Error("Your browser doesn't support base64 conversions.");t.svg="data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(t.svg)))}t._loadSvg()})),this._load)},e.prototype._loadSvg=function(){var e=this,i=new Image;t.crossOrigin(i,this.svg,this._crossorigin),i.src=this.svg,i.onerror=function(t){i.onerror=null,e.onError.run(t)},i.onload=function(){var t=i.width,r=i.height;if(!t||!r)throw new Error("The SVG image must have width and height defined (in pixels), canvas API needs them.");var n=t*e.scale,s=r*e.scale;(e._overrideWidth||e._overrideHeight)&&(n=e._overrideWidth||e._overrideHeight/r*t,s=e._overrideHeight||e._overrideWidth/t*r),n=Math.round(n),s=Math.round(s);var o=e.source;o.width=n,o.height=s,o._pixiId="canvas_"+St(),o.getContext("2d").drawImage(i,0,0,t,r,0,0,n,s),e._resolve(),e._resolve=null}},e.getSize=function(t){var i=e.SVG_SIZE.exec(t),r={};return i&&(r[i[1]]=Math.round(parseFloat(i[3])),r[i[5]]=Math.round(parseFloat(i[7]))),r},e.prototype.dispose=function(){t.prototype.dispose.call(this),this._resolve=null,this._crossorigin=null},e.test=function(t,e){return"svg"===e||"string"==typeof t&&0===t.indexOf("data:image/svg+xml;base64")||"string"==typeof t&&0===t.indexOf("<svg")},e}(Ce);Re.SVG_SIZE=/<svg[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*>/i;var Fe=function(t){function e(e,i){if(i=i||{},!(e instanceof HTMLVideoElement)){var r=document.createElement("video");r.setAttribute("preload","auto"),r.setAttribute("webkit-playsinline",""),r.setAttribute("playsinline",""),"string"==typeof e&&(e=[e]),t.crossOrigin(r,e[0].src||e[0],i.crossorigin);for(var n=0;n<e.length;++n){var s=document.createElement("source"),o=e[n],a=o.src,h=o.mime,l=(a=a||e[n]).split("?").shift().toLowerCase(),u=l.substr(l.lastIndexOf(".")+1);h=h||"video/"+u,s.src=a,s.type=h,r.appendChild(s)}e=r}t.call(this,e),this.noSubImage=!0,this._autoUpdate=!0,this._isAutoUpdating=!1,this._updateFPS=i.updateFPS||0,this._msToNextUpdate=0,this.autoPlay=!1!==i.autoPlay,this._load=null,this._resolve=null,this._onCanPlay=this._onCanPlay.bind(this),this._onError=this._onError.bind(this),!1!==i.autoLoad&&this.load()}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={autoUpdate:{configurable:!0},updateFPS:{configurable:!0}};return e.prototype.update=function(e){if(void 0===e&&(e=0),!this.destroyed){var i=Ut.shared.elapsedMS*this.source.playbackRate;this._msToNextUpdate=Math.floor(this._msToNextUpdate-i),(!this._updateFPS||this._msToNextUpdate<=0)&&(t.prototype.update.call(this,e),this._msToNextUpdate=this._updateFPS?Math.floor(1e3/this._updateFPS):0)}},e.prototype.load=function(){var t=this;if(this._load)return this._load;var e=this.source;return(e.readyState===e.HAVE_ENOUGH_DATA||e.readyState===e.HAVE_FUTURE_DATA)&&e.width&&e.height&&(e.complete=!0),e.addEventListener("play",this._onPlayStart.bind(this)),e.addEventListener("pause",this._onPlayStop.bind(this)),this._isSourceReady()?this._onCanPlay():(e.addEventListener("canplay",this._onCanPlay),e.addEventListener("canplaythrough",this._onCanPlay),e.addEventListener("error",this._onError,!0)),this._load=new Promise((function(i){t.valid?i(t):(t._resolve=i,e.load())})),this._load},e.prototype._onError=function(){this.source.removeEventListener("error",this._onError,!0),this.onError.run(event)},e.prototype._isSourcePlaying=function(){var t=this.source;return t.currentTime>0&&!1===t.paused&&!1===t.ended&&t.readyState>2},e.prototype._isSourceReady=function(){return 3===this.source.readyState||4===this.source.readyState},e.prototype._onPlayStart=function(){this.valid||this._onCanPlay(),!this._isAutoUpdating&&this.autoUpdate&&(Ut.shared.add(this.update,this),this._isAutoUpdating=!0)},e.prototype._onPlayStop=function(){this._isAutoUpdating&&(Ut.shared.remove(this.update,this),this._isAutoUpdating=!1)},e.prototype._onCanPlay=function(){var t=this.source;t.removeEventListener("canplay",this._onCanPlay),t.removeEventListener("canplaythrough",this._onCanPlay);var e=this.valid;this.resize(t.videoWidth,t.videoHeight),!e&&this._resolve&&(this._resolve(this),this._resolve=null),this._isSourcePlaying()?this._onPlayStart():this.autoPlay&&t.play()},e.prototype.dispose=function(){this._isAutoUpdating&&Ut.shared.remove(this.update,this),this.source&&(this.source.removeEventListener("error",this._onError,!0),this.source.pause(),this.source.src="",this.source.load()),t.prototype.dispose.call(this)},i.autoUpdate.get=function(){return this._autoUpdate},i.autoUpdate.set=function(t){t!==this._autoUpdate&&(this._autoUpdate=t,!this._autoUpdate&&this._isAutoUpdating?(Ut.shared.remove(this.update,this),this._isAutoUpdating=!1):this._autoUpdate&&!this._isAutoUpdating&&(Ut.shared.add(this.update,this),this._isAutoUpdating=!0))},i.updateFPS.get=function(){return this._updateFPS},i.updateFPS.set=function(t){t!==this._updateFPS&&(this._updateFPS=t)},e.test=function(t,i){return t instanceof HTMLVideoElement||e.TYPES.indexOf(i)>-1},Object.defineProperties(e.prototype,i),e}(Ce);Fe.TYPES=["mp4","m4v","webm","ogg","ogv","h264","avi","mov"];var De=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.test=function(t){return!!window.createImageBitmap&&t instanceof ImageBitmap},e}(Ce);Ie.push(Te,De,Be,Fe,Re,Ae,Oe,ke);var Le=function(t){this.renderer=t};Le.prototype.destroy=function(){this.renderer=null};var Ue=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.upload=function(t,e,i){var r=t.gl;return r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),i.width===e.width&&i.height===e.height?r.texSubImage2D(e.target,0,0,0,e.width,e.height,e.format,e.type,this.data):(i.width=e.width,i.height=e.height,r.texImage2D(e.target,0,r.DEPTH_COMPONENT16,e.width,e.height,0,e.format,e.type,this.data)),!0},e}(Ae),Ne=function(t,e){this.width=Math.ceil(t||100),this.height=Math.ceil(e||100),this.stencil=!1,this.depth=!1,this.dirtyId=0,this.dirtyFormat=0,this.dirtySize=0,this.depthTexture=null,this.colorTextures=[],this.glFramebuffers={},this.disposeRunner=new h("disposeFramebuffer",2)},Ve={colorTexture:{configurable:!0}};Ve.colorTexture.get=function(){return this.colorTextures[0]},Ne.prototype.addColorTexture=function(t,e){return void 0===t&&(t=0),this.colorTextures[t]=e||new Pe(null,{scaleMode:0,resolution:1,mipmap:!1,width:this.width,height:this.height}),this.dirtyId++,this.dirtyFormat++,this},Ne.prototype.addDepthTexture=function(t){return this.depthTexture=t||new Pe(new Ue(null,{width:this.width,height:this.height}),{scaleMode:0,resolution:1,width:this.width,height:this.height,mipmap:!1,format:tt,type:ot}),this.dirtyId++,this.dirtyFormat++,this},Ne.prototype.enableDepth=function(){return this.depth=!0,this.dirtyId++,this.dirtyFormat++,this},Ne.prototype.enableStencil=function(){return this.stencil=!0,this.dirtyId++,this.dirtyFormat++,this},Ne.prototype.resize=function(t,e){if(t=Math.ceil(t),e=Math.ceil(e),t!==this.width||e!==this.height){this.width=t,this.height=e,this.dirtyId++,this.dirtySize++;for(var i=0;i<this.colorTextures.length;i++){var r=this.colorTextures[i],n=r.resolution;r.setSize(t/n,e/n)}if(this.depthTexture){var s=this.depthTexture.resolution;this.depthTexture.setSize(t/s,e/s)}}},Ne.prototype.dispose=function(){this.disposeRunner.run(this,!1)},Object.defineProperties(Ne.prototype,Ve);var Xe=function(t){function e(e){if("number"==typeof e){var i=arguments[0],r=arguments[1],n=arguments[2],s=arguments[3];e={width:i,height:r,scaleMode:n,resolution:s}}t.call(this,null,e);var o=e||{},a=o.width,h=o.height;this.mipmap=!1,this.width=Math.ceil(a)||100,this.height=Math.ceil(h)||100,this.valid=!0,this._canvasRenderTarget=null,this.clearColor=[0,0,0,0],this.framebuffer=new Ne(this.width*this.resolution,this.height*this.resolution).addColorTexture(0,this),this.stencilMaskStack=[],this.filterStack=[{}]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.resize=function(t,e){t=Math.ceil(t),e=Math.ceil(e),this.framebuffer.resize(t*this.resolution,e*this.resolution)},e.prototype.dispose=function(){this.framebuffer.dispose(),t.prototype.dispose.call(this)},e.prototype.destroy=function(){t.prototype.destroy.call(this,!0),this.framebuffer=null},e}(Pe),je=function(){this.x0=0,this.y0=0,this.x1=1,this.y1=0,this.x2=1,this.y2=1,this.x3=0,this.y3=1,this.uvsFloat32=new Float32Array(8)};je.prototype.set=function(t,e,i){var r=e.width,n=e.height;if(i){var s=t.width/2/r,o=t.height/2/n,a=t.x/r+s,h=t.y/n+o;i=he.add(i,he.NW),this.x0=a+s*he.uX(i),this.y0=h+o*he.uY(i),i=he.add(i,2),this.x1=a+s*he.uX(i),this.y1=h+o*he.uY(i),i=he.add(i,2),this.x2=a+s*he.uX(i),this.y2=h+o*he.uY(i),i=he.add(i,2),this.x3=a+s*he.uX(i),this.y3=h+o*he.uY(i)}else this.x0=t.x/r,this.y0=t.y/n,this.x1=(t.x+t.width)/r,this.y1=t.y/n,this.x2=(t.x+t.width)/r,this.y2=(t.y+t.height)/n,this.x3=t.x/r,this.y3=(t.y+t.height)/n;this.uvsFloat32[0]=this.x0,this.uvsFloat32[1]=this.y0,this.uvsFloat32[2]=this.x1,this.uvsFloat32[3]=this.y1,this.uvsFloat32[4]=this.x2,this.uvsFloat32[5]=this.y2,this.uvsFloat32[6]=this.x3,this.uvsFloat32[7]=this.y3};var ze=new je,Ge=function(t){function e(i,r,n,s,o,a){if(t.call(this),this.noFrame=!1,r||(this.noFrame=!0,r=new ce(0,0,1,1)),i instanceof e&&(i=i.baseTexture),this.baseTexture=i,this._frame=r,this.trim=s,this.valid=!1,this.requiresUpdate=!1,this._uvs=ze,this.uvMatrix=null,this.orig=n||r,this._rotate=Number(o||0),!0===o)this._rotate=2;else if(this._rotate%2!=0)throw new Error("attempt to use diamond-shaped UVs. If you are sure, set rotation manually");this.defaultAnchor=a?new jt(a.x,a.y):new jt(0,0),this._updateID=0,this.textureCacheIds=[],i.valid?this.noFrame?i.valid&&this.onBaseTextureUpdated(i):this.frame=r:i.once("loaded",this.onBaseTextureUpdated,this),this.noFrame&&i.on("update",this.onBaseTextureUpdated,this)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={resolution:{configurable:!0},frame:{configurable:!0},rotate:{configurable:!0},width:{configurable:!0},height:{configurable:!0}};return e.prototype.update=function(){this.baseTexture.resource&&this.baseTexture.resource.update()},e.prototype.onBaseTextureUpdated=function(t){if(this.noFrame){if(!this.baseTexture.valid)return;this._frame.width=t.width,this._frame.height=t.height,this.valid=!0,this.updateUvs()}else this.frame=this._frame;this.emit("update",this)},e.prototype.destroy=function(t){if(this.baseTexture){if(t){var i=this.baseTexture.resource;i&&At[i.url]&&e.removeFromCache(i.url),this.baseTexture.destroy()}this.baseTexture.off("update",this.onBaseTextureUpdated,this),this.baseTexture=null}this._frame=null,this._uvs=null,this.trim=null,this.orig=null,this.valid=!1,e.removeFromCache(this),this.textureCacheIds=null},e.prototype.clone=function(){return new e(this.baseTexture,this.frame,this.orig,this.trim,this.rotate,this.defaultAnchor)},e.prototype.updateUvs=function(){this._uvs===ze&&(this._uvs=new je),this._uvs.set(this._frame,this.baseTexture,this.rotate),this._updateID++},e.from=function(t,i){void 0===i&&(i={});var r=null;"string"==typeof t?r=t:(t._pixiId||(t._pixiId="pixiid_"+St()),r=t._pixiId);var n=At[r];return n||(i.resolution||(i.resolution=Ot(t)),(n=new e(new Pe(t,i))).baseTexture.cacheId=r,Pe.addToCache(n.baseTexture,r),e.addToCache(n,r)),n},e.fromBuffer=function(t,i,r,n){return new e(Pe.fromBuffer(t,i,r,n))},e.fromLoader=function(t,i,r){var n=new Te(t);n.url=i;var s=new e(new Pe(n,{scaleMode:d.SCALE_MODE,resolution:Ot(i)}));return r||(r=i),Pe.addToCache(s.baseTexture,r),e.addToCache(s,r),r!==i&&(Pe.addToCache(s.baseTexture,i),e.addToCache(s,i)),s},e.addToCache=function(t,e){e&&(-1===t.textureCacheIds.indexOf(e)&&t.textureCacheIds.push(e),At[e]&&console.warn("Texture added to the cache with an id ["+e+"] that already had an entry"),At[e]=t)},e.removeFromCache=function(t){if("string"==typeof t){var e=At[t];if(e){var i=e.textureCacheIds.indexOf(t);return i>-1&&e.textureCacheIds.splice(i,1),delete At[t],e}}else if(t&&t.textureCacheIds){for(var r=0;r<t.textureCacheIds.length;++r)At[t.textureCacheIds[r]]===t&&delete At[t.textureCacheIds[r]];return t.textureCacheIds.length=0,t}return null},i.resolution.get=function(){return this.baseTexture.resolution},i.frame.get=function(){return this._frame},i.frame.set=function(t){this._frame=t,this.noFrame=!1;var e=t.x,i=t.y,r=t.width,n=t.height,s=e+r>this.baseTexture.width,o=i+n>this.baseTexture.height;if(s||o){var a=s&&o?"and":"or",h="X: "+e+" + "+r+" = "+(e+r)+" > "+this.baseTexture.width,l="Y: "+i+" + "+n+" = "+(i+n)+" > "+this.baseTexture.height;throw new Error("Texture Error: frame does not fit inside the base Texture dimensions: "+h+" "+a+" "+l)}this.valid=r&&n&&this.baseTexture.valid,this.trim||this.rotate||(this.orig=t),this.valid&&this.updateUvs()},i.rotate.get=function(){return this._rotate},i.rotate.set=function(t){this._rotate=t,this.valid&&this.updateUvs()},i.width.get=function(){return this.orig.width},i.height.get=function(){return this.orig.height},Object.defineProperties(e.prototype,i),e}(f.a);function He(t){t.destroy=function(){},t.on=function(){},t.once=function(){},t.emit=function(){}}Ge.EMPTY=new Ge(new Pe),He(Ge.EMPTY),He(Ge.EMPTY.baseTexture),Ge.WHITE=function(){var t=document.createElement("canvas");t.width=16,t.height=16;var e=t.getContext("2d");return e.fillStyle="white",e.fillRect(0,0,16,16),new Ge(new Pe(new Be(t)))}(),He(Ge.WHITE),He(Ge.WHITE.baseTexture);var We=function(t){function e(e,i){var r=null;if(!(e instanceof Xe)){var n=arguments[1],s=arguments[2],o=arguments[3],a=arguments[4];console.warn("Please use RenderTexture.create("+n+", "+s+") instead of the ctor directly."),r=arguments[0],i=null,e=new Xe({width:n,height:s,scaleMode:o,resolution:a})}t.call(this,e,i),this.legacyRenderer=r,this.valid=!0,this.filterFrame=null,this.filterPoolKey=null,this.updateUvs()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.resize=function(t,e,i){void 0===i&&(i=!0),t=Math.ceil(t),e=Math.ceil(e),this.valid=t>0&&e>0,this._frame.width=this.orig.width=t,this._frame.height=this.orig.height=e,i&&this.baseTexture.resize(t,e),this.updateUvs()},e.prototype.setResolution=function(t){var e=this.baseTexture;e.resolution!==t&&(e.setResolution(t),this.resize(e.width,e.height,!1))},e.create=function(t){return"number"==typeof t&&(t={width:t,height:arguments[1],scaleMode:arguments[2],resolution:arguments[3]}),new e(new Xe(t))},e}(Ge),Ye=function(t){this.texturePool={},this.textureOptions=t||{},this.enableFullScreen=!1,this._pixelsWidth=0,this._pixelsHeight=0};Ye.prototype.createTexture=function(t,e){var i=new Xe(Object.assign({width:t,height:e,resolution:1},this.textureOptions));return new We(i)},Ye.prototype.getOptimalTexture=function(t,e,i){void 0===i&&(i=1);var r=Ye.SCREEN_KEY;t*=i,e*=i,this.enableFullScreen&&t===this._pixelsWidth&&e===this._pixelsHeight||(r=(65535&(t=Ct(t)))<<16|65535&(e=Ct(e))),this.texturePool[r]||(this.texturePool[r]=[]);var n=this.texturePool[r].pop();return n||(n=this.createTexture(t,e)),n.filterPoolKey=r,n.setResolution(i),n},Ye.prototype.getFilterTexture=function(t,e){var i=this.getOptimalTexture(t.width,t.height,e||t.resolution);return i.filterFrame=t.filterFrame,i},Ye.prototype.returnTexture=function(t){var e=t.filterPoolKey;t.filterFrame=null,this.texturePool[e].push(t)},Ye.prototype.returnFilterTexture=function(t){this.returnTexture(t)},Ye.prototype.clear=function(t){if(t=!1!==t)for(var e in this.texturePool){var i=this.texturePool[e];if(i)for(var r=0;r<i.length;r++)i[r].destroy(!0)}this.texturePool={}},Ye.prototype.setScreenSize=function(t){if(t.width!==this._pixelsWidth||t.height!==this._pixelsHeight){var e=Ye.SCREEN_KEY,i=this.texturePool[e];if(this.enableFullScreen=t.width>0&&t.height>0,i)for(var r=0;r<i.length;r++)i[r].destroy(!0);this.texturePool[e]=[],this._pixelsWidth=t.width,this._pixelsHeight=t.height}},Ye.SCREEN_KEY="screen";var qe=function(t,e,i,r,n,s,o){void 0===i&&(i=!1),void 0===r&&(r=5126),this.buffer=t,this.size=e,this.normalized=i,this.type=r,this.stride=n,this.start=s,this.instance=o};qe.prototype.destroy=function(){this.buffer=null},qe.from=function(t,e,i,r,n){return new qe(t,e,i,r,n)};var Ke=0,Ze=function(t,e,i){void 0===e&&(e=!0),void 0===i&&(i=!1),this.data=t||new Float32Array(1),this._glBuffers={},this._updateID=0,this.index=i,this.static=e,this.id=Ke++,this.disposeRunner=new h("disposeBuffer",2)};function Qe(t){if(4===t.BYTES_PER_ELEMENT)return t instanceof Float32Array?"Float32Array":t instanceof Uint32Array?"Uint32Array":"Int32Array";if(2===t.BYTES_PER_ELEMENT){if(t instanceof Uint16Array)return"Uint16Array"}else if(1===t.BYTES_PER_ELEMENT&&t instanceof Uint8Array)return"Uint8Array";return null}Ze.prototype.update=function(t){this.data=t||this.data,this._updateID++},Ze.prototype.dispose=function(){this.disposeRunner.run(this,!1)},Ze.prototype.destroy=function(){this.dispose(),this.data=null},Ze.from=function(t){return t instanceof Array&&(t=new Float32Array(t)),new Ze(t)};var Je={Float32Array:Float32Array,Uint32Array:Uint32Array,Int32Array:Int32Array,Uint8Array:Uint8Array};var $e={5126:4,5123:2,5121:1},ti=0,ei={Float32Array:Float32Array,Uint32Array:Uint32Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array},ii=function(t,e){void 0===t&&(t=[]),void 0===e&&(e={}),this.buffers=t,this.indexBuffer=null,this.attributes=e,this.glVertexArrayObjects={},this.id=ti++,this.instanced=!1,this.instanceCount=1,this.disposeRunner=new h("disposeGeometry",2),this.refCount=0};ii.prototype.addAttribute=function(t,e,i,r,n,s,o,a){if(void 0===r&&(r=!1),void 0===a&&(a=!1),!e)throw new Error("You must pass a buffer when creating an attribute");e.data||(e instanceof Array&&(e=new Float32Array(e)),e=new Ze(e));var h=t.split("|");if(h.length>1){for(var l=0;l<h.length;l++)this.addAttribute(h[l],e,i,r,n);return this}var u=this.buffers.indexOf(e);return-1===u&&(this.buffers.push(e),u=this.buffers.length-1),this.attributes[t]=new qe(u,i,r,n,s,o,a),this.instanced=this.instanced||a,this},ii.prototype.getAttribute=function(t){return this.attributes[t]},ii.prototype.getBuffer=function(t){return this.buffers[this.getAttribute(t).buffer]},ii.prototype.addIndex=function(t){return t.data||(t instanceof Array&&(t=new Uint16Array(t)),t=new Ze(t)),t.index=!0,this.indexBuffer=t,-1===this.buffers.indexOf(t)&&this.buffers.push(t),this},ii.prototype.getIndex=function(){return this.indexBuffer},ii.prototype.interleave=function(){if(1===this.buffers.length||2===this.buffers.length&&this.indexBuffer)return this;var t,e=[],i=[],r=new Ze;for(t in this.attributes){var n=this.attributes[t],s=this.buffers[n.buffer];e.push(s.data),i.push(n.size*$e[n.type]/4),n.buffer=0}for(r.data=function(t,e){for(var i=0,r=0,n={},s=0;s<t.length;s++)r+=e[s],i+=t[s].length;for(var o=new ArrayBuffer(4*i),a=null,h=0,l=0;l<t.length;l++){var u=e[l],c=t[l],d=Qe(c);n[d]||(n[d]=new Je[d](o)),a=n[d];for(var p=0;p<c.length;p++){a[(p/u|0)*r+h+p%u]=c[p]}h+=u}return new Float32Array(o)}(e,i),t=0;t<this.buffers.length;t++)this.buffers[t]!==this.indexBuffer&&this.buffers[t].destroy();return this.buffers=[r],this.indexBuffer&&this.buffers.push(this.indexBuffer),this},ii.prototype.getSize=function(){for(var t in this.attributes){var e=this.attributes[t];return this.buffers[e.buffer].data.length/(e.stride/4||e.size)}return 0},ii.prototype.dispose=function(){this.disposeRunner.run(this,!1)},ii.prototype.destroy=function(){this.dispose(),this.buffers=null,this.indexBuffer.destroy(),this.attributes=null},ii.prototype.clone=function(){for(var t=new ii,e=0;e<this.buffers.length;e++)t.buffers[e]=new Ze(this.buffers[e].data.slice());for(var i in this.attributes){var r=this.attributes[i];t.attributes[i]=new qe(r.buffer,r.size,r.normalized,r.type,r.stride,r.start,r.instance)}return this.indexBuffer&&(t.indexBuffer=t.buffers[this.buffers.indexOf(this.indexBuffer)],t.indexBuffer.index=!0),t},ii.merge=function(t){for(var e,i=new ii,r=[],n=[],s=[],o=0;o<t.length;o++){e=t[o];for(var a=0;a<e.buffers.length;a++)n[a]=n[a]||0,n[a]+=e.buffers[a].data.length,s[a]=0}for(var h=0;h<e.buffers.length;h++)r[h]=new(ei[Qe(e.buffers[h].data)])(n[h]),i.buffers[h]=new Ze(r[h]);for(var l=0;l<t.length;l++){e=t[l];for(var u=0;u<e.buffers.length;u++)r[u].set(e.buffers[u].data,s[u]),s[u]+=e.buffers[u].data.length}if(i.attributes=e.attributes,e.indexBuffer){i.indexBuffer=i.buffers[e.buffers.indexOf(e.indexBuffer)],i.indexBuffer.index=!0;for(var c=0,d=0,p=0,f=0,m=0;m<e.buffers.length;m++)if(e.buffers[m]!==e.indexBuffer){f=m;break}for(var y in e.attributes){var v=e.attributes[y];(0|v.buffer)===f&&(d+=v.size*$e[v.type]/4)}for(var g=0;g<t.length;g++){for(var x=t[g].indexBuffer.data,b=0;b<x.length;b++)i.indexBuffer.data[b+p]+=c;c+=e.buffers[f].data.length/d,p+=x.length}}return i};var ri=function(t){function e(){t.call(this),this.addAttribute("aVertexPosition",[0,0,1,0,1,1,0,1]).addIndex([0,1,3,2])}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(ii),ni=function(t){function e(){t.call(this),this.vertices=new Float32Array([-1,-1,1,-1,1,1,-1,1]),this.uvs=new Float32Array([0,0,1,0,1,1,0,1]),this.vertexBuffer=new Ze(this.vertices),this.uvBuffer=new Ze(this.uvs),this.addAttribute("aVertexPosition",this.vertexBuffer).addAttribute("aTextureCoord",this.uvBuffer).addIndex([0,1,2,0,2,3])}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.map=function(t,e){var i=0,r=0;return this.uvs[0]=i,this.uvs[1]=r,this.uvs[2]=i+e.width/t.width,this.uvs[3]=r,this.uvs[4]=i+e.width/t.width,this.uvs[5]=r+e.height/t.height,this.uvs[6]=i,this.uvs[7]=r+e.height/t.height,i=e.x,r=e.y,this.vertices[0]=i,this.vertices[1]=r,this.vertices[2]=i+e.width,this.vertices[3]=r,this.vertices[4]=i+e.width,this.vertices[5]=r+e.height,this.vertices[6]=i,this.vertices[7]=r+e.height,this.invalidate(),this},e.prototype.invalidate=function(){return this.vertexBuffer._updateID++,this.uvBuffer._updateID++,this},e}(ii),si=0,oi=function(t,e){this.uniforms=t,this.group=!0,this.syncUniforms={},this.dirtyId=0,this.id=si++,this.static=!!e};oi.prototype.update=function(){this.dirtyId++},oi.prototype.add=function(t,e,i){this.uniforms[t]=new oi(e,i)},oi.from=function(t,e){return new oi(t,e)};var ai=function(){this.renderTexture=null,this.target=null,this.legacy=!1,this.resolution=1,this.sourceFrame=new ce,this.destinationFrame=new ce,this.filters=[]};ai.prototype.clear=function(){this.target=null,this.filters=null,this.renderTexture=null};var hi=function(t){function e(e){t.call(this,e),this.defaultFilterStack=[{}],this.texturePool=new Ye,this.texturePool.setScreenSize(e.view),this.statePool=[],this.quad=new ri,this.quadUv=new ni,this.tempRect=new ce,this.activeState={},this.globalUniforms=new oi({outputFrame:this.tempRect,inputSize:new Float32Array(4),inputPixel:new Float32Array(4),inputClamp:new Float32Array(4),resolution:1,filterArea:new Float32Array(4),filterClamp:new Float32Array(4)},!0),this._pixelsWidth=e.view.width,this._pixelsHeight=e.view.height}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(t,e){for(var i=this.renderer,r=this.defaultFilterStack,n=this.statePool.pop()||new ai,s=e[0].resolution,o=e[0].padding,a=e[0].autoFit,h=e[0].legacy,l=1;l<e.length;l++){var u=e[l];s=Math.min(s,u.resolution),o=Math.max(o,u.padding),a=a||u.autoFit,h=h||u.legacy}1===r.length&&(this.defaultFilterStack[0].renderTexture=i.renderTexture.current),r.push(n),n.resolution=s,n.legacy=h,n.target=t,n.sourceFrame.copyFrom(t.filterArea||t.getBounds(!0)),n.sourceFrame.pad(o),a&&n.sourceFrame.fit(this.renderer.renderTexture.sourceFrame),n.sourceFrame.ceil(s),n.renderTexture=this.getOptimalFilterTexture(n.sourceFrame.width,n.sourceFrame.height,s),n.filters=e,n.destinationFrame.width=n.renderTexture.width,n.destinationFrame.height=n.renderTexture.height,n.renderTexture.filterFrame=n.sourceFrame,i.renderTexture.bind(n.renderTexture,n.sourceFrame),i.renderTexture.clear()},e.prototype.pop=function(){var t=this.defaultFilterStack,e=t.pop(),i=e.filters;this.activeState=e;var r=this.globalUniforms.uniforms;r.outputFrame=e.sourceFrame,r.resolution=e.resolution;var n=r.inputSize,s=r.inputPixel,o=r.inputClamp;if(n[0]=e.destinationFrame.width,n[1]=e.destinationFrame.height,n[2]=1/n[0],n[3]=1/n[1],s[0]=n[0]*e.resolution,s[1]=n[1]*e.resolution,s[2]=1/s[0],s[3]=1/s[1],o[0]=.5*s[2],o[1]=.5*s[3],o[2]=e.sourceFrame.width*n[2]-.5*s[2],o[3]=e.sourceFrame.height*n[3]-.5*s[3],e.legacy){var a=r.filterArea;a[0]=e.destinationFrame.width,a[1]=e.destinationFrame.height,a[2]=e.sourceFrame.x,a[3]=e.sourceFrame.y,r.filterClamp=r.inputClamp}this.globalUniforms.update();var h=t[t.length-1];if(1===i.length)i[0].apply(this,e.renderTexture,h.renderTexture,!1,e),this.returnFilterTexture(e.renderTexture);else{var l=e.renderTexture,u=this.getOptimalFilterTexture(l.width,l.height,e.resolution);u.filterFrame=l.filterFrame;var c=0;for(c=0;c<i.length-1;++c){i[c].apply(this,l,u,!0,e);var d=l;l=u,u=d}i[c].apply(this,l,h.renderTexture,!1,e),this.returnFilterTexture(l),this.returnFilterTexture(u)}e.clear(),this.statePool.push(e)},e.prototype.applyFilter=function(t,e,i,r){var n=this.renderer;n.renderTexture.bind(i,i?i.filterFrame:null),r&&n.renderTexture.clear(),t.uniforms.uSampler=e,t.uniforms.filterGlobals=this.globalUniforms,n.state.set(t.state),n.shader.bind(t),t.legacy?(this.quadUv.map(e._frame,e.filterFrame),n.geometry.bind(this.quadUv),n.geometry.draw(Q)):(n.geometry.bind(this.quad),n.geometry.draw(J))},e.prototype.calculateSpriteMatrix=function(t,e){var i=this.activeState,r=i.sourceFrame,n=i.destinationFrame,s=e._texture.orig,o=t.set(n.width,0,0,n.height,r.x,r.y),a=e.worldTransform.copyTo($t.TEMP_MATRIX);return a.invert(),o.prepend(a),o.scale(1/s.width,1/s.height),o.translate(e.anchor.x,e.anchor.y),o},e.prototype.destroy=function(){this.texturePool.clear(!1)},e.prototype.getOptimalFilterTexture=function(t,e,i){return void 0===i&&(i=1),this.texturePool.getOptimalTexture(t,e,i)},e.prototype.getFilterTexture=function(t,e){if("number"==typeof t){var i=t;t=e,e=i}t=t||this.activeState.renderTexture;var r=this.texturePool.getOptimalTexture(t.width,t.height,e||t.resolution);return r.filterFrame=t.filterFrame,r},e.prototype.returnFilterTexture=function(t){this.texturePool.returnTexture(t)},e.prototype.emptyPool=function(){this.texturePool.clear(!0)},e.prototype.resize=function(){this.texturePool.setScreenSize(this.renderer.view)},e}(Le),li=function(t){this.renderer=t};li.prototype.flush=function(){},li.prototype.destroy=function(){this.renderer=null},li.prototype.start=function(){},li.prototype.stop=function(){this.flush()},li.prototype.render=function(t){};var ui=function(t){function e(e){t.call(this,e),this.emptyRenderer=new li(e),this.currentRenderer=this.emptyRenderer}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setObjectRenderer=function(t){this.currentRenderer!==t&&(this.currentRenderer.stop(),this.currentRenderer=t,this.currentRenderer.start())},e.prototype.flush=function(){this.setObjectRenderer(this.emptyRenderer)},e.prototype.reset=function(){this.setObjectRenderer(this.emptyRenderer)},e}(Le);d.PREFER_ENV=c.a.any?g:x;var ci=0,di=function(t){function e(e){t.call(this,e),this.webGLVersion=1,this.extensions={},this.handleContextLost=this.handleContextLost.bind(this),this.handleContextRestored=this.handleContextRestored.bind(this),e.view.addEventListener("webglcontextlost",this.handleContextLost,!1),e.view.addEventListener("webglcontextrestored",this.handleContextRestored,!1)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={isLost:{configurable:!0}};return i.isLost.get=function(){return!this.gl||this.gl.isContextLost()},e.prototype.contextChange=function(t){this.gl=t,this.renderer.gl=t,this.renderer.CONTEXT_UID=ci++,t.isContextLost()&&t.getExtension("WEBGL_lose_context")&&t.getExtension("WEBGL_lose_context").restoreContext()},e.prototype.initFromContext=function(t){this.gl=t,this.validateContext(t),this.renderer.gl=t,this.renderer.CONTEXT_UID=ci++,this.renderer.runners.contextChange.run(t)},e.prototype.initFromOptions=function(t){var e=this.createContext(this.renderer.view,t);this.initFromContext(e)},e.prototype.createContext=function(t,e){var i;if(d.PREFER_ENV>=x&&(i=t.getContext("webgl2",e)),i)this.webGLVersion=2;else if(this.webGLVersion=1,!(i=t.getContext("webgl",e)||t.getContext("experimental-webgl",e)))throw new Error("This browser does not support WebGL. Try using the canvas renderer");return this.gl=i,this.getExtensions(),i},e.prototype.getExtensions=function(){var t=this.gl;1===this.webGLVersion?Object.assign(this.extensions,{drawBuffers:t.getExtension("WEBGL_draw_buffers"),depthTexture:t.getExtension("WEBKIT_WEBGL_depth_texture"),loseContext:t.getExtension("WEBGL_lose_context"),vertexArrayObject:t.getExtension("OES_vertex_array_object")||t.getExtension("MOZ_OES_vertex_array_object")||t.getExtension("WEBKIT_OES_vertex_array_object"),anisotropicFiltering:t.getExtension("EXT_texture_filter_anisotropic"),uint32ElementIndex:t.getExtension("OES_element_index_uint"),floatTexture:t.getExtension("OES_texture_float"),floatTextureLinear:t.getExtension("OES_texture_float_linear"),textureHalfFloat:t.getExtension("OES_texture_half_float"),textureHalfFloatLinear:t.getExtension("OES_texture_half_float_linear")}):2===this.webGLVersion&&Object.assign(this.extensions,{anisotropicFiltering:t.getExtension("EXT_texture_filter_anisotropic"),colorBufferFloat:t.getExtension("EXT_color_buffer_float"),floatTextureLinear:t.getExtension("OES_texture_float_linear")})},e.prototype.handleContextLost=function(t){t.preventDefault()},e.prototype.handleContextRestored=function(){this.renderer.runners.contextChange.run(this.gl)},e.prototype.destroy=function(){var t=this.renderer.view;t.removeEventListener("webglcontextlost",this.handleContextLost),t.removeEventListener("webglcontextrestored",this.handleContextRestored),this.gl.useProgram(null),this.extensions.loseContext&&this.extensions.loseContext.loseContext()},e.prototype.postrender=function(){this.gl.flush()},e.prototype.validateContext=function(t){t.getContextAttributes().stencil||console.warn("Provided WebGL context does not have a stencil buffer, masks may not render correctly")},Object.defineProperties(e.prototype,i),e}(Le),pi=function(t){function e(e){t.call(this,e),this.managedFramebuffers=[],this.unknownFramebuffer=new Ne(10,10)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={size:{configurable:!0}};return e.prototype.contextChange=function(){var t=this.gl=this.renderer.gl;if(this.CONTEXT_UID=this.renderer.CONTEXT_UID,this.current=this.unknownFramebuffer,this.viewport=new ce,this.hasMRT=!0,this.writeDepthTexture=!0,this.disposeAll(!0),1===this.renderer.context.webGLVersion){var e=this.renderer.context.extensions.drawBuffers,i=this.renderer.context.extensions.depthTexture;d.PREFER_ENV===v&&(e=null,i=null),e?t.drawBuffers=function(t){return e.drawBuffersWEBGL(t)}:(this.hasMRT=!1,t.drawBuffers=function(){}),i||(this.writeDepthTexture=!1)}},e.prototype.bind=function(t,e){var i=this.gl;if(t){var r=t.glFramebuffers[this.CONTEXT_UID]||this.initFramebuffer(t);this.current!==t&&(this.current=t,i.bindFramebuffer(i.FRAMEBUFFER,r.framebuffer)),r.dirtyId!==t.dirtyId&&(r.dirtyId=t.dirtyId,r.dirtyFormat!==t.dirtyFormat?(r.dirtyFormat=t.dirtyFormat,this.updateFramebuffer(t)):r.dirtySize!==t.dirtySize&&(r.dirtySize=t.dirtySize,this.resizeFramebuffer(t)));for(var n=0;n<t.colorTextures.length;n++)t.colorTextures[n].texturePart?this.renderer.texture.unbind(t.colorTextures[n].texture):this.renderer.texture.unbind(t.colorTextures[n]);t.depthTexture&&this.renderer.texture.unbind(t.depthTexture),e?this.setViewport(e.x,e.y,e.width,e.height):this.setViewport(0,0,t.width,t.height)}else this.current&&(this.current=null,i.bindFramebuffer(i.FRAMEBUFFER,null)),e?this.setViewport(e.x,e.y,e.width,e.height):this.setViewport(0,0,this.renderer.width,this.renderer.height)},e.prototype.setViewport=function(t,e,i,r){var n=this.viewport;n.width===i&&n.height===r&&n.x===t&&n.y===e||(n.x=t,n.y=e,n.width=i,n.height=r,this.gl.viewport(t,e,i,r))},i.size.get=function(){return this.current?{x:0,y:0,width:this.current.width,height:this.current.height}:{x:0,y:0,width:this.renderer.width,height:this.renderer.height}},e.prototype.clear=function(t,e,i,r){var n=this.gl;n.clearColor(t,e,i,r),n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT)},e.prototype.initFramebuffer=function(t){var e={framebuffer:this.gl.createFramebuffer(),stencil:null,dirtyId:0,dirtyFormat:0,dirtySize:0};return t.glFramebuffers[this.CONTEXT_UID]=e,this.managedFramebuffers.push(t),t.disposeRunner.add(this),e},e.prototype.resizeFramebuffer=function(t){var e=this.gl,i=t.glFramebuffers[this.CONTEXT_UID];i.stencil&&(e.bindRenderbuffer(e.RENDERBUFFER,i.stencil),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,t.width,t.height));for(var r=t.colorTextures,n=0;n<r.length;n++)this.renderer.texture.bind(r[n],0);t.depthTexture&&this.renderer.texture.bind(t.depthTexture,0)},e.prototype.updateFramebuffer=function(t){var e=this.gl,i=t.glFramebuffers[this.CONTEXT_UID],r=t.colorTextures.length;e.drawBuffers||(r=Math.min(r,1));for(var n=[],s=0;s<r;s++){var o=t.colorTextures[s];o.texturePart?(this.renderer.texture.bind(o.texture,0),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+s,e.TEXTURE_CUBE_MAP_NEGATIVE_X+o.side,o.texture._glTextures[this.CONTEXT_UID].texture,0)):(this.renderer.texture.bind(o,0),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+s,e.TEXTURE_2D,o._glTextures[this.CONTEXT_UID].texture,0)),n.push(e.COLOR_ATTACHMENT0+s)}if((n.length>1&&e.drawBuffers(n),t.depthTexture)&&this.writeDepthTexture){var a=t.depthTexture;this.renderer.texture.bind(a,0),e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,a._glTextures[this.CONTEXT_UID].texture,0)}i.stencil||!t.stencil&&!t.depth||(i.stencil=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,i.stencil),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,t.width,t.height),t.depthTexture||e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,i.stencil))},e.prototype.disposeFramebuffer=function(t,e){var i=t.glFramebuffers[this.CONTEXT_UID],r=this.gl;if(i){delete t.glFramebuffers[this.CONTEXT_UID];var n=this.managedFramebuffers.indexOf(t);n>=0&&this.managedFramebuffers.splice(n,1),t.disposeRunner.remove(this),e||(r.deleteFramebuffer(i.framebuffer),i.stencil&&r.deleteRenderbuffer(i.stencil))}},e.prototype.disposeAll=function(t){var e=this.managedFramebuffers;this.managedFramebuffers=[];for(var i=0;i<e.length;i++)this.disposeFramebuffer(e[i],t)},e.prototype.forceStencil=function(){var t=this.current;if(t){var e=t.glFramebuffers[this.CONTEXT_UID];if(e&&!e.stencil){t.enableStencil();var i=t.width,r=t.height,n=this.gl,s=n.createRenderbuffer();n.bindRenderbuffer(n.RENDERBUFFER,s),n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_STENCIL,i,r),e.stencil=s,n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.RENDERBUFFER,s)}}},e.prototype.reset=function(){this.current=this.unknownFramebuffer,this.viewport=new ce},Object.defineProperties(e.prototype,i),e}(Le),fi=function(t){this.buffer=t,this.updateID=-1,this.byteLength=-1,this.refCount=0},mi={5126:4,5123:2,5121:1},yi=function(t){function e(e){t.call(this,e),this._activeGeometry=null,this._activeVao=null,this.hasVao=!0,this.hasInstance=!0,this.canUseUInt32ElementIndex=!1,this.boundBuffers={},this.managedGeometries={},this.managedBuffers={}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(){this.disposeAll(!0);var t=this.gl=this.renderer.gl,e=this.renderer.context;if(this.CONTEXT_UID=this.renderer.CONTEXT_UID,!t.createVertexArray){var i=this.renderer.context.extensions.vertexArrayObject;d.PREFER_ENV===v&&(i=null),i?(t.createVertexArray=function(){return i.createVertexArrayOES()},t.bindVertexArray=function(t){return i.bindVertexArrayOES(t)},t.deleteVertexArray=function(t){return i.deleteVertexArrayOES(t)}):(this.hasVao=!1,t.createVertexArray=function(){},t.bindVertexArray=function(){},t.deleteVertexArray=function(){})}if(!t.vertexAttribDivisor){var r=t.getExtension("ANGLE_instanced_arrays");r?(t.vertexAttribDivisor=function(t,e){return r.vertexAttribDivisorANGLE(t,e)},t.drawElementsInstanced=function(t,e,i,n,s){return r.drawElementsInstancedANGLE(t,e,i,n,s)},t.drawArraysInstanced=function(t,e,i,n){return r.drawArraysInstancedANGLE(t,e,i,n)}):this.hasInstance=!1}this.canUseUInt32ElementIndex=2===e.webGLVersion||!!e.extensions.uint32ElementIndex},e.prototype.bind=function(t,e){e=e||this.renderer.shader.shader;var i=this.gl,r=t.glVertexArrayObjects[this.CONTEXT_UID];r||(this.managedGeometries[t.id]=t,t.disposeRunner.add(this),t.glVertexArrayObjects[this.CONTEXT_UID]=r={});var n=r[e.program.id]||this.initGeometryVao(t,e.program);this._activeGeometry=t,this._activeVao!==n&&(this._activeVao=n,this.hasVao?i.bindVertexArray(n):this.activateVao(t,e.program)),this.updateBuffers()},e.prototype.reset=function(){this.unbind()},e.prototype.updateBuffers=function(){for(var t=this._activeGeometry,e=this.gl,i=0;i<t.buffers.length;i++){var r=t.buffers[i],n=r._glBuffers[this.CONTEXT_UID];if(r._updateID!==n.updateID){n.updateID=r._updateID;var s=r.index?e.ELEMENT_ARRAY_BUFFER:e.ARRAY_BUFFER;if(e.bindBuffer(s,n.buffer),this._boundBuffer=n,n.byteLength>=r.data.byteLength)e.bufferSubData(s,0,r.data);else{var o=r.static?e.STATIC_DRAW:e.DYNAMIC_DRAW;n.byteLength=r.data.byteLength,e.bufferData(s,r.data,o)}}}},e.prototype.checkCompatibility=function(t,e){var i=t.attributes,r=e.attributeData;for(var n in r)if(!i[n])throw new Error('shader and geometry incompatible, geometry missing the "'+n+'" attribute')},e.prototype.getSignature=function(t,e){var i=t.attributes,r=e.attributeData,n=["g",t.id];for(var s in i)r[s]&&n.push(s);return n.join("-")},e.prototype.initGeometryVao=function(t,e){this.checkCompatibility(t,e);var i=this.gl,r=this.CONTEXT_UID,n=this.getSignature(t,e),s=t.glVertexArrayObjects[this.CONTEXT_UID],o=s[n];if(o)return s[e.id]=o,o;var a=t.buffers,h=t.attributes,l={},u={};for(var c in a)l[c]=0,u[c]=0;for(var d in h)!h[d].size&&e.attributeData[d]?h[d].size=e.attributeData[d].size:h[d].size||console.warn("PIXI Geometry attribute '"+d+"' size cannot be determined (likely the bound shader does not have the attribute)"),l[h[d].buffer]+=h[d].size*mi[h[d].type];for(var p in h){var f=h[p],m=f.size;void 0===f.stride&&(l[f.buffer]===m*mi[f.type]?f.stride=0:f.stride=l[f.buffer]),void 0===f.start&&(f.start=u[f.buffer],u[f.buffer]+=m*mi[f.type])}o=i.createVertexArray(),i.bindVertexArray(o);for(var y=0;y<a.length;y++){var v=a[y];v._glBuffers[r]||(v._glBuffers[r]=new fi(i.createBuffer()),this.managedBuffers[v.id]=v,v.disposeRunner.add(this)),v._glBuffers[r].refCount++}return this.activateVao(t,e),this._activeVao=o,s[e.id]=o,s[n]=o,o},e.prototype.disposeBuffer=function(t,e){if(this.managedBuffers[t.id]){delete this.managedBuffers[t.id];var i=t._glBuffers[this.CONTEXT_UID],r=this.gl;t.disposeRunner.remove(this),i&&(e||r.deleteBuffer(i.buffer),delete t._glBuffers[this.CONTEXT_UID])}},e.prototype.disposeGeometry=function(t,e){if(this.managedGeometries[t.id]){delete this.managedGeometries[t.id];var i=t.glVertexArrayObjects[this.CONTEXT_UID],r=this.gl,n=t.buffers;if(t.disposeRunner.remove(this),i){for(var s=0;s<n.length;s++){var o=n[s]._glBuffers[this.CONTEXT_UID];o.refCount--,0!==o.refCount||e||this.disposeBuffer(n[s],e)}if(!e)for(var a in i)if("g"===a[0]){var h=i[a];this._activeVao===h&&this.unbind(),r.deleteVertexArray(h)}delete t.glVertexArrayObjects[this.CONTEXT_UID]}}},e.prototype.disposeAll=function(t){for(var e=Object.keys(this.managedGeometries),i=0;i<e.length;i++)this.disposeGeometry(this.managedGeometries[e[i]],t);e=Object.keys(this.managedBuffers);for(var r=0;r<e.length;r++)this.disposeBuffer(this.managedBuffers[e[r]],t)},e.prototype.activateVao=function(t,e){var i=this.gl,r=this.CONTEXT_UID,n=t.buffers,s=t.attributes;t.indexBuffer&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,t.indexBuffer._glBuffers[r].buffer);var o=null;for(var a in s){var h=s[a],l=n[h.buffer]._glBuffers[r];if(e.attributeData[a]){o!==l&&(i.bindBuffer(i.ARRAY_BUFFER,l.buffer),o=l);var u=e.attributeData[a].location;if(i.enableVertexAttribArray(u),i.vertexAttribPointer(u,h.size,h.type||i.FLOAT,h.normalized,h.stride,h.start),h.instance){if(!this.hasInstance)throw new Error("geometry error, GPU Instancing is not supported on this device");i.vertexAttribDivisor(u,1)}}}},e.prototype.draw=function(t,e,i,r){var n=this.gl,s=this._activeGeometry;if(s.indexBuffer){var o=s.indexBuffer.data.BYTES_PER_ELEMENT,a=2===o?n.UNSIGNED_SHORT:n.UNSIGNED_INT;2===o||4===o&&this.canUseUInt32ElementIndex?s.instanced?n.drawElementsInstanced(t,e||s.indexBuffer.data.length,a,(i||0)*o,r||1):n.drawElements(t,e||s.indexBuffer.data.length,a,(i||0)*o):console.warn("unsupported index buffer type: uint32")}else s.instanced?n.drawArraysInstanced(t,i,e||s.getSize(),r||1):n.drawArrays(t,i,e||s.getSize());return this},e.prototype.unbind=function(){this.gl.bindVertexArray(null),this._activeVao=null,this._activeGeometry=null},e}(Le);function vi(t,e,i,r){var n=gi(t,t.VERTEX_SHADER,e),s=gi(t,t.FRAGMENT_SHADER,i),o=t.createProgram();if(t.attachShader(o,n),t.attachShader(o,s),r)for(var a in r)t.bindAttribLocation(o,r[a],a);return t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS)||(console.error("Pixi.js Error: Could not initialize shader."),console.error("gl.VALIDATE_STATUS",t.getProgramParameter(o,t.VALIDATE_STATUS)),console.error("gl.getError()",t.getError()),""!==t.getProgramInfoLog(o)&&console.warn("Pixi.js Warning: gl.getProgramInfoLog()",t.getProgramInfoLog(o)),t.deleteProgram(o),o=null),t.deleteShader(n),t.deleteShader(s),o}function gi(t,e,i){var r=t.createShader(e);return t.shaderSource(r,i),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS)?r:(console.warn(i),console.error(t.getShaderInfoLog(r)),null)}function xi(t,e){switch(t){case"float":return 0;case"vec2":return new Float32Array(2*e);case"vec3":return new Float32Array(3*e);case"vec4":return new Float32Array(4*e);case"int":case"sampler2D":case"sampler2DArray":return 0;case"ivec2":return new Int32Array(2*e);case"ivec3":return new Int32Array(3*e);case"ivec4":return new Int32Array(4*e);case"bool":return!1;case"bvec2":return bi(2*e);case"bvec3":return bi(3*e);case"bvec4":return bi(4*e);case"mat2":return new Float32Array([1,0,0,1]);case"mat3":return new Float32Array([1,0,0,0,1,0,0,0,1]);case"mat4":return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}return null}function bi(t){for(var e=new Array(t),i=0;i<e.length;i++)e[i]=!1;return e}var wi,_i={},Si=_i;function Ci(){if(Si===_i||Si.isContextLost()){var t,e=document.createElement("canvas");d.PREFER_ENV>=x&&(t=e.getContext("webgl2",{})),t||((t=e.getContext("webgl",{})||e.getContext("experimental-webgl",{}))?t.getExtension("WEBGL_draw_buffers"):t=null),Si=t}return Si}function Ti(t,e,i){if("precision"!==t.substring(0,9)){var r=e;return e===mt&&i!==mt&&(r=ft),"precision "+r+" float;\n"+t}return i!==mt&&"precision highp"===t.substring(0,15)?t.replace("precision highp","precision mediump"):t}var Ii={float:1,vec2:2,vec3:3,vec4:4,int:1,ivec2:2,ivec3:3,ivec4:4,bool:1,bvec2:2,bvec3:3,bvec4:4,mat2:4,mat3:9,mat4:16,sampler2D:1};function Ei(t){return Ii[t]}var Ai=null,Mi={FLOAT:"float",FLOAT_VEC2:"vec2",FLOAT_VEC3:"vec3",FLOAT_VEC4:"vec4",INT:"int",INT_VEC2:"ivec2",INT_VEC3:"ivec3",INT_VEC4:"ivec4",BOOL:"bool",BOOL_VEC2:"bvec2",BOOL_VEC3:"bvec3",BOOL_VEC4:"bvec4",FLOAT_MAT2:"mat2",FLOAT_MAT3:"mat3",FLOAT_MAT4:"mat4",SAMPLER_2D:"sampler2D",SAMPLER_CUBE:"samplerCube",SAMPLER_2D_ARRAY:"sampler2DArray"};function Pi(t,e){if(!Ai){var i=Object.keys(Mi);Ai={};for(var r=0;r<i.length;++r){var n=i[r];Ai[t[n]]=Mi[n]}}return Ai[e]}var ki={float:"\n    if(cv !== v)\n    {\n        cv.v = v;\n        gl.uniform1f(location, v)\n    }",vec2:"\n    if(cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        gl.uniform2f(location, v[0], v[1])\n    }",vec3:"\n    if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3f(location, v[0], v[1], v[2])\n    }",vec4:"gl.uniform4f(location, v[0], v[1], v[2], v[3])",int:"gl.uniform1i(location, v)",ivec2:"gl.uniform2i(location, v[0], v[1])",ivec3:"gl.uniform3i(location, v[0], v[1], v[2])",ivec4:"gl.uniform4i(location, v[0], v[1], v[2], v[3])",bool:"gl.uniform1i(location, v)",bvec2:"gl.uniform2i(location, v[0], v[1])",bvec3:"gl.uniform3i(location, v[0], v[1], v[2])",bvec4:"gl.uniform4i(location, v[0], v[1], v[2], v[3])",mat2:"gl.uniformMatrix2fv(location, false, v)",mat3:"gl.uniformMatrix3fv(location, false, v)",mat4:"gl.uniformMatrix4fv(location, false, v)",sampler2D:"gl.uniform1i(location, v)",samplerCube:"gl.uniform1i(location, v)",sampler2DArray:"gl.uniform1i(location, v)"},Bi={float:"gl.uniform1fv(location, v)",vec2:"gl.uniform2fv(location, v)",vec3:"gl.uniform3fv(location, v)",vec4:"gl.uniform4fv(location, v)",mat4:"gl.uniformMatrix4fv(location, false, v)",mat3:"gl.uniformMatrix3fv(location, false, v)",mat2:"gl.uniformMatrix2fv(location, false, v)",int:"gl.uniform1iv(location, v)",ivec2:"gl.uniform2iv(location, v)",ivec3:"gl.uniform3iv(location, v)",ivec4:"gl.uniform4iv(location, v)",bool:"gl.uniform1iv(location, v)",bvec2:"gl.uniform2iv(location, v)",bvec3:"gl.uniform3iv(location, v)",bvec4:"gl.uniform4iv(location, v)",sampler2D:"gl.uniform1iv(location, v)",samplerCube:"gl.uniform1iv(location, v)",sampler2DArray:"gl.uniform1iv(location, v)"};var Oi,Ri=["precision mediump float;","void main(void){","float test = 0.1;","%forloop%","gl_FragColor = vec4(0.0);","}"].join("\n");function Fi(t){for(var e="",i=0;i<t;++i)i>0&&(e+="\nelse "),i<t-1&&(e+="if(test == "+i+".0){}");return e}var Di=0,Li={},Ui=function t(e,i,r){void 0===r&&(r="pixi-shader"),this.id=Di++,this.vertexSrc=e||t.defaultVertexSrc,this.fragmentSrc=i||t.defaultFragmentSrc,this.vertexSrc=this.vertexSrc.trim(),this.fragmentSrc=this.fragmentSrc.trim(),"#version"!==this.vertexSrc.substring(0,8)&&(r=r.replace(/\s+/g,"-"),Li[r]?(Li[r]++,r+="-"+Li[r]):Li[r]=1,this.vertexSrc="#define SHADER_NAME "+r+"\n"+this.vertexSrc,this.fragmentSrc="#define SHADER_NAME "+r+"\n"+this.fragmentSrc,this.vertexSrc=Ti(this.vertexSrc,d.PRECISION_VERTEX,mt),this.fragmentSrc=Ti(this.fragmentSrc,d.PRECISION_FRAGMENT,function(){if(!wi){wi=ft;var t=Ci();if(t&&t.getShaderPrecisionFormat){var e=t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT);wi=e.precision?mt:ft}}return wi}())),this.extractData(this.vertexSrc,this.fragmentSrc),this.glPrograms={},this.syncUniforms=null},Ni={defaultVertexSrc:{configurable:!0},defaultFragmentSrc:{configurable:!0}};Ui.prototype.extractData=function(t,e){var i=Ci();if(i){var r=vi(i,t,e);this.attributeData=this.getAttributeData(r,i),this.uniformData=this.getUniformData(r,i),i.deleteProgram(r)}else this.uniformData={},this.attributeData={}},Ui.prototype.getAttributeData=function(t,e){for(var i={},r=[],n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),s=0;s<n;s++){var o=e.getActiveAttrib(t,s),a=Pi(e,o.type),h={type:a,name:o.name,size:Ei(a),location:0};i[o.name]=h,r.push(h)}r.sort((function(t,e){return t.name>e.name?1:-1}));for(var l=0;l<r.length;l++)r[l].location=l;return i},Ui.prototype.getUniformData=function(t,e){for(var i={},r=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),n=0;n<r;n++){var s=e.getActiveUniform(t,n),o=s.name.replace(/\[.*?\]/,""),a=s.name.match(/\[.*?\]/,""),h=Pi(e,s.type);i[o]={type:h,size:s.size,isArray:a,value:xi(h,s.size)}}return i},Ni.defaultVertexSrc.get=function(){return"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vTextureCoord = aTextureCoord;\n}\n"},Ni.defaultFragmentSrc.get=function(){return"varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor *= texture2D(uSampler, vTextureCoord);\n}"},Ui.from=function(t,e,i){var r=t+e,n=Et[r];return n||(Et[r]=n=new Ui(t,e,i)),n},Object.defineProperties(Ui,Ni);var Vi=function(t,e){for(var i in this.program=t,this.uniformGroup=e?e instanceof oi?e:new oi(e):new oi({}),t.uniformData)this.uniformGroup.uniforms[i]instanceof Array&&(this.uniformGroup.uniforms[i]=new Float32Array(this.uniformGroup.uniforms[i]))},Xi={uniforms:{configurable:!0}};Vi.prototype.checkUniformExists=function(t,e){if(e.uniforms[t])return!0;for(var i in e.uniforms){var r=e.uniforms[i];if(r.group&&this.checkUniformExists(t,r))return!0}return!1},Vi.prototype.destroy=function(){this.uniformGroup=null},Xi.uniforms.get=function(){return this.uniformGroup.uniforms},Vi.from=function(t,e,i){var r=Ui.from(t,e);return new Vi(r,i)},Object.defineProperties(Vi.prototype,Xi);var ji=function(){this.data=0,this.blendMode=_,this.polygonOffset=0,this.blend=!0},zi={blend:{configurable:!0},offsets:{configurable:!0},culling:{configurable:!0},depthTest:{configurable:!0},clockwiseFrontFace:{configurable:!0},blendMode:{configurable:!0},polygonOffset:{configurable:!0}};zi.blend.get=function(){return!!(1&this.data)},zi.blend.set=function(t){!!(1&this.data)!==t&&(this.data^=1)},zi.offsets.get=function(){return!!(2&this.data)},zi.offsets.set=function(t){!!(2&this.data)!==t&&(this.data^=2)},zi.culling.get=function(){return!!(4&this.data)},zi.culling.set=function(t){!!(4&this.data)!==t&&(this.data^=4)},zi.depthTest.get=function(){return!!(8&this.data)},zi.depthTest.set=function(t){!!(8&this.data)!==t&&(this.data^=8)},zi.clockwiseFrontFace.get=function(){return!!(16&this.data)},zi.clockwiseFrontFace.set=function(t){!!(16&this.data)!==t&&(this.data^=16)},zi.blendMode.get=function(){return this._blendMode},zi.blendMode.set=function(t){this.blend=t!==j,this._blendMode=t},zi.polygonOffset.get=function(){return this._polygonOffset},zi.polygonOffset.set=function(t){this.offsets=!!t,this._polygonOffset=t},ji.for2d=function(){var t=new ji;return t.depthTest=!1,t.blend=!0,t},Object.defineProperties(ji.prototype,zi);var Gi=function(t){function e(i,r,n){var s=Ui.from(i||e.defaultVertexSrc,r||e.defaultFragmentSrc);t.call(this,s,n),this.padding=0,this.resolution=d.FILTER_RESOLUTION,this.enabled=!0,this.autoFit=!0,this.legacy=!!this.program.attributeData.aTextureCoord,this.state=new ji}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={blendMode:{configurable:!0}},r={defaultVertexSrc:{configurable:!0},defaultFragmentSrc:{configurable:!0}};return e.prototype.apply=function(t,e,i,r,n){t.applyFilter(this,e,i,r,n)},i.blendMode.get=function(){return this.state.blendMode},i.blendMode.set=function(t){this.state.blendMode=t},r.defaultVertexSrc.get=function(){return"attribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n"},r.defaultFragmentSrc.get=function(){return"varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor = texture2D(uSampler, vTextureCoord);\n}\n"},Object.defineProperties(e.prototype,i),Object.defineProperties(e,r),e}(Vi);Gi.SOURCE_KEY_MAP={};var Hi=new $t,Wi=function(t,e){this._texture=t,this.mapCoord=new $t,this.uClampFrame=new Float32Array(4),this.uClampOffset=new Float32Array(2),this._updateID=-1,this.clampOffset=0,this.clampMargin=void 0===e?.5:e,this.isSimple=!1},Yi={texture:{configurable:!0}};Yi.texture.get=function(){return this._texture},Yi.texture.set=function(t){this._texture=t,this._updateID=-1},Wi.prototype.multiplyUvs=function(t,e){void 0===e&&(e=t);for(var i=this.mapCoord,r=0;r<t.length;r+=2){var n=t[r],s=t[r+1];e[r]=n*i.a+s*i.c+i.tx,e[r+1]=n*i.b+s*i.d+i.ty}return e},Wi.prototype.update=function(t){var e=this._texture;if(!e||!e.valid)return!1;if(!t&&this._updateID===e._updateID)return!1;this._updateID=e._updateID;var i=e._uvs;this.mapCoord.set(i.x1-i.x0,i.y1-i.y0,i.x3-i.x0,i.y3-i.y0,i.x0,i.y0);var r=e.orig,n=e.trim;n&&(Hi.set(r.width/n.width,0,0,r.height/n.height,-n.x/n.width,-n.y/n.height),this.mapCoord.append(Hi));var s=e.baseTexture,o=this.uClampFrame,a=this.clampMargin/s.resolution,h=this.clampOffset;return o[0]=(e._frame.x+a+h)/s.width,o[1]=(e._frame.y+a+h)/s.height,o[2]=(e._frame.x+e._frame.width-a+h)/s.width,o[3]=(e._frame.y+e._frame.height-a+h)/s.height,this.uClampOffset[0]=h/s.realWidth,this.uClampOffset[1]=h/s.realHeight,this.isSimple=e._frame.width===s.width&&e._frame.height===s.height&&0===e.rotate,!0},Object.defineProperties(Wi.prototype,Yi);var qi=function(t){function e(e){var i=new $t;t.call(this,"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 otherMatrix;\n\nvarying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n}\n","varying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform sampler2D mask;\nuniform float alpha;\nuniform float npmAlpha;\nuniform vec4 maskClamp;\n\nvoid main(void)\n{\n    float clip = step(3.5,\n        step(maskClamp.x, vMaskCoord.x) +\n        step(maskClamp.y, vMaskCoord.y) +\n        step(vMaskCoord.x, maskClamp.z) +\n        step(vMaskCoord.y, maskClamp.w));\n\n    vec4 original = texture2D(uSampler, vTextureCoord);\n    vec4 masky = texture2D(mask, vMaskCoord);\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\n\n    original *= (alphaMul * masky.r * alpha * clip);\n\n    gl_FragColor = original;\n}\n"),e.renderable=!1,this.maskSprite=e,this.maskMatrix=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t,e,i,r){var n=this.maskSprite,s=this.maskSprite.texture;s.valid&&(s.transform||(s.transform=new Wi(s,0)),s.transform.update(),this.uniforms.npmAlpha=s.baseTexture.premultiplyAlpha?0:1,this.uniforms.mask=s,this.uniforms.otherMatrix=t.calculateSpriteMatrix(this.maskMatrix,n).prepend(s.transform.mapCoord),this.uniforms.alpha=n.worldAlpha,this.uniforms.maskClamp=s.transform.uClampFrame,t.applyFilter(this,e,i,r))},e}(Gi),Ki=function(t){function e(e){t.call(this,e),this.scissor=!1,this.scissorData=null,this.scissorRenderTarget=null,this.enableScissor=!1,this.alphaMaskPool=[],this.alphaMaskIndex=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(t,e){if(e.isSprite)this.pushSpriteMask(t,e);else if(this.enableScissor&&!this.scissor&&this.renderer._activeRenderTarget.root&&!this.renderer.stencil.stencilMaskStack.length&&e.isFastRect()){var i=e.worldTransform,r=Math.atan2(i.b,i.a);(r=Math.round(r*(180/Math.PI)))%90?this.pushStencilMask(e):this.pushScissorMask(t,e)}else this.pushStencilMask(e)},e.prototype.pop=function(t,e){e.isSprite?this.popSpriteMask(t,e):this.enableScissor&&!this.renderer.stencil.stencilMaskStack.length?this.popScissorMask(t,e):this.popStencilMask(t,e)},e.prototype.pushSpriteMask=function(t,e){var i=this.alphaMaskPool[this.alphaMaskIndex];i||(i=this.alphaMaskPool[this.alphaMaskIndex]=[new qi(e)]),i[0].resolution=this.renderer.resolution,i[0].maskSprite=e;var r=t.filterArea;t.filterArea=e.getBounds(!0),this.renderer.filter.push(t,i),t.filterArea=r,this.alphaMaskIndex++},e.prototype.popSpriteMask=function(){this.renderer.filter.pop(),this.alphaMaskIndex--},e.prototype.pushStencilMask=function(t){this.renderer.batch.flush(),this.renderer.stencil.pushStencil(t)},e.prototype.popStencilMask=function(){this.renderer.stencil.popStencil()},e.prototype.pushScissorMask=function(t,e){e.renderable=!0;var i=this.renderer._activeRenderTarget,r=e.getBounds();r.fit(i.size),e.renderable=!1,this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);var n=this.renderer.resolution;this.renderer.gl.scissor(r.x*n,(i.root?i.size.height-r.y-r.height:r.y)*n,r.width*n,r.height*n),this.scissorRenderTarget=i,this.scissorData=e,this.scissor=!0},e.prototype.popScissorMask=function(){this.scissorRenderTarget=null,this.scissorData=null,this.scissor=!1;var t=this.renderer.gl;t.disable(t.SCISSOR_TEST)},e}(Le),Zi=function(t){function e(e){t.call(this,e),this.stencilMaskStack=[]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setMaskStack=function(t){var e=this.renderer.gl,i=this.stencilMaskStack.length;this.stencilMaskStack=t,t.length!==i&&(0===t.length?e.disable(e.STENCIL_TEST):(e.enable(e.STENCIL_TEST),this._useCurrent()))},e.prototype.pushStencil=function(t){var e=this.renderer.gl,i=this.stencilMaskStack.length;0===i&&(this.renderer.framebuffer.forceStencil(),e.enable(e.STENCIL_TEST)),this.stencilMaskStack.push(t),e.colorMask(!1,!1,!1,!1),e.stencilFunc(e.EQUAL,i,this._getBitwiseMask()),e.stencilOp(e.KEEP,e.KEEP,e.INCR),t.renderable=!0,t.render(this.renderer),this.renderer.batch.flush(),t.renderable=!1,this._useCurrent()},e.prototype.popStencil=function(){var t=this.renderer.gl,e=this.stencilMaskStack.pop();0===this.stencilMaskStack.length?(t.disable(t.STENCIL_TEST),t.clear(t.STENCIL_BUFFER_BIT),t.clearStencil(0)):(t.colorMask(!1,!1,!1,!1),t.stencilOp(t.KEEP,t.KEEP,t.DECR),e.renderable=!0,e.render(this.renderer),this.renderer.batch.flush(),e.renderable=!1,this._useCurrent())},e.prototype._useCurrent=function(){var t=this.renderer.gl;t.colorMask(!0,!0,!0,!0),t.stencilFunc(t.EQUAL,this.stencilMaskStack.length,this._getBitwiseMask()),t.stencilOp(t.KEEP,t.KEEP,t.KEEP)},e.prototype._getBitwiseMask=function(){return(1<<this.stencilMaskStack.length)-1},e.prototype.destroy=function(){t.prototype.destroy.call(this,this),this.stencilMaskStack=null},e}(Le),Qi=function(t){function e(e){t.call(this,e),this.destinationFrame=null,this.sourceFrame=null,this.defaultFrame=null,this.projectionMatrix=new $t,this.transform=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.update=function(t,e,i,r){this.destinationFrame=t||this.destinationFrame||this.defaultFrame,this.sourceFrame=e||this.sourceFrame||t,this.calculateProjection(this.destinationFrame,this.sourceFrame,i,r),this.transform&&this.projectionMatrix.append(this.transform);var n=this.renderer;n.globalUniforms.uniforms.projectionMatrix=this.projectionMatrix,n.globalUniforms.update(),n.shader.shader&&n.shader.syncUniformGroup(n.shader.shader.uniforms.globals)},e.prototype.calculateProjection=function(t,e,i,r){var n=this.projectionMatrix;r?(n.a=1/t.width*2*i,n.d=-1/t.height*2*i,n.tx=-1-e.x*n.a,n.ty=1-e.y*n.d):(n.a=1/t.width*2*i,n.d=1/t.height*2*i,n.tx=-1-e.x*n.a,n.ty=-1-e.y*n.d)},e.prototype.setTransform=function(){},e}(Le),Ji=new ce,$i=function(t){function e(e){t.call(this,e),this.clearColor=e._backgroundColorRgba,this.defaultMaskStack=[],this.current=null,this.sourceFrame=new ce,this.destinationFrame=new ce}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.bind=function(t,e,i){void 0===t&&(t=null),this.current=t;var r,n=this.renderer;if(t){var s=t.baseTexture;r=s.resolution,i||(Ji.width=s.realWidth,Ji.height=s.realHeight,i=Ji),e||(e=i),this.renderer.framebuffer.bind(s.framebuffer,i),this.renderer.projection.update(i,e,r,!1),this.renderer.stencil.setMaskStack(s.stencilMaskStack)}else r=this.renderer.resolution,i||(Ji.width=n.width,Ji.height=n.height,i=Ji),e||(e=i),n.framebuffer.bind(null,i),this.renderer.projection.update(i,e,r,!0),this.renderer.stencil.setMaskStack(this.defaultMaskStack);this.sourceFrame.copyFrom(e),this.destinationFrame.x=i.x/r,this.destinationFrame.y=i.y/r,this.destinationFrame.width=i.width/r,this.destinationFrame.height=i.height/r,e===i&&this.sourceFrame.copyFrom(this.destinationFrame)},e.prototype.clear=function(t){t=this.current?t||this.current.baseTexture.clearColor:t||this.clearColor,this.renderer.framebuffer.clear(t[0],t[1],t[2],t[3])},e.prototype.resize=function(){this.bind(null)},e.prototype.reset=function(){this.bind(null)},e}(Le),tr=function(t,e){this.program=t,this.uniformData=e,this.uniformGroups={}};tr.prototype.destroy=function(){this.uniformData=null,this.uniformGroups=null,this.program=null};var er=0,ir=function(t){function e(e){t.call(this,e),this.systemCheck(),this.gl=null,this.shader=null,this.program=null,this.cache={},this.id=er++}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.systemCheck=function(){if(!function(){if("boolean"==typeof Oi)return Oi;try{var t=new Function("param1","param2","param3","return param1[param2] === param3;");Oi=!0===t({a:"b"},"a","b")}catch(t){Oi=!1}return Oi}())throw new Error("Current environment does not allow unsafe-eval, please use @pixi/unsafe-eval module to enable support.")},e.prototype.contextChange=function(t){this.gl=t,this.reset()},e.prototype.bind=function(t,e){t.uniforms.globals=this.renderer.globalUniforms;var i=t.program,r=i.glPrograms[this.renderer.CONTEXT_UID]||this.generateShader(t);return this.shader=t,this.program!==i&&(this.program=i,this.gl.useProgram(r.program)),e||this.syncUniformGroup(t.uniformGroup),r},e.prototype.setUniforms=function(t){var e=this.shader.program,i=e.glPrograms[this.renderer.CONTEXT_UID];e.syncUniforms(i.uniformData,t,this.renderer)},e.prototype.syncUniformGroup=function(t){var e=this.getglProgram();t.static&&t.dirtyId===e.uniformGroups[t.id]||(e.uniformGroups[t.id]=t.dirtyId,this.syncUniforms(t,e))},e.prototype.syncUniforms=function(t,e){(t.syncUniforms[this.shader.program.id]||this.createSyncGroups(t))(e.uniformData,t.uniforms,this.renderer)},e.prototype.createSyncGroups=function(t){var e=this.getSignature(t,this.shader.program.uniformData);return this.cache[e]||(this.cache[e]=function(t,e){var i=0,r="var v = null;\n    var cv = null\n    var gl = renderer.gl";for(var n in t.uniforms){var s=e[n];if(s)if("float"===s.type&&1===s.size)r+="\n            if(uv."+n+" !== ud."+n+".value)\n            {\n                ud."+n+".value = uv."+n+"\n                gl.uniform1f(ud."+n+".location, uv."+n+")\n            }\n";else if("sampler2D"!==s.type&&"samplerCube"!==s.type&&"sampler2DArray"!==s.type||1!==s.size||s.isArray)if("mat3"===s.type&&1===s.size)void 0!==t.uniforms[n].a?r+="\n                gl.uniformMatrix3fv(ud."+n+".location, false, uv."+n+".toArray(true));\n                \n":r+="\n                gl.uniformMatrix3fv(ud."+n+".location, false, uv."+n+");\n                \n";else if("vec2"===s.type&&1===s.size)void 0!==t.uniforms[n].x?r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud."+n+".location, v.x, v.y);\n                }\n":r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud."+n+".location, v[0], v[1]);\n                }\n                \n";else if("vec4"===s.type&&1===s.size)void 0!==t.uniforms[n].width?r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud."+n+".location, v.x, v.y, v.width, v.height)\n                }\n":r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud."+n+".location, v[0], v[1], v[2], v[3])\n                }\n                \n";else{r+="\n            cv = ud."+n+".value;\n            v = uv."+n+";\n            "+(1===s.size?ki:Bi)[s.type].replace("location","ud."+n+".location")+";\n"}else r+="\n            renderer.texture.bind(uv."+n+", "+i+");\n\n            if(ud."+n+".value !== "+i+")\n            {\n                ud."+n+".value = "+i+";\n                gl.uniform1i(ud."+n+".location, "+i+");\n; // eslint-disable-line max-len\n            }\n",i++;else t.uniforms[n].group&&(r+="\n                    renderer.shader.syncUniformGroup(uv."+n+");\n                ")}return new Function("ud","uv","renderer",r)}(t,this.shader.program.uniformData)),t.syncUniforms[this.shader.program.id]=this.cache[e],t.syncUniforms[this.shader.program.id]},e.prototype.getSignature=function(t,e){var i=t.uniforms,r=[];for(var n in i)r.push(n),e[n]&&r.push(e[n].type);return r.join("-")},e.prototype.getglProgram=function(){return this.shader?this.shader.program.glPrograms[this.renderer.CONTEXT_UID]:null},e.prototype.generateShader=function(t){var e=this.gl,i=t.program,r={};for(var n in i.attributeData)r[n]=i.attributeData[n].location;var s=vi(e,i.vertexSrc,i.fragmentSrc,r),o={};for(var a in i.uniformData){var h=i.uniformData[a];o[a]={location:e.getUniformLocation(s,a),value:xi(h.type,h.size)}}var l=new tr(s,o);return i.glPrograms[this.renderer.CONTEXT_UID]=l,l},e.prototype.reset=function(){this.program=null,this.shader=null},e.prototype.destroy=function(){this.destroyed=!0},e}(Le);var rr=function(t){function e(e){t.call(this,e),this.gl=null,this.stateId=0,this.polygonOffset=0,this.blendMode=j,this._blendEq=!1,this.map=[],this.map[0]=this.setBlend,this.map[1]=this.setOffset,this.map[2]=this.setCullFace,this.map[3]=this.setDepthTest,this.map[4]=this.setFrontFace,this.checks=[],this.defaultState=new ji,this.defaultState.blend=!0,this.defaultState.depth=!0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(t){this.gl=t,this.blendModes=function(t,e){return void 0===e&&(e=[]),e[_]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[S]=[t.ONE,t.ONE],e[C]=[t.DST_COLOR,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[T]=[t.ONE,t.ONE_MINUS_SRC_COLOR,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[I]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[E]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[A]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[M]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[P]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[k]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[B]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[O]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[R]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[F]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[D]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[L]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[U]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[j]=[0,0],e[N]=[t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[V]=[t.SRC_ALPHA,t.ONE,t.ONE,t.ONE],e[X]=[t.SRC_ALPHA,t.ONE_MINUS_SRC_COLOR,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[z]=[t.DST_ALPHA,t.ZERO],e[G]=[t.ONE_MINUS_DST_ALPHA,t.ZERO],e[H]=[t.DST_ALPHA,t.ONE_MINUS_SRC_ALPHA],e[W]=[t.ONE_MINUS_DST_ALPHA,t.ONE],e[Y]=[t.ZERO,t.SRC_ALPHA],e[q]=[t.ZERO,t.ONE_MINUS_SRC_ALPHA],e[K]=[t.ONE_MINUS_DST_ALPHA,t.SRC_ALPHA],e[Z]=[t.ONE,t.ONE,t.ONE,t.ONE,t.FUNC_REVERSE_SUBTRACT,t.FUNC_ADD],e}(t),this.set(this.defaultState),this.reset()},e.prototype.set=function(t){if(t=t||this.defaultState,this.stateId!==t.data){for(var e=this.stateId^t.data,i=0;e;)1&e&&this.map[i].call(this,!!(t.data&1<<i)),e>>=1,i++;this.stateId=t.data}for(var r=0;r<this.checks.length;r++)this.checks[r](this,t)},e.prototype.forceState=function(t){t=t||this.defaultState;for(var e=0;e<this.map.length;e++)this.map[e].call(this,!!(t.data&1<<e));for(var i=0;i<this.checks.length;i++)this.checks[i](this,t);this.stateId=t.data},e.prototype.setBlend=function(t){this.updateCheck(e.checkBlendMode,t),this.gl[t?"enable":"disable"](this.gl.BLEND)},e.prototype.setOffset=function(t){this.updateCheck(e.checkPolygonOffset,t),this.gl[t?"enable":"disable"](this.gl.POLYGON_OFFSET_FILL)},e.prototype.setDepthTest=function(t){this.gl[t?"enable":"disable"](this.gl.DEPTH_TEST)},e.prototype.setCullFace=function(t){this.gl[t?"enable":"disable"](this.gl.CULL_FACE)},e.prototype.setFrontFace=function(t){this.gl.frontFace(this.gl[t?"CW":"CCW"])},e.prototype.setBlendMode=function(t){if(t!==this.blendMode){this.blendMode=t;var e=this.blendModes[t],i=this.gl;2===e.length?i.blendFunc(e[0],e[1]):i.blendFuncSeparate(e[0],e[1],e[2],e[3]),6===e.length?(this._blendEq=!0,i.blendEquationSeparate(e[4],e[5])):this._blendEq&&(this._blendEq=!1,i.blendEquationSeparate(i.FUNC_ADD,i.FUNC_ADD))}},e.prototype.setPolygonOffset=function(t,e){this.gl.polygonOffset(t,e)},e.prototype.reset=function(){this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!1),this.forceState(0),this._blendEq=!0,this.blendMode=-1,this.setBlendMode(0)},e.prototype.updateCheck=function(t,e){var i=this.checks.indexOf(t);e&&-1===i?this.checks.push(t):e||-1===i||this.checks.splice(i,1)},e.checkBlendMode=function(t,e){t.setBlendMode(e.blendMode)},e.checkPolygonOffset=function(t,e){t.setPolygonOffset(e.polygonOffset,0)},e}(Le),nr=function(t){function e(e){t.call(this,e),this.count=0,this.checkCount=0,this.maxIdle=d.GC_MAX_IDLE,this.checkCountMax=d.GC_MAX_CHECK_COUNT,this.mode=d.GC_MODE}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.postrender=function(){this.count++,this.mode!==pt&&(this.checkCount++,this.checkCount>this.checkCountMax&&(this.checkCount=0,this.run()))},e.prototype.run=function(){for(var t=this.renderer.texture,e=t.managedTextures,i=!1,r=0;r<e.length;r++){var n=e[r];!n.framebuffer&&this.count-n.touched>this.maxIdle&&(t.destroyTexture(n,!0),e[r]=null,i=!0)}if(i){for(var s=0,o=0;o<e.length;o++)null!==e[o]&&(e[s++]=e[o]);e.length=s}},e.prototype.unload=function(t){var e=this.renderer.textureSystem;t._texture&&t._texture._glRenderTargets&&e.destroyTexture(t._texture);for(var i=t.children.length-1;i>=0;i--)this.unload(t.children[i])},e}(Le),sr=function(t){this.texture=t,this.width=-1,this.height=-1,this.dirtyId=-1,this.dirtyStyleId=-1,this.mipmap=!1,this.wrapMode=33071,this.type=6408,this.internalFormat=5121},or=function(t){function e(e){t.call(this,e),this.boundTextures=[],this.currentLocation=-1,this.managedTextures=[],this._unknownBoundTextures=!1,this.unknownTexture=new Pe}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(){var t=this.gl=this.renderer.gl;this.CONTEXT_UID=this.renderer.CONTEXT_UID,this.webGLVersion=this.renderer.context.webGLVersion;var e=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);this.boundTextures.length=e;for(var i=0;i<e;i++)this.boundTextures[i]=null;this.emptyTextures={};var r=new sr(t.createTexture());t.bindTexture(t.TEXTURE_2D,r.texture),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array(4)),this.emptyTextures[t.TEXTURE_2D]=r,this.emptyTextures[t.TEXTURE_CUBE_MAP]=new sr(t.createTexture()),t.bindTexture(t.TEXTURE_CUBE_MAP,this.emptyTextures[t.TEXTURE_CUBE_MAP].texture);for(var n=0;n<6;n++)t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,null);t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR);for(var s=0;s<this.boundTextures.length;s++)this.bind(null,s)},e.prototype.bind=function(t,e){void 0===e&&(e=0);var i=this.gl;if(t){if((t=t.baseTexture||t).valid){t.touched=this.renderer.textureGC.count;var r=t._glTextures[this.CONTEXT_UID]||this.initTexture(t);this.currentLocation!==e&&(this.currentLocation=e,i.activeTexture(i.TEXTURE0+e)),this.boundTextures[e]!==t&&i.bindTexture(t.target,r.texture),r.dirtyId!==t.dirtyId&&this.updateTexture(t),this.boundTextures[e]=t}}else this.currentLocation!==e&&(this.currentLocation=e,i.activeTexture(i.TEXTURE0+e)),i.bindTexture(i.TEXTURE_2D,this.emptyTextures[i.TEXTURE_2D].texture),this.boundTextures[e]=null},e.prototype.reset=function(){this._unknownBoundTextures=!0,this.currentLocation=-1;for(var t=0;t<this.boundTextures.length;t++)this.boundTextures[t]=this.unknownTexture},e.prototype.unbind=function(t){var e=this.gl,i=this.boundTextures;if(this._unknownBoundTextures){this._unknownBoundTextures=!1;for(var r=0;r<i.length;r++)i[r]===this.unknownTexture&&this.bind(null,r)}for(var n=0;n<i.length;n++)i[n]===t&&(this.currentLocation!==n&&(e.activeTexture(e.TEXTURE0+n),this.currentLocation=n),e.bindTexture(e.TEXTURE_2D,this.emptyTextures[t.target].texture),i[n]=null)},e.prototype.initTexture=function(t){var e=new sr(this.gl.createTexture());return e.dirtyId=-1,t._glTextures[this.CONTEXT_UID]=e,this.managedTextures.push(t),t.on("dispose",this.destroyTexture,this),e},e.prototype.initTextureType=function(t,e){if(e.internalFormat=t.format,e.type=t.type,2===this.webGLVersion){var i=this.renderer.gl;t.type===i.FLOAT&&t.format===i.RGBA&&(e.internalFormat=i.RGBA32F),t.type===ht&&(e.type=i.HALF_FLOAT),e.type===i.HALF_FLOAT&&t.format===i.RGBA&&(e.internalFormat=i.RGBA16F)}},e.prototype.updateTexture=function(t){var e=t._glTextures[this.CONTEXT_UID];if(e){var i=this.renderer;if(this.initTextureType(t,e),t.resource&&t.resource.upload(i,t,e));else{var r=t.realWidth,n=t.realHeight,s=i.gl;(e.width!==r||e.height!==n||e.dirtyId<0)&&(e.width=r,e.height=n,s.texImage2D(t.target,0,e.internalFormat,r,n,0,t.format,e.type,null))}t.dirtyStyleId!==e.dirtyStyleId&&this.updateTextureStyle(t),e.dirtyId=t.dirtyId}},e.prototype.destroyTexture=function(t,e){var i=this.gl;if((t=t.baseTexture||t)._glTextures[this.CONTEXT_UID]&&(this.unbind(t),i.deleteTexture(t._glTextures[this.CONTEXT_UID].texture),t.off("dispose",this.destroyTexture,this),delete t._glTextures[this.CONTEXT_UID],!e)){var r=this.managedTextures.indexOf(t);-1!==r&&wt(this.managedTextures,r,1)}},e.prototype.updateTextureStyle=function(t){var e=t._glTextures[this.CONTEXT_UID];e&&(t.mipmap!==dt&&2===this.webGLVersion||t.isPowerOfTwo?(e.mipmap=t.mipmap>=1,e.wrapMode=t.wrapMode):(e.mipmap=0,e.wrapMode=ct),t.resource&&t.resource.style(this.renderer,t,e)||this.setStyle(t,e),e.dirtyStyleId=t.dirtyStyleId)},e.prototype.setStyle=function(t,e){var i=this.gl;if(e.mipmap&&i.generateMipmap(t.target),i.texParameteri(t.target,i.TEXTURE_WRAP_S,e.wrapMode),i.texParameteri(t.target,i.TEXTURE_WRAP_T,e.wrapMode),e.mipmap){i.texParameteri(t.target,i.TEXTURE_MIN_FILTER,t.scaleMode?i.LINEAR_MIPMAP_LINEAR:i.NEAREST_MIPMAP_NEAREST);var r=this.renderer.context.extensions.anisotropicFiltering;if(r&&t.anisotropicLevel>0&&t.scaleMode===lt){var n=Math.min(t.anisotropicLevel,i.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT));i.texParameterf(t.target,r.TEXTURE_MAX_ANISOTROPY_EXT,n)}}else i.texParameteri(t.target,i.TEXTURE_MIN_FILTER,t.scaleMode?i.LINEAR:i.NEAREST);i.texParameteri(t.target,i.TEXTURE_MAG_FILTER,t.scaleMode?i.LINEAR:i.NEAREST)},e}(Le),ar=new $t;f.a;var hr=function(){this.textures=[],this.ids=[],this.blend=0,this.textureCount=0,this.start=0,this.size=0,this.type=4},lr=function(t){this.rawBinaryData=new ArrayBuffer(t),this.uint32View=new Uint32Array(this.rawBinaryData),this.float32View=new Float32Array(this.rawBinaryData)},ur={int8View:{configurable:!0},uint8View:{configurable:!0},int16View:{configurable:!0},uint16View:{configurable:!0},int32View:{configurable:!0}};ur.int8View.get=function(){return this._int8View||(this._int8View=new Int8Array(this.rawBinaryData)),this._int8View},ur.uint8View.get=function(){return this._uint8View||(this._uint8View=new Uint8Array(this.rawBinaryData)),this._uint8View},ur.int16View.get=function(){return this._int16View||(this._int16View=new Int16Array(this.rawBinaryData)),this._int16View},ur.uint16View.get=function(){return this._uint16View||(this._uint16View=new Uint16Array(this.rawBinaryData)),this._uint16View},ur.int32View.get=function(){return this._int32View||(this._int32View=new Int32Array(this.rawBinaryData)),this._int32View},lr.prototype.view=function(t){return this[t+"View"]},lr.prototype.destroy=function(){this.rawBinaryData=null,this._int8View=null,this._uint8View=null,this._int16View=null,this._uint16View=null,this._int32View=null,this.uint32View=null,this.float32View=null},lr.sizeOf=function(t){switch(t){case"int8":case"uint8":return 1;case"int16":case"uint16":return 2;case"int32":case"uint32":case"float32":return 4;default:throw new Error(t+" isn't a valid view type")}},Object.defineProperties(lr.prototype,ur);var cr=function(t){function e(e){t.call(this,e),this.shaderGenerator=null,this.geometryClass=null,this.vertexSize=null,this.state=ji.for2d(),this.size=8e3,this._vertexCount=0,this._indexCount=0,this._bufferedElements=[],this._bufferSize=0,this._shader=null,this._packedGeometries=[],this._packedGeometryPoolSize=2,this._flushId=0,this._drawCalls=[];for(var i=0;i<this.size/4;i++)this._drawCalls[i]=new hr;this._aBuffers={},this._iBuffers={},this.MAX_TEXTURES=1,this.renderer.on("prerender",this.onPrerender,this),e.runners.contextChange.add(this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(){var t=this.renderer.gl;d.PREFER_ENV===v?this.MAX_TEXTURES=1:(this.MAX_TEXTURES=Math.min(t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),d.SPRITE_MAX_TEXTURES),this.MAX_TEXTURES=function(t,e){if(0===t)throw new Error("Invalid value of `0` passed to `checkMaxIfStatementsInShader`");for(var i=e.createShader(e.FRAGMENT_SHADER);;){var r=Ri.replace(/%forloop%/gi,Fi(t));if(e.shaderSource(i,r),e.compileShader(i),e.getShaderParameter(i,e.COMPILE_STATUS))break;t=t/2|0}return t}(this.MAX_TEXTURES,t)),this._shader=this.shaderGenerator.generateShader(this.MAX_TEXTURES);for(var e=0;e<this._packedGeometryPoolSize;e++)this._packedGeometries[e]=new this.geometryClass},e.prototype.onPrerender=function(){this._flushId=0},e.prototype.render=function(t){t._texture.valid&&(this._vertexCount+t.vertexData.length/2>this.size&&this.flush(),this._vertexCount+=t.vertexData.length/2,this._indexCount+=t.indices.length,this._bufferedElements[this._bufferSize++]=t)},e.prototype.flush=function(){if(0!==this._vertexCount){var t,e,i=this.getAttributeBuffer(this._vertexCount),r=this.getIndexBuffer(this._indexCount),n=this.renderer.gl,s=this._bufferedElements,o=this._drawCalls,a=this.MAX_TEXTURES,h=this._packedGeometries,l=this.vertexSize,u=this.renderer.textureGC.count,c=0,p=0,f=0,m=o[0],y=0,v=-1;m.textureCount=0,m.start=0,m.blend=v;var g,x=++Pe._globalBatch;for(g=0;g<this._bufferSize;++g){var b=s[g];s[g]=null,t=b._texture.baseTexture;var w=bt[t.premultiplyAlpha?1:0][b.blendMode];v!==w&&(v=w,e=null,f=a,x++),e!==t&&(e=t,t._batchEnabled!==x&&(f===a&&(x++,f=0,m.size=p-m.start,(m=o[y++]).textureCount=0,m.blend=v,m.start=p),t.touched=u,t._batchEnabled=x,t._id=f,m.textures[m.textureCount++]=t,f++)),this.packInterleavedGeometry(b,i,r,c,p),c+=b.vertexData.length/2*l,p+=b.indices.length}Pe._globalBatch=x,m.size=p-m.start,d.CAN_UPLOAD_SAME_BUFFER?(h[this._flushId]._buffer.update(i.rawBinaryData,0),h[this._flushId]._indexBuffer.update(r,0),this.renderer.geometry.updateBuffers()):(this._packedGeometryPoolSize<=this._flushId&&(this._packedGeometryPoolSize++,h[this._flushId]=new this.geometryClass),h[this._flushId]._buffer.update(i.rawBinaryData,0),h[this._flushId]._indexBuffer.update(r,0),this.renderer.geometry.bind(h[this._flushId]),this.renderer.geometry.updateBuffers(),this._flushId++);var _=this.renderer.texture,S=this.renderer.state;for(g=0;g<y;g++){for(var C=o[g],T=C.textureCount,I=0;I<T;I++)_.bind(C.textures[I],I),C.textures[I]=null;S.setBlendMode(C.blend),n.drawElements(C.type,C.size,n.UNSIGNED_SHORT,2*C.start)}this._bufferSize=0,this._vertexCount=0,this._indexCount=0}},e.prototype.start=function(){this.renderer.state.set(this.state),this.renderer.shader.bind(this._shader),d.CAN_UPLOAD_SAME_BUFFER&&this.renderer.geometry.bind(this._packedGeometries[this._flushId])},e.prototype.stop=function(){this.flush()},e.prototype.destroy=function(){for(var e=0;e<this._packedGeometryPoolSize;e++)this._packedGeometries[e]&&this._packedGeometries[e].destroy();this.renderer.off("prerender",this.onPrerender,this),this._aBuffers=null,this._iBuffers=null,this._packedGeometries=null,this._drawCalls=null,this._shader&&(this._shader.destroy(),this._shader=null),t.prototype.destroy.call(this)},e.prototype.getAttributeBuffer=function(t){var e=Ct(Math.ceil(t/8)),i=It(e),r=8*e;this._aBuffers.length<=i&&(this._iBuffers.length=i+1);var n=this._aBuffers[r];return n||(this._aBuffers[r]=n=new lr(r*this.vertexSize*4)),n},e.prototype.getIndexBuffer=function(t){var e=Ct(Math.ceil(t/12)),i=It(e),r=12*e;this._iBuffers.length<=i&&(this._iBuffers.length=i+1);var n=this._iBuffers[i];return n||(this._iBuffers[i]=n=new Uint16Array(r)),n},e.prototype.packInterleavedGeometry=function(t,e,i,r,n){for(var s=e.uint32View,o=e.float32View,a=r/this.vertexSize,h=t.uvs,l=t.indices,u=t.vertexData,c=t._texture.baseTexture._id,d=Math.min(t.worldAlpha,1),p=d<1&&t._texture.baseTexture.premultiplyAlpha?function(t,e){if(1===e)return(255*e<<24)+t;if(0===e)return 0;var i=t>>16&255,r=t>>8&255,n=255&t;return(255*e<<24)+((i=i*e+.5|0)<<16)+((r=r*e+.5|0)<<8)+(n=n*e+.5|0)}(t._tintRGB,d):t._tintRGB+(255*d<<24),f=0;f<u.length;f+=2)o[r++]=u[f],o[r++]=u[f+1],o[r++]=h[f],o[r++]=h[f+1],s[r++]=p,o[r++]=c;for(var m=0;m<l.length;m++)i[n++]=a+l[m]},e}(li),dr=function(t,e){if(this.vertexSrc=t,this.fragTemplate=e,this.programCache={},this.defaultGroupCache={},e.indexOf("%count%")<0)throw new Error('Fragment template must contain "%count%".');if(e.indexOf("%forloop%")<0)throw new Error('Fragment template must contain "%forloop%".')};dr.prototype.generateShader=function(t){if(!this.programCache[t]){for(var e=new Int32Array(t),i=0;i<t;i++)e[i]=i;this.defaultGroupCache[t]=oi.from({uSamplers:e},!0);var r=this.fragTemplate;r=(r=r.replace(/%count%/gi,""+t)).replace(/%forloop%/gi,this.generateSampleSrc(t)),this.programCache[t]=new Ui(this.vertexSrc,r)}var n={tint:new Float32Array([1,1,1,1]),translationMatrix:new $t,default:this.defaultGroupCache[t]};return new Vi(this.programCache[t],n)},dr.prototype.generateSampleSrc=function(t){var e="";e+="\n",e+="\n";for(var i=0;i<t;i++)i>0&&(e+="\nelse "),i<t-1&&(e+="if(vTextureId < "+i+".5)"),e+="\n{",e+="\n\tcolor = texture2D(uSamplers["+i+"], vTextureCoord);",e+="\n}";return e+="\n",e+="\n"};var pr=function(t){function e(e){void 0===e&&(e=!1),t.call(this),this._buffer=new Ze(null,e,!1),this._indexBuffer=new Ze(null,e,!0),this.addAttribute("aVertexPosition",this._buffer,2,!1,at).addAttribute("aTextureCoord",this._buffer,2,!1,at).addAttribute("aColor",this._buffer,4,!0,st).addAttribute("aTextureId",this._buffer,1,!0,at).addIndex(this._indexBuffer)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(ii),fr="precision highp float;\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform vec4 tint;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vColor = aColor * tint;\n}\n",mr="varying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\nuniform sampler2D uSamplers[%count%];\n\nvoid main(void){\n    vec4 color;\n    %forloop%\n    gl_FragColor = color * vColor;\n}\n",yr=function(){},vr={defaultVertexSrc:{configurable:!0},defaultFragmentTemplate:{configurable:!0}};yr.create=function(t){var e=Object.assign({vertex:fr,fragment:mr,geometryClass:pr,vertexSize:6},t),i=e.vertex,r=e.fragment,n=e.vertexSize,s=e.geometryClass;return function(t){function e(e){t.call(this,e),this.shaderGenerator=new dr(i,r),this.geometryClass=s,this.vertexSize=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(cr)},vr.defaultVertexSrc.get=function(){return fr},vr.defaultFragmentTemplate.get=function(){return mr},Object.defineProperties(yr,vr);yr.create();
/*!
 * @pixi/filter-pixelate - v3.0.3
 * Compiled Wed, 29 May 2019 03:04:05 UTC
 *
 * @pixi/filter-pixelate is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */var gr=function(t){function e(e){void 0===e&&(e=10),t.call(this,"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}","precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform vec2 size;\nuniform sampler2D uSampler;\n\nuniform vec4 filterArea;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 pixelate(vec2 coord, vec2 size)\n{\n\treturn floor( coord / size ) * size;\n}\n\nvoid main(void)\n{\n    vec2 coord = mapCoord(vTextureCoord);\n\n    coord = pixelate(coord, size);\n\n    coord = unmapCoord(coord);\n\n    gl_FragColor = texture2D(uSampler, coord);\n}\n"),this.size=e}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={size:{configurable:!0}};return i.size.get=function(){return this.uniforms.size},i.size.set=function(t){"number"==typeof t&&(t=[t,t]),this.uniforms.size=t},Object.defineProperties(e.prototype,i),e}(Gi);class xr{constructor(t,e,i,r,n,s){this.x=t*i,this.y=e*i,this.w=i,this.h=i,this.Collider=new a.a.Bodies.rectangle(this.x,this.y,i,i,{isStatic:!0}),this.edgeBoxes=[],this.edgeBoxWidth=1,this.edgeBoxHeight=2;if(this.walkBoxHeight=20,n){let t=new a.a.Bodies.rectangle(this.x+i/2-this.edgeBoxWidth/2,this.y-i/2+20,this.edgeBoxWidth,this.walkBoxHeight,{isStatic:!0,isSensor:!0});t.isEdgeBox=!0,t.isRight=!0,this.edgeBoxes.push(t)}if(r){let t=new a.a.Bodies.rectangle(this.x-i/2+this.edgeBoxWidth/2,this.y-i/2+20,this.edgeBoxWidth,this.walkBoxHeight,{isStatic:!0,isSensor:!0});t.isEdgeBox=!0,t.isRight=!1,this.edgeBoxes.push(t)}s&&(this.walkBox=new a.a.Bodies.rectangle(this.x,this.y-i/2-this.walkBoxHeight/2,i,this.walkBoxHeight,{isStatic:!0,isSensor:!0}),this.walkBox.isEdgeBox=!1)}drawRect(t,e){if(t.beginFill(6304424),t.drawRect(this.Collider.vertices[0].x,this.Collider.vertices[0].y,this.w,this.h),t.endFill(),this.walkBox&&(e.beginFill(3319874,.5),e.drawRect(this.x-this.w/2,this.walkBox.position.y-this.walkBoxHeight/2,this.w,this.walkBoxHeight),e.endFill()),0!=this.edgeBoxes.length)for(let t of this.edgeBoxes)e.beginFill(16515843,.8),e.drawRect(t.position.x-this.edgeBoxWidth/2,t.position.y-this.edgeBoxWidth/2,this.edgeBoxWidth,this.edgeBoxHeight),e.endFill()}}class br{constructor(t,e,i,r,n=!1){this.a=new a.a.Vector.create(t,e),this.b=new a.a.Vector.create(i,r),this.isEdge=n}}class wr{constructor(t,e,i){this.pos=t,this.dir=a.a.Vector.create(1,0),this.dir=a.a.Vector.rotateAbout(this.dir,e,a.a.Vector.create(0,0)),this.angle=e,this.endpoint=i,this.closestPoint=i}setDir(t){this.dir=t,this.angle=a.a.Vector.angle(this.dir,a.a.Vector.create(0,0))}lookAt(t,e){this.dir.x=t-this.pos.x,this.dir.y=e-this.pos.y,this.dir=a.a.Vector.normalise(this.dir)}show(){stroke(127),push(),translate(this.pos.x,this.pos.y),line(0,0,10*this.dir.x,10*this.dir.y),pop()}cast(t){const e=t.a.x,i=t.a.y,r=t.b.x,n=t.b.y,s=this.pos.x,o=this.pos.y,h=this.pos.x+this.dir.x,l=this.pos.y+this.dir.y,u=(e-r)*(o-l)-(i-n)*(s-h);if(0==u)return;const c=((e-s)*(o-l)-(i-o)*(s-h))/u;if(c>0&&c<1&&-((e-r)*(i-o)-(i-n)*(e-s))/u>0){const t=a.a.Vector.create();return t.x=e+c*(r-e),t.y=i+c*(n-i),t}}}class _r{constructor(t,e,i,r,n){this.pos=a.a.Vector.create(t,e),this.rays=[],this.cornerRays=[],this.hangRay=new wr(this.pos,0,a.a.Vector.create(0,0)),this.hangRay.setDir(a.a.Vector.create(0,-1)),this.endpoints=r,this.segments=i,this.tris=[],this.shaderProgram=n,this.color=[1,.831,.322,1,.831,.322,1,.831,.322];for(let t of r){let e=a.a.Vector.create(t.x-this.pos.x,t.y-this.pos.y);a.a.Vector.normalise(e);let i=new wr(this.pos,0,t);i.setDir(e),this.rays.push(i)}this.renderer=PIXI.autoDetectRenderer(),this.uniforms={dimensions:[window.innerWidth,window.innerHeight],position:[this.pos.x,this.pos.y],time:Math.random()},this.shader=new PIXI.Shader.from(n.vert,n.frag,this.uniforms)}compare(t,e){return t.angle-e.angle}update(t,e){this.pos.x=t,this.pos.y=e,this.rays=[],this.uniforms={dimensions:[window.innerWidth,window.innerHeight],position:[t,e],time:Math.random()},this.shader=new PIXI.Shader.from(this.shaderProgram.vert,this.shaderProgram.frag,this.uniforms),this.cornerRays=[];for(let t of this.endpoints){let e=a.a.Vector.create(t.x-this.pos.x,t.y-this.pos.y);a.a.Vector.normalise(e);let i=new wr(this.pos,0,t);i.setDir(e),this.rays.push(i)}this.look(),this.auxLook()}look(){for(let t of this.rays)this.cast(t)}cast(t){let e=t.endpoint,i=Math.sqrt(Math.pow(this.pos.x-e.x,2)+Math.pow(this.pos.y-e.y,2));for(let r of this.segments){const n=t.cast(r);if(n){const t=Math.sqrt(Math.pow(this.pos.x-n.x,2)+Math.pow(this.pos.y-n.y,2));t<i&&(i=t,e=n)}}if(e&&(t.closestPoint=e,e==t.endpoint)){let e=new wr(this.pos,0,a.a.Vector.create(-5e3,0)),i=new wr(this.pos,0,a.a.Vector.create(-5e3,0));e.setDir(a.a.Vector.rotate(t.dir,-.005)),i.setDir(a.a.Vector.rotate(t.dir,.005)),this.cornerRays.push(e,i)}}auxLook(){for(let t of this.cornerRays)t=this.auxCast(t),this.rays.push(t);this.rays.sort(this.compare)}auxCast(t){let e=null,i=1/0;for(let r of this.segments){const n=t.cast(r);if(n){const t=Math.sqrt(Math.pow(this.pos.x-n.x,2)+Math.pow(this.pos.y-n.y,2));t<i&&(i=t,e=n)}}return e&&(t.closestPoint=e),t}show(t){t.lineStyle(1,14561865),t.beginFill(16706423,1),t.drawCircle(this.pos.x,this.pos.y,10),t.endFill()}drawLight(t){t.lineStyle(0),t.beginFill(16706423,.5),t.drawPolygon([this.pos.x,this.pos.y,this.rays[0].closestPoint.x,this.rays[0].closestPoint.y,this.rays[this.rays.length-1].closestPoint.x,this.rays[this.rays.length-1].closestPoint.y]),t.endFill();for(let e=1;e<this.rays.length;e++)t.beginFill(16706423,.5),t.drawPolygon([this.pos.x,this.pos.y,this.rays[e-1].closestPoint.x,this.rays[e-1].closestPoint.y,this.rays[e].closestPoint.x,this.rays[e].closestPoint.y]),t.endFill()}drawMesh(t){this.tris=[];for(let e=1;e<this.rays.length;e++){const i=(new PIXI.Geometry).addAttribute("aVertexPosition",[this.pos.x,this.pos.y,this.rays[e-1].closestPoint.x,this.rays[e-1].closestPoint.y,this.rays[e].closestPoint.x,this.rays[e].closestPoint.y],2).addAttribute("aColor",this.color,3),r=new PIXI.Mesh(i,this.shader);r.filters=t,this.tris.push(r)}const e=(new PIXI.Geometry).addAttribute("aVertexPosition",[this.pos.x,this.pos.y,this.rays[0].closestPoint.x,this.rays[0].closestPoint.y,this.rays[this.rays.length-1].closestPoint.x,this.rays[this.rays.length-1].closestPoint.y],2).addAttribute("aColor",this.color,3),i=new PIXI.Mesh(e,this.shader);i.filters=t,this.tris.push(i)}}class Sr{constructor(t,e,i,r,n,s){this.pos=a.a.Vector.create(t,e),this.castSegments=i,this.visionSource=new _r(t,e,i,r,n),this.numStaticRays=this.visionSource.rays.length,this.vel=-1.5,this.visionSource.look(),this.visionSource.auxLook(),this.lightContainer=new PIXI.Container,this.torch=new Cr(t,e,s)}update(t){this.lightContainer.destroy({children:!0}),this.lightContainer=new PIXI.Container,this.pos.x+=this.vel*t,this.visionSource.update(this.pos.x,this.pos.y),this.visionSource.drawMesh();for(let t=0;t<this.visionSource.tris.length;t++)this.lightContainer.addChild(this.visionSource.tris[t])}}class Cr{constructor(t,e,i){this.animation=new PIXI.AnimatedSprite(i),this.animation.position.set(t,e),this.animation.anchor.set(.5),this.animation.scale.set(1.5,1.5),this.animation.animationSpeed=.2,this.animation.gotoAndPlay(9*Math.random())}}class Tr{constructor(t,e,i){this.sprite=new PIXI.Sprite.from(i),this.sprite.position.set(t,e),this.sprite.anchor.set(.5),this.sprite.scale.set(2.5),this.x=t,this.y=e,this.width=this.sprite.width,this.height=this.sprite.height,this.DissolveValue=.8,this.collider=new a.a.Bodies.rectangle(t,e,this.width,this.height,{isStatic:!0,isSensor:!0}),this.collider.isCatnip=!0,this.collider.spriteReference=this.sprite}update(t){this.sprite.y=this.y+t}FixedUpdate(){this.sprite.filters&&(this.DissolveValue-=.01,this.sprite.filters[0].uniforms.DissolveVal=this.DissolveValue,this.DissolveValue<=0&&(this.sprite.renderable=!1,this.sprite.filters[0].uniforms.DissolveVal=.75,this.sprite.filters=null))}}class Ir{constructor(t,e,i,r,n,s,o){this.w=t,this.h=e,this.tileSize=i,this.tileMap={},this.tileset=s,this.numLights=r,this.freeCells=[],this.groundTiles=[],this.terrain=[],this.lights=[],this.torchFrames=o,this.torchSprites=[],this.shaderProgram=n,this.tileContainer=new PIXI.Container,this.backgroundContainer=new PIXI.Container,this.torchContainer=new PIXI.Container,this.edges=new Set,this.vertices=new Set,this.powerups=[]}generateLights(t,e){for(let i=0;i<e;i++){let e=Math.floor(ROT.RNG.getUniform()*t.length),i=t.splice(e,1)[0];this.tileMap[i]="*"}}addLights(t){for(let e in this.tileMap)if("*"==this.tileMap[e]){let i=e.split(","),r=parseInt(i[0]),n=parseInt(i[1]);this.lights.push(new Sr(r*this.tileSize,n*this.tileSize,this.edges,this.vertices,t,this.torchFrames))}this.lights.forEach(t=>{this.torchSprites.push(t.torch.animation)})}parallaxScroll(t,e,i){this.backgroundContainer.x=t.x/e,this.backgroundContainer.y=t.y/i}tileSpriteInit(t,e,i,r=0){let n=new PIXI.Sprite.from(i);n.width=this.tileSize-6,n.height=this.tileSize,0!=r&&n.scale.set(r),n.anchor.set(.5),n.position.x=t*this.tileSize,n.position.y=e*this.tileSize,this.tileContainer.addChild(n)}}class Er extends Ir{constructor(t,e,i,r,n,s,o){super(t,e,i,r,n,s,o),this.cellMap=new ROT.Map.Cellular(t,e,{born:[4,5,6,7,8],survive:[2,3,4,5]}),this.cellMap.randomize(.5);for(var a=8;a>=0;a--)this.cellMap.create();this.cellMap.connect(null,1),this.cellMap.connect((t,e,i)=>{let r=t+","+e;this.tileMap[r]=i});for(let i in this.tileMap){let r=i.split(","),n=parseInt(r[0]),s=parseInt(r[1]);0!=n&&0!=s&&n!=t-1&&s!=e-1||(this.tileMap[i]=1),this.tileMap[i]||this.freeCells.push(i)}this.generateLights(this.freeCells,r),this.caveWalls(this.tileMap,!0,this.tileContainer,this.tileSize),this.generateCatnip(10),this.backgroundTiling(),this.addFeatures(this.freeCells,this.tileMap),this.addCatnip(),console.log("ray cast vertices: ",this.vertices.size),this.addLights(n);let h=Math.floor(ROT.RNG.getUniform()*this.freeCells.length),l=this.freeCells.splice(h,1)[0].split(",");this.playerSpawn=new PIXI.Point(parseInt(l[0])*this.tileSize,parseInt(l[1])*this.tileSize)}caveWalls(t,e,i,r){for(let n in t)if(1==t[n]){let s,o=n.split(","),a=parseInt(o[0]),h=parseInt(o[1]),l=!1,u=!1,c=!1,d=!1,p=!1,f=!1,m=!1,y=!1;if(1==t[a-1+","+h]&&(l=!0),1==t[a+1+","+h]&&(u=!0),1==t[a+","+(h-1)]&&(c=!0),1==t[a+","+(h+1)]&&(d=!0),1==t[a-1+","+(h-1)]&&(p=!0),1==t[a+1+","+(h-1)]&&(f=!0),1==t[a+1+","+(h+1)]&&(m=!0),1==t[a-1+","+(h+1)]&&(y=!0),!c&&h>0&&this.groundTiles.push(n),e){let t=new xr(a,h,this.tileSize,!l&&!c,!u&&!c,!c);this.terrain.push(t);let e=t.Collider.vertices;e.forEach((t,e)=>{switch(e){case 0:(!l&&!c||!c&&p)&&this.vertices.add(t);break;case 1:(!u&&!c||!c&&f)&&this.vertices.add(t);break;case 2:(!u&&!d||!d&&m)&&this.vertices.add(t);break;case 3:(!l&&!d||!d&&y)&&this.vertices.add(t)}}),c||this.edges.add(new br(e[0].x,e[0].y,e[1].x,e[1].y)),u||this.edges.add(new br(e[1].x,e[1].y,e[2].x,e[2].y)),d||this.edges.add(new br(e[3].x,e[3].y,e[2].x,e[2].y)),l||this.edges.add(new br(e[0].x,e[0].y,e[3].x,e[3].y))}if(s=c&&d&&u&&l?"Interior":!c&&l&&u&&d?"TopEdge":c&&l&&u&&!d?"BottomEdge":c&&l&&!u&&d?"RightEdge":c&&!l&&u&&d?"LeftEdge":!c&&!l&&u&&d?"TLCorner":!c&&l&&!u&&d?"TRCorner":c&&!l&&u&&!d?"BLCorner":c&&l&&!u&&!d?"BRCorner":c+l+u+d==1?"Wang":c+d==2||l+u==2?"Shaft":"Loner",s){let t=new PIXI.Sprite.from(this.tileset.get(s));switch(t.width=r+2,t.height=r,t.anchor.set(.5),t.position.x=a*r,t.position.y=h*r,s){case"Wang":l?t.angle=90:c?t.angle=180:u&&(t.angle=270);break;case"Shaft":l&&(t.angle=90)}i.addChild(t)}}}backgroundTiling(){this.bgScale=2;let t=new PIXI.TilingSprite(this.tileset.get("Background"),this.tileSize*this.w*this.bgScale,this.tileSize*this.h*this.bgScale);t.x-=this.w*this.tileSize*this.bgScale/2,t.y-=this.h*this.tileSize*this.bgScale/2,t.tileScale.x=this.tileSize/this.tileset.get("Background").width*.75,t.tileScale.y=this.tileSize/this.tileset.get("Background").height*.75,this.backgroundContainer.addChild(t),this.bgSprite=t}addFeatures(t,e){for(let i of t){let t=i.split(","),r=parseInt(t[0]),n=parseInt(t[1]);if(0==Math.floor(3*ROT.RNG.getUniform()))if(1==e[r+","+(n-1)])this.tileSpriteInit(r,n,this.tileset.get("Spikes"));else if(1==e[r+","+(n+1)])switch(Math.floor(2*ROT.RNG.getUniform())){case 0:this.tileSpriteInit(r,n,this.tileset.get("Grass-1"));break;case 1:this.tileSpriteInit(r,n,this.tileset.get("Grass-2"))}}}generateCatnip(t){for(let e=0;e<t;e++){let t=Math.floor(ROT.RNG.getUniform()*this.groundTiles.length),e=this.groundTiles.splice(t,1)[0],i=e.split(","),r=(parseInt(i[0]),parseInt(i[1]));r-=1,this.tileMap[e]="N"}}addCatnip(){for(let t in this.tileMap)if("N"==this.tileMap[t]){let e=t.split(","),i=parseInt(e[0]),r=parseInt(e[1]),n=new Tr(i*this.tileSize,--r*this.tileSize,this.tileset.get("catnip"));this.powerups.push(n),this.tileContainer.addChild(n.sprite)}}}class Ar{constructor(){this.isRunning=!1,this.startTime=null,this.endTime=null,this.elapsedTime=null;let t=new Date;this.initTime=t.getTime()}start(){this.isRunning=!0;let t=new Date;this.startTime=t.getTime()}stop(){this.isRunning&&(this.isRunning=!1)}getElapsedTime(){if(this.isRunning){return(new Date).getTime()-this.startTime}return 0}}class Mr{constructor(t,e){this.lastInput=null,this.prevTimeScale=1,this.prevVel=0,this.animationContainer=new PIXI.Container,this.position=new PIXI.Point(t.x,t.y),this.scale=3.5,this.maxVel=5,this.defaultMaxVel=5,this.tripMaxVel=6.5,this.jumpVel=-25,this.defaultJumpVel=-25,this.tripJumpVel=-30,this.unScaledJumpVel=-25,this.xVel=0,this.isGrounded=!1,this.inSlide=!1,this.inSlowDown=!1,this.jumpInput=!1,this.isHanging=!1,this.cameraSnapped=!0,this.bouncyBug=0,this.collisionTimer=new Ar,this.wallJumpTimer=new Ar,this.lateJumpDuration=225,this.fallDamageMS=1500,this.grappleMS=125,this.fallDamageVel=10,this.idleFrameCount=0,this.maxIdleFrames=60,this.climbTranslation=new PIXI.Point(0,0),this.cameraMovement=new PIXI.Point(0,0),this.flip="left",this.animations=e,this.currentAnimation="none",this.colliderWidth=this.animations.get("walk").width,this.colliderHeight=this.animations.get("walk").height,this.A=a.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.B=a.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.C=a.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.D=a.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.bounds=[new br(this.A.x,this.A.y,this.B.x,this.B.y),new br(this.A.x,this.A.y,this.C.x,this.C.y),new br(this.C.x,this.C.y,this.D.x,this.D.y),new br(this.B.x,this.B.y,this.D.x,this.D.y)],this.body=new a.a.Bodies.rectangle(this.position.x,this.position.y,this.colliderWidth,this.colliderHeight,{density:5e-4,frictionAir:.06,restitution:0,friction:.01,inertia:1/0}),this.animations.forEach(t=>{this.animationContainer.addChild(t)})}update(t){if(!this.isGrounded&&this.body.velocity.y>1&&(this.prevVel=this.body.velocity.y),this.wallJumpTimer.isRunning&&this.wallJumpTimer.getElapsedTime()>this.grappleMS&&(this.handleEvent({type:"inputDown",direction:this.lastInput}),this.wallJumpTimer.stop()),"stop"!=this.currentAnimation||this.animations.get("stop").playing?"idle"!=this.currentAnimation||this.animations.get("idle").playing||(this.idleFrameCount++,this.idleFrameCount>this.maxIdleFrames&&(this.idleFrameCount=0,this.setAnimation("idle",0,!0),this.maxIdleFrames=200*Math.random())):this.setAnimation("idle"),"climb"==this.currentAnimation){if("end"!=this.lastInput&&this.lastInput!=this.flip&&this.animations.get("climb").currentFrame<4)console.log("climb cancel",this.lastInput),this.setAnimation("jump",5),this.setFlip(this.lastInput),this.isGrounded=!1,this.inSlide=!1,this.jumpInput=!1,this.cameraSnapped=!0,a.a.Body.setStatic(this.body,!1),this.isHanging=!1;else if(!this.animations.get("climb").playing){switch(a.a.Body.setPosition(this.body,new a.a.Vector.create(this.climbTranslation.x,this.climbTranslation.y)),a.a.Body.setVelocity(this.body,new a.a.Vector.create(0,0)),this.lastInput!=this.flip&&(this.lastInput="end"),this.lastInput){case"right":this.setAnimation("walk"),this.xVel=this.maxVel,this.inSlowDown=!1;break;case"left":this.setAnimation("walk"),this.xVel=-this.maxVel,this.inSlowDown=!1;break;default:this.setAnimation("stop"),this.inSlowDown=!0}this.lockCamera(),this.bouncyBug||(this.bouncyBug=1),this.isGrounded=!0,this.inSlide=!1,this.jumpInput=!1,this.isHanging=!1,a.a.Body.setStatic(this.body,!1)}}else a.a.Body.setVelocity(this.body,new a.a.Vector.create(this.xVel,this.body.velocity.y));this.setPosition(this.body.position.x,this.body.position.y),this.inSlowDown&&this.slowVelocity(),t!=this.prevTimeScale&&(this.animations.forEach((function(e){e.animationSpeed*=.5==t?.5:2})),this.prevTimeScale=t);let e,i=this.lateJumpDuration/5/t;this.inSlide?(i/=2,e=i):e=this.lateJumpDuration/t,!this.isHanging&&this.collisionTimer.isRunning&&this.collisionTimer.getElapsedTime()>i&&this.setAnimation("jump",5),!this.isHanging&&this.collisionTimer.isRunning&&this.collisionTimer.getElapsedTime()>e&&(this.collisionTimer.stop(),this.isGrounded=!1,this.inSlide=!1,this.jumpInput=!1)}setPosition(t,e){this.position.x=t,this.position.y=e,this.A=a.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.B=a.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.C=a.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.D=a.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.bounds=[new br(this.A.x,this.A.y,this.B.x,this.B.y),new br(this.A.x,this.A.y,this.C.x,this.C.y),new br(this.C.x,this.C.y,this.D.x,this.D.y),new br(this.B.x,this.B.y,this.D.x,this.D.y)],this.animations.forEach((function(i){i.x=t,i.y=e}))}setAnimation(t,e=0,i=!1){if(t!=this.currentAnimation||i){this.currentAnimation=t,this.animations.forEach((function(t){t.visible=!1}));var r=this.animations.get(t);r.visible=!0,r.gotoAndPlay(e),this.animations.set(t,r)}}setFlip(t){var e;this.cameraSnapped&&("right"==t?(e=-Math.abs(this.scale),this.scale=-Math.abs(this.scale),this.flip="right"):"left"==t&&(e=Math.abs(this.scale),this.scale=Math.abs(this.scale),this.flip="left"),this.animations.forEach((function(t){t.scale.x=e})))}slowVelocity(){this.xVel>0?(this.xVel-=.1,this.xVel<=0&&(this.xVel=0,this.inSlowDown=!1)):this.xVel<0&&(this.xVel+=.1,this.xVel>=0&&(this.xVel=0,this.inSlowDown=!1))}drawCollider(t){t.clear(),t.beginFill(16549891,.5),t.drawRect(this.position.x-this.colliderWidth/2,this.position.y-this.colliderHeight/2-1,this.colliderWidth,this.colliderHeight),t.endFill()}getClimbDistance(t,e){this.animations.get("climb").totalFrames;this.cameraMovement.x=(t-this.position.x)/45,this.cameraMovement.y=(e-this.position.y)/45}startLedgeClimb(t,e){let i=a.a.Vector;this.inSlide=!1,this.isGrounded=!1,this.isHanging=!0,this.setAnimation("climb");let r=40,n=-60;e?this.setFlip("left"):(r*=-1,n*=-1,this.setFlip("right"));let s=new i.create(t.x+r,t.y+0);a.a.Body.setStatic(this.body,!0),a.a.Body.setVelocity(this.body,new i.create(0,0)),a.a.Body.setPosition(this.body,s),this.climbTranslation.set(s.x+n,s.y+-52),this.getClimbDistance(this.climbTranslation.x,this.climbTranslation.y),this.cameraSnapped=!1}lockCamera(){this.cameraSnapped=!0}handleEvent(t){switch(t.type){case"inputDown":switch(t.direction){case"up":this.isGrounded?(a.a.Body.setVelocity(this.body,a.a.Vector.create(this.xVel,this.jumpVel)),this.setAnimation("jump",0,!0),this.isGrounded=!1,this.jumpInput=!0,this.inSlide=!1):this.inSlide&&(this.wallJumpTimer.start(),"right"==this.flip?(this.setFlip("left"),this.xVel=1.5*-this.maxVel,a.a.Body.setVelocity(this.body,a.a.Vector.create(this.xVel,.85*this.jumpVel)),this.setAnimation("jump",0,!0),this.inSlide=!1,this.jumpInput=!0):"left"==this.flip&&(this.setFlip("right"),this.xVel=1.5*this.maxVel,a.a.Body.setVelocity(this.body,a.a.Vector.create(this.xVel,.85*this.jumpVel)),this.setAnimation("jump",0,!0),this.inSlide=!1,this.jumpInput=!0));break;case"down":break;case"right":this.isGrounded&&this.setAnimation("walk"),this.setFlip("right"),this.inSlowDown=!1,this.xVel=this.maxVel,this.lastInput="right";break;case"left":this.isGrounded&&this.setAnimation("walk"),this.setFlip("left"),this.inSlowDown=!1,this.xVel=-this.maxVel,this.lastInput="left"}break;case"inputUp":switch(t.direction){case"up":case"down":break;case"right":case"left":this.lastInput="end",this.isGrounded?(this.setAnimation("stop"),this.xVel=0):this.inSlowDown=!0}}}}var Pr=function(t,e,i,r,n){this.rightDown=!1,this.leftDown=!1,document.onkeydown=function(e){e=e||window.event;let s={type:"inputDown"};"38"==e.keyCode?s.direction="up":"40"==e.keyCode?s.direction="down":"37"!=e.keyCode||this.leftDown?"39"!=e.keyCode||this.rightDown?"32"==e.keyCode?n.isOpen?s.direction="enter":i.speed=.5:"88"==e.keyCode?t.showDebug^=!0:"70"==e.keyCode?r.addTrauma(1):"27"==e.keyCode&&n.onClick(i):(s.direction="right",this.leftDown=!1,this.rightDown=!0):(s.direction="left",this.rightDown=!1,this.leftDown=!0);n.isOpen?("up"==s.direction?s.direction="left":"down"==s.direction&&(s.direction="right"),n.handleEvent(s)):t.handleEvent(s)},document.onkeyup=function(e){e=e||window.event;let r={type:"inputUp"};"38"==e.keyCode?r.direction="up":"40"==e.keyCode?r.direction="down":"37"==e.keyCode&&this.leftDown?(r.direction="left",this.leftDown=!1):"39"==e.keyCode&&this.rightDown?(this.rightDown=!1,r.direction="right"):"32"==e.keyCode&&(n.isOpen||(i.speed=1));t.handleEvent(r)}};Pr.prototype.constructor=Pr;class kr{constructor(t,e,i){let r=new PIXI.Graphics;this.mesh=new PIXI.Graphics;let n=e.tileSize,s=e.w,o=e.h;const a=new PIXI.Rectangle(-n/2,-n/2,s*n,o*n);r.beginFill(16777215,1),r.drawRect(-n/2,-n/2,s*n,o*n),r.endFill(),t.forEach(t=>{t.lightContainer.children.forEach(t=>{let e=t.geometry.getBuffer("aVertexPosition").data;r.beginFill(0,1),r.moveTo(e[0],e[1]),r.lineTo(e[2],e[3]),r.lineTo(e[4],e[5]),r.lineTo(e[0],e[1]),r.endFill()})});const h=i.generateTexture(r,PIXI.SCALE_MODES.NEAREST,1,a);this.focus=new PIXI.Sprite(h),this.focus.x=-n/2,this.focus.y=-n/2,this.mesh.beginFill(0,.4),this.mesh.drawRect(-n/2,-n/2,s*n,o*n),this.mesh.endFill(),this.mesh.mask=this.focus}}var Br=i(3);class Or{constructor(t){this.targetPos=t,this.position=t,this.offset=new PIXI.Point(0,0),this.angleOffset=0,this.maxOffset=250,this.maxAngleOffset=10,this.flipOffset=75,this.shake=0,this.trauma=0,this.baseSeed=Date.now(),this.xNoise=Object(Br.makeNoise2D)(this.baseSeed),this.yNoise=Object(Br.makeNoise2D)(this.baseSeed+1),this.rNoise=Object(Br.makeNoise2D)(this.baseSeed+2),this.noiseIncrement=0}update(t,e,i){this.noiseIncrement+=i,this.trauma-=.015*i,this.trauma<0&&(this.trauma=0),this.shake=Math.pow(this.trauma,2),this.simplexShake();let r=new PIXI.Point;r.copyFrom(t),"right"==e?r.x+=this.flipOffset:r.x-=this.flipOffset,this.asymptoticAverage(r,.05),this.position.x+=this.offset.x,this.position.y+=this.offset.y}addTrauma(t){this.trauma+=t,console.log("trauma += ",t)}randomShake(){this.offset.x=this.maxOffset*this.shake*(2*Math.random()-1),this.offset.y=this.maxOffset*this.shake*(2*Math.random()-1),this.angleOffset=this.maxAngleOffset*this.shake*(2*Math.random()-1)}simplexShake(){this.offset.x=this.maxOffset*this.shake*this.xNoise(this.noiseIncrement,0),this.offset.y=this.maxOffset*this.shake*this.yNoise(this.noiseIncrement,0),this.angleOffset=this.maxAngleOffset*this.shake*this.rNoise(this.noiseIncrement,0)}asymptoticAverage(t,e){const i=1-e;this.position.x=i*this.position.x+e*t.x,this.position.y=i*this.position.y+e*t.y}}class Rr extends class{constructor(t){this.pressed=!1,this.sprites=new Map([["unpressed",new PIXI.Sprite.from(t[0])],["pressed",new PIXI.Sprite.from(t[1])]]),this.sprites.forEach(t=>{t.interactive=!0,t.visible=!1,t.scale.set(7)}),this.sprites.get("unpressed").visible=!0,this.interactionRectangle=new PIXI.Rectangle,console.log("hello")}}{constructor(t,e,i,r,n){super(t),this.type=e,this.eventCallback=r,this.pauseCallback=n,this.inPause=!1,this.sprites.forEach(t=>{t.position.copyFrom(i),t.alpha=.5}),this.height=this.sprites.get("unpressed").height,this.width=this.sprites.get("unpressed").width}onPress(){this.swapButtons();const t={type:"inputDown",direction:this.type};this.inPause?("up"==t.direction&&(t.direction="enter"),this.pauseCallback(t)):this.eventCallback(t),this.pressed=!0}onEnd(){this.swapButtons();const t={type:"inputUp",direction:this.type};this.inPause?this.pauseCallback(t):this.eventCallback(t),this.pressed=!1}onMove(t){let e=t.data.global;this.pressed?this.sprites.get("pressed").getBounds().contains(e.x,e.y)||this.onEnd():this.sprites.get("unpressed").getBounds().contains(e.x,e.y)&&this.onPress()}swapButtons(){this.sprites.get("unpressed").visible?(this.sprites.get("unpressed").visible=!1,this.sprites.get("pressed").visible=!0):(this.sprites.get("unpressed").visible=!0,this.sprites.get("pressed").visible=!1)}setPosition(t,e){let i=new PIXI.Point;i.copyFrom(t),i.x+=e.x,i.y+=e.y,this.sprites.forEach(t=>{t.position.copyFrom(i)})}}class Fr{constructor(t,e,i,r,n,s){this.clientTopLeft=new PIXI.Point(e.x-window.innerWidth,e.y-window.innerHeight),n.addEventListener("touchstart",this.handleTouches.bind(this)),n.addEventListener("touchend",this.handleTouches.bind(this)),n.addEventListener("touchmove",this.handleTouches.bind(this)),n.addEventListener("click",t=>{console.log("click: x: ",t.clientX,"y: ",t.clientY)}),this.buttonContainer=new PIXI.Container,this.buttons=new Map([["left",new Rr(t.get("left"),"left",e,i,r)],["right",new Rr(t.get("right"),"right",e,i,r)],["up",new Rr(t.get("up"),"up",e,i,r)]]),this.buttons.forEach(t=>{t.sprites.forEach(t=>{this.buttonContainer.addChild(t)})}),this.leftButtonOffset=new PIXI.Point(10-window.innerWidth,window.innerHeight-(this.buttons.get("left").height+10)),this.rightButtonOffset=new PIXI.Point(this.leftButtonOffset.x+this.buttons.get("left").width+5,this.leftButtonOffset.y),this.upButtonOffset=new PIXI.Point(window.innerWidth-this.buttons.get("left").width-5,this.leftButtonOffset.y);let o=this.buttons.get("left").sprites.get("unpressed");console.log(o.getBounds())}handleTouches(t){console.log("touches: ",t.touches.length),this.buttons.forEach(e=>{let i=!1;for(let r=0;r<t.touches.length;r++){let n=t.touches.item(r);e.interactionRectangle.contains(n.clientX,n.clientY)&&(i=!0)}i!=e.pressed&&(e.pressed=i,e.pressed?e.onPress():e.onEnd())})}onMove(t){let e=t.data.global;this.buttons.forEach(t=>{t.pressed?t.sprites.get("pressed").getBounds().contains(e.x,e.y)||t.onEnd():t.sprites.get("unpressed").getBounds().contains(e.x,e.y)&&t.onPress()})}moveButtons(t){this.buttons.get("left").interactionRectangle=this.buttons.get("left").sprites.get("unpressed").getBounds(),this.buttons.get("right").interactionRectangle=this.buttons.get("right").sprites.get("unpressed").getBounds(),this.buttons.get("up").interactionRectangle=this.buttons.get("up").sprites.get("unpressed").getBounds(),this.buttons.get("left").setPosition(t,this.leftButtonOffset),this.buttons.get("right").setPosition(t,this.rightButtonOffset),this.buttons.get("up").setPosition(t,this.upButtonOffset)}onResize(){this.leftButtonOffset=new PIXI.Point(10-window.innerWidth,window.innerHeight-(this.buttons.get("left").height+10)),this.rightButtonOffset=new PIXI.Point(this.leftButtonOffset.x+this.buttons.get("left").width+5,this.leftButtonOffset.y),this.upButtonOffset=new PIXI.Point(window.innerWidth-this.buttons.get("left").width-5,this.leftButtonOffset.y)}}
/*!
 * @pixi/filter-color-replace - v3.0.3
 * Compiled Wed, 29 May 2019 03:04:05 UTC
 *
 * @pixi/filter-color-replace is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */var Dr=function(t){function e(e,i,r){void 0===e&&(e=16711680),void 0===i&&(i=0),void 0===r&&(r=.4),t.call(this,"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}","varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec3 originalColor;\nuniform vec3 newColor;\nuniform float epsilon;\nvoid main(void) {\n    vec4 currentColor = texture2D(uSampler, vTextureCoord);\n    vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));\n    float colorDistance = length(colorDiff);\n    float doReplace = step(colorDistance, epsilon);\n    gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);\n}\n"),this.uniforms.originalColor=new Float32Array(3),this.uniforms.newColor=new Float32Array(3),this.originalColor=e,this.newColor=i,this.epsilon=r}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={originalColor:{configurable:!0},newColor:{configurable:!0},epsilon:{configurable:!0}};return i.originalColor.set=function(t){var e=this.uniforms.originalColor;"number"==typeof t?(gt(t,e),this._originalColor=t):(e[0]=t[0],e[1]=t[1],e[2]=t[2],this._originalColor=xt(e))},i.originalColor.get=function(){return this._originalColor},i.newColor.set=function(t){var e=this.uniforms.newColor;"number"==typeof t?(gt(t,e),this._newColor=t):(e[0]=t[0],e[1]=t[1],e[2]=t[2],this._newColor=xt(e))},i.newColor.get=function(){return this._newColor},i.epsilon.set=function(t){this.uniforms.epsilon=t},i.epsilon.get=function(){return this.uniforms.epsilon},Object.defineProperties(e.prototype,i),e}(Gi);class Lr{constructor(t,e,i,r,n,s,o,a){this.ticker=o,this.catnipTicker=a,this.isOpen=!1,this.inPaletteMenu=!1,this.inOptionsMenu=!1,this.toggleButton=new Ur([t.get("pause"),t.get("exit")]),this.paletteFilter=n,this.colorMaps=e,this.playerAnimations=s,this.cameraShake=!0,this.menuColors=[16753234,3749987,11916254,9734845],this.toggleButton.sprites.forEach(t=>{t.on("click",this.onClick.bind(this,o)),t.on("tap",this.onClick.bind(this,o)),t.position.set(i.x,i.y)}),this.pausedText=this.staticText(t),this.pauseTicker=new PIXI.Ticker,this.pauseTicker.add(this.pauseBlinker.bind(this)),this.PAUSE_BLINKER_INTERVAL=500,this.pauseBlinkerLag=0,this.toggleButtonOffset=new PIXI.Point(window.innerWidth-this.toggleButton.width-16,32-window.innerHeight),this.buttonContainer=new PIXI.Container,this.buttonContainer.addChild(this.toggleButton.buttonContainer,this.pausedText),this.animationContainer=r,this.mainMenu=new Nr(i),this.paletteMenu=new Vr(i),this.optionsMenu=new Xr(i),this.activeMenu=this.mainMenu,this.subMenus=[this.mainMenu,this.paletteMenu,this.optionsMenu],this.subMenus.forEach(t=>{this.buttonContainer.addChild(t.displayContainer)});let h=new Dr(1576960,16753234,.001);this.playerAnimations.filters=[h],this.changePalette(),this.subMenus.forEach(t=>{t.displayContainer.children.forEach(t=>{t.visible=!1})})}onClick(t){this.isOpen^=1,this.toggleButton.sprites.forEach(t=>{t.visible^=1}),this.isOpen?(this.activeMenu.onToggle(this.isOpen),this.inPaletteMenu=!1):(this.activeMenu.onToggle(this.isOpen),this.activeMenu=this.mainMenu,this.activeMenu.onToggle(this.isOpen)),this.controller&&this.controller.buttons.forEach(t=>{t.inPause=this.isOpen}),this.isOpen?(this.pauseTicker.start(),this.pausedText.visible=!0,this.pauseBlinkerLag=0,this.pauseBlinker(),t.speed=0,this.catnipTicker.speed=0,this.controller&&this.controller.buttonContainer.children.forEach(t=>{t.interactive=!1}),this.animationContainer.children.forEach(t=>{t.stop&&t.stop()}),this.playerAnimations.children.forEach(t=>{t.stop()})):(t.speed=1,this.catnipTicker.speed=1,this.pausedText.visible=!1,this.pauseTicker.stop(),this.controller&&this.controller.buttonContainer.children.forEach(t=>{t.interactive=!0}),this.animationContainer.children.forEach(t=>{t.play&&t.play()}),this.playerAnimations.children.forEach(t=>{t.play()}))}handleEvent(t){let e=!1;switch(t.type){case"inputDown":switch(t.direction){case"right":this.activeMenu.currentIndex>=this.activeMenu.options.length-1?this.activeMenu.currentIndex=0:this.activeMenu.currentIndex++;const t=this.activeMenu.currentIndex;this.activeMenu.currentKey=this.activeMenu.options[t].label,this.inPaletteMenu&&this.changePalette();break;case"left":0==this.activeMenu.currentIndex?this.activeMenu.currentIndex=this.activeMenu.options.length-1:this.activeMenu.currentIndex--;const i=this.activeMenu.currentIndex;this.activeMenu.currentKey=this.activeMenu.options[i].label,this.inPaletteMenu&&this.changePalette();break;case"enter":case"up":switch(e=!0,this.activeMenu.currentKey){case"RESUME":this.onClick(this.ticker);break;case"REROLL":this.onReroll();break;case"PALETTE":e=!1,this.togglePalleteMenu(!0);break;case"OPTIONS":e=!1,this.toggleOptionsMenu(!0);break;case"BACK":e=!1,this.toggleOptionsMenu(!1);break;case"HIDE   BUTTONS:   ON":case"HIDE   BUTTONS:   OFF":if(this.controller){this.controller.buttonContainer.visible^=1;const t=this.controller.buttonContainer.visible;this.toggleButton.buttonContainer.children.forEach(e=>{e.alpha=t?.5:0}),t?(this.optionsMenu.options[1].inactiveSprite.text="HIDE   BUTTONS:   OFF",this.optionsMenu.options[1].activeSprite.text="HIDE   BUTTONS:   OFF"):(this.optionsMenu.options[1].inactiveSprite.text="HIDE   BUTTONS:   ON",this.optionsMenu.options[1].activeSprite.text="HIDE   BUTTONS:   ON")}e=!1;break;case"CAMERA   SHAKE:   OFF":case"CAMERA   SHAKE:   ON":this.cameraShake^=1,this.cameraShake?(this.optionsMenu.options[2].inactiveSprite.text="CAMERA   SHAKE:   ON",this.optionsMenu.options[2].activeSprite.text="CAMERA   SHAKE:   ON"):(this.optionsMenu.options[2].inactiveSprite.text="CAMERA   SHAKE:   OFF",this.optionsMenu.options[2].activeSprite.text="CAMERA   SHAKE:   OFF"),e=!1;break;default:e=!1,this.togglePalleteMenu(!1)}}e||this.activeMenu.updateOptions()}}onReroll(){window.location.reload()}changePalette(){switch(this.playerAnimations.filters.length=1,this.paletteMenu.currentKey){case"SIMBA":break;default:const t=this.paletteMenu.currentIndex-1;this.paletteFilter.uniforms.Palette=this.colorMaps[t],this.playerAnimations.filters.push(this.paletteFilter)}let t={fill:this.menuColors[this.paletteMenu.currentIndex],fontSize:52,fontFamily:"ARCADECLASSIC"};this.subMenus.forEach(e=>{e.displayContainer.removeChildren(),e.options.forEach(i=>{delete i.inactiveSprite,i.inactiveSprite=new PIXI.Text(i.label,t),e.displayContainer.addChild(i.inactiveSprite),e.displayContainer.addChild(i.activeSprite)})})}togglePalleteMenu(t){t?(this.inPaletteMenu=!0,this.mainMenu.displayContainer.visible=!1,this.optionsMenu.displayContainer.visible=!1,this.paletteMenu.onToggle(!0,!0),this.activeMenu=this.paletteMenu):(this.inPaletteMenu=!1,this.paletteMenu.displayContainer.visible=!1,this.mainMenu.displayContainer.visible=!0,this.mainMenu.currentIndex=0,this.mainMenu.currentKey="RESUME",this.activeMenu=this.mainMenu)}toggleOptionsMenu(t){t?(this.inOptionsMenu=!0,this.mainMenu.displayContainer.visible=!1,this.paletteMenu.displayContainer.visible=!1,this.optionsMenu.displayContainer.visible=!0,this.optionsMenu.onToggle(!0,!1),this.activeMenu=this.optionsMenu):(this.inOptionsMenu=!1,this.paletteMenu.displayContainer.visible=!1,this.optionsMenu.displayContainer.visible=!1,this.mainMenu.displayContainer.visible=!0,this.mainMenu.currentIndex=0,this.mainMenu.currentKey="RESUME",this.activeMenu=this.mainMenu)}attachController(t){this.controller=t,this.buttonContainer.addChild(this.controller.buttonContainer)}staticText(t){let e=new PIXI.Text("PAUSED",{fill:16777215,fontSize:52,fontFamily:"ARCADECLASSIC"});return e.visible=!1,e.anchor.set(.5),e}pauseBlinker(){this.pauseBlinkerLag+=this.pauseTicker.deltaMS,this.pauseBlinkerLag>this.PAUSE_BLINKER_INTERVAL&&(this.pauseBlinkerLag-=this.PAUSE_BLINKER_INTERVAL,this.pausedText.visible^=1)}moveButtons(t){this.controller&&this.controller.moveButtons(t),this.toggleButton.setPosition(t,this.toggleButtonOffset),this.pausedText.position.copyFrom(t),this.pausedText.y-=window.innerHeight-(this.pausedText.height/2+6),this.mainMenu.moveElements(this.pausedText.position),this.paletteMenu.moveElements(this.pausedText.position),this.optionsMenu.moveElements(this.pausedText.position)}onResize(){this.toggleButtonOffset=new PIXI.Point(window.innerWidth-this.toggleButton.width-16,32-window.innerHeight),this.controller&&this.controller.onResize()}}class Ur{constructor(t){this.sprites=new Map([["pause",PIXI.Sprite.from(t[0])],["exit",PIXI.Sprite.from(t[1])]]),this.buttonContainer=new PIXI.Container,this.sprites.forEach(t=>{t.interactive=!0,t.alpha=.5,t.scale.set(3),this.buttonContainer.addChild(t)}),this.width=this.sprites.get("exit").width,this.height=this.sprites.get("exit").height,this.sprites.get("exit").visible=!1}setPosition(t,e){let i=new PIXI.Point;i.copyFrom(t),i.x+=e.x,i.y+=e.y,this.buttonContainer.children.forEach(t=>{t.position.copyFrom(i)})}}class Nr{constructor(t){this.displayContainer=new PIXI.Container,this.currentIndex=0,this.options=[new jr("RESUME"),new jr("REROLL"),new jr("PALETTE"),new jr("OPTIONS")],this.options.forEach(t=>{this.displayContainer.addChild(t.inactiveSprite),this.displayContainer.addChild(t.activeSprite)}),this.currentKey=this.options[0].label,this.moveElements(t)}moveElements(t){this.options.forEach((e,i)=>{e.activeSprite.position.copyFrom(t),e.inactiveSprite.position.copyFrom(t),e.activeSprite.y+=100,e.inactiveSprite.y+=100,e.inactiveSprite.x-=200,e.activeSprite.x-=200,e.activeSprite.x+=40*i,e.activeSprite.y+=e.activeSprite.height*i,e.inactiveSprite.x+=40*i,e.inactiveSprite.y+=e.activeSprite.height*i;e.activeSprite.x+=5,e.activeSprite.y-=5})}onToggle(t,e){t?(e?this.currentKey=this.options[this.currentIndex].label:this.currentIndex=0,this.displayContainer.visible=!0,this.options.forEach((t,e)=>{t.inactiveSprite.visible=!0,t.activeSprite.visible=!1,0==e&&(t.activeSprite.visible=!0)})):this.options.forEach(t=>{t.inactiveSprite.visible=!1,t.activeSprite.visible=!1})}updateOptions(){console.log("successful pause menu event"),this.options.forEach((t,e)=>{t.activeSprite.visible=!1,e==this.currentIndex&&(t.activeSprite.visible=!0)})}}class Vr extends Nr{constructor(t){super(t),this.currentIndex=Math.floor(4*Math.random()),this.displayContainer.removeChildren(),this.options=[new jr("SIMBA"),new jr("VANTA"),new jr("COCO"),new jr("PURP")],this.options.forEach(t=>{this.displayContainer.addChild(t.inactiveSprite),this.displayContainer.addChild(t.activeSprite)}),this.moveElements(t),this.currentKey=this.options[this.currentIndex].label}}class Xr extends Nr{constructor(t){super(t),this.displayContainer.removeChildren(),this.options=[new jr("BACK"),new jr("HIDE   BUTTONS:   OFF"),new jr("CAMERA   SHAKE:   ON")],this.options.forEach(t=>{this.displayContainer.addChild(t.inactiveSprite),this.displayContainer.addChild(t.activeSprite)}),this.moveElements(t),this.currentKey=this.options[this.currentIndex].label}}class jr{constructor(t){this.label=t,this.style1={fill:16753234,fontSize:52,fontFamily:"ARCADECLASSIC"};this.inactiveSprite=new PIXI.Text(t,this.style1),this.activeSprite=new PIXI.Text(t,{fill:16777215,fontSize:52,fontFamily:"ARCADECLASSIC"}),this.activeSprite.visible=!1,this.inactiveSprite.visible=!1}}class zr extends PIXI.Filter{constructor(t,e,i){const r=new PIXI.Matrix;t.renderable=!1;let n={mapSampler:t._texture,filterMatrix:r,scale:{x:1,y:1},DissolveVal:1};super(e.vert,e.frag,n),this.maskSprite=t,this.maskMatrix=r,null==i&&(i=20),this.scale=new PIXI.Point(i,i)}apply(t,e,i,r){this.uniforms.filterMatrix=t.calculateSpriteMatrix(this.maskMatrix,this.maskSprite),this.uniforms.scale.x=this.scale.x,this.uniforms.scale.y=this.scale.y,t.applyFilter(this,e,i,r)}get map(){return this.uniforms.mapSampler}set map(t){this.uniforms.mapSampler=t}}class Gr extends PIXI.Filter{constructor(t,e,i){const r=new PIXI.Matrix;t.renderable=!1,super(e.vert,e.frag,{mapSampler:t._texture,filterMatrix:r,scale:{x:1,y:1},rotation:new Float32Array([1,0,0,1]),bezierVal:0}),this.maskSprite=t,this.maskMatrix=r,null==i&&(i=20),this.scale=new PIXI.Point(i,i)}apply(t,e,i,r){this.uniforms.filterMatrix=t.calculateSpriteMatrix(this.maskMatrix,this.maskSprite),this.uniforms.scale.x=this.scale.x,this.uniforms.scale.y=this.scale.y;const n=this.maskSprite.transform.worldTransform,s=Math.sqrt(n.a*n.a+n.b*n.b),o=Math.sqrt(n.c*n.c+n.d*n.d);0!==s&&0!==o&&(this.uniforms.rotation[0]=n.a/s,this.uniforms.rotation[1]=n.b/s,this.uniforms.rotation[2]=n.c/o,this.uniforms.rotation[3]=n.d/o),t.applyFilter(this,e,i,r)}get map(){return this.uniforms.mapSampler}set map(t){this.uniforms.mapSampler=t}}class Hr{constructor(t=[new PIXI.Point(0,0),new PIXI.Point(.5,0),new PIXI.Point(.5,1),new PIXI.Point(1,1)]){this.points=t}getY(t){let e=Math.pow(1-t,3)*this.points[0].y;return e+=3*Math.pow(1-t,2)*t*this.points[1].y,e+=3*(1-t)*Math.pow(t,2)*this.points[2].y,e+=Math.pow(t,3)*this.points[3].y,e}}class Wr{constructor(t,e,i){this.playerDefaultVel=e.maxVel,this.playerTripVel=1.3*e.maxVel,this.playerDefaultJump=e.jumpVel,this.playerTripJump=1.2*e.jumpVel,this.cameraRotation=0,this.bezierTime=0,this.filterTime=0,this.filterTransitionMS=3e3,this.filterStaticMS=1e4,this.displacementIncrement=.5,this.bezierIncrement=1/(this.filterTransitionMS/16.666),this.ticker=new PIXI.Ticker,this.tickerMS=0,this.ticker.add(this.onTick.bind(this)),this.bezierCurve=new Hr,this.powerupTimer=new Ar,this.powerupTimer.start(),this.foregroundNoise=PIXI.Sprite.from("https://res.cloudinary.com/dvxikybyi/image/upload/v1486634113/2yYayZk_vqsyzx.png"),this.foregroundNoise.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.backgroundNoise=PIXI.Sprite.from("https://res.cloudinary.com/dvxikybyi/image/upload/v1486634113/2yYayZk_vqsyzx.png"),this.backgroundNoise.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.foregroundNoise.scale.set(.6),this.backgroundNoise.scale.set(.6),this.foregroundFilter=new Gr(this.foregroundNoise,t),this.backgroundFilter=new Gr(this.backgroundNoise,t),console.log("crash test"),this.badFilterSolution=(new PIXI.Graphics).beginFill(0,0).drawRect(-2e3,-2e3,8e3,8e3).endFill(),this.powerups=i,this.maxCatnipFloatOffset=10,this.floatTimescale=.05,this.floatTime=0}onTick(){this.tickerMS+=this.ticker.deltaMS}update(t){this.foregroundNoise.position.set(this.filterTime,this.filterTime),this.backgroundNoise.position.set(this.filterTime,this.filterTime),this.floatTime+=t*this.floatTimescale;const e=this.maxCatnipFloatOffset*Math.sin(this.floatTime);this.powerups.forEach(t=>{t.update(e)})}FixedUpdate(t,e,i){if(this.ticker.started){let e;t.maxVel=this.playerTripVel,t.jumpVel=this.playerTripJump,this.filterTime+=this.displacementIncrement,this.bezierTime>1?(this.bezierTime=1,e=1):e=this.bezierCurve.getY(this.bezierTime),this.foregroundFilter.uniforms.bezierVal=e,this.backgroundFilter.uniforms.bezierVal=e,this.cameraRotation=.015*e*Math.sin(.02*this.filterTime),this.tickerMS<this.filterTransitionMS?this.bezierTime+=this.bezierIncrement:this.tickerMS>this.filterTransitionMS+this.filterStaticMS&&(this.bezierTime-=this.bezierIncrement),this.tickerMS>2*this.filterTransitionMS+this.filterStaticMS&&(this.filterTime=0,this.bezierTime=0,this.ticker.stop(),[],[],t.jumpVel=this.playerDefaultJump,t.maxVel=this.playerDefaultVel)}this.powerups.forEach(t=>{t.FixedUpdate()})}addToStage(t,e){t.addChild(this.foregroundNoise),e.addChild(this.backgroundNoise),t.addChild(this.badFilterSolution)}start(){this.tickerMS=0,this.ticker.start()}}class Yr{constructor(t,e){this.filter=new PIXI.Filter(null,t,{Palette:e})}}let qr,Kr,Zr=a.a.Engine,Qr=a.a.World,Jr=a.a.Events;class $r{constructor(t,e){PIXI.SCALE_MODES.DEFAULT=PIXI.SCALE_MODES.NEAREST,PIXI.settings.SCALE_MODE=PIXI.SCALE_MODES.NEAREST,this.app=e,this.worldContainer=new PIXI.Container,this.animationContainer=new PIXI.Container,this.foregroundContainer=new PIXI.Container,this.backgroundContainer=new PIXI.Container,this.pauseMusic=t.pauseMusic,this.paletteIndex=2,this.paletteSwap=new Yr(t.paletteFrag,t.paletteTextures[this.paletteIndex]),this.dissolveSprite=new PIXI.Sprite.from("https://res.cloudinary.com/dvxikybyi/image/upload/v1486634113/2yYayZk_vqsyzx.png"),this.dissolveSprite.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.dissolveSprite.scale.set(.2),this.dissolveShader=t.dissolveShader,this.bezierDisplacementShader=t.displacementShader,this.worldContainer.addChild(this.dissolveSprite),this.engine=Zr.create(),this.world=this.engine.world,this.updateLag=0,this.tileMap=new Er(25,25,150,6,t.lightShader,t.tileset,t.torchFrames),this.allLights=new PIXI.Container;let i=this.tileMap.playerSpawn;this.player=new Mr(i,t.catAnimations),console.log(this.player),console.log("b4 catnip trip"),this.catnipTrip=new Wr(this.bezierDisplacementShader,this.player,this.tileMap.powerups),console.log("past catnip trip"),this.tileMap.torchSprites.forEach(t=>{this.animationContainer.addChild(t)}),this.animationContainer.addChild(this.player.animationContainer),Qr.add(this.world,this.player.body),this.tileMap.terrain.forEach(t=>{Qr.add(this.world,t.Collider),t.walkBox&&Qr.add(this.world,t.walkBox),Qr.add(this.world,t.edgeBoxes)}),this.tileMap.powerups.forEach(t=>{Qr.add(this.world,t.collider)}),this.camera=new Or(i),console.log("before pausemenu"),this.pauseMenu=new Lr(t.menuButtons,t.paletteTextures,i,this.animationContainer,this.paletteSwap.filter,this.player.animationContainer,this.app.ticker,this.catnipTrip.ticker),console.log("after pausemenu"),this.buttonController=null,"ontouchstart"in document.documentElement&&(this.buttonController=new Fr(t.buttonFrames,this.player.position,this.player.handleEvent.bind(this.player),this.pauseMenu.handleEvent.bind(this.pauseMenu),this.app.renderer.view),this.pauseMenu.attachController(this.buttonController)),this.KBInput=new Pr(this.player,this.player.body,this.app.ticker,this.camera,this.pauseMenu),window.addEventListener("resize",this.onWindowResize.bind(this),!1),this.collisionEventSetup(),this.app.stage.position.set(this.app.screen.width/2,this.app.screen.height/2),this.tileMap.lights.forEach(t=>{t.update(this.app.ticker.speed)}),this.initLayers(),this.app.stage.scale.set(.5),this.app.ticker.add(t=>this.loop(t))}loop(t){this.FixedUpdate(),this.catnipTrip.ticker.started&&(this.worldContainer.rotation=this.catnipTrip.cameraRotation),this.pauseMenu.moveButtons(this.camera.position),this.app.stage.pivot.copyFrom(this.camera.position),this.app.stage.angle=this.camera.angleOffset,this.tileMap.parallaxScroll(this.app.stage.pivot,1.2,1.2),this.catnipTrip.update(t)}FixedUpdate(){for(this.updateLag+=this.app.ticker.deltaMS;this.updateLag>=16.666;)this.player.update(this.app.ticker.speed),Zr.update(this.engine),this.player.cameraSnapped?this.camera.update(this.player.position,this.player.flip,this.app.ticker.speed):this.camera.update(this.player.climbTranslation,this.player.flip,this.app.ticker.speed),!this.player.isGrounded&&!this.player.inSlide&&!this.player.isHanging&&this.player.body.velocity.y>0?this.world.gravity.y<3.5&&(this.world.gravity.y+=.015):this.world.gravity.y=1,this.updateLag-=16.666,this.tileMap.lights.forEach(t=>{t.lightContainer.children.forEach(t=>{t.shader.uniforms.time+=3e-5})}),this.catnipTrip.FixedUpdate(this.player,this.foregroundContainer.filters,this.backgroundContainer.filters)}initLayers(){this.backgroundContainer.addChild(this.tileMap.backgroundContainer),this.worldContainer.addChild(this.backgroundContainer),this.foregroundContainer.addChild(this.animationContainer),this.foregroundContainer.addChild(this.tileMap.tileContainer),this.tileMap.lights.forEach(t=>{this.allLights.addChild(t.lightContainer)}),this.foregroundContainer.addChild(this.allLights);let t=new kr(this.tileMap.lights,this.tileMap,this.app.renderer);this.foregroundContainer.addChild(t.focus),this.foregroundContainer.addChild(t.mesh),this.worldContainer.addChild(this.foregroundContainer),this.app.stage.addChild(this.worldContainer),this.app.stage.addChild(this.pauseMenu.buttonContainer),this.foregroundContainer.addChild(this.catnipTrip.foregroundNoise),this.foregroundContainer.addChild(this.catnipTrip.badFilterSolution),this.tileMap.backgroundContainer.addChild(this.catnipTrip.backgroundNoise),this.worldContainer.filters=[new gr(3)]}collisionEventSetup(){Jr.on(this.engine,"collisionActive",t=>{for(var e=!1,i=!1,r=t.pairs,n=0,s=0;s<r.length;s++){let t,o=r[s];if(o.bodyA.id==this.player.body.id)t=o.bodyB;else{if(o.bodyB.id!=this.player.body.id)continue;t=o.bodyA}if(t.isSensor){if(t.isEdgeBox){if("right"==this.player.lastInput&&!t.isRight||"left"==this.player.lastInput&&t.isRight){this.world.gravity.y=1;const e=this.player.prevVel;return e>this.player.fallDamageVel&&this.pauseMenu.cameraShake&&this.camera.addTrauma(e/(2*this.player.fallDamageVel)),void this.player.startLedgeClimb(t.position,t.isRight)}e=!1,this.player.isGrounded=!1,this.player.inSlide=!0}else this.player.isHanging||(e=!0);t.isCatnip&&(this.foregroundContainer.filters=[this.catnipTrip.foregroundFilter],this.tileMap.backgroundContainer.filters=[this.catnipTrip.backgroundFilter],this.catnipTrip.start(),Qr.remove(this.world,t),t.spriteReference.filters=[new zr(this.dissolveSprite,this.dissolveShader,1)],console.log(t.spriteReference))}else this.player.collisionTimer.stop(),i=!0,n++}if(e||!i||this.player.isGrounded){if(!this.player.isGrounded&&(e&&i&&!this.player.inSlide||n>=2&&e)){this.world.gravity.y=1;const t=this.player.prevVel;t>this.player.fallDamageVel&&this.pauseMenu.cameraShake&&this.camera.addTrauma(t/(2*this.player.fallDamageVel)),this.player.prevVel=0,this.player.isGrounded=!0,this.player.inSlide=!1,0==this.player.xVel||this.player.inSlowDown?this.player.setAnimation("stop"):this.player.inSlowDown||this.player.setAnimation("walk")}}else{if(this.player.wallJumpTimer.stop(),this.player.xVel=0,this.player.inSlide=!0,"right"==this.player.flip)(o=this.player.animations.get("slide")).scale.x=-this.player.scale,o.angle=-90,this.player.animations.set("slide",o);else if("left"==this.player.flip){var o;(o=this.player.animations.get("slide")).scale.x=-this.player.scale,o.angle=90,this.player.animations.set("slide",o)}this.player.setAnimation("slide")}}),Jr.on(this.engine,"collisionEnd",t=>{let e=t.pairs;for(var i=0;i<e.length;i++){let t,r=e[i];r.bodyA.id==this.player.body.id?t=r.bodyB:r.bodyB.id==this.player.body.id&&(t=r.bodyA),t.isSensor||(this.player.collisionTimer.start(),this.player.body.velocity.y<0&&(this.player.setAnimation("jump",5),this.player.collisionTimer.stop(),this.player.isGrounded=!1,this.player.inSlide=!1,this.player.jumpInput=!1))}})}onWindowResize(){console.log("resize");const t=this.app.view.parentNode;this.app.renderer.resize(t.clientWidth,t.clientHeight),this.app.stage.position.set(this.app.screen.width/2,this.app.screen.height/2),this.tileMap.lights.forEach(t=>{t.update(this.app.ticker.speed),this.worldContainer.addChild(t.lightContainer)}),this.pauseMenu.onResize()}}!function(t,e){for(var i=0,r=0,n=t.length;r<n;++r)!function(r){var n=document.createElement("span");n.innerHTML="giItT1WQy@!-/#",n.style.position="absolute",n.style.left="-10000px",n.style.top="-10000px",n.style.fontSize="300px",n.style.fontFamily="sans-serif",n.style.fontVariant="normal",n.style.fontStyle="normal",n.style.fontWeight="normal",n.style.letterSpacing="0",document.body.appendChild(n);var s,o=n.offsetWidth;function a(){if(n&&n.offsetWidth!=o&&(++i,n.parentNode.removeChild(n),n=null),i>=t.length&&(s&&clearInterval(s),i==t.length))return e(),!0}n.style.fontFamily=r,a()||(s=setInterval(a,50))}(t[r])}(["ARCADECLASSIC"],(qr=new PIXI.Application({width:window.innerWidth,height:window.innerHeight,antialias:!0,transparent:!1,resolution:1,backgroundColor:0,autoDensity:!0}),qr.renderer.view.style.position="absolute",qr.renderer.view.style.display="block",void document.getElementById("myCanvas").appendChild(qr.view)));let tn=new class{constructor(t){this.doneLoading=!1;let e=new r;PIXI.SCALE_MODES.DEFAULT=PIXI.SCALE_MODES.NEAREST,PIXI.settings.SCALE_MODE=PIXI.SCALE_MODES.NEAREST,n.add(e.array()).add("pauseMusic","sound/tropical jam.mp3").add("ARCADECLASSIC","fonts/ARCADECLASSIC.TTF").load(this.onLoad.bind(this,t))}onLoad(t){this.lightShader=this.loadShaders(),this.dissolveShader=this.loadDissolveShader(),this.displacementShader=this.loadDisplacementShader(),this.paletteFrag=this.loadPaletteFrag(),this.paletteTextures=this.loadPalettes(),this.catnipFilter=this.loadFilters(),this.catAnimations=this.animationsInit(),this.tileset=this.loadTiles(),this.torchFrames=this.loadTorch(),this.doneLoading=!0,this.buttonFrames=this.loadButtons(),this.menuButtons=this.loadMenu(),this.pauseMusic=this.loadSound(),this.pauseMusic.loop=!0,this.menuFont=this.loadFont(),console.log(this.menuFont.data),t()}checkLoad(){console.log(this.lightShader),console.log(this.catAnimations),console.log(this.doneLoading)}loadPalettes(){return[PIXI.Texture.from(s["sprites/color_map_1.png"].data),PIXI.Texture.from(s["sprites/color_map_2.png"].data),PIXI.Texture.from(s["sprites/color_map_3.png"].data)]}loadShaders(){return{vert:s["shaders/lightVert.GLSL"].data,frag:s["shaders/lightFrag.GLSL"].data}}loadDissolveShader(){return{vert:s["shaders/dissolve/dissolveVert.GLSL"].data,frag:s["shaders/dissolve/dissolveFrag.GLSL"].data}}loadDisplacementShader(){return{vert:s["shaders/BezierDisplacementFilter/BezierDispVert.GLSL"].data,frag:s["shaders/BezierDisplacementFilter/BezierDispFrag.GLSL"].data}}loadFilters(){return{vert:s["shaders/catnip-effect/catnipVert.GLSL"].data,frag:s["shaders/catnip-effect/catnipFrag.GLSL"].data}}loadPaletteFrag(){return s["shaders/PaletteSwap/paletteSwap.GLSL"].data}animationsInit(){let t=new Map([["walk",this.loadSprite("walk",10,!0)],["stop",this.loadSprite("stop",4,!1)],["idle",this.loadSprite("idle",9,!1)],["jump",this.loadSprite("jump",8,!1)],["slide",this.loadSprite("slide",4,!1)],["hang",this.loadSprite("hang",3,!1)],["climb",this.loadSprite("climb",9,!1)],["fall",this.loadSprite("fall",6,!0)]]);return t.get("slide").anchor.y=.3,t.get("hang").anchor.y=.3,t.get("climb").anchor.y=.65,t.get("climb").anchor.x=.85,t.get("idle").animationSpeed=.15,t.forEach((t,e)=>{"jump"!=e&&(t.visible=!1)}),t.get("jump").play(),t}loadSprite(t,e,i,r=.2){let n=[];for(let i=1;i<e+1;i++){const e=`${t} (${i}).png`;n.push(PIXI.Texture.from(e))}let s=new PIXI.AnimatedSprite(n);return s.x=window.innerWidth/2,s.y=window.innerHeight/2,s.vx=0,s.vy=0,s.scale.set(3.5,3.5),s.anchor.set(.5),s.animationSpeed=r,s.loop=i,s}loadTorch(){let t=[];for(let e=1;e<10;e++){const i=e;t.push(PIXI.Texture.from(`torch (${i}).png`))}return t}loadTiles(){let t=[];for(let e=1;e<24;e++){const i=e;let r=PIXI.Texture.from(`caveTile (${i}).png`);t.push(r)}return new Map([["Background",t[0]],["TLCorner",t[1]],["TopEdge",t[2]],["TRCorner",t[3]],["LeftEdge",t[4]],["Interior",t[5]],["RightEdge",t[6]],["BLCorner",t[7]],["BottomEdge",t[8]],["BRCorner",t[9]],["Wang",t[10]],["Shaft",t[11]],["Loner",t[13]],["Spikes",t[14]],["Moon",t[15]],["Sky",t[16]],["Stars-1",t[17]],["Stars-2",t[18]],["Stars-3",t[19]],["Grass-1",t[20]],["Grass-2",t[21]],["catnip",t[22]]])}loadButtons(){return new Map([["right",[PIXI.Texture.from("right-key (1).png"),PIXI.Texture.from("right-key (2).png")]],["left",[PIXI.Texture.from("left-key (1).png"),PIXI.Texture.from("left-key (2).png")]],["up",[PIXI.Texture.from("a-key (1).png"),PIXI.Texture.from("a-key (2).png")]]])}loadMenu(){return new Map([["pause",PIXI.Texture.from("pause.png")],["exit",PIXI.Texture.from("exit-button.png")],["paused-text",PIXI.Texture.from("paused-text.png")]])}loadSound(){return s.pauseMusic.data}loadFont(){return s.ARCADECLASSIC}}(function(){Kr=new $r(tn,qr,this),document.getElementById("myCanvas").ontouchend=t=>{t.preventDefault()},document.getElementById("myCanvas").ontouchmove=t=>{t.preventDefault()},document.getElementById("myCanvas").ontouchstart=t=>{t.preventDefault()}}.bind(void 0))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9tYXR0ZXItanMvYnVpbGQvbWF0dGVyLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2lzbW9iaWxlanMvZGlzdC9pc01vYmlsZS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvb3Blbi1zaW1wbGV4LW5vaXNlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZWFyY3V0L3NyYy9lYXJjdXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9ub2RlLWxpYnMtYnJvd3Nlci9ub2RlX21vZHVsZXMvcHVueWNvZGUvcHVueWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZGVjb2RlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL29wZW4tc2ltcGxleC1ub2lzZS9saWIvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL2FwcC9GaWxlUGF0aHMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL215TG9hZGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHBpeGkvcnVubmVyL2xpYi9ydW5uZXIuZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AcGl4aS9zZXR0aW5ncy9saWIvc2V0dGluZ3MuZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AcGl4aS9jb25zdGFudHMvbGliL2NvbnN0YW50cy5lcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BwaXhpL3V0aWxzL2xpYi91dGlscy5lcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BwaXhpL3RpY2tlci9saWIvdGlja2VyLmVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHBpeGkvbWF0aC9saWIvbWF0aC5lcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BwaXhpL2Rpc3BsYXkvbGliL2Rpc3BsYXkuZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AcGl4aS9jb3JlL2xpYi9jb3JlLmVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHBpeGkvZmlsdGVyLXBpeGVsYXRlL2xpYi9maWx0ZXItcGl4ZWxhdGUuZXNtLmpzIiwid2VicGFjazovLy8uL2VudGl0aWVzL3RpbGVzLmpzIiwid2VicGFjazovLy8uL2VudGl0aWVzL3RlcnJhaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbGlnaHRpbmcvcmF5LmpzIiwid2VicGFjazovLy8uL2xpZ2h0aW5nL3JheVNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9saWdodGluZy9Qb2ludExpZ2h0LmpzIiwid2VicGFjazovLy8uL2VudGl0aWVzL3Bvd2VydXBzLmpzIiwid2VicGFjazovLy8uL2VudGl0aWVzL21hcEdlbi5qcyIsIndlYnBhY2s6Ly8vLi9lbnRpdGllcy9teVRpbWVyLmpzIiwid2VicGFjazovLy8uL2VudGl0aWVzL3BsYXllci5qcyIsIndlYnBhY2s6Ly8vLi9lbnRpdGllcy9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2xpZ2h0aW5nL3NoYWRvd01hcC5qcyIsIndlYnBhY2s6Ly8vLi9lbnRpdGllcy9teUNhbWVyYS5qcyIsIndlYnBhY2s6Ly8vLi9lbnRpdGllcy9idXR0b25zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHBpeGkvZmlsdGVyLWNvbG9yLXJlcGxhY2UvbGliL2ZpbHRlci1jb2xvci1yZXBsYWNlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9lbnRpdGllcy9teU1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vZmlsdGVycy9EaXNzb2x2ZUZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9maWx0ZXJzL0JlemllckRpc3BsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9maWx0ZXJzL0JlemllckN1cnZlLmpzIiwid2VicGFjazovLy8uL2ZpbHRlcnMvY2F0VHJpcFN0YXRlLmpzIiwid2VicGFjazovLy8uL2ZpbHRlcnMvcGFsZXR0ZVN3YXAuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2dhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvbG9hZEZvbnRzLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZSIsImEiLCJFcnJvciIsImNvZGUiLCJsZW5ndGgiLCIxIiwiX2luZXJ0aWFTY2FsZSIsIl9uZXh0Q29sbGlkaW5nR3JvdXBJZCIsIl9uZXh0Tm9uQ29sbGlkaW5nR3JvdXBJZCIsIl9uZXh0Q2F0ZWdvcnkiLCJpZCIsIm5leHRJZCIsInR5cGUiLCJsYWJlbCIsInBhcnRzIiwicGx1Z2luIiwiYW5nbGUiLCJ2ZXJ0aWNlcyIsImZyb21QYXRoIiwicG9zaXRpb24iLCJ4IiwieSIsImZvcmNlIiwidG9ycXVlIiwicG9zaXRpb25JbXB1bHNlIiwiY29uc3RyYWludEltcHVsc2UiLCJ0b3RhbENvbnRhY3RzIiwic3BlZWQiLCJhbmd1bGFyU3BlZWQiLCJ2ZWxvY2l0eSIsImFuZ3VsYXJWZWxvY2l0eSIsImlzU2Vuc29yIiwiaXNTdGF0aWMiLCJpc1NsZWVwaW5nIiwibW90aW9uIiwic2xlZXBUaHJlc2hvbGQiLCJkZW5zaXR5IiwicmVzdGl0dXRpb24iLCJmcmljdGlvbiIsImZyaWN0aW9uU3RhdGljIiwiZnJpY3Rpb25BaXIiLCJjb2xsaXNpb25GaWx0ZXIiLCJjYXRlZ29yeSIsIm1hc2siLCJncm91cCIsInNsb3AiLCJ0aW1lU2NhbGUiLCJyZW5kZXIiLCJ2aXNpYmxlIiwib3BhY2l0eSIsInNwcml0ZSIsInhTY2FsZSIsInlTY2FsZSIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwibGluZVdpZHRoIiwiZXh0ZW5kIiwibmV4dEdyb3VwIiwibmV4dENhdGVnb3J5Iiwic2V0IiwiYm91bmRzIiwicG9zaXRpb25QcmV2IiwiY2xvbmUiLCJhbmdsZVByZXYiLCJwYXJlbnQiLCJyb3RhdGUiLCJheGVzIiwidXBkYXRlIiwiYXJlYSIsIm1hc3MiLCJpbmVydGlhIiwiY2hvb3NlIiwiZmlsbFN0eWxlIiwic3Ryb2tlU3R5bGUiLCJtaW4iLCJtYXgiLCJzZXRTdGF0aWMiLCJzZXRNYXNzIiwic2V0RGVuc2l0eSIsInNldEluZXJ0aWEiLCJzZXRWZXJ0aWNlcyIsInNldFBvc2l0aW9uIiwic2V0QW5nbGUiLCJzZXRWZWxvY2l0eSIsInNldEFuZ3VsYXJWZWxvY2l0eSIsInNldFBhcnRzIiwiX29yaWdpbmFsIiwiaW52ZXJzZU1hc3MiLCJpbnZlcnNlSW5lcnRpYSIsImJvZHkiLCJmcm9tVmVydGljZXMiLCJjZW50cmUiLCJ0cmFuc2xhdGUiLCJzbGljZSIsInB1c2giLCJjb25jYXQiLCJjbG9ja3dpc2VTb3J0IiwiaHVsbCIsIl90b3RhbFByb3BlcnRpZXMiLCJzdWIiLCJyb3RhdGVBYm91dCIsIm1hZ25pdHVkZSIsIk1hdGgiLCJhYnMiLCJhZGQiLCJjb3MiLCJzaW4iLCJzY2FsZSIsInUiLCJjaXJjbGVSYWRpdXMiLCJwb3ciLCJmIiwiYXBwbHlGb3JjZSIsIm11bHQiLCJkaXYiLCIyIiwiaXNNb2RpZmllZCIsImJvZGllcyIsImNvbnN0cmFpbnRzIiwiY29tcG9zaXRlcyIsInNldE1vZGlmaWVkIiwidHJpZ2dlciIsIndhcm4iLCJhZGRCb2R5IiwiYWRkQ29uc3RyYWludCIsImFkZENvbXBvc2l0ZSIsImNvbnN0cmFpbnQiLCJyZW1vdmUiLCJyZW1vdmVCb2R5IiwicmVtb3ZlQ29uc3RyYWludCIsInJlbW92ZUNvbXBvc2l0ZSIsImluZGV4T2YiLCJyZW1vdmVDb21wb3NpdGVBdCIsInNwbGljZSIsInJlbW92ZUJvZHlBdCIsInJlbW92ZUNvbnN0cmFpbnRBdCIsImNsZWFyIiwiZmlsdGVyIiwiYWxsQm9kaWVzIiwiYWxsQ29uc3RyYWludHMiLCJhbGxDb21wb3NpdGVzIiwidG9TdHJpbmciLCJtb3ZlIiwicmViYXNlIiwiMyIsImdyYXZpdHkiLCI0IiwidmVydGV4Iiwibm9ybWFsSW1wdWxzZSIsInRhbmdlbnRJbXB1bHNlIiwiaW5kZXgiLCI1IiwiY29sbGlzaW9ucyIsInBhaXJzIiwidGFibGUiLCJjYW5Db2xsaWRlIiwib3ZlcmxhcHMiLCJ2IiwiZyIsImlzQWN0aXZlIiwiY29sbGlzaW9uIiwiY29sbGlkZXMiLCJjb2xsaWRlZCIsIjYiLCJjb250cm9sbGVyIiwiZGV0ZWN0b3IiLCJidWNrZXRzIiwicGFpcnNMaXN0IiwiYnVja2V0V2lkdGgiLCJidWNrZXRIZWlnaHQiLCJ3b3JsZCIsIl9nZXRSZWdpb24iLCJyZWdpb24iLCJfcmVnaW9uVW5pb24iLCJzdGFydENvbCIsImVuZENvbCIsInN0YXJ0Um93IiwiZW5kUm93IiwiX2dldEJ1Y2tldElkIiwiX2J1Y2tldFJlbW92ZUJvZHkiLCJfY3JlYXRlQnVja2V0IiwiX2J1Y2tldEFkZEJvZHkiLCJfY3JlYXRlQWN0aXZlUGFpcnNMaXN0IiwiX2NyZWF0ZVJlZ2lvbiIsImZsb29yIiwia2V5cyIsIjciLCJib2R5QSIsImJvZHlCIiwicGFyZW50QSIsInBhcmVudEIiLCJjb250YWN0cyIsImFjdGl2ZUNvbnRhY3RzIiwic2VwYXJhdGlvbiIsInRpbWVDcmVhdGVkIiwidGltZVVwZGF0ZWQiLCJzdXBwb3J0cyIsImRlcHRoIiwic2V0QWN0aXZlIiwiOCIsIl9wYWlyTWF4SWRsZUxpZmUiLCJsaXN0IiwiY29sbGlzaW9uU3RhcnQiLCJjb2xsaXNpb25BY3RpdmUiLCJjb2xsaXNpb25FbmQiLCJyZW1vdmVPbGQiLCI5IiwicmF5IiwicmVjdGFuZ2xlIiwicG9pbnQiLCJjb250YWlucyIsIjEwIiwiX3Jlc3RpbmdUaHJlc2giLCJfcmVzdGluZ1RocmVzaFRhbmdlbnQiLCJfcG9zaXRpb25EYW1wZW4iLCJfcG9zaXRpb25XYXJtaW5nIiwiX2ZyaWN0aW9uTm9ybWFsTXVsdGlwbGllciIsInByZVNvbHZlUG9zaXRpb24iLCJzb2x2ZVBvc2l0aW9uIiwiX3RlbXAiLCJub3JtYWwiLCJwZW5ldHJhdGlvbiIsImRvdCIsInBvc3RTb2x2ZVBvc2l0aW9uIiwicHJlU29sdmVWZWxvY2l0eSIsInRhbmdlbnQiLCJjcm9zcyIsInNvbHZlVmVsb2NpdHkiLCJoIiwiYiIsInciLCJTIiwiQyIsIkEiLCJQIiwiQiIsInBlcnAiLCJNIiwiayIsIkkiLCJfIiwiVCIsIlIiLCJzaWduIiwiViIsIkUiLCJjbGFtcCIsIkwiLCJGIiwiTyIsInEiLCJXIiwiRCIsIk4iLCIxMSIsImF4aXNCb2R5IiwiYXhpc051bWJlciIsIl9vdmVybGFwQXhlcyIsInJldXNlZCIsIm92ZXJsYXAiLCJheGlzIiwiX2ZpbmRTdXBwb3J0cyIsIm5lZyIsIk51bWJlciIsIk1BWF9WQUxVRSIsIl9wcm9qZWN0VG9BeGlzIiwiMTIiLCJfd2FybWluZyIsIl90b3JxdWVEYW1wZW4iLCJfbWluTGVuZ3RoIiwicG9pbnRBIiwicG9pbnRCIiwic3RpZmZuZXNzIiwiZGFtcGluZyIsImFuZ3VsYXJTdGlmZm5lc3MiLCJhbmdsZUEiLCJhbmdsZUIiLCJhbmNob3JzIiwicHJlU29sdmVBbGwiLCJzb2x2ZUFsbCIsInNvbHZlIiwicG9zdFNvbHZlQWxsIiwiMTMiLCJtb3VzZSIsImNhbnZhcyIsImVsZW1lbnQiLCJvbiIsIl90cmlnZ2VyRXZlbnRzIiwiYnV0dG9uIiwic291cmNlRXZlbnRzIiwibW91c2Vtb3ZlIiwibW91c2Vkb3duIiwibW91c2V1cCIsImNsZWFyU291cmNlRXZlbnRzIiwiMTQiLCJfbmV4dElkIiwiX3NlZWQiLCJfbm93U3RhcnRUaW1lIiwiRGF0ZSIsImFyZ3VtZW50cyIsImNvbnN0cnVjdG9yIiwidmFsdWVzIiwic3BsaXQiLCJzaHVmZmxlIiwicmFuZG9tIiwiaXNFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJub2RlVHlwZSIsIm5vZGVOYW1lIiwiaXNBcnJheSIsImlzRnVuY3Rpb24iLCJpc1BsYWluT2JqZWN0IiwiaXNTdHJpbmciLCJub3ciLCJ3aW5kb3ciLCJwZXJmb3JtYW5jZSIsIndlYmtpdE5vdyIsImNvbG9yVG9OdW1iZXIiLCJyZXBsYWNlIiwiY2hhckF0IiwicGFyc2VJbnQiLCJsb2dMZXZlbCIsImxvZyIsImNvbnNvbGUiLCJhcHBseSIsIkFycmF5IiwiaW5mbyIsIm1hcCIsInRvcG9sb2dpY2FsU29ydCIsIl90b3BvbG9naWNhbFNvcnQiLCJjaGFpbiIsIl9jaGFpbmVkIiwiY2hhaW5QYXRoQmVmb3JlIiwiY2hhaW5QYXRoQWZ0ZXIiLCJfcmVxdWlyZUdsb2JhbCIsInRoaXMiLCJnbG9iYWwiLCJzZWxmIiwiMTUiLCJwb3NpdGlvbkl0ZXJhdGlvbnMiLCJ2ZWxvY2l0eUl0ZXJhdGlvbnMiLCJjb25zdHJhaW50SXRlcmF0aW9ucyIsImVuYWJsZVNsZWVwaW5nIiwiZXZlbnRzIiwidGltaW5nIiwidGltZXN0YW1wIiwiYnJvYWRwaGFzZSIsImVuZ2luZSIsIm1ldHJpY3MiLCJleHRlbmRlZCIsIl9ib2RpZXNBcHBseUdyYXZpdHkiLCJfYm9kaWVzVXBkYXRlIiwiYWZ0ZXJDb2xsaXNpb25zIiwiX2JvZGllc0NsZWFyRm9yY2VzIiwibWVyZ2UiLCIxNiIsIm9mZiIsImpvaW4iLCJzb3VyY2UiLCIxNyIsInZlcnNpb24iLCJ1c2VzIiwidXNlZCIsInVzZSIsImJlZm9yZSIsImFmdGVyIiwiMTgiLCIxOSIsImRvY3VtZW50IiwiYWJzb2x1dGUiLCJtb3VzZWRvd25Qb3NpdGlvbiIsIm1vdXNldXBQb3NpdGlvbiIsIm9mZnNldCIsIndoZWVsRGVsdGEiLCJwaXhlbFJhdGlvIiwiZ2V0QXR0cmlidXRlIiwibW91c2V3aGVlbCIsIl9nZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24iLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnREZWZhdWx0IiwiZGV0YWlsIiwic2V0RWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRPZmZzZXQiLCJzZXRTY2FsZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRvY3VtZW50RWxlbWVudCIsInBhcmVudE5vZGUiLCJwYWdlWE9mZnNldCIsInNjcm9sbExlZnQiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsInBhZ2VYIiwibGVmdCIsInBhZ2VZIiwidG9wIiwiY2xpZW50V2lkdGgiLCJ3aWR0aCIsImNsaWVudEhlaWdodCIsImhlaWdodCIsIjIwIiwiX3JlZ2lzdHJ5IiwicmVnaXN0ZXIiLCJpc1BsdWdpbiIsInZlcnNpb25QYXJzZSIsIm51bWJlciIsInJlc29sdmUiLCJkZXBlbmRlbmN5UGFyc2UiLCJyYW5nZSIsImluc3RhbGwiLCJpc1VzZWQiLCJpc0ZvciIsImZvciIsInZlcnNpb25TYXRpc2ZpZXMiLCJkZXBlbmRlbmNpZXMiLCJfd2FybmVkIiwidGVzdCIsImlzTmFOIiwic3Vic3RyIiwiaXNSYW5nZSIsIm9wZXJhdG9yIiwicHJlcmVsZWFzZSIsIjIxIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIiwid2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtc0NhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImZwcyIsImNvcnJlY3Rpb24iLCJkZWx0YVNhbXBsZVNpemUiLCJjb3VudGVyVGltZXN0YW1wIiwiZnJhbWVDb3VudGVyIiwiZGVsdGFIaXN0b3J5IiwidGltZVByZXYiLCJ0aW1lU2NhbGVQcmV2IiwiZnJhbWVSZXF1ZXN0SWQiLCJpc0ZpeGVkIiwiZW5hYmxlZCIsImRlbHRhIiwiZGVsdGFNaW4iLCJkZWx0YU1heCIsInJ1biIsInRpY2siLCJzdG9wIiwic3RhcnQiLCIyMiIsIl9tb3Rpb25XYWtlVGhyZXNob2xkIiwiX21vdGlvblNsZWVwVGhyZXNob2xkIiwiX21pbkJpYXMiLCJzbGVlcENvdW50ZXIiLCIyMyIsImNoYW1mZXIiLCJyYWRpdXMiLCJxdWFsaXR5IiwicXVhbGl0eU1pbiIsInF1YWxpdHlNYXgiLCJ0cmFwZXpvaWQiLCJjaXJjbGUiLCJjZWlsIiwicG9seWdvbiIsIlBJIiwidG9GaXhlZCIsImlzQ29udmV4IiwibWFrZUNDVyIsInJlbW92ZUNvbGxpbmVhclBvaW50cyIsInF1aWNrRGVjb21wIiwibWFnbml0dWRlU3F1YXJlZCIsImlzSW50ZXJuYWwiLCIyNCIsInN0YWNrIiwibWVzaCIsInB5cmFtaWQiLCJuZXd0b25zQ3JhZGxlIiwiY2FyIiwic29mdEJvZHkiLCIyNSIsIm5vcm1hbGlzZSIsIjI2Iiwic2hpZnQiLCIyNyIsInBhdGhUb1ZlcnRpY2VzIiwicGF0aFNlZ1R5cGVBc0xldHRlciIsInRvVXBwZXJDYXNlIiwicGF0aFNlZ1R5cGUiLCJfc3ZnUGF0aFRvQWJzb2x1dGUiLCJnZXRUb3RhbExlbmd0aCIsInBhdGhTZWdMaXN0IiwibnVtYmVyT2ZJdGVtcyIsImdldEl0ZW0iLCJnZXRQYXRoU2VnQXRMZW5ndGgiLCJnZXRQb2ludEF0TGVuZ3RoIiwieDEiLCJ4MiIsInkxIiwieTIiLCJyZXBsYWNlSXRlbSIsImNyZWF0ZVNWR1BhdGhTZWdNb3ZldG9BYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMiLCJjcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicyIsImNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMiLCJjcmVhdGVTVkdQYXRoU2VnQXJjQWJzIiwicjEiLCJyMiIsImxhcmdlQXJjRmxhZyIsInN3ZWVwRmxhZyIsIjI4Iiwic3FydCIsImNyb3NzMyIsImF0YW4yIiwiMjkiLCJwYXJzZUZsb2F0IiwibWVhbiIsImFjb3MiLCJzb3J0IiwicG9wIiwiMzAiLCJCb2R5IiwiQ29tcG9zaXRlIiwiV29ybGQiLCJDb250YWN0IiwiRGV0ZWN0b3IiLCJHcmlkIiwiUGFpcnMiLCJQYWlyIiwiUXVlcnkiLCJSZXNvbHZlciIsIlNBVCIsIkNvbnN0cmFpbnQiLCJNb3VzZUNvbnN0cmFpbnQiLCJDb21tb24iLCJFbmdpbmUiLCJFdmVudHMiLCJNb3VzZSIsIlJ1bm5lciIsIlNsZWVwaW5nIiwiUGx1Z2luIiwiQm9kaWVzIiwiQ29tcG9zaXRlcyIsIkF4ZXMiLCJCb3VuZHMiLCJTdmciLCJWZWN0b3IiLCJWZXJ0aWNlcyIsIlJlbmRlciIsIlJlbmRlclBpeGkiLCIzMSIsIm9wdGlvbnMiLCJiYWNrZ3JvdW5kIiwid2lyZWZyYW1lQmFja2dyb3VuZCIsImhhc0JvdW5kcyIsIndpcmVmcmFtZXMiLCJzaG93U2xlZXBpbmciLCJzaG93RGVidWciLCJzaG93QnJvYWRwaGFzZSIsInNob3dCb3VuZHMiLCJzaG93VmVsb2NpdHkiLCJzaG93Q29sbGlzaW9ucyIsInNob3dTZXBhcmF0aW9ucyIsInNob3dBeGVzIiwic2hvd1Bvc2l0aW9ucyIsInNob3dBbmdsZUluZGljYXRvciIsInNob3dJZHMiLCJzaG93U2hhZG93cyIsInNob3dWZXJ0ZXhOdW1iZXJzIiwic2hvd0NvbnZleEh1bGxzIiwic2hvd0ludGVybmFsRWRnZXMiLCJzaG93TW91c2VQb3NpdGlvbiIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwidGV4dHVyZXMiLCJzZXRQaXhlbFJhdGlvIiwiYXBwZW5kQ2hpbGQiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZSIsImxvb2tBdCIsInN0YXJ0Vmlld1RyYW5zZm9ybSIsImVuZFZpZXdUcmFuc2Zvcm0iLCJzZXRUcmFuc2Zvcm0iLCJjdXJyZW50QmFja2dyb3VuZCIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImZpbGxSZWN0IiwiYm9keUNvbnZleEh1bGxzIiwiYm9keVdpcmVmcmFtZXMiLCJib2R5Qm91bmRzIiwiYm9keUF4ZXMiLCJib2R5UG9zaXRpb25zIiwiYm9keVZlbG9jaXR5IiwiYm9keUlkcyIsInNlcGFyYXRpb25zIiwidmVydGV4TnVtYmVycyIsIm1vdXNlUG9zaXRpb24iLCJncmlkIiwiZGVidWciLCJkZWJ1Z1RpbWVzdGFtcCIsInJvdW5kIiwiZGVidWdTdHJpbmciLCJmb250IiwiZmlsbFRleHQiLCJiZWdpblBhdGgiLCJhcmMiLCJjbG9zZVBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJmaWxsIiwiYm9keVNoYWRvd3MiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldFgiLCJzaGFkb3dPZmZzZXRZIiwic2hhZG93Qmx1ciIsImdsb2JhbEFscGhhIiwidGV4dHVyZSIsImRyYXdJbWFnZSIsInJlY3QiLCJpbnNwZWN0b3IiLCJzZWxlY3RlZCIsImRhdGEiLCJzZXRMaW5lRGFzaCIsInNlbGVjdFN0YXJ0Iiwic2VsZWN0Qm91bmRzIiwiY3JlYXRlRWxlbWVudCIsIm9uY29udGV4dG1lbnUiLCJvbnNlbGVjdHN0YXJ0IiwiZGV2aWNlUGl4ZWxSYXRpbyIsIndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwibXNCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwib0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJiYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwiSW1hZ2UiLCJzcmMiLCJiYWNrZ3JvdW5kU2l6ZSIsIjMyIiwicmVuZGVyZXIiLCJjb250YWluZXIiLCJzcHJpdGVDb250YWluZXIiLCJwaXhpT3B0aW9ucyIsInZpZXciLCJ0cmFuc3BhcmVudCIsImFudGlhbGlhcyIsImJhY2tncm91bmRDb2xvciIsIlBJWEkiLCJXZWJHTFJlbmRlcmVyIiwiQ29udGFpbmVyIiwic3ByaXRlcyIsInByaW1pdGl2ZXMiLCJhZGRDaGlsZCIsImNoaWxkcmVuIiwicmVtb3ZlQ2hpbGQiLCJhZGRDaGlsZEF0Iiwic2V0QmFja2dyb3VuZCIsIlNwcml0ZSIsIkdyYXBoaWNzIiwiYmVnaW5GaWxsIiwibGluZVN0eWxlIiwiZW5kRmlsbCIsInJvdGF0aW9uIiwiaW5pdGlhbEFuZ2xlIiwiYW5jaG9yIiwiVGV4dHVyZSIsImZyb21JbWFnZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImFwcGxlIiwicGhvbmUiLCJpcG9kIiwidGFibGV0IiwiZGV2aWNlIiwiYW1hem9uIiwiYW5kcm9pZCIsIndpbmRvd3MiLCJvdGhlciIsImJsYWNrYmVycnkiLCJibGFja2JlcnJ5MTAiLCJvcGVyYSIsImZpcmVmb3giLCJjaHJvbWUiLCJhbnkiLCJpc01vYmlsZSIsInB1bnljb2RlIiwidXRpbCIsIlVybCIsInByb3RvY29sIiwic2xhc2hlcyIsImF1dGgiLCJob3N0IiwicG9ydCIsImhvc3RuYW1lIiwiaGFzaCIsInNlYXJjaCIsInF1ZXJ5IiwicGF0aG5hbWUiLCJwYXRoIiwiaHJlZiIsInBhcnNlIiwidXJsUGFyc2UiLCJyZWxhdGl2ZSIsInJlc29sdmVPYmplY3QiLCJmb3JtYXQiLCJvYmoiLCJwcm90b2NvbFBhdHRlcm4iLCJwb3J0UGF0dGVybiIsInNpbXBsZVBhdGhQYXR0ZXJuIiwidW53aXNlIiwiYXV0b0VzY2FwZSIsIm5vbkhvc3RDaGFycyIsImhvc3RFbmRpbmdDaGFycyIsImhvc3RuYW1lUGFydFBhdHRlcm4iLCJob3N0bmFtZVBhcnRTdGFydCIsInVuc2FmZVByb3RvY29sIiwiaG9zdGxlc3NQcm90b2NvbCIsInNsYXNoZWRQcm90b2NvbCIsInF1ZXJ5c3RyaW5nIiwidXJsIiwicGFyc2VRdWVyeVN0cmluZyIsInNsYXNoZXNEZW5vdGVIb3N0IiwiaXNPYmplY3QiLCJUeXBlRXJyb3IiLCJxdWVyeUluZGV4Iiwic3BsaXR0ZXIiLCJ1U3BsaXQiLCJyZXN0IiwidHJpbSIsInNpbXBsZVBhdGgiLCJleGVjIiwicHJvdG8iLCJsb3dlclByb3RvIiwidG9Mb3dlckNhc2UiLCJtYXRjaCIsImF0U2lnbiIsImhvc3RFbmQiLCJoZWMiLCJsYXN0SW5kZXhPZiIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcnNlSG9zdCIsImlwdjZIb3N0bmFtZSIsImhvc3RwYXJ0cyIsInBhcnQiLCJuZXdwYXJ0IiwiaiIsImNoYXJDb2RlQXQiLCJ2YWxpZFBhcnRzIiwibm90SG9zdCIsImJpdCIsInVuc2hpZnQiLCJ0b0FTQ0lJIiwiYWUiLCJlc2MiLCJlbmNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJxbSIsInN0cmluZ2lmeSIsInJlbCIsInJlc3VsdCIsInRrZXlzIiwidGsiLCJ0a2V5IiwicmtleXMiLCJyayIsInJrZXkiLCJyZWxQYXRoIiwiaXNTb3VyY2VBYnMiLCJpc1JlbEFicyIsIm11c3RFbmRBYnMiLCJyZW1vdmVBbGxEb3RzIiwic3JjUGF0aCIsInBzeWNob3RpYyIsImlzTnVsbE9yVW5kZWZpbmVkIiwiYXV0aEluSG9zdCIsImlzTnVsbCIsImxhc3QiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJpc0Fic29sdXRlIiwiY29uc3RhbnRzXzEiLCJjb250cmlidXRpb24yRCIsIm11bHRpcGxpZXIiLCJ4c2IiLCJ5c2IiLCJkeCIsIlNRVUlTSF8yRCIsImR5IiwiY29udHJpYnV0aW9uM0QiLCJ6c2IiLCJTUVVJU0hfM0QiLCJkeiIsImNvbnRyaWJ1dGlvbjREIiwid3NiIiwiU1FVSVNIXzREIiwiZHciLCJzaHVmZmxlU2VlZCIsInNlZWQiLCJuZXdTZWVkIiwiVWludDMyQXJyYXkiLCJtYWtlTm9pc2UyRCIsImNsaWVudFNlZWQiLCJjb250cmlidXRpb25zIiwicDJEIiwiYmFzZVNldCIsImJhc2UyRCIsInByZXZpb3VzIiwiY3VycmVudCIsIm5leHQiLCJsb29rdXAiLCJsb29rdXBQYWlyczJEIiwicGVybSIsIlVpbnQ4QXJyYXkiLCJwZXJtMkQiLCJzdHJldGNoT2Zmc2V0IiwiU1RSRVRDSF8yRCIsInhzIiwieXMiLCJzcXVpc2hPZmZzZXQiLCJkeDAiLCJkeTAiLCJ4aW5zIiwieWlucyIsImluU3VtIiwidW5kZWZpbmVkIiwiYXR0biIsInB4IiwicHkiLCJpbmRleFBhcnRBIiwiZ3JhZGllbnRzMkQiLCJOT1JNXzJEIiwibWFrZU5vaXNlM0QiLCJwM0QiLCJiYXNlM0QiLCJsb29rdXBQYWlyczNEIiwicGVybTNEIiwieiIsIlNUUkVUQ0hfM0QiLCJ6cyIsImR6MCIsInppbnMiLCJweiIsImluZGV4UGFydEIiLCJncmFkaWVudHMzRCIsIk5PUk1fM0QiLCJtYWtlTm9pc2U0RCIsInA0RCIsImJhc2U0RCIsImxvb2t1cFBhaXJzNEQiLCJwZXJtNEQiLCJTVFJFVENIXzREIiwid3MiLCJkdzAiLCJ3aW5zIiwicHciLCJpbmRleFBhcnRDIiwiZ3JhZGllbnRzNEQiLCJOT1JNXzREIiwiRnVuY3Rpb24iLCJoYXMiLCJwcmVmaXgiLCJFRSIsImZuIiwib25jZSIsImFkZExpc3RlbmVyIiwiZW1pdHRlciIsImV2ZW50IiwibGlzdGVuZXIiLCJldnQiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiY2xlYXJFdmVudCIsIkV2ZW50RW1pdHRlciIsIl9fcHJvdG9fXyIsImV2ZW50TmFtZXMiLCJuYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImxpc3RlbmVycyIsImhhbmRsZXJzIiwiZWUiLCJsaXN0ZW5lckNvdW50IiwiZW1pdCIsImExIiwiYTIiLCJhMyIsImE0IiwiYTUiLCJhcmdzIiwibGVuIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVmaXhlZCIsImVhcmN1dCIsImhvbGVJbmRpY2VzIiwiZGltIiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsImludlNpemUiLCJoYXNIb2xlcyIsIm91dGVyTGVuIiwib3V0ZXJOb2RlIiwibGlua2VkTGlzdCIsInRyaWFuZ2xlcyIsInByZXYiLCJlbmQiLCJxdWV1ZSIsInN0ZWluZXIiLCJnZXRMZWZ0bW9zdCIsImNvbXBhcmVYIiwiZWxpbWluYXRlSG9sZSIsImZpbHRlclBvaW50cyIsImVsaW1pbmF0ZUhvbGVzIiwiZWFyY3V0TGlua2VkIiwiY2xvY2t3aXNlIiwic2lnbmVkQXJlYSIsImluc2VydE5vZGUiLCJlcXVhbHMiLCJyZW1vdmVOb2RlIiwiYWdhaW4iLCJlYXIiLCJwYXNzIiwiek9yZGVyIiwicHJldloiLCJuZXh0WiIsInRhaWwiLCJudW1NZXJnZXMiLCJwU2l6ZSIsInFTaXplIiwiaW5TaXplIiwic29ydExpbmtlZCIsImluZGV4Q3VydmUiLCJpc0Vhckhhc2hlZCIsImlzRWFyIiwiY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyIsInNwbGl0RWFyY3V0IiwicG9pbnRJblRyaWFuZ2xlIiwibWluVFgiLCJtaW5UWSIsIm1heFRYIiwibWF4VFkiLCJtaW5aIiwibWF4WiIsImludGVyc2VjdHMiLCJsb2NhbGx5SW5zaWRlIiwiaXNWYWxpZERpYWdvbmFsIiwic3BsaXRQb2x5Z29uIiwiaG9sZSIsImh4IiwiaHkiLCJxeCIsIkluZmluaXR5IiwidGFuIiwibXgiLCJteSIsInRhbk1pbiIsInNlY3RvckNvbnRhaW5zU2VjdG9yIiwiZmluZEhvbGVCcmlkZ2UiLCJsZWZ0bW9zdCIsImF4IiwiYXkiLCJieCIsImJ5IiwiY3giLCJjeSIsImludGVyc2VjdHNQb2x5Z29uIiwiaW5zaWRlIiwibWlkZGxlSW5zaWRlIiwicDEiLCJwMiIsInExIiwicTIiLCJvMSIsIm8yIiwibzMiLCJvNCIsIm9uU2VnbWVudCIsIm51bSIsIk5vZGUiLCJiMiIsImFuIiwiYnAiLCJzdW0iLCJkZWZhdWx0IiwiZGV2aWF0aW9uIiwicG9seWdvbkFyZWEiLCJ0cmlhbmdsZXNBcmVhIiwiZmxhdHRlbiIsImhvbGVzIiwiZGltZW5zaW9ucyIsImhvbGVJbmRleCIsInJvb3QiLCJmcmVlR2xvYmFsIiwibWF4SW50IiwicmVnZXhQdW55Y29kZSIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJlcnJvcnMiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJlcnJvciIsIlJhbmdlRXJyb3IiLCJhcnJheSIsIm1hcERvbWFpbiIsInN0cmluZyIsInVjczJkZWNvZGUiLCJleHRyYSIsIm91dHB1dCIsImNvdW50ZXIiLCJ1Y3MyZW5jb2RlIiwiZGlnaXRUb0Jhc2ljIiwiZGlnaXQiLCJmbGFnIiwiYWRhcHQiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwiYmFzZSIsImRlY29kZSIsImlucHV0Iiwib3V0IiwiYmFzaWMiLCJvbGRpIiwiYmFzZU1pbnVzVCIsImNvZGVQb2ludCIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImVuY29kZSIsImhhbmRsZWRDUENvdW50IiwiYmFzaWNMZW5ndGgiLCJjdXJyZW50VmFsdWUiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJhcmciLCJwcm9wIiwicXMiLCJzZXAiLCJlcSIsInJlZ2V4cCIsIm1heEtleXMiLCJrc3RyIiwidnN0ciIsImlkeCIsInN0cmluZ2lmeVByaW1pdGl2ZSIsImlzRmluaXRlIiwib2JqZWN0S2V5cyIsImtzIiwicmVzIiwiRmlsZVBhdGhzIiwiZmlsZVBhdGhzIiwibG9hZGVyIiwicmVzb3VyY2VzIiwiaXRlbXMiLCJfbmFtZSIsIl9hbGlhc0NvdW50IiwiZW1wdHkiLCJjb25maWd1cmFibGUiLCJhMCIsImE2IiwiYTciLCJyZWYiLCJlbnN1cmVOb25BbGlhc2VkSXRlbXMiLCJpdGVtIiwicmVtb3ZlQWxsIiwiZGVzdHJveSIsImRlZmluZVByb3BlcnRpZXMiLCJkaXNwYXRjaCIsInNldHRpbmdzIiwiTUlQTUFQX1RFWFRVUkVTIiwiQU5JU09UUk9QSUNfTEVWRUwiLCJSRVNPTFVUSU9OIiwiRklMVEVSX1JFU09MVVRJT04iLCJTUFJJVEVfTUFYX1RFWFRVUkVTIiwiYWxsb3dNYXgiLCJtYXRjaCQxIiwibWF4UmVjb21tZW5kZWRUZXh0dXJlcyIsIlNQUklURV9CQVRDSF9TSVpFIiwiUkVOREVSX09QVElPTlMiLCJmb3JjZUZYQUEiLCJhdXRvRGVuc2l0eSIsImNsZWFyQmVmb3JlUmVuZGVyIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwibGVnYWN5IiwiR0NfTU9ERSIsIkdDX01BWF9JRExFIiwiR0NfTUFYX0NIRUNLX0NPVU5UIiwiV1JBUF9NT0RFIiwiU0NBTEVfTU9ERSIsIlBSRUNJU0lPTl9WRVJURVgiLCJQUkVDSVNJT05fRlJBR01FTlQiLCJDQU5fVVBMT0FEX1NBTUVfQlVGRkVSIiwiQ1JFQVRFX0lNQUdFX0JJVE1BUCIsIlJPVU5EX1BJWEVMUyIsIkVOViIsIlJFTkRFUkVSX1RZUEUiLCJCTEVORF9NT0RFUyIsIkRSQVdfTU9ERVMiLCJGT1JNQVRTIiwiVEFSR0VUUyIsIlRZUEVTIiwiU0NBTEVfTU9ERVMiLCJXUkFQX01PREVTIiwiTUlQTUFQX01PREVTIiwiR0NfTU9ERVMiLCJQUkVDSVNJT04iLCJSRVRJTkFfUFJFRklYIiwiRkFJTF9JRl9NQUpPUl9QRVJGT1JNQU5DRV9DQVZFQVQiLCJzYWlkSGVsbG8iLCJoZXgycmdiIiwiaGV4IiwicmdiMmhleCIsInJnYiIsInByZW11bHRpcGx5QmxlbmRNb2RlIiwicG0iLCJucG0iLCJtYXBQcmVtdWx0aXBsaWVkQmxlbmRNb2RlcyIsInJlbW92ZUl0ZW1zIiwiYXJyIiwic3RhcnRJZHgiLCJyZW1vdmVDb3VudCIsIm5leHRVaWQiLCJ1aWQiLCJuZXh0UG93MiIsImlzUG93MiIsImxvZzIiLCJQcm9ncmFtQ2FjaGUiLCJUZXh0dXJlQ2FjaGUiLCJCYXNlVGV4dHVyZUNhY2hlIiwicmVzb2x1dGlvbiIsInJlc2l6ZSIsImNsZWFyUmVjdCIsInZhbCIsInRlbXBBbmNob3IiLCJnZXRSZXNvbHV0aW9uT2ZVcmwiLCJkZWZhdWx0VmFsdWUiLCJ3YXJuaW5ncyIsIlRBUkdFVF9GUE1TIiwiVVBEQVRFX1BSSU9SSVRZIiwiVGlja2VyTGlzdGVuZXIiLCJwcmlvcml0eSIsIl9kZXN0cm95ZWQiLCJkZWx0YVRpbWUiLCJyZWRpcmVjdCIsImNvbm5lY3QiLCJoYXJkIiwidGhpcyQxIiwiX2hlYWQiLCJfcmVxdWVzdElkIiwiX21heEVsYXBzZWRNUyIsIl9taW5FbGFwc2VkTVMiLCJhdXRvU3RhcnQiLCJkZWx0YU1TIiwiZWxhcHNlZE1TIiwibGFzdFRpbWUiLCJzdGFydGVkIiwiX3Byb3RlY3RlZCIsIl9sYXN0RnJhbWUiLCJfdGljayIsInRpbWUiLCJGUFMiLCJtaW5GUFMiLCJtYXhGUFMiLCJzaGFyZWQiLCJzeXN0ZW0iLCJfcmVxdWVzdElmTmVlZGVkIiwiX2NhbmNlbElmTmVlZGVkIiwiX3N0YXJ0SWZQb3NzaWJsZSIsIl9hZGRMaXN0ZW5lciIsImFkZE9uY2UiLCJjdXJyZW50VGltZSIsImhlYWQiLCJtaW5GUE1TIiwiX3NoYXJlZCIsIl9zeXN0ZW0iLCJUaWNrZXJQbHVnaW4iLCJpbml0IiwiYXNzaWduIiwic2hhcmVkVGlja2VyIiwidGlja2VyIiwiX3RpY2tlciIsIm9sZFRpY2tlciIsIlBvaW50IiwiY29weUZyb20iLCJjb3B5VG8iLCJPYnNlcnZhYmxlUG9pbnQiLCJjYiIsInNjb3BlIiwiX3giLCJfeSIsIl9jYiIsIl9zY29wZSIsIlBJXzIiLCJSQURfVE9fREVHIiwiREVHX1RPX1JBRCIsIlNIQVBFUyIsIk1hdHJpeCIsInR4IiwidHkiLCJJREVOVElUWSIsIlRFTVBfTUFUUklYIiwiZnJvbUFycmF5IiwidG9BcnJheSIsInRyYW5zcG9zZSIsIkZsb2F0MzJBcnJheSIsInBvcyIsIm5ld1BvcyIsImFwcGx5SW52ZXJzZSIsImMxIiwidHgxIiwiYXBwZW5kIiwibWF0cml4IiwiYjEiLCJkMSIsInBpdm90WCIsInBpdm90WSIsInNjYWxlWCIsInNjYWxlWSIsInNrZXdYIiwic2tld1kiLCJwcmVwZW5kIiwiZGVjb21wb3NlIiwidHJhbnNmb3JtIiwic2tldyIsImludmVydCIsImlkZW50aXR5IiwidXgiLCJ1eSIsInZ4IiwidnkiLCJyb3RhdGlvbkNheWxleSIsInJvdGF0aW9uTWF0cmljZXMiLCJzaWdudW0iLCJyb3ciLCJfdXgiLCJfdXkiLCJfdngiLCJfdnkiLCJpJDEiLCJtYXQiLCJHcm91cEQ4IiwiU0UiLCJTVyIsIk5XIiwiTkUiLCJNSVJST1JfVkVSVElDQUwiLCJNQUlOX0RJQUdPTkFMIiwiTUlSUk9SX0hPUklaT05UQUwiLCJSRVZFUlNFX0RJQUdPTkFMIiwidVgiLCJpbmQiLCJ1WSIsInZYIiwidlkiLCJpbnYiLCJyb3RhdGlvblNlY29uZCIsInJvdGF0aW9uRmlyc3QiLCJyb3RhdGUxODAiLCJpc1ZlcnRpY2FsIiwiYnlEaXJlY3Rpb24iLCJtYXRyaXhBcHBlbmRSb3RhdGlvbkludiIsIlRyYW5zZm9ybSIsIndvcmxkVHJhbnNmb3JtIiwibG9jYWxUcmFuc2Zvcm0iLCJvbkNoYW5nZSIsInBpdm90IiwidXBkYXRlU2tldyIsIl9yb3RhdGlvbiIsIl9jeCIsIl9zeCIsIl9jeSIsIl9zeSIsIl9sb2NhbElEIiwiX2N1cnJlbnRMb2NhbElEIiwiX3dvcmxkSUQiLCJfcGFyZW50SUQiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSIsInVwZGF0ZUxvY2FsVHJhbnNmb3JtIiwibHQiLCJ1cGRhdGVUcmFuc2Zvcm0iLCJwYXJlbnRUcmFuc2Zvcm0iLCJwdCIsInd0Iiwic2V0RnJvbU1hdHJpeCIsIlJlY3RhbmdsZSIsInByb3RvdHlwZUFjY2Vzc29ycyQyIiwicmlnaHQiLCJib3R0b20iLCJzdGF0aWNBY2Nlc3NvcnMkMSIsIkVNUFRZIiwicGFkIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsImZpdCIsImVwcyIsImVubGFyZ2UiLCJDaXJjbGUiLCJnZXRCb3VuZHMiLCJFbGxpcHNlIiwiaGFsZldpZHRoIiwiaGFsZkhlaWdodCIsIm5vcm14Iiwibm9ybXkiLCJQb2x5Z29uIiwicG9pbnRzIiwiaWwiLCJjbG9zZVN0cm9rZSIsInhpIiwieWkiLCJ4aiIsInlqIiwiUm91bmRlZFJlY3RhbmdsZSIsInJhZGl1czIiLCJTT1JUQUJMRV9DSElMRFJFTiIsImlzRW1wdHkiLCJ1cGRhdGVJRCIsImdldFJlY3RhbmdsZSIsImFkZFBvaW50IiwiYWRkUXVhZCIsImFkZEZyYW1lIiwieDAiLCJ5MCIsImFkZFZlcnRleERhdGEiLCJ2ZXJ0ZXhEYXRhIiwiYmVnaW5PZmZzZXQiLCJlbmRPZmZzZXQiLCJhZGRWZXJ0aWNlcyIsInJhd1giLCJyYXdZIiwiYWRkQm91bmRzIiwiYWRkQm91bmRzTWFzayIsIl9taW5YIiwiX21pblkiLCJfbWF4WCIsIl9tYXhZIiwiYWRkQm91bmRzQXJlYSIsIkRpc3BsYXlPYmplY3QiLCJ0ZW1wRGlzcGxheU9iamVjdFBhcmVudCIsImFscGhhIiwicmVuZGVyYWJsZSIsIndvcmxkQWxwaGEiLCJfbGFzdFNvcnRlZEluZGV4IiwiX3pJbmRleCIsImZpbHRlckFyZWEiLCJmaWx0ZXJzIiwiX2VuYWJsZWRGaWx0ZXJzIiwiX2JvdW5kcyIsIl9ib3VuZHNJRCIsIl9sYXN0Qm91bmRzSUQiLCJfYm91bmRzUmVjdCIsIl9sb2NhbEJvdW5kc1JlY3QiLCJfbWFzayIsImlzU3ByaXRlIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50IiwiekluZGV4Iiwid29ybGRWaXNpYmxlIiwibWl4aW4iLCJwcm9wZXJ0eU5hbWUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVjdXJzaXZlUG9zdFVwZGF0ZVRyYW5zZm9ybSIsInNraXBVcGRhdGUiLCJjYWxjdWxhdGVCb3VuZHMiLCJnZXRMb2NhbEJvdW5kcyIsInRyYW5zZm9ybVJlZiIsInBhcmVudFJlZiIsInRvR2xvYmFsIiwiZGlzcGxheU9iamVjdFVwZGF0ZVRyYW5zZm9ybSIsInRvTG9jYWwiLCJmcm9tIiwic2V0UGFyZW50IiwiX2N1cnJlbnRCb3VuZHMiLCJpbnRlcmFjdGl2ZSIsImludGVyYWN0aXZlQ2hpbGRyZW4iLCJzb3J0RGlydHkiLCJpc01hc2siLCJzb3J0Q2hpbGRyZW4iLCJzb3J0YWJsZUNoaWxkcmVuIiwib25DaGlsZHJlbkNoYW5nZSIsImNoaWxkIiwiYXJndW1lbnRzJDEiLCJhcmd1bWVudHNMZW5ndGgiLCJzd2FwQ2hpbGRyZW4iLCJjaGlsZDIiLCJpbmRleDEiLCJnZXRDaGlsZEluZGV4IiwiaW5kZXgyIiwic2V0Q2hpbGRJbmRleCIsImN1cnJlbnRJbmRleCIsImdldENoaWxkQXQiLCJyZW1vdmVDaGlsZEF0IiwicmVtb3ZlQ2hpbGRyZW4iLCJiZWdpbkluZGV4IiwiZW5kSW5kZXgiLCJyZW1vdmVkIiwiYmVnaW4iLCJzb3J0UmVxdWlyZWQiLCJfY2FsY3VsYXRlQm91bmRzIiwicmVuZGVyQWR2YW5jZWQiLCJfcmVuZGVyIiwiYmF0Y2giLCJmbHVzaCIsImRlc3Ryb3lDaGlsZHJlbiIsIm9sZENoaWxkcmVuIiwiX3dpZHRoIiwiX2hlaWdodCIsImNvbnRhaW5lclVwZGF0ZVRyYW5zZm9ybSIsImRlc3Ryb3llZCIsImludGVybmFsIiwib25SZXNpemUiLCJvblVwZGF0ZSIsIm9uRXJyb3IiLCJ2YWxpZCIsImJhc2VUZXh0dXJlIiwidW5iaW5kIiwibG9hZCIsIlByb21pc2UiLCJ1cGxvYWQiLCJnbFRleHR1cmUiLCJkaXNwb3NlIiwiUmVzb3VyY2UiLCJCYXNlSW1hZ2VSZXNvdXJjZSIsIm5hdHVyYWxXaWR0aCIsInZpZGVvV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwidmlkZW9IZWlnaHQiLCJub1N1YkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJjcm9zc29yaWdpbiIsImxvYyIsImxvY2F0aW9uIiwic2FtZVBvcnQiLCJkZXRlcm1pbmVDcm9zc09yaWdpbiIsImdsIiwicmVhbFdpZHRoIiwicmVhbEhlaWdodCIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwicHJlbXVsdGlwbHlBbHBoYSIsInRhcmdldCIsIlRFWFRVUkVfMkQiLCJ0ZXhJbWFnZTJEIiwidGV4U3ViSW1hZ2UyRCIsIkltYWdlUmVzb3VyY2UiLCJIVE1MSW1hZ2VFbGVtZW50IiwiaW1hZ2VFbGVtZW50IiwiY29tcGxldGUiLCJfcHJvY2VzcyIsInByZXNlcnZlQml0bWFwIiwiY3JlYXRlQml0bWFwIiwiY3JlYXRlSW1hZ2VCaXRtYXAiLCJiaXRtYXAiLCJfbG9hZCIsImF1dG9Mb2FkIiwiY29tcGxldGVkIiwib25sb2FkIiwib25lcnJvciIsInByb2Nlc3MiLCJ0aGVuIiwicmVqZWN0IiwiX2dsVGV4dHVyZXMiLCJvdGhlclRleCIsImRpcnR5SWQiLCJjbG9zZSIsIklOU1RBTExFRCIsImF1dG9EZXRlY3RSZXNvdXJjZSIsImV4dGVuc2lvbiIsIlJlc291cmNlUGx1Z2luIiwiQnVmZmVyUmVzb3VyY2UiLCJpbnRlcm5hbEZvcm1hdCIsImRlZmF1bHRCdWZmZXJPcHRpb25zIiwic2NhbGVNb2RlIiwiQmFzZVRleHR1cmUiLCJyZXNvdXJjZSIsIm1pcG1hcCIsImFuaXNvdHJvcGljTGV2ZWwiLCJ3cmFwTW9kZSIsInJlc291cmNlT3B0aW9ucyIsInRvdWNoZWQiLCJpc1Bvd2VyT2ZUd28iLCJfcmVmcmVzaFBPVCIsImRpcnR5U3R5bGVJZCIsImNhY2hlSWQiLCJ0ZXh0dXJlQ2FjaGVJZHMiLCJfYmF0Y2hFbmFibGVkIiwic2V0UmVzb3VyY2UiLCJzZXRTdHlsZSIsImRpcnR5Iiwic2V0U2l6ZSIsInNldFJlYWxTaXplIiwic2V0UmVzb2x1dGlvbiIsIm9sZFJlc29sdXRpb24iLCJyZW1vdmVGcm9tQ2FjaGUiLCJfcGl4aUlkIiwiYWRkVG9DYWNoZSIsImZyb21CdWZmZXIiLCJidWZmZXIiLCJiYXNlVGV4dHVyZUZyb21DYWNoZSIsIl9nbG9iYWxCYXRjaCIsIkFycmF5UmVzb3VyY2UiLCJ1cmxzIiwiaXRlbURpcnR5SWRzIiwicGFydFRleHR1cmUiLCJhZGRSZXNvdXJjZUF0IiwicHJvbWlzZXMiLCJhbGwiLCJ0ZXhJbWFnZTNEIiwiVEVYVFVSRV8yRF9BUlJBWSIsInRleFN1YkltYWdlM0QiLCJDYW52YXNSZXNvdXJjZSIsIk9mZnNjcmVlbkNhbnZhcyIsIkhUTUxDYW52YXNFbGVtZW50IiwiQ3ViZVJlc291cmNlIiwiU0lERVMiLCJzaWRlIiwiU1ZHUmVzb3VyY2UiLCJzdmciLCJfb3ZlcnJpZGVXaWR0aCIsIl9vdmVycmlkZUhlaWdodCIsIl9yZXNvbHZlIiwiX2Nyb3Nzb3JpZ2luIiwiYnRvYSIsInVuZXNjYXBlIiwiX2xvYWRTdmciLCJ0ZW1wSW1hZ2UiLCJzdmdXaWR0aCIsInN2Z0hlaWdodCIsImdldFNpemUiLCJzdmdTdHJpbmciLCJzaXplTWF0Y2giLCJTVkdfU0laRSIsInNpemUiLCJWaWRlb1Jlc291cmNlIiwiSFRNTFZpZGVvRWxlbWVudCIsInZpZGVvRWxlbWVudCIsInNvdXJjZUVsZW1lbnQiLCJtaW1lIiwiYmFzZVNyYyIsImV4dCIsIl9hdXRvVXBkYXRlIiwiX2lzQXV0b1VwZGF0aW5nIiwiX3VwZGF0ZUZQUyIsInVwZGF0ZUZQUyIsIl9tc1RvTmV4dFVwZGF0ZSIsImF1dG9QbGF5IiwiX29uQ2FuUGxheSIsIl9vbkVycm9yIiwiYXV0b1VwZGF0ZSIsInBsYXliYWNrUmF0ZSIsInJlYWR5U3RhdGUiLCJIQVZFX0VOT1VHSF9EQVRBIiwiSEFWRV9GVVRVUkVfREFUQSIsIl9vblBsYXlTdGFydCIsIl9vblBsYXlTdG9wIiwiX2lzU291cmNlUmVhZHkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX2lzU291cmNlUGxheWluZyIsInBhdXNlZCIsImVuZGVkIiwicGxheSIsInBhdXNlIiwiSW1hZ2VCaXRtYXBSZXNvdXJjZSIsIkltYWdlQml0bWFwIiwiRGVwdGhSZXNvdXJjZSIsIkRFUFRIX0NPTVBPTkVOVDE2Iiwic3RlbmNpbCIsImRpcnR5Rm9ybWF0IiwiZGlydHlTaXplIiwiZGVwdGhUZXh0dXJlIiwiY29sb3JUZXh0dXJlcyIsImdsRnJhbWVidWZmZXJzIiwiZGlzcG9zZVJ1bm5lciIsImNvbG9yVGV4dHVyZSIsImFkZENvbG9yVGV4dHVyZSIsImFkZERlcHRoVGV4dHVyZSIsImVuYWJsZURlcHRoIiwiZW5hYmxlU3RlbmNpbCIsInJlc29sdXRpb24kMSIsIkJhc2VSZW5kZXJUZXh0dXJlIiwid2lkdGgkMSIsImhlaWdodCQxIiwiX2NhbnZhc1JlbmRlclRhcmdldCIsImNsZWFyQ29sb3IiLCJmcmFtZWJ1ZmZlciIsInN0ZW5jaWxNYXNrU3RhY2siLCJmaWx0ZXJTdGFjayIsIlRleHR1cmVVdnMiLCJ4MyIsInkzIiwidXZzRmxvYXQzMiIsImZyYW1lIiwiYmFzZUZyYW1lIiwidHciLCJ0aCIsIncyIiwiaDIiLCJjWCIsImNZIiwiREVGQVVMVF9VVlMiLCJvcmlnIiwibm9GcmFtZSIsIl9mcmFtZSIsInJlcXVpcmVzVXBkYXRlIiwiX3V2cyIsInV2TWF0cml4IiwiX3JvdGF0ZSIsImRlZmF1bHRBbmNob3IiLCJfdXBkYXRlSUQiLCJvbkJhc2VUZXh0dXJlVXBkYXRlZCIsInVwZGF0ZVV2cyIsImRlc3Ryb3lCYXNlIiwiZnJvbUxvYWRlciIsImltYWdlVXJsIiwidGV4dHVyZUZyb21DYWNoZSIsInhOb3RGaXQiLCJ5Tm90Rml0IiwicmVsYXRpb25zaGlwIiwiZXJyb3JYIiwiZXJyb3JZIiwicmVtb3ZlQWxsSGFuZGxlcnMiLCJ0ZXgiLCJXSElURSIsImNyZWF0ZVdoaXRlVGV4dHVyZSIsIlJlbmRlclRleHR1cmUiLCJiYXNlUmVuZGVyVGV4dHVyZSIsIl9sZWdhY3lSZW5kZXJlciIsImxlZ2FjeVJlbmRlcmVyIiwiZmlsdGVyRnJhbWUiLCJmaWx0ZXJQb29sS2V5IiwicmVzaXplQmFzZVRleHR1cmUiLCJSZW5kZXJUZXh0dXJlUG9vbCIsInRleHR1cmVPcHRpb25zIiwidGV4dHVyZVBvb2wiLCJlbmFibGVGdWxsU2NyZWVuIiwiX3BpeGVsc1dpZHRoIiwiX3BpeGVsc0hlaWdodCIsImNyZWF0ZVRleHR1cmUiLCJnZXRPcHRpbWFsVGV4dHVyZSIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwiU0NSRUVOX0tFWSIsInJlbmRlclRleHR1cmUiLCJnZXRGaWx0ZXJUZXh0dXJlIiwiZmlsdGVyVGV4dHVyZSIsInJldHVyblRleHR1cmUiLCJyZXR1cm5GaWx0ZXJUZXh0dXJlIiwiZGVzdHJveVRleHR1cmVzIiwic2V0U2NyZWVuU2l6ZSIsInNjcmVlbktleSIsIkF0dHJpYnV0ZSIsIm5vcm1hbGl6ZWQiLCJzdHJpZGUiLCJpbnN0YW5jZSIsIlVJRCIsIl9zdGF0aWMiLCJfZ2xCdWZmZXJzIiwic3RhdGljIiwiZ2V0QnVmZmVyVHlwZSIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiVWludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiYnl0ZVNpemVNYXAiLCI1MTI2IiwiNTEyMyIsIjUxMjEiLCJVSUQkMSIsIm1hcCQxIiwiYnVmZmVycyIsImF0dHJpYnV0ZXMiLCJpbmRleEJ1ZmZlciIsImdsVmVydGV4QXJyYXlPYmplY3RzIiwiaW5zdGFuY2VkIiwiaW5zdGFuY2VDb3VudCIsInJlZkNvdW50IiwiYWRkQXR0cmlidXRlIiwiaWRzIiwiYnVmZmVySW5kZXgiLCJnZXRCdWZmZXIiLCJhZGRJbmRleCIsImdldEluZGV4IiwiaW50ZXJsZWF2ZSIsImFycmF5cyIsInNpemVzIiwiaW50ZXJsZWF2ZWRCdWZmZXIiLCJhdHRyaWJ1dGUiLCJvdXRTaXplIiwidmlld3MiLCJBcnJheUJ1ZmZlciIsImxpdHRsZU9mZnNldCIsImludGVybGVhdmVUeXBlZEFycmF5cyIsImdlb21ldHJ5IiwiYXR0cmliIiwiZ2VvbWV0cmllcyIsImdlb21ldHJ5T3V0Iiwib2Zmc2V0cyIsImkkMiIsImokMSIsIm9mZnNldDIiLCJidWZmZXJJbmRleFRvQ291bnQiLCJpJDMiLCJpJDQiLCJpJDUiLCJpbmRleEJ1ZmZlckRhdGEiLCJqJDIiLCJRdWFkIiwiR2VvbWV0cnkiLCJRdWFkVXYiLCJ1dnMiLCJ2ZXJ0ZXhCdWZmZXIiLCJ1dkJ1ZmZlciIsInRhcmdldFRleHR1cmVGcmFtZSIsImRlc3RpbmF0aW9uRnJhbWUiLCJpbnZhbGlkYXRlIiwiVUlEJDIiLCJVbmlmb3JtR3JvdXAiLCJ1bmlmb3JtcyIsInN5bmNVbmlmb3JtcyIsInNvdXJjZUZyYW1lIiwiU3lzdGVtIiwiRmlsdGVyU3lzdGVtIiwiZGVmYXVsdEZpbHRlclN0YWNrIiwic3RhdGVQb29sIiwicXVhZCIsInF1YWRVdiIsInRlbXBSZWN0IiwiYWN0aXZlU3RhdGUiLCJnbG9iYWxVbmlmb3JtcyIsIm91dHB1dEZyYW1lIiwiaW5wdXRTaXplIiwiaW5wdXRQaXhlbCIsImlucHV0Q2xhbXAiLCJmaWx0ZXJDbGFtcCIsInN0YXRlIiwicGFkZGluZyIsImF1dG9GaXQiLCJnZXRPcHRpbWFsRmlsdGVyVGV4dHVyZSIsImxhc3RTdGF0ZSIsImZsaXAiLCJmbG9wIiwiYXBwbHlGaWx0ZXIiLCJ1U2FtcGxlciIsImZpbHRlckdsb2JhbHMiLCJzaGFkZXIiLCJkcmF3IiwiY2FsY3VsYXRlU3ByaXRlTWF0cml4Iiwib3V0cHV0TWF0cml4IiwiX3RleHR1cmUiLCJtYXBwZWRNYXRyaXgiLCJzd2FwIiwiZW1wdHlQb29sIiwiQmF0Y2hTeXN0ZW0iLCJlbXB0eVJlbmRlcmVyIiwiY3VycmVudFJlbmRlcmVyIiwic2V0T2JqZWN0UmVuZGVyZXIiLCJvYmplY3RSZW5kZXJlciIsInJlc2V0IiwiUFJFRkVSX0VOViIsIkNPTlRFWFRfVUlEIiwiQ29udGV4dFN5c3RlbSIsIndlYkdMVmVyc2lvbiIsImV4dGVuc2lvbnMiLCJoYW5kbGVDb250ZXh0TG9zdCIsImhhbmRsZUNvbnRleHRSZXN0b3JlZCIsImlzTG9zdCIsImlzQ29udGV4dExvc3QiLCJjb250ZXh0Q2hhbmdlIiwiZ2V0RXh0ZW5zaW9uIiwicmVzdG9yZUNvbnRleHQiLCJpbml0RnJvbUNvbnRleHQiLCJ2YWxpZGF0ZUNvbnRleHQiLCJydW5uZXJzIiwiaW5pdEZyb21PcHRpb25zIiwiY3JlYXRlQ29udGV4dCIsImdldEV4dGVuc2lvbnMiLCJkcmF3QnVmZmVycyIsImxvc2VDb250ZXh0IiwidmVydGV4QXJyYXlPYmplY3QiLCJhbmlzb3Ryb3BpY0ZpbHRlcmluZyIsInVpbnQzMkVsZW1lbnRJbmRleCIsImZsb2F0VGV4dHVyZSIsImZsb2F0VGV4dHVyZUxpbmVhciIsInRleHR1cmVIYWxmRmxvYXQiLCJ0ZXh0dXJlSGFsZkZsb2F0TGluZWFyIiwiY29sb3JCdWZmZXJGbG9hdCIsInVzZVByb2dyYW0iLCJwb3N0cmVuZGVyIiwiZ2V0Q29udGV4dEF0dHJpYnV0ZXMiLCJGcmFtZWJ1ZmZlclN5c3RlbSIsIm1hbmFnZWRGcmFtZWJ1ZmZlcnMiLCJ1bmtub3duRnJhbWVidWZmZXIiLCJ2aWV3cG9ydCIsImhhc01SVCIsIndyaXRlRGVwdGhUZXh0dXJlIiwiZGlzcG9zZUFsbCIsIm5hdGl2ZURyYXdCdWZmZXJzRXh0ZW5zaW9uIiwibmF0aXZlRGVwdGhUZXh0dXJlRXh0ZW5zaW9uIiwiYWN0aXZlVGV4dHVyZXMiLCJkcmF3QnVmZmVyc1dFQkdMIiwiZmJvIiwiaW5pdEZyYW1lYnVmZmVyIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJ1cGRhdGVGcmFtZWJ1ZmZlciIsInJlc2l6ZUZyYW1lYnVmZmVyIiwidGV4dHVyZVBhcnQiLCJzZXRWaWV3cG9ydCIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJiaW5kUmVuZGVyYnVmZmVyIiwiUkVOREVSQlVGRkVSIiwicmVuZGVyYnVmZmVyU3RvcmFnZSIsIkRFUFRIX1NURU5DSUwiLCJjb3VudCIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1giLCJERVBUSF9BVFRBQ0hNRU5UIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQiLCJkaXNwb3NlRnJhbWVidWZmZXIiLCJjb250ZXh0TG9zdCIsImRlbGV0ZUZyYW1lYnVmZmVyIiwiZGVsZXRlUmVuZGVyYnVmZmVyIiwiZm9yY2VTdGVuY2lsIiwiR0xCdWZmZXIiLCJieXRlTGVuZ3RoIiwiYnl0ZVNpemVNYXAkMSIsIkdlb21ldHJ5U3lzdGVtIiwiX2FjdGl2ZUdlb21ldHJ5IiwiX2FjdGl2ZVZhbyIsImhhc1ZhbyIsImhhc0luc3RhbmNlIiwiY2FuVXNlVUludDMyRWxlbWVudEluZGV4IiwiYm91bmRCdWZmZXJzIiwibWFuYWdlZEdlb21ldHJpZXMiLCJtYW5hZ2VkQnVmZmVycyIsImNyZWF0ZVZlcnRleEFycmF5IiwibmF0aXZlVmFvRXh0ZW5zaW9uIiwiY3JlYXRlVmVydGV4QXJyYXlPRVMiLCJiaW5kVmVydGV4QXJyYXkiLCJ2YW8iLCJiaW5kVmVydGV4QXJyYXlPRVMiLCJkZWxldGVWZXJ0ZXhBcnJheSIsImRlbGV0ZVZlcnRleEFycmF5T0VTIiwidmVydGV4QXR0cmliRGl2aXNvciIsImluc3RhbmNlRXh0IiwidmVydGV4QXR0cmliRGl2aXNvckFOR0xFIiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkIiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUiLCJkcmF3QXJyYXlzSW5zdGFuY2VkIiwiZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFIiwidmFvcyIsInByb2dyYW0iLCJpbml0R2VvbWV0cnlWYW8iLCJhY3RpdmF0ZVZhbyIsInVwZGF0ZUJ1ZmZlcnMiLCJnbEJ1ZmZlciIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiQVJSQVlfQlVGRkVSIiwiYmluZEJ1ZmZlciIsIl9ib3VuZEJ1ZmZlciIsImJ1ZmZlclN1YkRhdGEiLCJkcmF3VHlwZSIsIlNUQVRJQ19EUkFXIiwiRFlOQU1JQ19EUkFXIiwiYnVmZmVyRGF0YSIsImNoZWNrQ29tcGF0aWJpbGl0eSIsImdlb21ldHJ5QXR0cmlidXRlcyIsInNoYWRlckF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVEYXRhIiwiZ2V0U2lnbmF0dXJlIiwiYXR0cmlicyIsInN0cmluZ3MiLCJzaWduYXR1cmUiLCJ2YW9PYmplY3RIYXNoIiwidGVtcFN0cmlkZSIsInRlbXBTdGFydCIsImF0dHJpYlNpemUiLCJjcmVhdGVCdWZmZXIiLCJkaXNwb3NlQnVmZmVyIiwiZGVsZXRlQnVmZmVyIiwiZGlzcG9zZUdlb21ldHJ5IiwiYnVmIiwidmFvSWQiLCJsYXN0QnVmZmVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiRkxPQVQiLCJieXRlU2l6ZSIsImdsVHlwZSIsIlVOU0lHTkVEX1NIT1JUIiwiVU5TSUdORURfSU5UIiwiZHJhd0VsZW1lbnRzIiwiZHJhd0FycmF5cyIsImNvbXBpbGVQcm9ncmFtIiwidmVydGV4U3JjIiwiZnJhZ21lbnRTcmMiLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJnbFZlcnRTaGFkZXIiLCJjb21waWxlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsImdsRnJhZ1NoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJiaW5kQXR0cmliTG9jYXRpb24iLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsIlZBTElEQVRFX1NUQVRVUyIsImdldEVycm9yIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJkZWxldGVQcm9ncmFtIiwiZGVsZXRlU2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiYm9vbGVhbkFycmF5IiwibWF4RnJhZ21lbnRQcmVjaXNpb24iLCJ1bmtub3duQ29udGV4dCIsImdldFRlc3RDb250ZXh0Iiwic2V0UHJlY2lzaW9uIiwicmVxdWVzdGVkUHJlY2lzaW9uIiwibWF4U3VwcG9ydGVkUHJlY2lzaW9uIiwic3Vic3RyaW5nIiwicHJlY2lzaW9uIiwiR0xTTF9UT19TSVpFIiwiZmxvYXQiLCJ2ZWMyIiwidmVjMyIsInZlYzQiLCJpbnQiLCJpdmVjMiIsIml2ZWMzIiwiaXZlYzQiLCJib29sIiwiYnZlYzIiLCJidmVjMyIsImJ2ZWM0IiwibWF0MiIsIm1hdDMiLCJtYXQ0Iiwic2FtcGxlcjJEIiwibWFwU2l6ZSIsIkdMX1RBQkxFIiwiR0xfVE9fR0xTTF9UWVBFUyIsIkZMT0FUX1ZFQzIiLCJGTE9BVF9WRUMzIiwiRkxPQVRfVkVDNCIsIklOVCIsIklOVF9WRUMyIiwiSU5UX1ZFQzMiLCJJTlRfVkVDNCIsIkJPT0wiLCJCT09MX1ZFQzIiLCJCT09MX1ZFQzMiLCJCT09MX1ZFQzQiLCJGTE9BVF9NQVQyIiwiRkxPQVRfTUFUMyIsIkZMT0FUX01BVDQiLCJTQU1QTEVSXzJEIiwiU0FNUExFUl9DVUJFIiwiU0FNUExFUl8yRF9BUlJBWSIsIm1hcFR5cGUiLCJ0eXBlTmFtZXMiLCJ0biIsIkdMU0xfVE9fU0lOR0xFX1NFVFRFUlNfQ0FDSEVEIiwic2FtcGxlckN1YmUiLCJzYW1wbGVyMkRBcnJheSIsIkdMU0xfVE9fQVJSQVlfU0VUVEVSUyIsInVuc2FmZUV2YWwiLCJmcmFnVGVtcGxhdGUiLCJnZW5lcmF0ZUlmVGVzdFNyYyIsIm1heElmcyIsIlVJRCQzIiwibmFtZUNhY2hlIiwiUHJvZ3JhbSIsImRlZmF1bHRWZXJ0ZXhTcmMiLCJkZWZhdWx0RnJhZ21lbnRTcmMiLCJnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQiLCJzaGFkZXJGcmFnbWVudCIsIkhJR0hfRkxPQVQiLCJnZXRNYXhGcmFnbWVudFByZWNpc2lvbiIsImV4dHJhY3REYXRhIiwiZ2xQcm9ncmFtcyIsImdldEF0dHJpYnV0ZURhdGEiLCJ1bmlmb3JtRGF0YSIsImdldFVuaWZvcm1EYXRhIiwiYXR0cmlidXRlc0FycmF5IiwidG90YWxBdHRyaWJ1dGVzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJhdHRyaWJEYXRhIiwiZ2V0QWN0aXZlQXR0cmliIiwidG90YWxVbmlmb3JtcyIsIkFDVElWRV9VTklGT1JNUyIsImdldEFjdGl2ZVVuaWZvcm0iLCJ1bmlmb3JtR3JvdXAiLCJjaGVja1VuaWZvcm1FeGlzdHMiLCJ1bmlmb3JtIiwiYmxlbmRNb2RlIiwicG9seWdvbk9mZnNldCIsImJsZW5kIiwicHJvdG90eXBlQWNjZXNzb3JzJDMiLCJjdWxsaW5nIiwiZGVwdGhUZXN0IiwiY2xvY2t3aXNlRnJvbnRGYWNlIiwiX2JsZW5kTW9kZSIsIl9wb2x5Z29uT2Zmc2V0IiwiZm9yMmQiLCJTaGFkZXIiLCJGaWx0ZXIiLCJhVGV4dHVyZUNvb3JkIiwic3RhdGljQWNjZXNzb3JzIiwiZmlsdGVyTWFuYWdlciIsImN1cnJlbnRTdGF0ZSIsIlNPVVJDRV9LRVlfTUFQIiwidGVtcE1hdCIsImNsYW1wTWFyZ2luIiwibWFwQ29vcmQiLCJ1Q2xhbXBGcmFtZSIsInVDbGFtcE9mZnNldCIsImNsYW1wT2Zmc2V0IiwiaXNTaW1wbGUiLCJwcm90b3R5cGVBY2Nlc3NvcnMkNCIsIm11bHRpcGx5VXZzIiwiZm9yY2VVcGRhdGUiLCJ0ZXhCYXNlIiwibWFyZ2luIiwiU3ByaXRlTWFza0ZpbHRlciIsIm1hc2tNYXRyaXgiLCJtYXNrU3ByaXRlIiwibnBtQWxwaGEiLCJvdGhlck1hdHJpeCIsIm1hc2tDbGFtcCIsIk1hc2tTeXN0ZW0iLCJzY2lzc29yIiwic2Npc3NvckRhdGEiLCJzY2lzc29yUmVuZGVyVGFyZ2V0IiwiZW5hYmxlU2Npc3NvciIsImFscGhhTWFza1Bvb2wiLCJhbHBoYU1hc2tJbmRleCIsIm1hc2tEYXRhIiwicHVzaFNwcml0ZU1hc2siLCJfYWN0aXZlUmVuZGVyVGFyZ2V0IiwiaXNGYXN0UmVjdCIsInJvdCIsInB1c2hTdGVuY2lsTWFzayIsInB1c2hTY2lzc29yTWFzayIsInBvcFNwcml0ZU1hc2siLCJwb3BTY2lzc29yTWFzayIsInBvcFN0ZW5jaWxNYXNrIiwiYWxwaGFNYXNrRmlsdGVyIiwic3Rhc2hGaWx0ZXJBcmVhIiwicHVzaFN0ZW5jaWwiLCJwb3BTdGVuY2lsIiwicmVuZGVyVGFyZ2V0IiwiZW5hYmxlIiwiU0NJU1NPUl9URVNUIiwiZGlzYWJsZSIsIlN0ZW5jaWxTeXN0ZW0iLCJzZXRNYXNrU3RhY2siLCJjdXJTdGFja0xlbiIsIlNURU5DSUxfVEVTVCIsIl91c2VDdXJyZW50IiwiZ3JhcGhpY3MiLCJwcmV2TWFza0NvdW50IiwiY29sb3JNYXNrIiwic3RlbmNpbEZ1bmMiLCJFUVVBTCIsIl9nZXRCaXR3aXNlTWFzayIsInN0ZW5jaWxPcCIsIktFRVAiLCJJTkNSIiwiU1RFTkNJTF9CVUZGRVJfQklUIiwiY2xlYXJTdGVuY2lsIiwiREVDUiIsIlByb2plY3Rpb25TeXN0ZW0iLCJkZWZhdWx0RnJhbWUiLCJwcm9qZWN0aW9uTWF0cml4IiwiY2FsY3VsYXRlUHJvamVjdGlvbiIsInN5bmNVbmlmb3JtR3JvdXAiLCJnbG9iYWxzIiwiUmVuZGVyVGV4dHVyZVN5c3RlbSIsIl9iYWNrZ3JvdW5kQ29sb3JSZ2JhIiwiZGVmYXVsdE1hc2tTdGFjayIsInByb2plY3Rpb24iLCJHTFByb2dyYW0iLCJ1bmlmb3JtR3JvdXBzIiwiVUlEJDQiLCJTaGFkZXJTeXN0ZW0iLCJzeXN0ZW1DaGVjayIsImNhY2hlIiwiZnVuYyIsInVuc2FmZUV2YWxTdXBwb3J0ZWQiLCJkb250U3luYyIsImdsUHJvZ3JhbSIsImdlbmVyYXRlU2hhZGVyIiwic2V0VW5pZm9ybXMiLCJnZXRnbFByb2dyYW0iLCJjcmVhdGVTeW5jR3JvdXBzIiwidGV4dHVyZUNvdW50IiwiZ2VuZXJhdGVVbmlmb3Jtc1N5bmMiLCJhdHRyaWJNYXAiLCJzaGFkZXJQcm9ncmFtIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiU3RhdGVTeXN0ZW0iLCJzdGF0ZUlkIiwiX2JsZW5kRXEiLCJzZXRCbGVuZCIsInNldEN1bGxGYWNlIiwic2V0RGVwdGhUZXN0Iiwic2V0RnJvbnRGYWNlIiwiY2hlY2tzIiwiZGVmYXVsdFN0YXRlIiwiYmxlbmRNb2RlcyIsIk9ORSIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJEU1RfQ09MT1IiLCJPTkVfTUlOVVNfU1JDX0NPTE9SIiwiU1JDX0FMUEhBIiwiRFNUX0FMUEhBIiwiWkVSTyIsIk9ORV9NSU5VU19EU1RfQUxQSEEiLCJGVU5DX1JFVkVSU0VfU1VCVFJBQ1QiLCJGVU5DX0FERCIsIm1hcFdlYkdMQmxlbmRNb2Rlc1RvUGl4aSIsImRpZmYiLCJmb3JjZVN0YXRlIiwidXBkYXRlQ2hlY2siLCJjaGVja0JsZW5kTW9kZSIsIkJMRU5EIiwiY2hlY2tQb2x5Z29uT2Zmc2V0IiwiUE9MWUdPTl9PRkZTRVRfRklMTCIsIkRFUFRIX1RFU1QiLCJDVUxMX0ZBQ0UiLCJmcm9udEZhY2UiLCJzZXRCbGVuZE1vZGUiLCJibGVuZEZ1bmMiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsInNldFBvbHlnb25PZmZzZXQiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVGV4dHVyZUdDU3lzdGVtIiwiY2hlY2tDb3VudCIsIm1heElkbGUiLCJjaGVja0NvdW50TWF4IiwidG0iLCJtYW5hZ2VkVGV4dHVyZXMiLCJ3YXNSZW1vdmVkIiwiZGVzdHJveVRleHR1cmUiLCJ1bmxvYWQiLCJkaXNwbGF5T2JqZWN0IiwidGV4dHVyZVN5c3RlbSIsIl9nbFJlbmRlclRhcmdldHMiLCJHTFRleHR1cmUiLCJUZXh0dXJlU3lzdGVtIiwiYm91bmRUZXh0dXJlcyIsImN1cnJlbnRMb2NhdGlvbiIsIl91bmtub3duQm91bmRUZXh0dXJlcyIsInVua25vd25UZXh0dXJlIiwibWF4VGV4dHVyZXMiLCJnZXRQYXJhbWV0ZXIiLCJNQVhfVEVYVFVSRV9JTUFHRV9VTklUUyIsImVtcHR5VGV4dHVyZXMiLCJlbXB0eVRleHR1cmUyRCIsImJpbmRUZXh0dXJlIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJURVhUVVJFX0NVQkVfTUFQIiwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIkxJTkVBUiIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsInRleHR1cmVHQyIsImluaXRUZXh0dXJlIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwidXBkYXRlVGV4dHVyZSIsImluaXRUZXh0dXJlVHlwZSIsIlJHQkEzMkYiLCJIQUxGX0ZMT0FUIiwiUkdCQTE2RiIsInVwZGF0ZVRleHR1cmVTdHlsZSIsInNraXBSZW1vdmUiLCJkZWxldGVUZXh0dXJlIiwiZ2VuZXJhdGVNaXBtYXAiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwiTElORUFSX01JUE1BUF9MSU5FQVIiLCJORUFSRVNUX01JUE1BUF9ORUFSRVNUIiwiYW5pc290cm9waWNFeHQiLCJsZXZlbCIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsInRleFBhcmFtZXRlcmYiLCJURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIk5FQVJFU1QiLCJ0ZW1wTWF0cml4IiwiQmF0Y2hEcmF3Q2FsbCIsIlZpZXdhYmxlQnVmZmVyIiwicmF3QmluYXJ5RGF0YSIsInVpbnQzMlZpZXciLCJmbG9hdDMyVmlldyIsInByb3RvdHlwZUFjY2Vzc29ycyQ1IiwiaW50OFZpZXciLCJ1aW50OFZpZXciLCJpbnQxNlZpZXciLCJ1aW50MTZWaWV3IiwiaW50MzJWaWV3IiwiX2ludDhWaWV3IiwiSW50OEFycmF5IiwiX3VpbnQ4VmlldyIsIl9pbnQxNlZpZXciLCJJbnQxNkFycmF5IiwiX3VpbnQxNlZpZXciLCJfaW50MzJWaWV3Iiwic2l6ZU9mIiwiT2JqZWN0UmVuZGVyZXIiLCJBYnN0cmFjdEJhdGNoUmVuZGVyZXIiLCJzaGFkZXJHZW5lcmF0b3IiLCJnZW9tZXRyeUNsYXNzIiwidmVydGV4U2l6ZSIsIl92ZXJ0ZXhDb3VudCIsIl9pbmRleENvdW50IiwiX2J1ZmZlcmVkRWxlbWVudHMiLCJfYnVmZmVyU2l6ZSIsIl9zaGFkZXIiLCJfcGFja2VkR2VvbWV0cmllcyIsIl9wYWNrZWRHZW9tZXRyeVBvb2xTaXplIiwiX2ZsdXNoSWQiLCJfZHJhd0NhbGxzIiwiX2FCdWZmZXJzIiwiX2lCdWZmZXJzIiwiTUFYX1RFWFRVUkVTIiwib25QcmVyZW5kZXIiLCJjaGVja01heElmU3RhdGVtZW50c0luU2hhZGVyIiwiaW5kaWNlcyIsIm5leHRUZXh0dXJlIiwiY3VycmVudFRleHR1cmUiLCJhdHRyaWJ1dGVCdWZmZXIiLCJnZXRBdHRyaWJ1dGVCdWZmZXIiLCJnZXRJbmRleEJ1ZmZlciIsImVsZW1lbnRzIiwiZHJhd0NhbGxzIiwicGFja2VkR2VvbWV0cmllcyIsInRvdWNoIiwiY3VycmVudEdyb3VwIiwiZ3JvdXBDb3VudCIsIlRJQ0siLCJzcHJpdGVCbGVuZE1vZGUiLCJfaWQiLCJwYWNrSW50ZXJsZWF2ZWRHZW9tZXRyeSIsIl9idWZmZXIiLCJfaW5kZXhCdWZmZXIiLCJzdGF0ZVN5c3RlbSIsImdyb3VwVGV4dHVyZUNvdW50Iiwicm91bmRlZFAyIiwicm91bmRlZFNpemVJbmRleCIsInJvdW5kZWRTaXplIiwiYUluZGV4IiwiaUluZGV4IiwicGFja2VkVmVydGljZXMiLCJpbmRpY2llcyIsInRleHR1cmVJZCIsImFyZ2IiLCJ0aW50IiwiRyIsInByZW11bHRpcGx5VGludCIsIl90aW50UkdCIiwiQmF0Y2hTaGFkZXJHZW5lcmF0b3IiLCJwcm9ncmFtQ2FjaGUiLCJkZWZhdWx0R3JvdXBDYWNoZSIsInNhbXBsZVZhbHVlcyIsInVTYW1wbGVycyIsImdlbmVyYXRlU2FtcGxlU3JjIiwidHJhbnNsYXRpb25NYXRyaXgiLCJCYXRjaEdlb21ldHJ5IiwiZGVmYXVsdFZlcnRleCQyIiwiZGVmYXVsdEZyYWdtZW50JDIiLCJCYXRjaFBsdWdpbkZhY3RvcnkiLCJkZWZhdWx0RnJhZ21lbnRUZW1wbGF0ZSIsImZyYWdtZW50IiwiQmF0Y2hQbHVnaW4iLCJQaXhlbGF0ZUZpbHRlciIsImxlZnRMZWRnZSIsInJpZ2h0TGVkZ2UiLCJoYXNXYWxrQm94IiwiQ29sbGlkZXIiLCJlZGdlQm94ZXMiLCJlZGdlQm94V2lkdGgiLCJlZGdlQm94SGVpZ2h0Iiwid2Fsa0JveEhlaWdodCIsInRyaWdnZXJjb2xsaWRlciIsImlzRWRnZUJveCIsImlzUmlnaHQiLCJ3YWxrQm94IiwiZGVidWdHcmFwaGljcyIsImRyYXdSZWN0IiwiYm94IiwiaXNFZGdlIiwiZW5kcG9pbnQiLCJkaXIiLCJjbG9zZXN0UG9pbnQiLCJkaXJWZWN0b3IiLCJsaW5lIiwid2FsbCIsIng0IiwieTQiLCJkZW4iLCJzZWdtZW50cyIsImVuZHBvaW50cyIsInJheXMiLCJjb3JuZXJSYXlzIiwiaGFuZ1JheSIsInNldERpciIsInRyaXMiLCJjb2xvciIsInJheURpciIsIm5ld1JheSIsImF1dG9EZXRlY3RSZW5kZXJlciIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInZlcnQiLCJmcmFnIiwibG9vayIsImF1eExvb2siLCJjYXN0IiwiY2xvc2VzdCIsInJlY29yZCIsInJheTEiLCJyYXkyIiwiYXV4Q2FzdCIsImNvbXBhcmUiLCJkcmF3Q2lyY2xlIiwiZHJhd1BvbHlnb24iLCJ0cmlhbmdsZSIsInRyaU1lc2giLCJNZXNoIiwiZmlyc3RUcmkiLCJmaXJzdFRyaU1lc2giLCJjYXN0U2VnbWVudHMiLCJ0b3JjaEZyYW1lcyIsInZpc2lvblNvdXJjZSIsIm51bVN0YXRpY1JheXMiLCJ2ZWwiLCJsaWdodENvbnRhaW5lciIsInRvcmNoIiwiVG9yY2hBbmltYXRpb24iLCJ0aW1lc2NhbGUiLCJkcmF3TWVzaCIsImZyYW1lcyIsImFuaW1hdGlvbiIsIkFuaW1hdGVkU3ByaXRlIiwiYW5pbWF0aW9uU3BlZWQiLCJnb3RvQW5kUGxheSIsIkRpc3NvbHZlVmFsdWUiLCJjb2xsaWRlciIsImlzQ2F0bmlwIiwic3ByaXRlUmVmZXJlbmNlIiwiRGlzc29sdmVWYWwiLCJ0aWxlU2l6ZSIsIm51bUxpZ2h0cyIsInRpbGVzZXQiLCJ0aWxlTWFwIiwiZnJlZUNlbGxzIiwiZ3JvdW5kVGlsZXMiLCJ0ZXJyYWluIiwibGlnaHRzIiwidG9yY2hTcHJpdGVzIiwidGlsZUNvbnRhaW5lciIsImJhY2tncm91bmRDb250YWluZXIiLCJ0b3JjaENvbnRhaW5lciIsImVkZ2VzIiwiU2V0IiwicG93ZXJ1cHMiLCJST1QiLCJSTkciLCJnZXRVbmlmb3JtIiwiZm9yRWFjaCIsImxpZ2h0IiwiY2FtZXJhQ2VudGVyIiwieFNwZWVkIiwieVNwZWVkIiwic3VwZXIiLCJjZWxsTWFwIiwiTWFwIiwiQ2VsbHVsYXIiLCJib3JuIiwic3Vydml2ZSIsInJhbmRvbWl6ZSIsImdlbmVyYXRlTGlnaHRzIiwiY2F2ZVdhbGxzIiwiZ2VuZXJhdGVDYXRuaXAiLCJiYWNrZ3JvdW5kVGlsaW5nIiwiYWRkRmVhdHVyZXMiLCJhZGRDYXRuaXAiLCJhZGRMaWdodHMiLCJwbGF5ZXJTcGF3biIsImRvZXNDb2xsaXNpb25zIiwidGlsZVR5cGUiLCJsZWZ0TmVpZ2hib3IiLCJyaWdodE5laWdoYm9yIiwidG9wTmVpZ2hib3IiLCJib3ROZWlnaGJvciIsIlRMTmVpZ2hib3IiLCJUUk5laWdoYm9yIiwiQlJOZWlnaGJvciIsIkJMTmVpZ2hib3IiLCJuZXdUaWxlIiwidmVydHMiLCJiZ1NjYWxlIiwiYmdTcHJpdGUiLCJUaWxpbmdTcHJpdGUiLCJ0aWxlU2NhbGUiLCJ0aWxlU3ByaXRlSW5pdCIsIm51bVNwYXducyIsImNhdG5pcCIsIk15VGltZXIiLCJpc1J1bm5pbmciLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiZWxhcHNlZFRpbWUiLCJjbG9jayIsImluaXRUaW1lIiwiZ2V0VGltZSIsImFuaW1hdGlvbk1hcCIsImxhc3RJbnB1dCIsInByZXZUaW1lU2NhbGUiLCJwcmV2VmVsIiwiYW5pbWF0aW9uQ29udGFpbmVyIiwibWF4VmVsIiwiZGVmYXVsdE1heFZlbCIsInRyaXBNYXhWZWwiLCJqdW1wVmVsIiwiZGVmYXVsdEp1bXBWZWwiLCJ0cmlwSnVtcFZlbCIsInVuU2NhbGVkSnVtcFZlbCIsInhWZWwiLCJpc0dyb3VuZGVkIiwiaW5TbGlkZSIsImluU2xvd0Rvd24iLCJqdW1wSW5wdXQiLCJpc0hhbmdpbmciLCJjYW1lcmFTbmFwcGVkIiwiYm91bmN5QnVnIiwiY29sbGlzaW9uVGltZXIiLCJ3YWxsSnVtcFRpbWVyIiwibGF0ZUp1bXBEdXJhdGlvbiIsImZhbGxEYW1hZ2VNUyIsImdyYXBwbGVNUyIsImZhbGxEYW1hZ2VWZWwiLCJpZGxlRnJhbWVDb3VudCIsIm1heElkbGVGcmFtZXMiLCJjbGltYlRyYW5zbGF0aW9uIiwiY2FtZXJhTW92ZW1lbnQiLCJhbmltYXRpb25zIiwiY3VycmVudEFuaW1hdGlvbiIsImNvbGxpZGVyV2lkdGgiLCJjb2xsaWRlckhlaWdodCIsImdldEVsYXBzZWRUaW1lIiwiaGFuZGxlRXZlbnQiLCJkaXJlY3Rpb24iLCJwbGF5aW5nIiwic2V0QW5pbWF0aW9uIiwiY3VycmVudEZyYW1lIiwic2V0RmxpcCIsImxvY2tDYW1lcmEiLCJzbG93VmVsb2NpdHkiLCJ3YWl0VGltZSIsImZhbGxBbmltYXRpb25UaW1lIiwiaXgiLCJpeSIsIm92ZXJyaWRlIiwiYWN0aXZlQW5pbSIsImxvY2FsU2NhbGUiLCJ0b3RhbEZyYW1lcyIsImxlZGdlUG9zaXRpb24iLCJpc1JpZ2h0TGVkZ2UiLCJ4Q2xpbWJPZmZzZXQiLCJoYW5nUG9zaXRpb24iLCJnZXRDbGltYkRpc3RhbmNlIiwiS0JDb250cm9sbGVyIiwiY2F0UGxheWVyIiwiY2F0Qm9keSIsImdhbWVUaWNrZXIiLCJjYW1lcmEiLCJwYXVzZU1lbnUiLCJyaWdodERvd24iLCJsZWZ0RG93biIsIm9ua2V5ZG93biIsIm15RXZlbnQiLCJrZXlDb2RlIiwiaXNPcGVuIiwiYWRkVHJhdW1hIiwib25DbGljayIsIm9ua2V5dXAiLCJTaGFkb3dNYXAiLCJzaGFwZXIiLCJnZW5lcmF0ZVRleHR1cmUiLCJmb2N1cyIsInBsYXllclBvc2l0aW9uIiwidGFyZ2V0UG9zIiwiYW5nbGVPZmZzZXQiLCJtYXhPZmZzZXQiLCJtYXhBbmdsZU9mZnNldCIsImZsaXBPZmZzZXQiLCJzaGFrZSIsInRyYXVtYSIsImJhc2VTZWVkIiwieE5vaXNlIiwieU5vaXNlIiwick5vaXNlIiwibm9pc2VJbmNyZW1lbnQiLCJzaW1wbGV4U2hha2UiLCJ0YXJnZXRQb3NpdGlvbiIsImFzeW1wdG90aWNBdmVyYWdlIiwid2VpZ2h0IiwiaW52ZXJzZVdlaWdodCIsIlBsYXllckJ1dHRvbiIsInByZXNzZWQiLCJpbnRlcmFjdGlvblJlY3RhbmdsZSIsImV2ZW50Q2FsbGJhY2siLCJwYXVzZUNhbGxiYWNrIiwiaW5QYXVzZSIsInN3YXBCdXR0b25zIiwib25FbmQiLCJvblByZXNzIiwibmV3UG9zaXRpb24iLCJCdXR0b25Db250cm9sbGVyIiwiYnV0dG9uRnJhbWVzIiwicGxheWVyUG9zIiwiY2FudmFzQ29udGV4dCIsImNsaWVudFRvcExlZnQiLCJoYW5kbGVUb3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJidXR0b25Db250YWluZXIiLCJidXR0b25zIiwibGVmdEJ1dHRvbk9mZnNldCIsInJpZ2h0QnV0dG9uT2Zmc2V0IiwidXBCdXR0b25PZmZzZXQiLCJsZWZ0QnV0dG9uIiwidG91Y2hlcyIsInRvdWNoSW5CdXR0b24iLCJjYW1lcmFQb3MiLCJDb2xvclJlcGxhY2VGaWx0ZXIiLCJvcmlnaW5hbENvbG9yIiwibmV3Q29sb3IiLCJlcHNpbG9uIiwiX29yaWdpbmFsQ29sb3IiLCJfbmV3Q29sb3IiLCJidXR0b25UZXh0dXJlcyIsImNvbG9yTWFwcyIsInBhbGV0dGVGaWx0ZXIiLCJwbGF5ZXJBbmltYXRpb25zIiwiY2F0bmlwVGlja2VyIiwiaW5QYWxldHRlTWVudSIsImluT3B0aW9uc01lbnUiLCJ0b2dnbGVCdXR0b24iLCJQYXVzZVRvZ2dsZUJ1dHRvbiIsImNhbWVyYVNoYWtlIiwibWVudUNvbG9ycyIsInBhdXNlZFRleHQiLCJzdGF0aWNUZXh0IiwicGF1c2VUaWNrZXIiLCJUaWNrZXIiLCJwYXVzZUJsaW5rZXIiLCJQQVVTRV9CTElOS0VSX0lOVEVSVkFMIiwicGF1c2VCbGlua2VyTGFnIiwidG9nZ2xlQnV0dG9uT2Zmc2V0IiwibWFpbk1lbnUiLCJNZW51TGlzdCIsInBhbGV0dGVNZW51IiwiUGFsZXR0ZU1lbnVMaXN0Iiwib3B0aW9uc01lbnUiLCJPcHRpb25zTWVudSIsImFjdGl2ZU1lbnUiLCJzdWJNZW51cyIsInN1Yk1lbnUiLCJkaXNwbGF5Q29udGFpbmVyIiwiY29sb3JTd2FwcGVyIiwiY2hhbmdlUGFsZXR0ZSIsIm9uVG9nZ2xlIiwibm9VcGRhdGUiLCJjdXJyZW50S2V5Iiwib25SZXJvbGwiLCJ0b2dnbGVQYWxsZXRlTWVudSIsInRvZ2dsZU9wdGlvbnNNZW51IiwiaW5hY3RpdmVTcHJpdGUiLCJ0ZXh0IiwiYWN0aXZlU3ByaXRlIiwidXBkYXRlT3B0aW9ucyIsInJlbG9hZCIsIlBhbGV0dGUiLCJuZXdTdHlsZSIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsIm9wdGlvbiIsIlRleHQiLCJwYXVzZVRleHQiLCJtb3ZlQnV0dG9ucyIsIm1vdmVFbGVtZW50cyIsIk1lbnVMaXN0RWxlbWVudCIsImlzUGF1c2VNZW51T3BlbiIsImtlZXBJbmRleCIsInN0eWxlMSIsIkRpc3NvbHZlRmlsdGVyIiwibWFwU2FtcGxlciIsImZpbHRlck1hdHJpeCIsIkJlemllckRpc3BsYWNlbWVudEZpbHRlciIsImJlemllclZhbCIsImxlblgiLCJsZW5ZIiwiQmV6aWVyQ3VydmUiLCJwbGF5ZXIiLCJwbGF5ZXJEZWZhdWx0VmVsIiwicGxheWVyVHJpcFZlbCIsInBsYXllckRlZmF1bHRKdW1wIiwicGxheWVyVHJpcEp1bXAiLCJjYW1lcmFSb3RhdGlvbiIsImJlemllclRpbWUiLCJmaWx0ZXJUaW1lIiwiZmlsdGVyVHJhbnNpdGlvbk1TIiwiZmlsdGVyU3RhdGljTVMiLCJkaXNwbGFjZW1lbnRJbmNyZW1lbnQiLCJiZXppZXJJbmNyZW1lbnQiLCJ0aWNrZXJNUyIsIm9uVGljayIsImJlemllckN1cnZlIiwicG93ZXJ1cFRpbWVyIiwiZm9yZWdyb3VuZE5vaXNlIiwiUkVQRUFUIiwiYmFja2dyb3VuZE5vaXNlIiwiZm9yZWdyb3VuZEZpbHRlciIsImJhY2tncm91bmRGaWx0ZXIiLCJiYWRGaWx0ZXJTb2x1dGlvbiIsIm1heENhdG5pcEZsb2F0T2Zmc2V0IiwiZmxvYXRUaW1lc2NhbGUiLCJmbG9hdFRpbWUiLCJjYXROaXBPZmZzZXQiLCJwb3dlcnVwIiwiZm9yZWdyb3VuZEZpbHRlcnMiLCJiYWNrZ3JvdW5kRmlsdGVycyIsImJlemllclkiLCJnZXRZIiwiRml4ZWRVcGRhdGUiLCJmb3JlZ3JvdW5kQ29udGFpbmVyIiwiUGFsZXR0ZVN3YXBGaWx0ZXIiLCJteUdhbWUiLCJhcHAiLCJERUZBVUxUIiwid29ybGRDb250YWluZXIiLCJwYXVzZU11c2ljIiwicGFsZXR0ZUluZGV4IiwicGFsZXR0ZVN3YXAiLCJwYWxldHRlRnJhZyIsInBhbGV0dGVUZXh0dXJlcyIsImRpc3NvbHZlU3ByaXRlIiwiZGlzc29sdmVTaGFkZXIiLCJiZXppZXJEaXNwbGFjZW1lbnRTaGFkZXIiLCJkaXNwbGFjZW1lbnRTaGFkZXIiLCJ1cGRhdGVMYWciLCJsaWdodFNoYWRlciIsImFsbExpZ2h0cyIsImNhdEFuaW1hdGlvbnMiLCJjYXRuaXBUcmlwIiwibWVudUJ1dHRvbnMiLCJidXR0b25Db250cm9sbGVyIiwiYXR0YWNoQ29udHJvbGxlciIsIktCSW5wdXQiLCJvbldpbmRvd1Jlc2l6ZSIsImNvbGxpc2lvbkV2ZW50U2V0dXAiLCJzdGFnZSIsInNjcmVlbiIsImluaXRMYXllcnMiLCJsb29wIiwicGFyYWxsYXhTY3JvbGwiLCJzaGFkb3dNYXAiLCJpbldhbGtCb3giLCJjYXRDb2xsaXNpb24iLCJwaHlzaWNzQ29sbGlzaW9ucyIsIm90aGVyQm9keSIsInBhaXIiLCJpbXBhY3RWZWwiLCJzdGFydExlZGdlQ2xpbWIiLCJzbGlkZUFuaW1hdGlvbiIsImZvbnRzIiwiY2FsbGJhY2siLCJsb2FkZWRGb250cyIsIm5vZGUiLCJpbm5lckhUTUwiLCJmb250VmFyaWFudCIsImZvbnRTdHlsZSIsImZvbnRXZWlnaHQiLCJsZXR0ZXJTcGFjaW5nIiwiaW50ZXJ2YWwiLCJvZmZzZXRXaWR0aCIsImNoZWNrRm9udCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsIndhaXRGb3JXZWJmb250cyIsIkFwcGxpY2F0aW9uIiwiZGlzcGxheSIsImdldEVsZW1lbnRCeUlkIiwiY3VzdG9tTG9hZGVyIiwic2V0dXBGdW5jdGlvbiIsImRvbmVMb2FkaW5nIiwibG9hZGVyRmlsZXMiLCJvbkxvYWQiLCJsb2FkU2hhZGVycyIsImxvYWREaXNzb2x2ZVNoYWRlciIsImxvYWREaXNwbGFjZW1lbnRTaGFkZXIiLCJsb2FkUGFsZXR0ZUZyYWciLCJsb2FkUGFsZXR0ZXMiLCJjYXRuaXBGaWx0ZXIiLCJsb2FkRmlsdGVycyIsImFuaW1hdGlvbnNJbml0IiwibG9hZFRpbGVzIiwibG9hZFRvcmNoIiwibG9hZEJ1dHRvbnMiLCJsb2FkTWVudSIsImxvYWRTb3VuZCIsIm1lbnVGb250IiwibG9hZEZvbnQiLCJsb2FkU3ByaXRlIiwiZnJhbWVDb3VudCIsImRvZXNMb29wIiwia2V5U3RyaW5nIiwibmV3U3ByaXRlIiwiQVJDQURFQ0xBU1NJQyIsIm9udG91Y2hlbmQiLCJvbnRvdWNobW92ZSIsIm9udG91Y2hzdGFydCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFP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RUFBRyxFQUFHLEdBQ3pFLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDekUsQ0FDSSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBRUosQ0FDSSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLElBR1JyM0IsRUFBUW0yQixZQUFjLENBQ2xCLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxHQUNDLEVBQ0QsRUFDQSxHQUNDLEVBQ0QsR0FDQyxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBRUxuMkIsRUFBUWkzQixZQUFjLEVBQ2pCLEdBQ0QsRUFDQSxHQUNDLEVBQ0QsR0FDQSxHQUNDLEVBQ0QsRUFDQSxHQUNBLEdBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQSxFQUNBLEVBQ0EsRUFDQSxJQUNDLElBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDRCxHQUNDLEdBQ0EsRUFDRCxHQUNBLElBQ0MsRUFDRCxFQUNBLEdBQ0MsR0FDRCxFQUNBLEdBQ0MsRUFDRCxJQUNDLEdBQ0QsR0FDQyxHQUNBLEVBQ0QsSUFDQyxHQUNBLEVBQ0QsR0FDQyxHQUNELEdBQ0EsR0FDQyxFQUNELEVBQ0EsSUFDQyxFQUNELEVBQ0EsR0FDQyxJQUNBLElBQ0EsR0FDQSxHQUNBLEdBQ0EsSUFDQSxHQUNBLEdBQ0EsR0FDQSxHQUNELElBQ0MsR0FDQSxFQUNELEdBQ0MsSUFDQSxFQUNELEdBQ0MsR0FDQSxJQUVMajNCLEVBQVE4M0IsWUFBYyxDQUNsQixFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsR0FDQyxHQUNBLEVBQ0QsRUFDQSxHQUNDLEdBQ0EsRUFDRCxFQUNBLEdBQ0MsR0FDQSxFQUNELEVBQ0EsR0FDQyxHQUNBLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsR0FDQyxFQUNELEdBQ0MsRUFDRCxHQUNDLEVBQ0QsR0FDQyxFQUNELEdBQ0MsRUFDRCxHQUNDLEVBQ0QsR0FDQyxFQUNELEdBQ0MsRUFDRCxHQUNDLEVBQ0QsRUFDQSxHQUNDLEdBQ0EsRUFDRCxFQUNBLEdBQ0MsR0FDQSxFQUNELEVBQ0EsR0FDQyxHQUNBLEVBQ0QsRUFDQSxHQUNDLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDQSxFQUNELEdBQ0MsR0FDQSxHQUNBLEVBQ0QsR0FDQyxHQUNBLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDQSxFQUNELEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEdBQ0MsR0FDQSxFQUNELEVBQ0EsR0FDQyxHQUNBLEVBQ0QsRUFDQSxHQUNDLEdBQ0EsRUFDRCxFQUNBLEdBQ0MsR0FDQSxFQUNELEVBQ0EsR0FDQyxFQUNELEdBQ0MsRUFDRCxHQUNDLEVBQ0QsR0FDQyxFQUNELEdBQ0MsRUFDRCxHQUNDLEVBQ0QsR0FDQyxFQUNELEdBQ0MsRUFDRCxHQUNDLEdBQ0EsR0FDQSxFQUNELEdBQ0MsR0FDQSxHQUNBLEVBQ0QsR0FDQyxHQUNBLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDQSxFQUNELEdBQ0MsRUFDRCxFQUNBLEdBQ0MsR0FDQSxFQUNELEVBQ0EsR0FDQyxHQUNBLEVBQ0QsRUFDQSxHQUNDLEdBQ0EsRUFDRCxFQUNBLEdBQ0MsR0FDQSxHQUNBLEVBQ0QsR0FDQyxHQUNBLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDQSxFQUNELEdBQ0MsR0FDQSxHQUNBLEVBQ0QsR0FDQyxHQUNBLEVBQ0QsR0FDQyxHQUNBLEdBQ0EsRUFDRCxHQUNDLEdBQ0EsR0FDQSxFQUNELEdBQ0MsR0FDQSxHQUNBLEVBQ0QsR0FDQyxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUVMOTNCLEVBQVFnMUIsY0FBZ0IsQ0FDcEIsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEdBRUpoMUIsRUFBUXcyQixjQUFnQixDQUNwQixFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEdBQ0EsS0FDQSxHQUNBLEtBQ0EsR0FDQSxLQUNBLEdBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsR0FFSngyQixFQUFRczNCLGNBQWdCLENBQ3BCLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsR0FDQSxFQUNBLEdBQ0EsRUFDQSxHQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxLQUNBLEVBQ0EsS0FDQSxFQUNBLEtBQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsTUFDQSxFQUNBLE1BQ0EsRUFDQSxNQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEVBQ0EsT0FDQSxFQUNBLE9BQ0EsRUFDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxNQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLEdBQ0EsT0FDQSxHQUNBLE9BQ0EsR0FDQSxPQUNBLElBRUp0M0IsRUFBUXkwQixJQUFNLENBQ1YsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBRUp6MEIsRUFBUXMyQixJQUFNLENBQ1YsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEdBRUp0MkIsRUFBUW8zQixJQUFNLENBQ1YsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsR0FDQyxFQUNELEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxHQUNDLEVBQ0QsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0MsRUFDRCxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQ0Ms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a0IsUUFBUW9zQixLQUFLLHNCQUNuRSxDQUFDLEtBQU0sQ0FBQ3R0QixLQUFLa0IsUUFBUW9zQixLQUFLLGlCQUFrQnR0QixLQUFLa0IsUUFBUW9zQixLQUFLLHFCQUk5RixXQU1JLE9BTG1CLElBQUk0L0IsSUFBSSxDQUFDLENBQUMsUUFBU2x0RCxLQUFLa0IsUUFBUW9zQixLQUFLLGNBQzVCLENBQUMsT0FBUXR0QixLQUFLa0IsUUFBUW9zQixLQUFLLG9CQUMzQixDQUFDLGNBQWV0dEIsS0FBS2tCLFFBQVFvc0IsS0FBSyxzQkFNbEUsWUFDSSxPQUFPN1QsRUFBVW9rRCxXQUFXdC9ELEtBSWhDLFdBQ0ksT0FBT2tiLEVBQVVpcEQsZ0IrQmhOekIsV0FDRWpGLEdBQVMsSUFBSSxHQUFLd0QsR0FBYyxHQUFLNzBFLE1BNEJyQ2lDLFNBQVMyeUUsZUFBZSxZQUFZMkIsV0FBY3RyRixJQUNoREEsRUFBRTJYLGtCQUVKWCxTQUFTMnlFLGVBQWUsWUFBWTRCLFlBQWV2ckYsSUFDakRBLEVBQUUyWCxrQkFFSlgsU0FBUzJ5RSxlQUFlLFlBQVk2QixhQUFnQnhyRixJQUNsREEsRUFBRTJYLG1CQXZDZ0NuWSxVQUFLIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxNCk7XG4iLCIvKipcbiogbWF0dGVyLWpzIDAuMTQuMiBieSBAbGlhYnJ1IDIwMTgtMDYtMTFcbiogaHR0cDovL2JybS5pby9tYXR0ZXItanMvXG4qIExpY2Vuc2UgTUlUXG4qL1xuIWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPWUoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sZSk7ZWxzZXt2YXIgdDt0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcyx0Lk1hdHRlcj1lKCl9fShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLG8pe2Z1bmN0aW9uIGkocyxhKXtpZighbltzXSl7aWYoIXRbc10pe3ZhciBsPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWEmJmwpcmV0dXJuIGwocywhMCk7aWYocilyZXR1cm4gcihzLCEwKTt2YXIgYz1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK3MrXCInXCIpO3Rocm93IGMuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixjfXZhciBkPW5bc109e2V4cG9ydHM6e319O3Rbc11bMF0uY2FsbChkLmV4cG9ydHMsZnVuY3Rpb24oZSl7cmV0dXJuIGkodFtzXVsxXVtlXXx8ZSl9LGQsZC5leHBvcnRzLGUsdCxuLG8pfXJldHVybiBuW3NdLmV4cG9ydHN9Zm9yKHZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUscz0wO3M8by5sZW5ndGg7cysrKWkob1tzXSk7cmV0dXJuIGl9cmV0dXJuIGV9KCkoezE6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9bzt2YXIgaT1lKFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIikscj1lKFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCIpLHM9ZShcIi4uL2NvcmUvU2xlZXBpbmdcIiksYT0oZShcIi4uL3JlbmRlci9SZW5kZXJcIiksZShcIi4uL2NvcmUvQ29tbW9uXCIpKSxsPWUoXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIiksYz1lKFwiLi4vZ2VvbWV0cnkvQXhlc1wiKTshZnVuY3Rpb24oKXtvLl9pbmVydGlhU2NhbGU9NCxcbm8uX25leHRDb2xsaWRpbmdHcm91cElkPTEsby5fbmV4dE5vbkNvbGxpZGluZ0dyb3VwSWQ9LTEsby5fbmV4dENhdGVnb3J5PTEsby5jcmVhdGU9ZnVuY3Rpb24odCl7dmFyIG49e2lkOmEubmV4dElkKCksdHlwZTpcImJvZHlcIixsYWJlbDpcIkJvZHlcIixwYXJ0czpbXSxwbHVnaW46e30sYW5nbGU6MCx2ZXJ0aWNlczppLmZyb21QYXRoKFwiTCAwIDAgTCA0MCAwIEwgNDAgNDAgTCAwIDQwXCIpLHBvc2l0aW9uOnt4OjAseTowfSxmb3JjZTp7eDowLHk6MH0sdG9ycXVlOjAscG9zaXRpb25JbXB1bHNlOnt4OjAseTowfSxjb25zdHJhaW50SW1wdWxzZTp7eDowLHk6MCxhbmdsZTowfSx0b3RhbENvbnRhY3RzOjAsc3BlZWQ6MCxhbmd1bGFyU3BlZWQ6MCx2ZWxvY2l0eTp7eDowLHk6MH0sYW5ndWxhclZlbG9jaXR5OjAsaXNTZW5zb3I6ITEsaXNTdGF0aWM6ITEsaXNTbGVlcGluZzohMSxtb3Rpb246MCxzbGVlcFRocmVzaG9sZDo2MCxkZW5zaXR5Oi4wMDEscmVzdGl0dXRpb246MCxmcmljdGlvbjouMSxmcmljdGlvblN0YXRpYzouNSxmcmljdGlvbkFpcjouMDEsY29sbGlzaW9uRmlsdGVyOntjYXRlZ29yeToxLG1hc2s6NDI5NDk2NzI5NSxncm91cDowfSxzbG9wOi4wNSx0aW1lU2NhbGU6MSxyZW5kZXI6e3Zpc2libGU6ITAsb3BhY2l0eToxLHNwcml0ZTp7eFNjYWxlOjEseVNjYWxlOjEseE9mZnNldDowLHlPZmZzZXQ6MH0sbGluZVdpZHRoOjB9fSxvPWEuZXh0ZW5kKG4sdCk7cmV0dXJuIGUobyx0KSxvfSxvLm5leHRHcm91cD1mdW5jdGlvbihlKXtyZXR1cm4gZT9vLl9uZXh0Tm9uQ29sbGlkaW5nR3JvdXBJZC0tOm8uX25leHRDb2xsaWRpbmdHcm91cElkKyt9LG8ubmV4dENhdGVnb3J5PWZ1bmN0aW9uKCl7cmV0dXJuIG8uX25leHRDYXRlZ29yeT1vLl9uZXh0Q2F0ZWdvcnk8PDEsby5fbmV4dENhdGVnb3J5fTt2YXIgZT1mdW5jdGlvbihlLHQpe3Q9dHx8e30sby5zZXQoZSx7Ym91bmRzOmUuYm91bmRzfHxsLmNyZWF0ZShlLnZlcnRpY2VzKSxcbnBvc2l0aW9uUHJldjplLnBvc2l0aW9uUHJldnx8ci5jbG9uZShlLnBvc2l0aW9uKSxhbmdsZVByZXY6ZS5hbmdsZVByZXZ8fGUuYW5nbGUsdmVydGljZXM6ZS52ZXJ0aWNlcyxwYXJ0czplLnBhcnRzfHxbZV0saXNTdGF0aWM6ZS5pc1N0YXRpYyxpc1NsZWVwaW5nOmUuaXNTbGVlcGluZyxwYXJlbnQ6ZS5wYXJlbnR8fGV9KSxpLnJvdGF0ZShlLnZlcnRpY2VzLGUuYW5nbGUsZS5wb3NpdGlvbiksYy5yb3RhdGUoZS5heGVzLGUuYW5nbGUpLGwudXBkYXRlKGUuYm91bmRzLGUudmVydGljZXMsZS52ZWxvY2l0eSksby5zZXQoZSx7YXhlczp0LmF4ZXN8fGUuYXhlcyxhcmVhOnQuYXJlYXx8ZS5hcmVhLG1hc3M6dC5tYXNzfHxlLm1hc3MsaW5lcnRpYTp0LmluZXJ0aWF8fGUuaW5lcnRpYX0pO3ZhciBuPWUuaXNTdGF0aWM/XCIjMmUyYjQ0XCI6YS5jaG9vc2UoW1wiIzAwNkJBNlwiLFwiIzA0OTZGRlwiLFwiI0ZGQkM0MlwiLFwiI0Q4MTE1OVwiLFwiIzhGMkQ1NlwiXSk7ZS5yZW5kZXIuZmlsbFN0eWxlPWUucmVuZGVyLmZpbGxTdHlsZXx8bixlLnJlbmRlci5zdHJva2VTdHlsZT1lLnJlbmRlci5zdHJva2VTdHlsZXx8XCIjMDAwXCIsZS5yZW5kZXIuc3ByaXRlLnhPZmZzZXQrPS0oZS5ib3VuZHMubWluLngtZS5wb3NpdGlvbi54KS8oZS5ib3VuZHMubWF4LngtZS5ib3VuZHMubWluLngpLGUucmVuZGVyLnNwcml0ZS55T2Zmc2V0Kz0tKGUuYm91bmRzLm1pbi55LWUucG9zaXRpb24ueSkvKGUuYm91bmRzLm1heC55LWUuYm91bmRzLm1pbi55KX07by5zZXQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpO1wic3RyaW5nXCI9PXR5cGVvZiB0JiYoaT10LHQ9e30sdFtpXT1uKTtmb3IoaSBpbiB0KWlmKG49dFtpXSx0Lmhhc093blByb3BlcnR5KGkpKXN3aXRjaChpKXtjYXNlXCJpc1N0YXRpY1wiOm8uc2V0U3RhdGljKGUsbik7YnJlYWs7Y2FzZVwiaXNTbGVlcGluZ1wiOnMuc2V0KGUsbik7YnJlYWs7Y2FzZVwibWFzc1wiOm8uc2V0TWFzcyhlLG4pO2JyZWFrO2Nhc2VcImRlbnNpdHlcIjpvLnNldERlbnNpdHkoZSxuKVxuO2JyZWFrO2Nhc2VcImluZXJ0aWFcIjpvLnNldEluZXJ0aWEoZSxuKTticmVhaztjYXNlXCJ2ZXJ0aWNlc1wiOm8uc2V0VmVydGljZXMoZSxuKTticmVhaztjYXNlXCJwb3NpdGlvblwiOm8uc2V0UG9zaXRpb24oZSxuKTticmVhaztjYXNlXCJhbmdsZVwiOm8uc2V0QW5nbGUoZSxuKTticmVhaztjYXNlXCJ2ZWxvY2l0eVwiOm8uc2V0VmVsb2NpdHkoZSxuKTticmVhaztjYXNlXCJhbmd1bGFyVmVsb2NpdHlcIjpvLnNldEFuZ3VsYXJWZWxvY2l0eShlLG4pO2JyZWFrO2Nhc2VcInBhcnRzXCI6by5zZXRQYXJ0cyhlLG4pO2JyZWFrO2RlZmF1bHQ6ZVtpXT1ufX0sby5zZXRTdGF0aWM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDtuPGUucGFydHMubGVuZ3RoO24rKyl7dmFyIG89ZS5wYXJ0c1tuXTtvLmlzU3RhdGljPXQsdD8oby5fb3JpZ2luYWw9e3Jlc3RpdHV0aW9uOm8ucmVzdGl0dXRpb24sZnJpY3Rpb246by5mcmljdGlvbixtYXNzOm8ubWFzcyxpbmVydGlhOm8uaW5lcnRpYSxkZW5zaXR5Om8uZGVuc2l0eSxpbnZlcnNlTWFzczpvLmludmVyc2VNYXNzLGludmVyc2VJbmVydGlhOm8uaW52ZXJzZUluZXJ0aWF9LG8ucmVzdGl0dXRpb249MCxvLmZyaWN0aW9uPTEsby5tYXNzPW8uaW5lcnRpYT1vLmRlbnNpdHk9MS8wLG8uaW52ZXJzZU1hc3M9by5pbnZlcnNlSW5lcnRpYT0wLG8ucG9zaXRpb25QcmV2Lng9by5wb3NpdGlvbi54LG8ucG9zaXRpb25QcmV2Lnk9by5wb3NpdGlvbi55LG8uYW5nbGVQcmV2PW8uYW5nbGUsby5hbmd1bGFyVmVsb2NpdHk9MCxvLnNwZWVkPTAsby5hbmd1bGFyU3BlZWQ9MCxvLm1vdGlvbj0wKTpvLl9vcmlnaW5hbCYmKG8ucmVzdGl0dXRpb249by5fb3JpZ2luYWwucmVzdGl0dXRpb24sby5mcmljdGlvbj1vLl9vcmlnaW5hbC5mcmljdGlvbixvLm1hc3M9by5fb3JpZ2luYWwubWFzcyxvLmluZXJ0aWE9by5fb3JpZ2luYWwuaW5lcnRpYSxvLmRlbnNpdHk9by5fb3JpZ2luYWwuZGVuc2l0eSxcbm8uaW52ZXJzZU1hc3M9by5fb3JpZ2luYWwuaW52ZXJzZU1hc3Msby5pbnZlcnNlSW5lcnRpYT1vLl9vcmlnaW5hbC5pbnZlcnNlSW5lcnRpYSxkZWxldGUgby5fb3JpZ2luYWwpfX0sby5zZXRNYXNzPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5pbmVydGlhLyhlLm1hc3MvNik7ZS5pbmVydGlhPW4qKHQvNiksZS5pbnZlcnNlSW5lcnRpYT0xL2UuaW5lcnRpYSxlLm1hc3M9dCxlLmludmVyc2VNYXNzPTEvZS5tYXNzLGUuZGVuc2l0eT1lLm1hc3MvZS5hcmVhfSxvLnNldERlbnNpdHk9ZnVuY3Rpb24oZSx0KXtvLnNldE1hc3MoZSx0KmUuYXJlYSksZS5kZW5zaXR5PXR9LG8uc2V0SW5lcnRpYT1mdW5jdGlvbihlLHQpe2UuaW5lcnRpYT10LGUuaW52ZXJzZUluZXJ0aWE9MS9lLmluZXJ0aWF9LG8uc2V0VmVydGljZXM9ZnVuY3Rpb24oZSx0KXt0WzBdLmJvZHk9PT1lP2UudmVydGljZXM9dDplLnZlcnRpY2VzPWkuY3JlYXRlKHQsZSksZS5heGVzPWMuZnJvbVZlcnRpY2VzKGUudmVydGljZXMpLGUuYXJlYT1pLmFyZWEoZS52ZXJ0aWNlcyksby5zZXRNYXNzKGUsZS5kZW5zaXR5KmUuYXJlYSk7dmFyIG49aS5jZW50cmUoZS52ZXJ0aWNlcyk7aS50cmFuc2xhdGUoZS52ZXJ0aWNlcyxuLC0xKSxvLnNldEluZXJ0aWEoZSxvLl9pbmVydGlhU2NhbGUqaS5pbmVydGlhKGUudmVydGljZXMsZS5tYXNzKSksaS50cmFuc2xhdGUoZS52ZXJ0aWNlcyxlLnBvc2l0aW9uKSxsLnVwZGF0ZShlLmJvdW5kcyxlLnZlcnRpY2VzLGUudmVsb2NpdHkpfSxvLnNldFBhcnRzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtmb3IodD10LnNsaWNlKDApLGUucGFydHMubGVuZ3RoPTAsZS5wYXJ0cy5wdXNoKGUpLGUucGFyZW50PWUscj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgcz10W3JdO3MhPT1lJiYocy5wYXJlbnQ9ZSxlLnBhcnRzLnB1c2gocykpfWlmKDEhPT1lLnBhcnRzLmxlbmd0aCl7aWYobj12b2lkIDA9PT1ufHxuKXt2YXIgYT1bXVxuO2ZvcihyPTA7cjx0Lmxlbmd0aDtyKyspYT1hLmNvbmNhdCh0W3JdLnZlcnRpY2VzKTtpLmNsb2Nrd2lzZVNvcnQoYSk7dmFyIGw9aS5odWxsKGEpLGM9aS5jZW50cmUobCk7by5zZXRWZXJ0aWNlcyhlLGwpLGkudHJhbnNsYXRlKGUudmVydGljZXMsYyl9dmFyIGQ9by5fdG90YWxQcm9wZXJ0aWVzKGUpO2UuYXJlYT1kLmFyZWEsZS5wYXJlbnQ9ZSxlLnBvc2l0aW9uLng9ZC5jZW50cmUueCxlLnBvc2l0aW9uLnk9ZC5jZW50cmUueSxlLnBvc2l0aW9uUHJldi54PWQuY2VudHJlLngsZS5wb3NpdGlvblByZXYueT1kLmNlbnRyZS55LG8uc2V0TWFzcyhlLGQubWFzcyksby5zZXRJbmVydGlhKGUsZC5pbmVydGlhKSxvLnNldFBvc2l0aW9uKGUsZC5jZW50cmUpfX0sby5zZXRQb3NpdGlvbj1mdW5jdGlvbihlLHQpe3ZhciBuPXIuc3ViKHQsZS5wb3NpdGlvbik7ZS5wb3NpdGlvblByZXYueCs9bi54LGUucG9zaXRpb25QcmV2LnkrPW4ueTtmb3IodmFyIG89MDtvPGUucGFydHMubGVuZ3RoO28rKyl7dmFyIHM9ZS5wYXJ0c1tvXTtzLnBvc2l0aW9uLngrPW4ueCxzLnBvc2l0aW9uLnkrPW4ueSxpLnRyYW5zbGF0ZShzLnZlcnRpY2VzLG4pLGwudXBkYXRlKHMuYm91bmRzLHMudmVydGljZXMsZS52ZWxvY2l0eSl9fSxvLnNldEFuZ2xlPWZ1bmN0aW9uKGUsdCl7dmFyIG49dC1lLmFuZ2xlO2UuYW5nbGVQcmV2Kz1uO2Zvcih2YXIgbz0wO288ZS5wYXJ0cy5sZW5ndGg7bysrKXt2YXIgcz1lLnBhcnRzW29dO3MuYW5nbGUrPW4saS5yb3RhdGUocy52ZXJ0aWNlcyxuLGUucG9zaXRpb24pLGMucm90YXRlKHMuYXhlcyxuKSxsLnVwZGF0ZShzLmJvdW5kcyxzLnZlcnRpY2VzLGUudmVsb2NpdHkpLG8+MCYmci5yb3RhdGVBYm91dChzLnBvc2l0aW9uLG4sZS5wb3NpdGlvbixzLnBvc2l0aW9uKX19LG8uc2V0VmVsb2NpdHk9ZnVuY3Rpb24oZSx0KXtlLnBvc2l0aW9uUHJldi54PWUucG9zaXRpb24ueC10LngsZS5wb3NpdGlvblByZXYueT1lLnBvc2l0aW9uLnktdC55LFxuZS52ZWxvY2l0eS54PXQueCxlLnZlbG9jaXR5Lnk9dC55LGUuc3BlZWQ9ci5tYWduaXR1ZGUoZS52ZWxvY2l0eSl9LG8uc2V0QW5ndWxhclZlbG9jaXR5PWZ1bmN0aW9uKGUsdCl7ZS5hbmdsZVByZXY9ZS5hbmdsZS10LGUuYW5ndWxhclZlbG9jaXR5PXQsZS5hbmd1bGFyU3BlZWQ9TWF0aC5hYnMoZS5hbmd1bGFyVmVsb2NpdHkpfSxvLnRyYW5zbGF0ZT1mdW5jdGlvbihlLHQpe28uc2V0UG9zaXRpb24oZSxyLmFkZChlLnBvc2l0aW9uLHQpKX0sby5yb3RhdGU9ZnVuY3Rpb24oZSx0LG4pe2lmKG4pe3ZhciBpPU1hdGguY29zKHQpLHI9TWF0aC5zaW4odCkscz1lLnBvc2l0aW9uLngtbi54LGE9ZS5wb3NpdGlvbi55LW4ueTtvLnNldFBvc2l0aW9uKGUse3g6bi54KyhzKmktYSpyKSx5Om4ueSsocypyK2EqaSl9KSxvLnNldEFuZ2xlKGUsZS5hbmdsZSt0KX1lbHNlIG8uc2V0QW5nbGUoZSxlLmFuZ2xlK3QpfSxvLnNjYWxlPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBzPTAsYT0wO3I9cnx8ZS5wb3NpdGlvbjtmb3IodmFyIGQ9MDtkPGUucGFydHMubGVuZ3RoO2QrKyl7dmFyIHU9ZS5wYXJ0c1tkXTtpLnNjYWxlKHUudmVydGljZXMsdCxuLHIpLHUuYXhlcz1jLmZyb21WZXJ0aWNlcyh1LnZlcnRpY2VzKSx1LmFyZWE9aS5hcmVhKHUudmVydGljZXMpLG8uc2V0TWFzcyh1LGUuZGVuc2l0eSp1LmFyZWEpLGkudHJhbnNsYXRlKHUudmVydGljZXMse3g6LXUucG9zaXRpb24ueCx5Oi11LnBvc2l0aW9uLnl9KSxvLnNldEluZXJ0aWEodSxvLl9pbmVydGlhU2NhbGUqaS5pbmVydGlhKHUudmVydGljZXMsdS5tYXNzKSksaS50cmFuc2xhdGUodS52ZXJ0aWNlcyx7eDp1LnBvc2l0aW9uLngseTp1LnBvc2l0aW9uLnl9KSxkPjAmJihzKz11LmFyZWEsYSs9dS5pbmVydGlhKSx1LnBvc2l0aW9uLng9ci54Kyh1LnBvc2l0aW9uLngtci54KSp0LHUucG9zaXRpb24ueT1yLnkrKHUucG9zaXRpb24ueS1yLnkpKm4sbC51cGRhdGUodS5ib3VuZHMsdS52ZXJ0aWNlcyxlLnZlbG9jaXR5KVxufWUucGFydHMubGVuZ3RoPjEmJihlLmFyZWE9cyxlLmlzU3RhdGljfHwoby5zZXRNYXNzKGUsZS5kZW5zaXR5KnMpLG8uc2V0SW5lcnRpYShlLGEpKSksZS5jaXJjbGVSYWRpdXMmJih0PT09bj9lLmNpcmNsZVJhZGl1cyo9dDplLmNpcmNsZVJhZGl1cz1udWxsKX0sby51cGRhdGU9ZnVuY3Rpb24oZSx0LG4sbyl7dmFyIHM9TWF0aC5wb3codCpuKmUudGltZVNjYWxlLDIpLGE9MS1lLmZyaWN0aW9uQWlyKm4qZS50aW1lU2NhbGUsZD1lLnBvc2l0aW9uLngtZS5wb3NpdGlvblByZXYueCx1PWUucG9zaXRpb24ueS1lLnBvc2l0aW9uUHJldi55O2UudmVsb2NpdHkueD1kKmEqbytlLmZvcmNlLngvZS5tYXNzKnMsZS52ZWxvY2l0eS55PXUqYSpvK2UuZm9yY2UueS9lLm1hc3MqcyxlLnBvc2l0aW9uUHJldi54PWUucG9zaXRpb24ueCxlLnBvc2l0aW9uUHJldi55PWUucG9zaXRpb24ueSxlLnBvc2l0aW9uLngrPWUudmVsb2NpdHkueCxlLnBvc2l0aW9uLnkrPWUudmVsb2NpdHkueSxlLmFuZ3VsYXJWZWxvY2l0eT0oZS5hbmdsZS1lLmFuZ2xlUHJldikqYSpvK2UudG9ycXVlL2UuaW5lcnRpYSpzLGUuYW5nbGVQcmV2PWUuYW5nbGUsZS5hbmdsZSs9ZS5hbmd1bGFyVmVsb2NpdHksZS5zcGVlZD1yLm1hZ25pdHVkZShlLnZlbG9jaXR5KSxlLmFuZ3VsYXJTcGVlZD1NYXRoLmFicyhlLmFuZ3VsYXJWZWxvY2l0eSk7Zm9yKHZhciBwPTA7cDxlLnBhcnRzLmxlbmd0aDtwKyspe3ZhciBmPWUucGFydHNbcF07aS50cmFuc2xhdGUoZi52ZXJ0aWNlcyxlLnZlbG9jaXR5KSxwPjAmJihmLnBvc2l0aW9uLngrPWUudmVsb2NpdHkueCxmLnBvc2l0aW9uLnkrPWUudmVsb2NpdHkueSksMCE9PWUuYW5ndWxhclZlbG9jaXR5JiYoaS5yb3RhdGUoZi52ZXJ0aWNlcyxlLmFuZ3VsYXJWZWxvY2l0eSxlLnBvc2l0aW9uKSxjLnJvdGF0ZShmLmF4ZXMsZS5hbmd1bGFyVmVsb2NpdHkpLFxucD4wJiZyLnJvdGF0ZUFib3V0KGYucG9zaXRpb24sZS5hbmd1bGFyVmVsb2NpdHksZS5wb3NpdGlvbixmLnBvc2l0aW9uKSksbC51cGRhdGUoZi5ib3VuZHMsZi52ZXJ0aWNlcyxlLnZlbG9jaXR5KX19LG8uYXBwbHlGb3JjZT1mdW5jdGlvbihlLHQsbil7ZS5mb3JjZS54Kz1uLngsZS5mb3JjZS55Kz1uLnk7dmFyIG89e3g6dC54LWUucG9zaXRpb24ueCx5OnQueS1lLnBvc2l0aW9uLnl9O2UudG9ycXVlKz1vLngqbi55LW8ueSpuLnh9LG8uX3RvdGFsUHJvcGVydGllcz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9e21hc3M6MCxhcmVhOjAsaW5lcnRpYTowLGNlbnRyZTp7eDowLHk6MH19LG49MT09PWUucGFydHMubGVuZ3RoPzA6MTtuPGUucGFydHMubGVuZ3RoO24rKyl7dmFyIG89ZS5wYXJ0c1tuXSxpPW8ubWFzcyE9PTEvMD9vLm1hc3M6MTt0Lm1hc3MrPWksdC5hcmVhKz1vLmFyZWEsdC5pbmVydGlhKz1vLmluZXJ0aWEsdC5jZW50cmU9ci5hZGQodC5jZW50cmUsci5tdWx0KG8ucG9zaXRpb24saSkpfXJldHVybiB0LmNlbnRyZT1yLmRpdih0LmNlbnRyZSx0Lm1hc3MpLHR9fSgpfSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9TbGVlcGluZ1wiOjIyLFwiLi4vZ2VvbWV0cnkvQXhlc1wiOjI1LFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOCxcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCI6MjksXCIuLi9yZW5kZXIvUmVuZGVyXCI6MzF9XSwyOltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4uL2NvcmUvRXZlbnRzXCIpLHI9ZShcIi4uL2NvcmUvQ29tbW9uXCIpLHM9ZShcIi4uL2dlb21ldHJ5L0JvdW5kc1wiKSxhPWUoXCIuL0JvZHlcIik7IWZ1bmN0aW9uKCl7by5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHIuZXh0ZW5kKHtpZDpyLm5leHRJZCgpLHR5cGU6XCJjb21wb3NpdGVcIixwYXJlbnQ6bnVsbCxpc01vZGlmaWVkOiExLGJvZGllczpbXSxjb25zdHJhaW50czpbXSxjb21wb3NpdGVzOltdLFxubGFiZWw6XCJDb21wb3NpdGVcIixwbHVnaW46e319LGUpfSxvLnNldE1vZGlmaWVkPWZ1bmN0aW9uKGUsdCxuLGkpe2lmKGUuaXNNb2RpZmllZD10LG4mJmUucGFyZW50JiZvLnNldE1vZGlmaWVkKGUucGFyZW50LHQsbixpKSxpKWZvcih2YXIgcj0wO3I8ZS5jb21wb3NpdGVzLmxlbmd0aDtyKyspe3ZhciBzPWUuY29tcG9zaXRlc1tyXTtvLnNldE1vZGlmaWVkKHMsdCxuLGkpfX0sby5hZGQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj1bXS5jb25jYXQodCk7aS50cmlnZ2VyKGUsXCJiZWZvcmVBZGRcIix7b2JqZWN0OnR9KTtmb3IodmFyIHM9MDtzPG4ubGVuZ3RoO3MrKyl7dmFyIGE9bltzXTtzd2l0Y2goYS50eXBlKXtjYXNlXCJib2R5XCI6aWYoYS5wYXJlbnQhPT1hKXtyLndhcm4oXCJDb21wb3NpdGUuYWRkOiBza2lwcGVkIGFkZGluZyBhIGNvbXBvdW5kIGJvZHkgcGFydCAoeW91IG11c3QgYWRkIGl0cyBwYXJlbnQgaW5zdGVhZClcIik7YnJlYWt9by5hZGRCb2R5KGUsYSk7YnJlYWs7Y2FzZVwiY29uc3RyYWludFwiOm8uYWRkQ29uc3RyYWludChlLGEpO2JyZWFrO2Nhc2VcImNvbXBvc2l0ZVwiOm8uYWRkQ29tcG9zaXRlKGUsYSk7YnJlYWs7Y2FzZVwibW91c2VDb25zdHJhaW50XCI6by5hZGRDb25zdHJhaW50KGUsYS5jb25zdHJhaW50KX19cmV0dXJuIGkudHJpZ2dlcihlLFwiYWZ0ZXJBZGRcIix7b2JqZWN0OnR9KSxlfSxvLnJlbW92ZT1mdW5jdGlvbihlLHQsbil7dmFyIHI9W10uY29uY2F0KHQpO2kudHJpZ2dlcihlLFwiYmVmb3JlUmVtb3ZlXCIse29iamVjdDp0fSk7Zm9yKHZhciBzPTA7czxyLmxlbmd0aDtzKyspe3ZhciBhPXJbc107c3dpdGNoKGEudHlwZSl7Y2FzZVwiYm9keVwiOm8ucmVtb3ZlQm9keShlLGEsbik7YnJlYWs7Y2FzZVwiY29uc3RyYWludFwiOm8ucmVtb3ZlQ29uc3RyYWludChlLGEsbik7YnJlYWs7Y2FzZVwiY29tcG9zaXRlXCI6by5yZW1vdmVDb21wb3NpdGUoZSxhLG4pO2JyZWFrO2Nhc2VcIm1vdXNlQ29uc3RyYWludFwiOlxuby5yZW1vdmVDb25zdHJhaW50KGUsYS5jb25zdHJhaW50KX19cmV0dXJuIGkudHJpZ2dlcihlLFwiYWZ0ZXJSZW1vdmVcIix7b2JqZWN0OnR9KSxlfSxvLmFkZENvbXBvc2l0ZT1mdW5jdGlvbihlLHQpe3JldHVybiBlLmNvbXBvc2l0ZXMucHVzaCh0KSx0LnBhcmVudD1lLG8uc2V0TW9kaWZpZWQoZSwhMCwhMCwhMSksZX0sby5yZW1vdmVDb21wb3NpdGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXIuaW5kZXhPZihlLmNvbXBvc2l0ZXMsdCk7aWYoLTEhPT1pJiYoby5yZW1vdmVDb21wb3NpdGVBdChlLGkpLG8uc2V0TW9kaWZpZWQoZSwhMCwhMCwhMSkpLG4pZm9yKHZhciBzPTA7czxlLmNvbXBvc2l0ZXMubGVuZ3RoO3MrKylvLnJlbW92ZUNvbXBvc2l0ZShlLmNvbXBvc2l0ZXNbc10sdCwhMCk7cmV0dXJuIGV9LG8ucmVtb3ZlQ29tcG9zaXRlQXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5jb21wb3NpdGVzLnNwbGljZSh0LDEpLG8uc2V0TW9kaWZpZWQoZSwhMCwhMCwhMSksZX0sby5hZGRCb2R5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuYm9kaWVzLnB1c2godCksby5zZXRNb2RpZmllZChlLCEwLCEwLCExKSxlfSxvLnJlbW92ZUJvZHk9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXIuaW5kZXhPZihlLmJvZGllcyx0KTtpZigtMSE9PWkmJihvLnJlbW92ZUJvZHlBdChlLGkpLG8uc2V0TW9kaWZpZWQoZSwhMCwhMCwhMSkpLG4pZm9yKHZhciBzPTA7czxlLmNvbXBvc2l0ZXMubGVuZ3RoO3MrKylvLnJlbW92ZUJvZHkoZS5jb21wb3NpdGVzW3NdLHQsITApO3JldHVybiBlfSxvLnJlbW92ZUJvZHlBdD1mdW5jdGlvbihlLHQpe3JldHVybiBlLmJvZGllcy5zcGxpY2UodCwxKSxvLnNldE1vZGlmaWVkKGUsITAsITAsITEpLGV9LG8uYWRkQ29uc3RyYWludD1mdW5jdGlvbihlLHQpe3JldHVybiBlLmNvbnN0cmFpbnRzLnB1c2godCksby5zZXRNb2RpZmllZChlLCEwLCEwLCExKSxlfSxvLnJlbW92ZUNvbnN0cmFpbnQ9ZnVuY3Rpb24oZSx0LG4pe1xudmFyIGk9ci5pbmRleE9mKGUuY29uc3RyYWludHMsdCk7aWYoLTEhPT1pJiZvLnJlbW92ZUNvbnN0cmFpbnRBdChlLGkpLG4pZm9yKHZhciBzPTA7czxlLmNvbXBvc2l0ZXMubGVuZ3RoO3MrKylvLnJlbW92ZUNvbnN0cmFpbnQoZS5jb21wb3NpdGVzW3NdLHQsITApO3JldHVybiBlfSxvLnJlbW92ZUNvbnN0cmFpbnRBdD1mdW5jdGlvbihlLHQpe3JldHVybiBlLmNvbnN0cmFpbnRzLnNwbGljZSh0LDEpLG8uc2V0TW9kaWZpZWQoZSwhMCwhMCwhMSksZX0sby5jbGVhcj1mdW5jdGlvbihlLHQsbil7aWYobilmb3IodmFyIGk9MDtpPGUuY29tcG9zaXRlcy5sZW5ndGg7aSsrKW8uY2xlYXIoZS5jb21wb3NpdGVzW2ldLHQsITApO3JldHVybiB0P2UuYm9kaWVzPWUuYm9kaWVzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5pc1N0YXRpY30pOmUuYm9kaWVzLmxlbmd0aD0wLGUuY29uc3RyYWludHMubGVuZ3RoPTAsZS5jb21wb3NpdGVzLmxlbmd0aD0wLG8uc2V0TW9kaWZpZWQoZSwhMCwhMCwhMSksZX0sby5hbGxCb2RpZXM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLmNvbmNhdChlLmJvZGllcyksbj0wO248ZS5jb21wb3NpdGVzLmxlbmd0aDtuKyspdD10LmNvbmNhdChvLmFsbEJvZGllcyhlLmNvbXBvc2l0ZXNbbl0pKTtyZXR1cm4gdH0sby5hbGxDb25zdHJhaW50cz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10uY29uY2F0KGUuY29uc3RyYWludHMpLG49MDtuPGUuY29tcG9zaXRlcy5sZW5ndGg7bisrKXQ9dC5jb25jYXQoby5hbGxDb25zdHJhaW50cyhlLmNvbXBvc2l0ZXNbbl0pKTtyZXR1cm4gdH0sby5hbGxDb21wb3NpdGVzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXS5jb25jYXQoZS5jb21wb3NpdGVzKSxuPTA7bjxlLmNvbXBvc2l0ZXMubGVuZ3RoO24rKyl0PXQuY29uY2F0KG8uYWxsQ29tcG9zaXRlcyhlLmNvbXBvc2l0ZXNbbl0pKTtyZXR1cm4gdH0sby5nZXQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLHI7c3dpdGNoKG4pe2Nhc2VcImJvZHlcIjpcbmk9by5hbGxCb2RpZXMoZSk7YnJlYWs7Y2FzZVwiY29uc3RyYWludFwiOmk9by5hbGxDb25zdHJhaW50cyhlKTticmVhaztjYXNlXCJjb21wb3NpdGVcIjppPW8uYWxsQ29tcG9zaXRlcyhlKS5jb25jYXQoZSl9cmV0dXJuIGk/KHI9aS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWQudG9TdHJpbmcoKT09PXQudG9TdHJpbmcoKX0pLDA9PT1yLmxlbmd0aD9udWxsOnJbMF0pOm51bGx9LG8ubW92ZT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG8ucmVtb3ZlKGUsdCksby5hZGQobix0KSxlfSxvLnJlYmFzZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9by5hbGxCb2RpZXMoZSkuY29uY2F0KG8uYWxsQ29uc3RyYWludHMoZSkpLmNvbmNhdChvLmFsbENvbXBvc2l0ZXMoZSkpLG49MDtuPHQubGVuZ3RoO24rKyl0W25dLmlkPXIubmV4dElkKCk7cmV0dXJuIG8uc2V0TW9kaWZpZWQoZSwhMCwhMCwhMSksZX0sby50cmFuc2xhdGU9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgaT1uP28uYWxsQm9kaWVzKGUpOmUuYm9kaWVzLHI9MDtyPGkubGVuZ3RoO3IrKylhLnRyYW5zbGF0ZShpW3JdLHQpO3JldHVybiBvLnNldE1vZGlmaWVkKGUsITAsITAsITEpLGV9LG8ucm90YXRlPWZ1bmN0aW9uKGUsdCxuLGkpe2Zvcih2YXIgcj1NYXRoLmNvcyh0KSxzPU1hdGguc2luKHQpLGw9aT9vLmFsbEJvZGllcyhlKTplLmJvZGllcyxjPTA7YzxsLmxlbmd0aDtjKyspe3ZhciBkPWxbY10sdT1kLnBvc2l0aW9uLngtbi54LHA9ZC5wb3NpdGlvbi55LW4ueTthLnNldFBvc2l0aW9uKGQse3g6bi54Kyh1KnItcCpzKSx5Om4ueSsodSpzK3Aqcil9KSxhLnJvdGF0ZShkLHQpfXJldHVybiBvLnNldE1vZGlmaWVkKGUsITAsITAsITEpLGV9LG8uc2NhbGU9ZnVuY3Rpb24oZSx0LG4saSxyKXtmb3IodmFyIHM9cj9vLmFsbEJvZGllcyhlKTplLmJvZGllcyxsPTA7bDxzLmxlbmd0aDtsKyspe3ZhciBjPXNbbF0sZD1jLnBvc2l0aW9uLngtaS54LHU9Yy5wb3NpdGlvbi55LWkueVxuO2Euc2V0UG9zaXRpb24oYyx7eDppLngrZCp0LHk6aS55K3Uqbn0pLGEuc2NhbGUoYyx0LG4pfXJldHVybiBvLnNldE1vZGlmaWVkKGUsITAsITAsITEpLGV9LG8uYm91bmRzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1vLmFsbEJvZGllcyhlKSxuPVtdLGk9MDtpPHQubGVuZ3RoO2krPTEpe3ZhciByPXRbaV07bi5wdXNoKHIuYm91bmRzLm1pbixyLmJvdW5kcy5tYXgpfXJldHVybiBzLmNyZWF0ZShuKX19KCl9LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL0V2ZW50c1wiOjE2LFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuL0JvZHlcIjoxfV0sMzpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuL0NvbXBvc2l0ZVwiKSxyPShlKFwiLi4vY29uc3RyYWludC9Db25zdHJhaW50XCIpLGUoXCIuLi9jb3JlL0NvbW1vblwiKSk7IWZ1bmN0aW9uKCl7by5jcmVhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9aS5jcmVhdGUoKSxuPXtsYWJlbDpcIldvcmxkXCIsZ3Jhdml0eTp7eDowLHk6MSxzY2FsZTouMDAxfSxib3VuZHM6e21pbjp7eDotMS8wLHk6LTEvMH0sbWF4Ont4OjEvMCx5OjEvMH19fTtyZXR1cm4gci5leHRlbmQodCxuLGUpfX0oKX0se1wiLi4vY29uc3RyYWludC9Db25zdHJhaW50XCI6MTIsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi9Db21wb3NpdGVcIjoyfV0sNDpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vLGZ1bmN0aW9uKCl7by5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJue2lkOm8uaWQoZSksdmVydGV4OmUsbm9ybWFsSW1wdWxzZTowLHRhbmdlbnRJbXB1bHNlOjB9fSxvLmlkPWZ1bmN0aW9uKGUpe3JldHVybiBlLmJvZHkuaWQrXCJfXCIrZS5pbmRleH19KCl9LHt9XSw1OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4vU0FUXCIpLHI9ZShcIi4vUGFpclwiKSxzPWUoXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIik7IWZ1bmN0aW9uKCl7by5jb2xsaXNpb25zPWZ1bmN0aW9uKGUsdCl7XG5mb3IodmFyIG49W10sYT10LnBhaXJzLnRhYmxlLGw9MDtsPGUubGVuZ3RoO2wrKyl7dmFyIGM9ZVtsXVswXSxkPWVbbF1bMV07aWYoKCFjLmlzU3RhdGljJiYhYy5pc1NsZWVwaW5nfHwhZC5pc1N0YXRpYyYmIWQuaXNTbGVlcGluZykmJihvLmNhbkNvbGxpZGUoYy5jb2xsaXNpb25GaWx0ZXIsZC5jb2xsaXNpb25GaWx0ZXIpJiZzLm92ZXJsYXBzKGMuYm91bmRzLGQuYm91bmRzKSkpZm9yKHZhciB1PWMucGFydHMubGVuZ3RoPjE/MTowO3U8Yy5wYXJ0cy5sZW5ndGg7dSsrKWZvcih2YXIgcD1jLnBhcnRzW3VdLGY9ZC5wYXJ0cy5sZW5ndGg+MT8xOjA7ZjxkLnBhcnRzLmxlbmd0aDtmKyspe3ZhciBtPWQucGFydHNbZl07aWYocD09PWMmJm09PT1kfHxzLm92ZXJsYXBzKHAuYm91bmRzLG0uYm91bmRzKSl7dmFyIHYseT1yLmlkKHAsbSksZz1hW3ldO3Y9ZyYmZy5pc0FjdGl2ZT9nLmNvbGxpc2lvbjpudWxsO3ZhciB4PWkuY29sbGlkZXMocCxtLHYpO3guY29sbGlkZWQmJm4ucHVzaCh4KX19fXJldHVybiBufSxvLmNhbkNvbGxpZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5ncm91cD09PXQuZ3JvdXAmJjAhPT1lLmdyb3VwP2UuZ3JvdXA+MDowIT0oZS5tYXNrJnQuY2F0ZWdvcnkpJiYwIT0odC5tYXNrJmUuY2F0ZWdvcnkpfX0oKX0se1wiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuL1BhaXJcIjo3LFwiLi9TQVRcIjoxMX1dLDY6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9bzt2YXIgaT1lKFwiLi9QYWlyXCIpLHI9ZShcIi4vRGV0ZWN0b3JcIikscz1lKFwiLi4vY29yZS9Db21tb25cIik7IWZ1bmN0aW9uKCl7by5jcmVhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9e2NvbnRyb2xsZXI6byxkZXRlY3RvcjpyLmNvbGxpc2lvbnMsYnVja2V0czp7fSxwYWlyczp7fSxwYWlyc0xpc3Q6W10sYnVja2V0V2lkdGg6NDgsYnVja2V0SGVpZ2h0OjQ4fTtyZXR1cm4gcy5leHRlbmQodCxlKX0sby51cGRhdGU9ZnVuY3Rpb24oZSx0LG4saSl7XG52YXIgcixzLGEsbCxjLGQ9bi53b3JsZCx1PWUuYnVja2V0cyxwPSExO2ZvcihyPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBmPXRbcl07aWYoKCFmLmlzU2xlZXBpbmd8fGkpJiYhKGYuYm91bmRzLm1heC54PGQuYm91bmRzLm1pbi54fHxmLmJvdW5kcy5taW4ueD5kLmJvdW5kcy5tYXgueHx8Zi5ib3VuZHMubWF4Lnk8ZC5ib3VuZHMubWluLnl8fGYuYm91bmRzLm1pbi55PmQuYm91bmRzLm1heC55KSl7dmFyIG09by5fZ2V0UmVnaW9uKGUsZik7aWYoIWYucmVnaW9ufHxtLmlkIT09Zi5yZWdpb24uaWR8fGkpe2YucmVnaW9uJiYhaXx8KGYucmVnaW9uPW0pO3ZhciB2PW8uX3JlZ2lvblVuaW9uKG0sZi5yZWdpb24pO2ZvcihzPXYuc3RhcnRDb2w7czw9di5lbmRDb2w7cysrKWZvcihhPXYuc3RhcnRSb3c7YTw9di5lbmRSb3c7YSsrKXtjPW8uX2dldEJ1Y2tldElkKHMsYSksbD11W2NdO3ZhciB5PXM+PW0uc3RhcnRDb2wmJnM8PW0uZW5kQ29sJiZhPj1tLnN0YXJ0Um93JiZhPD1tLmVuZFJvdyxnPXM+PWYucmVnaW9uLnN0YXJ0Q29sJiZzPD1mLnJlZ2lvbi5lbmRDb2wmJmE+PWYucmVnaW9uLnN0YXJ0Um93JiZhPD1mLnJlZ2lvbi5lbmRSb3c7IXkmJmcmJmcmJmwmJm8uX2J1Y2tldFJlbW92ZUJvZHkoZSxsLGYpLChmLnJlZ2lvbj09PW18fHkmJiFnfHxpKSYmKGx8fChsPW8uX2NyZWF0ZUJ1Y2tldCh1LGMpKSxvLl9idWNrZXRBZGRCb2R5KGUsbCxmKSl9Zi5yZWdpb249bSxwPSEwfX19cCYmKGUucGFpcnNMaXN0PW8uX2NyZWF0ZUFjdGl2ZVBhaXJzTGlzdChlKSl9LG8uY2xlYXI9ZnVuY3Rpb24oZSl7ZS5idWNrZXRzPXt9LGUucGFpcnM9e30sZS5wYWlyc0xpc3Q9W119LG8uX3JlZ2lvblVuaW9uPWZ1bmN0aW9uKGUsdCl7dmFyIG49TWF0aC5taW4oZS5zdGFydENvbCx0LnN0YXJ0Q29sKSxpPU1hdGgubWF4KGUuZW5kQ29sLHQuZW5kQ29sKSxyPU1hdGgubWluKGUuc3RhcnRSb3csdC5zdGFydFJvdykscz1NYXRoLm1heChlLmVuZFJvdyx0LmVuZFJvdylcbjtyZXR1cm4gby5fY3JlYXRlUmVnaW9uKG4saSxyLHMpfSxvLl9nZXRSZWdpb249ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmJvdW5kcyxpPU1hdGguZmxvb3Iobi5taW4ueC9lLmJ1Y2tldFdpZHRoKSxyPU1hdGguZmxvb3Iobi5tYXgueC9lLmJ1Y2tldFdpZHRoKSxzPU1hdGguZmxvb3Iobi5taW4ueS9lLmJ1Y2tldEhlaWdodCksYT1NYXRoLmZsb29yKG4ubWF4LnkvZS5idWNrZXRIZWlnaHQpO3JldHVybiBvLl9jcmVhdGVSZWdpb24oaSxyLHMsYSl9LG8uX2NyZWF0ZVJlZ2lvbj1mdW5jdGlvbihlLHQsbixvKXtyZXR1cm57aWQ6ZStcIixcIit0K1wiLFwiK24rXCIsXCIrbyxzdGFydENvbDplLGVuZENvbDp0LHN0YXJ0Um93Om4sZW5kUm93Om99fSxvLl9nZXRCdWNrZXRJZD1mdW5jdGlvbihlLHQpe3JldHVyblwiQ1wiK2UrXCJSXCIrdH0sby5fY3JlYXRlQnVja2V0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGVbdF09W119LG8uX2J1Y2tldEFkZEJvZHk9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXt2YXIgcj10W29dO2lmKCEobi5pZD09PXIuaWR8fG4uaXNTdGF0aWMmJnIuaXNTdGF0aWMpKXt2YXIgcz1pLmlkKG4sciksYT1lLnBhaXJzW3NdO2E/YVsyXSs9MTplLnBhaXJzW3NdPVtuLHIsMV19fXQucHVzaChuKX0sby5fYnVja2V0UmVtb3ZlQm9keT1mdW5jdGlvbihlLHQsbil7dC5zcGxpY2Uocy5pbmRleE9mKHQsbiksMSk7Zm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciByPXRbb10sYT1pLmlkKG4sciksbD1lLnBhaXJzW2FdO2wmJihsWzJdLT0xKX19LG8uX2NyZWF0ZUFjdGl2ZVBhaXJzTGlzdD1mdW5jdGlvbihlKXt2YXIgdCxuLG89W107dD1zLmtleXMoZS5wYWlycyk7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspbj1lLnBhaXJzW3RbaV1dLG5bMl0+MD9vLnB1c2gobik6ZGVsZXRlIGUucGFpcnNbdFtpXV07cmV0dXJuIG99fSgpfSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi9EZXRlY3RvclwiOjUsXCIuL1BhaXJcIjo3fV0sXG43OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4vQ29udGFjdFwiKTshZnVuY3Rpb24oKXtvLmNyZWF0ZT1mdW5jdGlvbihlLHQpe3ZhciBuPWUuYm9keUEsaT1lLmJvZHlCLHI9ZS5wYXJlbnRBLHM9ZS5wYXJlbnRCLGE9e2lkOm8uaWQobixpKSxib2R5QTpuLGJvZHlCOmksY29udGFjdHM6e30sYWN0aXZlQ29udGFjdHM6W10sc2VwYXJhdGlvbjowLGlzQWN0aXZlOiEwLGlzU2Vuc29yOm4uaXNTZW5zb3J8fGkuaXNTZW5zb3IsdGltZUNyZWF0ZWQ6dCx0aW1lVXBkYXRlZDp0LGludmVyc2VNYXNzOnIuaW52ZXJzZU1hc3Mrcy5pbnZlcnNlTWFzcyxmcmljdGlvbjpNYXRoLm1pbihyLmZyaWN0aW9uLHMuZnJpY3Rpb24pLGZyaWN0aW9uU3RhdGljOk1hdGgubWF4KHIuZnJpY3Rpb25TdGF0aWMscy5mcmljdGlvblN0YXRpYykscmVzdGl0dXRpb246TWF0aC5tYXgoci5yZXN0aXR1dGlvbixzLnJlc3RpdHV0aW9uKSxzbG9wOk1hdGgubWF4KHIuc2xvcCxzLnNsb3ApfTtyZXR1cm4gby51cGRhdGUoYSxlLHQpLGF9LG8udXBkYXRlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLmNvbnRhY3RzLHM9dC5zdXBwb3J0cyxhPWUuYWN0aXZlQ29udGFjdHMsbD10LnBhcmVudEEsYz10LnBhcmVudEI7aWYoZS5jb2xsaXNpb249dCxlLmludmVyc2VNYXNzPWwuaW52ZXJzZU1hc3MrYy5pbnZlcnNlTWFzcyxlLmZyaWN0aW9uPU1hdGgubWluKGwuZnJpY3Rpb24sYy5mcmljdGlvbiksZS5mcmljdGlvblN0YXRpYz1NYXRoLm1heChsLmZyaWN0aW9uU3RhdGljLGMuZnJpY3Rpb25TdGF0aWMpLGUucmVzdGl0dXRpb249TWF0aC5tYXgobC5yZXN0aXR1dGlvbixjLnJlc3RpdHV0aW9uKSxlLnNsb3A9TWF0aC5tYXgobC5zbG9wLGMuc2xvcCksYS5sZW5ndGg9MCx0LmNvbGxpZGVkKXtmb3IodmFyIGQ9MDtkPHMubGVuZ3RoO2QrKyl7dmFyIHU9c1tkXSxwPWkuaWQodSksZj1yW3BdO2Y/YS5wdXNoKGYpOmEucHVzaChyW3BdPWkuY3JlYXRlKHUpKX1cbmUuc2VwYXJhdGlvbj10LmRlcHRoLG8uc2V0QWN0aXZlKGUsITAsbil9ZWxzZSEwPT09ZS5pc0FjdGl2ZSYmby5zZXRBY3RpdmUoZSwhMSxuKX0sby5zZXRBY3RpdmU9ZnVuY3Rpb24oZSx0LG4pe3Q/KGUuaXNBY3RpdmU9ITAsZS50aW1lVXBkYXRlZD1uKTooZS5pc0FjdGl2ZT0hMSxlLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aD0wKX0sby5pZD1mdW5jdGlvbihlLHQpe3JldHVybiBlLmlkPHQuaWQ/XCJBXCIrZS5pZCtcIkJcIit0LmlkOlwiQVwiK3QuaWQrXCJCXCIrZS5pZH19KCl9LHtcIi4vQ29udGFjdFwiOjR9XSw4OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4vUGFpclwiKSxyPWUoXCIuLi9jb3JlL0NvbW1vblwiKTshZnVuY3Rpb24oKXtvLl9wYWlyTWF4SWRsZUxpZmU9MWUzLG8uY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiByLmV4dGVuZCh7dGFibGU6e30sbGlzdDpbXSxjb2xsaXNpb25TdGFydDpbXSxjb2xsaXNpb25BY3RpdmU6W10sY29sbGlzaW9uRW5kOltdfSxlKX0sby51cGRhdGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLHMsYSxsLGM9ZS5saXN0LGQ9ZS50YWJsZSx1PWUuY29sbGlzaW9uU3RhcnQscD1lLmNvbGxpc2lvbkVuZCxmPWUuY29sbGlzaW9uQWN0aXZlLG09W107Zm9yKHUubGVuZ3RoPTAscC5sZW5ndGg9MCxmLmxlbmd0aD0wLGw9MDtsPHQubGVuZ3RoO2wrKylvPXRbbF0sby5jb2xsaWRlZCYmKHM9aS5pZChvLmJvZHlBLG8uYm9keUIpLG0ucHVzaChzKSxhPWRbc10sYT8oYS5pc0FjdGl2ZT9mLnB1c2goYSk6dS5wdXNoKGEpLGkudXBkYXRlKGEsbyxuKSk6KGE9aS5jcmVhdGUobyxuKSxkW3NdPWEsdS5wdXNoKGEpLGMucHVzaChhKSkpO2ZvcihsPTA7bDxjLmxlbmd0aDtsKyspYT1jW2xdLGEuaXNBY3RpdmUmJi0xPT09ci5pbmRleE9mKG0sYS5pZCkmJihpLnNldEFjdGl2ZShhLCExLG4pLHAucHVzaChhKSl9LG8ucmVtb3ZlT2xkPWZ1bmN0aW9uKGUsdCl7XG52YXIgbixpLHIscyxhPWUubGlzdCxsPWUudGFibGUsYz1bXTtmb3Iocz0wO3M8YS5sZW5ndGg7cysrKW49YVtzXSxpPW4uY29sbGlzaW9uLGkuYm9keUEuaXNTbGVlcGluZ3x8aS5ib2R5Qi5pc1NsZWVwaW5nP24udGltZVVwZGF0ZWQ9dDp0LW4udGltZVVwZGF0ZWQ+by5fcGFpck1heElkbGVMaWZlJiZjLnB1c2gocyk7Zm9yKHM9MDtzPGMubGVuZ3RoO3MrKylyPWNbc10tcyxuPWFbcl0sZGVsZXRlIGxbbi5pZF0sYS5zcGxpY2UociwxKX0sby5jbGVhcj1mdW5jdGlvbihlKXtyZXR1cm4gZS50YWJsZT17fSxlLmxpc3QubGVuZ3RoPTAsZS5jb2xsaXNpb25TdGFydC5sZW5ndGg9MCxlLmNvbGxpc2lvbkFjdGl2ZS5sZW5ndGg9MCxlLmNvbGxpc2lvbkVuZC5sZW5ndGg9MCxlfX0oKX0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4vUGFpclwiOjd9XSw5OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4uL2dlb21ldHJ5L1ZlY3RvclwiKSxyPWUoXCIuL1NBVFwiKSxzPWUoXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIiksYT1lKFwiLi4vZmFjdG9yeS9Cb2RpZXNcIiksbD1lKFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIik7IWZ1bmN0aW9uKCl7by5jb2xsaWRlcz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1bXSxvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBpPXRbb107aWYocy5vdmVybGFwcyhpLmJvdW5kcyxlLmJvdW5kcykpZm9yKHZhciBhPTE9PT1pLnBhcnRzLmxlbmd0aD8wOjE7YTxpLnBhcnRzLmxlbmd0aDthKyspe3ZhciBsPWkucGFydHNbYV07aWYocy5vdmVybGFwcyhsLmJvdW5kcyxlLmJvdW5kcykpe3ZhciBjPXIuY29sbGlkZXMobCxlKTtpZihjLmNvbGxpZGVkKXtuLnB1c2goYyk7YnJlYWt9fX19cmV0dXJuIG59LG8ucmF5PWZ1bmN0aW9uKGUsdCxuLHIpe3I9cnx8MWUtMTAwXG47Zm9yKHZhciBzPWkuYW5nbGUodCxuKSxsPWkubWFnbml0dWRlKGkuc3ViKHQsbikpLGM9LjUqKG4ueCt0LngpLGQ9LjUqKG4ueSt0LnkpLHU9YS5yZWN0YW5nbGUoYyxkLGwscix7YW5nbGU6c30pLHA9by5jb2xsaWRlcyh1LGUpLGY9MDtmPHAubGVuZ3RoO2YrPTEpe3ZhciBtPXBbZl07bS5ib2R5PW0uYm9keUI9bS5ib2R5QX1yZXR1cm4gcH0sby5yZWdpb249ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgbz1bXSxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciByPWVbaV0sYT1zLm92ZXJsYXBzKHIuYm91bmRzLHQpOyhhJiYhbnx8IWEmJm4pJiZvLnB1c2gocil9cmV0dXJuIG99LG8ucG9pbnQ9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W10sbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgaT1lW29dO2lmKHMuY29udGFpbnMoaS5ib3VuZHMsdCkpZm9yKHZhciByPTE9PT1pLnBhcnRzLmxlbmd0aD8wOjE7cjxpLnBhcnRzLmxlbmd0aDtyKyspe3ZhciBhPWkucGFydHNbcl07aWYocy5jb250YWlucyhhLmJvdW5kcyx0KSYmbC5jb250YWlucyhhLnZlcnRpY2VzLHQpKXtuLnB1c2goaSk7YnJlYWt9fX1yZXR1cm4gbn19KCl9LHtcIi4uL2ZhY3RvcnkvQm9kaWVzXCI6MjMsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOSxcIi4vU0FUXCI6MTF9XSwxMDpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiKSxyPWUoXCIuLi9nZW9tZXRyeS9WZWN0b3JcIikscz1lKFwiLi4vY29yZS9Db21tb25cIiksYT1lKFwiLi4vZ2VvbWV0cnkvQm91bmRzXCIpOyFmdW5jdGlvbigpe28uX3Jlc3RpbmdUaHJlc2g9NCxvLl9yZXN0aW5nVGhyZXNoVGFuZ2VudD02LG8uX3Bvc2l0aW9uRGFtcGVuPS45LG8uX3Bvc2l0aW9uV2FybWluZz0uOCxvLl9mcmljdGlvbk5vcm1hbE11bHRpcGxpZXI9NSxvLnByZVNvbHZlUG9zaXRpb249ZnVuY3Rpb24oZSl7XG52YXIgdCxuLG87Zm9yKHQ9MDt0PGUubGVuZ3RoO3QrKyluPWVbdF0sbi5pc0FjdGl2ZSYmKG89bi5hY3RpdmVDb250YWN0cy5sZW5ndGgsbi5jb2xsaXNpb24ucGFyZW50QS50b3RhbENvbnRhY3RzKz1vLG4uY29sbGlzaW9uLnBhcmVudEIudG90YWxDb250YWN0cys9byl9LG8uc29sdmVQb3NpdGlvbj1mdW5jdGlvbihlLHQpe3ZhciBuLGkscyxhLGwsYyxkLHUscCxmPXIuX3RlbXBbMF0sbT1yLl90ZW1wWzFdLHY9ci5fdGVtcFsyXSx5PXIuX3RlbXBbM107Zm9yKG49MDtuPGUubGVuZ3RoO24rKylpPWVbbl0saS5pc0FjdGl2ZSYmIWkuaXNTZW5zb3ImJihzPWkuY29sbGlzaW9uLGE9cy5wYXJlbnRBLGw9cy5wYXJlbnRCLGM9cy5ub3JtYWwsZD1yLnN1YihyLmFkZChsLnBvc2l0aW9uSW1wdWxzZSxsLnBvc2l0aW9uLGYpLHIuYWRkKGEucG9zaXRpb25JbXB1bHNlLHIuc3ViKGwucG9zaXRpb24scy5wZW5ldHJhdGlvbixtKSx2KSx5KSxpLnNlcGFyYXRpb249ci5kb3QoYyxkKSk7Zm9yKG49MDtuPGUubGVuZ3RoO24rKylpPWVbbl0saS5pc0FjdGl2ZSYmIWkuaXNTZW5zb3ImJihzPWkuY29sbGlzaW9uLGE9cy5wYXJlbnRBLGw9cy5wYXJlbnRCLGM9cy5ub3JtYWwscD0oaS5zZXBhcmF0aW9uLWkuc2xvcCkqdCwoYS5pc1N0YXRpY3x8bC5pc1N0YXRpYykmJihwKj0yKSxhLmlzU3RhdGljfHxhLmlzU2xlZXBpbmd8fCh1PW8uX3Bvc2l0aW9uRGFtcGVuL2EudG90YWxDb250YWN0cyxhLnBvc2l0aW9uSW1wdWxzZS54Kz1jLngqcCp1LGEucG9zaXRpb25JbXB1bHNlLnkrPWMueSpwKnUpLGwuaXNTdGF0aWN8fGwuaXNTbGVlcGluZ3x8KHU9by5fcG9zaXRpb25EYW1wZW4vbC50b3RhbENvbnRhY3RzLGwucG9zaXRpb25JbXB1bHNlLngtPWMueCpwKnUsbC5wb3NpdGlvbkltcHVsc2UueS09Yy55KnAqdSkpfSxvLnBvc3RTb2x2ZVBvc2l0aW9uPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgbj1lW3RdXG47aWYobi50b3RhbENvbnRhY3RzPTAsMCE9PW4ucG9zaXRpb25JbXB1bHNlLnh8fDAhPT1uLnBvc2l0aW9uSW1wdWxzZS55KXtmb3IodmFyIHM9MDtzPG4ucGFydHMubGVuZ3RoO3MrKyl7dmFyIGw9bi5wYXJ0c1tzXTtpLnRyYW5zbGF0ZShsLnZlcnRpY2VzLG4ucG9zaXRpb25JbXB1bHNlKSxhLnVwZGF0ZShsLmJvdW5kcyxsLnZlcnRpY2VzLG4udmVsb2NpdHkpLGwucG9zaXRpb24ueCs9bi5wb3NpdGlvbkltcHVsc2UueCxsLnBvc2l0aW9uLnkrPW4ucG9zaXRpb25JbXB1bHNlLnl9bi5wb3NpdGlvblByZXYueCs9bi5wb3NpdGlvbkltcHVsc2UueCxuLnBvc2l0aW9uUHJldi55Kz1uLnBvc2l0aW9uSW1wdWxzZS55LHIuZG90KG4ucG9zaXRpb25JbXB1bHNlLG4udmVsb2NpdHkpPDA/KG4ucG9zaXRpb25JbXB1bHNlLng9MCxuLnBvc2l0aW9uSW1wdWxzZS55PTApOihuLnBvc2l0aW9uSW1wdWxzZS54Kj1vLl9wb3NpdGlvbldhcm1pbmcsbi5wb3NpdGlvbkltcHVsc2UueSo9by5fcG9zaXRpb25XYXJtaW5nKX19fSxvLnByZVNvbHZlVmVsb2NpdHk9ZnVuY3Rpb24oZSl7dmFyIHQsbixvLGkscyxhLGwsYyxkLHUscCxmLG0sdix5PXIuX3RlbXBbMF0sZz1yLl90ZW1wWzFdO2Zvcih0PTA7dDxlLmxlbmd0aDt0KyspaWYobz1lW3RdLG8uaXNBY3RpdmUmJiFvLmlzU2Vuc29yKWZvcihpPW8uYWN0aXZlQ29udGFjdHMscz1vLmNvbGxpc2lvbixhPXMucGFyZW50QSxsPXMucGFyZW50QixjPXMubm9ybWFsLGQ9cy50YW5nZW50LG49MDtuPGkubGVuZ3RoO24rKyl1PWlbbl0scD11LnZlcnRleCxmPXUubm9ybWFsSW1wdWxzZSxtPXUudGFuZ2VudEltcHVsc2UsMD09PWYmJjA9PT1tfHwoeS54PWMueCpmK2QueCptLHkueT1jLnkqZitkLnkqbSxhLmlzU3RhdGljfHxhLmlzU2xlZXBpbmd8fCh2PXIuc3ViKHAsYS5wb3NpdGlvbixnKSxhLnBvc2l0aW9uUHJldi54Kz15LngqYS5pbnZlcnNlTWFzcyxhLnBvc2l0aW9uUHJldi55Kz15LnkqYS5pbnZlcnNlTWFzcyxcbmEuYW5nbGVQcmV2Kz1yLmNyb3NzKHYseSkqYS5pbnZlcnNlSW5lcnRpYSksbC5pc1N0YXRpY3x8bC5pc1NsZWVwaW5nfHwodj1yLnN1YihwLGwucG9zaXRpb24sZyksbC5wb3NpdGlvblByZXYueC09eS54KmwuaW52ZXJzZU1hc3MsbC5wb3NpdGlvblByZXYueS09eS55KmwuaW52ZXJzZU1hc3MsbC5hbmdsZVByZXYtPXIuY3Jvc3Modix5KSpsLmludmVyc2VJbmVydGlhKSl9LG8uc29sdmVWZWxvY2l0eT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10KnQsaT1yLl90ZW1wWzBdLGE9ci5fdGVtcFsxXSxsPXIuX3RlbXBbMl0sYz1yLl90ZW1wWzNdLGQ9ci5fdGVtcFs0XSx1PXIuX3RlbXBbNV0scD0wO3A8ZS5sZW5ndGg7cCsrKXt2YXIgZj1lW3BdO2lmKGYuaXNBY3RpdmUmJiFmLmlzU2Vuc29yKXt2YXIgbT1mLmNvbGxpc2lvbix2PW0ucGFyZW50QSx5PW0ucGFyZW50QixnPW0ubm9ybWFsLHg9bS50YW5nZW50LGg9Zi5hY3RpdmVDb250YWN0cyxiPTEvaC5sZW5ndGg7di52ZWxvY2l0eS54PXYucG9zaXRpb24ueC12LnBvc2l0aW9uUHJldi54LHYudmVsb2NpdHkueT12LnBvc2l0aW9uLnktdi5wb3NpdGlvblByZXYueSx5LnZlbG9jaXR5Lng9eS5wb3NpdGlvbi54LXkucG9zaXRpb25QcmV2LngseS52ZWxvY2l0eS55PXkucG9zaXRpb24ueS15LnBvc2l0aW9uUHJldi55LHYuYW5ndWxhclZlbG9jaXR5PXYuYW5nbGUtdi5hbmdsZVByZXYseS5hbmd1bGFyVmVsb2NpdHk9eS5hbmdsZS15LmFuZ2xlUHJldjtmb3IodmFyIHc9MDt3PGgubGVuZ3RoO3crKyl7XG52YXIgUz1oW3ddLEM9Uy52ZXJ0ZXgsQT1yLnN1YihDLHYucG9zaXRpb24sYSksUD1yLnN1YihDLHkucG9zaXRpb24sbCksQj1yLmFkZCh2LnZlbG9jaXR5LHIubXVsdChyLnBlcnAoQSksdi5hbmd1bGFyVmVsb2NpdHkpLGMpLE09ci5hZGQoeS52ZWxvY2l0eSxyLm11bHQoci5wZXJwKFApLHkuYW5ndWxhclZlbG9jaXR5KSxkKSxrPXIuc3ViKEIsTSx1KSxJPXIuZG90KGcsayksXz1yLmRvdCh4LGspLFQ9TWF0aC5hYnMoXyksUj1zLnNpZ24oXyksVj0oMStmLnJlc3RpdHV0aW9uKSpJLEU9cy5jbGFtcChmLnNlcGFyYXRpb24rSSwwLDEpKm8uX2ZyaWN0aW9uTm9ybWFsTXVsdGlwbGllcixMPV8sRj0xLzA7VD5mLmZyaWN0aW9uKmYuZnJpY3Rpb25TdGF0aWMqRSpuJiYoRj1ULEw9cy5jbGFtcChmLmZyaWN0aW9uKlIqbiwtRixGKSk7dmFyIE89ci5jcm9zcyhBLGcpLHE9ci5jcm9zcyhQLGcpLFc9Yi8odi5pbnZlcnNlTWFzcyt5LmludmVyc2VNYXNzK3YuaW52ZXJzZUluZXJ0aWEqTypPK3kuaW52ZXJzZUluZXJ0aWEqcSpxKTtpZihWKj1XLEwqPVcsSTwwJiZJKkk+by5fcmVzdGluZ1RocmVzaCpuKVMubm9ybWFsSW1wdWxzZT0wO2Vsc2V7dmFyIEQ9Uy5ub3JtYWxJbXB1bHNlO1Mubm9ybWFsSW1wdWxzZT1NYXRoLm1pbihTLm5vcm1hbEltcHVsc2UrViwwKSxWPVMubm9ybWFsSW1wdWxzZS1EfWlmKF8qXz5vLl9yZXN0aW5nVGhyZXNoVGFuZ2VudCpuKVMudGFuZ2VudEltcHVsc2U9MDtlbHNle3ZhciBOPVMudGFuZ2VudEltcHVsc2U7Uy50YW5nZW50SW1wdWxzZT1zLmNsYW1wKFMudGFuZ2VudEltcHVsc2UrTCwtRixGKSxMPVMudGFuZ2VudEltcHVsc2UtTn1pLng9Zy54KlYreC54KkwsaS55PWcueSpWK3gueSpMLHYuaXNTdGF0aWN8fHYuaXNTbGVlcGluZ3x8KHYucG9zaXRpb25QcmV2LngrPWkueCp2LmludmVyc2VNYXNzLHYucG9zaXRpb25QcmV2LnkrPWkueSp2LmludmVyc2VNYXNzLFxudi5hbmdsZVByZXYrPXIuY3Jvc3MoQSxpKSp2LmludmVyc2VJbmVydGlhKSx5LmlzU3RhdGljfHx5LmlzU2xlZXBpbmd8fCh5LnBvc2l0aW9uUHJldi54LT1pLngqeS5pbnZlcnNlTWFzcyx5LnBvc2l0aW9uUHJldi55LT1pLnkqeS5pbnZlcnNlTWFzcyx5LmFuZ2xlUHJldi09ci5jcm9zcyhQLGkpKnkuaW52ZXJzZUluZXJ0aWEpfX19fX0oKX0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjgsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI5fV0sMTE6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9bzt2YXIgaT1lKFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIikscj1lKFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCIpOyFmdW5jdGlvbigpe28uY29sbGlkZXM9ZnVuY3Rpb24oZSx0LG4pe3ZhciBzLGEsbCxjLGQ9ITE7aWYobil7dmFyIHU9ZS5wYXJlbnQscD10LnBhcmVudCxmPXUuc3BlZWQqdS5zcGVlZCt1LmFuZ3VsYXJTcGVlZCp1LmFuZ3VsYXJTcGVlZCtwLnNwZWVkKnAuc3BlZWQrcC5hbmd1bGFyU3BlZWQqcC5hbmd1bGFyU3BlZWQ7ZD1uJiZuLmNvbGxpZGVkJiZmPC4yLGM9bn1lbHNlIGM9e2NvbGxpZGVkOiExLGJvZHlBOmUsYm9keUI6dH07aWYobiYmZCl7dmFyIG09Yy5heGlzQm9keSx2PW09PT1lP3Q6ZSx5PVttLmF4ZXNbbi5heGlzTnVtYmVyXV07aWYobD1vLl9vdmVybGFwQXhlcyhtLnZlcnRpY2VzLHYudmVydGljZXMseSksYy5yZXVzZWQ9ITAsbC5vdmVybGFwPD0wKXJldHVybiBjLmNvbGxpZGVkPSExLGN9ZWxzZXtpZihzPW8uX292ZXJsYXBBeGVzKGUudmVydGljZXMsdC52ZXJ0aWNlcyxlLmF4ZXMpLHMub3ZlcmxhcDw9MClyZXR1cm4gYy5jb2xsaWRlZD0hMSxjO2lmKGE9by5fb3ZlcmxhcEF4ZXModC52ZXJ0aWNlcyxlLnZlcnRpY2VzLHQuYXhlcyksYS5vdmVybGFwPD0wKXJldHVybiBjLmNvbGxpZGVkPSExLGM7cy5vdmVybGFwPGEub3ZlcmxhcD8obD1zLFxuYy5heGlzQm9keT1lKToobD1hLGMuYXhpc0JvZHk9dCksYy5heGlzTnVtYmVyPWwuYXhpc051bWJlcn1jLmJvZHlBPWUuaWQ8dC5pZD9lOnQsYy5ib2R5Qj1lLmlkPHQuaWQ/dDplLGMuY29sbGlkZWQ9ITAsYy5kZXB0aD1sLm92ZXJsYXAsYy5wYXJlbnRBPWMuYm9keUEucGFyZW50LGMucGFyZW50Qj1jLmJvZHlCLnBhcmVudCxlPWMuYm9keUEsdD1jLmJvZHlCLHIuZG90KGwuYXhpcyxyLnN1Yih0LnBvc2l0aW9uLGUucG9zaXRpb24pKTwwP2Mubm9ybWFsPXt4OmwuYXhpcy54LHk6bC5heGlzLnl9OmMubm9ybWFsPXt4Oi1sLmF4aXMueCx5Oi1sLmF4aXMueX0sYy50YW5nZW50PXIucGVycChjLm5vcm1hbCksYy5wZW5ldHJhdGlvbj1jLnBlbmV0cmF0aW9ufHx7fSxjLnBlbmV0cmF0aW9uLng9Yy5ub3JtYWwueCpjLmRlcHRoLGMucGVuZXRyYXRpb24ueT1jLm5vcm1hbC55KmMuZGVwdGg7dmFyIGc9by5fZmluZFN1cHBvcnRzKGUsdCxjLm5vcm1hbCkseD1bXTtpZihpLmNvbnRhaW5zKGUudmVydGljZXMsZ1swXSkmJngucHVzaChnWzBdKSxpLmNvbnRhaW5zKGUudmVydGljZXMsZ1sxXSkmJngucHVzaChnWzFdKSx4Lmxlbmd0aDwyKXt2YXIgaD1vLl9maW5kU3VwcG9ydHModCxlLHIubmVnKGMubm9ybWFsKSk7aS5jb250YWlucyh0LnZlcnRpY2VzLGhbMF0pJiZ4LnB1c2goaFswXSkseC5sZW5ndGg8MiYmaS5jb250YWlucyh0LnZlcnRpY2VzLGhbMV0pJiZ4LnB1c2goaFsxXSl9cmV0dXJuIHgubGVuZ3RoPDEmJih4PVtnWzBdXSksYy5zdXBwb3J0cz14LGN9LG8uX292ZXJsYXBBeGVzPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIGkscyxhPXIuX3RlbXBbMF0sbD1yLl90ZW1wWzFdLGM9e292ZXJsYXA6TnVtYmVyLk1BWF9WQUxVRX0sZD0wO2Q8bi5sZW5ndGg7ZCsrKXtpZihzPW5bZF0sby5fcHJvamVjdFRvQXhpcyhhLGUscyksby5fcHJvamVjdFRvQXhpcyhsLHQscyksXG4oaT1NYXRoLm1pbihhLm1heC1sLm1pbixsLm1heC1hLm1pbikpPD0wKXJldHVybiBjLm92ZXJsYXA9aSxjO2k8Yy5vdmVybGFwJiYoYy5vdmVybGFwPWksYy5heGlzPXMsYy5heGlzTnVtYmVyPWQpfXJldHVybiBjfSxvLl9wcm9qZWN0VG9BeGlzPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIG89ci5kb3QodFswXSxuKSxpPW8scz0xO3M8dC5sZW5ndGg7cys9MSl7dmFyIGE9ci5kb3QodFtzXSxuKTthPmk/aT1hOmE8byYmKG89YSl9ZS5taW49byxlLm1heD1pfSxvLl9maW5kU3VwcG9ydHM9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgbyxpLHMsYSxsPU51bWJlci5NQVhfVkFMVUUsYz1yLl90ZW1wWzBdLGQ9dC52ZXJ0aWNlcyx1PWUucG9zaXRpb24scD0wO3A8ZC5sZW5ndGg7cCsrKWk9ZFtwXSxjLng9aS54LXUueCxjLnk9aS55LXUueSwobz0tci5kb3QobixjKSk8bCYmKGw9byxzPWkpO3JldHVybiBpPWRbcy5pbmRleC0xPj0wP3MuaW5kZXgtMTpkLmxlbmd0aC0xXSxjLng9aS54LXUueCxjLnk9aS55LXUueSxsPS1yLmRvdChuLGMpLGE9aSxpPWRbKHMuaW5kZXgrMSklZC5sZW5ndGhdLGMueD1pLngtdS54LGMueT1pLnktdS55LG89LXIuZG90KG4sYyksbzxsJiYoYT1pKSxbcyxhXX19KCl9LHtcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOX1dLDEyOltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCIpLHI9ZShcIi4uL2dlb21ldHJ5L1ZlY3RvclwiKSxzPWUoXCIuLi9jb3JlL1NsZWVwaW5nXCIpLGE9ZShcIi4uL2dlb21ldHJ5L0JvdW5kc1wiKSxsPWUoXCIuLi9nZW9tZXRyeS9BeGVzXCIpLGM9ZShcIi4uL2NvcmUvQ29tbW9uXCIpOyFmdW5jdGlvbigpe28uX3dhcm1pbmc9LjQsby5fdG9ycXVlRGFtcGVuPTEsby5fbWluTGVuZ3RoPTFlLTYsby5jcmVhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZTt0LmJvZHlBJiYhdC5wb2ludEEmJih0LnBvaW50QT17eDowLHk6MH0pLFxudC5ib2R5QiYmIXQucG9pbnRCJiYodC5wb2ludEI9e3g6MCx5OjB9KTt2YXIgbj10LmJvZHlBP3IuYWRkKHQuYm9keUEucG9zaXRpb24sdC5wb2ludEEpOnQucG9pbnRBLG89dC5ib2R5Qj9yLmFkZCh0LmJvZHlCLnBvc2l0aW9uLHQucG9pbnRCKTp0LnBvaW50QixpPXIubWFnbml0dWRlKHIuc3ViKG4sbykpO3QubGVuZ3RoPXZvaWQgMCE9PXQubGVuZ3RoP3QubGVuZ3RoOmksdC5pZD10LmlkfHxjLm5leHRJZCgpLHQubGFiZWw9dC5sYWJlbHx8XCJDb25zdHJhaW50XCIsdC50eXBlPVwiY29uc3RyYWludFwiLHQuc3RpZmZuZXNzPXQuc3RpZmZuZXNzfHwodC5sZW5ndGg+MD8xOi43KSx0LmRhbXBpbmc9dC5kYW1waW5nfHwwLHQuYW5ndWxhclN0aWZmbmVzcz10LmFuZ3VsYXJTdGlmZm5lc3N8fDAsdC5hbmdsZUE9dC5ib2R5QT90LmJvZHlBLmFuZ2xlOnQuYW5nbGVBLHQuYW5nbGVCPXQuYm9keUI/dC5ib2R5Qi5hbmdsZTp0LmFuZ2xlQix0LnBsdWdpbj17fTt2YXIgcz17dmlzaWJsZTohMCxsaW5lV2lkdGg6MixzdHJva2VTdHlsZTpcIiNmZmZmZmZcIix0eXBlOlwibGluZVwiLGFuY2hvcnM6ITB9O3JldHVybiAwPT09dC5sZW5ndGgmJnQuc3RpZmZuZXNzPi4xPyhzLnR5cGU9XCJwaW5cIixzLmFuY2hvcnM9ITEpOnQuc3RpZmZuZXNzPC45JiYocy50eXBlPVwic3ByaW5nXCIpLHQucmVuZGVyPWMuZXh0ZW5kKHMsdC5yZW5kZXIpLHR9LG8ucHJlU29sdmVBbGw9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kz0xKXt2YXIgbj1lW3RdLG89bi5jb25zdHJhaW50SW1wdWxzZTtuLmlzU3RhdGljfHwwPT09by54JiYwPT09by55JiYwPT09by5hbmdsZXx8KG4ucG9zaXRpb24ueCs9by54LG4ucG9zaXRpb24ueSs9by55LG4uYW5nbGUrPW8uYW5nbGUpfX0sby5zb2x2ZUFsbD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bis9MSl7XG52YXIgaT1lW25dLHI9IWkuYm9keUF8fGkuYm9keUEmJmkuYm9keUEuaXNTdGF0aWMscz0haS5ib2R5Qnx8aS5ib2R5QiYmaS5ib2R5Qi5pc1N0YXRpYzsocnx8cykmJm8uc29sdmUoZVtuXSx0KX1mb3Iobj0wO248ZS5sZW5ndGg7bis9MSlpPWVbbl0scj0haS5ib2R5QXx8aS5ib2R5QSYmaS5ib2R5QS5pc1N0YXRpYyxzPSFpLmJvZHlCfHxpLmJvZHlCJiZpLmJvZHlCLmlzU3RhdGljLHJ8fHN8fG8uc29sdmUoZVtuXSx0KX0sby5zb2x2ZT1mdW5jdGlvbihlLHQpe3ZhciBuPWUuYm9keUEsaT1lLmJvZHlCLHM9ZS5wb2ludEEsYT1lLnBvaW50QjtpZihufHxpKXtuJiYhbi5pc1N0YXRpYyYmKHIucm90YXRlKHMsbi5hbmdsZS1lLmFuZ2xlQSxzKSxlLmFuZ2xlQT1uLmFuZ2xlKSxpJiYhaS5pc1N0YXRpYyYmKHIucm90YXRlKGEsaS5hbmdsZS1lLmFuZ2xlQixhKSxlLmFuZ2xlQj1pLmFuZ2xlKTt2YXIgbD1zLGM9YTtpZihuJiYobD1yLmFkZChuLnBvc2l0aW9uLHMpKSxpJiYoYz1yLmFkZChpLnBvc2l0aW9uLGEpKSxsJiZjKXt2YXIgZD1yLnN1YihsLGMpLHU9ci5tYWduaXR1ZGUoZCk7dTxvLl9taW5MZW5ndGgmJih1PW8uX21pbkxlbmd0aCk7dmFyIHAsZixtLHYseSxnPSh1LWUubGVuZ3RoKS91LHg9ZS5zdGlmZm5lc3M8MT9lLnN0aWZmbmVzcyp0OmUuc3RpZmZuZXNzLGg9ci5tdWx0KGQsZyp4KSxiPShuP24uaW52ZXJzZU1hc3M6MCkrKGk/aS5pbnZlcnNlTWFzczowKSx3PShuP24uaW52ZXJzZUluZXJ0aWE6MCkrKGk/aS5pbnZlcnNlSW5lcnRpYTowKSxTPWIrdztpZihlLmRhbXBpbmcpe3ZhciBDPXIuY3JlYXRlKCk7bT1yLmRpdihkLHUpLHk9ci5zdWIoaSYmci5zdWIoaS5wb3NpdGlvbixpLnBvc2l0aW9uUHJldil8fEMsbiYmci5zdWIobi5wb3NpdGlvbixuLnBvc2l0aW9uUHJldil8fEMpLHY9ci5kb3QobSx5KX1uJiYhbi5pc1N0YXRpYyYmKGY9bi5pbnZlcnNlTWFzcy9iLG4uY29uc3RyYWludEltcHVsc2UueC09aC54KmYsXG5uLmNvbnN0cmFpbnRJbXB1bHNlLnktPWgueSpmLG4ucG9zaXRpb24ueC09aC54KmYsbi5wb3NpdGlvbi55LT1oLnkqZixlLmRhbXBpbmcmJihuLnBvc2l0aW9uUHJldi54LT1lLmRhbXBpbmcqbS54KnYqZixuLnBvc2l0aW9uUHJldi55LT1lLmRhbXBpbmcqbS55KnYqZikscD1yLmNyb3NzKHMsaCkvUypvLl90b3JxdWVEYW1wZW4qbi5pbnZlcnNlSW5lcnRpYSooMS1lLmFuZ3VsYXJTdGlmZm5lc3MpLG4uY29uc3RyYWludEltcHVsc2UuYW5nbGUtPXAsbi5hbmdsZS09cCksaSYmIWkuaXNTdGF0aWMmJihmPWkuaW52ZXJzZU1hc3MvYixpLmNvbnN0cmFpbnRJbXB1bHNlLngrPWgueCpmLGkuY29uc3RyYWludEltcHVsc2UueSs9aC55KmYsaS5wb3NpdGlvbi54Kz1oLngqZixpLnBvc2l0aW9uLnkrPWgueSpmLGUuZGFtcGluZyYmKGkucG9zaXRpb25QcmV2LngrPWUuZGFtcGluZyptLngqdipmLGkucG9zaXRpb25QcmV2LnkrPWUuZGFtcGluZyptLnkqdipmKSxwPXIuY3Jvc3MoYSxoKS9TKm8uX3RvcnF1ZURhbXBlbippLmludmVyc2VJbmVydGlhKigxLWUuYW5ndWxhclN0aWZmbmVzcyksaS5jb25zdHJhaW50SW1wdWxzZS5hbmdsZSs9cCxpLmFuZ2xlKz1wKX19fSxvLnBvc3RTb2x2ZUFsbD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG49ZVt0XSxjPW4uY29uc3RyYWludEltcHVsc2U7aWYoIShuLmlzU3RhdGljfHwwPT09Yy54JiYwPT09Yy55JiYwPT09Yy5hbmdsZSkpe3Muc2V0KG4sITEpO2Zvcih2YXIgZD0wO2Q8bi5wYXJ0cy5sZW5ndGg7ZCsrKXt2YXIgdT1uLnBhcnRzW2RdO2kudHJhbnNsYXRlKHUudmVydGljZXMsYyksZD4wJiYodS5wb3NpdGlvbi54Kz1jLngsdS5wb3NpdGlvbi55Kz1jLnkpLDAhPT1jLmFuZ2xlJiYoaS5yb3RhdGUodS52ZXJ0aWNlcyxjLmFuZ2xlLG4ucG9zaXRpb24pLGwucm90YXRlKHUuYXhlcyxjLmFuZ2xlKSxcbmQ+MCYmci5yb3RhdGVBYm91dCh1LnBvc2l0aW9uLGMuYW5nbGUsbi5wb3NpdGlvbix1LnBvc2l0aW9uKSksYS51cGRhdGUodS5ib3VuZHMsdS52ZXJ0aWNlcyxuLnZlbG9jaXR5KX1jLmFuZ2xlKj1vLl93YXJtaW5nLGMueCo9by5fd2FybWluZyxjLnkqPW8uX3dhcm1pbmd9fX19KCl9LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL1NsZWVwaW5nXCI6MjIsXCIuLi9nZW9tZXRyeS9BeGVzXCI6MjUsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOX1dLDEzOltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCIpLHI9ZShcIi4uL2NvcmUvU2xlZXBpbmdcIikscz1lKFwiLi4vY29yZS9Nb3VzZVwiKSxhPWUoXCIuLi9jb3JlL0V2ZW50c1wiKSxsPWUoXCIuLi9jb2xsaXNpb24vRGV0ZWN0b3JcIiksYz1lKFwiLi9Db25zdHJhaW50XCIpLGQ9ZShcIi4uL2JvZHkvQ29tcG9zaXRlXCIpLHU9ZShcIi4uL2NvcmUvQ29tbW9uXCIpLHA9ZShcIi4uL2dlb21ldHJ5L0JvdW5kc1wiKTshZnVuY3Rpb24oKXtvLmNyZWF0ZT1mdW5jdGlvbihlLHQpe3ZhciBuPShlP2UubW91c2U6bnVsbCl8fCh0P3QubW91c2U6bnVsbCk7bnx8KGUmJmUucmVuZGVyJiZlLnJlbmRlci5jYW52YXM/bj1zLmNyZWF0ZShlLnJlbmRlci5jYW52YXMpOnQmJnQuZWxlbWVudD9uPXMuY3JlYXRlKHQuZWxlbWVudCk6KG49cy5jcmVhdGUoKSx1Lndhcm4oXCJNb3VzZUNvbnN0cmFpbnQuY3JlYXRlOiBvcHRpb25zLm1vdXNlIHdhcyB1bmRlZmluZWQsIG9wdGlvbnMuZWxlbWVudCB3YXMgdW5kZWZpbmVkLCBtYXkgbm90IGZ1bmN0aW9uIGFzIGV4cGVjdGVkXCIpKSk7dmFyIGk9Yy5jcmVhdGUoe2xhYmVsOlwiTW91c2UgQ29uc3RyYWludFwiLHBvaW50QTpuLnBvc2l0aW9uLHBvaW50Qjp7eDowLHk6MH0sbGVuZ3RoOi4wMSxzdGlmZm5lc3M6LjEsYW5ndWxhclN0aWZmbmVzczoxLFxucmVuZGVyOntzdHJva2VTdHlsZTpcIiM5MEVFOTBcIixsaW5lV2lkdGg6M319KSxyPXt0eXBlOlwibW91c2VDb25zdHJhaW50XCIsbW91c2U6bixlbGVtZW50Om51bGwsYm9keTpudWxsLGNvbnN0cmFpbnQ6aSxjb2xsaXNpb25GaWx0ZXI6e2NhdGVnb3J5OjEsbWFzazo0Mjk0OTY3Mjk1LGdyb3VwOjB9fSxsPXUuZXh0ZW5kKHIsdCk7cmV0dXJuIGEub24oZSxcImJlZm9yZVVwZGF0ZVwiLGZ1bmN0aW9uKCl7dmFyIHQ9ZC5hbGxCb2RpZXMoZS53b3JsZCk7by51cGRhdGUobCx0KSxvLl90cmlnZ2VyRXZlbnRzKGwpfSksbH0sby51cGRhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLm1vdXNlLG89ZS5jb25zdHJhaW50LHM9ZS5ib2R5O2lmKDA9PT1uLmJ1dHRvbil7aWYoby5ib2R5QilyLnNldChvLmJvZHlCLCExKSxvLnBvaW50QT1uLnBvc2l0aW9uO2Vsc2UgZm9yKHZhciBjPTA7Yzx0Lmxlbmd0aDtjKyspaWYocz10W2NdLHAuY29udGFpbnMocy5ib3VuZHMsbi5wb3NpdGlvbikmJmwuY2FuQ29sbGlkZShzLmNvbGxpc2lvbkZpbHRlcixlLmNvbGxpc2lvbkZpbHRlcikpZm9yKHZhciBkPXMucGFydHMubGVuZ3RoPjE/MTowO2Q8cy5wYXJ0cy5sZW5ndGg7ZCsrKXt2YXIgdT1zLnBhcnRzW2RdO2lmKGkuY29udGFpbnModS52ZXJ0aWNlcyxuLnBvc2l0aW9uKSl7by5wb2ludEE9bi5wb3NpdGlvbixvLmJvZHlCPWUuYm9keT1zLG8ucG9pbnRCPXt4Om4ucG9zaXRpb24ueC1zLnBvc2l0aW9uLngseTpuLnBvc2l0aW9uLnktcy5wb3NpdGlvbi55fSxvLmFuZ2xlQj1zLmFuZ2xlLHIuc2V0KHMsITEpLGEudHJpZ2dlcihlLFwic3RhcnRkcmFnXCIse21vdXNlOm4sYm9keTpzfSk7YnJlYWt9fX1lbHNlIG8uYm9keUI9ZS5ib2R5PW51bGwsby5wb2ludEI9bnVsbCxzJiZhLnRyaWdnZXIoZSxcImVuZGRyYWdcIix7bW91c2U6bixib2R5OnN9KX0sby5fdHJpZ2dlckV2ZW50cz1mdW5jdGlvbihlKXt2YXIgdD1lLm1vdXNlLG49dC5zb3VyY2VFdmVudHNcbjtuLm1vdXNlbW92ZSYmYS50cmlnZ2VyKGUsXCJtb3VzZW1vdmVcIix7bW91c2U6dH0pLG4ubW91c2Vkb3duJiZhLnRyaWdnZXIoZSxcIm1vdXNlZG93blwiLHttb3VzZTp0fSksbi5tb3VzZXVwJiZhLnRyaWdnZXIoZSxcIm1vdXNldXBcIix7bW91c2U6dH0pLHMuY2xlYXJTb3VyY2VFdmVudHModCl9fSgpfSx7XCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9jb2xsaXNpb24vRGV0ZWN0b3JcIjo1LFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2NvcmUvRXZlbnRzXCI6MTYsXCIuLi9jb3JlL01vdXNlXCI6MTksXCIuLi9jb3JlL1NsZWVwaW5nXCI6MjIsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCI6MjksXCIuL0NvbnN0cmFpbnRcIjoxMn1dLDE0OltmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vLGZ1bmN0aW9uKCl7by5fbmV4dElkPTAsby5fc2VlZD0wLG8uX25vd1N0YXJ0VGltZT0rbmV3IERhdGUsby5leHRlbmQ9ZnVuY3Rpb24oZSx0KXt2YXIgbixpO1wiYm9vbGVhblwiPT10eXBlb2YgdD8obj0yLGk9dCk6KG49MSxpPSEwKTtmb3IodmFyIHI9bjtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt2YXIgcz1hcmd1bWVudHNbcl07aWYocylmb3IodmFyIGEgaW4gcylpJiZzW2FdJiZzW2FdLmNvbnN0cnVjdG9yPT09T2JqZWN0P2VbYV0mJmVbYV0uY29uc3RydWN0b3IhPT1PYmplY3Q/ZVthXT1zW2FdOihlW2FdPWVbYV18fHt9LG8uZXh0ZW5kKGVbYV0saSxzW2FdKSk6ZVthXT1zW2FdfXJldHVybiBlfSxvLmNsb25lPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8uZXh0ZW5kKHt9LHQsZSl9LG8ua2V5cz1mdW5jdGlvbihlKXtpZihPYmplY3Qua2V5cylyZXR1cm4gT2JqZWN0LmtleXMoZSk7dmFyIHQ9W107Zm9yKHZhciBuIGluIGUpdC5wdXNoKG4pO3JldHVybiB0fSxvLnZhbHVlcz1mdW5jdGlvbihlKXt2YXIgdD1bXTtpZihPYmplY3Qua2V5cyl7XG5mb3IodmFyIG49T2JqZWN0LmtleXMoZSksbz0wO288bi5sZW5ndGg7bysrKXQucHVzaChlW25bb11dKTtyZXR1cm4gdH1mb3IodmFyIGkgaW4gZSl0LnB1c2goZVtpXSk7cmV0dXJuIHR9LG8uZ2V0PWZ1bmN0aW9uKGUsdCxuLG8pe3Q9dC5zcGxpdChcIi5cIikuc2xpY2UobixvKTtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krPTEpZT1lW3RbaV1dO3JldHVybiBlfSxvLnNldD1mdW5jdGlvbihlLHQsbixpLHIpe3ZhciBzPXQuc3BsaXQoXCIuXCIpLnNsaWNlKGkscik7cmV0dXJuIG8uZ2V0KGUsdCwwLC0xKVtzW3MubGVuZ3RoLTFdXT1uLG59LG8uc2h1ZmZsZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5sZW5ndGgtMTt0PjA7dC0tKXt2YXIgbj1NYXRoLmZsb29yKG8ucmFuZG9tKCkqKHQrMSkpLGk9ZVt0XTtlW3RdPWVbbl0sZVtuXT1pfXJldHVybiBlfSxvLmNob29zZT1mdW5jdGlvbihlKXtyZXR1cm4gZVtNYXRoLmZsb29yKG8ucmFuZG9tKCkqZS5sZW5ndGgpXX0sby5pc0VsZW1lbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxFbGVtZW50P2UgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDohIShlJiZlLm5vZGVUeXBlJiZlLm5vZGVOYW1lKX0sby5pc0FycmF5PWZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0sby5pc0Z1bmN0aW9uPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9LG8uaXNQbGFpbk9iamVjdD1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmZS5jb25zdHJ1Y3Rvcj09PU9iamVjdH0sby5pc1N0cmluZz1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgU3RyaW5nXVwiPT09dG9TdHJpbmcuY2FsbChlKX0sby5jbGFtcD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGU8dD90OmU+bj9uOmV9LG8uc2lnbj1mdW5jdGlvbihlKXtyZXR1cm4gZTwwPy0xOjF9LG8ubm93PWZ1bmN0aW9uKCl7XG5pZih3aW5kb3cucGVyZm9ybWFuY2Upe2lmKHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cpcmV0dXJuIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtpZih3aW5kb3cucGVyZm9ybWFuY2Uud2Via2l0Tm93KXJldHVybiB3aW5kb3cucGVyZm9ybWFuY2Uud2Via2l0Tm93KCl9cmV0dXJuIG5ldyBEYXRlLW8uX25vd1N0YXJ0VGltZX0sby5yYW5kb209ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZT12b2lkIDAhPT1lP2U6MCxuPXZvaWQgMCE9PW4/bjoxLGUrdCgpKihuLWUpfTt2YXIgdD1mdW5jdGlvbigpe3JldHVybiBvLl9zZWVkPSg5MzAxKm8uX3NlZWQrNDkyOTcpJTIzMzI4MCxvLl9zZWVkLzIzMzI4MH07by5jb2xvclRvTnVtYmVyPWZ1bmN0aW9uKGUpe3JldHVybiBlPWUucmVwbGFjZShcIiNcIixcIlwiKSwzPT1lLmxlbmd0aCYmKGU9ZS5jaGFyQXQoMCkrZS5jaGFyQXQoMCkrZS5jaGFyQXQoMSkrZS5jaGFyQXQoMSkrZS5jaGFyQXQoMikrZS5jaGFyQXQoMikpLHBhcnNlSW50KGUsMTYpfSxvLmxvZ0xldmVsPTEsby5sb2c9ZnVuY3Rpb24oKXtjb25zb2xlJiZvLmxvZ0xldmVsPjAmJm8ubG9nTGV2ZWw8PTMmJmNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsW1wibWF0dGVyLWpzOlwiXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpfSxvLmluZm89ZnVuY3Rpb24oKXtjb25zb2xlJiZvLmxvZ0xldmVsPjAmJm8ubG9nTGV2ZWw8PTImJmNvbnNvbGUuaW5mby5hcHBseShjb25zb2xlLFtcIm1hdHRlci1qczpcIl0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKX0sby53YXJuPWZ1bmN0aW9uKCl7Y29uc29sZSYmby5sb2dMZXZlbD4wJiZvLmxvZ0xldmVsPD0zJiZjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSxbXCJtYXR0ZXItanM6XCJdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSl9LG8ubmV4dElkPWZ1bmN0aW9uKCl7cmV0dXJuIG8uX25leHRJZCsrfSxcbm8uaW5kZXhPZj1mdW5jdGlvbihlLHQpe2lmKGUuaW5kZXhPZilyZXR1cm4gZS5pbmRleE9mKHQpO2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKWlmKGVbbl09PT10KXJldHVybiBuO3JldHVybi0xfSxvLm1hcD1mdW5jdGlvbihlLHQpe2lmKGUubWFwKXJldHVybiBlLm1hcCh0KTtmb3IodmFyIG49W10sbz0wO288ZS5sZW5ndGg7bys9MSluLnB1c2godChlW29dKSk7cmV0dXJuIG59LG8udG9wb2xvZ2ljYWxTb3J0PWZ1bmN0aW9uKGUpe3ZhciB0PVtdLG49W10saT1bXTtmb3IodmFyIHIgaW4gZSluW3JdfHxpW3JdfHxvLl90b3BvbG9naWNhbFNvcnQocixuLGksZSx0KTtyZXR1cm4gdH0sby5fdG9wb2xvZ2ljYWxTb3J0PWZ1bmN0aW9uKGUsdCxuLGkscil7dmFyIHM9aVtlXXx8W107bltlXT0hMDtmb3IodmFyIGE9MDthPHMubGVuZ3RoO2ErPTEpe3ZhciBsPXNbYV07bltsXXx8KHRbbF18fG8uX3RvcG9sb2dpY2FsU29ydChsLHQsbixpLHIpKX1uW2VdPSExLHRbZV09ITAsci5wdXNoKGUpfSxvLmNoYWluPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCs9MSl7dmFyIG49YXJndW1lbnRzW3RdO24uX2NoYWluZWQ/ZS5wdXNoLmFwcGx5KGUsbi5fY2hhaW5lZCk6ZS5wdXNoKG4pfXZhciBvPWZ1bmN0aW9uKCl7Zm9yKHZhciB0LG49bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLG89MCxpPWFyZ3VtZW50cy5sZW5ndGg7bzxpO28rKyluW29dPWFyZ3VtZW50c1tvXTtmb3Iobz0wO288ZS5sZW5ndGg7bys9MSl7dmFyIHI9ZVtvXS5hcHBseSh0LG4pO3ZvaWQgMCE9PXImJih0PXIpfXJldHVybiB0fTtyZXR1cm4gby5fY2hhaW5lZD1lLG99LG8uY2hhaW5QYXRoQmVmb3JlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gby5zZXQoZSx0LG8uY2hhaW4obixvLmdldChlLHQpKSl9LG8uY2hhaW5QYXRoQWZ0ZXI9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBvLnNldChlLHQsby5jaGFpbihvLmdldChlLHQpLG4pKX0sXG5vLl9yZXF1aXJlR2xvYmFsPWZ1bmN0aW9uKHQsbyl7cmV0dXJuKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93W3RdOnZvaWQgMCE9PW4/blt0XTpudWxsKXx8ZShvKX19KCl9KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XSwxNTpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuLi9ib2R5L1dvcmxkXCIpLHI9ZShcIi4vU2xlZXBpbmdcIikscz1lKFwiLi4vY29sbGlzaW9uL1Jlc29sdmVyXCIpLGE9ZShcIi4uL3JlbmRlci9SZW5kZXJcIiksbD1lKFwiLi4vY29sbGlzaW9uL1BhaXJzXCIpLGM9KGUoXCIuL01ldHJpY3NcIiksZShcIi4uL2NvbGxpc2lvbi9HcmlkXCIpKSxkPWUoXCIuL0V2ZW50c1wiKSx1PWUoXCIuLi9ib2R5L0NvbXBvc2l0ZVwiKSxwPWUoXCIuLi9jb25zdHJhaW50L0NvbnN0cmFpbnRcIiksZj1lKFwiLi9Db21tb25cIiksbT1lKFwiLi4vYm9keS9Cb2R5XCIpOyFmdW5jdGlvbigpe28uY3JlYXRlPWZ1bmN0aW9uKGUsdCl7dD1mLmlzRWxlbWVudChlKT90OmUsZT1mLmlzRWxlbWVudChlKT9lOm51bGwsdD10fHx7fSwoZXx8dC5yZW5kZXIpJiZmLndhcm4oXCJFbmdpbmUuY3JlYXRlOiBlbmdpbmUucmVuZGVyIGlzIGRlcHJlY2F0ZWQgKHNlZSBkb2NzKVwiKTt2YXIgbj17cG9zaXRpb25JdGVyYXRpb25zOjYsdmVsb2NpdHlJdGVyYXRpb25zOjQsY29uc3RyYWludEl0ZXJhdGlvbnM6MixlbmFibGVTbGVlcGluZzohMSxldmVudHM6W10scGx1Z2luOnt9LHRpbWluZzp7dGltZXN0YW1wOjAsdGltZVNjYWxlOjF9LGJyb2FkcGhhc2U6e2NvbnRyb2xsZXI6Y319LG89Zi5leHRlbmQobix0KTtpZihlfHxvLnJlbmRlcil7dmFyIHI9e2VsZW1lbnQ6ZSxjb250cm9sbGVyOmF9O28ucmVuZGVyPWYuZXh0ZW5kKHIsby5yZW5kZXIpfVxucmV0dXJuIG8ucmVuZGVyJiZvLnJlbmRlci5jb250cm9sbGVyJiYoby5yZW5kZXI9by5yZW5kZXIuY29udHJvbGxlci5jcmVhdGUoby5yZW5kZXIpKSxvLnJlbmRlciYmKG8ucmVuZGVyLmVuZ2luZT1vKSxvLndvcmxkPXQud29ybGR8fGkuY3JlYXRlKG8ud29ybGQpLG8ucGFpcnM9bC5jcmVhdGUoKSxvLmJyb2FkcGhhc2U9by5icm9hZHBoYXNlLmNvbnRyb2xsZXIuY3JlYXRlKG8uYnJvYWRwaGFzZSksby5tZXRyaWNzPW8ubWV0cmljc3x8e2V4dGVuZGVkOiExfSxvfSxvLnVwZGF0ZT1mdW5jdGlvbihlLHQsbil7dD10fHwxZTMvNjAsbj1ufHwxO3ZhciBpLGE9ZS53b3JsZCxjPWUudGltaW5nLGY9ZS5icm9hZHBoYXNlLG09W107Yy50aW1lc3RhbXArPXQqYy50aW1lU2NhbGU7dmFyIHY9e3RpbWVzdGFtcDpjLnRpbWVzdGFtcH07ZC50cmlnZ2VyKGUsXCJiZWZvcmVVcGRhdGVcIix2KTt2YXIgeT11LmFsbEJvZGllcyhhKSxnPXUuYWxsQ29uc3RyYWludHMoYSk7Zm9yKGUuZW5hYmxlU2xlZXBpbmcmJnIudXBkYXRlKHksYy50aW1lU2NhbGUpLG8uX2JvZGllc0FwcGx5R3Jhdml0eSh5LGEuZ3Jhdml0eSksby5fYm9kaWVzVXBkYXRlKHksdCxjLnRpbWVTY2FsZSxuLGEuYm91bmRzKSxwLnByZVNvbHZlQWxsKHkpLGk9MDtpPGUuY29uc3RyYWludEl0ZXJhdGlvbnM7aSsrKXAuc29sdmVBbGwoZyxjLnRpbWVTY2FsZSk7cC5wb3N0U29sdmVBbGwoeSksZi5jb250cm9sbGVyPyhhLmlzTW9kaWZpZWQmJmYuY29udHJvbGxlci5jbGVhcihmKSxmLmNvbnRyb2xsZXIudXBkYXRlKGYseSxlLGEuaXNNb2RpZmllZCksbT1mLnBhaXJzTGlzdCk6bT15LGEuaXNNb2RpZmllZCYmdS5zZXRNb2RpZmllZChhLCExLCExLCEwKTt2YXIgeD1mLmRldGVjdG9yKG0sZSksaD1lLnBhaXJzLGI9Yy50aW1lc3RhbXA7Zm9yKGwudXBkYXRlKGgseCxiKSxsLnJlbW92ZU9sZChoLGIpLGUuZW5hYmxlU2xlZXBpbmcmJnIuYWZ0ZXJDb2xsaXNpb25zKGgubGlzdCxjLnRpbWVTY2FsZSksXG5oLmNvbGxpc2lvblN0YXJ0Lmxlbmd0aD4wJiZkLnRyaWdnZXIoZSxcImNvbGxpc2lvblN0YXJ0XCIse3BhaXJzOmguY29sbGlzaW9uU3RhcnR9KSxzLnByZVNvbHZlUG9zaXRpb24oaC5saXN0KSxpPTA7aTxlLnBvc2l0aW9uSXRlcmF0aW9ucztpKyspcy5zb2x2ZVBvc2l0aW9uKGgubGlzdCxjLnRpbWVTY2FsZSk7Zm9yKHMucG9zdFNvbHZlUG9zaXRpb24oeSkscC5wcmVTb2x2ZUFsbCh5KSxpPTA7aTxlLmNvbnN0cmFpbnRJdGVyYXRpb25zO2krKylwLnNvbHZlQWxsKGcsYy50aW1lU2NhbGUpO2ZvcihwLnBvc3RTb2x2ZUFsbCh5KSxzLnByZVNvbHZlVmVsb2NpdHkoaC5saXN0KSxpPTA7aTxlLnZlbG9jaXR5SXRlcmF0aW9ucztpKyspcy5zb2x2ZVZlbG9jaXR5KGgubGlzdCxjLnRpbWVTY2FsZSk7cmV0dXJuIGguY29sbGlzaW9uQWN0aXZlLmxlbmd0aD4wJiZkLnRyaWdnZXIoZSxcImNvbGxpc2lvbkFjdGl2ZVwiLHtwYWlyczpoLmNvbGxpc2lvbkFjdGl2ZX0pLGguY29sbGlzaW9uRW5kLmxlbmd0aD4wJiZkLnRyaWdnZXIoZSxcImNvbGxpc2lvbkVuZFwiLHtwYWlyczpoLmNvbGxpc2lvbkVuZH0pLG8uX2JvZGllc0NsZWFyRm9yY2VzKHkpLGQudHJpZ2dlcihlLFwiYWZ0ZXJVcGRhdGVcIix2KSxlfSxvLm1lcmdlPWZ1bmN0aW9uKGUsdCl7aWYoZi5leHRlbmQoZSx0KSx0LndvcmxkKXtlLndvcmxkPXQud29ybGQsby5jbGVhcihlKTtmb3IodmFyIG49dS5hbGxCb2RpZXMoZS53b3JsZCksaT0wO2k8bi5sZW5ndGg7aSsrKXt2YXIgcz1uW2ldO3Iuc2V0KHMsITEpLHMuaWQ9Zi5uZXh0SWQoKX19fSxvLmNsZWFyPWZ1bmN0aW9uKGUpe3ZhciB0PWUud29ybGQ7bC5jbGVhcihlLnBhaXJzKTt2YXIgbj1lLmJyb2FkcGhhc2U7aWYobi5jb250cm9sbGVyKXt2YXIgbz11LmFsbEJvZGllcyh0KTtuLmNvbnRyb2xsZXIuY2xlYXIobiksbi5jb250cm9sbGVyLnVwZGF0ZShuLG8sZSwhMCl9fSxvLl9ib2RpZXNDbGVhckZvcmNlcz1mdW5jdGlvbihlKXtcbmZvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgbj1lW3RdO24uZm9yY2UueD0wLG4uZm9yY2UueT0wLG4udG9ycXVlPTB9fSxvLl9ib2RpZXNBcHBseUdyYXZpdHk9ZnVuY3Rpb24oZSx0KXt2YXIgbj12b2lkIDAhPT10LnNjYWxlP3Quc2NhbGU6LjAwMTtpZigoMCE9PXQueHx8MCE9PXQueSkmJjAhPT1uKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgaT1lW29dO2kuaXNTdGF0aWN8fGkuaXNTbGVlcGluZ3x8KGkuZm9yY2UueSs9aS5tYXNzKnQueSpuLGkuZm9yY2UueCs9aS5tYXNzKnQueCpuKX19LG8uX2JvZGllc1VwZGF0ZT1mdW5jdGlvbihlLHQsbixvLGkpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgcz1lW3JdO3MuaXNTdGF0aWN8fHMuaXNTbGVlcGluZ3x8bS51cGRhdGUocyx0LG4sbyl9fX0oKX0se1wiLi4vYm9keS9Cb2R5XCI6MSxcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4uL2JvZHkvV29ybGRcIjozLFwiLi4vY29sbGlzaW9uL0dyaWRcIjo2LFwiLi4vY29sbGlzaW9uL1BhaXJzXCI6OCxcIi4uL2NvbGxpc2lvbi9SZXNvbHZlclwiOjEwLFwiLi4vY29uc3RyYWludC9Db25zdHJhaW50XCI6MTIsXCIuLi9yZW5kZXIvUmVuZGVyXCI6MzEsXCIuL0NvbW1vblwiOjE0LFwiLi9FdmVudHNcIjoxNixcIi4vTWV0cmljc1wiOjE4LFwiLi9TbGVlcGluZ1wiOjIyfV0sMTY6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9bzt2YXIgaT1lKFwiLi9Db21tb25cIik7IWZ1bmN0aW9uKCl7by5vbj1mdW5jdGlvbihlLHQsbil7Zm9yKHZhciBvLGk9dC5zcGxpdChcIiBcIikscj0wO3I8aS5sZW5ndGg7cisrKW89aVtyXSxlLmV2ZW50cz1lLmV2ZW50c3x8e30sZS5ldmVudHNbb109ZS5ldmVudHNbb118fFtdLGUuZXZlbnRzW29dLnB1c2gobik7cmV0dXJuIG59LG8ub2ZmPWZ1bmN0aW9uKGUsdCxuKXtpZighdClyZXR1cm4gdm9pZChlLmV2ZW50cz17fSk7XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKG49dCx0PWkua2V5cyhlLmV2ZW50cykuam9pbihcIiBcIikpXG47Zm9yKHZhciBvPXQuc3BsaXQoXCIgXCIpLHI9MDtyPG8ubGVuZ3RoO3IrKyl7dmFyIHM9ZS5ldmVudHNbb1tyXV0sYT1bXTtpZihuJiZzKWZvcih2YXIgbD0wO2w8cy5sZW5ndGg7bCsrKXNbbF0hPT1uJiZhLnB1c2goc1tsXSk7ZS5ldmVudHNbb1tyXV09YX19LG8udHJpZ2dlcj1mdW5jdGlvbihlLHQsbil7dmFyIG8scixzLGE7aWYoZS5ldmVudHMpe258fChuPXt9KSxvPXQuc3BsaXQoXCIgXCIpO2Zvcih2YXIgbD0wO2w8by5sZW5ndGg7bCsrKWlmKHI9b1tsXSxzPWUuZXZlbnRzW3JdKXthPWkuY2xvbmUobiwhMSksYS5uYW1lPXIsYS5zb3VyY2U9ZTtmb3IodmFyIGM9MDtjPHMubGVuZ3RoO2MrKylzW2NdLmFwcGx5KGUsW2FdKX19fX0oKX0se1wiLi9Db21tb25cIjoxNH1dLDE3OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4vUGx1Z2luXCIpLHI9ZShcIi4vQ29tbW9uXCIpOyFmdW5jdGlvbigpe28ubmFtZT1cIm1hdHRlci1qc1wiLG8udmVyc2lvbj1cIjAuMTQuMlwiLG8udXNlcz1bXSxvLnVzZWQ9W10sby51c2U9ZnVuY3Rpb24oKXtpLnVzZShvLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpfSxvLmJlZm9yZT1mdW5jdGlvbihlLHQpe3JldHVybiBlPWUucmVwbGFjZSgvXk1hdHRlci4vLFwiXCIpLHIuY2hhaW5QYXRoQmVmb3JlKG8sZSx0KX0sby5hZnRlcj1mdW5jdGlvbihlLHQpe3JldHVybiBlPWUucmVwbGFjZSgvXk1hdHRlci4vLFwiXCIpLHIuY2hhaW5QYXRoQWZ0ZXIobyxlLHQpfX0oKX0se1wiLi9Db21tb25cIjoxNCxcIi4vUGx1Z2luXCI6MjB9XSwxODpbZnVuY3Rpb24oZSx0LG4pe30se1wiLi4vYm9keS9Db21wb3NpdGVcIjoyLFwiLi9Db21tb25cIjoxNH1dLDE5OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4uL2NvcmUvQ29tbW9uXCIpOyFmdW5jdGlvbigpe28uY3JlYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PXt9XG47cmV0dXJuIGV8fGkubG9nKFwiTW91c2UuY3JlYXRlOiBlbGVtZW50IHdhcyB1bmRlZmluZWQsIGRlZmF1bHRpbmcgdG8gZG9jdW1lbnQuYm9keVwiLFwid2FyblwiKSx0LmVsZW1lbnQ9ZXx8ZG9jdW1lbnQuYm9keSx0LmFic29sdXRlPXt4OjAseTowfSx0LnBvc2l0aW9uPXt4OjAseTowfSx0Lm1vdXNlZG93blBvc2l0aW9uPXt4OjAseTowfSx0Lm1vdXNldXBQb3NpdGlvbj17eDowLHk6MH0sdC5vZmZzZXQ9e3g6MCx5OjB9LHQuc2NhbGU9e3g6MSx5OjF9LHQud2hlZWxEZWx0YT0wLHQuYnV0dG9uPS0xLHQucGl4ZWxSYXRpbz10LmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1waXhlbC1yYXRpb1wiKXx8MSx0LnNvdXJjZUV2ZW50cz17bW91c2Vtb3ZlOm51bGwsbW91c2Vkb3duOm51bGwsbW91c2V1cDpudWxsLG1vdXNld2hlZWw6bnVsbH0sdC5tb3VzZW1vdmU9ZnVuY3Rpb24oZSl7dmFyIG49by5fZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uKGUsdC5lbGVtZW50LHQucGl4ZWxSYXRpbyk7ZS5jaGFuZ2VkVG91Y2hlcyYmKHQuYnV0dG9uPTAsZS5wcmV2ZW50RGVmYXVsdCgpKSx0LmFic29sdXRlLng9bi54LHQuYWJzb2x1dGUueT1uLnksdC5wb3NpdGlvbi54PXQuYWJzb2x1dGUueCp0LnNjYWxlLngrdC5vZmZzZXQueCx0LnBvc2l0aW9uLnk9dC5hYnNvbHV0ZS55KnQuc2NhbGUueSt0Lm9mZnNldC55LHQuc291cmNlRXZlbnRzLm1vdXNlbW92ZT1lfSx0Lm1vdXNlZG93bj1mdW5jdGlvbihlKXt2YXIgbj1vLl9nZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24oZSx0LmVsZW1lbnQsdC5waXhlbFJhdGlvKTtlLmNoYW5nZWRUb3VjaGVzPyh0LmJ1dHRvbj0wLGUucHJldmVudERlZmF1bHQoKSk6dC5idXR0b249ZS5idXR0b24sdC5hYnNvbHV0ZS54PW4ueCx0LmFic29sdXRlLnk9bi55LHQucG9zaXRpb24ueD10LmFic29sdXRlLngqdC5zY2FsZS54K3Qub2Zmc2V0LngsdC5wb3NpdGlvbi55PXQuYWJzb2x1dGUueSp0LnNjYWxlLnkrdC5vZmZzZXQueSxcbnQubW91c2Vkb3duUG9zaXRpb24ueD10LnBvc2l0aW9uLngsdC5tb3VzZWRvd25Qb3NpdGlvbi55PXQucG9zaXRpb24ueSx0LnNvdXJjZUV2ZW50cy5tb3VzZWRvd249ZX0sdC5tb3VzZXVwPWZ1bmN0aW9uKGUpe3ZhciBuPW8uX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvbihlLHQuZWxlbWVudCx0LnBpeGVsUmF0aW8pO2UuY2hhbmdlZFRvdWNoZXMmJmUucHJldmVudERlZmF1bHQoKSx0LmJ1dHRvbj0tMSx0LmFic29sdXRlLng9bi54LHQuYWJzb2x1dGUueT1uLnksdC5wb3NpdGlvbi54PXQuYWJzb2x1dGUueCp0LnNjYWxlLngrdC5vZmZzZXQueCx0LnBvc2l0aW9uLnk9dC5hYnNvbHV0ZS55KnQuc2NhbGUueSt0Lm9mZnNldC55LHQubW91c2V1cFBvc2l0aW9uLng9dC5wb3NpdGlvbi54LHQubW91c2V1cFBvc2l0aW9uLnk9dC5wb3NpdGlvbi55LHQuc291cmNlRXZlbnRzLm1vdXNldXA9ZX0sdC5tb3VzZXdoZWVsPWZ1bmN0aW9uKGUpe3Qud2hlZWxEZWx0YT1NYXRoLm1heCgtMSxNYXRoLm1pbigxLGUud2hlZWxEZWx0YXx8LWUuZGV0YWlsKSksZS5wcmV2ZW50RGVmYXVsdCgpfSxvLnNldEVsZW1lbnQodCx0LmVsZW1lbnQpLHR9LG8uc2V0RWxlbWVudD1mdW5jdGlvbihlLHQpe2UuZWxlbWVudD10LHQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLGUubW91c2Vtb3ZlKSx0LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIixlLm1vdXNlZG93biksdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLGUubW91c2V1cCksdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V3aGVlbFwiLGUubW91c2V3aGVlbCksdC5hZGRFdmVudExpc3RlbmVyKFwiRE9NTW91c2VTY3JvbGxcIixlLm1vdXNld2hlZWwpLHQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLGUubW91c2Vtb3ZlKSx0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsZS5tb3VzZWRvd24pLHQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsZS5tb3VzZXVwKX0sXG5vLmNsZWFyU291cmNlRXZlbnRzPWZ1bmN0aW9uKGUpe2Uuc291cmNlRXZlbnRzLm1vdXNlbW92ZT1udWxsLGUuc291cmNlRXZlbnRzLm1vdXNlZG93bj1udWxsLGUuc291cmNlRXZlbnRzLm1vdXNldXA9bnVsbCxlLnNvdXJjZUV2ZW50cy5tb3VzZXdoZWVsPW51bGwsZS53aGVlbERlbHRhPTB9LG8uc2V0T2Zmc2V0PWZ1bmN0aW9uKGUsdCl7ZS5vZmZzZXQueD10LngsZS5vZmZzZXQueT10LnksZS5wb3NpdGlvbi54PWUuYWJzb2x1dGUueCplLnNjYWxlLngrZS5vZmZzZXQueCxlLnBvc2l0aW9uLnk9ZS5hYnNvbHV0ZS55KmUuc2NhbGUueStlLm9mZnNldC55fSxvLnNldFNjYWxlPWZ1bmN0aW9uKGUsdCl7ZS5zY2FsZS54PXQueCxlLnNjYWxlLnk9dC55LGUucG9zaXRpb24ueD1lLmFic29sdXRlLngqZS5zY2FsZS54K2Uub2Zmc2V0LngsZS5wb3NpdGlvbi55PWUuYWJzb2x1dGUueSplLnNjYWxlLnkrZS5vZmZzZXQueX0sby5fZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpLHI9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxzPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudHx8ZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlfHxkb2N1bWVudC5ib2R5LGE9dm9pZCAwIT09d2luZG93LnBhZ2VYT2Zmc2V0P3dpbmRvdy5wYWdlWE9mZnNldDpzLnNjcm9sbExlZnQsbD12b2lkIDAhPT13aW5kb3cucGFnZVlPZmZzZXQ/d2luZG93LnBhZ2VZT2Zmc2V0OnMuc2Nyb2xsVG9wLGM9ZS5jaGFuZ2VkVG91Y2hlcztyZXR1cm4gYz8obz1jWzBdLnBhZ2VYLXIubGVmdC1hLGk9Y1swXS5wYWdlWS1yLnRvcC1sKToobz1lLnBhZ2VYLXIubGVmdC1hLGk9ZS5wYWdlWS1yLnRvcC1sKSx7eDpvLyh0LmNsaWVudFdpZHRoLyh0LndpZHRofHx0LmNsaWVudFdpZHRoKSpuKSx5OmkvKHQuY2xpZW50SGVpZ2h0Lyh0LmhlaWdodHx8dC5jbGllbnRIZWlnaHQpKm4pfX19KCl9LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTR9XSwyMDpbZnVuY3Rpb24oZSx0LG4pe1xudmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4vQ29tbW9uXCIpOyFmdW5jdGlvbigpe28uX3JlZ2lzdHJ5PXt9LG8ucmVnaXN0ZXI9ZnVuY3Rpb24oZSl7aWYoby5pc1BsdWdpbihlKXx8aS53YXJuKFwiUGx1Z2luLnJlZ2lzdGVyOlwiLG8udG9TdHJpbmcoZSksXCJkb2VzIG5vdCBpbXBsZW1lbnQgYWxsIHJlcXVpcmVkIGZpZWxkcy5cIiksZS5uYW1lIGluIG8uX3JlZ2lzdHJ5KXt2YXIgdD1vLl9yZWdpc3RyeVtlLm5hbWVdLG49by52ZXJzaW9uUGFyc2UoZS52ZXJzaW9uKS5udW1iZXIscj1vLnZlcnNpb25QYXJzZSh0LnZlcnNpb24pLm51bWJlcjtuPnI/KGkud2FybihcIlBsdWdpbi5yZWdpc3RlcjpcIixvLnRvU3RyaW5nKHQpLFwid2FzIHVwZ3JhZGVkIHRvXCIsby50b1N0cmluZyhlKSksby5fcmVnaXN0cnlbZS5uYW1lXT1lKTpuPHI/aS53YXJuKFwiUGx1Z2luLnJlZ2lzdGVyOlwiLG8udG9TdHJpbmcodCksXCJjYW4gbm90IGJlIGRvd25ncmFkZWQgdG9cIixvLnRvU3RyaW5nKGUpKTplIT09dCYmaS53YXJuKFwiUGx1Z2luLnJlZ2lzdGVyOlwiLG8udG9TdHJpbmcoZSksXCJpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgdG8gZGlmZmVyZW50IHBsdWdpbiBvYmplY3RcIil9ZWxzZSBvLl9yZWdpc3RyeVtlLm5hbWVdPWU7cmV0dXJuIGV9LG8ucmVzb2x2ZT1mdW5jdGlvbihlKXtyZXR1cm4gby5fcmVnaXN0cnlbby5kZXBlbmRlbmN5UGFyc2UoZSkubmFtZV19LG8udG9TdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/ZTooZS5uYW1lfHxcImFub255bW91c1wiKStcIkBcIisoZS52ZXJzaW9ufHxlLnJhbmdlfHxcIjAuMC4wXCIpfSxvLmlzUGx1Z2luPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLm5hbWUmJmUudmVyc2lvbiYmZS5pbnN0YWxsfSxvLmlzVXNlZD1mdW5jdGlvbihlLHQpe3JldHVybiBlLnVzZWQuaW5kZXhPZih0KT4tMX0sby5pc0Zvcj1mdW5jdGlvbihlLHQpe3ZhciBuPWUuZm9yJiZvLmRlcGVuZGVuY3lQYXJzZShlLmZvcilcbjtyZXR1cm4hZS5mb3J8fHQubmFtZT09PW4ubmFtZSYmby52ZXJzaW9uU2F0aXNmaWVzKHQudmVyc2lvbixuLnJhbmdlKX0sby51c2U9ZnVuY3Rpb24oZSx0KXtpZihlLnVzZXM9KGUudXNlc3x8W10pLmNvbmNhdCh0fHxbXSksMD09PWUudXNlcy5sZW5ndGgpcmV0dXJuIHZvaWQgaS53YXJuKFwiUGx1Z2luLnVzZTpcIixvLnRvU3RyaW5nKGUpLFwiZG9lcyBub3Qgc3BlY2lmeSBhbnkgZGVwZW5kZW5jaWVzIHRvIGluc3RhbGwuXCIpO2Zvcih2YXIgbj1vLmRlcGVuZGVuY2llcyhlKSxyPWkudG9wb2xvZ2ljYWxTb3J0KG4pLHM9W10sYT0wO2E8ci5sZW5ndGg7YSs9MSlpZihyW2FdIT09ZS5uYW1lKXt2YXIgbD1vLnJlc29sdmUoclthXSk7bD9vLmlzVXNlZChlLGwubmFtZSl8fChvLmlzRm9yKGwsZSl8fChpLndhcm4oXCJQbHVnaW4udXNlOlwiLG8udG9TdHJpbmcobCksXCJpcyBmb3JcIixsLmZvcixcImJ1dCBpbnN0YWxsZWQgb25cIixvLnRvU3RyaW5nKGUpK1wiLlwiKSxsLl93YXJuZWQ9ITApLGwuaW5zdGFsbD9sLmluc3RhbGwoZSk6KGkud2FybihcIlBsdWdpbi51c2U6XCIsby50b1N0cmluZyhsKSxcImRvZXMgbm90IHNwZWNpZnkgYW4gaW5zdGFsbCBmdW5jdGlvbi5cIiksbC5fd2FybmVkPSEwKSxsLl93YXJuZWQ/KHMucHVzaChcIvCflLYgXCIrby50b1N0cmluZyhsKSksZGVsZXRlIGwuX3dhcm5lZCk6cy5wdXNoKFwi4pyFIFwiK28udG9TdHJpbmcobCkpLGUudXNlZC5wdXNoKGwubmFtZSkpOnMucHVzaChcIuKdjCBcIityW2FdKX1zLmxlbmd0aD4wJiZpLmluZm8ocy5qb2luKFwiICBcIikpfSxvLmRlcGVuZGVuY2llcz1mdW5jdGlvbihlLHQpe3ZhciBuPW8uZGVwZW5kZW5jeVBhcnNlKGUpLHI9bi5uYW1lO2lmKHQ9dHx8e30sIShyIGluIHQpKXtlPW8ucmVzb2x2ZShlKXx8ZSx0W3JdPWkubWFwKGUudXNlc3x8W10sZnVuY3Rpb24odCl7by5pc1BsdWdpbih0KSYmby5yZWdpc3Rlcih0KTt2YXIgcj1vLmRlcGVuZGVuY3lQYXJzZSh0KSxzPW8ucmVzb2x2ZSh0KVxuO3JldHVybiBzJiYhby52ZXJzaW9uU2F0aXNmaWVzKHMudmVyc2lvbixyLnJhbmdlKT8oaS53YXJuKFwiUGx1Z2luLmRlcGVuZGVuY2llczpcIixvLnRvU3RyaW5nKHMpLFwiZG9lcyBub3Qgc2F0aXNmeVwiLG8udG9TdHJpbmcociksXCJ1c2VkIGJ5XCIsby50b1N0cmluZyhuKStcIi5cIikscy5fd2FybmVkPSEwLGUuX3dhcm5lZD0hMCk6c3x8KGkud2FybihcIlBsdWdpbi5kZXBlbmRlbmNpZXM6XCIsby50b1N0cmluZyh0KSxcInVzZWQgYnlcIixvLnRvU3RyaW5nKG4pLFwiY291bGQgbm90IGJlIHJlc29sdmVkLlwiKSxlLl93YXJuZWQ9ITApLHIubmFtZX0pO2Zvcih2YXIgcz0wO3M8dFtyXS5sZW5ndGg7cys9MSlvLmRlcGVuZGVuY2llcyh0W3JdW3NdLHQpO3JldHVybiB0fX0sby5kZXBlbmRlbmN5UGFyc2U9ZnVuY3Rpb24oZSl7aWYoaS5pc1N0cmluZyhlKSl7cmV0dXJuL15bXFx3LV0rKEAoXFwqfFtcXF5+XT9cXGQrXFwuXFxkK1xcLlxcZCsoLVswLTlBLVphLXotXSspPykpPyQvLnRlc3QoZSl8fGkud2FybihcIlBsdWdpbi5kZXBlbmRlbmN5UGFyc2U6XCIsZSxcImlzIG5vdCBhIHZhbGlkIGRlcGVuZGVuY3kgc3RyaW5nLlwiKSx7bmFtZTplLnNwbGl0KFwiQFwiKVswXSxyYW5nZTplLnNwbGl0KFwiQFwiKVsxXXx8XCIqXCJ9fXJldHVybntuYW1lOmUubmFtZSxyYW5nZTplLnJhbmdlfHxlLnZlcnNpb259fSxvLnZlcnNpb25QYXJzZT1mdW5jdGlvbihlKXsvXlxcKnxbXFxefl0/XFxkK1xcLlxcZCtcXC5cXGQrKC1bMC05QS1aYS16LV0rKT8kLy50ZXN0KGUpfHxpLndhcm4oXCJQbHVnaW4udmVyc2lvblBhcnNlOlwiLGUsXCJpcyBub3QgYSB2YWxpZCB2ZXJzaW9uIG9yIHJhbmdlLlwiKTt2YXIgdD1lLnNwbGl0KFwiLVwiKTtlPXRbMF07dmFyIG49aXNOYU4oTnVtYmVyKGVbMF0pKSxvPW4/ZS5zdWJzdHIoMSk6ZSxyPWkubWFwKG8uc3BsaXQoXCIuXCIpLGZ1bmN0aW9uKGUpe3JldHVybiBOdW1iZXIoZSl9KTtyZXR1cm57aXNSYW5nZTpuLHZlcnNpb246byxyYW5nZTplLG9wZXJhdG9yOm4/ZVswXTpcIlwiLHBhcnRzOnIsXG5wcmVyZWxlYXNlOnRbMV0sbnVtYmVyOjFlOCpyWzBdKzFlNCpyWzFdK3JbMl19fSxvLnZlcnNpb25TYXRpc2ZpZXM9ZnVuY3Rpb24oZSx0KXt0PXR8fFwiKlwiO3ZhciBuPW8udmVyc2lvblBhcnNlKHQpLGk9bi5wYXJ0cyxyPW8udmVyc2lvblBhcnNlKGUpLHM9ci5wYXJ0cztpZihuLmlzUmFuZ2Upe2lmKFwiKlwiPT09bi5vcGVyYXRvcnx8XCIqXCI9PT1lKXJldHVybiEwO2lmKFwiflwiPT09bi5vcGVyYXRvcilyZXR1cm4gc1swXT09PWlbMF0mJnNbMV09PT1pWzFdJiZzWzJdPj1pWzJdO2lmKFwiXlwiPT09bi5vcGVyYXRvcilyZXR1cm4gaVswXT4wP3NbMF09PT1pWzBdJiZyLm51bWJlcj49bi5udW1iZXI6aVsxXT4wP3NbMV09PT1pWzFdJiZzWzJdPj1pWzJdOnNbMl09PT1pWzJdfXJldHVybiBlPT09dHx8XCIqXCI9PT1lfX0oKX0se1wiLi9Db21tb25cIjoxNH1dLDIxOltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4vRXZlbnRzXCIpLHI9ZShcIi4vRW5naW5lXCIpLHM9ZShcIi4vQ29tbW9uXCIpOyFmdW5jdGlvbigpe3ZhciBlLHQ7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKGU9d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lLHQ9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWV8fHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93Lm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWUpLCFlKXt2YXIgbjtlPWZ1bmN0aW9uKGUpe249c2V0VGltZW91dChmdW5jdGlvbigpe2Uocy5ub3coKSl9LDFlMy82MCl9LHQ9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQobil9fW8uY3JlYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PXtmcHM6NjAsY29ycmVjdGlvbjoxLGRlbHRhU2FtcGxlU2l6ZTo2MCxcbmNvdW50ZXJUaW1lc3RhbXA6MCxmcmFtZUNvdW50ZXI6MCxkZWx0YUhpc3Rvcnk6W10sdGltZVByZXY6bnVsbCx0aW1lU2NhbGVQcmV2OjEsZnJhbWVSZXF1ZXN0SWQ6bnVsbCxpc0ZpeGVkOiExLGVuYWJsZWQ6ITB9LG49cy5leHRlbmQodCxlKTtyZXR1cm4gbi5kZWx0YT1uLmRlbHRhfHwxZTMvbi5mcHMsbi5kZWx0YU1pbj1uLmRlbHRhTWlufHwxZTMvbi5mcHMsbi5kZWx0YU1heD1uLmRlbHRhTWF4fHwxZTMvKC41Km4uZnBzKSxuLmZwcz0xZTMvbi5kZWx0YSxufSxvLnJ1bj1mdW5jdGlvbih0LG4pe3JldHVybiB2b2lkIDAhPT10LnBvc2l0aW9uSXRlcmF0aW9ucyYmKG49dCx0PW8uY3JlYXRlKCkpLGZ1bmN0aW9uIGkocil7dC5mcmFtZVJlcXVlc3RJZD1lKGkpLHImJnQuZW5hYmxlZCYmby50aWNrKHQsbixyKX0oKSx0fSxvLnRpY2s9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLHM9dC50aW1pbmcsYT0xLGw9e3RpbWVzdGFtcDpzLnRpbWVzdGFtcH07aS50cmlnZ2VyKGUsXCJiZWZvcmVUaWNrXCIsbCksaS50cmlnZ2VyKHQsXCJiZWZvcmVUaWNrXCIsbCksZS5pc0ZpeGVkP289ZS5kZWx0YToobz1uLWUudGltZVByZXZ8fGUuZGVsdGEsZS50aW1lUHJldj1uLGUuZGVsdGFIaXN0b3J5LnB1c2gobyksZS5kZWx0YUhpc3Rvcnk9ZS5kZWx0YUhpc3Rvcnkuc2xpY2UoLWUuZGVsdGFTYW1wbGVTaXplKSxvPU1hdGgubWluLmFwcGx5KG51bGwsZS5kZWx0YUhpc3RvcnkpLG89bzxlLmRlbHRhTWluP2UuZGVsdGFNaW46byxvPW8+ZS5kZWx0YU1heD9lLmRlbHRhTWF4Om8sYT1vL2UuZGVsdGEsZS5kZWx0YT1vKSwwIT09ZS50aW1lU2NhbGVQcmV2JiYoYSo9cy50aW1lU2NhbGUvZS50aW1lU2NhbGVQcmV2KSwwPT09cy50aW1lU2NhbGUmJihhPTApLGUudGltZVNjYWxlUHJldj1zLnRpbWVTY2FsZSxlLmNvcnJlY3Rpb249YSxlLmZyYW1lQ291bnRlcis9MSxcbm4tZS5jb3VudGVyVGltZXN0YW1wPj0xZTMmJihlLmZwcz1lLmZyYW1lQ291bnRlciooKG4tZS5jb3VudGVyVGltZXN0YW1wKS8xZTMpLGUuY291bnRlclRpbWVzdGFtcD1uLGUuZnJhbWVDb3VudGVyPTApLGkudHJpZ2dlcihlLFwidGlja1wiLGwpLGkudHJpZ2dlcih0LFwidGlja1wiLGwpLHQud29ybGQuaXNNb2RpZmllZCYmdC5yZW5kZXImJnQucmVuZGVyLmNvbnRyb2xsZXImJnQucmVuZGVyLmNvbnRyb2xsZXIuY2xlYXImJnQucmVuZGVyLmNvbnRyb2xsZXIuY2xlYXIodC5yZW5kZXIpLGkudHJpZ2dlcihlLFwiYmVmb3JlVXBkYXRlXCIsbCksci51cGRhdGUodCxvLGEpLGkudHJpZ2dlcihlLFwiYWZ0ZXJVcGRhdGVcIixsKSx0LnJlbmRlciYmdC5yZW5kZXIuY29udHJvbGxlciYmKGkudHJpZ2dlcihlLFwiYmVmb3JlUmVuZGVyXCIsbCksaS50cmlnZ2VyKHQsXCJiZWZvcmVSZW5kZXJcIixsKSx0LnJlbmRlci5jb250cm9sbGVyLndvcmxkKHQucmVuZGVyKSxpLnRyaWdnZXIoZSxcImFmdGVyUmVuZGVyXCIsbCksaS50cmlnZ2VyKHQsXCJhZnRlclJlbmRlclwiLGwpKSxpLnRyaWdnZXIoZSxcImFmdGVyVGlja1wiLGwpLGkudHJpZ2dlcih0LFwiYWZ0ZXJUaWNrXCIsbCl9LG8uc3RvcD1mdW5jdGlvbihlKXt0KGUuZnJhbWVSZXF1ZXN0SWQpfSxvLnN0YXJ0PWZ1bmN0aW9uKGUsdCl7by5ydW4oZSx0KX19KCl9LHtcIi4vQ29tbW9uXCI6MTQsXCIuL0VuZ2luZVwiOjE1LFwiLi9FdmVudHNcIjoxNn1dLDIyOltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4vRXZlbnRzXCIpOyFmdW5jdGlvbigpe28uX21vdGlvbldha2VUaHJlc2hvbGQ9LjE4LG8uX21vdGlvblNsZWVwVGhyZXNob2xkPS4wOCxvLl9taW5CaWFzPS45LG8udXBkYXRlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXQqdCp0LGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIHI9ZVtpXSxzPXIuc3BlZWQqci5zcGVlZCtyLmFuZ3VsYXJTcGVlZCpyLmFuZ3VsYXJTcGVlZFxuO2lmKDA9PT1yLmZvcmNlLngmJjA9PT1yLmZvcmNlLnkpe3ZhciBhPU1hdGgubWluKHIubW90aW9uLHMpLGw9TWF0aC5tYXgoci5tb3Rpb24scyk7ci5tb3Rpb249by5fbWluQmlhcyphKygxLW8uX21pbkJpYXMpKmwsci5zbGVlcFRocmVzaG9sZD4wJiZyLm1vdGlvbjxvLl9tb3Rpb25TbGVlcFRocmVzaG9sZCpuPyhyLnNsZWVwQ291bnRlcis9MSxyLnNsZWVwQ291bnRlcj49ci5zbGVlcFRocmVzaG9sZCYmby5zZXQociwhMCkpOnIuc2xlZXBDb3VudGVyPjAmJihyLnNsZWVwQ291bnRlci09MSl9ZWxzZSBvLnNldChyLCExKX19LG8uYWZ0ZXJDb2xsaXNpb25zPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXQqdCp0LGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIHI9ZVtpXTtpZihyLmlzQWN0aXZlKXt2YXIgcz1yLmNvbGxpc2lvbixhPXMuYm9keUEucGFyZW50LGw9cy5ib2R5Qi5wYXJlbnQ7aWYoIShhLmlzU2xlZXBpbmcmJmwuaXNTbGVlcGluZ3x8YS5pc1N0YXRpY3x8bC5pc1N0YXRpYykmJihhLmlzU2xlZXBpbmd8fGwuaXNTbGVlcGluZykpe3ZhciBjPWEuaXNTbGVlcGluZyYmIWEuaXNTdGF0aWM/YTpsLGQ9Yz09PWE/bDphOyFjLmlzU3RhdGljJiZkLm1vdGlvbj5vLl9tb3Rpb25XYWtlVGhyZXNob2xkKm4mJm8uc2V0KGMsITEpfX19fSxvLnNldD1mdW5jdGlvbihlLHQpe3ZhciBuPWUuaXNTbGVlcGluZzt0PyhlLmlzU2xlZXBpbmc9ITAsZS5zbGVlcENvdW50ZXI9ZS5zbGVlcFRocmVzaG9sZCxlLnBvc2l0aW9uSW1wdWxzZS54PTAsZS5wb3NpdGlvbkltcHVsc2UueT0wLGUucG9zaXRpb25QcmV2Lng9ZS5wb3NpdGlvbi54LGUucG9zaXRpb25QcmV2Lnk9ZS5wb3NpdGlvbi55LGUuYW5nbGVQcmV2PWUuYW5nbGUsZS5zcGVlZD0wLGUuYW5ndWxhclNwZWVkPTAsZS5tb3Rpb249MCxufHxpLnRyaWdnZXIoZSxcInNsZWVwU3RhcnRcIikpOihlLmlzU2xlZXBpbmc9ITEsZS5zbGVlcENvdW50ZXI9MCxuJiZpLnRyaWdnZXIoZSxcInNsZWVwRW5kXCIpKX19KCl9LHtcblwiLi9FdmVudHNcIjoxNn1dLDIzOltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGkscj1lKFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIikscz1lKFwiLi4vY29yZS9Db21tb25cIiksYT1lKFwiLi4vYm9keS9Cb2R5XCIpLGw9ZShcIi4uL2dlb21ldHJ5L0JvdW5kc1wiKSxjPWUoXCIuLi9nZW9tZXRyeS9WZWN0b3JcIik7IWZ1bmN0aW9uKCl7by5yZWN0YW5nbGU9ZnVuY3Rpb24oZSx0LG4sbyxpKXtpPWl8fHt9O3ZhciBsPXtsYWJlbDpcIlJlY3RhbmdsZSBCb2R5XCIscG9zaXRpb246e3g6ZSx5OnR9LHZlcnRpY2VzOnIuZnJvbVBhdGgoXCJMIDAgMCBMIFwiK24rXCIgMCBMIFwiK24rXCIgXCIrbytcIiBMIDAgXCIrbyl9O2lmKGkuY2hhbWZlcil7dmFyIGM9aS5jaGFtZmVyO2wudmVydGljZXM9ci5jaGFtZmVyKGwudmVydGljZXMsYy5yYWRpdXMsYy5xdWFsaXR5LGMucXVhbGl0eU1pbixjLnF1YWxpdHlNYXgpLGRlbGV0ZSBpLmNoYW1mZXJ9cmV0dXJuIGEuY3JlYXRlKHMuZXh0ZW5kKHt9LGwsaSkpfSxvLnRyYXBlem9pZD1mdW5jdGlvbihlLHQsbixvLGksbCl7bD1sfHx7fSxpKj0uNTt2YXIgYyxkPSgxLTIqaSkqbix1PW4qaSxwPXUrZCxmPXArdTtjPWk8LjU/XCJMIDAgMCBMIFwiK3UrXCIgXCIrLW8rXCIgTCBcIitwK1wiIFwiKy1vK1wiIEwgXCIrZitcIiAwXCI6XCJMIDAgMCBMIFwiK3ArXCIgXCIrLW8rXCIgTCBcIitmK1wiIDBcIjt2YXIgbT17bGFiZWw6XCJUcmFwZXpvaWQgQm9keVwiLHBvc2l0aW9uOnt4OmUseTp0fSx2ZXJ0aWNlczpyLmZyb21QYXRoKGMpfTtpZihsLmNoYW1mZXIpe3ZhciB2PWwuY2hhbWZlcjttLnZlcnRpY2VzPXIuY2hhbWZlcihtLnZlcnRpY2VzLHYucmFkaXVzLHYucXVhbGl0eSx2LnF1YWxpdHlNaW4sdi5xdWFsaXR5TWF4KSxkZWxldGUgbC5jaGFtZmVyfXJldHVybiBhLmNyZWF0ZShzLmV4dGVuZCh7fSxtLGwpKX0sby5jaXJjbGU9ZnVuY3Rpb24oZSx0LG4saSxyKXtpPWl8fHt9O3ZhciBhPXtsYWJlbDpcIkNpcmNsZSBCb2R5XCIsY2lyY2xlUmFkaXVzOm59O3I9cnx8MjVcbjt2YXIgbD1NYXRoLmNlaWwoTWF0aC5tYXgoMTAsTWF0aC5taW4ocixuKSkpO3JldHVybiBsJTI9PTEmJihsKz0xKSxvLnBvbHlnb24oZSx0LGwsbixzLmV4dGVuZCh7fSxhLGkpKX0sby5wb2x5Z29uPWZ1bmN0aW9uKGUsdCxuLGksbCl7aWYobD1sfHx7fSxuPDMpcmV0dXJuIG8uY2lyY2xlKGUsdCxpLGwpO2Zvcih2YXIgYz0yKk1hdGguUEkvbixkPVwiXCIsdT0uNSpjLHA9MDtwPG47cCs9MSl7dmFyIGY9dStwKmMsbT1NYXRoLmNvcyhmKSppLHY9TWF0aC5zaW4oZikqaTtkKz1cIkwgXCIrbS50b0ZpeGVkKDMpK1wiIFwiK3YudG9GaXhlZCgzKStcIiBcIn12YXIgeT17bGFiZWw6XCJQb2x5Z29uIEJvZHlcIixwb3NpdGlvbjp7eDplLHk6dH0sdmVydGljZXM6ci5mcm9tUGF0aChkKX07aWYobC5jaGFtZmVyKXt2YXIgZz1sLmNoYW1mZXI7eS52ZXJ0aWNlcz1yLmNoYW1mZXIoeS52ZXJ0aWNlcyxnLnJhZGl1cyxnLnF1YWxpdHksZy5xdWFsaXR5TWluLGcucXVhbGl0eU1heCksZGVsZXRlIGwuY2hhbWZlcn1yZXR1cm4gYS5jcmVhdGUocy5leHRlbmQoe30seSxsKSl9LG8uZnJvbVZlcnRpY2VzPWZ1bmN0aW9uKGUsdCxuLG8sZCx1LHApe2l8fChpPXMuX3JlcXVpcmVHbG9iYWwoXCJkZWNvbXBcIixcInBvbHktZGVjb21wXCIpKTt2YXIgZixtLHYseSxnLHgsaCxiLHc7Zm9yKG89b3x8e30sbT1bXSxkPXZvaWQgMCE9PWQmJmQsdT12b2lkIDAhPT11P3U6LjAxLHA9dm9pZCAwIT09cD9wOjEwLGl8fHMud2FybihcIkJvZGllcy5mcm9tVmVydGljZXM6IHBvbHktZGVjb21wLmpzIHJlcXVpcmVkLiBDb3VsZCBub3QgZGVjb21wb3NlIHZlcnRpY2VzLiBGYWxsYmFjayB0byBjb252ZXggaHVsbC5cIikscy5pc0FycmF5KG5bMF0pfHwobj1bbl0pLGI9MDtiPG4ubGVuZ3RoO2IrPTEpaWYoeT1uW2JdLCh2PXIuaXNDb252ZXgoeSkpfHwhaSl5PXY/ci5jbG9ja3dpc2VTb3J0KHkpOnIuaHVsbCh5KSxtLnB1c2goe3Bvc2l0aW9uOnt4OmUseTp0fSx2ZXJ0aWNlczp5fSk7ZWxzZXtcbnZhciBTPXkubWFwKGZ1bmN0aW9uKGUpe3JldHVybltlLngsZS55XX0pO2kubWFrZUNDVyhTKSwhMSE9PXUmJmkucmVtb3ZlQ29sbGluZWFyUG9pbnRzKFMsdSk7dmFyIEM9aS5xdWlja0RlY29tcChTKTtmb3IoZz0wO2c8Qy5sZW5ndGg7ZysrKXt2YXIgQT1DW2ddLFA9QS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJue3g6ZVswXSx5OmVbMV19fSk7cD4wJiZyLmFyZWEoUCk8cHx8bS5wdXNoKHtwb3NpdGlvbjpyLmNlbnRyZShQKSx2ZXJ0aWNlczpQfSl9fWZvcihnPTA7ZzxtLmxlbmd0aDtnKyspbVtnXT1hLmNyZWF0ZShzLmV4dGVuZChtW2ddLG8pKTtpZihkKXtmb3IoZz0wO2c8bS5sZW5ndGg7ZysrKXt2YXIgQj1tW2ddO2Zvcih4PWcrMTt4PG0ubGVuZ3RoO3grKyl7dmFyIE09bVt4XTtpZihsLm92ZXJsYXBzKEIuYm91bmRzLE0uYm91bmRzKSl7dmFyIGs9Qi52ZXJ0aWNlcyxJPU0udmVydGljZXM7Zm9yKGg9MDtoPEIudmVydGljZXMubGVuZ3RoO2grKylmb3Iodz0wO3c8TS52ZXJ0aWNlcy5sZW5ndGg7dysrKXt2YXIgXz1jLm1hZ25pdHVkZVNxdWFyZWQoYy5zdWIoa1soaCsxKSVrLmxlbmd0aF0sSVt3XSkpLFQ9Yy5tYWduaXR1ZGVTcXVhcmVkKGMuc3ViKGtbaF0sSVsodysxKSVJLmxlbmd0aF0pKTtfPDUmJlQ8NSYmKGtbaF0uaXNJbnRlcm5hbD0hMCxJW3ddLmlzSW50ZXJuYWw9ITApfX19fX1yZXR1cm4gbS5sZW5ndGg+MT8oZj1hLmNyZWF0ZShzLmV4dGVuZCh7cGFydHM6bS5zbGljZSgwKX0sbykpLGEuc2V0UG9zaXRpb24oZix7eDplLHk6dH0pLGYpOm1bMF19fSgpfSx7XCIuLi9ib2R5L0JvZHlcIjoxLFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjgsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI5fV0sMjQ6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9b1xuO3ZhciBpPWUoXCIuLi9ib2R5L0NvbXBvc2l0ZVwiKSxyPWUoXCIuLi9jb25zdHJhaW50L0NvbnN0cmFpbnRcIikscz1lKFwiLi4vY29yZS9Db21tb25cIiksYT1lKFwiLi4vYm9keS9Cb2R5XCIpLGw9ZShcIi4vQm9kaWVzXCIpOyFmdW5jdGlvbigpe28uc3RhY2s9ZnVuY3Rpb24oZSx0LG4sbyxyLHMsbCl7Zm9yKHZhciBjLGQ9aS5jcmVhdGUoe2xhYmVsOlwiU3RhY2tcIn0pLHU9ZSxwPXQsZj0wLG09MDttPG87bSsrKXtmb3IodmFyIHY9MCx5PTA7eTxuO3krKyl7dmFyIGc9bCh1LHAseSxtLGMsZik7aWYoZyl7dmFyIHg9Zy5ib3VuZHMubWF4LnktZy5ib3VuZHMubWluLnksaD1nLmJvdW5kcy5tYXgueC1nLmJvdW5kcy5taW4ueDt4PnYmJih2PXgpLGEudHJhbnNsYXRlKGcse3g6LjUqaCx5Oi41Knh9KSx1PWcuYm91bmRzLm1heC54K3IsaS5hZGRCb2R5KGQsZyksYz1nLGYrPTF9ZWxzZSB1Kz1yfXArPXYrcyx1PWV9cmV0dXJuIGR9LG8uY2hhaW49ZnVuY3Rpb24oZSx0LG4sbyxhLGwpe2Zvcih2YXIgYz1lLmJvZGllcyxkPTE7ZDxjLmxlbmd0aDtkKyspe3ZhciB1PWNbZC0xXSxwPWNbZF0sZj11LmJvdW5kcy5tYXgueS11LmJvdW5kcy5taW4ueSxtPXUuYm91bmRzLm1heC54LXUuYm91bmRzLm1pbi54LHY9cC5ib3VuZHMubWF4LnktcC5ib3VuZHMubWluLnkseT1wLmJvdW5kcy5tYXgueC1wLmJvdW5kcy5taW4ueCxnPXtib2R5QTp1LHBvaW50QTp7eDptKnQseTpmKm59LGJvZHlCOnAscG9pbnRCOnt4Onkqbyx5OnYqYX19LHg9cy5leHRlbmQoZyxsKTtpLmFkZENvbnN0cmFpbnQoZSxyLmNyZWF0ZSh4KSl9cmV0dXJuIGUubGFiZWwrPVwiIENoYWluXCIsZX0sby5tZXNoPWZ1bmN0aW9uKGUsdCxuLG8sYSl7dmFyIGwsYyxkLHUscCxmPWUuYm9kaWVzO2ZvcihsPTA7bDxuO2wrKyl7Zm9yKGM9MTtjPHQ7YysrKWQ9ZltjLTErbCp0XSx1PWZbYytsKnRdLGkuYWRkQ29uc3RyYWludChlLHIuY3JlYXRlKHMuZXh0ZW5kKHtib2R5QTpkLGJvZHlCOnV9LGEpKSlcbjtpZihsPjApZm9yKGM9MDtjPHQ7YysrKWQ9ZltjKyhsLTEpKnRdLHU9ZltjK2wqdF0saS5hZGRDb25zdHJhaW50KGUsci5jcmVhdGUocy5leHRlbmQoe2JvZHlBOmQsYm9keUI6dX0sYSkpKSxvJiZjPjAmJihwPWZbYy0xKyhsLTEpKnRdLGkuYWRkQ29uc3RyYWludChlLHIuY3JlYXRlKHMuZXh0ZW5kKHtib2R5QTpwLGJvZHlCOnV9LGEpKSkpLG8mJmM8dC0xJiYocD1mW2MrMSsobC0xKSp0XSxpLmFkZENvbnN0cmFpbnQoZSxyLmNyZWF0ZShzLmV4dGVuZCh7Ym9keUE6cCxib2R5Qjp1fSxhKSkpKX1yZXR1cm4gZS5sYWJlbCs9XCIgTWVzaFwiLGV9LG8ucHlyYW1pZD1mdW5jdGlvbihlLHQsbixpLHIscyxsKXtyZXR1cm4gby5zdGFjayhlLHQsbixpLHIscyxmdW5jdGlvbih0LG8scyxjLGQsdSl7dmFyIHA9TWF0aC5taW4oaSxNYXRoLmNlaWwobi8yKSksZj1kP2QuYm91bmRzLm1heC54LWQuYm91bmRzLm1pbi54OjA7aWYoIShjPnApKXtjPXAtYzt2YXIgbT1jLHY9bi0xLWM7aWYoIShzPG18fHM+dikpezE9PT11JiZhLnRyYW5zbGF0ZShkLHt4OihzKyhuJTI9PTE/MTotMSkpKmYseTowfSk7cmV0dXJuIGwoZSsoZD9zKmY6MCkrcypyLG8scyxjLGQsdSl9fX0pfSxvLm5ld3RvbnNDcmFkbGU9ZnVuY3Rpb24oZSx0LG4sbyxzKXtmb3IodmFyIGE9aS5jcmVhdGUoe2xhYmVsOlwiTmV3dG9ucyBDcmFkbGVcIn0pLGM9MDtjPG47YysrKXt2YXIgZD1sLmNpcmNsZShlK2MqKDEuOSpvKSx0K3Msbyx7aW5lcnRpYToxLzAscmVzdGl0dXRpb246MSxmcmljdGlvbjowLGZyaWN0aW9uQWlyOjFlLTQsc2xvcDoxfSksdT1yLmNyZWF0ZSh7cG9pbnRBOnt4OmUrYyooMS45Km8pLHk6dH0sYm9keUI6ZH0pO2kuYWRkQm9keShhLGQpLGkuYWRkQ29uc3RyYWludChhLHUpfXJldHVybiBhfSxvLmNhcj1mdW5jdGlvbihlLHQsbixvLHMpe3ZhciBjPWEubmV4dEdyb3VwKCEwKSxkPS41Ki1uKzIwLHU9LjUqbi0yMCxwPWkuY3JlYXRlKHtsYWJlbDpcIkNhclwiXG59KSxmPWwucmVjdGFuZ2xlKGUsdCxuLG8se2NvbGxpc2lvbkZpbHRlcjp7Z3JvdXA6Y30sY2hhbWZlcjp7cmFkaXVzOi41Km99LGRlbnNpdHk6MmUtNH0pLG09bC5jaXJjbGUoZStkLHQrMCxzLHtjb2xsaXNpb25GaWx0ZXI6e2dyb3VwOmN9LGZyaWN0aW9uOi44fSksdj1sLmNpcmNsZShlK3UsdCswLHMse2NvbGxpc2lvbkZpbHRlcjp7Z3JvdXA6Y30sZnJpY3Rpb246Ljh9KSx5PXIuY3JlYXRlKHtib2R5QjpmLHBvaW50Qjp7eDpkLHk6MH0sYm9keUE6bSxzdGlmZm5lc3M6MSxsZW5ndGg6MH0pLGc9ci5jcmVhdGUoe2JvZHlCOmYscG9pbnRCOnt4OnUseTowfSxib2R5QTp2LHN0aWZmbmVzczoxLGxlbmd0aDowfSk7cmV0dXJuIGkuYWRkQm9keShwLGYpLGkuYWRkQm9keShwLG0pLGkuYWRkQm9keShwLHYpLGkuYWRkQ29uc3RyYWludChwLHkpLGkuYWRkQ29uc3RyYWludChwLGcpLHB9LG8uc29mdEJvZHk9ZnVuY3Rpb24oZSx0LG4saSxyLGEsYyxkLHUscCl7dT1zLmV4dGVuZCh7aW5lcnRpYToxLzB9LHUpLHA9cy5leHRlbmQoe3N0aWZmbmVzczouMixyZW5kZXI6e3R5cGU6XCJsaW5lXCIsYW5jaG9yczohMX19LHApO3ZhciBmPW8uc3RhY2soZSx0LG4saSxyLGEsZnVuY3Rpb24oZSx0KXtyZXR1cm4gbC5jaXJjbGUoZSx0LGQsdSl9KTtyZXR1cm4gby5tZXNoKGYsbixpLGMscCksZi5sYWJlbD1cIlNvZnQgQm9keVwiLGZ9fSgpfSx7XCIuLi9ib2R5L0JvZHlcIjoxLFwiLi4vYm9keS9Db21wb3NpdGVcIjoyLFwiLi4vY29uc3RyYWludC9Db25zdHJhaW50XCI6MTIsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi9Cb2RpZXNcIjoyM31dLDI1OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW87dmFyIGk9ZShcIi4uL2dlb21ldHJ5L1ZlY3RvclwiKSxyPWUoXCIuLi9jb3JlL0NvbW1vblwiKTshZnVuY3Rpb24oKXtvLmZyb21WZXJ0aWNlcz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9e30sbj0wO248ZS5sZW5ndGg7bisrKXtcbnZhciBvPShuKzEpJWUubGVuZ3RoLHM9aS5ub3JtYWxpc2Uoe3g6ZVtvXS55LWVbbl0ueSx5OmVbbl0ueC1lW29dLnh9KSxhPTA9PT1zLnk/MS8wOnMueC9zLnk7YT1hLnRvRml4ZWQoMykudG9TdHJpbmcoKSx0W2FdPXN9cmV0dXJuIHIudmFsdWVzKHQpfSxvLnJvdGF0ZT1mdW5jdGlvbihlLHQpe2lmKDAhPT10KWZvcih2YXIgbj1NYXRoLmNvcyh0KSxvPU1hdGguc2luKHQpLGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIHIscz1lW2ldO3I9cy54Km4tcy55Km8scy55PXMueCpvK3MueSpuLHMueD1yfX19KCl9LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOH1dLDI2OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW8sZnVuY3Rpb24oKXtvLmNyZWF0ZT1mdW5jdGlvbihlKXt2YXIgdD17bWluOnt4OjAseTowfSxtYXg6e3g6MCx5OjB9fTtyZXR1cm4gZSYmby51cGRhdGUodCxlKSx0fSxvLnVwZGF0ZT1mdW5jdGlvbihlLHQsbil7ZS5taW4ueD0xLzAsZS5tYXgueD0tMS8wLGUubWluLnk9MS8wLGUubWF4Lnk9LTEvMDtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGk9dFtvXTtpLng+ZS5tYXgueCYmKGUubWF4Lng9aS54KSxpLng8ZS5taW4ueCYmKGUubWluLng9aS54KSxpLnk+ZS5tYXgueSYmKGUubWF4Lnk9aS55KSxpLnk8ZS5taW4ueSYmKGUubWluLnk9aS55KX1uJiYobi54PjA/ZS5tYXgueCs9bi54OmUubWluLngrPW4ueCxuLnk+MD9lLm1heC55Kz1uLnk6ZS5taW4ueSs9bi55KX0sby5jb250YWlucz1mdW5jdGlvbihlLHQpe3JldHVybiB0Lng+PWUubWluLngmJnQueDw9ZS5tYXgueCYmdC55Pj1lLm1pbi55JiZ0Lnk8PWUubWF4Lnl9LG8ub3ZlcmxhcHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5taW4ueDw9dC5tYXgueCYmZS5tYXgueD49dC5taW4ueCYmZS5tYXgueT49dC5taW4ueSYmZS5taW4ueTw9dC5tYXgueX0sby50cmFuc2xhdGU9ZnVuY3Rpb24oZSx0KXtlLm1pbi54Kz10LngsXG5lLm1heC54Kz10LngsZS5taW4ueSs9dC55LGUubWF4LnkrPXQueX0sby5zaGlmdD1mdW5jdGlvbihlLHQpe3ZhciBuPWUubWF4LngtZS5taW4ueCxvPWUubWF4LnktZS5taW4ueTtlLm1pbi54PXQueCxlLm1heC54PXQueCtuLGUubWluLnk9dC55LGUubWF4Lnk9dC55K299fSgpfSx7fV0sMjc6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9bzt2YXIgaT0oZShcIi4uL2dlb21ldHJ5L0JvdW5kc1wiKSxlKFwiLi4vY29yZS9Db21tb25cIikpOyFmdW5jdGlvbigpe28ucGF0aFRvVmVydGljZXM9ZnVuY3Rpb24oZSx0KXtcInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93fHxcIlNWR1BhdGhTZWdcImluIHdpbmRvd3x8aS53YXJuKFwiU3ZnLnBhdGhUb1ZlcnRpY2VzOiBTVkdQYXRoU2VnIG5vdCBkZWZpbmVkLCBhIHBvbHlmaWxsIGlzIHJlcXVpcmVkLlwiKTt2YXIgbixyLHMsYSxsLGMsZCx1LHAsZixtLHYseT1bXSxnPTAseD0wLGg9MDt0PXR8fDE1O3ZhciBiPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1uJTI9PTEmJm4+MTtpZighcHx8ZSE9cC54fHx0IT1wLnkpe3AmJm8/KG09cC54LHY9cC55KToobT0wLHY9MCk7dmFyIGk9e3g6bStlLHk6dit0fTshbyYmcHx8KHA9aSkseS5wdXNoKGkpLHg9bStlLGg9dit0fX0sdz1mdW5jdGlvbihlKXt2YXIgdD1lLnBhdGhTZWdUeXBlQXNMZXR0ZXIudG9VcHBlckNhc2UoKTtpZihcIlpcIiE9PXQpe3N3aXRjaCh0KXtjYXNlXCJNXCI6Y2FzZVwiTFwiOmNhc2VcIlRcIjpjYXNlXCJDXCI6Y2FzZVwiU1wiOmNhc2VcIlFcIjp4PWUueCxoPWUueTticmVhaztjYXNlXCJIXCI6eD1lLng7YnJlYWs7Y2FzZVwiVlwiOmg9ZS55fWIoeCxoLGUucGF0aFNlZ1R5cGUpfX07Zm9yKG8uX3N2Z1BhdGhUb0Fic29sdXRlKGUpLHM9ZS5nZXRUb3RhbExlbmd0aCgpLGM9W10sbj0wO248ZS5wYXRoU2VnTGlzdC5udW1iZXJPZkl0ZW1zO24rPTEpYy5wdXNoKGUucGF0aFNlZ0xpc3QuZ2V0SXRlbShuKSk7Zm9yKGQ9Yy5jb25jYXQoKTtnPHM7KXtcbmlmKGY9ZS5nZXRQYXRoU2VnQXRMZW5ndGgoZyksKGw9Y1tmXSkhPXUpe2Zvcig7ZC5sZW5ndGgmJmRbMF0hPWw7KXcoZC5zaGlmdCgpKTt1PWx9c3dpdGNoKGwucGF0aFNlZ1R5cGVBc0xldHRlci50b1VwcGVyQ2FzZSgpKXtjYXNlXCJDXCI6Y2FzZVwiVFwiOmNhc2VcIlNcIjpjYXNlXCJRXCI6Y2FzZVwiQVwiOmE9ZS5nZXRQb2ludEF0TGVuZ3RoKGcpLGIoYS54LGEueSwwKX1nKz10fWZvcihuPTAscj1kLmxlbmd0aDtuPHI7KytuKXcoZFtuXSk7cmV0dXJuIHl9LG8uX3N2Z1BhdGhUb0Fic29sdXRlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuLG8saSxyLHMsYT1lLnBhdGhTZWdMaXN0LGw9MCxjPTAsZD1hLm51bWJlck9mSXRlbXMsdT0wO3U8ZDsrK3Upe3ZhciBwPWEuZ2V0SXRlbSh1KSxmPXAucGF0aFNlZ1R5cGVBc0xldHRlcjtpZigvW01MSFZDU1FUQV0vLnRlc3QoZikpXCJ4XCJpbiBwJiYobD1wLngpLFwieVwiaW4gcCYmKGM9cC55KTtlbHNlIHN3aXRjaChcIngxXCJpbiBwJiYobz1sK3AueDEpLFwieDJcImluIHAmJihyPWwrcC54MiksXCJ5MVwiaW4gcCYmKGk9YytwLnkxKSxcInkyXCJpbiBwJiYocz1jK3AueTIpLFwieFwiaW4gcCYmKGwrPXAueCksXCJ5XCJpbiBwJiYoYys9cC55KSxmKXtjYXNlXCJtXCI6YS5yZXBsYWNlSXRlbShlLmNyZWF0ZVNWR1BhdGhTZWdNb3ZldG9BYnMobCxjKSx1KTticmVhaztjYXNlXCJsXCI6YS5yZXBsYWNlSXRlbShlLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9BYnMobCxjKSx1KTticmVhaztjYXNlXCJoXCI6YS5yZXBsYWNlSXRlbShlLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzKGwpLHUpO2JyZWFrO2Nhc2VcInZcIjphLnJlcGxhY2VJdGVtKGUuY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzKGMpLHUpO2JyZWFrO2Nhc2VcImNcIjphLnJlcGxhY2VJdGVtKGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0FicyhsLGMsbyxpLHIscyksdSk7YnJlYWs7Y2FzZVwic1wiOlxuYS5yZXBsYWNlSXRlbShlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMobCxjLHIscyksdSk7YnJlYWs7Y2FzZVwicVwiOmEucmVwbGFjZUl0ZW0oZS5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0FicyhsLGMsbyxpKSx1KTticmVhaztjYXNlXCJ0XCI6YS5yZXBsYWNlSXRlbShlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzKGwsYyksdSk7YnJlYWs7Y2FzZVwiYVwiOmEucmVwbGFjZUl0ZW0oZS5jcmVhdGVTVkdQYXRoU2VnQXJjQWJzKGwsYyxwLnIxLHAucjIscC5hbmdsZSxwLmxhcmdlQXJjRmxhZyxwLnN3ZWVwRmxhZyksdSk7YnJlYWs7Y2FzZVwielwiOmNhc2VcIlpcIjpsPXQsYz1ufVwiTVwiIT1mJiZcIm1cIiE9Znx8KHQ9bCxuPWMpfX19KCl9LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNn1dLDI4OltmdW5jdGlvbihlLHQsbil7dmFyIG89e307dC5leHBvcnRzPW8sZnVuY3Rpb24oKXtvLmNyZWF0ZT1mdW5jdGlvbihlLHQpe3JldHVybnt4OmV8fDAseTp0fHwwfX0sby5jbG9uZT1mdW5jdGlvbihlKXtyZXR1cm57eDplLngseTplLnl9fSxvLm1hZ25pdHVkZT1mdW5jdGlvbihlKXtyZXR1cm4gTWF0aC5zcXJ0KGUueCplLngrZS55KmUueSl9LG8ubWFnbml0dWRlU3F1YXJlZD1mdW5jdGlvbihlKXtyZXR1cm4gZS54KmUueCtlLnkqZS55fSxvLnJvdGF0ZT1mdW5jdGlvbihlLHQsbil7dmFyIG89TWF0aC5jb3ModCksaT1NYXRoLnNpbih0KTtufHwobj17fSk7dmFyIHI9ZS54Km8tZS55Kmk7cmV0dXJuIG4ueT1lLngqaStlLnkqbyxuLng9cixufSxvLnJvdGF0ZUFib3V0PWZ1bmN0aW9uKGUsdCxuLG8pe3ZhciBpPU1hdGguY29zKHQpLHI9TWF0aC5zaW4odCk7b3x8KG89e30pO3ZhciBzPW4ueCsoKGUueC1uLngpKmktKGUueS1uLnkpKnIpO3JldHVybiBvLnk9bi55KygoZS54LW4ueCkqcisoZS55LW4ueSkqaSksby54PXMsb30sby5ub3JtYWxpc2U9ZnVuY3Rpb24oZSl7XG52YXIgdD1vLm1hZ25pdHVkZShlKTtyZXR1cm4gMD09PXQ/e3g6MCx5OjB9Ont4OmUueC90LHk6ZS55L3R9fSxvLmRvdD1mdW5jdGlvbihlLHQpe3JldHVybiBlLngqdC54K2UueSp0Lnl9LG8uY3Jvc3M9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS54KnQueS1lLnkqdC54fSxvLmNyb3NzMz1mdW5jdGlvbihlLHQsbil7cmV0dXJuKHQueC1lLngpKihuLnktZS55KS0odC55LWUueSkqKG4ueC1lLngpfSxvLmFkZD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG58fChuPXt9KSxuLng9ZS54K3QueCxuLnk9ZS55K3QueSxufSxvLnN1Yj1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG58fChuPXt9KSxuLng9ZS54LXQueCxuLnk9ZS55LXQueSxufSxvLm11bHQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm57eDplLngqdCx5OmUueSp0fX0sby5kaXY9ZnVuY3Rpb24oZSx0KXtyZXR1cm57eDplLngvdCx5OmUueS90fX0sby5wZXJwPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9ITA9PT10Py0xOjEse3g6dCotZS55LHk6dCplLnh9fSxvLm5lZz1mdW5jdGlvbihlKXtyZXR1cm57eDotZS54LHk6LWUueX19LG8uYW5nbGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gTWF0aC5hdGFuMih0LnktZS55LHQueC1lLngpfSxvLl90ZW1wPVtvLmNyZWF0ZSgpLG8uY3JlYXRlKCksby5jcmVhdGUoKSxvLmNyZWF0ZSgpLG8uY3JlYXRlKCksby5jcmVhdGUoKV19KCl9LHt9XSwyOTpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXt9O3QuZXhwb3J0cz1vO3ZhciBpPWUoXCIuLi9nZW9tZXRyeS9WZWN0b3JcIikscj1lKFwiLi4vY29yZS9Db21tb25cIik7IWZ1bmN0aW9uKCl7by5jcmVhdGU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W10sbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgaT1lW29dLHI9e3g6aS54LHk6aS55LGluZGV4Om8sYm9keTp0LGlzSW50ZXJuYWw6ITF9O24ucHVzaChyKX1yZXR1cm4gbn0sby5mcm9tUGF0aD1mdW5jdGlvbihlLHQpe1xudmFyIG49L0w/XFxzKihbXFwtXFxkXFwuZV0rKVtcXHMsXSooW1xcLVxcZFxcLmVdKykqL2dpLGk9W107cmV0dXJuIGUucmVwbGFjZShuLGZ1bmN0aW9uKGUsdCxuKXtpLnB1c2goe3g6cGFyc2VGbG9hdCh0KSx5OnBhcnNlRmxvYXQobil9KX0pLG8uY3JlYXRlKGksdCl9LG8uY2VudHJlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuLHIscz1vLmFyZWEoZSwhMCksYT17eDowLHk6MH0sbD0wO2w8ZS5sZW5ndGg7bCsrKXI9KGwrMSklZS5sZW5ndGgsdD1pLmNyb3NzKGVbbF0sZVtyXSksbj1pLm11bHQoaS5hZGQoZVtsXSxlW3JdKSx0KSxhPWkuYWRkKGEsbik7cmV0dXJuIGkuZGl2KGEsNipzKX0sby5tZWFuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD17eDowLHk6MH0sbj0wO248ZS5sZW5ndGg7bisrKXQueCs9ZVtuXS54LHQueSs9ZVtuXS55O3JldHVybiBpLmRpdih0LGUubGVuZ3RoKX0sby5hcmVhPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTAsbz1lLmxlbmd0aC0xLGk9MDtpPGUubGVuZ3RoO2krKyluKz0oZVtvXS54LWVbaV0ueCkqKGVbb10ueStlW2ldLnkpLG89aTtyZXR1cm4gdD9uLzI6TWF0aC5hYnMobikvMn0sby5pbmVydGlhPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuLG8scj0wLHM9MCxhPWUsbD0wO2w8YS5sZW5ndGg7bCsrKW89KGwrMSklYS5sZW5ndGgsbj1NYXRoLmFicyhpLmNyb3NzKGFbb10sYVtsXSkpLHIrPW4qKGkuZG90KGFbb10sYVtvXSkraS5kb3QoYVtvXSxhW2xdKStpLmRvdChhW2xdLGFbbF0pKSxzKz1uO3JldHVybiB0LzYqKHIvcyl9LG8udHJhbnNsYXRlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbztpZihuKWZvcihvPTA7bzxlLmxlbmd0aDtvKyspZVtvXS54Kz10LngqbixlW29dLnkrPXQueSpuO2Vsc2UgZm9yKG89MDtvPGUubGVuZ3RoO28rKyllW29dLngrPXQueCxlW29dLnkrPXQueTtyZXR1cm4gZX0sby5yb3RhdGU9ZnVuY3Rpb24oZSx0LG4pe2lmKDAhPT10KXtcbmZvcih2YXIgbz1NYXRoLmNvcyh0KSxpPU1hdGguc2luKHQpLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIHM9ZVtyXSxhPXMueC1uLngsbD1zLnktbi55O3MueD1uLngrKGEqby1sKmkpLHMueT1uLnkrKGEqaStsKm8pfXJldHVybiBlfX0sby5jb250YWlucz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW25dLGk9ZVsobisxKSVlLmxlbmd0aF07aWYoKHQueC1vLngpKihpLnktby55KSsodC55LW8ueSkqKG8ueC1pLngpPjApcmV0dXJuITF9cmV0dXJuITB9LG8uc2NhbGU9ZnVuY3Rpb24oZSx0LG4scil7aWYoMT09PXQmJjE9PT1uKXJldHVybiBlO3I9cnx8by5jZW50cmUoZSk7Zm9yKHZhciBzLGEsbD0wO2w8ZS5sZW5ndGg7bCsrKXM9ZVtsXSxhPWkuc3ViKHMsciksZVtsXS54PXIueCthLngqdCxlW2xdLnk9ci55K2EueSpuO3JldHVybiBlfSxvLmNoYW1mZXI9ZnVuY3Rpb24oZSx0LG4sbyxzKXt0PVwibnVtYmVyXCI9PXR5cGVvZiB0P1t0XTp0fHxbOF0sbj12b2lkIDAhPT1uP246LTEsbz1vfHwyLHM9c3x8MTQ7Zm9yKHZhciBhPVtdLGw9MDtsPGUubGVuZ3RoO2wrKyl7dmFyIGM9ZVtsLTE+PTA/bC0xOmUubGVuZ3RoLTFdLGQ9ZVtsXSx1PWVbKGwrMSklZS5sZW5ndGhdLHA9dFtsPHQubGVuZ3RoP2w6dC5sZW5ndGgtMV07aWYoMCE9PXApe3ZhciBmPWkubm9ybWFsaXNlKHt4OmQueS1jLnkseTpjLngtZC54fSksbT1pLm5vcm1hbGlzZSh7eDp1LnktZC55LHk6ZC54LXUueH0pLHY9TWF0aC5zcXJ0KDIqTWF0aC5wb3cocCwyKSkseT1pLm11bHQoci5jbG9uZShmKSxwKSxnPWkubm9ybWFsaXNlKGkubXVsdChpLmFkZChmLG0pLC41KSkseD1pLnN1YihkLGkubXVsdChnLHYpKSxoPW47LTE9PT1uJiYoaD0xLjc1Kk1hdGgucG93KHAsLjMyKSksaD1yLmNsYW1wKGgsbyxzKSxoJTI9PTEmJihoKz0xKVxuO2Zvcih2YXIgYj1NYXRoLmFjb3MoaS5kb3QoZixtKSksdz1iL2gsUz0wO1M8aDtTKyspYS5wdXNoKGkuYWRkKGkucm90YXRlKHksdypTKSx4KSl9ZWxzZSBhLnB1c2goZCl9cmV0dXJuIGF9LG8uY2xvY2t3aXNlU29ydD1mdW5jdGlvbihlKXt2YXIgdD1vLm1lYW4oZSk7cmV0dXJuIGUuc29ydChmdW5jdGlvbihlLG4pe3JldHVybiBpLmFuZ2xlKHQsZSktaS5hbmdsZSh0LG4pfSksZX0sby5pc0NvbnZleD1mdW5jdGlvbihlKXt2YXIgdCxuLG8saSxyPTAscz1lLmxlbmd0aDtpZihzPDMpcmV0dXJuIG51bGw7Zm9yKHQ9MDt0PHM7dCsrKWlmKG49KHQrMSklcyxvPSh0KzIpJXMsaT0oZVtuXS54LWVbdF0ueCkqKGVbb10ueS1lW25dLnkpLGktPShlW25dLnktZVt0XS55KSooZVtvXS54LWVbbl0ueCksaTwwP3J8PTE6aT4wJiYocnw9MiksMz09PXIpcmV0dXJuITE7cmV0dXJuIDAhPT1yfHxudWxsfSxvLmh1bGw9ZnVuY3Rpb24oZSl7dmFyIHQsbixvPVtdLHI9W107Zm9yKGU9ZS5zbGljZSgwKSxlLnNvcnQoZnVuY3Rpb24oZSx0KXt2YXIgbj1lLngtdC54O3JldHVybiAwIT09bj9uOmUueS10Lnl9KSxuPTA7bjxlLmxlbmd0aDtuKz0xKXtmb3IodD1lW25dO3IubGVuZ3RoPj0yJiZpLmNyb3NzMyhyW3IubGVuZ3RoLTJdLHJbci5sZW5ndGgtMV0sdCk8PTA7KXIucG9wKCk7ci5wdXNoKHQpfWZvcihuPWUubGVuZ3RoLTE7bj49MDtuLT0xKXtmb3IodD1lW25dO28ubGVuZ3RoPj0yJiZpLmNyb3NzMyhvW28ubGVuZ3RoLTJdLG9bby5sZW5ndGgtMV0sdCk8PTA7KW8ucG9wKCk7by5wdXNoKHQpfXJldHVybiBvLnBvcCgpLHIucG9wKCksby5jb25jYXQocil9fSgpfSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6Mjh9XSwzMDpbZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXQuZXhwb3J0cz1lKFwiLi4vY29yZS9NYXR0ZXJcIik7by5Cb2R5PWUoXCIuLi9ib2R5L0JvZHlcIiksby5Db21wb3NpdGU9ZShcIi4uL2JvZHkvQ29tcG9zaXRlXCIpLFxuby5Xb3JsZD1lKFwiLi4vYm9keS9Xb3JsZFwiKSxvLkNvbnRhY3Q9ZShcIi4uL2NvbGxpc2lvbi9Db250YWN0XCIpLG8uRGV0ZWN0b3I9ZShcIi4uL2NvbGxpc2lvbi9EZXRlY3RvclwiKSxvLkdyaWQ9ZShcIi4uL2NvbGxpc2lvbi9HcmlkXCIpLG8uUGFpcnM9ZShcIi4uL2NvbGxpc2lvbi9QYWlyc1wiKSxvLlBhaXI9ZShcIi4uL2NvbGxpc2lvbi9QYWlyXCIpLG8uUXVlcnk9ZShcIi4uL2NvbGxpc2lvbi9RdWVyeVwiKSxvLlJlc29sdmVyPWUoXCIuLi9jb2xsaXNpb24vUmVzb2x2ZXJcIiksby5TQVQ9ZShcIi4uL2NvbGxpc2lvbi9TQVRcIiksby5Db25zdHJhaW50PWUoXCIuLi9jb25zdHJhaW50L0NvbnN0cmFpbnRcIiksby5Nb3VzZUNvbnN0cmFpbnQ9ZShcIi4uL2NvbnN0cmFpbnQvTW91c2VDb25zdHJhaW50XCIpLG8uQ29tbW9uPWUoXCIuLi9jb3JlL0NvbW1vblwiKSxvLkVuZ2luZT1lKFwiLi4vY29yZS9FbmdpbmVcIiksby5FdmVudHM9ZShcIi4uL2NvcmUvRXZlbnRzXCIpLG8uTW91c2U9ZShcIi4uL2NvcmUvTW91c2VcIiksby5SdW5uZXI9ZShcIi4uL2NvcmUvUnVubmVyXCIpLG8uU2xlZXBpbmc9ZShcIi4uL2NvcmUvU2xlZXBpbmdcIiksby5QbHVnaW49ZShcIi4uL2NvcmUvUGx1Z2luXCIpLG8uQm9kaWVzPWUoXCIuLi9mYWN0b3J5L0JvZGllc1wiKSxvLkNvbXBvc2l0ZXM9ZShcIi4uL2ZhY3RvcnkvQ29tcG9zaXRlc1wiKSxvLkF4ZXM9ZShcIi4uL2dlb21ldHJ5L0F4ZXNcIiksby5Cb3VuZHM9ZShcIi4uL2dlb21ldHJ5L0JvdW5kc1wiKSxvLlN2Zz1lKFwiLi4vZ2VvbWV0cnkvU3ZnXCIpLG8uVmVjdG9yPWUoXCIuLi9nZW9tZXRyeS9WZWN0b3JcIiksby5WZXJ0aWNlcz1lKFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIiksby5SZW5kZXI9ZShcIi4uL3JlbmRlci9SZW5kZXJcIiksby5SZW5kZXJQaXhpPWUoXCIuLi9yZW5kZXIvUmVuZGVyUGl4aVwiKSxvLldvcmxkLmFkZD1vLkNvbXBvc2l0ZS5hZGQsby5Xb3JsZC5yZW1vdmU9by5Db21wb3NpdGUucmVtb3ZlLFxuby5Xb3JsZC5hZGRDb21wb3NpdGU9by5Db21wb3NpdGUuYWRkQ29tcG9zaXRlLG8uV29ybGQuYWRkQm9keT1vLkNvbXBvc2l0ZS5hZGRCb2R5LG8uV29ybGQuYWRkQ29uc3RyYWludD1vLkNvbXBvc2l0ZS5hZGRDb25zdHJhaW50LG8uV29ybGQuY2xlYXI9by5Db21wb3NpdGUuY2xlYXIsby5FbmdpbmUucnVuPW8uUnVubmVyLnJ1bn0se1wiLi4vYm9keS9Cb2R5XCI6MSxcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4uL2JvZHkvV29ybGRcIjozLFwiLi4vY29sbGlzaW9uL0NvbnRhY3RcIjo0LFwiLi4vY29sbGlzaW9uL0RldGVjdG9yXCI6NSxcIi4uL2NvbGxpc2lvbi9HcmlkXCI6NixcIi4uL2NvbGxpc2lvbi9QYWlyXCI6NyxcIi4uL2NvbGxpc2lvbi9QYWlyc1wiOjgsXCIuLi9jb2xsaXNpb24vUXVlcnlcIjo5LFwiLi4vY29sbGlzaW9uL1Jlc29sdmVyXCI6MTAsXCIuLi9jb2xsaXNpb24vU0FUXCI6MTEsXCIuLi9jb25zdHJhaW50L0NvbnN0cmFpbnRcIjoxMixcIi4uL2NvbnN0cmFpbnQvTW91c2VDb25zdHJhaW50XCI6MTMsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FbmdpbmVcIjoxNSxcIi4uL2NvcmUvRXZlbnRzXCI6MTYsXCIuLi9jb3JlL01hdHRlclwiOjE3LFwiLi4vY29yZS9NZXRyaWNzXCI6MTgsXCIuLi9jb3JlL01vdXNlXCI6MTksXCIuLi9jb3JlL1BsdWdpblwiOjIwLFwiLi4vY29yZS9SdW5uZXJcIjoyMSxcIi4uL2NvcmUvU2xlZXBpbmdcIjoyMixcIi4uL2ZhY3RvcnkvQm9kaWVzXCI6MjMsXCIuLi9mYWN0b3J5L0NvbXBvc2l0ZXNcIjoyNCxcIi4uL2dlb21ldHJ5L0F4ZXNcIjoyNSxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvU3ZnXCI6MjcsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOCxcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCI6MjksXCIuLi9yZW5kZXIvUmVuZGVyXCI6MzEsXCIuLi9yZW5kZXIvUmVuZGVyUGl4aVwiOjMyfV0sMzE6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9b1xuO3ZhciBpPWUoXCIuLi9jb3JlL0NvbW1vblwiKSxyPWUoXCIuLi9ib2R5L0NvbXBvc2l0ZVwiKSxzPWUoXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIiksYT1lKFwiLi4vY29yZS9FdmVudHNcIiksbD1lKFwiLi4vY29sbGlzaW9uL0dyaWRcIiksYz1lKFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCIpLGQ9ZShcIi4uL2NvcmUvTW91c2VcIik7IWZ1bmN0aW9uKCl7dmFyIGUsdDtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYoZT13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKGUpe3dpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShpLm5vdygpKX0sMWUzLzYwKX0sdD13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZSksby5jcmVhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9e2NvbnRyb2xsZXI6byxlbmdpbmU6bnVsbCxlbGVtZW50Om51bGwsY2FudmFzOm51bGwsbW91c2U6bnVsbCxmcmFtZVJlcXVlc3RJZDpudWxsLG9wdGlvbnM6e3dpZHRoOjgwMCxoZWlnaHQ6NjAwLHBpeGVsUmF0aW86MSxiYWNrZ3JvdW5kOlwiIzE4MTgxZFwiLHdpcmVmcmFtZUJhY2tncm91bmQ6XCIjMGYwZjEzXCIsaGFzQm91bmRzOiEhZS5ib3VuZHMsZW5hYmxlZDohMCx3aXJlZnJhbWVzOiEwLHNob3dTbGVlcGluZzohMCxzaG93RGVidWc6ITEsc2hvd0Jyb2FkcGhhc2U6ITEsc2hvd0JvdW5kczohMSxzaG93VmVsb2NpdHk6ITEsc2hvd0NvbGxpc2lvbnM6ITEsc2hvd1NlcGFyYXRpb25zOiExLHNob3dBeGVzOiExLHNob3dQb3NpdGlvbnM6ITEsc2hvd0FuZ2xlSW5kaWNhdG9yOiExLHNob3dJZHM6ITEsc2hvd1NoYWRvd3M6ITEsXG5zaG93VmVydGV4TnVtYmVyczohMSxzaG93Q29udmV4SHVsbHM6ITEsc2hvd0ludGVybmFsRWRnZXM6ITEsc2hvd01vdXNlUG9zaXRpb246ITF9fSxyPWkuZXh0ZW5kKHQsZSk7cmV0dXJuIHIuY2FudmFzJiYoci5jYW52YXMud2lkdGg9ci5vcHRpb25zLndpZHRofHxyLmNhbnZhcy53aWR0aCxyLmNhbnZhcy5oZWlnaHQ9ci5vcHRpb25zLmhlaWdodHx8ci5jYW52YXMuaGVpZ2h0KSxyLm1vdXNlPWUubW91c2Usci5lbmdpbmU9ZS5lbmdpbmUsci5jYW52YXM9ci5jYW52YXN8fG4oci5vcHRpb25zLndpZHRoLHIub3B0aW9ucy5oZWlnaHQpLHIuY29udGV4dD1yLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiksci50ZXh0dXJlcz17fSxyLmJvdW5kcz1yLmJvdW5kc3x8e21pbjp7eDowLHk6MH0sbWF4Ont4OnIuY2FudmFzLndpZHRoLHk6ci5jYW52YXMuaGVpZ2h0fX0sMSE9PXIub3B0aW9ucy5waXhlbFJhdGlvJiZvLnNldFBpeGVsUmF0aW8ocixyLm9wdGlvbnMucGl4ZWxSYXRpbyksaS5pc0VsZW1lbnQoci5lbGVtZW50KT9yLmVsZW1lbnQuYXBwZW5kQ2hpbGQoci5jYW52YXMpOnIuY2FudmFzLnBhcmVudE5vZGV8fGkubG9nKFwiUmVuZGVyLmNyZWF0ZTogb3B0aW9ucy5lbGVtZW50IHdhcyB1bmRlZmluZWQsIHJlbmRlci5jYW52YXMgd2FzIGNyZWF0ZWQgYnV0IG5vdCBhcHBlbmRlZFwiLFwid2FyblwiKSxyfSxvLnJ1bj1mdW5jdGlvbih0KXshZnVuY3Rpb24gbihpKXt0LmZyYW1lUmVxdWVzdElkPWUobiksby53b3JsZCh0KX0oKX0sby5zdG9wPWZ1bmN0aW9uKGUpe3QoZS5mcmFtZVJlcXVlc3RJZCl9LG8uc2V0UGl4ZWxSYXRpbz1mdW5jdGlvbihlLHQpe3ZhciBuPWUub3B0aW9ucyxvPWUuY2FudmFzO1wiYXV0b1wiPT09dCYmKHQ9dShvKSksbi5waXhlbFJhdGlvPXQsby5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBpeGVsLXJhdGlvXCIsdCksby53aWR0aD1uLndpZHRoKnQsby5oZWlnaHQ9bi5oZWlnaHQqdCxvLnN0eWxlLndpZHRoPW4ud2lkdGgrXCJweFwiLFxuby5zdHlsZS5oZWlnaHQ9bi5oZWlnaHQrXCJweFwiLGUuY29udGV4dC5zY2FsZSh0LHQpfSxvLmxvb2tBdD1mdW5jdGlvbihlLHQsbixvKXtvPXZvaWQgMD09PW98fG8sdD1pLmlzQXJyYXkodCk/dDpbdF0sbj1ufHx7eDowLHk6MH07Zm9yKHZhciByPXttaW46e3g6MS8wLHk6MS8wfSxtYXg6e3g6LTEvMCx5Oi0xLzB9fSxzPTA7czx0Lmxlbmd0aDtzKz0xKXt2YXIgYT10W3NdLGw9YS5ib3VuZHM/YS5ib3VuZHMubWluOmEubWlufHxhLnBvc2l0aW9ufHxhLGM9YS5ib3VuZHM/YS5ib3VuZHMubWF4OmEubWF4fHxhLnBvc2l0aW9ufHxhO2wmJmMmJihsLng8ci5taW4ueCYmKHIubWluLng9bC54KSxjLng+ci5tYXgueCYmKHIubWF4Lng9Yy54KSxsLnk8ci5taW4ueSYmKHIubWluLnk9bC55KSxjLnk+ci5tYXgueSYmKHIubWF4Lnk9Yy55KSl9dmFyIHU9ci5tYXgueC1yLm1pbi54KzIqbi54LHA9ci5tYXgueS1yLm1pbi55KzIqbi55LGY9ZS5jYW52YXMuaGVpZ2h0LG09ZS5jYW52YXMud2lkdGgsdj1tL2YseT11L3AsZz0xLHg9MTt5PnY/eD15L3Y6Zz12L3ksZS5vcHRpb25zLmhhc0JvdW5kcz0hMCxlLmJvdW5kcy5taW4ueD1yLm1pbi54LGUuYm91bmRzLm1heC54PXIubWluLngrdSpnLGUuYm91bmRzLm1pbi55PXIubWluLnksZS5ib3VuZHMubWF4Lnk9ci5taW4ueStwKngsbyYmKGUuYm91bmRzLm1pbi54Kz0uNSp1LXUqZyouNSxlLmJvdW5kcy5tYXgueCs9LjUqdS11KmcqLjUsZS5ib3VuZHMubWluLnkrPS41KnAtcCp4Ki41LGUuYm91bmRzLm1heC55Kz0uNSpwLXAqeCouNSksZS5ib3VuZHMubWluLngtPW4ueCxlLmJvdW5kcy5tYXgueC09bi54LGUuYm91bmRzLm1pbi55LT1uLnksZS5ib3VuZHMubWF4LnktPW4ueSxlLm1vdXNlJiYoZC5zZXRTY2FsZShlLm1vdXNlLHt4OihlLmJvdW5kcy5tYXgueC1lLmJvdW5kcy5taW4ueCkvZS5jYW52YXMud2lkdGgseTooZS5ib3VuZHMubWF4LnktZS5ib3VuZHMubWluLnkpL2UuY2FudmFzLmhlaWdodH0pLFxuZC5zZXRPZmZzZXQoZS5tb3VzZSxlLmJvdW5kcy5taW4pKX0sby5zdGFydFZpZXdUcmFuc2Zvcm09ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ib3VuZHMubWF4LngtZS5ib3VuZHMubWluLngsbj1lLmJvdW5kcy5tYXgueS1lLmJvdW5kcy5taW4ueSxvPXQvZS5vcHRpb25zLndpZHRoLGk9bi9lLm9wdGlvbnMuaGVpZ2h0O2UuY29udGV4dC5zY2FsZSgxL28sMS9pKSxlLmNvbnRleHQudHJhbnNsYXRlKC1lLmJvdW5kcy5taW4ueCwtZS5ib3VuZHMubWluLnkpfSxvLmVuZFZpZXdUcmFuc2Zvcm09ZnVuY3Rpb24oZSl7ZS5jb250ZXh0LnNldFRyYW5zZm9ybShlLm9wdGlvbnMucGl4ZWxSYXRpbywwLDAsZS5vcHRpb25zLnBpeGVsUmF0aW8sMCwwKX0sby53b3JsZD1mdW5jdGlvbihlKXt2YXIgdCxuPWUuZW5naW5lLGk9bi53b3JsZCx1PWUuY2FudmFzLHA9ZS5jb250ZXh0LG09ZS5vcHRpb25zLHY9ci5hbGxCb2RpZXMoaSkseT1yLmFsbENvbnN0cmFpbnRzKGkpLGc9bS53aXJlZnJhbWVzP20ud2lyZWZyYW1lQmFja2dyb3VuZDptLmJhY2tncm91bmQseD1bXSxoPVtdLGI9e3RpbWVzdGFtcDpuLnRpbWluZy50aW1lc3RhbXB9O2lmKGEudHJpZ2dlcihlLFwiYmVmb3JlUmVuZGVyXCIsYiksZS5jdXJyZW50QmFja2dyb3VuZCE9PWcmJmYoZSxnKSxwLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj1cInNvdXJjZS1pblwiLHAuZmlsbFN0eWxlPVwidHJhbnNwYXJlbnRcIixwLmZpbGxSZWN0KDAsMCx1LndpZHRoLHUuaGVpZ2h0KSxwLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj1cInNvdXJjZS1vdmVyXCIsbS5oYXNCb3VuZHMpe2Zvcih0PTA7dDx2Lmxlbmd0aDt0Kyspe3ZhciB3PXZbdF07cy5vdmVybGFwcyh3LmJvdW5kcyxlLmJvdW5kcykmJngucHVzaCh3KX1mb3IodD0wO3Q8eS5sZW5ndGg7dCsrKXt2YXIgUz15W3RdLEM9Uy5ib2R5QSxBPVMuYm9keUIsUD1TLnBvaW50QSxCPVMucG9pbnRCO0MmJihQPWMuYWRkKEMucG9zaXRpb24sUy5wb2ludEEpKSxcbkEmJihCPWMuYWRkKEEucG9zaXRpb24sUy5wb2ludEIpKSxQJiZCJiYoKHMuY29udGFpbnMoZS5ib3VuZHMsUCl8fHMuY29udGFpbnMoZS5ib3VuZHMsQikpJiZoLnB1c2goUykpfW8uc3RhcnRWaWV3VHJhbnNmb3JtKGUpLGUubW91c2UmJihkLnNldFNjYWxlKGUubW91c2Use3g6KGUuYm91bmRzLm1heC54LWUuYm91bmRzLm1pbi54KS9lLmNhbnZhcy53aWR0aCx5OihlLmJvdW5kcy5tYXgueS1lLmJvdW5kcy5taW4ueSkvZS5jYW52YXMuaGVpZ2h0fSksZC5zZXRPZmZzZXQoZS5tb3VzZSxlLmJvdW5kcy5taW4pKX1lbHNlIGg9eSx4PXY7IW0ud2lyZWZyYW1lc3x8bi5lbmFibGVTbGVlcGluZyYmbS5zaG93U2xlZXBpbmc/by5ib2RpZXMoZSx4LHApOihtLnNob3dDb252ZXhIdWxscyYmby5ib2R5Q29udmV4SHVsbHMoZSx4LHApLG8uYm9keVdpcmVmcmFtZXMoZSx4LHApKSxtLnNob3dCb3VuZHMmJm8uYm9keUJvdW5kcyhlLHgscCksKG0uc2hvd0F4ZXN8fG0uc2hvd0FuZ2xlSW5kaWNhdG9yKSYmby5ib2R5QXhlcyhlLHgscCksbS5zaG93UG9zaXRpb25zJiZvLmJvZHlQb3NpdGlvbnMoZSx4LHApLG0uc2hvd1ZlbG9jaXR5JiZvLmJvZHlWZWxvY2l0eShlLHgscCksbS5zaG93SWRzJiZvLmJvZHlJZHMoZSx4LHApLG0uc2hvd1NlcGFyYXRpb25zJiZvLnNlcGFyYXRpb25zKGUsbi5wYWlycy5saXN0LHApLG0uc2hvd0NvbGxpc2lvbnMmJm8uY29sbGlzaW9ucyhlLG4ucGFpcnMubGlzdCxwKSxtLnNob3dWZXJ0ZXhOdW1iZXJzJiZvLnZlcnRleE51bWJlcnMoZSx4LHApLG0uc2hvd01vdXNlUG9zaXRpb24mJm8ubW91c2VQb3NpdGlvbihlLGUubW91c2UscCksby5jb25zdHJhaW50cyhoLHApLG0uc2hvd0Jyb2FkcGhhc2UmJm4uYnJvYWRwaGFzZS5jb250cm9sbGVyPT09bCYmby5ncmlkKGUsbi5icm9hZHBoYXNlLHApLG0uc2hvd0RlYnVnJiZvLmRlYnVnKGUscCksbS5oYXNCb3VuZHMmJm8uZW5kVmlld1RyYW5zZm9ybShlKSxcbmEudHJpZ2dlcihlLFwiYWZ0ZXJSZW5kZXJcIixiKX0sby5kZWJ1Zz1mdW5jdGlvbihlLHQpe3ZhciBuPXQsbz1lLmVuZ2luZSxpPW8ud29ybGQscz1vLm1ldHJpY3MsYT1lLm9wdGlvbnM7ci5hbGxCb2RpZXMoaSk7aWYoby50aW1pbmcudGltZXN0YW1wLShlLmRlYnVnVGltZXN0YW1wfHwwKT49NTAwKXt2YXIgbD1cIlwiO3MudGltaW5nJiYobCs9XCJmcHM6IFwiK01hdGgucm91bmQocy50aW1pbmcuZnBzKStcIiAgICBcIiksZS5kZWJ1Z1N0cmluZz1sLGUuZGVidWdUaW1lc3RhbXA9by50aW1pbmcudGltZXN0YW1wfWlmKGUuZGVidWdTdHJpbmcpe24uZm9udD1cIjEycHggQXJpYWxcIixhLndpcmVmcmFtZXM/bi5maWxsU3R5bGU9XCJyZ2JhKDI1NSwyNTUsMjU1LDAuNSlcIjpuLmZpbGxTdHlsZT1cInJnYmEoMCwwLDAsMC41KVwiO2Zvcih2YXIgYz1lLmRlYnVnU3RyaW5nLnNwbGl0KFwiXFxuXCIpLGQ9MDtkPGMubGVuZ3RoO2QrKyluLmZpbGxUZXh0KGNbZF0sNTAsNTArMTgqZCl9fSxvLmNvbnN0cmFpbnRzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXQsbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgcj1lW29dO2lmKHIucmVuZGVyLnZpc2libGUmJnIucG9pbnRBJiZyLnBvaW50Qil7dmFyIHMsYSxsPXIuYm9keUEsZD1yLmJvZHlCO2lmKHM9bD9jLmFkZChsLnBvc2l0aW9uLHIucG9pbnRBKTpyLnBvaW50QSxcInBpblwiPT09ci5yZW5kZXIudHlwZSluLmJlZ2luUGF0aCgpLG4uYXJjKHMueCxzLnksMywwLDIqTWF0aC5QSSksbi5jbG9zZVBhdGgoKTtlbHNle2lmKGE9ZD9jLmFkZChkLnBvc2l0aW9uLHIucG9pbnRCKTpyLnBvaW50QixuLmJlZ2luUGF0aCgpLG4ubW92ZVRvKHMueCxzLnkpLFwic3ByaW5nXCI9PT1yLnJlbmRlci50eXBlKWZvcih2YXIgdSxwPWMuc3ViKGEscyksZj1jLnBlcnAoYy5ub3JtYWxpc2UocCkpLG09TWF0aC5jZWlsKGkuY2xhbXAoci5sZW5ndGgvNSwxMiwyMCkpLHY9MTt2PG07dis9MSl1PXYlMj09MD8xOi0xLFxubi5saW5lVG8ocy54K3AueCoodi9tKStmLngqdSo0LHMueStwLnkqKHYvbSkrZi55KnUqNCk7bi5saW5lVG8oYS54LGEueSl9ci5yZW5kZXIubGluZVdpZHRoJiYobi5saW5lV2lkdGg9ci5yZW5kZXIubGluZVdpZHRoLG4uc3Ryb2tlU3R5bGU9ci5yZW5kZXIuc3Ryb2tlU3R5bGUsbi5zdHJva2UoKSksci5yZW5kZXIuYW5jaG9ycyYmKG4uZmlsbFN0eWxlPXIucmVuZGVyLnN0cm9rZVN0eWxlLG4uYmVnaW5QYXRoKCksbi5hcmMocy54LHMueSwzLDAsMipNYXRoLlBJKSxuLmFyYyhhLngsYS55LDMsMCwyKk1hdGguUEkpLG4uY2xvc2VQYXRoKCksbi5maWxsKCkpfX19LG8uYm9keVNoYWRvd3M9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgbz1uLGk9KGUuZW5naW5lLDApO2k8dC5sZW5ndGg7aSsrKXt2YXIgcj10W2ldO2lmKHIucmVuZGVyLnZpc2libGUpe2lmKHIuY2lyY2xlUmFkaXVzKW8uYmVnaW5QYXRoKCksby5hcmMoci5wb3NpdGlvbi54LHIucG9zaXRpb24ueSxyLmNpcmNsZVJhZGl1cywwLDIqTWF0aC5QSSksby5jbG9zZVBhdGgoKTtlbHNle28uYmVnaW5QYXRoKCksby5tb3ZlVG8oci52ZXJ0aWNlc1swXS54LHIudmVydGljZXNbMF0ueSk7Zm9yKHZhciBzPTE7czxyLnZlcnRpY2VzLmxlbmd0aDtzKyspby5saW5lVG8oci52ZXJ0aWNlc1tzXS54LHIudmVydGljZXNbc10ueSk7by5jbG9zZVBhdGgoKX12YXIgYT1yLnBvc2l0aW9uLngtLjUqZS5vcHRpb25zLndpZHRoLGw9ci5wb3NpdGlvbi55LS4yKmUub3B0aW9ucy5oZWlnaHQsYz1NYXRoLmFicyhhKStNYXRoLmFicyhsKTtvLnNoYWRvd0NvbG9yPVwicmdiYSgwLDAsMCwwLjE1KVwiLG8uc2hhZG93T2Zmc2V0WD0uMDUqYSxvLnNoYWRvd09mZnNldFk9LjA1Kmwsby5zaGFkb3dCbHVyPTErMTIqTWF0aC5taW4oMSxjLzFlMyksby5maWxsKCksby5zaGFkb3dDb2xvcj1udWxsLG8uc2hhZG93T2Zmc2V0WD1udWxsLG8uc2hhZG93T2Zmc2V0WT1udWxsLG8uc2hhZG93Qmx1cj1udWxsfX19LFxuby5ib2RpZXM9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLGkscixzLGE9bixsPShlLmVuZ2luZSxlLm9wdGlvbnMpLGM9bC5zaG93SW50ZXJuYWxFZGdlc3x8IWwud2lyZWZyYW1lcztmb3Iocj0wO3I8dC5sZW5ndGg7cisrKWlmKG89dFtyXSxvLnJlbmRlci52aXNpYmxlKWZvcihzPW8ucGFydHMubGVuZ3RoPjE/MTowO3M8by5wYXJ0cy5sZW5ndGg7cysrKWlmKGk9by5wYXJ0c1tzXSxpLnJlbmRlci52aXNpYmxlKXtpZihsLnNob3dTbGVlcGluZyYmby5pc1NsZWVwaW5nP2EuZ2xvYmFsQWxwaGE9LjUqaS5yZW5kZXIub3BhY2l0eToxIT09aS5yZW5kZXIub3BhY2l0eSYmKGEuZ2xvYmFsQWxwaGE9aS5yZW5kZXIub3BhY2l0eSksaS5yZW5kZXIuc3ByaXRlJiZpLnJlbmRlci5zcHJpdGUudGV4dHVyZSYmIWwud2lyZWZyYW1lcyl7dmFyIGQ9aS5yZW5kZXIuc3ByaXRlLHU9cChlLGQudGV4dHVyZSk7YS50cmFuc2xhdGUoaS5wb3NpdGlvbi54LGkucG9zaXRpb24ueSksYS5yb3RhdGUoaS5hbmdsZSksYS5kcmF3SW1hZ2UodSx1LndpZHRoKi1kLnhPZmZzZXQqZC54U2NhbGUsdS5oZWlnaHQqLWQueU9mZnNldCpkLnlTY2FsZSx1LndpZHRoKmQueFNjYWxlLHUuaGVpZ2h0KmQueVNjYWxlKSxhLnJvdGF0ZSgtaS5hbmdsZSksYS50cmFuc2xhdGUoLWkucG9zaXRpb24ueCwtaS5wb3NpdGlvbi55KX1lbHNle2lmKGkuY2lyY2xlUmFkaXVzKWEuYmVnaW5QYXRoKCksYS5hcmMoaS5wb3NpdGlvbi54LGkucG9zaXRpb24ueSxpLmNpcmNsZVJhZGl1cywwLDIqTWF0aC5QSSk7ZWxzZXthLmJlZ2luUGF0aCgpLGEubW92ZVRvKGkudmVydGljZXNbMF0ueCxpLnZlcnRpY2VzWzBdLnkpO2Zvcih2YXIgZj0xO2Y8aS52ZXJ0aWNlcy5sZW5ndGg7ZisrKSFpLnZlcnRpY2VzW2YtMV0uaXNJbnRlcm5hbHx8Yz9hLmxpbmVUbyhpLnZlcnRpY2VzW2ZdLngsaS52ZXJ0aWNlc1tmXS55KTphLm1vdmVUbyhpLnZlcnRpY2VzW2ZdLngsaS52ZXJ0aWNlc1tmXS55KSxcbmkudmVydGljZXNbZl0uaXNJbnRlcm5hbCYmIWMmJmEubW92ZVRvKGkudmVydGljZXNbKGYrMSklaS52ZXJ0aWNlcy5sZW5ndGhdLngsaS52ZXJ0aWNlc1soZisxKSVpLnZlcnRpY2VzLmxlbmd0aF0ueSk7YS5saW5lVG8oaS52ZXJ0aWNlc1swXS54LGkudmVydGljZXNbMF0ueSksYS5jbG9zZVBhdGgoKX1sLndpcmVmcmFtZXM/KGEubGluZVdpZHRoPTEsYS5zdHJva2VTdHlsZT1cIiNiYmJcIixhLnN0cm9rZSgpKTooYS5maWxsU3R5bGU9aS5yZW5kZXIuZmlsbFN0eWxlLGkucmVuZGVyLmxpbmVXaWR0aCYmKGEubGluZVdpZHRoPWkucmVuZGVyLmxpbmVXaWR0aCxhLnN0cm9rZVN0eWxlPWkucmVuZGVyLnN0cm9rZVN0eWxlLGEuc3Ryb2tlKCkpLGEuZmlsbCgpKX1hLmdsb2JhbEFscGhhPTF9fSxvLmJvZHlXaXJlZnJhbWVzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpLHIscyxhLGw9bixjPWUub3B0aW9ucy5zaG93SW50ZXJuYWxFZGdlcztmb3IobC5iZWdpblBhdGgoKSxyPTA7cjx0Lmxlbmd0aDtyKyspaWYobz10W3JdLG8ucmVuZGVyLnZpc2libGUpZm9yKGE9by5wYXJ0cy5sZW5ndGg+MT8xOjA7YTxvLnBhcnRzLmxlbmd0aDthKyspe2ZvcihpPW8ucGFydHNbYV0sbC5tb3ZlVG8oaS52ZXJ0aWNlc1swXS54LGkudmVydGljZXNbMF0ueSkscz0xO3M8aS52ZXJ0aWNlcy5sZW5ndGg7cysrKSFpLnZlcnRpY2VzW3MtMV0uaXNJbnRlcm5hbHx8Yz9sLmxpbmVUbyhpLnZlcnRpY2VzW3NdLngsaS52ZXJ0aWNlc1tzXS55KTpsLm1vdmVUbyhpLnZlcnRpY2VzW3NdLngsaS52ZXJ0aWNlc1tzXS55KSxpLnZlcnRpY2VzW3NdLmlzSW50ZXJuYWwmJiFjJiZsLm1vdmVUbyhpLnZlcnRpY2VzWyhzKzEpJWkudmVydGljZXMubGVuZ3RoXS54LGkudmVydGljZXNbKHMrMSklaS52ZXJ0aWNlcy5sZW5ndGhdLnkpO2wubGluZVRvKGkudmVydGljZXNbMF0ueCxpLnZlcnRpY2VzWzBdLnkpfWwubGluZVdpZHRoPTEsbC5zdHJva2VTdHlsZT1cIiNiYmJcIixsLnN0cm9rZSgpfSxcbm8uYm9keUNvbnZleEh1bGxzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpLHIscz1uO2ZvcihzLmJlZ2luUGF0aCgpLGk9MDtpPHQubGVuZ3RoO2krKylpZihvPXRbaV0sby5yZW5kZXIudmlzaWJsZSYmMSE9PW8ucGFydHMubGVuZ3RoKXtmb3Iocy5tb3ZlVG8oby52ZXJ0aWNlc1swXS54LG8udmVydGljZXNbMF0ueSkscj0xO3I8by52ZXJ0aWNlcy5sZW5ndGg7cisrKXMubGluZVRvKG8udmVydGljZXNbcl0ueCxvLnZlcnRpY2VzW3JdLnkpO3MubGluZVRvKG8udmVydGljZXNbMF0ueCxvLnZlcnRpY2VzWzBdLnkpfXMubGluZVdpZHRoPTEscy5zdHJva2VTdHlsZT1cInJnYmEoMjU1LDI1NSwyNTUsMC4yKVwiLHMuc3Ryb2tlKCl9LG8udmVydGV4TnVtYmVycz1mdW5jdGlvbihlLHQsbil7dmFyIG8saSxyLHM9bjtmb3Iobz0wO288dC5sZW5ndGg7bysrKXt2YXIgYT10W29dLnBhcnRzO2ZvcihyPWEubGVuZ3RoPjE/MTowO3I8YS5sZW5ndGg7cisrKXt2YXIgbD1hW3JdO2ZvcihpPTA7aTxsLnZlcnRpY2VzLmxlbmd0aDtpKyspcy5maWxsU3R5bGU9XCJyZ2JhKDI1NSwyNTUsMjU1LDAuMilcIixzLmZpbGxUZXh0KG8rXCJfXCIraSxsLnBvc2l0aW9uLngrLjgqKGwudmVydGljZXNbaV0ueC1sLnBvc2l0aW9uLngpLGwucG9zaXRpb24ueSsuOCoobC52ZXJ0aWNlc1tpXS55LWwucG9zaXRpb24ueSkpfX19LG8ubW91c2VQb3NpdGlvbj1mdW5jdGlvbihlLHQsbil7dmFyIG89bjtvLmZpbGxTdHlsZT1cInJnYmEoMjU1LDI1NSwyNTUsMC44KVwiLG8uZmlsbFRleHQodC5wb3NpdGlvbi54K1wiICBcIit0LnBvc2l0aW9uLnksdC5wb3NpdGlvbi54KzUsdC5wb3NpdGlvbi55LTUpfSxvLmJvZHlCb3VuZHM9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPW4saT0oZS5lbmdpbmUsZS5vcHRpb25zKTtvLmJlZ2luUGF0aCgpO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXtcbmlmKHRbcl0ucmVuZGVyLnZpc2libGUpZm9yKHZhciBzPXRbcl0ucGFydHMsYT1zLmxlbmd0aD4xPzE6MDthPHMubGVuZ3RoO2ErKyl7dmFyIGw9c1thXTtvLnJlY3QobC5ib3VuZHMubWluLngsbC5ib3VuZHMubWluLnksbC5ib3VuZHMubWF4LngtbC5ib3VuZHMubWluLngsbC5ib3VuZHMubWF4LnktbC5ib3VuZHMubWluLnkpfX1pLndpcmVmcmFtZXM/by5zdHJva2VTdHlsZT1cInJnYmEoMjU1LDI1NSwyNTUsMC4wOClcIjpvLnN0cm9rZVN0eWxlPVwicmdiYSgwLDAsMCwwLjEpXCIsby5saW5lV2lkdGg9MSxvLnN0cm9rZSgpfSxvLmJvZHlBeGVzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpLHIscyxhPW4sbD0oZS5lbmdpbmUsZS5vcHRpb25zKTtmb3IoYS5iZWdpblBhdGgoKSxpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBjPXRbaV0sZD1jLnBhcnRzO2lmKGMucmVuZGVyLnZpc2libGUpaWYobC5zaG93QXhlcylmb3Iocj1kLmxlbmd0aD4xPzE6MDtyPGQubGVuZ3RoO3IrKylmb3Iobz1kW3JdLHM9MDtzPG8uYXhlcy5sZW5ndGg7cysrKXt2YXIgdT1vLmF4ZXNbc107YS5tb3ZlVG8oby5wb3NpdGlvbi54LG8ucG9zaXRpb24ueSksYS5saW5lVG8oby5wb3NpdGlvbi54KzIwKnUueCxvLnBvc2l0aW9uLnkrMjAqdS55KX1lbHNlIGZvcihyPWQubGVuZ3RoPjE/MTowO3I8ZC5sZW5ndGg7cisrKWZvcihvPWRbcl0scz0wO3M8by5heGVzLmxlbmd0aDtzKyspYS5tb3ZlVG8oby5wb3NpdGlvbi54LG8ucG9zaXRpb24ueSksYS5saW5lVG8oKG8udmVydGljZXNbMF0ueCtvLnZlcnRpY2VzW28udmVydGljZXMubGVuZ3RoLTFdLngpLzIsKG8udmVydGljZXNbMF0ueStvLnZlcnRpY2VzW28udmVydGljZXMubGVuZ3RoLTFdLnkpLzIpfWwud2lyZWZyYW1lcz8oYS5zdHJva2VTdHlsZT1cImluZGlhbnJlZFwiLGEubGluZVdpZHRoPTEpOihhLnN0cm9rZVN0eWxlPVwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpXCIsYS5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249XCJvdmVybGF5XCIsXG5hLmxpbmVXaWR0aD0yKSxhLnN0cm9rZSgpLGEuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uPVwic291cmNlLW92ZXJcIn0sby5ib2R5UG9zaXRpb25zPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpLHIscyxhPW4sbD0oZS5lbmdpbmUsZS5vcHRpb25zKTtmb3IoYS5iZWdpblBhdGgoKSxyPTA7cjx0Lmxlbmd0aDtyKyspaWYobz10W3JdLG8ucmVuZGVyLnZpc2libGUpZm9yKHM9MDtzPG8ucGFydHMubGVuZ3RoO3MrKylpPW8ucGFydHNbc10sYS5hcmMoaS5wb3NpdGlvbi54LGkucG9zaXRpb24ueSwzLDAsMipNYXRoLlBJLCExKSxhLmNsb3NlUGF0aCgpO2ZvcihsLndpcmVmcmFtZXM/YS5maWxsU3R5bGU9XCJpbmRpYW5yZWRcIjphLmZpbGxTdHlsZT1cInJnYmEoMCwwLDAsMC41KVwiLGEuZmlsbCgpLGEuYmVnaW5QYXRoKCkscj0wO3I8dC5sZW5ndGg7cisrKW89dFtyXSxvLnJlbmRlci52aXNpYmxlJiYoYS5hcmMoby5wb3NpdGlvblByZXYueCxvLnBvc2l0aW9uUHJldi55LDIsMCwyKk1hdGguUEksITEpLGEuY2xvc2VQYXRoKCkpO2EuZmlsbFN0eWxlPVwicmdiYSgyNTUsMTY1LDAsMC44KVwiLGEuZmlsbCgpfSxvLmJvZHlWZWxvY2l0eT1mdW5jdGlvbihlLHQsbil7dmFyIG89bjtvLmJlZ2luUGF0aCgpO2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgcj10W2ldO3IucmVuZGVyLnZpc2libGUmJihvLm1vdmVUbyhyLnBvc2l0aW9uLngsci5wb3NpdGlvbi55KSxvLmxpbmVUbyhyLnBvc2l0aW9uLngrMiooci5wb3NpdGlvbi54LXIucG9zaXRpb25QcmV2LngpLHIucG9zaXRpb24ueSsyKihyLnBvc2l0aW9uLnktci5wb3NpdGlvblByZXYueSkpKX1vLmxpbmVXaWR0aD0zLG8uc3Ryb2tlU3R5bGU9XCJjb3JuZmxvd2VyYmx1ZVwiLG8uc3Ryb2tlKCl9LG8uYm9keUlkcz1mdW5jdGlvbihlLHQsbil7dmFyIG8saSxyPW47Zm9yKG89MDtvPHQubGVuZ3RoO28rKylpZih0W29dLnJlbmRlci52aXNpYmxlKXt2YXIgcz10W29dLnBhcnRzXG47Zm9yKGk9cy5sZW5ndGg+MT8xOjA7aTxzLmxlbmd0aDtpKyspe3ZhciBhPXNbaV07ci5mb250PVwiMTJweCBBcmlhbFwiLHIuZmlsbFN0eWxlPVwicmdiYSgyNTUsMjU1LDI1NSwwLjUpXCIsci5maWxsVGV4dChhLmlkLGEucG9zaXRpb24ueCsxMCxhLnBvc2l0aW9uLnktMTApfX19LG8uY29sbGlzaW9ucz1mdW5jdGlvbihlLHQsbil7dmFyIG8saSxyLHMsYT1uLGw9ZS5vcHRpb25zO2ZvcihhLmJlZ2luUGF0aCgpLHI9MDtyPHQubGVuZ3RoO3IrKylpZihvPXRbcl0sby5pc0FjdGl2ZSlmb3IoaT1vLmNvbGxpc2lvbixzPTA7czxvLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aDtzKyspe3ZhciBjPW8uYWN0aXZlQ29udGFjdHNbc10sZD1jLnZlcnRleDthLnJlY3QoZC54LTEuNSxkLnktMS41LDMuNSwzLjUpfWZvcihsLndpcmVmcmFtZXM/YS5maWxsU3R5bGU9XCJyZ2JhKDI1NSwyNTUsMjU1LDAuNylcIjphLmZpbGxTdHlsZT1cIm9yYW5nZVwiLGEuZmlsbCgpLGEuYmVnaW5QYXRoKCkscj0wO3I8dC5sZW5ndGg7cisrKWlmKG89dFtyXSxvLmlzQWN0aXZlJiYoaT1vLmNvbGxpc2lvbixvLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aD4wKSl7dmFyIHU9by5hY3RpdmVDb250YWN0c1swXS52ZXJ0ZXgueCxwPW8uYWN0aXZlQ29udGFjdHNbMF0udmVydGV4Lnk7Mj09PW8uYWN0aXZlQ29udGFjdHMubGVuZ3RoJiYodT0oby5hY3RpdmVDb250YWN0c1swXS52ZXJ0ZXgueCtvLmFjdGl2ZUNvbnRhY3RzWzFdLnZlcnRleC54KS8yLHA9KG8uYWN0aXZlQ29udGFjdHNbMF0udmVydGV4Lnkrby5hY3RpdmVDb250YWN0c1sxXS52ZXJ0ZXgueSkvMiksaS5ib2R5Qj09PWkuc3VwcG9ydHNbMF0uYm9keXx8ITA9PT1pLmJvZHlBLmlzU3RhdGljP2EubW92ZVRvKHUtOCppLm5vcm1hbC54LHAtOCppLm5vcm1hbC55KTphLm1vdmVUbyh1KzgqaS5ub3JtYWwueCxwKzgqaS5ub3JtYWwueSksYS5saW5lVG8odSxwKX1cbmwud2lyZWZyYW1lcz9hLnN0cm9rZVN0eWxlPVwicmdiYSgyNTUsMTY1LDAsMC43KVwiOmEuc3Ryb2tlU3R5bGU9XCJvcmFuZ2VcIixhLmxpbmVXaWR0aD0xLGEuc3Ryb2tlKCl9LG8uc2VwYXJhdGlvbnM9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLGkscixzLGEsbD1uLGM9ZS5vcHRpb25zO2ZvcihsLmJlZ2luUGF0aCgpLGE9MDthPHQubGVuZ3RoO2ErKylpZihvPXRbYV0sby5pc0FjdGl2ZSl7aT1vLmNvbGxpc2lvbixyPWkuYm9keUEscz1pLmJvZHlCO3ZhciBkPTE7cy5pc1N0YXRpY3x8ci5pc1N0YXRpY3x8KGQ9LjUpLHMuaXNTdGF0aWMmJihkPTApLGwubW92ZVRvKHMucG9zaXRpb24ueCxzLnBvc2l0aW9uLnkpLGwubGluZVRvKHMucG9zaXRpb24ueC1pLnBlbmV0cmF0aW9uLngqZCxzLnBvc2l0aW9uLnktaS5wZW5ldHJhdGlvbi55KmQpLGQ9MSxzLmlzU3RhdGljfHxyLmlzU3RhdGljfHwoZD0uNSksci5pc1N0YXRpYyYmKGQ9MCksbC5tb3ZlVG8oci5wb3NpdGlvbi54LHIucG9zaXRpb24ueSksbC5saW5lVG8oci5wb3NpdGlvbi54K2kucGVuZXRyYXRpb24ueCpkLHIucG9zaXRpb24ueStpLnBlbmV0cmF0aW9uLnkqZCl9Yy53aXJlZnJhbWVzP2wuc3Ryb2tlU3R5bGU9XCJyZ2JhKDI1NSwxNjUsMCwwLjUpXCI6bC5zdHJva2VTdHlsZT1cIm9yYW5nZVwiLGwuc3Ryb2tlKCl9LG8uZ3JpZD1mdW5jdGlvbihlLHQsbil7dmFyIG89bjtlLm9wdGlvbnMud2lyZWZyYW1lcz9vLnN0cm9rZVN0eWxlPVwicmdiYSgyNTUsMTgwLDAsMC4xKVwiOm8uc3Ryb2tlU3R5bGU9XCJyZ2JhKDI1NSwxODAsMCwwLjUpXCIsby5iZWdpblBhdGgoKTtmb3IodmFyIHI9aS5rZXlzKHQuYnVja2V0cykscz0wO3M8ci5sZW5ndGg7cysrKXt2YXIgYT1yW3NdO2lmKCEodC5idWNrZXRzW2FdLmxlbmd0aDwyKSl7dmFyIGw9YS5zcGxpdCgvQ3xSLylcbjtvLnJlY3QoLjUrcGFyc2VJbnQobFsxXSwxMCkqdC5idWNrZXRXaWR0aCwuNStwYXJzZUludChsWzJdLDEwKSp0LmJ1Y2tldEhlaWdodCx0LmJ1Y2tldFdpZHRoLHQuYnVja2V0SGVpZ2h0KX19by5saW5lV2lkdGg9MSxvLnN0cm9rZSgpfSxvLmluc3BlY3Rvcj1mdW5jdGlvbihlLHQpe3ZhciBuLG89KGUuZW5naW5lLGUuc2VsZWN0ZWQpLGk9ZS5yZW5kZXIscj1pLm9wdGlvbnM7aWYoci5oYXNCb3VuZHMpe3ZhciBzPWkuYm91bmRzLm1heC54LWkuYm91bmRzLm1pbi54LGE9aS5ib3VuZHMubWF4LnktaS5ib3VuZHMubWluLnksbD1zL2kub3B0aW9ucy53aWR0aCxjPWEvaS5vcHRpb25zLmhlaWdodDt0LnNjYWxlKDEvbCwxL2MpLHQudHJhbnNsYXRlKC1pLmJvdW5kcy5taW4ueCwtaS5ib3VuZHMubWluLnkpfWZvcih2YXIgZD0wO2Q8by5sZW5ndGg7ZCsrKXt2YXIgdT1vW2RdLmRhdGE7c3dpdGNoKHQudHJhbnNsYXRlKC41LC41KSx0LmxpbmVXaWR0aD0xLHQuc3Ryb2tlU3R5bGU9XCJyZ2JhKDI1NSwxNjUsMCwwLjkpXCIsdC5zZXRMaW5lRGFzaChbMSwyXSksdS50eXBlKXtjYXNlXCJib2R5XCI6bj11LmJvdW5kcyx0LmJlZ2luUGF0aCgpLHQucmVjdChNYXRoLmZsb29yKG4ubWluLngtMyksTWF0aC5mbG9vcihuLm1pbi55LTMpLE1hdGguZmxvb3Iobi5tYXgueC1uLm1pbi54KzYpLE1hdGguZmxvb3Iobi5tYXgueS1uLm1pbi55KzYpKSx0LmNsb3NlUGF0aCgpLHQuc3Ryb2tlKCk7YnJlYWs7Y2FzZVwiY29uc3RyYWludFwiOnZhciBwPXUucG9pbnRBO3UuYm9keUEmJihwPXUucG9pbnRCKSx0LmJlZ2luUGF0aCgpLHQuYXJjKHAueCxwLnksMTAsMCwyKk1hdGguUEkpLHQuY2xvc2VQYXRoKCksdC5zdHJva2UoKX10LnNldExpbmVEYXNoKFtdKSx0LnRyYW5zbGF0ZSgtLjUsLS41KX1udWxsIT09ZS5zZWxlY3RTdGFydCYmKHQudHJhbnNsYXRlKC41LC41KSx0LmxpbmVXaWR0aD0xLHQuc3Ryb2tlU3R5bGU9XCJyZ2JhKDI1NSwxNjUsMCwwLjYpXCIsXG50LmZpbGxTdHlsZT1cInJnYmEoMjU1LDE2NSwwLDAuMSlcIixuPWUuc2VsZWN0Qm91bmRzLHQuYmVnaW5QYXRoKCksdC5yZWN0KE1hdGguZmxvb3Iobi5taW4ueCksTWF0aC5mbG9vcihuLm1pbi55KSxNYXRoLmZsb29yKG4ubWF4Lngtbi5taW4ueCksTWF0aC5mbG9vcihuLm1heC55LW4ubWluLnkpKSx0LmNsb3NlUGF0aCgpLHQuc3Ryb2tlKCksdC5maWxsKCksdC50cmFuc2xhdGUoLS41LC0uNSkpLHIuaGFzQm91bmRzJiZ0LnNldFRyYW5zZm9ybSgxLDAsMCwxLDAsMCl9O3ZhciBuPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtyZXR1cm4gbi53aWR0aD1lLG4uaGVpZ2h0PXQsbi5vbmNvbnRleHRtZW51PWZ1bmN0aW9uKCl7cmV0dXJuITF9LG4ub25zZWxlY3RzdGFydD1mdW5jdGlvbigpe3JldHVybiExfSxufSx1PWZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0Q29udGV4dChcIjJkXCIpO3JldHVybih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSkvKHQud2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8dC5tb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvfHx0Lm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8dC5vQmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8dC5iYWNraW5nU3RvcmVQaXhlbFJhdGlvfHwxKX0scD1mdW5jdGlvbihlLHQpe3ZhciBuPWUudGV4dHVyZXNbdF07cmV0dXJuIG58fChuPWUudGV4dHVyZXNbdF09bmV3IEltYWdlLG4uc3JjPXQsbil9LGY9ZnVuY3Rpb24oZSx0KXt2YXIgbj10Oy8oanBnfGdpZnxwbmcpJC8udGVzdCh0KSYmKG49XCJ1cmwoXCIrdCtcIilcIiksZS5jYW52YXMuc3R5bGUuYmFja2dyb3VuZD1uLGUuY2FudmFzLnN0eWxlLmJhY2tncm91bmRTaXplPVwiY29udGFpblwiLGUuY3VycmVudEJhY2tncm91bmQ9dH19KCl9LHtcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4uL2NvbGxpc2lvbi9HcmlkXCI6NixcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL0V2ZW50c1wiOjE2LFxuXCIuLi9jb3JlL01vdXNlXCI6MTksXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4fV0sMzI6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz17fTt0LmV4cG9ydHM9bzt2YXIgaT1lKFwiLi4vZ2VvbWV0cnkvQm91bmRzXCIpLHI9ZShcIi4uL2JvZHkvQ29tcG9zaXRlXCIpLHM9ZShcIi4uL2NvcmUvQ29tbW9uXCIpLGE9ZShcIi4uL2NvcmUvRXZlbnRzXCIpLGw9ZShcIi4uL2dlb21ldHJ5L1ZlY3RvclwiKTshZnVuY3Rpb24oKXt2YXIgZSx0O1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJihlPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24oZSl7d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKHMubm93KCkpfSwxZTMvNjApfSx0PXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tc0NhbmNlbEFuaW1hdGlvbkZyYW1lKSxvLmNyZWF0ZT1mdW5jdGlvbihlKXtzLndhcm4oXCJSZW5kZXJQaXhpLmNyZWF0ZTogTWF0dGVyLlJlbmRlclBpeGkgaXMgZGVwcmVjYXRlZCAoc2VlIGRvY3MpXCIpO3ZhciB0PXtjb250cm9sbGVyOm8sZW5naW5lOm51bGwsZWxlbWVudDpudWxsLGZyYW1lUmVxdWVzdElkOm51bGwsY2FudmFzOm51bGwscmVuZGVyZXI6bnVsbCxjb250YWluZXI6bnVsbCxzcHJpdGVDb250YWluZXI6bnVsbCxwaXhpT3B0aW9uczpudWxsLG9wdGlvbnM6e3dpZHRoOjgwMCxoZWlnaHQ6NjAwLGJhY2tncm91bmQ6XCIjZmFmYWZhXCIsd2lyZWZyYW1lQmFja2dyb3VuZDpcIiMyMjJcIixoYXNCb3VuZHM6ITEsZW5hYmxlZDohMCx3aXJlZnJhbWVzOiEwLHNob3dTbGVlcGluZzohMCxzaG93RGVidWc6ITEsXG5zaG93QnJvYWRwaGFzZTohMSxzaG93Qm91bmRzOiExLHNob3dWZWxvY2l0eTohMSxzaG93Q29sbGlzaW9uczohMSxzaG93QXhlczohMSxzaG93UG9zaXRpb25zOiExLHNob3dBbmdsZUluZGljYXRvcjohMSxzaG93SWRzOiExLHNob3dTaGFkb3dzOiExfX0sbj1zLmV4dGVuZCh0LGUpLGk9IW4ub3B0aW9ucy53aXJlZnJhbWVzJiZcInRyYW5zcGFyZW50XCI9PT1uLm9wdGlvbnMuYmFja2dyb3VuZDtyZXR1cm4gbi5waXhpT3B0aW9ucz1uLnBpeGlPcHRpb25zfHx7dmlldzpuLmNhbnZhcyx0cmFuc3BhcmVudDppLGFudGlhbGlhczohMCxiYWNrZ3JvdW5kQ29sb3I6ZS5iYWNrZ3JvdW5kfSxuLm1vdXNlPWUubW91c2Usbi5lbmdpbmU9ZS5lbmdpbmUsbi5yZW5kZXJlcj1uLnJlbmRlcmVyfHxuZXcgUElYSS5XZWJHTFJlbmRlcmVyKG4ub3B0aW9ucy53aWR0aCxuLm9wdGlvbnMuaGVpZ2h0LG4ucGl4aU9wdGlvbnMpLG4uY29udGFpbmVyPW4uY29udGFpbmVyfHxuZXcgUElYSS5Db250YWluZXIsbi5zcHJpdGVDb250YWluZXI9bi5zcHJpdGVDb250YWluZXJ8fG5ldyBQSVhJLkNvbnRhaW5lcixuLmNhbnZhcz1uLmNhbnZhc3x8bi5yZW5kZXJlci52aWV3LG4uYm91bmRzPW4uYm91bmRzfHx7bWluOnt4OjAseTowfSxtYXg6e3g6bi5vcHRpb25zLndpZHRoLHk6bi5vcHRpb25zLmhlaWdodH19LGEub24obi5lbmdpbmUsXCJiZWZvcmVVcGRhdGVcIixmdW5jdGlvbigpe28uY2xlYXIobil9KSxuLnRleHR1cmVzPXt9LG4uc3ByaXRlcz17fSxuLnByaW1pdGl2ZXM9e30sbi5jb250YWluZXIuYWRkQ2hpbGQobi5zcHJpdGVDb250YWluZXIpLHMuaXNFbGVtZW50KG4uZWxlbWVudCk/bi5lbGVtZW50LmFwcGVuZENoaWxkKG4uY2FudmFzKTpzLndhcm4oJ05vIFwicmVuZGVyLmVsZW1lbnRcIiBwYXNzZWQsIFwicmVuZGVyLmNhbnZhc1wiIHdhcyBub3QgaW5zZXJ0ZWQgaW50byBkb2N1bWVudC4nKSxuLmNhbnZhcy5vbmNvbnRleHRtZW51PWZ1bmN0aW9uKCl7cmV0dXJuITF9LFxubi5jYW52YXMub25zZWxlY3RzdGFydD1mdW5jdGlvbigpe3JldHVybiExfSxufSxvLnJ1bj1mdW5jdGlvbih0KXshZnVuY3Rpb24gbihpKXt0LmZyYW1lUmVxdWVzdElkPWUobiksby53b3JsZCh0KX0oKX0sby5zdG9wPWZ1bmN0aW9uKGUpe3QoZS5mcmFtZVJlcXVlc3RJZCl9LG8uY2xlYXI9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuY29udGFpbmVyLG49ZS5zcHJpdGVDb250YWluZXI7dC5jaGlsZHJlblswXTspdC5yZW1vdmVDaGlsZCh0LmNoaWxkcmVuWzBdKTtmb3IoO24uY2hpbGRyZW5bMF07KW4ucmVtb3ZlQ2hpbGQobi5jaGlsZHJlblswXSk7dmFyIG89ZS5zcHJpdGVzW1wiYmctMFwiXTtlLnRleHR1cmVzPXt9LGUuc3ByaXRlcz17fSxlLnByaW1pdGl2ZXM9e30sZS5zcHJpdGVzW1wiYmctMFwiXT1vLG8mJnQuYWRkQ2hpbGRBdChvLDApLGUuY29udGFpbmVyLmFkZENoaWxkKGUuc3ByaXRlQ29udGFpbmVyKSxlLmN1cnJlbnRCYWNrZ3JvdW5kPW51bGwsdC5zY2FsZS5zZXQoMSwxKSx0LnBvc2l0aW9uLnNldCgwLDApfSxvLnNldEJhY2tncm91bmQ9ZnVuY3Rpb24oZSx0KXtpZihlLmN1cnJlbnRCYWNrZ3JvdW5kIT09dCl7dmFyIG49dC5pbmRleE9mJiYtMSE9PXQuaW5kZXhPZihcIiNcIiksbz1lLnNwcml0ZXNbXCJiZy0wXCJdO2lmKG4pe3ZhciBpPXMuY29sb3JUb051bWJlcih0KTtlLnJlbmRlcmVyLmJhY2tncm91bmRDb2xvcj1pLG8mJmUuY29udGFpbmVyLnJlbW92ZUNoaWxkKG8pfWVsc2UgaWYoIW8pe3ZhciByPWQoZSx0KTtvPWUuc3ByaXRlc1tcImJnLTBcIl09bmV3IFBJWEkuU3ByaXRlKHIpLG8ucG9zaXRpb24ueD0wLG8ucG9zaXRpb24ueT0wLGUuY29udGFpbmVyLmFkZENoaWxkQXQobywwKX1lLmN1cnJlbnRCYWNrZ3JvdW5kPXR9fSxvLndvcmxkPWZ1bmN0aW9uKGUpe1xudmFyIHQsbj1lLmVuZ2luZSxzPW4ud29ybGQsYT1lLnJlbmRlcmVyLGM9ZS5jb250YWluZXIsZD1lLm9wdGlvbnMsdT1yLmFsbEJvZGllcyhzKSxwPXIuYWxsQ29uc3RyYWludHMocyksZj1bXTtkLndpcmVmcmFtZXM/by5zZXRCYWNrZ3JvdW5kKGUsZC53aXJlZnJhbWVCYWNrZ3JvdW5kKTpvLnNldEJhY2tncm91bmQoZSxkLmJhY2tncm91bmQpO3ZhciBtPWUuYm91bmRzLm1heC54LWUuYm91bmRzLm1pbi54LHY9ZS5ib3VuZHMubWF4LnktZS5ib3VuZHMubWluLnkseT1tL2Uub3B0aW9ucy53aWR0aCxnPXYvZS5vcHRpb25zLmhlaWdodDtpZihkLmhhc0JvdW5kcyl7Zm9yKHQ9MDt0PHUubGVuZ3RoO3QrKyl7dmFyIHg9dVt0XTt4LnJlbmRlci5zcHJpdGUudmlzaWJsZT1pLm92ZXJsYXBzKHguYm91bmRzLGUuYm91bmRzKX1mb3IodD0wO3Q8cC5sZW5ndGg7dCsrKXt2YXIgaD1wW3RdLGI9aC5ib2R5QSx3PWguYm9keUIsUz1oLnBvaW50QSxDPWgucG9pbnRCO2ImJihTPWwuYWRkKGIucG9zaXRpb24saC5wb2ludEEpKSx3JiYoQz1sLmFkZCh3LnBvc2l0aW9uLGgucG9pbnRCKSksUyYmQyYmKChpLmNvbnRhaW5zKGUuYm91bmRzLFMpfHxpLmNvbnRhaW5zKGUuYm91bmRzLEMpKSYmZi5wdXNoKGgpKX1jLnNjYWxlLnNldCgxL3ksMS9nKSxjLnBvc2l0aW9uLnNldCgtZS5ib3VuZHMubWluLngqKDEveSksLWUuYm91bmRzLm1pbi55KigxL2cpKX1lbHNlIGY9cDtmb3IodD0wO3Q8dS5sZW5ndGg7dCsrKW8uYm9keShlLHVbdF0pO2Zvcih0PTA7dDxmLmxlbmd0aDt0Kyspby5jb25zdHJhaW50KGUsZlt0XSk7YS5yZW5kZXIoYyl9LG8uY29uc3RyYWludD1mdW5jdGlvbihlLHQpe3ZhciBuPShlLmVuZ2luZSx0LmJvZHlBKSxvPXQuYm9keUIsaT10LnBvaW50QSxyPXQucG9pbnRCLGE9ZS5jb250YWluZXIsbD10LnJlbmRlcixjPVwiYy1cIit0LmlkLGQ9ZS5wcmltaXRpdmVzW2NdO2lmKGR8fChkPWUucHJpbWl0aXZlc1tjXT1uZXcgUElYSS5HcmFwaGljcyksXG4hbC52aXNpYmxlfHwhdC5wb2ludEF8fCF0LnBvaW50QilyZXR1cm4gdm9pZCBkLmNsZWFyKCk7LTE9PT1zLmluZGV4T2YoYS5jaGlsZHJlbixkKSYmYS5hZGRDaGlsZChkKSxkLmNsZWFyKCksZC5iZWdpbkZpbGwoMCwwKSxkLmxpbmVTdHlsZShsLmxpbmVXaWR0aCxzLmNvbG9yVG9OdW1iZXIobC5zdHJva2VTdHlsZSksMSksbj9kLm1vdmVUbyhuLnBvc2l0aW9uLngraS54LG4ucG9zaXRpb24ueStpLnkpOmQubW92ZVRvKGkueCxpLnkpLG8/ZC5saW5lVG8oby5wb3NpdGlvbi54K3IueCxvLnBvc2l0aW9uLnkrci55KTpkLmxpbmVUbyhyLngsci55KSxkLmVuZEZpbGwoKX0sby5ib2R5PWZ1bmN0aW9uKGUsdCl7dmFyIG89KGUuZW5naW5lLHQucmVuZGVyKTtpZihvLnZpc2libGUpaWYoby5zcHJpdGUmJm8uc3ByaXRlLnRleHR1cmUpe3ZhciBpPVwiYi1cIit0LmlkLHI9ZS5zcHJpdGVzW2ldLGE9ZS5zcHJpdGVDb250YWluZXI7cnx8KHI9ZS5zcHJpdGVzW2ldPW4oZSx0KSksLTE9PT1zLmluZGV4T2YoYS5jaGlsZHJlbixyKSYmYS5hZGRDaGlsZChyKSxyLnBvc2l0aW9uLng9dC5wb3NpdGlvbi54LHIucG9zaXRpb24ueT10LnBvc2l0aW9uLnksci5yb3RhdGlvbj10LmFuZ2xlLHIuc2NhbGUueD1vLnNwcml0ZS54U2NhbGV8fDEsci5zY2FsZS55PW8uc3ByaXRlLnlTY2FsZXx8MX1lbHNle3ZhciBsPVwiYi1cIit0LmlkLGQ9ZS5wcmltaXRpdmVzW2xdLHU9ZS5jb250YWluZXI7ZHx8KGQ9ZS5wcmltaXRpdmVzW2xdPWMoZSx0KSxkLmluaXRpYWxBbmdsZT10LmFuZ2xlKSwtMT09PXMuaW5kZXhPZih1LmNoaWxkcmVuLGQpJiZ1LmFkZENoaWxkKGQpLGQucG9zaXRpb24ueD10LnBvc2l0aW9uLngsZC5wb3NpdGlvbi55PXQucG9zaXRpb24ueSxkLnJvdGF0aW9uPXQuYW5nbGUtZC5pbml0aWFsQW5nbGV9fTt2YXIgbj1mdW5jdGlvbihlLHQpe3ZhciBuPXQucmVuZGVyLG89bi5zcHJpdGUudGV4dHVyZSxpPWQoZSxvKSxyPW5ldyBQSVhJLlNwcml0ZShpKVxuO3JldHVybiByLmFuY2hvci54PXQucmVuZGVyLnNwcml0ZS54T2Zmc2V0LHIuYW5jaG9yLnk9dC5yZW5kZXIuc3ByaXRlLnlPZmZzZXQscn0sYz1mdW5jdGlvbihlLHQpe3ZhciBuLG89dC5yZW5kZXIsaT1lLm9wdGlvbnMscj1uZXcgUElYSS5HcmFwaGljcyxhPXMuY29sb3JUb051bWJlcihvLmZpbGxTdHlsZSksbD1zLmNvbG9yVG9OdW1iZXIoby5zdHJva2VTdHlsZSksYz1zLmNvbG9yVG9OdW1iZXIoby5zdHJva2VTdHlsZSksZD1zLmNvbG9yVG9OdW1iZXIoXCIjYmJiXCIpLHU9cy5jb2xvclRvTnVtYmVyKFwiI0NENUM1Q1wiKTtyLmNsZWFyKCk7Zm9yKHZhciBwPXQucGFydHMubGVuZ3RoPjE/MTowO3A8dC5wYXJ0cy5sZW5ndGg7cCsrKXtuPXQucGFydHNbcF0saS53aXJlZnJhbWVzPyhyLmJlZ2luRmlsbCgwLDApLHIubGluZVN0eWxlKDEsZCwxKSk6KHIuYmVnaW5GaWxsKGEsMSksci5saW5lU3R5bGUoby5saW5lV2lkdGgsbCwxKSksci5tb3ZlVG8obi52ZXJ0aWNlc1swXS54LXQucG9zaXRpb24ueCxuLnZlcnRpY2VzWzBdLnktdC5wb3NpdGlvbi55KTtmb3IodmFyIGY9MTtmPG4udmVydGljZXMubGVuZ3RoO2YrKylyLmxpbmVUbyhuLnZlcnRpY2VzW2ZdLngtdC5wb3NpdGlvbi54LG4udmVydGljZXNbZl0ueS10LnBvc2l0aW9uLnkpO3IubGluZVRvKG4udmVydGljZXNbMF0ueC10LnBvc2l0aW9uLngsbi52ZXJ0aWNlc1swXS55LXQucG9zaXRpb24ueSksci5lbmRGaWxsKCksKGkuc2hvd0FuZ2xlSW5kaWNhdG9yfHxpLnNob3dBeGVzKSYmKHIuYmVnaW5GaWxsKDAsMCksaS53aXJlZnJhbWVzP3IubGluZVN0eWxlKDEsdSwxKTpyLmxpbmVTdHlsZSgxLGMpLHIubW92ZVRvKG4ucG9zaXRpb24ueC10LnBvc2l0aW9uLngsbi5wb3NpdGlvbi55LXQucG9zaXRpb24ueSksXG5yLmxpbmVUbygobi52ZXJ0aWNlc1swXS54K24udmVydGljZXNbbi52ZXJ0aWNlcy5sZW5ndGgtMV0ueCkvMi10LnBvc2l0aW9uLngsKG4udmVydGljZXNbMF0ueStuLnZlcnRpY2VzW24udmVydGljZXMubGVuZ3RoLTFdLnkpLzItdC5wb3NpdGlvbi55KSxyLmVuZEZpbGwoKSl9cmV0dXJuIHJ9LGQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnRleHR1cmVzW3RdO3JldHVybiBufHwobj1lLnRleHR1cmVzW3RdPVBJWEkuVGV4dHVyZS5mcm9tSW1hZ2UodCkpLG59fSgpfSx7XCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FdmVudHNcIjoxNixcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6Mjh9XX0se30sWzMwXSkoMzApfSk7IiwiIWZ1bmN0aW9uKGUpe3ZhciBuPS9pUGhvbmUvaSx0PS9pUG9kL2kscj0vaVBhZC9pLGE9L1xcYkFuZHJvaWQoPzouKylNb2JpbGVcXGIvaSxwPS9BbmRyb2lkL2ksYj0vXFxiQW5kcm9pZCg/Oi4rKVNENDkzMFVSXFxiL2ksbD0vXFxiQW5kcm9pZCg/Oi4rKSg/OktGW0EtWl17Miw0fSlcXGIvaSxmPS9XaW5kb3dzIFBob25lL2kscz0vXFxiV2luZG93cyg/Oi4rKUFSTVxcYi9pLHU9L0JsYWNrQmVycnkvaSxjPS9CQjEwL2ksaD0vT3BlcmEgTWluaS9pLHY9L1xcYihDcmlPU3xDaHJvbWUpKD86LispTW9iaWxlL2ksdz0vTW9iaWxlKD86LispRmlyZWZveFxcYi9pO2Z1bmN0aW9uIG0oZSxpKXtyZXR1cm4gZS50ZXN0KGkpfWZ1bmN0aW9uIGkoZSl7dmFyIGk9ZXx8KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3I/bmF2aWdhdG9yLnVzZXJBZ2VudDpcIlwiKSxvPWkuc3BsaXQoXCJbRkJBTlwiKTt2b2lkIDAhPT1vWzFdJiYoaT1vWzBdKSx2b2lkIDAhPT0obz1pLnNwbGl0KFwiVHdpdHRlclwiKSlbMV0mJihpPW9bMF0pO3ZhciBkPXthcHBsZTp7cGhvbmU6bShuLGkpJiYhbShmLGkpLGlwb2Q6bSh0LGkpLHRhYmxldDohbShuLGkpJiZtKHIsaSkmJiFtKGYsaSksZGV2aWNlOihtKG4saSl8fG0odCxpKXx8bShyLGkpKSYmIW0oZixpKX0sYW1hem9uOntwaG9uZTptKGIsaSksdGFibGV0OiFtKGIsaSkmJm0obCxpKSxkZXZpY2U6bShiLGkpfHxtKGwsaSl9LGFuZHJvaWQ6e3Bob25lOiFtKGYsaSkmJm0oYixpKXx8IW0oZixpKSYmbShhLGkpLHRhYmxldDohbShmLGkpJiYhbShiLGkpJiYhbShhLGkpJiYobShsLGkpfHxtKHAsaSkpLGRldmljZTohbShmLGkpJiYobShiLGkpfHxtKGwsaSl8fG0oYSxpKXx8bShwLGkpKXx8bSgvXFxib2todHRwXFxiL2ksaSl9LHdpbmRvd3M6e3Bob25lOm0oZixpKSx0YWJsZXQ6bShzLGkpLGRldmljZTptKGYsaSl8fG0ocyxpKX0sb3RoZXI6e2JsYWNrYmVycnk6bSh1LGkpLGJsYWNrYmVycnkxMDptKGMsaSksb3BlcmE6bShoLGkpLGZpcmVmb3g6bSh3LGkpLGNocm9tZTptKHYsaSksZGV2aWNlOm0odSxpKXx8bShjLGkpfHxtKGgsaSl8fG0odyxpKXx8bSh2LGkpfX07cmV0dXJuIGQuYW55PWQuYXBwbGUuZGV2aWNlfHxkLmFuZHJvaWQuZGV2aWNlfHxkLndpbmRvd3MuZGV2aWNlfHxkLm90aGVyLmRldmljZSxkLnBob25lPWQuYXBwbGUucGhvbmV8fGQuYW5kcm9pZC5waG9uZXx8ZC53aW5kb3dzLnBob25lLGQudGFibGV0PWQuYXBwbGUudGFibGV0fHxkLmFuZHJvaWQudGFibGV0fHxkLndpbmRvd3MudGFibGV0LGR9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJlwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3c/bW9kdWxlLmV4cG9ydHM9aTpcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz8obW9kdWxlLmV4cG9ydHM9aSgpLG1vZHVsZS5leHBvcnRzLmlzTW9iaWxlPWkpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZS5pc01vYmlsZT1pKCkpOmUuaXNNb2JpbGU9aSgpfSh0aGlzKTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHVueWNvZGUgPSByZXF1aXJlKCdwdW55Y29kZScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuZXhwb3J0cy5wYXJzZSA9IHVybFBhcnNlO1xuZXhwb3J0cy5yZXNvbHZlID0gdXJsUmVzb2x2ZTtcbmV4cG9ydHMucmVzb2x2ZU9iamVjdCA9IHVybFJlc29sdmVPYmplY3Q7XG5leHBvcnRzLmZvcm1hdCA9IHVybEZvcm1hdDtcblxuZXhwb3J0cy5VcmwgPSBVcmw7XG5cbmZ1bmN0aW9uIFVybCgpIHtcbiAgdGhpcy5wcm90b2NvbCA9IG51bGw7XG4gIHRoaXMuc2xhc2hlcyA9IG51bGw7XG4gIHRoaXMuYXV0aCA9IG51bGw7XG4gIHRoaXMuaG9zdCA9IG51bGw7XG4gIHRoaXMucG9ydCA9IG51bGw7XG4gIHRoaXMuaG9zdG5hbWUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBudWxsO1xuICB0aGlzLnNlYXJjaCA9IG51bGw7XG4gIHRoaXMucXVlcnkgPSBudWxsO1xuICB0aGlzLnBhdGhuYW1lID0gbnVsbDtcbiAgdGhpcy5wYXRoID0gbnVsbDtcbiAgdGhpcy5ocmVmID0gbnVsbDtcbn1cblxuLy8gUmVmZXJlbmNlOiBSRkMgMzk4NiwgUkZDIDE4MDgsIFJGQyAyMzk2XG5cbi8vIGRlZmluZSB0aGVzZSBoZXJlIHNvIGF0IGxlYXN0IHRoZXkgb25seSBoYXZlIHRvIGJlXG4vLyBjb21waWxlZCBvbmNlIG9uIHRoZSBmaXJzdCBtb2R1bGUgbG9hZC5cbnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pLFxuICAgIHBvcnRQYXR0ZXJuID0gLzpbMC05XSokLyxcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgYSBzaW1wbGUgcGF0aCBVUkxcbiAgICBzaW1wbGVQYXRoUGF0dGVybiA9IC9eKFxcL1xcLz8oPyFcXC8pW15cXD9cXHNdKikoXFw/W15cXHNdKik/JC8sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyByZXNlcnZlZCBmb3IgZGVsaW1pdGluZyBVUkxzLlxuICAgIC8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gICAgZGVsaW1zID0gWyc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0J10sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLlxuICAgIHVud2lzZSA9IFsneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSxcblxuICAgIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgICBhdXRvRXNjYXBlID0gWydcXCcnXS5jb25jYXQodW53aXNlKSxcbiAgICAvLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAgIC8vIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2VcbiAgICAvLyBhcmUgdGhlIG9uZXMgdGhhdCBhcmUgKmV4cGVjdGVkKiB0byBiZSBzZWVuLCBzbyB3ZSBmYXN0LXBhdGhcbiAgICAvLyB0aGVtLlxuICAgIG5vbkhvc3RDaGFycyA9IFsnJScsICcvJywgJz8nLCAnOycsICcjJ10uY29uY2F0KGF1dG9Fc2NhcGUpLFxuICAgIGhvc3RFbmRpbmdDaGFycyA9IFsnLycsICc/JywgJyMnXSxcbiAgICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bK2EtejAtOUEtWl8tXXswLDYzfSQvLFxuICAgIGhvc3RuYW1lUGFydFN0YXJ0ID0gL14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLFxuICAgIC8vIHByb3RvY29scyB0aGF0IGNhbiBhbGxvdyBcInVuc2FmZVwiIGFuZCBcInVud2lzZVwiIGNoYXJzLlxuICAgIHVuc2FmZVByb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgbmV2ZXIgaGF2ZSBhIGhvc3RuYW1lLlxuICAgIGhvc3RsZXNzUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC5cbiAgICBzbGFzaGVkUHJvdG9jb2wgPSB7XG4gICAgICAnaHR0cCc6IHRydWUsXG4gICAgICAnaHR0cHMnOiB0cnVlLFxuICAgICAgJ2Z0cCc6IHRydWUsXG4gICAgICAnZ29waGVyJzogdHJ1ZSxcbiAgICAgICdmaWxlJzogdHJ1ZSxcbiAgICAgICdodHRwOic6IHRydWUsXG4gICAgICAnaHR0cHM6JzogdHJ1ZSxcbiAgICAgICdmdHA6JzogdHJ1ZSxcbiAgICAgICdnb3BoZXI6JzogdHJ1ZSxcbiAgICAgICdmaWxlOic6IHRydWVcbiAgICB9LFxuICAgIHF1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcblxuZnVuY3Rpb24gdXJsUGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAodXJsICYmIHV0aWwuaXNPYmplY3QodXJsKSAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHJldHVybiB1cmw7XG5cbiAgdmFyIHUgPSBuZXcgVXJsO1xuICB1LnBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpO1xuICByZXR1cm4gdTtcbn1cblxuVXJsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKCF1dGlsLmlzU3RyaW5nKHVybCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCBcIiArIHR5cGVvZiB1cmwpO1xuICB9XG5cbiAgLy8gQ29weSBjaHJvbWUsIElFLCBvcGVyYSBiYWNrc2xhc2gtaGFuZGxpbmcgYmVoYXZpb3IuXG4gIC8vIEJhY2sgc2xhc2hlcyBiZWZvcmUgdGhlIHF1ZXJ5IHN0cmluZyBnZXQgY29udmVydGVkIHRvIGZvcndhcmQgc2xhc2hlc1xuICAvLyBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTkxNlxuICB2YXIgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKCc/JyksXG4gICAgICBzcGxpdHRlciA9XG4gICAgICAgICAgKHF1ZXJ5SW5kZXggIT09IC0xICYmIHF1ZXJ5SW5kZXggPCB1cmwuaW5kZXhPZignIycpKSA/ICc/JyA6ICcjJyxcbiAgICAgIHVTcGxpdCA9IHVybC5zcGxpdChzcGxpdHRlciksXG4gICAgICBzbGFzaFJlZ2V4ID0gL1xcXFwvZztcbiAgdVNwbGl0WzBdID0gdVNwbGl0WzBdLnJlcGxhY2Uoc2xhc2hSZWdleCwgJy8nKTtcbiAgdXJsID0gdVNwbGl0LmpvaW4oc3BsaXR0ZXIpO1xuXG4gIHZhciByZXN0ID0gdXJsO1xuXG4gIC8vIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuXG4gIC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlIFwiICBodHRwOi8vZm9vLmNvbSAgXFxuXCJcbiAgcmVzdCA9IHJlc3QudHJpbSgpO1xuXG4gIGlmICghc2xhc2hlc0Rlbm90ZUhvc3QgJiYgdXJsLnNwbGl0KCcjJykubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gVHJ5IGZhc3QgcGF0aCByZWdleHBcbiAgICB2YXIgc2ltcGxlUGF0aCA9IHNpbXBsZVBhdGhQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gICAgaWYgKHNpbXBsZVBhdGgpIHtcbiAgICAgIHRoaXMucGF0aCA9IHJlc3Q7XG4gICAgICB0aGlzLmhyZWYgPSByZXN0O1xuICAgICAgdGhpcy5wYXRobmFtZSA9IHNpbXBsZVBhdGhbMV07XG4gICAgICBpZiAoc2ltcGxlUGF0aFsyXSkge1xuICAgICAgICB0aGlzLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl07XG4gICAgICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMuc2VhcmNoLnN1YnN0cigxKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHRoaXMuc2VhcmNoLnN1YnN0cigxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm90byA9IHByb3RvY29sUGF0dGVybi5leGVjKHJlc3QpO1xuICBpZiAocHJvdG8pIHtcbiAgICBwcm90byA9IHByb3RvWzBdO1xuICAgIHZhciBsb3dlclByb3RvID0gcHJvdG8udG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnByb3RvY29sID0gbG93ZXJQcm90bztcbiAgICByZXN0ID0gcmVzdC5zdWJzdHIocHJvdG8ubGVuZ3RoKTtcbiAgfVxuXG4gIC8vIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0XG4gIC8vIHVzZXJAc2VydmVyIGlzICphbHdheXMqIGludGVycHJldGVkIGFzIGEgaG9zdG5hbWUsIGFuZCB1cmxcbiAgLy8gcmVzb2x1dGlvbiB3aWxsIHRyZWF0IC8vZm9vL2JhciBhcyBob3N0PWZvbyxwYXRoPWJhciBiZWNhdXNlIHRoYXQnc1xuICAvLyBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy5cbiAgaWYgKHNsYXNoZXNEZW5vdGVIb3N0IHx8IHByb3RvIHx8IHJlc3QubWF0Y2goL15cXC9cXC9bXkBcXC9dK0BbXkBcXC9dKy8pKSB7XG4gICAgdmFyIHNsYXNoZXMgPSByZXN0LnN1YnN0cigwLCAyKSA9PT0gJy8vJztcbiAgICBpZiAoc2xhc2hlcyAmJiAhKHByb3RvICYmIGhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dKSkge1xuICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKDIpO1xuICAgICAgdGhpcy5zbGFzaGVzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmXG4gICAgICAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkge1xuXG4gICAgLy8gdGhlcmUncyBhIGhvc3RuYW1lLlxuICAgIC8vIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuXG4gICAgLy9cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkXG4gICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXJcbiAgICAvLyBjb21lcyAqYmVmb3JlKiB0aGUgQC1zaWduLlxuICAgIC8vIFVSTHMgYXJlIG9ibm94aW91cy5cbiAgICAvL1xuICAgIC8vIGV4OlxuICAgIC8vIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjXG4gICAgLy8gaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AY1xuXG4gICAgLy8gdjAuMTIgVE9ETyhpc2FhY3MpOiBUaGlzIGlzIG5vdCBxdWl0ZSBob3cgQ2hyb21lIGRvZXMgdGhpbmdzLlxuICAgIC8vIFJldmlldyBvdXIgdGVzdCBjYXNlIGFnYWluc3QgYnJvd3NlcnMgbW9yZSBjb21wcmVoZW5zaXZlbHkuXG5cbiAgICAvLyBmaW5kIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgaG9zdEVuZGluZ0NoYXJzXG4gICAgdmFyIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihob3N0RW5kaW5nQ2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKVxuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgIH1cblxuICAgIC8vIGF0IHRoaXMgcG9pbnQsIGVpdGhlciB3ZSBoYXZlIGFuIGV4cGxpY2l0IHBvaW50IHdoZXJlIHRoZVxuICAgIC8vIGF1dGggcG9ydGlvbiBjYW5ub3QgZ28gcGFzdCwgb3IgdGhlIGxhc3QgQCBjaGFyIGlzIHRoZSBkZWNpZGVyLlxuICAgIHZhciBhdXRoLCBhdFNpZ247XG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICAvLyBhdFNpZ24gY2FuIGJlIGFueXdoZXJlLlxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uXG4gICAgICAvLyBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZFxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcsIGhvc3RFbmQpO1xuICAgIH1cblxuICAgIC8vIE5vdyB3ZSBoYXZlIGEgcG9ydGlvbiB3aGljaCBpcyBkZWZpbml0ZWx5IHRoZSBhdXRoLlxuICAgIC8vIFB1bGwgdGhhdCBvZmYuXG4gICAgaWYgKGF0U2lnbiAhPT0gLTEpIHtcbiAgICAgIGF1dGggPSByZXN0LnNsaWNlKDAsIGF0U2lnbik7XG4gICAgICByZXN0ID0gcmVzdC5zbGljZShhdFNpZ24gKyAxKTtcbiAgICAgIHRoaXMuYXV0aCA9IGRlY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgaG9zdCBpcyB0aGUgcmVtYWluaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBmaXJzdCBub24taG9zdCBjaGFyXG4gICAgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9uSG9zdENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuICAgIC8vIGlmIHdlIHN0aWxsIGhhdmUgbm90IGhpdCBpdCwgdGhlbiB0aGUgZW50aXJlIHRoaW5nIGlzIGEgaG9zdC5cbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpXG4gICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7XG5cbiAgICB0aGlzLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpO1xuXG4gICAgLy8gcHVsbCBvdXQgcG9ydC5cbiAgICB0aGlzLnBhcnNlSG9zdCgpO1xuXG4gICAgLy8gd2UndmUgaW5kaWNhdGVkIHRoYXQgdGhlcmUgaXMgYSBob3N0bmFtZSxcbiAgICAvLyBzbyBldmVuIGlmIGl0J3MgZW1wdHksIGl0IGhhcyB0byBiZSBwcmVzZW50LlxuICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuXG4gICAgLy8gaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF1cbiAgICAvLyBhc3N1bWUgdGhhdCBpdCdzIGFuIElQdjYgYWRkcmVzcy5cbiAgICB2YXIgaXB2Nkhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZVswXSA9PT0gJ1snICYmXG4gICAgICAgIHRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nO1xuXG4gICAgLy8gdmFsaWRhdGUgYSBsaXR0bGUuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHZhciBob3N0cGFydHMgPSB0aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaG9zdHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgcGFydCA9IGhvc3RwYXJ0c1tpXTtcbiAgICAgICAgaWYgKCFwYXJ0KSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgdmFyIG5ld3BhcnQgPSAnJztcbiAgICAgICAgICBmb3IgKHZhciBqID0gMCwgayA9IHBhcnQubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICBpZiAocGFydC5jaGFyQ29kZUF0KGopID4gMTI3KSB7XG4gICAgICAgICAgICAgIC8vIHdlIHJlcGxhY2Ugbm9uLUFTQ0lJIGNoYXIgd2l0aCBhIHRlbXBvcmFyeSBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRoaXMgdG8gbWFrZSBzdXJlIHNpemUgb2YgaG9zdG5hbWUgaXMgbm90XG4gICAgICAgICAgICAgIC8vIGJyb2tlbiBieSByZXBsYWNpbmcgbm9uLUFTQ0lJIGJ5IG5vdGhpbmdcbiAgICAgICAgICAgICAgbmV3cGFydCArPSAneCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9IHBhcnRbal07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIHRlc3QgYWdhaW4gd2l0aCBBU0NJSSBjaGFyIG9ubHlcbiAgICAgICAgICBpZiAoIW5ld3BhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICAgIHZhciB2YWxpZFBhcnRzID0gaG9zdHBhcnRzLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgdmFyIG5vdEhvc3QgPSBob3N0cGFydHMuc2xpY2UoaSArIDEpO1xuICAgICAgICAgICAgdmFyIGJpdCA9IHBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0U3RhcnQpO1xuICAgICAgICAgICAgaWYgKGJpdCkge1xuICAgICAgICAgICAgICB2YWxpZFBhcnRzLnB1c2goYml0WzFdKTtcbiAgICAgICAgICAgICAgbm90SG9zdC51bnNoaWZ0KGJpdFsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm90SG9zdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVzdCA9ICcvJyArIG5vdEhvc3Quam9pbignLicpICsgcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSB2YWxpZFBhcnRzLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmhvc3RuYW1lLmxlbmd0aCA+IGhvc3RuYW1lTWF4TGVuKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhvc3RuYW1lcyBhcmUgYWx3YXlzIGxvd2VyIGNhc2UuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICAvLyBJRE5BIFN1cHBvcnQ6IFJldHVybnMgYSBwdW55Y29kZWQgcmVwcmVzZW50YXRpb24gb2YgXCJkb21haW5cIi5cbiAgICAgIC8vIEl0IG9ubHkgY29udmVydHMgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHRoYXRcbiAgICAgIC8vIGhhdmUgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWZcbiAgICAgIC8vIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCBhbHJlYWR5IGlzIEFTQ0lJLW9ubHkuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLmhvc3RuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgcCA9IHRoaXMucG9ydCA/ICc6JyArIHRoaXMucG9ydCA6ICcnO1xuICAgIHZhciBoID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcbiAgICB0aGlzLmhvc3QgPSBoICsgcDtcbiAgICB0aGlzLmhyZWYgKz0gdGhpcy5ob3N0O1xuXG4gICAgLy8gc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZVxuICAgIC8vIHRoZSBob3N0IGZpZWxkIHN0aWxsIHJldGFpbnMgdGhlbSwgdGhvdWdoXG4gICAgaWYgKGlwdjZIb3N0bmFtZSkge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsIHRoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBpZiAocmVzdFswXSAhPT0gJy8nKSB7XG4gICAgICAgIHJlc3QgPSAnLycgKyByZXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vdyByZXN0IGlzIHNldCB0byB0aGUgcG9zdC1ob3N0IHN0dWZmLlxuICAvLyBjaG9wIG9mZiBhbnkgZGVsaW0gY2hhcnMuXG4gIGlmICghdW5zYWZlUHJvdG9jb2xbbG93ZXJQcm90b10pIHtcblxuICAgIC8vIEZpcnN0LCBtYWtlIDEwMCUgc3VyZSB0aGF0IGFueSBcImF1dG9Fc2NhcGVcIiBjaGFycyBnZXRcbiAgICAvLyBlc2NhcGVkLCBldmVuIGlmIGVuY29kZVVSSUNvbXBvbmVudCBkb2Vzbid0IHRoaW5rIHRoZXlcbiAgICAvLyBuZWVkIHRvIGJlLlxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXV0b0VzY2FwZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhZSA9IGF1dG9Fc2NhcGVbaV07XG4gICAgICBpZiAocmVzdC5pbmRleE9mKGFlKSA9PT0gLTEpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgdmFyIGVzYyA9IGVuY29kZVVSSUNvbXBvbmVudChhZSk7XG4gICAgICBpZiAoZXNjID09PSBhZSkge1xuICAgICAgICBlc2MgPSBlc2NhcGUoYWUpO1xuICAgICAgfVxuICAgICAgcmVzdCA9IHJlc3Quc3BsaXQoYWUpLmpvaW4oZXNjKTtcbiAgICB9XG4gIH1cblxuXG4gIC8vIGNob3Agb2ZmIGZyb20gdGhlIHRhaWwgZmlyc3QuXG4gIHZhciBoYXNoID0gcmVzdC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoICE9PSAtMSkge1xuICAgIC8vIGdvdCBhIGZyYWdtZW50IHN0cmluZy5cbiAgICB0aGlzLmhhc2ggPSByZXN0LnN1YnN0cihoYXNoKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBoYXNoKTtcbiAgfVxuICB2YXIgcW0gPSByZXN0LmluZGV4T2YoJz8nKTtcbiAgaWYgKHFtICE9PSAtMSkge1xuICAgIHRoaXMuc2VhcmNoID0gcmVzdC5zdWJzdHIocW0pO1xuICAgIHRoaXMucXVlcnkgPSByZXN0LnN1YnN0cihxbSArIDEpO1xuICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5xdWVyeSk7XG4gICAgfVxuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIHFtKTtcbiAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgLy8gbm8gcXVlcnkgc3RyaW5nLCBidXQgcGFyc2VRdWVyeVN0cmluZyBzdGlsbCByZXF1ZXN0ZWRcbiAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgfVxuICBpZiAocmVzdCkgdGhpcy5wYXRobmFtZSA9IHJlc3Q7XG4gIGlmIChzbGFzaGVkUHJvdG9jb2xbbG93ZXJQcm90b10gJiZcbiAgICAgIHRoaXMuaG9zdG5hbWUgJiYgIXRoaXMucGF0aG5hbWUpIHtcbiAgICB0aGlzLnBhdGhuYW1lID0gJy8nO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICBpZiAodGhpcy5wYXRobmFtZSB8fCB0aGlzLnNlYXJjaCkge1xuICAgIHZhciBwID0gdGhpcy5wYXRobmFtZSB8fCAnJztcbiAgICB2YXIgcyA9IHRoaXMuc2VhcmNoIHx8ICcnO1xuICAgIHRoaXMucGF0aCA9IHAgKyBzO1xuICB9XG5cbiAgLy8gZmluYWxseSwgcmVjb25zdHJ1Y3QgdGhlIGhyZWYgYmFzZWQgb24gd2hhdCBoYXMgYmVlbiB2YWxpZGF0ZWQuXG4gIHRoaXMuaHJlZiA9IHRoaXMuZm9ybWF0KCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZm9ybWF0IGEgcGFyc2VkIG9iamVjdCBpbnRvIGEgdXJsIHN0cmluZ1xuZnVuY3Rpb24gdXJsRm9ybWF0KG9iaikge1xuICAvLyBlbnN1cmUgaXQncyBhbiBvYmplY3QsIGFuZCBub3QgYSBzdHJpbmcgdXJsLlxuICAvLyBJZiBpdCdzIGFuIG9iaiwgdGhpcyBpcyBhIG5vLW9wLlxuICAvLyB0aGlzIHdheSwgeW91IGNhbiBjYWxsIHVybF9mb3JtYXQoKSBvbiBzdHJpbmdzXG4gIC8vIHRvIGNsZWFuIHVwIHBvdGVudGlhbGx5IHdvbmt5IHVybHMuXG4gIGlmICh1dGlsLmlzU3RyaW5nKG9iaikpIG9iaiA9IHVybFBhcnNlKG9iaik7XG4gIGlmICghKG9iaiBpbnN0YW5jZW9mIFVybCkpIHJldHVybiBVcmwucHJvdG90eXBlLmZvcm1hdC5jYWxsKG9iaik7XG4gIHJldHVybiBvYmouZm9ybWF0KCk7XG59XG5cblVybC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhdXRoID0gdGhpcy5hdXRoIHx8ICcnO1xuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksICc6Jyk7XG4gICAgYXV0aCArPSAnQCc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sIHx8ICcnLFxuICAgICAgcGF0aG5hbWUgPSB0aGlzLnBhdGhuYW1lIHx8ICcnLFxuICAgICAgaGFzaCA9IHRoaXMuaGFzaCB8fCAnJyxcbiAgICAgIGhvc3QgPSBmYWxzZSxcbiAgICAgIHF1ZXJ5ID0gJyc7XG5cbiAgaWYgKHRoaXMuaG9zdCkge1xuICAgIGhvc3QgPSBhdXRoICsgdGhpcy5ob3N0O1xuICB9IGVsc2UgaWYgKHRoaXMuaG9zdG5hbWUpIHtcbiAgICBob3N0ID0gYXV0aCArICh0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSA9PT0gLTEgP1xuICAgICAgICB0aGlzLmhvc3RuYW1lIDpcbiAgICAgICAgJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyk7XG4gICAgaWYgKHRoaXMucG9ydCkge1xuICAgICAgaG9zdCArPSAnOicgKyB0aGlzLnBvcnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMucXVlcnkgJiZcbiAgICAgIHV0aWwuaXNPYmplY3QodGhpcy5xdWVyeSkgJiZcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHRoaXMucXVlcnkpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHRoaXMuc2VhcmNoIHx8IChxdWVyeSAmJiAoJz8nICsgcXVlcnkpKSB8fCAnJztcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgLy8gb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuXG4gIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguXG4gIGlmICh0aGlzLnNsYXNoZXMgfHxcbiAgICAgICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29sW3Byb3RvY29sXSkgJiYgaG9zdCAhPT0gZmFsc2UpIHtcbiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gJyc7XG4gIH1cblxuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBoYXNoID0gJyMnICsgaGFzaDtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSAnPycpIHNlYXJjaCA9ICc/JyArIHNlYXJjaDtcblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTtcbiAgfSk7XG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpO1xuXG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHVybFBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSkpLmZvcm1hdCgpO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIGlmICghc291cmNlKSByZXR1cm4gcmVsYXRpdmU7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgaWYgKHV0aWwuaXNTdHJpbmcocmVsYXRpdmUpKSB7XG4gICAgdmFyIHJlbCA9IG5ldyBVcmwoKTtcbiAgICByZWwucGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKTtcbiAgICByZWxhdGl2ZSA9IHJlbDtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgVXJsKCk7XG4gIHZhciB0a2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICBmb3IgKHZhciB0ayA9IDA7IHRrIDwgdGtleXMubGVuZ3RoOyB0aysrKSB7XG4gICAgdmFyIHRrZXkgPSB0a2V5c1t0a107XG4gICAgcmVzdWx0W3RrZXldID0gdGhpc1t0a2V5XTtcbiAgfVxuXG4gIC8vIGhhc2ggaXMgYWx3YXlzIG92ZXJyaWRkZW4sIG5vIG1hdHRlciB3aGF0LlxuICAvLyBldmVuIGhyZWY9XCJcIiB3aWxsIHJlbW92ZSBpdC5cbiAgcmVzdWx0Lmhhc2ggPSByZWxhdGl2ZS5oYXNoO1xuXG4gIC8vIGlmIHRoZSByZWxhdGl2ZSB1cmwgaXMgZW1wdHksIHRoZW4gdGhlcmUncyBub3RoaW5nIGxlZnQgdG8gZG8gaGVyZS5cbiAgaWYgKHJlbGF0aXZlLmhyZWYgPT09ICcnKSB7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGhyZWZzIGxpa2UgLy9mb28vYmFyIGFsd2F5cyBjdXQgdG8gdGhlIHByb3RvY29sLlxuICBpZiAocmVsYXRpdmUuc2xhc2hlcyAmJiAhcmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAvLyB0YWtlIGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBwcm90b2NvbCBmcm9tIHJlbGF0aXZlXG4gICAgdmFyIHJrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgIGZvciAodmFyIHJrID0gMDsgcmsgPCBya2V5cy5sZW5ndGg7IHJrKyspIHtcbiAgICAgIHZhciBya2V5ID0gcmtleXNbcmtdO1xuICAgICAgaWYgKHJrZXkgIT09ICdwcm90b2NvbCcpXG4gICAgICAgIHJlc3VsdFtya2V5XSA9IHJlbGF0aXZlW3JrZXldO1xuICAgIH1cblxuICAgIC8vdXJsUGFyc2UgYXBwZW5kcyB0cmFpbGluZyAvIHRvIHVybHMgbGlrZSBodHRwOi8vd3d3LmV4YW1wbGUuY29tXG4gICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmXG4gICAgICAgIHJlc3VsdC5ob3N0bmFtZSAmJiAhcmVzdWx0LnBhdGhuYW1lKSB7XG4gICAgICByZXN1bHQucGF0aCA9IHJlc3VsdC5wYXRobmFtZSA9ICcvJztcbiAgICB9XG5cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSByZXN1bHQucHJvdG9jb2wpIHtcbiAgICAvLyBpZiBpdCdzIGEga25vd24gdXJsIHByb3RvY29sLCB0aGVuIGNoYW5naW5nXG4gICAgLy8gdGhlIHByb3RvY29sIGRvZXMgd2VpcmQgdGhpbmdzXG4gICAgLy8gZmlyc3QsIGlmIGl0J3Mgbm90IGZpbGU6LCB0aGVuIHdlIE1VU1QgaGF2ZSBhIGhvc3QsXG4gICAgLy8gYW5kIGlmIHRoZXJlIHdhcyBhIHBhdGhcbiAgICAvLyB0byBiZWdpbiB3aXRoLCB0aGVuIHdlIE1VU1QgaGF2ZSBhIHBhdGguXG4gICAgLy8gaWYgaXQgaXMgZmlsZTosIHRoZW4gdGhlIGhvc3QgaXMgZHJvcHBlZCxcbiAgICAvLyBiZWNhdXNlIHRoYXQncyBrbm93biB0byBiZSBob3N0bGVzcy5cbiAgICAvLyBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuXG4gICAgaWYgKCFzbGFzaGVkUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgICAgICB2YXIgayA9IGtleXNbdl07XG4gICAgICAgIHJlc3VsdFtrXSA9IHJlbGF0aXZlW2tdO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJlc3VsdC5wcm90b2NvbCA9IHJlbGF0aXZlLnByb3RvY29sO1xuICAgIGlmICghcmVsYXRpdmUuaG9zdCAmJiAhaG9zdGxlc3NQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciByZWxQYXRoID0gKHJlbGF0aXZlLnBhdGhuYW1lIHx8ICcnKS5zcGxpdCgnLycpO1xuICAgICAgd2hpbGUgKHJlbFBhdGgubGVuZ3RoICYmICEocmVsYXRpdmUuaG9zdCA9IHJlbFBhdGguc2hpZnQoKSkpO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0KSByZWxhdGl2ZS5ob3N0ID0gJyc7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3RuYW1lKSByZWxhdGl2ZS5ob3N0bmFtZSA9ICcnO1xuICAgICAgaWYgKHJlbFBhdGhbMF0gIT09ICcnKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbFBhdGguam9pbignLycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTtcbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgJyc7XG4gICAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoO1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3Q7XG4gICAgcmVzdWx0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5wYXRobmFtZSB8fCByZXN1bHQuc2VhcmNoKSB7XG4gICAgICB2YXIgcCA9IHJlc3VsdC5wYXRobmFtZSB8fCAnJztcbiAgICAgIHZhciBzID0gcmVzdWx0LnNlYXJjaCB8fCAnJztcbiAgICAgIHJlc3VsdC5wYXRoID0gcCArIHM7XG4gICAgfVxuICAgIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGlzU291cmNlQWJzID0gKHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpLFxuICAgICAgaXNSZWxBYnMgPSAoXG4gICAgICAgICAgcmVsYXRpdmUuaG9zdCB8fFxuICAgICAgICAgIHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nXG4gICAgICApLFxuICAgICAgbXVzdEVuZEFicyA9IChpc1JlbEFicyB8fCBpc1NvdXJjZUFicyB8fFxuICAgICAgICAgICAgICAgICAgICAocmVzdWx0Lmhvc3QgJiYgcmVsYXRpdmUucGF0aG5hbWUpKSxcbiAgICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLFxuICAgICAgc3JjUGF0aCA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICAgIHJlbFBhdGggPSByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTtcblxuICAvLyBpZiB0aGUgdXJsIGlzIGEgbm9uLXNsYXNoZWQgdXJsLCB0aGVuIHJlbGF0aXZlXG4gIC8vIGxpbmtzIGxpa2UgLi4vLi4gc2hvdWxkIGJlIGFibGVcbiAgLy8gdG8gY3Jhd2wgdXAgdG8gdGhlIGhvc3RuYW1lLCBhcyB3ZWxsLiAgVGhpcyBpcyBzdHJhbmdlLlxuICAvLyByZXN1bHQucHJvdG9jb2wgaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgbm93LlxuICAvLyBMYXRlciBvbiwgcHV0IHRoZSBmaXJzdCBwYXRoIHBhcnQgaW50byB0aGUgaG9zdCBmaWVsZC5cbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9ICcnO1xuICAgIHJlc3VsdC5wb3J0ID0gbnVsbDtcbiAgICBpZiAocmVzdWx0Lmhvc3QpIHtcbiAgICAgIGlmIChzcmNQYXRoWzBdID09PSAnJykgc3JjUGF0aFswXSA9IHJlc3VsdC5ob3N0O1xuICAgICAgZWxzZSBzcmNQYXRoLnVuc2hpZnQocmVzdWx0Lmhvc3QpO1xuICAgIH1cbiAgICByZXN1bHQuaG9zdCA9ICcnO1xuICAgIGlmIChyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgPSBudWxsO1xuICAgICAgcmVsYXRpdmUucG9ydCA9IG51bGw7XG4gICAgICBpZiAocmVsYXRpdmUuaG9zdCkge1xuICAgICAgICBpZiAocmVsUGF0aFswXSA9PT0gJycpIHJlbFBhdGhbMF0gPSByZWxhdGl2ZS5ob3N0O1xuICAgICAgICBlbHNlIHJlbFBhdGgudW5zaGlmdChyZWxhdGl2ZS5ob3N0KTtcbiAgICAgIH1cbiAgICAgIHJlbGF0aXZlLmhvc3QgPSBudWxsO1xuICAgIH1cbiAgICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyAmJiAocmVsUGF0aFswXSA9PT0gJycgfHwgc3JjUGF0aFswXSA9PT0gJycpO1xuICB9XG5cbiAgaWYgKGlzUmVsQWJzKSB7XG4gICAgLy8gaXQncyBhYnNvbHV0ZS5cbiAgICByZXN1bHQuaG9zdCA9IChyZWxhdGl2ZS5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0IDogcmVzdWx0Lmhvc3Q7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gKHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3RuYW1lID09PSAnJykgP1xuICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3RuYW1lIDogcmVzdWx0Lmhvc3RuYW1lO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgc3JjUGF0aCA9IHJlbFBhdGg7XG4gICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuXG4gIH0gZWxzZSBpZiAocmVsUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBpdCdzIHJlbGF0aXZlXG4gICAgLy8gdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuXG4gICAgaWYgKCFzcmNQYXRoKSBzcmNQYXRoID0gW107XG4gICAgc3JjUGF0aC5wb3AoKTtcbiAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgfSBlbHNlIGlmICghdXRpbC5pc051bGxPclVuZGVmaW5lZChyZWxhdGl2ZS5zZWFyY2gpKSB7XG4gICAgLy8ganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLlxuICAgIC8vIGxpa2UgaHJlZj0nP2ZvbycuXG4gICAgLy8gUHV0IHRoaXMgYWZ0ZXIgdGhlIG90aGVyIHR3byBjYXNlcyBiZWNhdXNlIGl0IHNpbXBsaWZpZXMgdGhlIGJvb2xlYW5zXG4gICAgaWYgKHBzeWNob3RpYykge1xuICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBzcmNQYXRoLnNoaWZ0KCk7XG4gICAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBubyBwYXRoIGF0IGFsbC4gIGVhc3kuXG4gICAgLy8gd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBvdGhlciBzdHVmZiBhYm92ZS5cbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnNlYXJjaCkge1xuICAgICAgcmVzdWx0LnBhdGggPSAnLycgKyByZXN1bHQuc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBpZiBhIHVybCBFTkRzIGluIC4gb3IgLi4sIHRoZW4gaXQgbXVzdCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgLy8gaG93ZXZlciwgaWYgaXQgZW5kcyBpbiBhbnl0aGluZyBlbHNlIG5vbi1zbGFzaHksXG4gIC8vIHRoZW4gaXQgbXVzdCBOT1QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIHZhciBsYXN0ID0gc3JjUGF0aC5zbGljZSgtMSlbMF07XG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gKFxuICAgICAgKHJlc3VsdC5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgfHwgc3JjUGF0aC5sZW5ndGggPiAxKSAmJlxuICAgICAgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSB8fCBsYXN0ID09PSAnJyk7XG5cbiAgLy8gc3RyaXAgc2luZ2xlIGRvdHMsIHJlc29sdmUgZG91YmxlIGRvdHMgdG8gcGFyZW50IGRpclxuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gc3JjUGF0aC5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGFzdCA9IHNyY1BhdGhbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBzcmNQYXRoLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgc3JjUGF0aFswXSAhPT0gJycgJiZcbiAgICAgICghc3JjUGF0aFswXSB8fCBzcmNQYXRoWzBdLmNoYXJBdCgwKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiAoc3JjUGF0aC5qb2luKCcvJykuc3Vic3RyKC0xKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgucHVzaCgnJyk7XG4gIH1cblxuICB2YXIgaXNBYnNvbHV0ZSA9IHNyY1BhdGhbMF0gPT09ICcnIHx8XG4gICAgICAoc3JjUGF0aFswXSAmJiBzcmNQYXRoWzBdLmNoYXJBdCgwKSA9PT0gJy8nKTtcblxuICAvLyBwdXQgdGhlIGhvc3QgYmFja1xuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBpc0Fic29sdXRlID8gJycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJztcbiAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgIH1cbiAgfVxuXG4gIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzIHx8IChyZXN1bHQuaG9zdCAmJiBzcmNQYXRoLmxlbmd0aCk7XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IHNyY1BhdGguam9pbignLycpO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IHJlcXVlc3QuaHR0cFxuICBpZiAoIXV0aWwuaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIXV0aWwuaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgfVxuICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGggfHwgcmVzdWx0LmF1dGg7XG4gIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5VcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpO1xuICBpZiAocG9ydCkge1xuICAgIHBvcnQgPSBwb3J0WzBdO1xuICAgIGlmIChwb3J0ICE9PSAnOicpIHtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpO1xuICAgIH1cbiAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7XG4gIH1cbiAgaWYgKGhvc3QpIHRoaXMuaG9zdG5hbWUgPSBob3N0O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuZnVuY3Rpb24gY29udHJpYnV0aW9uMkQobXVsdGlwbGllciwgeHNiLCB5c2IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkeDogLXhzYiAtIG11bHRpcGxpZXIgKiBjb25zdGFudHNfMS5TUVVJU0hfMkQsXG4gICAgICAgIGR5OiAteXNiIC0gbXVsdGlwbGllciAqIGNvbnN0YW50c18xLlNRVUlTSF8yRCxcbiAgICAgICAgeHNiOiB4c2IsXG4gICAgICAgIHlzYjogeXNiXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbnRyaWJ1dGlvbjNEKG11bHRpcGxpZXIsIHhzYiwgeXNiLCB6c2IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkeDogLXhzYiAtIG11bHRpcGxpZXIgKiBjb25zdGFudHNfMS5TUVVJU0hfM0QsXG4gICAgICAgIGR5OiAteXNiIC0gbXVsdGlwbGllciAqIGNvbnN0YW50c18xLlNRVUlTSF8zRCxcbiAgICAgICAgZHo6IC16c2IgLSBtdWx0aXBsaWVyICogY29uc3RhbnRzXzEuU1FVSVNIXzNELFxuICAgICAgICB4c2I6IHhzYixcbiAgICAgICAgeXNiOiB5c2IsXG4gICAgICAgIHpzYjogenNiXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbnRyaWJ1dGlvbjREKG11bHRpcGxpZXIsIHhzYiwgeXNiLCB6c2IsIHdzYikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGR4OiAteHNiIC0gbXVsdGlwbGllciAqIGNvbnN0YW50c18xLlNRVUlTSF80RCxcbiAgICAgICAgZHk6IC15c2IgLSBtdWx0aXBsaWVyICogY29uc3RhbnRzXzEuU1FVSVNIXzRELFxuICAgICAgICBkejogLXpzYiAtIG11bHRpcGxpZXIgKiBjb25zdGFudHNfMS5TUVVJU0hfNEQsXG4gICAgICAgIGR3OiAtd3NiIC0gbXVsdGlwbGllciAqIGNvbnN0YW50c18xLlNRVUlTSF80RCxcbiAgICAgICAgeHNiOiB4c2IsXG4gICAgICAgIHlzYjogeXNiLFxuICAgICAgICB6c2I6IHpzYixcbiAgICAgICAgd3NiOiB3c2JcbiAgICB9O1xufVxuZnVuY3Rpb24gbWFrZU5vaXNlMkQoY2xpZW50U2VlZCkge1xuICAgIHZhciBjb250cmlidXRpb25zID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25zdGFudHNfMS5wMkQubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgdmFyIGJhc2VTZXQgPSBjb25zdGFudHNfMS5iYXNlMkRbY29uc3RhbnRzXzEucDJEW2ldXTtcbiAgICAgICAgdmFyIHByZXZpb3VzID0gbnVsbDtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGJhc2VTZXQubGVuZ3RoOyBrICs9IDMpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjb250cmlidXRpb24yRChiYXNlU2V0W2tdLCBiYXNlU2V0W2sgKyAxXSwgYmFzZVNldFtrICsgMl0pO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzID09PSBudWxsKVxuICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnNbaSAvIDRdID0gY3VycmVudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwcmV2aW91cy5uZXh0ID0gY3VycmVudDtcbiAgICAgICAgICAgIHByZXZpb3VzID0gY3VycmVudDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50Lm5leHQgPSBjb250cmlidXRpb24yRChjb25zdGFudHNfMS5wMkRbaSArIDFdLCBjb25zdGFudHNfMS5wMkRbaSArIDJdLCBjb25zdGFudHNfMS5wMkRbaSArIDNdKTtcbiAgICB9XG4gICAgdmFyIGxvb2t1cCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29uc3RhbnRzXzEubG9va3VwUGFpcnMyRC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBsb29rdXBbY29uc3RhbnRzXzEubG9va3VwUGFpcnMyRFtpXV0gPSBjb250cmlidXRpb25zW2NvbnN0YW50c18xLmxvb2t1cFBhaXJzMkRbaSArIDFdXTtcbiAgICB9XG4gICAgdmFyIHBlcm0gPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgIHZhciBwZXJtMkQgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgIHZhciBzb3VyY2UgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspXG4gICAgICAgIHNvdXJjZVtpXSA9IGk7XG4gICAgdmFyIHNlZWQgPSBuZXcgVWludDMyQXJyYXkoMSk7XG4gICAgc2VlZFswXSA9IGNsaWVudFNlZWQ7XG4gICAgc2VlZCA9IHNodWZmbGVTZWVkKHNodWZmbGVTZWVkKHNodWZmbGVTZWVkKHNlZWQpKSk7XG4gICAgZm9yICh2YXIgaSA9IDI1NTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgc2VlZCA9IHNodWZmbGVTZWVkKHNlZWQpO1xuICAgICAgICB2YXIgciA9IG5ldyBVaW50MzJBcnJheSgxKTtcbiAgICAgICAgclswXSA9IChzZWVkWzBdICsgMzEpICUgKGkgKyAxKTtcbiAgICAgICAgaWYgKHJbMF0gPCAwKVxuICAgICAgICAgICAgclswXSArPSBpICsgMTtcbiAgICAgICAgcGVybVtpXSA9IHNvdXJjZVtyWzBdXTtcbiAgICAgICAgcGVybTJEW2ldID0gcGVybVtpXSAmIDB4MGU7XG4gICAgICAgIHNvdXJjZVtyWzBdXSA9IHNvdXJjZVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIHZhciBzdHJldGNoT2Zmc2V0ID0gKHggKyB5KSAqIGNvbnN0YW50c18xLlNUUkVUQ0hfMkQ7XG4gICAgICAgIHZhciB4cyA9IHggKyBzdHJldGNoT2Zmc2V0O1xuICAgICAgICB2YXIgeXMgPSB5ICsgc3RyZXRjaE9mZnNldDtcbiAgICAgICAgdmFyIHhzYiA9IE1hdGguZmxvb3IoeHMpO1xuICAgICAgICB2YXIgeXNiID0gTWF0aC5mbG9vcih5cyk7XG4gICAgICAgIHZhciBzcXVpc2hPZmZzZXQgPSAoeHNiICsgeXNiKSAqIGNvbnN0YW50c18xLlNRVUlTSF8yRDtcbiAgICAgICAgdmFyIGR4MCA9IHggLSAoeHNiICsgc3F1aXNoT2Zmc2V0KTtcbiAgICAgICAgdmFyIGR5MCA9IHkgLSAoeXNiICsgc3F1aXNoT2Zmc2V0KTtcbiAgICAgICAgdmFyIHhpbnMgPSB4cyAtIHhzYjtcbiAgICAgICAgdmFyIHlpbnMgPSB5cyAtIHlzYjtcbiAgICAgICAgdmFyIGluU3VtID0geGlucyArIHlpbnM7XG4gICAgICAgIHZhciBoYXNoID0gKHhpbnMgLSB5aW5zICsgMSkgfFxuICAgICAgICAgICAgKGluU3VtIDw8IDEpIHxcbiAgICAgICAgICAgICgoaW5TdW0gKyB5aW5zKSA8PCAyKSB8XG4gICAgICAgICAgICAoKGluU3VtICsgeGlucykgPDwgNCk7XG4gICAgICAgIHZhciB2YWx1ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGMgPSBsb29rdXBbaGFzaF07IGMgIT09IHVuZGVmaW5lZDsgYyA9IGMubmV4dCkge1xuICAgICAgICAgICAgdmFyIGR4ID0gZHgwICsgYy5keDtcbiAgICAgICAgICAgIHZhciBkeSA9IGR5MCArIGMuZHk7XG4gICAgICAgICAgICB2YXIgYXR0biA9IDIgLSBkeCAqIGR4IC0gZHkgKiBkeTtcbiAgICAgICAgICAgIGlmIChhdHRuID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBweCA9IHhzYiArIGMueHNiO1xuICAgICAgICAgICAgICAgIHZhciBweSA9IHlzYiArIGMueXNiO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleFBhcnRBID0gcGVybVtweCAmIDB4ZmZdO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHBlcm0yRFsoaW5kZXhQYXJ0QSArIHB5KSAmIDB4ZmZdO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZVBhcnQgPSBjb25zdGFudHNfMS5ncmFkaWVudHMyRFtpbmRleF0gKiBkeCArIGNvbnN0YW50c18xLmdyYWRpZW50czJEW2luZGV4ICsgMV0gKiBkeTtcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSBhdHRuICogYXR0biAqIGF0dG4gKiBhdHRuICogdmFsdWVQYXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZSAqIGNvbnN0YW50c18xLk5PUk1fMkQ7XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZU5vaXNlMkQgPSBtYWtlTm9pc2UyRDtcbmZ1bmN0aW9uIG1ha2VOb2lzZTNEKGNsaWVudFNlZWQpIHtcbiAgICB2YXIgY29udHJpYnV0aW9ucyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29uc3RhbnRzXzEucDNELmxlbmd0aDsgaSArPSA5KSB7XG4gICAgICAgIHZhciBiYXNlU2V0ID0gY29uc3RhbnRzXzEuYmFzZTNEW2NvbnN0YW50c18xLnAzRFtpXV07XG4gICAgICAgIHZhciBwcmV2aW91cyA9IG51bGw7XG4gICAgICAgIHZhciBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBiYXNlU2V0Lmxlbmd0aDsgayArPSA0KSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gY29udHJpYnV0aW9uM0QoYmFzZVNldFtrXSwgYmFzZVNldFtrICsgMV0sIGJhc2VTZXRbayArIDJdLCBiYXNlU2V0W2sgKyAzXSk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXMgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgY29udHJpYnV0aW9uc1tpIC8gOV0gPSBjdXJyZW50O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHByZXZpb3VzLm5leHQgPSBjdXJyZW50O1xuICAgICAgICAgICAgcHJldmlvdXMgPSBjdXJyZW50O1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQubmV4dCA9IGNvbnRyaWJ1dGlvbjNEKGNvbnN0YW50c18xLnAzRFtpICsgMV0sIGNvbnN0YW50c18xLnAzRFtpICsgMl0sIGNvbnN0YW50c18xLnAzRFtpICsgM10sIGNvbnN0YW50c18xLnAzRFtpICsgNF0pO1xuICAgICAgICBjdXJyZW50Lm5leHQubmV4dCA9IGNvbnRyaWJ1dGlvbjNEKGNvbnN0YW50c18xLnAzRFtpICsgNV0sIGNvbnN0YW50c18xLnAzRFtpICsgNl0sIGNvbnN0YW50c18xLnAzRFtpICsgN10sIGNvbnN0YW50c18xLnAzRFtpICsgOF0pO1xuICAgIH1cbiAgICB2YXIgbG9va3VwID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25zdGFudHNfMS5sb29rdXBQYWlyczNELmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGxvb2t1cFtjb25zdGFudHNfMS5sb29rdXBQYWlyczNEW2ldXSA9IGNvbnRyaWJ1dGlvbnNbY29uc3RhbnRzXzEubG9va3VwUGFpcnMzRFtpICsgMV1dO1xuICAgIH1cbiAgICB2YXIgcGVybSA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gICAgdmFyIHBlcm0zRCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gICAgdmFyIHNvdXJjZSA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKylcbiAgICAgICAgc291cmNlW2ldID0gaTtcbiAgICB2YXIgc2VlZCA9IG5ldyBVaW50MzJBcnJheSgxKTtcbiAgICBzZWVkWzBdID0gY2xpZW50U2VlZDtcbiAgICBzZWVkID0gc2h1ZmZsZVNlZWQoc2h1ZmZsZVNlZWQoc2h1ZmZsZVNlZWQoc2VlZCkpKTtcbiAgICBmb3IgKHZhciBpID0gMjU1OyBpID49IDA7IGktLSkge1xuICAgICAgICBzZWVkID0gc2h1ZmZsZVNlZWQoc2VlZCk7XG4gICAgICAgIHZhciByID0gbmV3IFVpbnQzMkFycmF5KDEpO1xuICAgICAgICByWzBdID0gKHNlZWRbMF0gKyAzMSkgJSAoaSArIDEpO1xuICAgICAgICBpZiAoclswXSA8IDApXG4gICAgICAgICAgICByWzBdICs9IGkgKyAxO1xuICAgICAgICBwZXJtW2ldID0gc291cmNlW3JbMF1dO1xuICAgICAgICBwZXJtM0RbaV0gPSAocGVybVtpXSAlIDI0KSAqIDM7XG4gICAgICAgIHNvdXJjZVtyWzBdXSA9IHNvdXJjZVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5LCB6KSB7XG4gICAgICAgIHZhciBzdHJldGNoT2Zmc2V0ID0gKHggKyB5ICsgeikgKiBjb25zdGFudHNfMS5TVFJFVENIXzNEO1xuICAgICAgICB2YXIgeHMgPSB4ICsgc3RyZXRjaE9mZnNldDtcbiAgICAgICAgdmFyIHlzID0geSArIHN0cmV0Y2hPZmZzZXQ7XG4gICAgICAgIHZhciB6cyA9IHogKyBzdHJldGNoT2Zmc2V0O1xuICAgICAgICB2YXIgeHNiID0gTWF0aC5mbG9vcih4cyk7XG4gICAgICAgIHZhciB5c2IgPSBNYXRoLmZsb29yKHlzKTtcbiAgICAgICAgdmFyIHpzYiA9IE1hdGguZmxvb3IoenMpO1xuICAgICAgICB2YXIgc3F1aXNoT2Zmc2V0ID0gKHhzYiArIHlzYiArIHpzYikgKiBjb25zdGFudHNfMS5TUVVJU0hfM0Q7XG4gICAgICAgIHZhciBkeDAgPSB4IC0gKHhzYiArIHNxdWlzaE9mZnNldCk7XG4gICAgICAgIHZhciBkeTAgPSB5IC0gKHlzYiArIHNxdWlzaE9mZnNldCk7XG4gICAgICAgIHZhciBkejAgPSB6IC0gKHpzYiArIHNxdWlzaE9mZnNldCk7XG4gICAgICAgIHZhciB4aW5zID0geHMgLSB4c2I7XG4gICAgICAgIHZhciB5aW5zID0geXMgLSB5c2I7XG4gICAgICAgIHZhciB6aW5zID0genMgLSB6c2I7XG4gICAgICAgIHZhciBpblN1bSA9IHhpbnMgKyB5aW5zICsgemlucztcbiAgICAgICAgdmFyIGhhc2ggPSAoeWlucyAtIHppbnMgKyAxKSB8XG4gICAgICAgICAgICAoKHhpbnMgLSB5aW5zICsgMSkgPDwgMSkgfFxuICAgICAgICAgICAgKCh4aW5zIC0gemlucyArIDEpIDw8IDIpIHxcbiAgICAgICAgICAgIChpblN1bSA8PCAzKSB8XG4gICAgICAgICAgICAoKGluU3VtICsgemlucykgPDwgNSkgfFxuICAgICAgICAgICAgKChpblN1bSArIHlpbnMpIDw8IDcpIHxcbiAgICAgICAgICAgICgoaW5TdW0gKyB4aW5zKSA8PCA5KTtcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcbiAgICAgICAgZm9yICh2YXIgYyA9IGxvb2t1cFtoYXNoXTsgYyAhPT0gdW5kZWZpbmVkOyBjID0gYy5uZXh0KSB7XG4gICAgICAgICAgICB2YXIgZHggPSBkeDAgKyBjLmR4O1xuICAgICAgICAgICAgdmFyIGR5ID0gZHkwICsgYy5keTtcbiAgICAgICAgICAgIHZhciBkeiA9IGR6MCArIGMuZHo7XG4gICAgICAgICAgICB2YXIgYXR0biA9IDIgLSBkeCAqIGR4IC0gZHkgKiBkeSAtIGR6ICogZHo7XG4gICAgICAgICAgICBpZiAoYXR0biA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgcHggPSB4c2IgKyBjLnhzYjtcbiAgICAgICAgICAgICAgICB2YXIgcHkgPSB5c2IgKyBjLnlzYjtcbiAgICAgICAgICAgICAgICB2YXIgcHogPSB6c2IgKyBjLnpzYjtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhQYXJ0QSA9IHBlcm1bcHggJiAweGZmXTtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhQYXJ0QiA9IHBlcm1bKGluZGV4UGFydEEgKyBweSkgJiAweGZmXTtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBwZXJtM0RbKGluZGV4UGFydEIgKyBweikgJiAweGZmXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVQYXJ0ID0gY29uc3RhbnRzXzEuZ3JhZGllbnRzM0RbaW5kZXhdICogZHggK1xuICAgICAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5ncmFkaWVudHMzRFtpbmRleCArIDFdICogZHkgK1xuICAgICAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5ncmFkaWVudHMzRFtpbmRleCArIDJdICogZHo7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gYXR0biAqIGF0dG4gKiBhdHRuICogYXR0biAqIHZhbHVlUGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWUgKiBjb25zdGFudHNfMS5OT1JNXzNEO1xuICAgIH07XG59XG5leHBvcnRzLm1ha2VOb2lzZTNEID0gbWFrZU5vaXNlM0Q7XG5mdW5jdGlvbiBtYWtlTm9pc2U0RChjbGllbnRTZWVkKSB7XG4gICAgdmFyIGNvbnRyaWJ1dGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0YW50c18xLnA0RC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICAgICAgdmFyIGJhc2VTZXQgPSBjb25zdGFudHNfMS5iYXNlNERbY29uc3RhbnRzXzEucDREW2ldXTtcbiAgICAgICAgdmFyIHByZXZpb3VzID0gbnVsbDtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGJhc2VTZXQubGVuZ3RoOyBrICs9IDUpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjb250cmlidXRpb240RChiYXNlU2V0W2tdLCBiYXNlU2V0W2sgKyAxXSwgYmFzZVNldFtrICsgMl0sIGJhc2VTZXRbayArIDNdLCBiYXNlU2V0W2sgKyA0XSk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXMgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgY29udHJpYnV0aW9uc1tpIC8gMTZdID0gY3VycmVudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwcmV2aW91cy5uZXh0ID0gY3VycmVudDtcbiAgICAgICAgICAgIHByZXZpb3VzID0gY3VycmVudDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50Lm5leHQgPSBjb250cmlidXRpb240RChjb25zdGFudHNfMS5wNERbaSArIDFdLCBjb25zdGFudHNfMS5wNERbaSArIDJdLCBjb25zdGFudHNfMS5wNERbaSArIDNdLCBjb25zdGFudHNfMS5wNERbaSArIDRdLCBjb25zdGFudHNfMS5wNERbaSArIDVdKTtcbiAgICAgICAgY3VycmVudC5uZXh0Lm5leHQgPSBjb250cmlidXRpb240RChjb25zdGFudHNfMS5wNERbaSArIDZdLCBjb25zdGFudHNfMS5wNERbaSArIDddLCBjb25zdGFudHNfMS5wNERbaSArIDhdLCBjb25zdGFudHNfMS5wNERbaSArIDldLCBjb25zdGFudHNfMS5wNERbaSArIDEwXSk7XG4gICAgICAgIGN1cnJlbnQubmV4dC5uZXh0Lm5leHQgPSBjb250cmlidXRpb240RChjb25zdGFudHNfMS5wNERbaSArIDExXSwgY29uc3RhbnRzXzEucDREW2kgKyAxMl0sIGNvbnN0YW50c18xLnA0RFtpICsgMTNdLCBjb25zdGFudHNfMS5wNERbaSArIDE0XSwgY29uc3RhbnRzXzEucDREW2kgKyAxNV0pO1xuICAgIH1cbiAgICB2YXIgbG9va3VwID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25zdGFudHNfMS5sb29rdXBQYWlyczRELmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGxvb2t1cFtjb25zdGFudHNfMS5sb29rdXBQYWlyczREW2ldXSA9IGNvbnRyaWJ1dGlvbnNbY29uc3RhbnRzXzEubG9va3VwUGFpcnM0RFtpICsgMV1dO1xuICAgIH1cbiAgICB2YXIgcGVybSA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gICAgdmFyIHBlcm00RCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gICAgdmFyIHNvdXJjZSA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKylcbiAgICAgICAgc291cmNlW2ldID0gaTtcbiAgICB2YXIgc2VlZCA9IG5ldyBVaW50MzJBcnJheSgxKTtcbiAgICBzZWVkWzBdID0gY2xpZW50U2VlZDtcbiAgICBzZWVkID0gc2h1ZmZsZVNlZWQoc2h1ZmZsZVNlZWQoc2h1ZmZsZVNlZWQoc2VlZCkpKTtcbiAgICBmb3IgKHZhciBpID0gMjU1OyBpID49IDA7IGktLSkge1xuICAgICAgICBzZWVkID0gc2h1ZmZsZVNlZWQoc2VlZCk7XG4gICAgICAgIHZhciByID0gbmV3IFVpbnQzMkFycmF5KDEpO1xuICAgICAgICByWzBdID0gKHNlZWRbMF0gKyAzMSkgJSAoaSArIDEpO1xuICAgICAgICBpZiAoclswXSA8IDApXG4gICAgICAgICAgICByWzBdICs9IGkgKyAxO1xuICAgICAgICBwZXJtW2ldID0gc291cmNlW3JbMF1dO1xuICAgICAgICBwZXJtNERbaV0gPSBwZXJtW2ldICYgMHhmYztcbiAgICAgICAgc291cmNlW3JbMF1dID0gc291cmNlW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHgsIHksIHosIHcpIHtcbiAgICAgICAgdmFyIHN0cmV0Y2hPZmZzZXQgPSAoeCArIHkgKyB6ICsgdykgKiBjb25zdGFudHNfMS5TVFJFVENIXzREO1xuICAgICAgICB2YXIgeHMgPSB4ICsgc3RyZXRjaE9mZnNldDtcbiAgICAgICAgdmFyIHlzID0geSArIHN0cmV0Y2hPZmZzZXQ7XG4gICAgICAgIHZhciB6cyA9IHogKyBzdHJldGNoT2Zmc2V0O1xuICAgICAgICB2YXIgd3MgPSB3ICsgc3RyZXRjaE9mZnNldDtcbiAgICAgICAgdmFyIHhzYiA9IE1hdGguZmxvb3IoeHMpO1xuICAgICAgICB2YXIgeXNiID0gTWF0aC5mbG9vcih5cyk7XG4gICAgICAgIHZhciB6c2IgPSBNYXRoLmZsb29yKHpzKTtcbiAgICAgICAgdmFyIHdzYiA9IE1hdGguZmxvb3Iod3MpO1xuICAgICAgICB2YXIgc3F1aXNoT2Zmc2V0ID0gKHhzYiArIHlzYiArIHpzYiArIHdzYikgKiBjb25zdGFudHNfMS5TUVVJU0hfNEQ7XG4gICAgICAgIHZhciBkeDAgPSB4IC0gKHhzYiArIHNxdWlzaE9mZnNldCk7XG4gICAgICAgIHZhciBkeTAgPSB5IC0gKHlzYiArIHNxdWlzaE9mZnNldCk7XG4gICAgICAgIHZhciBkejAgPSB6IC0gKHpzYiArIHNxdWlzaE9mZnNldCk7XG4gICAgICAgIHZhciBkdzAgPSB3IC0gKHdzYiArIHNxdWlzaE9mZnNldCk7XG4gICAgICAgIHZhciB4aW5zID0geHMgLSB4c2I7XG4gICAgICAgIHZhciB5aW5zID0geXMgLSB5c2I7XG4gICAgICAgIHZhciB6aW5zID0genMgLSB6c2I7XG4gICAgICAgIHZhciB3aW5zID0gd3MgLSB3c2I7XG4gICAgICAgIHZhciBpblN1bSA9IHhpbnMgKyB5aW5zICsgemlucyArIHdpbnM7XG4gICAgICAgIHZhciBoYXNoID0gKHppbnMgLSB3aW5zICsgMSkgfFxuICAgICAgICAgICAgKCh5aW5zIC0gemlucyArIDEpIDw8IDEpIHxcbiAgICAgICAgICAgICgoeWlucyAtIHdpbnMgKyAxKSA8PCAyKSB8XG4gICAgICAgICAgICAoKHhpbnMgLSB5aW5zICsgMSkgPDwgMykgfFxuICAgICAgICAgICAgKCh4aW5zIC0gemlucyArIDEpIDw8IDQpIHxcbiAgICAgICAgICAgICgoeGlucyAtIHdpbnMgKyAxKSA8PCA1KSB8XG4gICAgICAgICAgICAoaW5TdW0gPDwgNikgfFxuICAgICAgICAgICAgKChpblN1bSArIHdpbnMpIDw8IDgpIHxcbiAgICAgICAgICAgICgoaW5TdW0gKyB6aW5zKSA8PCAxMSkgfFxuICAgICAgICAgICAgKChpblN1bSArIHlpbnMpIDw8IDE0KSB8XG4gICAgICAgICAgICAoKGluU3VtICsgeGlucykgPDwgMTcpO1xuICAgICAgICB2YXIgdmFsdWUgPSAwO1xuICAgICAgICBmb3IgKHZhciBjID0gbG9va3VwW2hhc2hdOyBjICE9PSB1bmRlZmluZWQ7IGMgPSBjLm5leHQpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IGR4MCArIGMuZHg7XG4gICAgICAgICAgICB2YXIgZHkgPSBkeTAgKyBjLmR5O1xuICAgICAgICAgICAgdmFyIGR6ID0gZHowICsgYy5kejtcbiAgICAgICAgICAgIHZhciBkdyA9IGR3MCArIGMuZHc7XG4gICAgICAgICAgICB2YXIgYXR0biA9IDIgLSBkeCAqIGR4IC0gZHkgKiBkeSAtIGR6ICogZHogLSBkdyAqIGR3O1xuICAgICAgICAgICAgaWYgKGF0dG4gPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHB4ID0geHNiICsgYy54c2I7XG4gICAgICAgICAgICAgICAgdmFyIHB5ID0geXNiICsgYy55c2I7XG4gICAgICAgICAgICAgICAgdmFyIHB6ID0genNiICsgYy56c2I7XG4gICAgICAgICAgICAgICAgdmFyIHB3ID0gd3NiICsgYy53c2I7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4UGFydEEgPSBwZXJtW3B4ICYgMHhmZl07XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4UGFydEIgPSBwZXJtWyhpbmRleFBhcnRBICsgcHkpICYgMHhmZl07XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4UGFydEMgPSBwZXJtWyhpbmRleFBhcnRCICsgcHopICYgMHhmZl07XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gcGVybTREWyhpbmRleFBhcnRDICsgcHcpICYgMHhmZl07XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlUGFydCA9IGNvbnN0YW50c18xLmdyYWRpZW50czREW2luZGV4XSAqIGR4ICtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuZ3JhZGllbnRzNERbaW5kZXggKyAxXSAqIGR5ICtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuZ3JhZGllbnRzNERbaW5kZXggKyAyXSAqIGR6ICtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuZ3JhZGllbnRzNERbaW5kZXggKyAzXSAqIGR3O1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IGF0dG4gKiBhdHRuICogYXR0biAqIGF0dG4gKiB2YWx1ZVBhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlICogY29uc3RhbnRzXzEuTk9STV80RDtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlTm9pc2U0RCA9IG1ha2VOb2lzZTREO1xuZnVuY3Rpb24gc2h1ZmZsZVNlZWQoc2VlZCkge1xuICAgIHZhciBuZXdTZWVkID0gbmV3IFVpbnQzMkFycmF5KDEpO1xuICAgIG5ld1NlZWRbMF0gPSBzZWVkWzBdICogMTY2NDUyNSArIDEwMTM5MDQyMjM7XG4gICAgcmV0dXJuIG5ld1NlZWQ7XG59XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgcHJlZml4ID0gJ34nO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEV2ZW50cygpIHt9XG5cbi8vXG4vLyBXZSB0cnkgdG8gbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuIEluIHNvbWUgZW5naW5lcyBjcmVhdGluZyBhblxuLy8gaW5zdGFuY2UgaW4gdGhpcyB3YXkgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgZGlyZWN0bHkuXG4vLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuLy8gY2hhcmFjdGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90XG4vLyBvdmVycmlkZGVuIG9yIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbi8vXG5pZiAoT2JqZWN0LmNyZWF0ZSkge1xuICBFdmVudHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAvL1xuICAvLyBUaGlzIGhhY2sgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGBfX3Byb3RvX19gIHByb3BlcnR5IGlzIHN0aWxsIGluaGVyaXRlZCBpblxuICAvLyBzb21lIG9sZCBicm93c2VycyBsaWtlIEFuZHJvaWQgNCwgaVBob25lIDUuMSwgT3BlcmEgMTEgYW5kIFNhZmFyaSA1LlxuICAvL1xuICBpZiAoIW5ldyBFdmVudHMoKS5fX3Byb3RvX18pIHByZWZpeCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCBlbWl0dGVyLCBvbmNlKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdKSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCBlbWl0dGVyLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0uZm4pIGVtaXR0ZXIuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gW2VtaXR0ZXIuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIGVtaXR0ZXI7XG59XG5cbi8qKlxuICogQ2xlYXIgZXZlbnQgYnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2dCBUaGUgRXZlbnQgbmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNsZWFyRXZlbnQoZW1pdHRlciwgZXZ0KSB7XG4gIGlmICgtLWVtaXR0ZXIuX2V2ZW50c0NvdW50ID09PSAwKSBlbWl0dGVyLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIGVsc2UgZGVsZXRlIGVtaXR0ZXIuX2V2ZW50c1tldnRdO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgdmFyIG5hbWVzID0gW11cbiAgICAsIGV2ZW50c1xuICAgICwgbmFtZTtcblxuICBpZiAodGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHJldHVybiBuYW1lcztcblxuICBmb3IgKG5hbWUgaW4gKGV2ZW50cyA9IHRoaXMuX2V2ZW50cykpIHtcbiAgICBpZiAoaGFzLmNhbGwoZXZlbnRzLCBuYW1lKSkgbmFtZXMucHVzaChwcmVmaXggPyBuYW1lLnNsaWNlKDEpIDogbmFtZSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHJldHVybiBuYW1lcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhldmVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFoYW5kbGVycykgcmV0dXJuIFtdO1xuICBpZiAoaGFuZGxlcnMuZm4pIHJldHVybiBbaGFuZGxlcnMuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gaGFuZGxlcnNbaV0uZm47XG4gIH1cblxuICByZXR1cm4gZWU7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gbGlzdGVuZXJDb3VudChldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiAwO1xuICBpZiAobGlzdGVuZXJzLmZuKSByZXR1cm4gMTtcbiAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGg7XG59O1xuXG4vKipcbiAqIENhbGxzIGVhY2ggb2YgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQWRkIGEgb25lLXRpbWUgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIHRydWUpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGlzIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIGlmICghZm4pIHtcbiAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChcbiAgICAgIGxpc3RlbmVycy5mbiA9PT0gZm4gJiZcbiAgICAgICghb25jZSB8fCBsaXN0ZW5lcnMub25jZSkgJiZcbiAgICAgICghY29udGV4dCB8fCBsaXN0ZW5lcnMuY29udGV4dCA9PT0gY29udGV4dClcbiAgICApIHtcbiAgICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50cyA9IFtdLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmbiB8fFxuICAgICAgICAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpIHx8XG4gICAgICAgIChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICBpZiAoZXZlbnRzLmxlbmd0aCkgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICAgIGVsc2UgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0O1xuXG4gIGlmIChldmVudCkge1xuICAgIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1tldnRdKSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZWFyY3V0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGVhcmN1dDtcblxuZnVuY3Rpb24gZWFyY3V0KGRhdGEsIGhvbGVJbmRpY2VzLCBkaW0pIHtcblxuICAgIGRpbSA9IGRpbSB8fCAyO1xuXG4gICAgdmFyIGhhc0hvbGVzID0gaG9sZUluZGljZXMgJiYgaG9sZUluZGljZXMubGVuZ3RoLFxuICAgICAgICBvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbMF0gKiBkaW0gOiBkYXRhLmxlbmd0aCxcbiAgICAgICAgb3V0ZXJOb2RlID0gbGlua2VkTGlzdChkYXRhLCAwLCBvdXRlckxlbiwgZGltLCB0cnVlKSxcbiAgICAgICAgdHJpYW5nbGVzID0gW107XG5cbiAgICBpZiAoIW91dGVyTm9kZSB8fCBvdXRlck5vZGUubmV4dCA9PT0gb3V0ZXJOb2RlLnByZXYpIHJldHVybiB0cmlhbmdsZXM7XG5cbiAgICB2YXIgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgaW52U2l6ZTtcblxuICAgIGlmIChoYXNIb2xlcykgb3V0ZXJOb2RlID0gZWxpbWluYXRlSG9sZXMoZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltKTtcblxuICAgIC8vIGlmIHRoZSBzaGFwZSBpcyBub3QgdG9vIHNpbXBsZSwgd2UnbGwgdXNlIHotb3JkZXIgY3VydmUgaGFzaCBsYXRlcjsgY2FsY3VsYXRlIHBvbHlnb24gYmJveFxuICAgIGlmIChkYXRhLmxlbmd0aCA+IDgwICogZGltKSB7XG4gICAgICAgIG1pblggPSBtYXhYID0gZGF0YVswXTtcbiAgICAgICAgbWluWSA9IG1heFkgPSBkYXRhWzFdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSBkaW07IGkgPCBvdXRlckxlbjsgaSArPSBkaW0pIHtcbiAgICAgICAgICAgIHggPSBkYXRhW2ldO1xuICAgICAgICAgICAgeSA9IGRhdGFbaSArIDFdO1xuICAgICAgICAgICAgaWYgKHggPCBtaW5YKSBtaW5YID0geDtcbiAgICAgICAgICAgIGlmICh5IDwgbWluWSkgbWluWSA9IHk7XG4gICAgICAgICAgICBpZiAoeCA+IG1heFgpIG1heFggPSB4O1xuICAgICAgICAgICAgaWYgKHkgPiBtYXhZKSBtYXhZID0geTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1pblgsIG1pblkgYW5kIGludlNpemUgYXJlIGxhdGVyIHVzZWQgdG8gdHJhbnNmb3JtIGNvb3JkcyBpbnRvIGludGVnZXJzIGZvciB6LW9yZGVyIGNhbGN1bGF0aW9uXG4gICAgICAgIGludlNpemUgPSBNYXRoLm1heChtYXhYIC0gbWluWCwgbWF4WSAtIG1pblkpO1xuICAgICAgICBpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDEgLyBpbnZTaXplIDogMDtcbiAgICB9XG5cbiAgICBlYXJjdXRMaW5rZWQob3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSk7XG5cbiAgICByZXR1cm4gdHJpYW5nbGVzO1xufVxuXG4vLyBjcmVhdGUgYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QgZnJvbSBwb2x5Z29uIHBvaW50cyBpbiB0aGUgc3BlY2lmaWVkIHdpbmRpbmcgb3JkZXJcbmZ1bmN0aW9uIGxpbmtlZExpc3QoZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UpIHtcbiAgICB2YXIgaSwgbGFzdDtcblxuICAgIGlmIChjbG9ja3dpc2UgPT09IChzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkgPiAwKSkge1xuICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBkaW0pIGxhc3QgPSBpbnNlcnROb2RlKGksIGRhdGFbaV0sIGRhdGFbaSArIDFdLCBsYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSBlbmQgLSBkaW07IGkgPj0gc3RhcnQ7IGkgLT0gZGltKSBsYXN0ID0gaW5zZXJ0Tm9kZShpLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgbGFzdCk7XG4gICAgfVxuXG4gICAgaWYgKGxhc3QgJiYgZXF1YWxzKGxhc3QsIGxhc3QubmV4dCkpIHtcbiAgICAgICAgcmVtb3ZlTm9kZShsYXN0KTtcbiAgICAgICAgbGFzdCA9IGxhc3QubmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gbGFzdDtcbn1cblxuLy8gZWxpbWluYXRlIGNvbGluZWFyIG9yIGR1cGxpY2F0ZSBwb2ludHNcbmZ1bmN0aW9uIGZpbHRlclBvaW50cyhzdGFydCwgZW5kKSB7XG4gICAgaWYgKCFzdGFydCkgcmV0dXJuIHN0YXJ0O1xuICAgIGlmICghZW5kKSBlbmQgPSBzdGFydDtcblxuICAgIHZhciBwID0gc3RhcnQsXG4gICAgICAgIGFnYWluO1xuICAgIGRvIHtcbiAgICAgICAgYWdhaW4gPSBmYWxzZTtcblxuICAgICAgICBpZiAoIXAuc3RlaW5lciAmJiAoZXF1YWxzKHAsIHAubmV4dCkgfHwgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPT09IDApKSB7XG4gICAgICAgICAgICByZW1vdmVOb2RlKHApO1xuICAgICAgICAgICAgcCA9IGVuZCA9IHAucHJldjtcbiAgICAgICAgICAgIGlmIChwID09PSBwLm5leHQpIGJyZWFrO1xuICAgICAgICAgICAgYWdhaW4gPSB0cnVlO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwID0gcC5uZXh0O1xuICAgICAgICB9XG4gICAgfSB3aGlsZSAoYWdhaW4gfHwgcCAhPT0gZW5kKTtcblxuICAgIHJldHVybiBlbmQ7XG59XG5cbi8vIG1haW4gZWFyIHNsaWNpbmcgbG9vcCB3aGljaCB0cmlhbmd1bGF0ZXMgYSBwb2x5Z29uIChnaXZlbiBhcyBhIGxpbmtlZCBsaXN0KVxuZnVuY3Rpb24gZWFyY3V0TGlua2VkKGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIHBhc3MpIHtcbiAgICBpZiAoIWVhcikgcmV0dXJuO1xuXG4gICAgLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuICAgIGlmICghcGFzcyAmJiBpbnZTaXplKSBpbmRleEN1cnZlKGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSk7XG5cbiAgICB2YXIgc3RvcCA9IGVhcixcbiAgICAgICAgcHJldiwgbmV4dDtcblxuICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCBlYXJzLCBzbGljaW5nIHRoZW0gb25lIGJ5IG9uZVxuICAgIHdoaWxlIChlYXIucHJldiAhPT0gZWFyLm5leHQpIHtcbiAgICAgICAgcHJldiA9IGVhci5wcmV2O1xuICAgICAgICBuZXh0ID0gZWFyLm5leHQ7XG5cbiAgICAgICAgaWYgKGludlNpemUgPyBpc0Vhckhhc2hlZChlYXIsIG1pblgsIG1pblksIGludlNpemUpIDogaXNFYXIoZWFyKSkge1xuICAgICAgICAgICAgLy8gY3V0IG9mZiB0aGUgdHJpYW5nbGVcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKHByZXYuaSAvIGRpbSk7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChlYXIuaSAvIGRpbSk7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChuZXh0LmkgLyBkaW0pO1xuXG4gICAgICAgICAgICByZW1vdmVOb2RlKGVhcik7XG5cbiAgICAgICAgICAgIC8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRleCBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXNcbiAgICAgICAgICAgIGVhciA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIHN0b3AgPSBuZXh0Lm5leHQ7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZWFyID0gbmV4dDtcblxuICAgICAgICAvLyBpZiB3ZSBsb29wZWQgdGhyb3VnaCB0aGUgd2hvbGUgcmVtYWluaW5nIHBvbHlnb24gYW5kIGNhbid0IGZpbmQgYW55IG1vcmUgZWFyc1xuICAgICAgICBpZiAoZWFyID09PSBzdG9wKSB7XG4gICAgICAgICAgICAvLyB0cnkgZmlsdGVyaW5nIHBvaW50cyBhbmQgc2xpY2luZyBhZ2FpblxuICAgICAgICAgICAgaWYgKCFwYXNzKSB7XG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGZpbHRlclBvaW50cyhlYXIpLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMSk7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoaXMgZGlkbid0IHdvcmssIHRyeSBjdXJpbmcgYWxsIHNtYWxsIHNlbGYtaW50ZXJzZWN0aW9ucyBsb2NhbGx5XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBlYXIgPSBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKGZpbHRlclBvaW50cyhlYXIpLCB0cmlhbmdsZXMsIGRpbSk7XG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDIpO1xuXG4gICAgICAgICAgICAvLyBhcyBhIGxhc3QgcmVzb3J0LCB0cnkgc3BsaXR0aW5nIHRoZSByZW1haW5pbmcgcG9seWdvbiBpbnRvIHR3b1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXNzID09PSAyKSB7XG4gICAgICAgICAgICAgICAgc3BsaXRFYXJjdXQoZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBjaGVjayB3aGV0aGVyIGEgcG9seWdvbiBub2RlIGZvcm1zIGEgdmFsaWQgZWFyIHdpdGggYWRqYWNlbnQgbm9kZXNcbmZ1bmN0aW9uIGlzRWFyKGVhcikge1xuICAgIHZhciBhID0gZWFyLnByZXYsXG4gICAgICAgIGIgPSBlYXIsXG4gICAgICAgIGMgPSBlYXIubmV4dDtcblxuICAgIGlmIChhcmVhKGEsIGIsIGMpID49IDApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuICAgIC8vIG5vdyBtYWtlIHN1cmUgd2UgZG9uJ3QgaGF2ZSBvdGhlciBwb2ludHMgaW5zaWRlIHRoZSBwb3RlbnRpYWwgZWFyXG4gICAgdmFyIHAgPSBlYXIubmV4dC5uZXh0O1xuXG4gICAgd2hpbGUgKHAgIT09IGVhci5wcmV2KSB7XG4gICAgICAgIGlmIChwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkpICYmXG4gICAgICAgICAgICBhcmVhKHAucHJldiwgcCwgcC5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzRWFySGFzaGVkKGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSkge1xuICAgIHZhciBhID0gZWFyLnByZXYsXG4gICAgICAgIGIgPSBlYXIsXG4gICAgICAgIGMgPSBlYXIubmV4dDtcblxuICAgIGlmIChhcmVhKGEsIGIsIGMpID49IDApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuICAgIC8vIHRyaWFuZ2xlIGJib3g7IG1pbiAmIG1heCBhcmUgY2FsY3VsYXRlZCBsaWtlIHRoaXMgZm9yIHNwZWVkXG4gICAgdmFyIG1pblRYID0gYS54IDwgYi54ID8gKGEueCA8IGMueCA/IGEueCA6IGMueCkgOiAoYi54IDwgYy54ID8gYi54IDogYy54KSxcbiAgICAgICAgbWluVFkgPSBhLnkgPCBiLnkgPyAoYS55IDwgYy55ID8gYS55IDogYy55KSA6IChiLnkgPCBjLnkgPyBiLnkgOiBjLnkpLFxuICAgICAgICBtYXhUWCA9IGEueCA+IGIueCA/IChhLnggPiBjLnggPyBhLnggOiBjLngpIDogKGIueCA+IGMueCA/IGIueCA6IGMueCksXG4gICAgICAgIG1heFRZID0gYS55ID4gYi55ID8gKGEueSA+IGMueSA/IGEueSA6IGMueSkgOiAoYi55ID4gYy55ID8gYi55IDogYy55KTtcblxuICAgIC8vIHotb3JkZXIgcmFuZ2UgZm9yIHRoZSBjdXJyZW50IHRyaWFuZ2xlIGJib3g7XG4gICAgdmFyIG1pblogPSB6T3JkZXIobWluVFgsIG1pblRZLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSxcbiAgICAgICAgbWF4WiA9IHpPcmRlcihtYXhUWCwgbWF4VFksIG1pblgsIG1pblksIGludlNpemUpO1xuXG4gICAgdmFyIHAgPSBlYXIucHJldlosXG4gICAgICAgIG4gPSBlYXIubmV4dFo7XG5cbiAgICAvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBpbiBib3RoIGRpcmVjdGlvbnNcbiAgICB3aGlsZSAocCAmJiBwLnogPj0gbWluWiAmJiBuICYmIG4ueiA8PSBtYXhaKSB7XG4gICAgICAgIGlmIChwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIHAueCwgcC55KSAmJlxuICAgICAgICAgICAgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5wcmV2WjtcblxuICAgICAgICBpZiAobiAhPT0gZWFyLnByZXYgJiYgbiAhPT0gZWFyLm5leHQgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBuLngsIG4ueSkgJiZcbiAgICAgICAgICAgIGFyZWEobi5wcmV2LCBuLCBuLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgbiA9IG4ubmV4dFo7XG4gICAgfVxuXG4gICAgLy8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBkZWNyZWFzaW5nIHotb3JkZXJcbiAgICB3aGlsZSAocCAmJiBwLnogPj0gbWluWikge1xuICAgICAgICBpZiAocCAhPT0gZWFyLnByZXYgJiYgcCAhPT0gZWFyLm5leHQgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSkgJiZcbiAgICAgICAgICAgIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcCA9IHAucHJldlo7XG4gICAgfVxuXG4gICAgLy8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBpbmNyZWFzaW5nIHotb3JkZXJcbiAgICB3aGlsZSAobiAmJiBuLnogPD0gbWF4Wikge1xuICAgICAgICBpZiAobiAhPT0gZWFyLnByZXYgJiYgbiAhPT0gZWFyLm5leHQgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBuLngsIG4ueSkgJiZcbiAgICAgICAgICAgIGFyZWEobi5wcmV2LCBuLCBuLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgbiA9IG4ubmV4dFo7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8vIGdvIHRocm91Z2ggYWxsIHBvbHlnb24gbm9kZXMgYW5kIGN1cmUgc21hbGwgbG9jYWwgc2VsZi1pbnRlcnNlY3Rpb25zXG5mdW5jdGlvbiBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSkge1xuICAgIHZhciBwID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICB2YXIgYSA9IHAucHJldixcbiAgICAgICAgICAgIGIgPSBwLm5leHQubmV4dDtcblxuICAgICAgICBpZiAoIWVxdWFscyhhLCBiKSAmJiBpbnRlcnNlY3RzKGEsIHAsIHAubmV4dCwgYikgJiYgbG9jYWxseUluc2lkZShhLCBiKSAmJiBsb2NhbGx5SW5zaWRlKGIsIGEpKSB7XG5cbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGEuaSAvIGRpbSk7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChwLmkgLyBkaW0pO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goYi5pIC8gZGltKTtcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIHR3byBub2RlcyBpbnZvbHZlZFxuICAgICAgICAgICAgcmVtb3ZlTm9kZShwKTtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUocC5uZXh0KTtcblxuICAgICAgICAgICAgcCA9IHN0YXJ0ID0gYjtcbiAgICAgICAgfVxuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHJldHVybiBmaWx0ZXJQb2ludHMocCk7XG59XG5cbi8vIHRyeSBzcGxpdHRpbmcgcG9seWdvbiBpbnRvIHR3byBhbmQgdHJpYW5ndWxhdGUgdGhlbSBpbmRlcGVuZGVudGx5XG5mdW5jdGlvbiBzcGxpdEVhcmN1dChzdGFydCwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUpIHtcbiAgICAvLyBsb29rIGZvciBhIHZhbGlkIGRpYWdvbmFsIHRoYXQgZGl2aWRlcyB0aGUgcG9seWdvbiBpbnRvIHR3b1xuICAgIHZhciBhID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICB2YXIgYiA9IGEubmV4dC5uZXh0O1xuICAgICAgICB3aGlsZSAoYiAhPT0gYS5wcmV2KSB7XG4gICAgICAgICAgICBpZiAoYS5pICE9PSBiLmkgJiYgaXNWYWxpZERpYWdvbmFsKGEsIGIpKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BsaXQgdGhlIHBvbHlnb24gaW4gdHdvIGJ5IHRoZSBkaWFnb25hbFxuICAgICAgICAgICAgICAgIHZhciBjID0gc3BsaXRQb2x5Z29uKGEsIGIpO1xuXG4gICAgICAgICAgICAgICAgLy8gZmlsdGVyIGNvbGluZWFyIHBvaW50cyBhcm91bmQgdGhlIGN1dHNcbiAgICAgICAgICAgICAgICBhID0gZmlsdGVyUG9pbnRzKGEsIGEubmV4dCk7XG4gICAgICAgICAgICAgICAgYyA9IGZpbHRlclBvaW50cyhjLCBjLm5leHQpO1xuXG4gICAgICAgICAgICAgICAgLy8gcnVuIGVhcmN1dCBvbiBlYWNoIGhhbGZcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoYSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUpO1xuICAgICAgICAgICAgICAgIGVhcmN1dExpbmtlZChjLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYiA9IGIubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBhID0gYS5uZXh0O1xuICAgIH0gd2hpbGUgKGEgIT09IHN0YXJ0KTtcbn1cblxuLy8gbGluayBldmVyeSBob2xlIGludG8gdGhlIG91dGVyIGxvb3AsIHByb2R1Y2luZyBhIHNpbmdsZS1yaW5nIHBvbHlnb24gd2l0aG91dCBob2xlc1xuZnVuY3Rpb24gZWxpbWluYXRlSG9sZXMoZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltKSB7XG4gICAgdmFyIHF1ZXVlID0gW10sXG4gICAgICAgIGksIGxlbiwgc3RhcnQsIGVuZCwgbGlzdDtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07XG4gICAgICAgIGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbaSArIDFdICogZGltIDogZGF0YS5sZW5ndGg7XG4gICAgICAgIGxpc3QgPSBsaW5rZWRMaXN0KGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSwgZmFsc2UpO1xuICAgICAgICBpZiAobGlzdCA9PT0gbGlzdC5uZXh0KSBsaXN0LnN0ZWluZXIgPSB0cnVlO1xuICAgICAgICBxdWV1ZS5wdXNoKGdldExlZnRtb3N0KGxpc3QpKTtcbiAgICB9XG5cbiAgICBxdWV1ZS5zb3J0KGNvbXBhcmVYKTtcblxuICAgIC8vIHByb2Nlc3MgaG9sZXMgZnJvbSBsZWZ0IHRvIHJpZ2h0XG4gICAgZm9yIChpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsaW1pbmF0ZUhvbGUocXVldWVbaV0sIG91dGVyTm9kZSk7XG4gICAgICAgIG91dGVyTm9kZSA9IGZpbHRlclBvaW50cyhvdXRlck5vZGUsIG91dGVyTm9kZS5uZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0ZXJOb2RlO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlWChhLCBiKSB7XG4gICAgcmV0dXJuIGEueCAtIGIueDtcbn1cblxuLy8gZmluZCBhIGJyaWRnZSBiZXR3ZWVuIHZlcnRpY2VzIHRoYXQgY29ubmVjdHMgaG9sZSB3aXRoIGFuIG91dGVyIHJpbmcgYW5kIGFuZCBsaW5rIGl0XG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlKGhvbGUsIG91dGVyTm9kZSkge1xuICAgIG91dGVyTm9kZSA9IGZpbmRIb2xlQnJpZGdlKGhvbGUsIG91dGVyTm9kZSk7XG4gICAgaWYgKG91dGVyTm9kZSkge1xuICAgICAgICB2YXIgYiA9IHNwbGl0UG9seWdvbihvdXRlck5vZGUsIGhvbGUpO1xuICAgICAgICBmaWx0ZXJQb2ludHMoYiwgYi5uZXh0KTtcbiAgICB9XG59XG5cbi8vIERhdmlkIEViZXJseSdzIGFsZ29yaXRobSBmb3IgZmluZGluZyBhIGJyaWRnZSBiZXR3ZWVuIGhvbGUgYW5kIG91dGVyIHBvbHlnb25cbmZ1bmN0aW9uIGZpbmRIb2xlQnJpZGdlKGhvbGUsIG91dGVyTm9kZSkge1xuICAgIHZhciBwID0gb3V0ZXJOb2RlLFxuICAgICAgICBoeCA9IGhvbGUueCxcbiAgICAgICAgaHkgPSBob2xlLnksXG4gICAgICAgIHF4ID0gLUluZmluaXR5LFxuICAgICAgICBtO1xuXG4gICAgLy8gZmluZCBhIHNlZ21lbnQgaW50ZXJzZWN0ZWQgYnkgYSByYXkgZnJvbSB0aGUgaG9sZSdzIGxlZnRtb3N0IHBvaW50IHRvIHRoZSBsZWZ0O1xuICAgIC8vIHNlZ21lbnQncyBlbmRwb2ludCB3aXRoIGxlc3NlciB4IHdpbGwgYmUgcG90ZW50aWFsIGNvbm5lY3Rpb24gcG9pbnRcbiAgICBkbyB7XG4gICAgICAgIGlmIChoeSA8PSBwLnkgJiYgaHkgPj0gcC5uZXh0LnkgJiYgcC5uZXh0LnkgIT09IHAueSkge1xuICAgICAgICAgICAgdmFyIHggPSBwLnggKyAoaHkgLSBwLnkpICogKHAubmV4dC54IC0gcC54KSAvIChwLm5leHQueSAtIHAueSk7XG4gICAgICAgICAgICBpZiAoeCA8PSBoeCAmJiB4ID4gcXgpIHtcbiAgICAgICAgICAgICAgICBxeCA9IHg7XG4gICAgICAgICAgICAgICAgaWYgKHggPT09IGh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoeSA9PT0gcC55KSByZXR1cm4gcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGh5ID09PSBwLm5leHQueSkgcmV0dXJuIHAubmV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbSA9IHAueCA8IHAubmV4dC54ID8gcCA6IHAubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IG91dGVyTm9kZSk7XG5cbiAgICBpZiAoIW0pIHJldHVybiBudWxsO1xuXG4gICAgaWYgKGh4ID09PSBxeCkgcmV0dXJuIG07IC8vIGhvbGUgdG91Y2hlcyBvdXRlciBzZWdtZW50OyBwaWNrIGxlZnRtb3N0IGVuZHBvaW50XG5cbiAgICAvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBvZiBob2xlIHBvaW50LCBzZWdtZW50IGludGVyc2VjdGlvbiBhbmQgZW5kcG9pbnQ7XG4gICAgLy8gaWYgdGhlcmUgYXJlIG5vIHBvaW50cyBmb3VuZCwgd2UgaGF2ZSBhIHZhbGlkIGNvbm5lY3Rpb247XG4gICAgLy8gb3RoZXJ3aXNlIGNob29zZSB0aGUgcG9pbnQgb2YgdGhlIG1pbmltdW0gYW5nbGUgd2l0aCB0aGUgcmF5IGFzIGNvbm5lY3Rpb24gcG9pbnRcblxuICAgIHZhciBzdG9wID0gbSxcbiAgICAgICAgbXggPSBtLngsXG4gICAgICAgIG15ID0gbS55LFxuICAgICAgICB0YW5NaW4gPSBJbmZpbml0eSxcbiAgICAgICAgdGFuO1xuXG4gICAgcCA9IG07XG5cbiAgICBkbyB7XG4gICAgICAgIGlmIChoeCA+PSBwLnggJiYgcC54ID49IG14ICYmIGh4ICE9PSBwLnggJiZcbiAgICAgICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoaHkgPCBteSA/IGh4IDogcXgsIGh5LCBteCwgbXksIGh5IDwgbXkgPyBxeCA6IGh4LCBoeSwgcC54LCBwLnkpKSB7XG5cbiAgICAgICAgICAgIHRhbiA9IE1hdGguYWJzKGh5IC0gcC55KSAvIChoeCAtIHAueCk7IC8vIHRhbmdlbnRpYWxcblxuICAgICAgICAgICAgaWYgKGxvY2FsbHlJbnNpZGUocCwgaG9sZSkgJiZcbiAgICAgICAgICAgICAgICAodGFuIDwgdGFuTWluIHx8ICh0YW4gPT09IHRhbk1pbiAmJiAocC54ID4gbS54IHx8IChwLnggPT09IG0ueCAmJiBzZWN0b3JDb250YWluc1NlY3RvcihtLCBwKSkpKSkpIHtcbiAgICAgICAgICAgICAgICBtID0gcDtcbiAgICAgICAgICAgICAgICB0YW5NaW4gPSB0YW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0b3ApO1xuXG4gICAgcmV0dXJuIG07XG59XG5cbi8vIHdoZXRoZXIgc2VjdG9yIGluIHZlcnRleCBtIGNvbnRhaW5zIHNlY3RvciBpbiB2ZXJ0ZXggcCBpbiB0aGUgc2FtZSBjb29yZGluYXRlc1xuZnVuY3Rpb24gc2VjdG9yQ29udGFpbnNTZWN0b3IobSwgcCkge1xuICAgIHJldHVybiBhcmVhKG0ucHJldiwgbSwgcC5wcmV2KSA8IDAgJiYgYXJlYShwLm5leHQsIG0sIG0ubmV4dCkgPCAwO1xufVxuXG4vLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5mdW5jdGlvbiBpbmRleEN1cnZlKHN0YXJ0LCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XG4gICAgdmFyIHAgPSBzdGFydDtcbiAgICBkbyB7XG4gICAgICAgIGlmIChwLnogPT09IG51bGwpIHAueiA9IHpPcmRlcihwLngsIHAueSwgbWluWCwgbWluWSwgaW52U2l6ZSk7XG4gICAgICAgIHAucHJldlogPSBwLnByZXY7XG4gICAgICAgIHAubmV4dFogPSBwLm5leHQ7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gc3RhcnQpO1xuXG4gICAgcC5wcmV2Wi5uZXh0WiA9IG51bGw7XG4gICAgcC5wcmV2WiA9IG51bGw7XG5cbiAgICBzb3J0TGlua2VkKHApO1xufVxuXG4vLyBTaW1vbiBUYXRoYW0ncyBsaW5rZWQgbGlzdCBtZXJnZSBzb3J0IGFsZ29yaXRobVxuLy8gaHR0cDovL3d3dy5jaGlhcmsuZ3JlZW5lbmQub3JnLnVrL35zZ3RhdGhhbS9hbGdvcml0aG1zL2xpc3Rzb3J0Lmh0bWxcbmZ1bmN0aW9uIHNvcnRMaW5rZWQobGlzdCkge1xuICAgIHZhciBpLCBwLCBxLCBlLCB0YWlsLCBudW1NZXJnZXMsIHBTaXplLCBxU2l6ZSxcbiAgICAgICAgaW5TaXplID0gMTtcblxuICAgIGRvIHtcbiAgICAgICAgcCA9IGxpc3Q7XG4gICAgICAgIGxpc3QgPSBudWxsO1xuICAgICAgICB0YWlsID0gbnVsbDtcbiAgICAgICAgbnVtTWVyZ2VzID0gMDtcblxuICAgICAgICB3aGlsZSAocCkge1xuICAgICAgICAgICAgbnVtTWVyZ2VzKys7XG4gICAgICAgICAgICBxID0gcDtcbiAgICAgICAgICAgIHBTaXplID0gMDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpblNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgIHBTaXplKys7XG4gICAgICAgICAgICAgICAgcSA9IHEubmV4dFo7XG4gICAgICAgICAgICAgICAgaWYgKCFxKSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHFTaXplID0gaW5TaXplO1xuXG4gICAgICAgICAgICB3aGlsZSAocFNpemUgPiAwIHx8IChxU2l6ZSA+IDAgJiYgcSkpIHtcblxuICAgICAgICAgICAgICAgIGlmIChwU2l6ZSAhPT0gMCAmJiAocVNpemUgPT09IDAgfHwgIXEgfHwgcC56IDw9IHEueikpIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IHA7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBwLm5leHRaO1xuICAgICAgICAgICAgICAgICAgICBwU2l6ZS0tO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGUgPSBxO1xuICAgICAgICAgICAgICAgICAgICBxID0gcS5uZXh0WjtcbiAgICAgICAgICAgICAgICAgICAgcVNpemUtLTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGFpbCkgdGFpbC5uZXh0WiA9IGU7XG4gICAgICAgICAgICAgICAgZWxzZSBsaXN0ID0gZTtcblxuICAgICAgICAgICAgICAgIGUucHJldlogPSB0YWlsO1xuICAgICAgICAgICAgICAgIHRhaWwgPSBlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwID0gcTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhaWwubmV4dFogPSBudWxsO1xuICAgICAgICBpblNpemUgKj0gMjtcblxuICAgIH0gd2hpbGUgKG51bU1lcmdlcyA+IDEpO1xuXG4gICAgcmV0dXJuIGxpc3Q7XG59XG5cbi8vIHotb3JkZXIgb2YgYSBwb2ludCBnaXZlbiBjb29yZHMgYW5kIGludmVyc2Ugb2YgdGhlIGxvbmdlciBzaWRlIG9mIGRhdGEgYmJveFxuZnVuY3Rpb24gek9yZGVyKHgsIHksIG1pblgsIG1pblksIGludlNpemUpIHtcbiAgICAvLyBjb29yZHMgYXJlIHRyYW5zZm9ybWVkIGludG8gbm9uLW5lZ2F0aXZlIDE1LWJpdCBpbnRlZ2VyIHJhbmdlXG4gICAgeCA9IDMyNzY3ICogKHggLSBtaW5YKSAqIGludlNpemU7XG4gICAgeSA9IDMyNzY3ICogKHkgLSBtaW5ZKSAqIGludlNpemU7XG5cbiAgICB4ID0gKHggfCAoeCA8PCA4KSkgJiAweDAwRkYwMEZGO1xuICAgIHggPSAoeCB8ICh4IDw8IDQpKSAmIDB4MEYwRjBGMEY7XG4gICAgeCA9ICh4IHwgKHggPDwgMikpICYgMHgzMzMzMzMzMztcbiAgICB4ID0gKHggfCAoeCA8PCAxKSkgJiAweDU1NTU1NTU1O1xuXG4gICAgeSA9ICh5IHwgKHkgPDwgOCkpICYgMHgwMEZGMDBGRjtcbiAgICB5ID0gKHkgfCAoeSA8PCA0KSkgJiAweDBGMEYwRjBGO1xuICAgIHkgPSAoeSB8ICh5IDw8IDIpKSAmIDB4MzMzMzMzMzM7XG4gICAgeSA9ICh5IHwgKHkgPDwgMSkpICYgMHg1NTU1NTU1NTtcblxuICAgIHJldHVybiB4IHwgKHkgPDwgMSk7XG59XG5cbi8vIGZpbmQgdGhlIGxlZnRtb3N0IG5vZGUgb2YgYSBwb2x5Z29uIHJpbmdcbmZ1bmN0aW9uIGdldExlZnRtb3N0KHN0YXJ0KSB7XG4gICAgdmFyIHAgPSBzdGFydCxcbiAgICAgICAgbGVmdG1vc3QgPSBzdGFydDtcbiAgICBkbyB7XG4gICAgICAgIGlmIChwLnggPCBsZWZ0bW9zdC54IHx8IChwLnggPT09IGxlZnRtb3N0LnggJiYgcC55IDwgbGVmdG1vc3QueSkpIGxlZnRtb3N0ID0gcDtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdGFydCk7XG5cbiAgICByZXR1cm4gbGVmdG1vc3Q7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9pbnQgbGllcyB3aXRoaW4gYSBjb252ZXggdHJpYW5nbGVcbmZ1bmN0aW9uIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBweCwgcHkpIHtcbiAgICByZXR1cm4gKGN4IC0gcHgpICogKGF5IC0gcHkpIC0gKGF4IC0gcHgpICogKGN5IC0gcHkpID49IDAgJiZcbiAgICAgICAgICAgKGF4IC0gcHgpICogKGJ5IC0gcHkpIC0gKGJ4IC0gcHgpICogKGF5IC0gcHkpID49IDAgJiZcbiAgICAgICAgICAgKGJ4IC0gcHgpICogKGN5IC0gcHkpIC0gKGN4IC0gcHgpICogKGJ5IC0gcHkpID49IDA7XG59XG5cbi8vIGNoZWNrIGlmIGEgZGlhZ29uYWwgYmV0d2VlbiB0d28gcG9seWdvbiBub2RlcyBpcyB2YWxpZCAobGllcyBpbiBwb2x5Z29uIGludGVyaW9yKVxuZnVuY3Rpb24gaXNWYWxpZERpYWdvbmFsKGEsIGIpIHtcbiAgICByZXR1cm4gYS5uZXh0LmkgIT09IGIuaSAmJiBhLnByZXYuaSAhPT0gYi5pICYmICFpbnRlcnNlY3RzUG9seWdvbihhLCBiKSAmJiAvLyBkb25lcyd0IGludGVyc2VjdCBvdGhlciBlZGdlc1xuICAgICAgICAgICAobG9jYWxseUluc2lkZShhLCBiKSAmJiBsb2NhbGx5SW5zaWRlKGIsIGEpICYmIG1pZGRsZUluc2lkZShhLCBiKSAmJiAvLyBsb2NhbGx5IHZpc2libGVcbiAgICAgICAgICAgIChhcmVhKGEucHJldiwgYSwgYi5wcmV2KSB8fCBhcmVhKGEsIGIucHJldiwgYikpIHx8IC8vIGRvZXMgbm90IGNyZWF0ZSBvcHBvc2l0ZS1mYWNpbmcgc2VjdG9yc1xuICAgICAgICAgICAgZXF1YWxzKGEsIGIpICYmIGFyZWEoYS5wcmV2LCBhLCBhLm5leHQpID4gMCAmJiBhcmVhKGIucHJldiwgYiwgYi5uZXh0KSA+IDApOyAvLyBzcGVjaWFsIHplcm8tbGVuZ3RoIGNhc2Vcbn1cblxuLy8gc2lnbmVkIGFyZWEgb2YgYSB0cmlhbmdsZVxuZnVuY3Rpb24gYXJlYShwLCBxLCByKSB7XG4gICAgcmV0dXJuIChxLnkgLSBwLnkpICogKHIueCAtIHEueCkgLSAocS54IC0gcC54KSAqIChyLnkgLSBxLnkpO1xufVxuXG4vLyBjaGVjayBpZiB0d28gcG9pbnRzIGFyZSBlcXVhbFxuZnVuY3Rpb24gZXF1YWxzKHAxLCBwMikge1xuICAgIHJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7XG59XG5cbi8vIGNoZWNrIGlmIHR3byBzZWdtZW50cyBpbnRlcnNlY3RcbmZ1bmN0aW9uIGludGVyc2VjdHMocDEsIHExLCBwMiwgcTIpIHtcbiAgICB2YXIgbzEgPSBzaWduKGFyZWEocDEsIHExLCBwMikpO1xuICAgIHZhciBvMiA9IHNpZ24oYXJlYShwMSwgcTEsIHEyKSk7XG4gICAgdmFyIG8zID0gc2lnbihhcmVhKHAyLCBxMiwgcDEpKTtcbiAgICB2YXIgbzQgPSBzaWduKGFyZWEocDIsIHEyLCBxMSkpO1xuXG4gICAgaWYgKG8xICE9PSBvMiAmJiBvMyAhPT0gbzQpIHJldHVybiB0cnVlOyAvLyBnZW5lcmFsIGNhc2VcblxuICAgIGlmIChvMSA9PT0gMCAmJiBvblNlZ21lbnQocDEsIHAyLCBxMSkpIHJldHVybiB0cnVlOyAvLyBwMSwgcTEgYW5kIHAyIGFyZSBjb2xsaW5lYXIgYW5kIHAyIGxpZXMgb24gcDFxMVxuICAgIGlmIChvMiA9PT0gMCAmJiBvblNlZ21lbnQocDEsIHEyLCBxMSkpIHJldHVybiB0cnVlOyAvLyBwMSwgcTEgYW5kIHEyIGFyZSBjb2xsaW5lYXIgYW5kIHEyIGxpZXMgb24gcDFxMVxuICAgIGlmIChvMyA9PT0gMCAmJiBvblNlZ21lbnQocDIsIHAxLCBxMikpIHJldHVybiB0cnVlOyAvLyBwMiwgcTIgYW5kIHAxIGFyZSBjb2xsaW5lYXIgYW5kIHAxIGxpZXMgb24gcDJxMlxuICAgIGlmIChvNCA9PT0gMCAmJiBvblNlZ21lbnQocDIsIHExLCBxMikpIHJldHVybiB0cnVlOyAvLyBwMiwgcTIgYW5kIHExIGFyZSBjb2xsaW5lYXIgYW5kIHExIGxpZXMgb24gcDJxMlxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBmb3IgY29sbGluZWFyIHBvaW50cyBwLCBxLCByLCBjaGVjayBpZiBwb2ludCBxIGxpZXMgb24gc2VnbWVudCBwclxuZnVuY3Rpb24gb25TZWdtZW50KHAsIHEsIHIpIHtcbiAgICByZXR1cm4gcS54IDw9IE1hdGgubWF4KHAueCwgci54KSAmJiBxLnggPj0gTWF0aC5taW4ocC54LCByLngpICYmIHEueSA8PSBNYXRoLm1heChwLnksIHIueSkgJiYgcS55ID49IE1hdGgubWluKHAueSwgci55KTtcbn1cblxuZnVuY3Rpb24gc2lnbihudW0pIHtcbiAgICByZXR1cm4gbnVtID4gMCA/IDEgOiBudW0gPCAwID8gLTEgOiAwO1xufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaW50ZXJzZWN0cyBhbnkgcG9seWdvbiBzZWdtZW50c1xuZnVuY3Rpb24gaW50ZXJzZWN0c1BvbHlnb24oYSwgYikge1xuICAgIHZhciBwID0gYTtcbiAgICBkbyB7XG4gICAgICAgIGlmIChwLmkgIT09IGEuaSAmJiBwLm5leHQuaSAhPT0gYS5pICYmIHAuaSAhPT0gYi5pICYmIHAubmV4dC5pICE9PSBiLmkgJiZcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3RzKHAsIHAubmV4dCwgYSwgYikpIHJldHVybiB0cnVlO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IGEpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgbG9jYWxseSBpbnNpZGUgdGhlIHBvbHlnb25cbmZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoYSwgYikge1xuICAgIHJldHVybiBhcmVhKGEucHJldiwgYSwgYS5uZXh0KSA8IDAgP1xuICAgICAgICBhcmVhKGEsIGIsIGEubmV4dCkgPj0gMCAmJiBhcmVhKGEsIGEucHJldiwgYikgPj0gMCA6XG4gICAgICAgIGFyZWEoYSwgYiwgYS5wcmV2KSA8IDAgfHwgYXJlYShhLCBhLm5leHQsIGIpIDwgMDtcbn1cblxuLy8gY2hlY2sgaWYgdGhlIG1pZGRsZSBwb2ludCBvZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgaW5zaWRlIHRoZSBwb2x5Z29uXG5mdW5jdGlvbiBtaWRkbGVJbnNpZGUoYSwgYikge1xuICAgIHZhciBwID0gYSxcbiAgICAgICAgaW5zaWRlID0gZmFsc2UsXG4gICAgICAgIHB4ID0gKGEueCArIGIueCkgLyAyLFxuICAgICAgICBweSA9IChhLnkgKyBiLnkpIC8gMjtcbiAgICBkbyB7XG4gICAgICAgIGlmICgoKHAueSA+IHB5KSAhPT0gKHAubmV4dC55ID4gcHkpKSAmJiBwLm5leHQueSAhPT0gcC55ICYmXG4gICAgICAgICAgICAgICAgKHB4IDwgKHAubmV4dC54IC0gcC54KSAqIChweSAtIHAueSkgLyAocC5uZXh0LnkgLSBwLnkpICsgcC54KSlcbiAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gYSk7XG5cbiAgICByZXR1cm4gaW5zaWRlO1xufVxuXG4vLyBsaW5rIHR3byBwb2x5Z29uIHZlcnRpY2VzIHdpdGggYSBicmlkZ2U7IGlmIHRoZSB2ZXJ0aWNlcyBiZWxvbmcgdG8gdGhlIHNhbWUgcmluZywgaXQgc3BsaXRzIHBvbHlnb24gaW50byB0d287XG4vLyBpZiBvbmUgYmVsb25ncyB0byB0aGUgb3V0ZXIgcmluZyBhbmQgYW5vdGhlciB0byBhIGhvbGUsIGl0IG1lcmdlcyBpdCBpbnRvIGEgc2luZ2xlIHJpbmdcbmZ1bmN0aW9uIHNwbGl0UG9seWdvbihhLCBiKSB7XG4gICAgdmFyIGEyID0gbmV3IE5vZGUoYS5pLCBhLngsIGEueSksXG4gICAgICAgIGIyID0gbmV3IE5vZGUoYi5pLCBiLngsIGIueSksXG4gICAgICAgIGFuID0gYS5uZXh0LFxuICAgICAgICBicCA9IGIucHJldjtcblxuICAgIGEubmV4dCA9IGI7XG4gICAgYi5wcmV2ID0gYTtcblxuICAgIGEyLm5leHQgPSBhbjtcbiAgICBhbi5wcmV2ID0gYTI7XG5cbiAgICBiMi5uZXh0ID0gYTI7XG4gICAgYTIucHJldiA9IGIyO1xuXG4gICAgYnAubmV4dCA9IGIyO1xuICAgIGIyLnByZXYgPSBicDtcblxuICAgIHJldHVybiBiMjtcbn1cblxuLy8gY3JlYXRlIGEgbm9kZSBhbmQgb3B0aW9uYWxseSBsaW5rIGl0IHdpdGggcHJldmlvdXMgb25lIChpbiBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdClcbmZ1bmN0aW9uIGluc2VydE5vZGUoaSwgeCwgeSwgbGFzdCkge1xuICAgIHZhciBwID0gbmV3IE5vZGUoaSwgeCwgeSk7XG5cbiAgICBpZiAoIWxhc3QpIHtcbiAgICAgICAgcC5wcmV2ID0gcDtcbiAgICAgICAgcC5uZXh0ID0gcDtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIHAubmV4dCA9IGxhc3QubmV4dDtcbiAgICAgICAgcC5wcmV2ID0gbGFzdDtcbiAgICAgICAgbGFzdC5uZXh0LnByZXYgPSBwO1xuICAgICAgICBsYXN0Lm5leHQgPSBwO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTm9kZShwKSB7XG4gICAgcC5uZXh0LnByZXYgPSBwLnByZXY7XG4gICAgcC5wcmV2Lm5leHQgPSBwLm5leHQ7XG5cbiAgICBpZiAocC5wcmV2WikgcC5wcmV2Wi5uZXh0WiA9IHAubmV4dFo7XG4gICAgaWYgKHAubmV4dFopIHAubmV4dFoucHJldlogPSBwLnByZXZaO1xufVxuXG5mdW5jdGlvbiBOb2RlKGksIHgsIHkpIHtcbiAgICAvLyB2ZXJ0ZXggaW5kZXggaW4gY29vcmRpbmF0ZXMgYXJyYXlcbiAgICB0aGlzLmkgPSBpO1xuXG4gICAgLy8gdmVydGV4IGNvb3JkaW5hdGVzXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuXG4gICAgLy8gcHJldmlvdXMgYW5kIG5leHQgdmVydGV4IG5vZGVzIGluIGEgcG9seWdvbiByaW5nXG4gICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICB0aGlzLm5leHQgPSBudWxsO1xuXG4gICAgLy8gei1vcmRlciBjdXJ2ZSB2YWx1ZVxuICAgIHRoaXMueiA9IG51bGw7XG5cbiAgICAvLyBwcmV2aW91cyBhbmQgbmV4dCBub2RlcyBpbiB6LW9yZGVyXG4gICAgdGhpcy5wcmV2WiA9IG51bGw7XG4gICAgdGhpcy5uZXh0WiA9IG51bGw7XG5cbiAgICAvLyBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIGlzIGEgc3RlaW5lciBwb2ludFxuICAgIHRoaXMuc3RlaW5lciA9IGZhbHNlO1xufVxuXG4vLyByZXR1cm4gYSBwZXJjZW50YWdlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgcG9seWdvbiBhcmVhIGFuZCBpdHMgdHJpYW5ndWxhdGlvbiBhcmVhO1xuLy8gdXNlZCB0byB2ZXJpZnkgY29ycmVjdG5lc3Mgb2YgdHJpYW5ndWxhdGlvblxuZWFyY3V0LmRldmlhdGlvbiA9IGZ1bmN0aW9uIChkYXRhLCBob2xlSW5kaWNlcywgZGltLCB0cmlhbmdsZXMpIHtcbiAgICB2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGg7XG4gICAgdmFyIG91dGVyTGVuID0gaGFzSG9sZXMgPyBob2xlSW5kaWNlc1swXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuXG4gICAgdmFyIHBvbHlnb25BcmVhID0gTWF0aC5hYnMoc2lnbmVkQXJlYShkYXRhLCAwLCBvdXRlckxlbiwgZGltKSk7XG4gICAgaWYgKGhhc0hvbGVzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBob2xlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07XG4gICAgICAgICAgICB2YXIgZW5kID0gaSA8IGxlbiAtIDEgPyBob2xlSW5kaWNlc1tpICsgMV0gKiBkaW0gOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIHBvbHlnb25BcmVhIC09IE1hdGguYWJzKHNpZ25lZEFyZWEoZGF0YSwgc3RhcnQsIGVuZCwgZGltKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdHJpYW5nbGVzQXJlYSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB2YXIgYSA9IHRyaWFuZ2xlc1tpXSAqIGRpbTtcbiAgICAgICAgdmFyIGIgPSB0cmlhbmdsZXNbaSArIDFdICogZGltO1xuICAgICAgICB2YXIgYyA9IHRyaWFuZ2xlc1tpICsgMl0gKiBkaW07XG4gICAgICAgIHRyaWFuZ2xlc0FyZWEgKz0gTWF0aC5hYnMoXG4gICAgICAgICAgICAoZGF0YVthXSAtIGRhdGFbY10pICogKGRhdGFbYiArIDFdIC0gZGF0YVthICsgMV0pIC1cbiAgICAgICAgICAgIChkYXRhW2FdIC0gZGF0YVtiXSkgKiAoZGF0YVtjICsgMV0gLSBkYXRhW2EgKyAxXSkpO1xuICAgIH1cblxuICAgIHJldHVybiBwb2x5Z29uQXJlYSA9PT0gMCAmJiB0cmlhbmdsZXNBcmVhID09PSAwID8gMCA6XG4gICAgICAgIE1hdGguYWJzKCh0cmlhbmdsZXNBcmVhIC0gcG9seWdvbkFyZWEpIC8gcG9seWdvbkFyZWEpO1xufTtcblxuZnVuY3Rpb24gc2lnbmVkQXJlYShkYXRhLCBzdGFydCwgZW5kLCBkaW0pIHtcbiAgICB2YXIgc3VtID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQsIGogPSBlbmQgLSBkaW07IGkgPCBlbmQ7IGkgKz0gZGltKSB7XG4gICAgICAgIHN1bSArPSAoZGF0YVtqXSAtIGRhdGFbaV0pICogKGRhdGFbaSArIDFdICsgZGF0YVtqICsgMV0pO1xuICAgICAgICBqID0gaTtcbiAgICB9XG4gICAgcmV0dXJuIHN1bTtcbn1cblxuLy8gdHVybiBhIHBvbHlnb24gaW4gYSBtdWx0aS1kaW1lbnNpb25hbCBhcnJheSBmb3JtIChlLmcuIGFzIGluIEdlb0pTT04pIGludG8gYSBmb3JtIEVhcmN1dCBhY2NlcHRzXG5lYXJjdXQuZmxhdHRlbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGRpbSA9IGRhdGFbMF1bMF0ubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSB7dmVydGljZXM6IFtdLCBob2xlczogW10sIGRpbWVuc2lvbnM6IGRpbX0sXG4gICAgICAgIGhvbGVJbmRleCA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkYXRhW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRpbTsgZCsrKSByZXN1bHQudmVydGljZXMucHVzaChkYXRhW2ldW2pdW2RdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgIGhvbGVJbmRleCArPSBkYXRhW2kgLSAxXS5sZW5ndGg7XG4gICAgICAgICAgICByZXN1bHQuaG9sZXMucHVzaChob2xlSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS40LjEgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJlxuXHRcdCFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHQhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKFxuXHRcdGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLnNlbGYgPT09IGZyZWVHbG9iYWxcblx0KSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGBwdW55Y29kZWAgb2JqZWN0LlxuXHQgKiBAbmFtZSBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdHZhciBwdW55Y29kZSxcblxuXHQvKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5cdG1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuXHQvKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG5cdGJhc2UgPSAzNixcblx0dE1pbiA9IDEsXG5cdHRNYXggPSAyNixcblx0c2tldyA9IDM4LFxuXHRkYW1wID0gNzAwLFxuXHRpbml0aWFsQmlhcyA9IDcyLFxuXHRpbml0aWFsTiA9IDEyOCwgLy8gMHg4MFxuXHRkZWxpbWl0ZXIgPSAnLScsIC8vICdcXHgyRCdcblxuXHQvKiogUmVndWxhciBleHByZXNzaW9ucyAqL1xuXHRyZWdleFB1bnljb2RlID0gL154bi0tLyxcblx0cmVnZXhOb25BU0NJSSA9IC9bXlxceDIwLVxceDdFXS8sIC8vIHVucHJpbnRhYmxlIEFTQ0lJIGNoYXJzICsgbm9uLUFTQ0lJIGNoYXJzXG5cdHJlZ2V4U2VwYXJhdG9ycyA9IC9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2csIC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcblxuXHQvKiogRXJyb3IgbWVzc2FnZXMgKi9cblx0ZXJyb3JzID0ge1xuXHRcdCdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG5cdFx0J25vdC1iYXNpYyc6ICdJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpJyxcblx0XHQnaW52YWxpZC1pbnB1dCc6ICdJbnZhbGlkIGlucHV0J1xuXHR9LFxuXG5cdC8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi9cblx0YmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluLFxuXHRmbG9vciA9IE1hdGguZmxvb3IsXG5cdHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUsXG5cblx0LyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqL1xuXHRrZXk7XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBlcnJvciB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cblx0ICogQHJldHVybnMge0Vycm9yfSBUaHJvd3MgYSBgUmFuZ2VFcnJvcmAgd2l0aCB0aGUgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlLlxuXHQgKi9cblx0ZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuXHRcdHRocm93IG5ldyBSYW5nZUVycm9yKGVycm9yc1t0eXBlXSk7XG5cdH1cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGBBcnJheSNtYXBgIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeSBhcnJheVxuXHQgKiBpdGVtLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IG9mIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXAoYXJyYXksIGZuKSB7XG5cdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0d2hpbGUgKGxlbmd0aC0tKSB7XG5cdFx0XHRyZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgc2ltcGxlIGBBcnJheSNtYXBgLWxpa2Ugd3JhcHBlciB0byB3b3JrIHdpdGggZG9tYWluIG5hbWUgc3RyaW5ncyBvciBlbWFpbFxuXHQgKiBhZGRyZXNzZXMuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeVxuXHQgKiBjaGFyYWN0ZXIuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgc3RyaW5nIG9mIGNoYXJhY3RlcnMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrXG5cdCAqIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwRG9tYWluKHN0cmluZywgZm4pIHtcblx0XHR2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoJ0AnKTtcblx0XHR2YXIgcmVzdWx0ID0gJyc7XG5cdFx0aWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdC8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmVcblx0XHRcdC8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuXG5cdFx0XHRyZXN1bHQgPSBwYXJ0c1swXSArICdAJztcblx0XHRcdHN0cmluZyA9IHBhcnRzWzFdO1xuXHRcdH1cblx0XHQvLyBBdm9pZCBgc3BsaXQocmVnZXgpYCBmb3IgSUU4IGNvbXBhdGliaWxpdHkuIFNlZSAjMTcuXG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx4MkUnKTtcblx0XHR2YXIgbGFiZWxzID0gc3RyaW5nLnNwbGl0KCcuJyk7XG5cdFx0dmFyIGVuY29kZWQgPSBtYXAobGFiZWxzLCBmbikuam9pbignLicpO1xuXHRcdHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcblx0ICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuXHQgKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuXHQgKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcblx0ICogbWF0Y2hpbmcgVVRGLTE2LlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmVuY29kZWBcblx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGRlY29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgY291bnRlciA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICBleHRyYTtcblx0XHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZW5jb2RlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBuZXcgVW5pY29kZSBzdHJpbmcgKFVDUy0yKS5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHRyZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0fSkuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLlxuXHQgKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZlxuXHQgKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHtcblx0XHRpZiAoY29kZVBvaW50IC0gNDggPCAxMCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDIyO1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gNjUgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDY1O1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gOTcgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDk3O1xuXHRcdH1cblx0XHRyZXR1cm4gYmFzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gZGlnaXQgVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZVxuXHQgKiBgMGAgdG8gYGJhc2UgLSAxYC4gSWYgYGZsYWdgIGlzIG5vbi16ZXJvLCB0aGUgdXBwZXJjYXNlIGZvcm0gaXNcblx0ICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcblx0ICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS5cblx0ICovXG5cdGZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuXHRcdC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG5cdFx0Ly8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG5cdFx0cmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuXHQgKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdFx0dmFyIGsgPSAwO1xuXHRcdGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG5cdFx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRcdGZvciAoLyogbm8gaW5pdGlhbGl6YXRpb24gKi87IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG5cdFx0XHRkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG5cdFx0fVxuXHRcdHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHRcdC8vIERvbid0IHVzZSBVQ1MtMlxuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG5cdFx0ICAgIG91dCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIG4gPSBpbml0aWFsTixcblx0XHQgICAgYmlhcyA9IGluaXRpYWxCaWFzLFxuXHRcdCAgICBiYXNpYyxcblx0XHQgICAgaixcblx0XHQgICAgaW5kZXgsXG5cdFx0ICAgIG9sZGksXG5cdFx0ICAgIHcsXG5cdFx0ICAgIGssXG5cdFx0ICAgIGRpZ2l0LFxuXHRcdCAgICB0LFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgYmFzZU1pbnVzVDtcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHM6IGxldCBgYmFzaWNgIGJlIHRoZSBudW1iZXIgb2YgaW5wdXQgY29kZVxuXHRcdC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG5cdFx0Ly8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cblx0XHRiYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7XG5cdFx0aWYgKGJhc2ljIDwgMCkge1xuXHRcdFx0YmFzaWMgPSAwO1xuXHRcdH1cblxuXHRcdGZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7XG5cdFx0XHQvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcblx0XHRcdGlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHtcblx0XHRcdFx0ZXJyb3IoJ25vdC1iYXNpYycpO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZVxuXHRcdC8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuXG5cblx0XHRmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLykge1xuXG5cdFx0XHQvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuXG5cdFx0XHQvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG5cdFx0XHQvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuXHRcdFx0Ly8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmdcblx0XHRcdC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG5cdFx0XHRmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cblx0XHRcdFx0aWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGkgKz0gZGlnaXQgKiB3O1xuXHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPCB0KSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblxuXHRcdFx0fVxuXG5cdFx0XHRvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTtcblx0XHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0XHQvLyBgaWAgd2FzIHN1cHBvc2VkIHRvIHdyYXAgYXJvdW5kIGZyb20gYG91dGAgdG8gYDBgLFxuXHRcdFx0Ly8gaW5jcmVtZW50aW5nIGBuYCBlYWNoIHRpbWUsIHNvIHdlJ2xsIGZpeCB0aGF0IG5vdzpcblx0XHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdG4gKz0gZmxvb3IoaSAvIG91dCk7XG5cdFx0XHRpICU9IG91dDtcblxuXHRcdFx0Ly8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dFxuXHRcdFx0b3V0cHV0LnNwbGljZShpKyssIDAsIG4pO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuXHQgKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcblx0XHR2YXIgbixcblx0XHQgICAgZGVsdGEsXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50LFxuXHRcdCAgICBiYXNpY0xlbmd0aCxcblx0XHQgICAgYmlhcyxcblx0XHQgICAgaixcblx0XHQgICAgbSxcblx0XHQgICAgcSxcblx0XHQgICAgayxcblx0XHQgICAgdCxcblx0XHQgICAgY3VycmVudFZhbHVlLFxuXHRcdCAgICBvdXRwdXQgPSBbXSxcblx0XHQgICAgLyoqIGBpbnB1dExlbmd0aGAgd2lsbCBob2xkIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgaW4gYGlucHV0YC4gKi9cblx0XHQgICAgaW5wdXRMZW5ndGgsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsXG5cdFx0ICAgIGJhc2VNaW51c1QsXG5cdFx0ICAgIHFNaW51c1Q7XG5cblx0XHQvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBVbmljb2RlXG5cdFx0aW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuXHRcdC8vIENhY2hlIHRoZSBsZW5ndGhcblx0XHRpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuXHRcdC8vIEluaXRpYWxpemUgdGhlIHN0YXRlXG5cdFx0biA9IGluaXRpYWxOO1xuXHRcdGRlbHRhID0gMDtcblx0XHRiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzXG5cdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcblx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXG5cdFx0Ly8gYGhhbmRsZWRDUENvdW50YCBpcyB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cdFx0Ly8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG5cdFx0Ly8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgLSBpZiBpdCBpcyBub3QgZW1wdHkgLSB3aXRoIGEgZGVsaW1pdGVyXG5cdFx0aWYgKGJhc2ljTGVuZ3RoKSB7XG5cdFx0XHRvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcblx0XHR3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG5cdFx0XHQvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG5cdFx0XHQvLyBsYXJnZXIgb25lOlxuXHRcdFx0Zm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG5cdFx0XHRcdFx0bSA9IGN1cnJlbnRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG5cdFx0XHQvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvd1xuXHRcdFx0aGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuXHRcdFx0aWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG5cdFx0XHRuID0gbTtcblxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG5cdFx0XHRcdFx0Ly8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXJcblx0XHRcdFx0XHRmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cdFx0XHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblx0XHRcdFx0XHRcdGlmIChxIDwgdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHFNaW51c1QgPSBxIC0gdDtcblx0XHRcdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKFxuXHRcdFx0XHRcdFx0XHRzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7XG5cdFx0XHRcdFx0YmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcblx0XHRcdFx0XHRkZWx0YSA9IDA7XG5cdFx0XHRcdFx0KytoYW5kbGVkQ1BDb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQrK2RlbHRhO1xuXHRcdFx0KytuO1xuXG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzc1xuXHQgKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuXG5cdCAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuXHQgKiBjb252ZXJ0ZWQgdG8gVW5pY29kZS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogY29udmVydCB0byBVbmljb2RlLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcblx0ICogc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgVW5pY29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcblx0ICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluXG5cdCAqIEFTQ0lJLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGFcblx0ICogVW5pY29kZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3Jcblx0ICogZW1haWwgYWRkcmVzcy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xuXHRwdW55Y29kZSA9IHtcblx0XHQvKipcblx0XHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICovXG5cdFx0J3ZlcnNpb24nOiAnMS40LjEnLFxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG5cdFx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0XHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBPYmplY3Rcblx0XHQgKi9cblx0XHQndWNzMic6IHtcblx0XHRcdCdkZWNvZGUnOiB1Y3MyZGVjb2RlLFxuXHRcdFx0J2VuY29kZSc6IHVjczJlbmNvZGVcblx0XHR9LFxuXHRcdCdkZWNvZGUnOiBkZWNvZGUsXG5cdFx0J2VuY29kZSc6IGVuY29kZSxcblx0XHQndG9BU0NJSSc6IHRvQVNDSUksXG5cdFx0J3RvVW5pY29kZSc6IHRvVW5pY29kZVxuXHR9O1xuXG5cdC8qKiBFeHBvc2UgYHB1bnljb2RlYCAqL1xuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZSgncHVueWNvZGUnLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBwdW55Y29kZTtcblx0XHR9KTtcblx0fSBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG5cdFx0aWYgKG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzKSB7XG5cdFx0XHQvLyBpbiBOb2RlLmpzLCBpby5qcywgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdGZvciAoa2V5IGluIHB1bnljb2RlKSB7XG5cdFx0XHRcdHB1bnljb2RlLmhhc093blByb3BlcnR5KGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBwdW55Y29kZVtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Ly8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KHRoaXMpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3RyaW5nOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdzdHJpbmcnO1xuICB9LFxuICBpc09iamVjdDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT0gbnVsbDtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBtYXAob2JqZWN0S2V5cyhvYmopLCBmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gbWFwKG9ialtrXSwgZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuZnVuY3Rpb24gbWFwICh4cywgZikge1xuICBpZiAoeHMubWFwKSByZXR1cm4geHMubWFwKGYpO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXMucHVzaChmKHhzW2ldLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5PUk1fMkQgPSAxLjAgLyA0Ny4wO1xuZXhwb3J0cy5OT1JNXzNEID0gMS4wIC8gMTAzLjA7XG5leHBvcnRzLk5PUk1fNEQgPSAxLjAgLyAzMC4wO1xuZXhwb3J0cy5TUVVJU0hfMkQgPSAoTWF0aC5zcXJ0KDIgKyAxKSAtIDEpIC8gMjtcbmV4cG9ydHMuU1FVSVNIXzNEID0gKE1hdGguc3FydCgzICsgMSkgLSAxKSAvIDM7XG5leHBvcnRzLlNRVUlTSF80RCA9IChNYXRoLnNxcnQoNCArIDEpIC0gMSkgLyA0O1xuZXhwb3J0cy5TVFJFVENIXzJEID0gKDEgLyBNYXRoLnNxcnQoMiArIDEpIC0gMSkgLyAyO1xuZXhwb3J0cy5TVFJFVENIXzNEID0gKDEgLyBNYXRoLnNxcnQoMyArIDEpIC0gMSkgLyAzO1xuZXhwb3J0cy5TVFJFVENIXzREID0gKDEgLyBNYXRoLnNxcnQoNCArIDEpIC0gMSkgLyA0O1xuZXhwb3J0cy5iYXNlMkQgPSBbXG4gICAgWzEsIDEsIDAsIDEsIDAsIDEsIDAsIDAsIDBdLFxuICAgIFsxLCAxLCAwLCAxLCAwLCAxLCAyLCAxLCAxXVxuXTtcbmV4cG9ydHMuYmFzZTNEID0gW1xuICAgIFswLCAwLCAwLCAwLCAxLCAxLCAwLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAwLCAxXSxcbiAgICBbMiwgMSwgMSwgMCwgMiwgMSwgMCwgMSwgMiwgMCwgMSwgMSwgMywgMSwgMSwgMV0sXG4gICAgWzEsIDEsIDAsIDAsIDEsIDAsIDEsIDAsIDEsIDAsIDAsIDEsIDIsIDEsIDEsIDAsIDIsIDEsIDAsIDEsIDIsIDAsIDEsIDFdXG5dO1xuZXhwb3J0cy5iYXNlNEQgPSBbXG4gICAgWzAsIDAsIDAsIDAsIDAsIDEsIDEsIDAsIDAsIDAsIDEsIDAsIDEsIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDEsIDAsIDAsIDAsIDFdLFxuICAgIFszLCAxLCAxLCAxLCAwLCAzLCAxLCAxLCAwLCAxLCAzLCAxLCAwLCAxLCAxLCAzLCAwLCAxLCAxLCAxLCA0LCAxLCAxLCAxLCAxXSxcbiAgICBbXG4gICAgICAgIDEsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDIsXG4gICAgICAgIDEsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDIsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDIsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDIsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDIsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDIsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDFcbiAgICBdLFxuICAgIFtcbiAgICAgICAgMyxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMyxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMyxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMyxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMixcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMixcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMixcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMixcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMixcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMixcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMVxuICAgIF1cbl07XG5leHBvcnRzLmdyYWRpZW50czJEID0gW1xuICAgIDUsXG4gICAgMixcbiAgICAyLFxuICAgIDUsXG4gICAgLTUsXG4gICAgMixcbiAgICAtMixcbiAgICA1LFxuICAgIDUsXG4gICAgLTIsXG4gICAgMixcbiAgICAtNSxcbiAgICAtNSxcbiAgICAtMixcbiAgICAtMixcbiAgICAtNVxuXTtcbmV4cG9ydHMuZ3JhZGllbnRzM0QgPSBbXG4gICAgLTExLFxuICAgIDQsXG4gICAgNCxcbiAgICAtNCxcbiAgICAxMSxcbiAgICA0LFxuICAgIC00LFxuICAgIDQsXG4gICAgMTEsXG4gICAgMTEsXG4gICAgNCxcbiAgICA0LFxuICAgIDQsXG4gICAgMTEsXG4gICAgNCxcbiAgICA0LFxuICAgIDQsXG4gICAgMTEsXG4gICAgLTExLFxuICAgIC00LFxuICAgIDQsXG4gICAgLTQsXG4gICAgLTExLFxuICAgIDQsXG4gICAgLTQsXG4gICAgLTQsXG4gICAgMTEsXG4gICAgMTEsXG4gICAgLTQsXG4gICAgNCxcbiAgICA0LFxuICAgIC0xMSxcbiAgICA0LFxuICAgIDQsXG4gICAgLTQsXG4gICAgMTEsXG4gICAgLTExLFxuICAgIDQsXG4gICAgLTQsXG4gICAgLTQsXG4gICAgMTEsXG4gICAgLTQsXG4gICAgLTQsXG4gICAgNCxcbiAgICAtMTEsXG4gICAgMTEsXG4gICAgNCxcbiAgICAtNCxcbiAgICA0LFxuICAgIDExLFxuICAgIC00LFxuICAgIDQsXG4gICAgNCxcbiAgICAtMTEsXG4gICAgLTExLFxuICAgIC00LFxuICAgIC00LFxuICAgIC00LFxuICAgIC0xMSxcbiAgICAtNCxcbiAgICAtNCxcbiAgICAtNCxcbiAgICAtMTEsXG4gICAgMTEsXG4gICAgLTQsXG4gICAgLTQsXG4gICAgNCxcbiAgICAtMTEsXG4gICAgLTQsXG4gICAgNCxcbiAgICAtNCxcbiAgICAtMTFcbl07XG5leHBvcnRzLmdyYWRpZW50czREID0gW1xuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgLTMsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgLTMsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0zLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAzLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAzLFxuICAgIDMsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAzLFxuICAgIC0zLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAzLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAtMyxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMyxcbiAgICAzLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTMsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDMsXG4gICAgLTMsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAtMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0zLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMyxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMyxcbiAgICAtMyxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMyxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTMsXG4gICAgMyxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTMsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgLTEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0zLFxuICAgIC0zLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgLTMsXG4gICAgMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAzLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTMsXG4gICAgMyxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTMsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIC0zLFxuICAgIC0zLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0zLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTMsXG4gICAgMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIC0zLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDEsXG4gICAgLTEsXG4gICAgLTMsXG4gICAgLTEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMyxcbiAgICAtMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMyxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAtM1xuXTtcbmV4cG9ydHMubG9va3VwUGFpcnMyRCA9IFtcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDQsXG4gICAgMSxcbiAgICAxNyxcbiAgICAwLFxuICAgIDIwLFxuICAgIDIsXG4gICAgMjEsXG4gICAgMixcbiAgICAyMixcbiAgICA1LFxuICAgIDIzLFxuICAgIDUsXG4gICAgMjYsXG4gICAgNCxcbiAgICAzOSxcbiAgICAzLFxuICAgIDQyLFxuICAgIDQsXG4gICAgNDMsXG4gICAgM1xuXTtcbmV4cG9ydHMubG9va3VwUGFpcnMzRCA9IFtcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICA1LFxuICAgIDEsXG4gICAgNixcbiAgICAwLFxuICAgIDcsXG4gICAgMCxcbiAgICAzMixcbiAgICAyLFxuICAgIDM0LFxuICAgIDIsXG4gICAgMTI5LFxuICAgIDEsXG4gICAgMTMzLFxuICAgIDEsXG4gICAgMTYwLFxuICAgIDUsXG4gICAgMTYxLFxuICAgIDUsXG4gICAgNTE4LFxuICAgIDAsXG4gICAgNTE5LFxuICAgIDAsXG4gICAgNTQ2LFxuICAgIDQsXG4gICAgNTUwLFxuICAgIDQsXG4gICAgNjQ1LFxuICAgIDMsXG4gICAgNjQ3LFxuICAgIDMsXG4gICAgNjcyLFxuICAgIDUsXG4gICAgNjczLFxuICAgIDUsXG4gICAgNjc0LFxuICAgIDQsXG4gICAgNjc3LFxuICAgIDMsXG4gICAgNjc4LFxuICAgIDQsXG4gICAgNjc5LFxuICAgIDMsXG4gICAgNjgwLFxuICAgIDEzLFxuICAgIDY4MSxcbiAgICAxMyxcbiAgICA2ODIsXG4gICAgMTIsXG4gICAgNjg1LFxuICAgIDE0LFxuICAgIDY4NixcbiAgICAxMixcbiAgICA2ODcsXG4gICAgMTQsXG4gICAgNzEyLFxuICAgIDIwLFxuICAgIDcxNCxcbiAgICAxOCxcbiAgICA4MDksXG4gICAgMjEsXG4gICAgODEzLFxuICAgIDIzLFxuICAgIDg0MCxcbiAgICAyMCxcbiAgICA4NDEsXG4gICAgMjEsXG4gICAgMTE5OCxcbiAgICAxOSxcbiAgICAxMTk5LFxuICAgIDIyLFxuICAgIDEyMjYsXG4gICAgMTgsXG4gICAgMTIzMCxcbiAgICAxOSxcbiAgICAxMzI1LFxuICAgIDIzLFxuICAgIDEzMjcsXG4gICAgMjIsXG4gICAgMTM1MixcbiAgICAxNSxcbiAgICAxMzUzLFxuICAgIDE3LFxuICAgIDEzNTQsXG4gICAgMTUsXG4gICAgMTM1NyxcbiAgICAxNyxcbiAgICAxMzU4LFxuICAgIDE2LFxuICAgIDEzNTksXG4gICAgMTYsXG4gICAgMTM2MCxcbiAgICAxMSxcbiAgICAxMzYxLFxuICAgIDEwLFxuICAgIDEzNjIsXG4gICAgMTEsXG4gICAgMTM2NSxcbiAgICAxMCxcbiAgICAxMzY2LFxuICAgIDksXG4gICAgMTM2NyxcbiAgICA5LFxuICAgIDEzOTIsXG4gICAgMTEsXG4gICAgMTM5NCxcbiAgICAxMSxcbiAgICAxNDg5LFxuICAgIDEwLFxuICAgIDE0OTMsXG4gICAgMTAsXG4gICAgMTUyMCxcbiAgICA4LFxuICAgIDE1MjEsXG4gICAgOCxcbiAgICAxODc4LFxuICAgIDksXG4gICAgMTg3OSxcbiAgICA5LFxuICAgIDE5MDYsXG4gICAgNyxcbiAgICAxOTEwLFxuICAgIDcsXG4gICAgMjAwNSxcbiAgICA2LFxuICAgIDIwMDcsXG4gICAgNixcbiAgICAyMDMyLFxuICAgIDgsXG4gICAgMjAzMyxcbiAgICA4LFxuICAgIDIwMzQsXG4gICAgNyxcbiAgICAyMDM3LFxuICAgIDYsXG4gICAgMjAzOCxcbiAgICA3LFxuICAgIDIwMzksXG4gICAgNlxuXTtcbmV4cG9ydHMubG9va3VwUGFpcnM0RCA9IFtcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICA1LFxuICAgIDIsXG4gICAgNixcbiAgICAxLFxuICAgIDcsXG4gICAgMSxcbiAgICA4LFxuICAgIDMsXG4gICAgOSxcbiAgICAyLFxuICAgIDEwLFxuICAgIDMsXG4gICAgMTMsXG4gICAgMixcbiAgICAxNixcbiAgICAzLFxuICAgIDE4LFxuICAgIDMsXG4gICAgMjIsXG4gICAgMSxcbiAgICAyMyxcbiAgICAxLFxuICAgIDI0LFxuICAgIDMsXG4gICAgMjYsXG4gICAgMyxcbiAgICAzMyxcbiAgICAyLFxuICAgIDM3LFxuICAgIDIsXG4gICAgMzgsXG4gICAgMSxcbiAgICAzOSxcbiAgICAxLFxuICAgIDQxLFxuICAgIDIsXG4gICAgNDUsXG4gICAgMixcbiAgICA1NCxcbiAgICAxLFxuICAgIDU1LFxuICAgIDEsXG4gICAgNTYsXG4gICAgMCxcbiAgICA1NyxcbiAgICAwLFxuICAgIDU4LFxuICAgIDAsXG4gICAgNTksXG4gICAgMCxcbiAgICA2MCxcbiAgICAwLFxuICAgIDYxLFxuICAgIDAsXG4gICAgNjIsXG4gICAgMCxcbiAgICA2MyxcbiAgICAwLFxuICAgIDI1NixcbiAgICAzLFxuICAgIDI1OCxcbiAgICAzLFxuICAgIDI2NCxcbiAgICAzLFxuICAgIDI2NixcbiAgICAzLFxuICAgIDI3MixcbiAgICAzLFxuICAgIDI3NCxcbiAgICAzLFxuICAgIDI4MCxcbiAgICAzLFxuICAgIDI4MixcbiAgICAzLFxuICAgIDIwNDksXG4gICAgMixcbiAgICAyMDUzLFxuICAgIDIsXG4gICAgMjA1NyxcbiAgICAyLFxuICAgIDIwNjEsXG4gICAgMixcbiAgICAyMDgxLFxuICAgIDIsXG4gICAgMjA4NSxcbiAgICAyLFxuICAgIDIwODksXG4gICAgMixcbiAgICAyMDkzLFxuICAgIDIsXG4gICAgMjMwNCxcbiAgICA5LFxuICAgIDIzMDUsXG4gICAgOSxcbiAgICAyMzEyLFxuICAgIDksXG4gICAgMjMxMyxcbiAgICA5LFxuICAgIDE2MzkwLFxuICAgIDEsXG4gICAgMTYzOTEsXG4gICAgMSxcbiAgICAxNjQwNixcbiAgICAxLFxuICAgIDE2NDA3LFxuICAgIDEsXG4gICAgMTY0MjIsXG4gICAgMSxcbiAgICAxNjQyMyxcbiAgICAxLFxuICAgIDE2NDM4LFxuICAgIDEsXG4gICAgMTY0MzksXG4gICAgMSxcbiAgICAxNjY0MixcbiAgICA4LFxuICAgIDE2NjQ2LFxuICAgIDgsXG4gICAgMTY2NTgsXG4gICAgOCxcbiAgICAxNjY2MixcbiAgICA4LFxuICAgIDE4NDM3LFxuICAgIDYsXG4gICAgMTg0MzksXG4gICAgNixcbiAgICAxODQ2OSxcbiAgICA2LFxuICAgIDE4NDcxLFxuICAgIDYsXG4gICAgMTg2ODgsXG4gICAgOSxcbiAgICAxODY4OSxcbiAgICA5LFxuICAgIDE4NjkwLFxuICAgIDgsXG4gICAgMTg2OTMsXG4gICAgNixcbiAgICAxODY5NCxcbiAgICA4LFxuICAgIDE4Njk1LFxuICAgIDYsXG4gICAgMTg2OTYsXG4gICAgOSxcbiAgICAxODY5NyxcbiAgICA5LFxuICAgIDE4NzA2LFxuICAgIDgsXG4gICAgMTg3MTAsXG4gICAgOCxcbiAgICAxODcyNSxcbiAgICA2LFxuICAgIDE4NzI3LFxuICAgIDYsXG4gICAgMTMxMTI4LFxuICAgIDAsXG4gICAgMTMxMTI5LFxuICAgIDAsXG4gICAgMTMxMTMwLFxuICAgIDAsXG4gICAgMTMxMTMxLFxuICAgIDAsXG4gICAgMTMxMTMyLFxuICAgIDAsXG4gICAgMTMxMTMzLFxuICAgIDAsXG4gICAgMTMxMTM0LFxuICAgIDAsXG4gICAgMTMxMTM1LFxuICAgIDAsXG4gICAgMTMxMzUyLFxuICAgIDcsXG4gICAgMTMxMzU0LFxuICAgIDcsXG4gICAgMTMxMzg0LFxuICAgIDcsXG4gICAgMTMxMzg2LFxuICAgIDcsXG4gICAgMTMzMTYxLFxuICAgIDUsXG4gICAgMTMzMTY1LFxuICAgIDUsXG4gICAgMTMzMTc3LFxuICAgIDUsXG4gICAgMTMzMTgxLFxuICAgIDUsXG4gICAgMTMzMzc2LFxuICAgIDksXG4gICAgMTMzMzc3LFxuICAgIDksXG4gICAgMTMzMzg0LFxuICAgIDksXG4gICAgMTMzMzg1LFxuICAgIDksXG4gICAgMTMzNDAwLFxuICAgIDcsXG4gICAgMTMzNDAyLFxuICAgIDcsXG4gICAgMTMzNDE3LFxuICAgIDUsXG4gICAgMTMzNDIxLFxuICAgIDUsXG4gICAgMTMzNDMyLFxuICAgIDcsXG4gICAgMTMzNDMzLFxuICAgIDUsXG4gICAgMTMzNDM0LFxuICAgIDcsXG4gICAgMTMzNDM3LFxuICAgIDUsXG4gICAgMTQ3NTEwLFxuICAgIDQsXG4gICAgMTQ3NTExLFxuICAgIDQsXG4gICAgMTQ3NTE4LFxuICAgIDQsXG4gICAgMTQ3NTE5LFxuICAgIDQsXG4gICAgMTQ3NzE0LFxuICAgIDgsXG4gICAgMTQ3NzE4LFxuICAgIDgsXG4gICAgMTQ3NzMwLFxuICAgIDgsXG4gICAgMTQ3NzM0LFxuICAgIDgsXG4gICAgMTQ3NzM2LFxuICAgIDcsXG4gICAgMTQ3NzM4LFxuICAgIDcsXG4gICAgMTQ3NzY2LFxuICAgIDQsXG4gICAgMTQ3NzY3LFxuICAgIDQsXG4gICAgMTQ3NzY4LFxuICAgIDcsXG4gICAgMTQ3NzcwLFxuICAgIDcsXG4gICAgMTQ3Nzc0LFxuICAgIDQsXG4gICAgMTQ3Nzc1LFxuICAgIDQsXG4gICAgMTQ5NTA5LFxuICAgIDYsXG4gICAgMTQ5NTExLFxuICAgIDYsXG4gICAgMTQ5NTQxLFxuICAgIDYsXG4gICAgMTQ5NTQzLFxuICAgIDYsXG4gICAgMTQ5NTQ1LFxuICAgIDUsXG4gICAgMTQ5NTQ5LFxuICAgIDUsXG4gICAgMTQ5NTU4LFxuICAgIDQsXG4gICAgMTQ5NTU5LFxuICAgIDQsXG4gICAgMTQ5NTYxLFxuICAgIDUsXG4gICAgMTQ5NTY1LFxuICAgIDUsXG4gICAgMTQ5NTY2LFxuICAgIDQsXG4gICAgMTQ5NTY3LFxuICAgIDQsXG4gICAgMTQ5NzYwLFxuICAgIDksXG4gICAgMTQ5NzYxLFxuICAgIDksXG4gICAgMTQ5NzYyLFxuICAgIDgsXG4gICAgMTQ5NzY1LFxuICAgIDYsXG4gICAgMTQ5NzY2LFxuICAgIDgsXG4gICAgMTQ5NzY3LFxuICAgIDYsXG4gICAgMTQ5NzY4LFxuICAgIDksXG4gICAgMTQ5NzY5LFxuICAgIDksXG4gICAgMTQ5Nzc4LFxuICAgIDgsXG4gICAgMTQ5NzgyLFxuICAgIDgsXG4gICAgMTQ5Nzg0LFxuICAgIDcsXG4gICAgMTQ5Nzg2LFxuICAgIDcsXG4gICAgMTQ5Nzk3LFxuICAgIDYsXG4gICAgMTQ5Nzk5LFxuICAgIDYsXG4gICAgMTQ5ODAxLFxuICAgIDUsXG4gICAgMTQ5ODA1LFxuICAgIDUsXG4gICAgMTQ5ODE0LFxuICAgIDQsXG4gICAgMTQ5ODE1LFxuICAgIDQsXG4gICAgMTQ5ODE2LFxuICAgIDcsXG4gICAgMTQ5ODE3LFxuICAgIDUsXG4gICAgMTQ5ODE4LFxuICAgIDcsXG4gICAgMTQ5ODIxLFxuICAgIDUsXG4gICAgMTQ5ODIyLFxuICAgIDQsXG4gICAgMTQ5ODIzLFxuICAgIDQsXG4gICAgMTQ5ODI0LFxuICAgIDM3LFxuICAgIDE0OTgyNSxcbiAgICAzNyxcbiAgICAxNDk4MjYsXG4gICAgMzYsXG4gICAgMTQ5ODI5LFxuICAgIDM0LFxuICAgIDE0OTgzMCxcbiAgICAzNixcbiAgICAxNDk4MzEsXG4gICAgMzQsXG4gICAgMTQ5ODMyLFxuICAgIDM3LFxuICAgIDE0OTgzMyxcbiAgICAzNyxcbiAgICAxNDk4NDIsXG4gICAgMzYsXG4gICAgMTQ5ODQ2LFxuICAgIDM2LFxuICAgIDE0OTg0OCxcbiAgICAzNSxcbiAgICAxNDk4NTAsXG4gICAgMzUsXG4gICAgMTQ5ODYxLFxuICAgIDM0LFxuICAgIDE0OTg2MyxcbiAgICAzNCxcbiAgICAxNDk4NjUsXG4gICAgMzMsXG4gICAgMTQ5ODY5LFxuICAgIDMzLFxuICAgIDE0OTg3OCxcbiAgICAzMixcbiAgICAxNDk4NzksXG4gICAgMzIsXG4gICAgMTQ5ODgwLFxuICAgIDM1LFxuICAgIDE0OTg4MSxcbiAgICAzMyxcbiAgICAxNDk4ODIsXG4gICAgMzUsXG4gICAgMTQ5ODg1LFxuICAgIDMzLFxuICAgIDE0OTg4NixcbiAgICAzMixcbiAgICAxNDk4ODcsXG4gICAgMzIsXG4gICAgMTUwMDgwLFxuICAgIDQ5LFxuICAgIDE1MDA4MixcbiAgICA0OCxcbiAgICAxNTAwODgsXG4gICAgNDksXG4gICAgMTUwMDk4LFxuICAgIDQ4LFxuICAgIDE1MDEwNCxcbiAgICA0NyxcbiAgICAxNTAxMDYsXG4gICAgNDcsXG4gICAgMTUxODczLFxuICAgIDQ2LFxuICAgIDE1MTg3NyxcbiAgICA0NSxcbiAgICAxNTE4ODEsXG4gICAgNDYsXG4gICAgMTUxOTA5LFxuICAgIDQ1LFxuICAgIDE1MTkxMyxcbiAgICA0NCxcbiAgICAxNTE5MTcsXG4gICAgNDQsXG4gICAgMTUyMTI4LFxuICAgIDQ5LFxuICAgIDE1MjEyOSxcbiAgICA0NixcbiAgICAxNTIxMzYsXG4gICAgNDksXG4gICAgMTUyMTM3LFxuICAgIDQ2LFxuICAgIDE2NjIxNCxcbiAgICA0MyxcbiAgICAxNjYyMTUsXG4gICAgNDIsXG4gICAgMTY2MjMwLFxuICAgIDQzLFxuICAgIDE2NjI0NyxcbiAgICA0MixcbiAgICAxNjYyNjIsXG4gICAgNDEsXG4gICAgMTY2MjYzLFxuICAgIDQxLFxuICAgIDE2NjQ2NixcbiAgICA0OCxcbiAgICAxNjY0NzAsXG4gICAgNDMsXG4gICAgMTY2NDgyLFxuICAgIDQ4LFxuICAgIDE2NjQ4NixcbiAgICA0MyxcbiAgICAxNjgyNjEsXG4gICAgNDUsXG4gICAgMTY4MjYzLFxuICAgIDQyLFxuICAgIDE2ODI5MyxcbiAgICA0NSxcbiAgICAxNjgyOTUsXG4gICAgNDIsXG4gICAgMTY4NTEyLFxuICAgIDMxLFxuICAgIDE2ODUxMyxcbiAgICAyOCxcbiAgICAxNjg1MTQsXG4gICAgMzEsXG4gICAgMTY4NTE3LFxuICAgIDI4LFxuICAgIDE2ODUxOCxcbiAgICAyNSxcbiAgICAxNjg1MTksXG4gICAgMjUsXG4gICAgMjgwOTUyLFxuICAgIDQwLFxuICAgIDI4MDk1MyxcbiAgICAzOSxcbiAgICAyODA5NTQsXG4gICAgNDAsXG4gICAgMjgwOTU3LFxuICAgIDM5LFxuICAgIDI4MDk1OCxcbiAgICAzOCxcbiAgICAyODA5NTksXG4gICAgMzgsXG4gICAgMjgxMTc2LFxuICAgIDQ3LFxuICAgIDI4MTE3OCxcbiAgICA0NyxcbiAgICAyODEyMDgsXG4gICAgNDAsXG4gICAgMjgxMjEwLFxuICAgIDQwLFxuICAgIDI4Mjk4NSxcbiAgICA0NCxcbiAgICAyODI5ODksXG4gICAgNDQsXG4gICAgMjgzMDAxLFxuICAgIDM5LFxuICAgIDI4MzAwNSxcbiAgICAzOSxcbiAgICAyODMyMDgsXG4gICAgMzAsXG4gICAgMjgzMjA5LFxuICAgIDI3LFxuICAgIDI4MzIyNCxcbiAgICAzMCxcbiAgICAyODMyNDEsXG4gICAgMjcsXG4gICAgMjgzMjU2LFxuICAgIDIyLFxuICAgIDI4MzI1NyxcbiAgICAyMixcbiAgICAyOTczMzQsXG4gICAgNDEsXG4gICAgMjk3MzM1LFxuICAgIDQxLFxuICAgIDI5NzM0MixcbiAgICAzOCxcbiAgICAyOTczNDMsXG4gICAgMzgsXG4gICAgMjk3NTU0LFxuICAgIDI5LFxuICAgIDI5NzU1OCxcbiAgICAyNCxcbiAgICAyOTc1NjIsXG4gICAgMjksXG4gICAgMjk3NTkwLFxuICAgIDI0LFxuICAgIDI5NzU5NCxcbiAgICAyMSxcbiAgICAyOTc1OTgsXG4gICAgMjEsXG4gICAgMjk5MzY1LFxuICAgIDI2LFxuICAgIDI5OTM2NyxcbiAgICAyMyxcbiAgICAyOTkzNzMsXG4gICAgMjYsXG4gICAgMjk5MzgzLFxuICAgIDIzLFxuICAgIDI5OTM4OSxcbiAgICAyMCxcbiAgICAyOTkzOTEsXG4gICAgMjAsXG4gICAgMjk5NTg0LFxuICAgIDMxLFxuICAgIDI5OTU4NSxcbiAgICAyOCxcbiAgICAyOTk1ODYsXG4gICAgMzEsXG4gICAgMjk5NTg5LFxuICAgIDI4LFxuICAgIDI5OTU5MCxcbiAgICAyNSxcbiAgICAyOTk1OTEsXG4gICAgMjUsXG4gICAgMjk5NTkyLFxuICAgIDMwLFxuICAgIDI5OTU5MyxcbiAgICAyNyxcbiAgICAyOTk2MDIsXG4gICAgMjksXG4gICAgMjk5NjA2LFxuICAgIDI0LFxuICAgIDI5OTYwOCxcbiAgICAzMCxcbiAgICAyOTk2MTAsXG4gICAgMjksXG4gICAgMjk5NjIxLFxuICAgIDI2LFxuICAgIDI5OTYyMyxcbiAgICAyMyxcbiAgICAyOTk2MjUsXG4gICAgMjcsXG4gICAgMjk5NjI5LFxuICAgIDI2LFxuICAgIDI5OTYzOCxcbiAgICAyNCxcbiAgICAyOTk2MzksXG4gICAgMjMsXG4gICAgMjk5NjQwLFxuICAgIDIyLFxuICAgIDI5OTY0MSxcbiAgICAyMixcbiAgICAyOTk2NDIsXG4gICAgMjEsXG4gICAgMjk5NjQ1LFxuICAgIDIwLFxuICAgIDI5OTY0NixcbiAgICAyMSxcbiAgICAyOTk2NDcsXG4gICAgMjAsXG4gICAgMjk5NjQ4LFxuICAgIDYxLFxuICAgIDI5OTY0OSxcbiAgICA2MCxcbiAgICAyOTk2NTAsXG4gICAgNjEsXG4gICAgMjk5NjUzLFxuICAgIDYwLFxuICAgIDI5OTY1NCxcbiAgICA1OSxcbiAgICAyOTk2NTUsXG4gICAgNTksXG4gICAgMjk5NjU2LFxuICAgIDU4LFxuICAgIDI5OTY1NyxcbiAgICA1NyxcbiAgICAyOTk2NjYsXG4gICAgNTUsXG4gICAgMjk5NjcwLFxuICAgIDU0LFxuICAgIDI5OTY3MixcbiAgICA1OCxcbiAgICAyOTk2NzQsXG4gICAgNTUsXG4gICAgMjk5Njg1LFxuICAgIDUyLFxuICAgIDI5OTY4NyxcbiAgICA1MSxcbiAgICAyOTk2ODksXG4gICAgNTcsXG4gICAgMjk5NjkzLFxuICAgIDUyLFxuICAgIDI5OTcwMixcbiAgICA1NCxcbiAgICAyOTk3MDMsXG4gICAgNTEsXG4gICAgMjk5NzA0LFxuICAgIDU2LFxuICAgIDI5OTcwNSxcbiAgICA1NixcbiAgICAyOTk3MDYsXG4gICAgNTMsXG4gICAgMjk5NzA5LFxuICAgIDUwLFxuICAgIDI5OTcxMCxcbiAgICA1MyxcbiAgICAyOTk3MTEsXG4gICAgNTAsXG4gICAgMjk5OTA0LFxuICAgIDYxLFxuICAgIDI5OTkwNixcbiAgICA2MSxcbiAgICAyOTk5MTIsXG4gICAgNTgsXG4gICAgMjk5OTIyLFxuICAgIDU1LFxuICAgIDI5OTkyOCxcbiAgICA1OCxcbiAgICAyOTk5MzAsXG4gICAgNTUsXG4gICAgMzAxNjk3LFxuICAgIDYwLFxuICAgIDMwMTcwMSxcbiAgICA2MCxcbiAgICAzMDE3MDUsXG4gICAgNTcsXG4gICAgMzAxNzMzLFxuICAgIDUyLFxuICAgIDMwMTczNyxcbiAgICA1NyxcbiAgICAzMDE3NDEsXG4gICAgNTIsXG4gICAgMzAxOTUyLFxuICAgIDc5LFxuICAgIDMwMTk1MyxcbiAgICA3OSxcbiAgICAzMDE5NjAsXG4gICAgNzYsXG4gICAgMzAxOTYxLFxuICAgIDc2LFxuICAgIDMxNjAzOCxcbiAgICA1OSxcbiAgICAzMTYwMzksXG4gICAgNTksXG4gICAgMzE2MDU0LFxuICAgIDU0LFxuICAgIDMxNjA3MSxcbiAgICA1MSxcbiAgICAzMTYwODYsXG4gICAgNTQsXG4gICAgMzE2MDg3LFxuICAgIDUxLFxuICAgIDMxNjI5MCxcbiAgICA3OCxcbiAgICAzMTYyOTQsXG4gICAgNzgsXG4gICAgMzE2MzA2LFxuICAgIDczLFxuICAgIDMxNjMxMCxcbiAgICA3MyxcbiAgICAzMTgwODUsXG4gICAgNzcsXG4gICAgMzE4MDg3LFxuICAgIDc3LFxuICAgIDMxODExNyxcbiAgICA3MCxcbiAgICAzMTgxMTksXG4gICAgNzAsXG4gICAgMzE4MzM2LFxuICAgIDc5LFxuICAgIDMxODMzNyxcbiAgICA3OSxcbiAgICAzMTgzMzgsXG4gICAgNzgsXG4gICAgMzE4MzQxLFxuICAgIDc3LFxuICAgIDMxODM0MixcbiAgICA3OCxcbiAgICAzMTgzNDMsXG4gICAgNzcsXG4gICAgNDMwNzc2LFxuICAgIDU2LFxuICAgIDQzMDc3NyxcbiAgICA1NixcbiAgICA0MzA3NzgsXG4gICAgNTMsXG4gICAgNDMwNzgxLFxuICAgIDUwLFxuICAgIDQzMDc4MixcbiAgICA1MyxcbiAgICA0MzA3ODMsXG4gICAgNTAsXG4gICAgNDMxMDAwLFxuICAgIDc1LFxuICAgIDQzMTAwMixcbiAgICA3MixcbiAgICA0MzEwMzIsXG4gICAgNzUsXG4gICAgNDMxMDM0LFxuICAgIDcyLFxuICAgIDQzMjgwOSxcbiAgICA3NCxcbiAgICA0MzI4MTMsXG4gICAgNjksXG4gICAgNDMyODI1LFxuICAgIDc0LFxuICAgIDQzMjgyOSxcbiAgICA2OSxcbiAgICA0MzMwMzIsXG4gICAgNzYsXG4gICAgNDMzMDMzLFxuICAgIDc2LFxuICAgIDQzMzA0OCxcbiAgICA3NSxcbiAgICA0MzMwNjUsXG4gICAgNzQsXG4gICAgNDMzMDgwLFxuICAgIDc1LFxuICAgIDQzMzA4MSxcbiAgICA3NCxcbiAgICA0NDcxNTgsXG4gICAgNzEsXG4gICAgNDQ3MTU5LFxuICAgIDY4LFxuICAgIDQ0NzE2NixcbiAgICA3MSxcbiAgICA0NDcxNjcsXG4gICAgNjgsXG4gICAgNDQ3Mzc4LFxuICAgIDczLFxuICAgIDQ0NzM4MixcbiAgICA3MyxcbiAgICA0NDczODYsXG4gICAgNzIsXG4gICAgNDQ3NDE0LFxuICAgIDcxLFxuICAgIDQ0NzQxOCxcbiAgICA3MixcbiAgICA0NDc0MjIsXG4gICAgNzEsXG4gICAgNDQ5MTg5LFxuICAgIDcwLFxuICAgIDQ0OTE5MSxcbiAgICA3MCxcbiAgICA0NDkxOTcsXG4gICAgNjksXG4gICAgNDQ5MjA3LFxuICAgIDY4LFxuICAgIDQ0OTIxMyxcbiAgICA2OSxcbiAgICA0NDkyMTUsXG4gICAgNjgsXG4gICAgNDQ5NDA4LFxuICAgIDY3LFxuICAgIDQ0OTQwOSxcbiAgICA2NyxcbiAgICA0NDk0MTAsXG4gICAgNjYsXG4gICAgNDQ5NDEzLFxuICAgIDY0LFxuICAgIDQ0OTQxNCxcbiAgICA2NixcbiAgICA0NDk0MTUsXG4gICAgNjQsXG4gICAgNDQ5NDE2LFxuICAgIDY3LFxuICAgIDQ0OTQxNyxcbiAgICA2NyxcbiAgICA0NDk0MjYsXG4gICAgNjYsXG4gICAgNDQ5NDMwLFxuICAgIDY2LFxuICAgIDQ0OTQzMixcbiAgICA2NSxcbiAgICA0NDk0MzQsXG4gICAgNjUsXG4gICAgNDQ5NDQ1LFxuICAgIDY0LFxuICAgIDQ0OTQ0NyxcbiAgICA2NCxcbiAgICA0NDk0NDksXG4gICAgNjMsXG4gICAgNDQ5NDUzLFxuICAgIDYzLFxuICAgIDQ0OTQ2MixcbiAgICA2MixcbiAgICA0NDk0NjMsXG4gICAgNjIsXG4gICAgNDQ5NDY0LFxuICAgIDY1LFxuICAgIDQ0OTQ2NSxcbiAgICA2MyxcbiAgICA0NDk0NjYsXG4gICAgNjUsXG4gICAgNDQ5NDY5LFxuICAgIDYzLFxuICAgIDQ0OTQ3MCxcbiAgICA2MixcbiAgICA0NDk0NzEsXG4gICAgNjIsXG4gICAgNDQ5NDcyLFxuICAgIDE5LFxuICAgIDQ0OTQ3MyxcbiAgICAxOSxcbiAgICA0NDk0NzQsXG4gICAgMTgsXG4gICAgNDQ5NDc3LFxuICAgIDE2LFxuICAgIDQ0OTQ3OCxcbiAgICAxOCxcbiAgICA0NDk0NzksXG4gICAgMTYsXG4gICAgNDQ5NDgwLFxuICAgIDE5LFxuICAgIDQ0OTQ4MSxcbiAgICAxOSxcbiAgICA0NDk0OTAsXG4gICAgMTgsXG4gICAgNDQ5NDk0LFxuICAgIDE4LFxuICAgIDQ0OTQ5NixcbiAgICAxNyxcbiAgICA0NDk0OTgsXG4gICAgMTcsXG4gICAgNDQ5NTA5LFxuICAgIDE2LFxuICAgIDQ0OTUxMSxcbiAgICAxNixcbiAgICA0NDk1MTMsXG4gICAgMTUsXG4gICAgNDQ5NTE3LFxuICAgIDE1LFxuICAgIDQ0OTUyNixcbiAgICAxNCxcbiAgICA0NDk1MjcsXG4gICAgMTQsXG4gICAgNDQ5NTI4LFxuICAgIDE3LFxuICAgIDQ0OTUyOSxcbiAgICAxNSxcbiAgICA0NDk1MzAsXG4gICAgMTcsXG4gICAgNDQ5NTMzLFxuICAgIDE1LFxuICAgIDQ0OTUzNCxcbiAgICAxNCxcbiAgICA0NDk1MzUsXG4gICAgMTQsXG4gICAgNDQ5NzI4LFxuICAgIDE5LFxuICAgIDQ0OTcyOSxcbiAgICAxOSxcbiAgICA0NDk3MzAsXG4gICAgMTgsXG4gICAgNDQ5NzM0LFxuICAgIDE4LFxuICAgIDQ0OTczNixcbiAgICAxOSxcbiAgICA0NDk3MzcsXG4gICAgMTksXG4gICAgNDQ5NzQ2LFxuICAgIDE4LFxuICAgIDQ0OTc1MCxcbiAgICAxOCxcbiAgICA0NDk3NTIsXG4gICAgMTcsXG4gICAgNDQ5NzU0LFxuICAgIDE3LFxuICAgIDQ0OTc4NCxcbiAgICAxNyxcbiAgICA0NDk3ODYsXG4gICAgMTcsXG4gICAgNDUxNTIwLFxuICAgIDE5LFxuICAgIDQ1MTUyMSxcbiAgICAxOSxcbiAgICA0NTE1MjUsXG4gICAgMTYsXG4gICAgNDUxNTI3LFxuICAgIDE2LFxuICAgIDQ1MTUyOCxcbiAgICAxOSxcbiAgICA0NTE1MjksXG4gICAgMTksXG4gICAgNDUxNTU3LFxuICAgIDE2LFxuICAgIDQ1MTU1OSxcbiAgICAxNixcbiAgICA0NTE1NjEsXG4gICAgMTUsXG4gICAgNDUxNTY1LFxuICAgIDE1LFxuICAgIDQ1MTU3NyxcbiAgICAxNSxcbiAgICA0NTE1ODEsXG4gICAgMTUsXG4gICAgNDUxNzc2LFxuICAgIDE5LFxuICAgIDQ1MTc3NyxcbiAgICAxOSxcbiAgICA0NTE3ODQsXG4gICAgMTksXG4gICAgNDUxNzg1LFxuICAgIDE5LFxuICAgIDQ2NTg1OCxcbiAgICAxOCxcbiAgICA0NjU4NjEsXG4gICAgMTYsXG4gICAgNDY1ODYyLFxuICAgIDE4LFxuICAgIDQ2NTg2MyxcbiAgICAxNixcbiAgICA0NjU4NzQsXG4gICAgMTgsXG4gICAgNDY1ODc4LFxuICAgIDE4LFxuICAgIDQ2NTg5MyxcbiAgICAxNixcbiAgICA0NjU4OTUsXG4gICAgMTYsXG4gICAgNDY1OTEwLFxuICAgIDE0LFxuICAgIDQ2NTkxMSxcbiAgICAxNCxcbiAgICA0NjU5MTgsXG4gICAgMTQsXG4gICAgNDY1OTE5LFxuICAgIDE0LFxuICAgIDQ2NjExNCxcbiAgICAxOCxcbiAgICA0NjYxMTgsXG4gICAgMTgsXG4gICAgNDY2MTMwLFxuICAgIDE4LFxuICAgIDQ2NjEzNCxcbiAgICAxOCxcbiAgICA0Njc5MDksXG4gICAgMTYsXG4gICAgNDY3OTExLFxuICAgIDE2LFxuICAgIDQ2Nzk0MSxcbiAgICAxNixcbiAgICA0Njc5NDMsXG4gICAgMTYsXG4gICAgNDY4MTYwLFxuICAgIDEzLFxuICAgIDQ2ODE2MSxcbiAgICAxMyxcbiAgICA0NjgxNjIsXG4gICAgMTMsXG4gICAgNDY4MTYzLFxuICAgIDEzLFxuICAgIDQ2ODE2NCxcbiAgICAxMyxcbiAgICA0NjgxNjUsXG4gICAgMTMsXG4gICAgNDY4MTY2LFxuICAgIDEzLFxuICAgIDQ2ODE2NyxcbiAgICAxMyxcbiAgICA1ODA1NjgsXG4gICAgMTcsXG4gICAgNTgwNTcwLFxuICAgIDE3LFxuICAgIDU4MDU4NSxcbiAgICAxNSxcbiAgICA1ODA1ODksXG4gICAgMTUsXG4gICAgNTgwNTk4LFxuICAgIDE0LFxuICAgIDU4MDU5OSxcbiAgICAxNCxcbiAgICA1ODA2MDAsXG4gICAgMTcsXG4gICAgNTgwNjAxLFxuICAgIDE1LFxuICAgIDU4MDYwMixcbiAgICAxNyxcbiAgICA1ODA2MDUsXG4gICAgMTUsXG4gICAgNTgwNjA2LFxuICAgIDE0LFxuICAgIDU4MDYwNyxcbiAgICAxNCxcbiAgICA1ODA4MjQsXG4gICAgMTcsXG4gICAgNTgwODI2LFxuICAgIDE3LFxuICAgIDU4MDg1NixcbiAgICAxNyxcbiAgICA1ODA4NTgsXG4gICAgMTcsXG4gICAgNTgyNjMzLFxuICAgIDE1LFxuICAgIDU4MjYzNyxcbiAgICAxNSxcbiAgICA1ODI2NDksXG4gICAgMTUsXG4gICAgNTgyNjUzLFxuICAgIDE1LFxuICAgIDU4Mjg1NixcbiAgICAxMixcbiAgICA1ODI4NTcsXG4gICAgMTIsXG4gICAgNTgyODcyLFxuICAgIDEyLFxuICAgIDU4Mjg3MyxcbiAgICAxMixcbiAgICA1ODI4ODgsXG4gICAgMTIsXG4gICAgNTgyODg5LFxuICAgIDEyLFxuICAgIDU4MjkwNCxcbiAgICAxMixcbiAgICA1ODI5MDUsXG4gICAgMTIsXG4gICAgNTk2OTgyLFxuICAgIDE0LFxuICAgIDU5Njk4MyxcbiAgICAxNCxcbiAgICA1OTY5OTAsXG4gICAgMTQsXG4gICAgNTk2OTkxLFxuICAgIDE0LFxuICAgIDU5NzIwMixcbiAgICAxMSxcbiAgICA1OTcyMDYsXG4gICAgMTEsXG4gICAgNTk3MjEwLFxuICAgIDExLFxuICAgIDU5NzIxNCxcbiAgICAxMSxcbiAgICA1OTcyMzQsXG4gICAgMTEsXG4gICAgNTk3MjM4LFxuICAgIDExLFxuICAgIDU5NzI0MixcbiAgICAxMSxcbiAgICA1OTcyNDYsXG4gICAgMTEsXG4gICAgNTk5MDEzLFxuICAgIDEwLFxuICAgIDU5OTAxNSxcbiAgICAxMCxcbiAgICA1OTkwMjEsXG4gICAgMTAsXG4gICAgNTk5MDIzLFxuICAgIDEwLFxuICAgIDU5OTAyOSxcbiAgICAxMCxcbiAgICA1OTkwMzEsXG4gICAgMTAsXG4gICAgNTk5MDM3LFxuICAgIDEwLFxuICAgIDU5OTAzOSxcbiAgICAxMCxcbiAgICA1OTkyMzIsXG4gICAgMTMsXG4gICAgNTk5MjMzLFxuICAgIDEzLFxuICAgIDU5OTIzNCxcbiAgICAxMyxcbiAgICA1OTkyMzUsXG4gICAgMTMsXG4gICAgNTk5MjM2LFxuICAgIDEzLFxuICAgIDU5OTIzNyxcbiAgICAxMyxcbiAgICA1OTkyMzgsXG4gICAgMTMsXG4gICAgNTk5MjM5LFxuICAgIDEzLFxuICAgIDU5OTI0MCxcbiAgICAxMixcbiAgICA1OTkyNDEsXG4gICAgMTIsXG4gICAgNTk5MjUwLFxuICAgIDExLFxuICAgIDU5OTI1NCxcbiAgICAxMSxcbiAgICA1OTkyNTYsXG4gICAgMTIsXG4gICAgNTk5MjU3LFxuICAgIDEyLFxuICAgIDU5OTI1OCxcbiAgICAxMSxcbiAgICA1OTkyNjIsXG4gICAgMTEsXG4gICAgNTk5MjY5LFxuICAgIDEwLFxuICAgIDU5OTI3MSxcbiAgICAxMCxcbiAgICA1OTkyNzIsXG4gICAgMTIsXG4gICAgNTk5MjczLFxuICAgIDEyLFxuICAgIDU5OTI3NyxcbiAgICAxMCxcbiAgICA1OTkyNzksXG4gICAgMTAsXG4gICAgNTk5MjgyLFxuICAgIDExLFxuICAgIDU5OTI4NSxcbiAgICAxMCxcbiAgICA1OTkyODYsXG4gICAgMTEsXG4gICAgNTk5Mjg3LFxuICAgIDEwLFxuICAgIDU5OTI4OCxcbiAgICAxMixcbiAgICA1OTkyODksXG4gICAgMTIsXG4gICAgNTk5MjkwLFxuICAgIDExLFxuICAgIDU5OTI5MyxcbiAgICAxMCxcbiAgICA1OTkyOTQsXG4gICAgMTEsXG4gICAgNTk5Mjk1LFxuICAgIDEwXG5dO1xuZXhwb3J0cy5wMkQgPSBbXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMFxuXTtcbmV4cG9ydHMucDNEID0gW1xuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAtMSxcbiAgICAwLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAzLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAwXG5dO1xuZXhwb3J0cy5wNEQgPSBbXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAtMSxcbiAgICAwLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMCxcbiAgICAtMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAtMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgLTEsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDQsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICA0LFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDAsXG4gICAgNCxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgNCxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDQsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICA0LFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICA0LFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgNCxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDQsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDQsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICA0LFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgNCxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDMsXG4gICAgMixcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAzLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAzLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDAsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMixcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAtMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAtMSxcbiAgICAyLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIC0xLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIC0xLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMixcbiAgICAxLFxuICAgIC0xLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMCxcbiAgICAtMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICA0LFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAzLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMyxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDQsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDMsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAzLFxuICAgIDAsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgNCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICA0LFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAzLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAyLFxuICAgIDQsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDMsXG4gICAgMCxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgNCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAwLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIC0xLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDEsXG4gICAgMCxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAtMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgLTEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAwLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAwLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAwLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIC0xLFxuICAgIDEsXG4gICAgMSxcbiAgICAxXG5dO1xuIiwiY2xhc3MgRmlsZVBhdGhzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZmlsZVBhdGhzID0gW1xyXG4gICAgICAgICAgICAvLyBzcHJpdGVzXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9jYXRXYWxrMS5qc29uXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9jYXRTdG9wLmpzb25cIixcclxuICAgICAgICAgICAgXCJzcHJpdGVzL2NhdElkbGUuanNvblwiLFxyXG4gICAgICAgICAgICBcInNwcml0ZXMvY2F0SnVtcC5qc29uXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy93YWxsU2xpZGUuanNvblwiLFxyXG4gICAgICAgICAgICBcInNwcml0ZXMvY2F0SGFuZy5qc29uXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9jYXRDbGltYkZ1bGwuanNvblwiLFxyXG4gICAgICAgICAgICBcInNwcml0ZXMvY2F0RmFsbC5qc29uXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9jYXRob3VzZV9yMS5wbmdcIixcclxuICAgICAgICAgICAgXCJzcHJpdGVzL3RpbGVTZXQyLmpzb25cIixcclxuICAgICAgICAgICAgXCJzcHJpdGVzL3RvcmNoU3ByaXRlcy5qc29uXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9rZXlzLmpzb25cIixcclxuICAgICAgICAgICAgXCJzcHJpdGVzL21lbnVCdXR0b25zLmpzb25cIixcclxuICAgICAgICAgICAgXCJzcHJpdGVzL2NvbG9yX21hcF8xLnBuZ1wiLFxyXG4gICAgICAgICAgICBcInNwcml0ZXMvY29sb3JfbWFwXzIucG5nXCIsXHJcbiAgICAgICAgICAgIFwic3ByaXRlcy9jb2xvcl9tYXBfMy5wbmdcIixcclxuXHJcbiAgICAgICAgICAgIC8vIHNoYWRlcnNcclxuICAgICAgICAgICAgXCJzaGFkZXJzL2xpZ2h0RmlsdGVyVmVydC5HTFNMXCIsXHJcbiAgICAgICAgICAgIFwic2hhZGVycy9saWdodEZpbHRlckZyYWcuR0xTTFwiLFxyXG4gICAgICAgICAgICBcInNoYWRlcnMvbGlnaHRWZXJ0LkdMU0xcIixcclxuICAgICAgICAgICAgXCJzaGFkZXJzL2xpZ2h0RnJhZy5HTFNMXCIsXHJcbiAgICAgICAgICAgIFwic2hhZGVycy9jYXRuaXAtZWZmZWN0L2NhdG5pcFZlcnQuR0xTTFwiLFxyXG4gICAgICAgICAgICBcInNoYWRlcnMvY2F0bmlwLWVmZmVjdC9jYXRuaXBGcmFnLkdMU0xcIixcclxuICAgICAgICAgICAgXCJzaGFkZXJzL2Rpc3NvbHZlL2Rpc3NvbHZlVmVydC5HTFNMXCIsXHJcbiAgICAgICAgICAgIFwic2hhZGVycy9kaXNzb2x2ZS9kaXNzb2x2ZUZyYWcuR0xTTFwiLFxyXG4gICAgICAgICAgICBcInNoYWRlcnMvQmV6aWVyRGlzcGxhY2VtZW50RmlsdGVyL0JlemllckRpc3BWZXJ0LkdMU0xcIixcclxuICAgICAgICAgICAgXCJzaGFkZXJzL0JlemllckRpc3BsYWNlbWVudEZpbHRlci9CZXppZXJEaXNwRnJhZy5HTFNMXCIsXHJcbiAgICAgICAgICAgIFwic2hhZGVycy9QYWxldHRlU3dhcC9wYWxldHRlU3dhcC5HTFNMXCJcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgYXJyYXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZVBhdGhzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge0ZpbGVQYXRoc30iLCJpbXBvcnQge0ZpbGVQYXRoc30gZnJvbSAnLi9GaWxlUGF0aHMnXHJcblxyXG4vLyBBbGlhc2VzXHJcbmxldCBsb2FkZXIgPSBQSVhJLmxvYWRlcixcclxuICAgIHJlc291cmNlcyA9IFBJWEkubG9hZGVyLnJlc291cmNlcztcclxuXHJcbi8qKlxyXG4gKiAgTG9hZHMgdGV4dHVyZXMgYW5kIHNoYWRlcnMgZnJvbSBmaWxlcywgc3RvcmVzIHRoZW0gYXMgb2JqZWN0IHByb3BlcnRpZXNcclxuICogQGNhbGxiYWNrIHJlcXVlc3RDYWxsYmFja1xyXG4gKiBAY2xhc3NcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNeUxvYWRlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7cmVxdWVzdENhbGxiYWNrfSBzZXR1cEZ1bmN0aW9uIC0gU2V0cyB1cCB0aGUgZ2FtZSBhZnRlciBhbGwgZmlsZXMgYXJlIGxvYWRlZFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzZXR1cEZ1bmN0aW9uKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZG9uZUxvYWRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgbGV0IGxvYWRlckZpbGVzID0gbmV3IEZpbGVQYXRocygpO1xyXG5cclxuICAgICAgICBQSVhJLlNDQUxFX01PREVTLkRFRkFVTFQgPSBQSVhJLlNDQUxFX01PREVTLk5FQVJFU1Q7XHJcbiAgICAgICAgUElYSS5zZXR0aW5ncy5TQ0FMRV9NT0RFID0gUElYSS5TQ0FMRV9NT0RFUy5ORUFSRVNUO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxvYWRlclxyXG4gICAgICAgICAgICAuYWRkKGxvYWRlckZpbGVzLmFycmF5KCkpXHJcbiAgICAgICAgICAgIC5hZGQoJ3BhdXNlTXVzaWMnLCAnc291bmQvdHJvcGljYWwgamFtLm1wMycpXHJcbiAgICAgICAgICAgIC5hZGQoJ0FSQ0FERUNMQVNTSUMnLCAnZm9udHMvQVJDQURFQ0xBU1NJQy5UVEYnKVxyXG4gICAgICAgICAgICAubG9hZCh0aGlzLm9uTG9hZC5iaW5kKHRoaXMsIHNldHVwRnVuY3Rpb24pKTsgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKiogIG9yZ2FuaXplIGRhdGEgaW50byBvYmplY3RzIGFmdGVyIGZpbGVzIGxvYWQgKi9cclxuICAgIG9uTG9hZChzZXR1cEZ1bmN0aW9uKVxyXG4gICAge1xyXG4gICAgICAgdGhpcy5saWdodFNoYWRlciA9IHRoaXMubG9hZFNoYWRlcnMoKTtcclxuICAgICAgIHRoaXMuZGlzc29sdmVTaGFkZXIgPSB0aGlzLmxvYWREaXNzb2x2ZVNoYWRlcigpO1xyXG4gICAgICAgdGhpcy5kaXNwbGFjZW1lbnRTaGFkZXIgPSB0aGlzLmxvYWREaXNwbGFjZW1lbnRTaGFkZXIoKTtcclxuICAgICAgIHRoaXMucGFsZXR0ZUZyYWcgPSB0aGlzLmxvYWRQYWxldHRlRnJhZygpO1xyXG4gICAgICAgdGhpcy5wYWxldHRlVGV4dHVyZXMgPSB0aGlzLmxvYWRQYWxldHRlcygpOyAgXHJcblxyXG4gICAgICAgdGhpcy5jYXRuaXBGaWx0ZXIgPSB0aGlzLmxvYWRGaWx0ZXJzKCk7XHJcblxyXG4gICAgICAgLy90aGlzLmNhdEZyYW1lTWFwID0gdGhpcy5sb2FkRnJhbWVzKCk7XHJcbiAgICAgICB0aGlzLmNhdEFuaW1hdGlvbnMgPSB0aGlzLmFuaW1hdGlvbnNJbml0KCk7XHJcblxyXG4gICAgICAgdGhpcy50aWxlc2V0ID0gdGhpcy5sb2FkVGlsZXMoKTtcclxuXHJcbiAgICAgICB0aGlzLnRvcmNoRnJhbWVzID0gdGhpcy5sb2FkVG9yY2goKTtcclxuXHJcbiAgICAgICB0aGlzLmRvbmVMb2FkaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICB0aGlzLmJ1dHRvbkZyYW1lcyA9IHRoaXMubG9hZEJ1dHRvbnMoKTtcclxuXHJcbiAgICAgICB0aGlzLm1lbnVCdXR0b25zID0gdGhpcy5sb2FkTWVudSgpO1xyXG5cclxuICAgICAgIHRoaXMucGF1c2VNdXNpYyA9IHRoaXMubG9hZFNvdW5kKCk7XHJcbiAgICAgICB0aGlzLnBhdXNlTXVzaWMubG9vcCA9IHRydWU7XHJcblxyXG4gICAgICAgdGhpcy5tZW51Rm9udCA9IHRoaXMubG9hZEZvbnQoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm1lbnVGb250LmRhdGEpO1xyXG5cclxuICAgICAgIC8vIHRoaXMuY2hlY2tMb2FkKCk7XHJcblxyXG4gICAgICAgc2V0dXBGdW5jdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRlYnVnZ2luZyBmb3IgZHVtbWllc1xyXG4gICAgY2hlY2tMb2FkKCkgXHJcbiAgICB7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5saWdodFNoYWRlcik7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5jYXRBbmltYXRpb25zKTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmRvbmVMb2FkaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkUGFsZXR0ZXMoKXtcclxuICAgICAgICByZXR1cm4gW1BJWEkuVGV4dHVyZS5mcm9tKHJlc291cmNlc1tcInNwcml0ZXMvY29sb3JfbWFwXzEucG5nXCJdLmRhdGEpLFxyXG4gICAgICAgICAgICAgICAgUElYSS5UZXh0dXJlLmZyb20ocmVzb3VyY2VzW1wic3ByaXRlcy9jb2xvcl9tYXBfMi5wbmdcIl0uZGF0YSksXHJcbiAgICAgICAgICAgICAgICBQSVhJLlRleHR1cmUuZnJvbShyZXNvdXJjZXNbXCJzcHJpdGVzL2NvbG9yX21hcF8zLnBuZ1wiXS5kYXRhKV07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIGxvYWQgbGlnaHQgc2hhZGVycyBpbnRvIGEge3N0cmluZzpzdHJpbmd9IG1hcCAqLyBcclxuICAgIGxvYWRTaGFkZXJzKClcclxuICAgIHtcclxuICAgICAgICBsZXQgdmVydCA9IHJlc291cmNlc1tcInNoYWRlcnMvbGlnaHRWZXJ0LkdMU0xcIl0uZGF0YSxcclxuICAgICAgICAgICAgZnJhZyA9IHJlc291cmNlc1tcInNoYWRlcnMvbGlnaHRGcmFnLkdMU0xcIl0uZGF0YTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIFwidmVydFwiOiB2ZXJ0LFxyXG4gICAgICAgICAgICAgICAgXCJmcmFnXCI6IGZyYWcsXHJcbiAgICAgICAgICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIGxvYWQgZGlzc29sdmUgc2hhZGVycyBpbnRvIGEge3N0cmluZzpzdHJpbmd9IG1hcCAqLyBcclxuICAgIGxvYWREaXNzb2x2ZVNoYWRlcigpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHZlcnQgPSByZXNvdXJjZXNbXCJzaGFkZXJzL2Rpc3NvbHZlL2Rpc3NvbHZlVmVydC5HTFNMXCJdLmRhdGEsXHJcbiAgICAgICAgZnJhZyA9IHJlc291cmNlc1tcInNoYWRlcnMvZGlzc29sdmUvZGlzc29sdmVGcmFnLkdMU0xcIl0uZGF0YTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBcInZlcnRcIjogdmVydCxcclxuICAgICAgICAgICAgXCJmcmFnXCI6IGZyYWcsXHJcbiAgICAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkRGlzcGxhY2VtZW50U2hhZGVyKCl7XHJcbiAgICAgICAgbGV0IHZlcnQgPSByZXNvdXJjZXNbXCJzaGFkZXJzL0JlemllckRpc3BsYWNlbWVudEZpbHRlci9CZXppZXJEaXNwVmVydC5HTFNMXCJdLmRhdGEsXHJcbiAgICAgICAgZnJhZyA9IHJlc291cmNlc1tcInNoYWRlcnMvQmV6aWVyRGlzcGxhY2VtZW50RmlsdGVyL0JlemllckRpc3BGcmFnLkdMU0xcIl0uZGF0YTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBcInZlcnRcIjogdmVydCxcclxuICAgICAgICAgICAgXCJmcmFnXCI6IGZyYWcsXHJcbiAgICAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkRmlsdGVycygpe1xyXG4gICAgICAgIGxldCB2ZXJ0ID0gcmVzb3VyY2VzW1wic2hhZGVycy9jYXRuaXAtZWZmZWN0L2NhdG5pcFZlcnQuR0xTTFwiXS5kYXRhLFxyXG4gICAgICAgIGZyYWcgPSByZXNvdXJjZXNbXCJzaGFkZXJzL2NhdG5pcC1lZmZlY3QvY2F0bmlwRnJhZy5HTFNMXCJdLmRhdGE7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgXCJ2ZXJ0XCI6IHZlcnQsXHJcbiAgICAgICAgICAgIFwiZnJhZ1wiOiBmcmFnLFxyXG4gICAgICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZFBhbGV0dGVGcmFnKCl7XHJcbiAgICAgICAgcmV0dXJuIHJlc291cmNlc1tcInNoYWRlcnMvUGFsZXR0ZVN3YXAvcGFsZXR0ZVN3YXAuR0xTTFwiXS5kYXRhO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqICAgSW5pdCBhbmltYXRlZCBzcHJpdGUgb2JqZWN0cywgbG9hZCBpbnRvIGEgaGFzaG1hcFxyXG4gICAgICogICBcclxuICAgICAqICAgVGhlIHRleHR1cmUgYXRsYXMgbXVzdCBoYXZlIGtleXMgb2YgdGhlIGZvcm0gOlxyXG4gICAgICogICBcclxuICAgICAqICAgICAgIGB7a2V5fSAoe2ZyYW1lTnVtYmVyfSkucG5nYCBcclxuICAgICAqICAgXHJcbiAgICAgKiAgIHdoZXJlIHRoZSB7a2V5fSBmb3IgZWFjaCBhbmltYXRpb24gbWF0Y2hlcyB0aGUgc3RyaW5ncyB0aGF0IHdlIHByb3ZpZGUgaW4gdGhpcyBmdW5jdGlvbiBhcyBrZXlzIHRvIGVhY2ggYW5pbWF0aW9uIG9mIHRoZSBtYXBcclxuICAgICAqICAgXHJcbiAgICAgKiAgIFRoZSB7ZnJhbWVOdW1iZXJ9IG11c3Qgc3RhcnQgYXQgMSwgdGhpcyBpcyBvbmx5IGJlY2F1c2UgdGhhdCdzIGhvdyBiYXRjaCByZW5hbWluZyB3b3JrcyBpbiB3aW5kb3dzIGJ5IGRlZmF1bHQuXHJcbiAgICAgKi9cclxuICAgIGFuaW1hdGlvbnNJbml0KCl7XHJcbiAgICAgICAgbGV0IGFuaW1hdGlvbk1hcCA9IG5ldyBNYXAoW1snd2FsaycsIHRoaXMubG9hZFNwcml0ZShcIndhbGtcIiwgMTAsIHRydWUpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdG9wJywgdGhpcy5sb2FkU3ByaXRlKFwic3RvcFwiLCA0LCBmYWxzZSldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ2lkbGUnLCB0aGlzLmxvYWRTcHJpdGUoXCJpZGxlXCIsIDksIGZhbHNlKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnanVtcCcsIHRoaXMubG9hZFNwcml0ZShcImp1bXBcIiwgOCwgZmFsc2UpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzbGlkZScsdGhpcy5sb2FkU3ByaXRlKFwic2xpZGVcIiwgNCwgZmFsc2UpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydoYW5nJywgdGhpcy5sb2FkU3ByaXRlKFwiaGFuZ1wiLCAzLCBmYWxzZSldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ2NsaW1iJywgdGhpcy5sb2FkU3ByaXRlKFwiY2xpbWJcIiwgOSwgZmFsc2UpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydmYWxsJywgdGhpcy5sb2FkU3ByaXRlKFwiZmFsbFwiLCA2LCB0cnVlKV1dKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBzZXQgdW5pcXVlIHByb3BlcnRpZXMgZm9yIHNvbWUgYW5pbWF0aW9uc1xyXG4gICAgICAgIGFuaW1hdGlvbk1hcC5nZXQoXCJzbGlkZVwiKS5hbmNob3IueSA9IDAuMztcclxuICAgICAgICBhbmltYXRpb25NYXAuZ2V0KFwiaGFuZ1wiKS5hbmNob3IueSA9IDAuMztcclxuICAgICAgICBhbmltYXRpb25NYXAuZ2V0KFwiY2xpbWJcIikuYW5jaG9yLnkgPSAwLjY1O1xyXG4gICAgICAgIGFuaW1hdGlvbk1hcC5nZXQoXCJjbGltYlwiKS5hbmNob3IueCA9IDAuODU7XHJcblxyXG4gICAgICAgIGFuaW1hdGlvbk1hcC5nZXQoXCJpZGxlXCIpLmFuaW1hdGlvblNwZWVkID0gMC4xNTtcclxuXHJcbiAgICAgICAgYW5pbWF0aW9uTWFwLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKCBrZXkgIT0gXCJqdW1wXCIpXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS52aXNpYmxlID0gZmFsc2U7IC8vIHNpbmNlIHRoZSBnYW1lIHN0YXJ0cyB3aXRoIHRoZSBjYXQgZmFsbGluZywgaGlkZSBvdGhlciBhbmltYXRpb25zXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGFuaW1hdGlvbk1hcC5nZXQoXCJqdW1wXCIpLnBsYXkoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbk1hcDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogbG9hZCB0ZXh0dXJlcyBmcm9tIG1lbW9yeSBpbnRvIGFuaW1hdGVkIHNwcml0ZSBvYmplY3RzICovIFxyXG4gICAgbG9hZFNwcml0ZShrZXksIGZyYW1lQ291bnQsIGRvZXNMb29wLCBhbmltYXRpb25TcGVlZCA9IDAuMiApe1xyXG4gICAgICAgIGxldCBmcmFtZXMgPSBbXTtcclxuICAgICAgICBmb3IgKCBsZXQgaSA9IDE7IGkgPCAoZnJhbWVDb3VudCsxKTsgaSsrICkge1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSBpO1xyXG4gICAgICAgICAgICBjb25zdCBrZXlTdHJpbmcgPSBgJHtrZXl9ICgke3ZhbH0pLnBuZ2A7XHJcbiAgICAgICAgICAgIGZyYW1lcy5wdXNoKFBJWEkuVGV4dHVyZS5mcm9tKGtleVN0cmluZykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG5ld1Nwcml0ZSA9IG5ldyBQSVhJLkFuaW1hdGVkU3ByaXRlKGZyYW1lcyk7XHJcbiAgICAgICAgbmV3U3ByaXRlLnggPSB3aW5kb3cuaW5uZXJXaWR0aCAvIDI7XHJcbiAgICAgICAgbmV3U3ByaXRlLnkgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyO1xyXG4gICAgICAgIG5ld1Nwcml0ZS52eCA9IDA7XHJcbiAgICAgICAgbmV3U3ByaXRlLnZ5ID0gMDtcclxuICAgICAgICBuZXdTcHJpdGUuc2NhbGUuc2V0KDMuNSwgMy41KTtcclxuICAgICAgICBuZXdTcHJpdGUuYW5jaG9yLnNldCgwLjUpO1xyXG4gICAgICAgIG5ld1Nwcml0ZS5hbmltYXRpb25TcGVlZCA9IGFuaW1hdGlvblNwZWVkO1xyXG4gICAgICAgIG5ld1Nwcml0ZS5sb29wID0gZG9lc0xvb3A7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG5ld1Nwcml0ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld1Nwcml0ZTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkVG9yY2goKXtcclxuICAgICAgICBsZXQgZnJhbWVzID0gW107XHJcbiAgICAgICAgZm9yICggbGV0IGkgPSAxOyBpIDwgMTA7IGkrKyl7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGk7XHJcbiAgICAgICAgICAgIGZyYW1lcy5wdXNoKFBJWEkuVGV4dHVyZS5mcm9tKGB0b3JjaCAoJHt2YWx9KS5wbmdgKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmcmFtZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIG11c3QgY2hhbmdlIHRoZSBmb3IgbG9vcCB3aGVuIG5ldyB0aWxlcyBhcmUgYWRkZWQgKi8gXHJcbiAgICBsb2FkVGlsZXMoKXtcclxuICAgICAgICBsZXQgdGV4dHVyZXMgPSBbXTtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKCBsZXQgaSA9IDE7IGkgPCAyNDsgaSsrICkge1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSBpOyAgICAgICBcclxuICAgICAgICAgICAgbGV0IHRleHR1cmUgPSBQSVhJLlRleHR1cmUuZnJvbShgY2F2ZVRpbGUgKCR7dmFsfSkucG5nYCk7IFxyXG4gICAgICAgICAgICB0ZXh0dXJlcy5wdXNoKCB0ZXh0dXJlICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBuZXcgTWFwKFtbJ0JhY2tncm91bmQnLCB0ZXh0dXJlc1swXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnVExDb3JuZXInLCB0ZXh0dXJlc1sxXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnVG9wRWRnZScsIHRleHR1cmVzWzJdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydUUkNvcm5lcicsIHRleHR1cmVzWzNdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydMZWZ0RWRnZScsIHRleHR1cmVzWzRdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydJbnRlcmlvcicsIHRleHR1cmVzWzVdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydSaWdodEVkZ2UnLCB0ZXh0dXJlc1s2XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnQkxDb3JuZXInLCB0ZXh0dXJlc1s3XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnQm90dG9tRWRnZScsIHRleHR1cmVzWzhdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydCUkNvcm5lcicsIHRleHR1cmVzWzldXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydXYW5nJywgdGV4dHVyZXNbMTBdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydTaGFmdCcsIHRleHR1cmVzWzExXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnTG9uZXInLCB0ZXh0dXJlc1sxM11dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ1NwaWtlcycsIHRleHR1cmVzWzE0XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnTW9vbicsIHRleHR1cmVzWzE1XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnU2t5JywgdGV4dHVyZXNbMTZdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydTdGFycy0xJywgdGV4dHVyZXNbMTddXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydTdGFycy0yJywgdGV4dHVyZXNbMThdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydTdGFycy0zJywgdGV4dHVyZXNbMTldXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydHcmFzcy0xJywgdGV4dHVyZXNbMjBdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydHcmFzcy0yJywgdGV4dHVyZXNbMjFdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydjYXRuaXAnLCB0ZXh0dXJlc1syMl1dLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkQnV0dG9ucygpe1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFBJWEkuVGV4dHVyZS5mcm9tKCdyaWdodC1rZXkgKDEpLnBuZycpKVxyXG4gICAgICAgIGxldCBidXR0b25GcmFtZXMgPSBuZXcgTWFwKFtbJ3JpZ2h0JywgW1BJWEkuVGV4dHVyZS5mcm9tKCdyaWdodC1rZXkgKDEpLnBuZycpLCBQSVhJLlRleHR1cmUuZnJvbSgncmlnaHQta2V5ICgyKS5wbmcnKV1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ2xlZnQnLCBbUElYSS5UZXh0dXJlLmZyb20oJ2xlZnQta2V5ICgxKS5wbmcnKSwgUElYSS5UZXh0dXJlLmZyb20oJ2xlZnQta2V5ICgyKS5wbmcnKV1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3VwJywgW1BJWEkuVGV4dHVyZS5mcm9tKCdhLWtleSAoMSkucG5nJyksIFBJWEkuVGV4dHVyZS5mcm9tKCdhLWtleSAoMikucG5nJyldXSxdKTtcclxuICAgICAgICByZXR1cm4gYnV0dG9uRnJhbWVzO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWRNZW51KCl7XHJcbiAgICAgICAgbGV0IGJ1dHRvbkZyYW1lcyA9IG5ldyBNYXAoW1sncGF1c2UnLCBQSVhJLlRleHR1cmUuZnJvbShcInBhdXNlLnBuZ1wiKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnZXhpdCcsIFBJWEkuVGV4dHVyZS5mcm9tKFwiZXhpdC1idXR0b24ucG5nXCIpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydwYXVzZWQtdGV4dCcsIFBJWEkuVGV4dHVyZS5mcm9tKFwicGF1c2VkLXRleHQucG5nXCIpXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICByZXR1cm4gYnV0dG9uRnJhbWVzO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWRTb3VuZCgpe1xyXG4gICAgICAgIHJldHVybiByZXNvdXJjZXMucGF1c2VNdXNpYy5kYXRhO1xyXG5cclxuICAgIH1cclxuICAgIFxyXG4gICAgbG9hZEZvbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc291cmNlcy5BUkNBREVDTEFTU0lDO1xyXG4gICAgfVxyXG59IiwiLyohXG4gKiBAcGl4aS9ydW5uZXIgLSB2NS4xLjFcbiAqIENvbXBpbGVkIEZyaSwgMDIgQXVnIDIwMTkgMjM6MjA6MjMgVVRDXG4gKlxuICogQHBpeGkvcnVubmVyIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBIFJ1bm5lciBpcyBhIGhpZ2hseSBwZXJmb3JtYW50IGFuZCBzaW1wbGUgYWx0ZXJuYXRpdmUgdG8gc2lnbmFscy4gQmVzdCB1c2VkIGluIHNpdHVhdGlvbnNcbiAqIHdoZXJlIGV2ZW50cyBhcmUgZGlzcGF0Y2hlZCB0byBtYW55IG9iamVjdHMgYXQgaGlnaCBmcmVxdWVuY3kgKHNheSBldmVyeSBmcmFtZSEpXG4gKlxuICpcbiAqIGxpa2UgYSBzaWduYWwuLlxuICogYGBgXG4gKiBjb25zdCBteU9iamVjdCA9IHtcbiAqICAgICBsb2FkZWQ6IG5ldyBQSVhJLlJ1bm5lcignbG9hZGVkJylcbiAqIH1cbiAqXG4gKiBjb25zdCBsaXN0ZW5lciA9IHtcbiAqICAgICBsb2FkZWQ6IGZ1bmN0aW9uKCl7XG4gKiAgICAgICAgIC8vIHRoaW5cbiAqICAgICB9XG4gKiB9XG4gKlxuICogbXlPYmplY3QudXBkYXRlLmFkZChsaXN0ZW5lcik7XG4gKlxuICogbXlPYmplY3QubG9hZGVkLmVtaXQoKTtcbiAqIGBgYFxuICpcbiAqIE9yIGZvciBoYW5kbGluZyBjYWxsaW5nIHRoZSBzYW1lIGZ1bmN0aW9uIG9uIG1hbnkgaXRlbXNcbiAqIGBgYFxuICogY29uc3QgbXlHYW1lID0ge1xuICogICAgIHVwZGF0ZTogbmV3IFBJWEkuUnVubmVyKCd1cGRhdGUnKVxuICogfVxuICpcbiAqIGNvbnN0IGdhbWVPYmplY3QgPSB7XG4gKiAgICAgdXBkYXRlOiBmdW5jdGlvbih0aW1lKXtcbiAqICAgICAgICAgLy8gdXBkYXRlIG15IGdhbWV5IHN0YXRlXG4gKiAgICAgfVxuICogfVxuICpcbiAqIG15R2FtZS51cGRhdGUuYWRkKGdhbWVPYmplY3QxKTtcbiAqXG4gKiBteUdhbWUudXBkYXRlLmVtaXQodGltZSk7XG4gKiBgYGBcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFJ1bm5lciA9IGZ1bmN0aW9uIFJ1bm5lcihuYW1lKVxue1xuICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICB0aGlzLl9hbGlhc0NvdW50ID0gMDtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGVtcHR5OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG5hbWU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLyoqXG4gKiBEaXNwYXRjaC9Ccm9hZGNhc3QgUnVubmVyIHRvIGFsbCBsaXN0ZW5lcnMgYWRkZWQgdG8gdGhlIHF1ZXVlLlxuICogQHBhcmFtIHsuLi5hbnl9IHBhcmFtcyAtIG9wdGlvbmFsIHBhcmFtZXRlcnMgdG8gcGFzcyB0byBlYWNoIGxpc3RlbmVyXG4gKi9cblJ1bm5lci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQgKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNylcbntcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDgpXG4gICAge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21heCBhcmd1bWVudHMgcmVhY2hlZCcpO1xuICAgIH1cblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgbmFtZSA9IHJlZi5uYW1lO1xuICAgICAgICB2YXIgaXRlbXMgPSByZWYuaXRlbXM7XG5cbiAgICB0aGlzLl9hbGlhc0NvdW50Kys7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspXG4gICAge1xuICAgICAgICBpdGVtc1tpXVtuYW1lXShhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuICAgIH1cblxuICAgIGlmIChpdGVtcyA9PT0gdGhpcy5pdGVtcylcbiAgICB7XG4gICAgICAgIHRoaXMuX2FsaWFzQ291bnQtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblJ1bm5lci5wcm90b3R5cGUuZW5zdXJlTm9uQWxpYXNlZEl0ZW1zID0gZnVuY3Rpb24gZW5zdXJlTm9uQWxpYXNlZEl0ZW1zICgpXG57XG4gICAgaWYgKHRoaXMuX2FsaWFzQ291bnQgPiAwICYmIHRoaXMuaXRlbXMubGVuZ3RoID4gMSlcbiAgICB7XG4gICAgICAgIHRoaXMuX2FsaWFzQ291bnQgPSAwO1xuICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5zbGljZSgwKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIHRvIHRoZSBSdW5uZXJcbiAqXG4gKiBSdW5uZXJzIGRvIG5vdCBuZWVkIHRvIGhhdmUgc2NvcGUgb3IgZnVuY3Rpb25zIHBhc3NlZCB0byB0aGVtLlxuICogQWxsIHRoYXQgaXMgcmVxdWlyZWQgaXMgdG8gcGFzcyB0aGUgbGlzdGVuaW5nIG9iamVjdCBhbmQgZW5zdXJlIHRoYXQgaXQgaGFzIGNvbnRhaW5zIGEgZnVuY3Rpb24gdGhhdCBoYXMgdGhlIHNhbWUgbmFtZVxuICogYXMgdGhlIG5hbWUgcHJvdmlkZWQgdG8gdGhlIFJ1bm5lciB3aGVuIGl0IHdhcyBjcmVhdGVkLlxuICpcbiAqIEVnIEEgbGlzdGVuZXIgcGFzc2VkIHRvIHRoaXMgUnVubmVyIHdpbGwgcmVxdWlyZSBhICdjb21wbGV0ZScgZnVuY3Rpb24uXG4gKlxuICogYGBgXG4gKiBjb25zdCBjb21wbGV0ZSA9IG5ldyBQSVhJLlJ1bm5lcignY29tcGxldGUnKTtcbiAqIGBgYFxuICpcbiAqIFRoZSBzY29wZSB1c2VkIHdpbGwgYmUgdGhlIG9iamVjdCBpdHNlbGYuXG4gKlxuICogQHBhcmFtIHthbnl9IGl0ZW0gLSBUaGUgb2JqZWN0IHRoYXQgd2lsbCBiZSBsaXN0ZW5pbmcuXG4gKi9cblJ1bm5lci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChpdGVtKVxue1xuICAgIGlmIChpdGVtW3RoaXMuX25hbWVdKVxuICAgIHtcbiAgICAgICAgdGhpcy5lbnN1cmVOb25BbGlhc2VkSXRlbXMoKTtcbiAgICAgICAgdGhpcy5yZW1vdmUoaXRlbSk7XG4gICAgICAgIHRoaXMuaXRlbXMucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGEgc2luZ2xlIGxpc3RlbmVyIGZyb20gdGhlIGRpc3BhdGNoIHF1ZXVlLlxuICogQHBhcmFtIHthbnl9IGl0ZW0gLSBUaGUgbGlzdGVuciB0aGF0IHlvdSB3b3VsZCBsaWtlIHRvIHJlbW92ZS5cbiAqL1xuUnVubmVyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUgKGl0ZW0pXG57XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pdGVtcy5pbmRleE9mKGl0ZW0pO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICB7XG4gICAgICAgIHRoaXMuZW5zdXJlTm9uQWxpYXNlZEl0ZW1zKCk7XG4gICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIHRoZSBsaXN0ZW5lciBpcyBhbHJlYWR5IGluIHRoZSBSdW5uZXJcbiAqIEBwYXJhbSB7YW55fSBpdGVtIC0gVGhlIGxpc3RlbmVyIHRoYXQgeW91IHdvdWxkIGxpa2UgdG8gY2hlY2suXG4gKi9cblJ1bm5lci5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyAoaXRlbSlcbntcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5pbmRleE9mKGl0ZW0pICE9PSAtMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZnJvbSB0aGUgUnVubmVyXG4gKi9cblJ1bm5lci5wcm90b3R5cGUucmVtb3ZlQWxsID0gZnVuY3Rpb24gcmVtb3ZlQWxsICgpXG57XG4gICAgdGhpcy5lbnN1cmVOb25BbGlhc2VkSXRlbXMoKTtcbiAgICB0aGlzLml0ZW1zLmxlbmd0aCA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCByZWZlcmVuY2VzLCBkb24ndCB1c2UgYWZ0ZXIgdGhpcy5cbiAqL1xuUnVubmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIHRoaXMucmVtb3ZlQWxsKCk7XG4gICAgdGhpcy5pdGVtcyA9IG51bGw7XG4gICAgdGhpcy5fbmFtZSA9IG51bGw7XG59O1xuXG4vKipcbiAqIGB0cnVlYCBpZiB0aGVyZSBhcmUgbm8gdGhpcyBSdW5uZXIgY29udGFpbnMgbm8gbGlzdGVuZXJzXG4gKlxuICogQG1lbWJlciB7Ym9vbGVhbn1cbiAqIEByZWFkb25seVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuZW1wdHkuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5sZW5ndGggPT09IDA7XG59O1xuXG4vKipcbiAqIFRoZSBuYW1lIG9mIHRoZSBydW5uZXIuXG4gKlxuICogQG1lbWJlciB7c3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5uYW1lLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggUnVubmVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbi8qKlxuICogQWxpYXMgZm9yIGBlbWl0YFxuICogQG1lbWJlcm9mIFBJWEkuUnVubmVyI1xuICogQG1ldGhvZCBkaXNwYXRjaFxuICogQHNlZSBQSVhJLlJ1bm5lciNlbWl0XG4gKi9cblJ1bm5lci5wcm90b3R5cGUuZGlzcGF0Y2ggPSBSdW5uZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogQWxpYXMgZm9yIGBlbWl0YFxuICogQG1lbWJlcm9mIFBJWEkuUnVubmVyI1xuICogQG1ldGhvZCBydW5cbiAqIEBzZWUgUElYSS5SdW5uZXIjZW1pdFxuICovXG5SdW5uZXIucHJvdG90eXBlLnJ1biA9IFJ1bm5lci5wcm90b3R5cGUuZW1pdDtcblxuZXhwb3J0IHsgUnVubmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW5uZXIuZXMuanMubWFwXG4iLCIvKiFcbiAqIEBwaXhpL3NldHRpbmdzIC0gdjUuMS4zXG4gKiBDb21waWxlZCBNb24sIDA5IFNlcCAyMDE5IDA0OjUxOjUzIFVUQ1xuICpcbiAqIEBwaXhpL3NldHRpbmdzIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuaW1wb3J0IGlzTW9iaWxlIGZyb20gJ2lzbW9iaWxlanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc01vYmlsZSB9IGZyb20gJ2lzbW9iaWxlanMnO1xuXG4vKipcbiAqIFRoZSBtYXhpbXVtIHJlY29tbWVuZGVkIHRleHR1cmUgdW5pdHMgdG8gdXNlLlxuICogSW4gdGhlb3J5IHRoZSBiaWdnZXIgdGhlIGJldHRlciwgYW5kIGZvciBkZXNrdG9wIHdlJ2xsIHVzZSBhcyBtYW55IGFzIHdlIGNhbi5cbiAqIEJ1dCBzb21lIG1vYmlsZSBkZXZpY2VzIHNsb3cgZG93biBpZiB0aGVyZSBpcyB0byBtYW55IGJyYW5jaGVzIGluIHRoZSBzaGFkZXIuXG4gKiBTbyBpbiBwcmFjdGljZSB0aGVyZSBzZWVtcyB0byBiZSBhIHN3ZWV0IHNwb3Qgc2l6ZSB0aGF0IHZhcmllcyBkZXBlbmRpbmcgb24gdGhlIGRldmljZS5cbiAqXG4gKiBJbiB2NCwgYWxsIG1vYmlsZSBkZXZpY2VzIHdlcmUgbGltaXRlZCB0byA0IHRleHR1cmUgdW5pdHMgYmVjYXVzZSBmb3IgdGhpcy5cbiAqIEluIHY1LCB3ZSBhbGxvdyBhbGwgdGV4dHVyZSB1bml0cyB0byBiZSB1c2VkIG9uIG1vZGVybiBBcHBsZSBvciBBbmRyb2lkIGRldmljZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIG1heFJlY29tbWVuZGVkVGV4dHVyZXMobWF4KVxue1xuICAgIHZhciBhbGxvd01heCA9IHRydWU7XG5cbiAgICBpZiAoaXNNb2JpbGUudGFibGV0IHx8IGlzTW9iaWxlLnBob25lKVxuICAgIHtcbiAgICAgICAgYWxsb3dNYXggPSBmYWxzZTtcblxuICAgICAgICBpZiAoaXNNb2JpbGUuYXBwbGUuZGV2aWNlKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSAobmF2aWdhdG9yLnVzZXJBZ2VudCkubWF0Y2goL09TIChcXGQrKV8oXFxkKyk/Lyk7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFqb3JWZXJzaW9uID0gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTtcblxuICAgICAgICAgICAgICAgIC8vIEFsbCB0ZXh0dXJlIHVuaXRzIGNhbiBiZSB1c2VkIG9uIGRldmljZXMgdGhhdCBzdXBwb3J0IGlvcyAxMSBvciBhYm92ZVxuICAgICAgICAgICAgICAgIGlmIChtYWpvclZlcnNpb24gPj0gMTEpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd01heCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc01vYmlsZS5hbmRyb2lkLmRldmljZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDEgPSAobmF2aWdhdG9yLnVzZXJBZ2VudCkubWF0Y2goL0FuZHJvaWRcXHMoWzAtOS5dKikvKTtcblxuICAgICAgICAgICAgaWYgKG1hdGNoJDEpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIG1ham9yVmVyc2lvbiQxID0gcGFyc2VJbnQobWF0Y2gkMVsxXSwgMTApO1xuXG4gICAgICAgICAgICAgICAgLy8gQWxsIHRleHR1cmUgdW5pdHMgY2FuIGJlIHVzZWQgb24gZGV2aWNlcyB0aGF0IHN1cHBvcnQgQW5kcm9pZCA3IChOb3VnYXQpIG9yIGFib3ZlXG4gICAgICAgICAgICAgICAgaWYgKG1ham9yVmVyc2lvbiQxID49IDcpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd01heCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFsbG93TWF4ID8gbWF4IDogNDtcbn1cblxuLyoqXG4gKiBVcGxvYWRpbmcgdGhlIHNhbWUgYnVmZmVyIG11bHRpcGxlIHRpbWVzIGluIGEgc2luZ2xlIGZyYW1lIGNhbiBjYXVzZSBwZXJmb3JtYW5jZSBpc3N1ZXMuXG4gKiBBcHBhcmVudCBvbiBpT1Mgc28gb25seSBjaGVjayBmb3IgdGhhdCBhdCB0aGUgbW9tZW50XG4gKiBUaGlzIGNoZWNrIG1heSBiZWNvbWUgbW9yZSBjb21wbGV4IGlmIHRoaXMgaXNzdWUgcG9wcyB1cCBlbHNld2hlcmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjYW5VcGxvYWRTYW1lQnVmZmVyKClcbntcbiAgICByZXR1cm4gIWlzTW9iaWxlLmFwcGxlLmRldmljZTtcbn1cblxuLyoqXG4gKiBVc2VyJ3MgY3VzdG9taXphYmxlIGdsb2JhbHMgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHQgUElYSSBzZXR0aW5ncywgc3VjaFxuICogYXMgYSByZW5kZXJlcidzIGRlZmF1bHQgcmVzb2x1dGlvbiwgZnJhbWVyYXRlLCBmbG9hdCBwcmVjaXNpb24sIGV0Yy5cbiAqIEBleGFtcGxlXG4gKiAvLyBVc2UgdGhlIG5hdGl2ZSB3aW5kb3cgcmVzb2x1dGlvbiBhcyB0aGUgZGVmYXVsdCByZXNvbHV0aW9uXG4gKiAvLyB3aWxsIHN1cHBvcnQgaGlnaC1kZW5zaXR5IGRpc3BsYXlzIHdoZW4gcmVuZGVyaW5nXG4gKiBQSVhJLnNldHRpbmdzLlJFU09MVVRJT04gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAqXG4gKiAvLyBEaXNhYmxlIGludGVycG9sYXRpb24gd2hlbiBzY2FsaW5nLCB3aWxsIG1ha2UgdGV4dHVyZSBiZSBwaXhlbGF0ZWRcbiAqIFBJWEkuc2V0dGluZ3MuU0NBTEVfTU9ERSA9IFBJWEkuU0NBTEVfTU9ERVMuTkVBUkVTVDtcbiAqIEBuYW1lc3BhY2UgUElYSS5zZXR0aW5nc1xuICovXG52YXIgc2V0dGluZ3MgPSB7XG5cbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSBXZWJHTCB3aWxsIGF0dGVtcHQgbWFrZSB0ZXh0dXJlcyBtaW1wYXBlZCBieSBkZWZhdWx0LlxuICAgICAqIE1pcG1hcHBpbmcgd2lsbCBvbmx5IHN1Y2NlZWQgaWYgdGhlIGJhc2UgdGV4dHVyZSB1cGxvYWRlZCBoYXMgcG93ZXIgb2YgdHdvIGRpbWVuc2lvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgTUlQTUFQX1RFWFRVUkVTXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7UElYSS5NSVBNQVBfTU9ERVN9XG4gICAgICogQGRlZmF1bHQgUElYSS5NSVBNQVBfTU9ERVMuUE9XMlxuICAgICAqL1xuICAgIE1JUE1BUF9URVhUVVJFUzogMSxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgYW5pc290cm9waWMgZmlsdGVyaW5nIGxldmVsIG9mIHRleHR1cmVzLlxuICAgICAqIFVzdWFsbHkgZnJvbSAwIHRvIDE2XG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgQU5JU09UUk9QSUNfTEVWRUxcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIEFOSVNPVFJPUElDX0xFVkVMOiAwLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCByZXNvbHV0aW9uIC8gZGV2aWNlIHBpeGVsIHJhdGlvIG9mIHRoZSByZW5kZXJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbmFtZSBSRVNPTFVUSU9OXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICBSRVNPTFVUSU9OOiAxLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBmaWx0ZXIgcmVzb2x1dGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbmFtZSBGSUxURVJfUkVTT0xVVElPTlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgRklMVEVSX1JFU09MVVRJT046IDEsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSB0ZXh0dXJlcyB0aGF0IHRoaXMgZGV2aWNlIHN1cHBvcnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIFNQUklURV9NQVhfVEVYVFVSRVNcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMzJcbiAgICAgKi9cbiAgICBTUFJJVEVfTUFYX1RFWFRVUkVTOiBtYXhSZWNvbW1lbmRlZFRleHR1cmVzKDMyKSxcblxuICAgIC8vIFRPRE86IG1heWJlIGNoYW5nZSB0byBTUFJJVEUuQkFUQ0hfU0laRTogMjAwMFxuICAgIC8vIFRPRE86IG1heWJlIGFkZCBQQVJUSUNMRS5CQVRDSF9TSVpFOiAxNTAwMFxuXG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgc3ByaXRlIGJhdGNoIHNpemUuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCBhaW1zIHRvIGJhbGFuY2UgZGVza3RvcCBhbmQgbW9iaWxlIGRldmljZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgU1BSSVRFX0JBVENIX1NJWkVcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgNDA5NlxuICAgICAqL1xuICAgIFNQUklURV9CQVRDSF9TSVpFOiA0MDk2LFxuXG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgcmVuZGVyIG9wdGlvbnMgaWYgbm9uZSBhcmUgc3VwcGxpZWQgdG8ge0BsaW5rIFBJWEkuUmVuZGVyZXJ9XG4gICAgICogb3Ige0BsaW5rIFBJWEkuQ2FudmFzUmVuZGVyZXJ9LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIFJFTkRFUl9PUFRJT05TXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7SFRNTENhbnZhc0VsZW1lbnR9IHZpZXc9bnVsbFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByZXNvbHV0aW9uPTFcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGFudGlhbGlhcz1mYWxzZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZm9yY2VGWEFBPWZhbHNlXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBhdXRvRGVuc2l0eT1mYWxzZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdHJhbnNwYXJlbnQ9ZmFsc2VcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmFja2dyb3VuZENvbG9yPTB4MDAwMDAwXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBjbGVhckJlZm9yZVJlbmRlcj10cnVlXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI9ZmFsc2VcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gd2lkdGg9ODAwXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodD02MDBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGxlZ2FjeT1mYWxzZVxuICAgICAqL1xuICAgIFJFTkRFUl9PUFRJT05TOiB7XG4gICAgICAgIHZpZXc6IG51bGwsXG4gICAgICAgIGFudGlhbGlhczogZmFsc2UsXG4gICAgICAgIGZvcmNlRlhBQTogZmFsc2UsXG4gICAgICAgIGF1dG9EZW5zaXR5OiBmYWxzZSxcbiAgICAgICAgdHJhbnNwYXJlbnQ6IGZhbHNlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IDB4MDAwMDAwLFxuICAgICAgICBjbGVhckJlZm9yZVJlbmRlcjogdHJ1ZSxcbiAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6IDgwMCxcbiAgICAgICAgaGVpZ2h0OiA2MDAsXG4gICAgICAgIGxlZ2FjeTogZmFsc2UsXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgR2FyYmFnZSBDb2xsZWN0aW9uIG1vZGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgR0NfTU9ERVxuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge1BJWEkuR0NfTU9ERVN9XG4gICAgICogQGRlZmF1bHQgUElYSS5HQ19NT0RFUy5BVVRPXG4gICAgICovXG4gICAgR0NfTU9ERTogMCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgR2FyYmFnZSBDb2xsZWN0aW9uIG1heCBpZGxlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIEdDX01BWF9JRExFXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDM2MDBcbiAgICAgKi9cbiAgICBHQ19NQVhfSURMRTogNjAgKiA2MCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgR2FyYmFnZSBDb2xsZWN0aW9uIG1heGltdW0gY2hlY2sgY291bnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgR0NfTUFYX0NIRUNLX0NPVU5UXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDYwMFxuICAgICAqL1xuICAgIEdDX01BWF9DSEVDS19DT1VOVDogNjAgKiAxMCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgd3JhcCBtb2RlcyB0aGF0IGFyZSBzdXBwb3J0ZWQgYnkgcGl4aS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbmFtZSBXUkFQX01PREVcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtQSVhJLldSQVBfTU9ERVN9XG4gICAgICogQGRlZmF1bHQgUElYSS5XUkFQX01PREVTLkNMQU1QXG4gICAgICovXG4gICAgV1JBUF9NT0RFOiAzMzA3MSxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgc2NhbGUgbW9kZSBmb3IgdGV4dHVyZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgU0NBTEVfTU9ERVxuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge1BJWEkuU0NBTEVfTU9ERVN9XG4gICAgICogQGRlZmF1bHQgUElYSS5TQ0FMRV9NT0RFUy5MSU5FQVJcbiAgICAgKi9cbiAgICBTQ0FMRV9NT0RFOiAxLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBzcGVjaWZ5IGZsb2F0IHByZWNpc2lvbiBpbiB2ZXJ0ZXggc2hhZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIFBSRUNJU0lPTl9WRVJURVhcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtQSVhJLlBSRUNJU0lPTn1cbiAgICAgKiBAZGVmYXVsdCBQSVhJLlBSRUNJU0lPTi5ISUdIXG4gICAgICovXG4gICAgUFJFQ0lTSU9OX1ZFUlRFWDogJ2hpZ2hwJyxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgc3BlY2lmeSBmbG9hdCBwcmVjaXNpb24gaW4gZnJhZ21lbnQgc2hhZGVyLlxuICAgICAqIGlPUyBpcyBiZXN0IHNldCBhdCBoaWdocCBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL3BpeGlqcy9waXhpLmpzL2lzc3Vlcy8zNzQyXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgUFJFQ0lTSU9OX0ZSQUdNRU5UXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7UElYSS5QUkVDSVNJT059XG4gICAgICogQGRlZmF1bHQgUElYSS5QUkVDSVNJT04uTUVESVVNXG4gICAgICovXG4gICAgUFJFQ0lTSU9OX0ZSQUdNRU5UOiBpc01vYmlsZS5hcHBsZS5kZXZpY2UgPyAnaGlnaHAnIDogJ21lZGl1bXAnLFxuXG4gICAgLyoqXG4gICAgICogQ2FuIHdlIHVwbG9hZCB0aGUgc2FtZSBidWZmZXIgaW4gYSBzaW5nbGUgZnJhbWU/XG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgQ0FOX1VQTE9BRF9TQU1FX0JVRkZFUlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgQ0FOX1VQTE9BRF9TQU1FX0JVRkZFUjogY2FuVXBsb2FkU2FtZUJ1ZmZlcigpLFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBiaXRtYXAgY3JlYXRpb24gYmVmb3JlIGltYWdlIGxvYWQuIFRoaXMgZmVhdHVyZSBpcyBleHBlcmltZW50YWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG5hbWUgQ1JFQVRFX0lNQUdFX0JJVE1BUFxuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBDUkVBVEVfSU1BR0VfQklUTUFQOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUgUGl4aUpTIHdpbGwgTWF0aC5mbG9vcigpIHgveSB2YWx1ZXMgd2hlbiByZW5kZXJpbmcsIHN0b3BwaW5nIHBpeGVsIGludGVycG9sYXRpb24uXG4gICAgICogQWR2YW50YWdlcyBjYW4gaW5jbHVkZSBzaGFycGVyIGltYWdlIHF1YWxpdHkgKGxpa2UgdGV4dCkgYW5kIGZhc3RlciByZW5kZXJpbmcgb24gY2FudmFzLlxuICAgICAqIFRoZSBtYWluIGRpc2FkdmFudGFnZSBpcyBtb3ZlbWVudCBvZiBvYmplY3RzIG1heSBhcHBlYXIgbGVzcyBzbW9vdGguXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQGNvbnN0YW50XG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIFJPVU5EX1BJWEVMUzogZmFsc2UsXG59O1xuXG5leHBvcnQgeyBzZXR0aW5ncyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0dGluZ3MuZXMuanMubWFwXG4iLCIvKiFcbiAqIEBwaXhpL2NvbnN0YW50cyAtIHY1LjEuMFxuICogQ29tcGlsZWQgRnJpLCAxOSBKdWwgMjAxOSAyMTo1NDozNiBVVENcbiAqXG4gKiBAcGl4aS9jb25zdGFudHMgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovXG4vKipcbiAqIERpZmZlcmVudCB0eXBlcyBvZiBlbnZpcm9ubWVudHMgZm9yIFdlYkdMLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAbmFtZSBFTlZcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKiBAcHJvcGVydHkge251bWJlcn0gV0VCR0xfTEVHQUNZIC0gVXNlZCBmb3Igb2xkZXIgdjEgV2ViR0wgZGV2aWNlcy4gUGl4aUpTIHdpbGwgYWltIHRvIGVuc3VyZSBjb21wYXRpYmlsaXR5XG4gKiAgd2l0aCBvbGRlciAvIGxlc3MgYWR2YW5jZWQgZGV2aWNlcy4gSWYgeW91IGV4cGVyaWVuY2UgdW5leHBsYWluZWQgZmxpY2tlcmluZyBwcmVmZXIgdGhpcyBlbnZpcm9ubWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBXRUJHTCAtIFZlcnNpb24gMSBvZiBXZWJHTFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFdFQkdMMiAtIFZlcnNpb24gMiBvZiBXZWJHTFxuICovXG52YXIgRU5WID0ge1xuICAgIFdFQkdMX0xFR0FDWTogMCxcbiAgICBXRUJHTDogMSxcbiAgICBXRUJHTDI6IDIsXG59O1xuXG4vKipcbiAqIENvbnN0YW50IHRvIGlkZW50aWZ5IHRoZSBSZW5kZXJlciBUeXBlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAbmFtZSBSRU5ERVJFUl9UWVBFXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFVOS05PV04gLSBVbmtub3duIHJlbmRlciB0eXBlLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFdFQkdMIC0gV2ViR0wgcmVuZGVyIHR5cGUuXG4gKiBAcHJvcGVydHkge251bWJlcn0gQ0FOVkFTIC0gQ2FudmFzIHJlbmRlciB0eXBlLlxuICovXG52YXIgUkVOREVSRVJfVFlQRSA9IHtcbiAgICBVTktOT1dOOiAgICAwLFxuICAgIFdFQkdMOiAgICAgIDEsXG4gICAgQ0FOVkFTOiAgICAgMixcbn07XG5cbi8qKlxuICogVmFyaW91cyBibGVuZCBtb2RlcyBzdXBwb3J0ZWQgYnkgUElYSS5cbiAqXG4gKiBJTVBPUlRBTlQgLSBUaGUgV2ViR0wgcmVuZGVyZXIgb25seSBzdXBwb3J0cyB0aGUgTk9STUFMLCBBREQsIE1VTFRJUExZIGFuZCBTQ1JFRU4gYmxlbmQgbW9kZXMuXG4gKiBBbnl0aGluZyBlbHNlIHdpbGwgc2lsZW50bHkgYWN0IGxpa2UgTk9STUFMLlxuICpcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAbmFtZSBCTEVORF9NT0RFU1xuICogQGVudW0ge251bWJlcn1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBOT1JNQUxcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBBRERcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBNVUxUSVBMWVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFNDUkVFTlxuICogQHByb3BlcnR5IHtudW1iZXJ9IE9WRVJMQVlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBEQVJLRU5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBMSUdIVEVOXG4gKiBAcHJvcGVydHkge251bWJlcn0gQ09MT1JfRE9ER0VcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBDT0xPUl9CVVJOXG4gKiBAcHJvcGVydHkge251bWJlcn0gSEFSRF9MSUdIVFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFNPRlRfTElHSFRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBESUZGRVJFTkNFXG4gKiBAcHJvcGVydHkge251bWJlcn0gRVhDTFVTSU9OXG4gKiBAcHJvcGVydHkge251bWJlcn0gSFVFXG4gKiBAcHJvcGVydHkge251bWJlcn0gU0FUVVJBVElPTlxuICogQHByb3BlcnR5IHtudW1iZXJ9IENPTE9SXG4gKiBAcHJvcGVydHkge251bWJlcn0gTFVNSU5PU0lUWVxuICogQHByb3BlcnR5IHtudW1iZXJ9IE5PUk1BTF9OUE1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBBRERfTlBNXG4gKiBAcHJvcGVydHkge251bWJlcn0gU0NSRUVOX05QTVxuICogQHByb3BlcnR5IHtudW1iZXJ9IE5PTkVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBTUkNfSU5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBTUkNfT1VUXG4gKiBAcHJvcGVydHkge251bWJlcn0gU1JDX0FUT1BcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBEU1RfT1ZFUlxuICogQHByb3BlcnR5IHtudW1iZXJ9IERTVF9JTlxuICogQHByb3BlcnR5IHtudW1iZXJ9IERTVF9PVVRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBEU1RfQVRPUFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFNVQlRSQUNUXG4gKiBAcHJvcGVydHkge251bWJlcn0gU1JDX09WRVJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBFUkFTRVxuICovXG52YXIgQkxFTkRfTU9ERVMgPSB7XG4gICAgTk9STUFMOiAgICAgICAgIDAsXG4gICAgQUREOiAgICAgICAgICAgIDEsXG4gICAgTVVMVElQTFk6ICAgICAgIDIsXG4gICAgU0NSRUVOOiAgICAgICAgIDMsXG4gICAgT1ZFUkxBWTogICAgICAgIDQsXG4gICAgREFSS0VOOiAgICAgICAgIDUsXG4gICAgTElHSFRFTjogICAgICAgIDYsXG4gICAgQ09MT1JfRE9ER0U6ICAgIDcsXG4gICAgQ09MT1JfQlVSTjogICAgIDgsXG4gICAgSEFSRF9MSUdIVDogICAgIDksXG4gICAgU09GVF9MSUdIVDogICAgIDEwLFxuICAgIERJRkZFUkVOQ0U6ICAgICAxMSxcbiAgICBFWENMVVNJT046ICAgICAgMTIsXG4gICAgSFVFOiAgICAgICAgICAgIDEzLFxuICAgIFNBVFVSQVRJT046ICAgICAxNCxcbiAgICBDT0xPUjogICAgICAgICAgMTUsXG4gICAgTFVNSU5PU0lUWTogICAgIDE2LFxuICAgIE5PUk1BTF9OUE06ICAgICAxNyxcbiAgICBBRERfTlBNOiAgICAgICAgMTgsXG4gICAgU0NSRUVOX05QTTogICAgIDE5LFxuICAgIE5PTkU6ICAgICAgICAgICAyMCxcblxuICAgIFNSQ19PVkVSOiAgICAgICAwLFxuICAgIFNSQ19JTjogICAgICAgICAyMSxcbiAgICBTUkNfT1VUOiAgICAgICAgMjIsXG4gICAgU1JDX0FUT1A6ICAgICAgIDIzLFxuICAgIERTVF9PVkVSOiAgICAgICAyNCxcbiAgICBEU1RfSU46ICAgICAgICAgMjUsXG4gICAgRFNUX09VVDogICAgICAgIDI2LFxuICAgIERTVF9BVE9QOiAgICAgICAyNyxcbiAgICBFUkFTRTogICAgICAgICAgMjYsXG4gICAgU1VCVFJBQ1Q6ICAgICAgIDI4LFxufTtcblxuLyoqXG4gKiBWYXJpb3VzIHdlYmdsIGRyYXcgbW9kZXMuIFRoZXNlIGNhbiBiZSB1c2VkIHRvIHNwZWNpZnkgd2hpY2ggR0wgZHJhd01vZGUgdG8gdXNlXG4gKiB1bmRlciBjZXJ0YWluIHNpdHVhdGlvbnMgYW5kIHJlbmRlcmVycy5cbiAqXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHN0YXRpY1xuICogQG5hbWUgRFJBV19NT0RFU1xuICogQGVudW0ge251bWJlcn1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBQT0lOVFNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBMSU5FU1xuICogQHByb3BlcnR5IHtudW1iZXJ9IExJTkVfTE9PUFxuICogQHByb3BlcnR5IHtudW1iZXJ9IExJTkVfU1RSSVBcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBUUklBTkdMRVNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBUUklBTkdMRV9TVFJJUFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRSSUFOR0xFX0ZBTlxuICovXG52YXIgRFJBV19NT0RFUyA9IHtcbiAgICBQT0lOVFM6ICAgICAgICAgMCxcbiAgICBMSU5FUzogICAgICAgICAgMSxcbiAgICBMSU5FX0xPT1A6ICAgICAgMixcbiAgICBMSU5FX1NUUklQOiAgICAgMyxcbiAgICBUUklBTkdMRVM6ICAgICAgNCxcbiAgICBUUklBTkdMRV9TVFJJUDogNSxcbiAgICBUUklBTkdMRV9GQU46ICAgNixcbn07XG5cbi8qKlxuICogVmFyaW91cyBHTCB0ZXh0dXJlL3Jlc291cmNlcyBmb3JtYXRzLlxuICpcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBGT1JNQVRTXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFJHQkE9NjQwOFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFJHQj02NDA3XG4gKiBAcHJvcGVydHkge251bWJlcn0gQUxQSEE9NjQwNlxuICogQHByb3BlcnR5IHtudW1iZXJ9IExVTUlOQU5DRT02NDA5XG4gKiBAcHJvcGVydHkge251bWJlcn0gTFVNSU5BTkNFX0FMUEhBPTY0MTBcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBERVBUSF9DT01QT05FTlQ9NjQwMlxuICogQHByb3BlcnR5IHtudW1iZXJ9IERFUFRIX1NURU5DSUw9MzQwNDFcbiAqL1xudmFyIEZPUk1BVFMgPSB7XG4gICAgUkdCQTogICAgICAgICAgICAgNjQwOCxcbiAgICBSR0I6ICAgICAgICAgICAgICA2NDA3LFxuICAgIEFMUEhBOiAgICAgICAgICAgIDY0MDYsXG4gICAgTFVNSU5BTkNFOiAgICAgICAgNjQwOSxcbiAgICBMVU1JTkFOQ0VfQUxQSEE6ICA2NDEwLFxuICAgIERFUFRIX0NPTVBPTkVOVDogIDY0MDIsXG4gICAgREVQVEhfU1RFTkNJTDogICAgMzQwNDEsXG59O1xuXG4vKipcbiAqIFZhcmlvdXMgR0wgdGFyZ2V0IHR5cGVzLlxuICpcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBUQVJHRVRTXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRFWFRVUkVfMkQ9MzU1M1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFRFWFRVUkVfQ1VCRV9NQVA9MzQwNjdcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBURVhUVVJFXzJEX0FSUkFZPTM1ODY2XG4gKiBAcHJvcGVydHkge251bWJlcn0gVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YPTM0MDY5XG4gKiBAcHJvcGVydHkge251bWJlcn0gVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YPTM0MDcwXG4gKiBAcHJvcGVydHkge251bWJlcn0gVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9ZPTM0MDcxXG4gKiBAcHJvcGVydHkge251bWJlcn0gVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9ZPTM0MDcyXG4gKiBAcHJvcGVydHkge251bWJlcn0gVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aPTM0MDczXG4gKiBAcHJvcGVydHkge251bWJlcn0gVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9aPTM0MDc0XG4gKi9cbnZhciBUQVJHRVRTID0ge1xuICAgIFRFWFRVUkVfMkQ6IDM1NTMsXG4gICAgVEVYVFVSRV9DVUJFX01BUDogMzQwNjcsXG4gICAgVEVYVFVSRV8yRF9BUlJBWTogMzU4NjYsXG4gICAgVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YOiAzNDA2OSxcbiAgICBURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1g6IDM0MDcwLFxuICAgIFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWTogMzQwNzEsXG4gICAgVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9ZOiAzNDA3MixcbiAgICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1o6IDM0MDczLFxuICAgIFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWjogMzQwNzQsXG59O1xuXG4vKipcbiAqIFZhcmlvdXMgR0wgZGF0YSBmb3JtYXQgdHlwZXMuXG4gKlxuICogQG1lbWJlcm9mIFBJWElcbiAqIEBzdGF0aWNcbiAqIEBuYW1lIFRZUEVTXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFVOU0lHTkVEX0JZVEU9NTEyMVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFVOU0lHTkVEX1NIT1JUPTUxMjNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBVTlNJR05FRF9TSE9SVF81XzZfNT0zMzYzNVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFVOU0lHTkVEX1NIT1JUXzRfNF80XzQ9MzI4MTlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBVTlNJR05FRF9TSE9SVF81XzVfNV8xPTMyODIwXG4gKiBAcHJvcGVydHkge251bWJlcn0gRkxPQVQ9NTEyNlxuICogQHByb3BlcnR5IHtudW1iZXJ9IEhBTEZfRkxPQVQ9MzYxOTNcbiAqL1xudmFyIFRZUEVTID0ge1xuICAgIFVOU0lHTkVEX0JZVEU6IDUxMjEsXG4gICAgVU5TSUdORURfU0hPUlQ6IDUxMjMsXG4gICAgVU5TSUdORURfU0hPUlRfNV82XzU6IDMzNjM1LFxuICAgIFVOU0lHTkVEX1NIT1JUXzRfNF80XzQ6IDMyODE5LFxuICAgIFVOU0lHTkVEX1NIT1JUXzVfNV81XzE6IDMyODIwLFxuICAgIEZMT0FUOiA1MTI2LFxuICAgIEhBTEZfRkxPQVQ6IDM2MTkzLFxufTtcblxuLyoqXG4gKiBUaGUgc2NhbGUgbW9kZXMgdGhhdCBhcmUgc3VwcG9ydGVkIGJ5IHBpeGkuXG4gKlxuICogVGhlIHtAbGluayBQSVhJLnNldHRpbmdzLlNDQUxFX01PREV9IHNjYWxlIG1vZGUgYWZmZWN0cyB0aGUgZGVmYXVsdCBzY2FsaW5nIG1vZGUgb2YgZnV0dXJlIG9wZXJhdGlvbnMuXG4gKiBJdCBjYW4gYmUgcmUtYXNzaWduZWQgdG8gZWl0aGVyIExJTkVBUiBvciBORUFSRVNULCBkZXBlbmRpbmcgdXBvbiBzdWl0YWJpbGl0eS5cbiAqXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHN0YXRpY1xuICogQG5hbWUgU0NBTEVfTU9ERVNcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKiBAcHJvcGVydHkge251bWJlcn0gTElORUFSIFNtb290aCBzY2FsaW5nXG4gKiBAcHJvcGVydHkge251bWJlcn0gTkVBUkVTVCBQaXhlbGF0aW5nIHNjYWxpbmdcbiAqL1xudmFyIFNDQUxFX01PREVTID0ge1xuICAgIExJTkVBUjogICAgIDEsXG4gICAgTkVBUkVTVDogICAgMCxcbn07XG5cbi8qKlxuICogVGhlIHdyYXAgbW9kZXMgdGhhdCBhcmUgc3VwcG9ydGVkIGJ5IHBpeGkuXG4gKlxuICogVGhlIHtAbGluayBQSVhJLnNldHRpbmdzLldSQVBfTU9ERX0gd3JhcCBtb2RlIGFmZmVjdHMgdGhlIGRlZmF1bHQgd3JhcHBpbmcgbW9kZSBvZiBmdXR1cmUgb3BlcmF0aW9ucy5cbiAqIEl0IGNhbiBiZSByZS1hc3NpZ25lZCB0byBlaXRoZXIgQ0xBTVAgb3IgUkVQRUFULCBkZXBlbmRpbmcgdXBvbiBzdWl0YWJpbGl0eS5cbiAqIElmIHRoZSB0ZXh0dXJlIGlzIG5vbiBwb3dlciBvZiB0d28gdGhlbiBjbGFtcCB3aWxsIGJlIHVzZWQgcmVnYXJkbGVzcyBhcyBXZWJHTCBjYW5cbiAqIG9ubHkgdXNlIFJFUEVBVCBpZiB0aGUgdGV4dHVyZSBpcyBwbzIuXG4gKlxuICogVGhpcyBwcm9wZXJ0eSBvbmx5IGFmZmVjdHMgV2ViR0wuXG4gKlxuICogQG5hbWUgV1JBUF9NT0RFU1xuICogQG1lbWJlcm9mIFBJWElcbiAqIEBzdGF0aWNcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKiBAcHJvcGVydHkge251bWJlcn0gQ0xBTVAgLSBUaGUgdGV4dHVyZXMgdXZzIGFyZSBjbGFtcGVkXG4gKiBAcHJvcGVydHkge251bWJlcn0gUkVQRUFUIC0gVGhlIHRleHR1cmUgdXZzIHRpbGUgYW5kIHJlcGVhdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IE1JUlJPUkVEX1JFUEVBVCAtIFRoZSB0ZXh0dXJlIHV2cyB0aWxlIGFuZCByZXBlYXQgd2l0aCBtaXJyb3JpbmdcbiAqL1xudmFyIFdSQVBfTU9ERVMgPSB7XG4gICAgQ0xBTVA6ICAgICAgICAgICAzMzA3MSxcbiAgICBSRVBFQVQ6ICAgICAgICAgIDEwNDk3LFxuICAgIE1JUlJPUkVEX1JFUEVBVDogMzM2NDgsXG59O1xuXG4vKipcbiAqIE1pcG1hcCBmaWx0ZXJpbmcgbW9kZXMgdGhhdCBhcmUgc3VwcG9ydGVkIGJ5IHBpeGkuXG4gKlxuICogVGhlIHtAbGluayBQSVhJLnNldHRpbmdzLk1JUE1BUF9URVhUVVJFU30gYWZmZWN0cyBkZWZhdWx0IHRleHR1cmUgZmlsdGVyaW5nLlxuICogTWlwbWFwcyBhcmUgZ2VuZXJhdGVkIGZvciBhIGJhc2VUZXh0dXJlIGlmIGl0cyBgbWlwbWFwYCBmaWVsZCBpcyBgT05gLFxuICogb3IgaXRzIGBQT1cyYCBhbmQgdGV4dHVyZSBkaW1lbnNpb25zIGFyZSBwb3dlcnMgb2YgMi5cbiAqIER1ZSB0byBwbGF0Zm9ybSByZXN0cmljdGlvbiwgYE9OYCBvcHRpb24gd2lsbCB3b3JrIGxpa2UgYFBPVzJgIGZvciB3ZWJnbC0xLlxuICpcbiAqIFRoaXMgcHJvcGVydHkgb25seSBhZmZlY3RzIFdlYkdMLlxuICpcbiAqIEBuYW1lIE1JUE1BUF9NT0RFU1xuICogQG1lbWJlcm9mIFBJWElcbiAqIEBzdGF0aWNcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKiBAcHJvcGVydHkge251bWJlcn0gT0ZGIC0gTm8gbWlwbWFwc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFBPVzIgLSBHZW5lcmF0ZSBtaXBtYXBzIGlmIHRleHR1cmUgZGltZW5zaW9ucyBhcmUgcG93MlxuICogQHByb3BlcnR5IHtudW1iZXJ9IE9OIC0gQWx3YXlzIGdlbmVyYXRlIG1pcG1hcHNcbiAqL1xudmFyIE1JUE1BUF9NT0RFUyA9IHtcbiAgICBPRkY6IDAsXG4gICAgUE9XMjogMSxcbiAgICBPTjogMixcbn07XG5cbi8qKlxuICogVGhlIGdjIG1vZGVzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSBwaXhpLlxuICpcbiAqIFRoZSB7QGxpbmsgUElYSS5zZXR0aW5ncy5HQ19NT0RFfSBHYXJiYWdlIENvbGxlY3Rpb24gbW9kZSBmb3IgUGl4aUpTIHRleHR1cmVzIGlzIEFVVE9cbiAqIElmIHNldCB0byBHQ19NT0RFLCB0aGUgcmVuZGVyZXIgd2lsbCBvY2Nhc2lvbmFsbHkgY2hlY2sgdGV4dHVyZXMgdXNhZ2UuIElmIHRoZXkgYXJlIG5vdFxuICogdXNlZCBmb3IgYSBzcGVjaWZpZWQgcGVyaW9kIG9mIHRpbWUgdGhleSB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgR1BVLiBUaGV5IHdpbGwgb2YgY291cnNlXG4gKiBiZSB1cGxvYWRlZCBhZ2FpbiB3aGVuIHRoZXkgYXJlIHJlcXVpcmVkLiBUaGlzIGlzIGEgc2lsZW50IGJlaGluZCB0aGUgc2NlbmVzIHByb2Nlc3MgdGhhdFxuICogc2hvdWxkIGVuc3VyZSB0aGF0IHRoZSBHUFUgZG9lcyBub3QgIGdldCBmaWxsZWQgdXAuXG4gKlxuICogSGFuZHkgZm9yIG1vYmlsZSBkZXZpY2VzIVxuICogVGhpcyBwcm9wZXJ0eSBvbmx5IGFmZmVjdHMgV2ViR0wuXG4gKlxuICogQG5hbWUgR0NfTU9ERVNcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEFVVE8gLSBHYXJiYWdlIGNvbGxlY3Rpb24gd2lsbCBoYXBwZW4gcGVyaW9kaWNhbGx5IGF1dG9tYXRpY2FsbHlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBNQU5VQUwgLSBHYXJiYWdlIGNvbGxlY3Rpb24gd2lsbCBuZWVkIHRvIGJlIGNhbGxlZCBtYW51YWxseVxuICovXG52YXIgR0NfTU9ERVMgPSB7XG4gICAgQVVUTzogICAgICAgICAgIDAsXG4gICAgTUFOVUFMOiAgICAgICAgIDEsXG59O1xuXG4vKipcbiAqIENvbnN0YW50cyB0aGF0IHNwZWNpZnkgZmxvYXQgcHJlY2lzaW9uIGluIHNoYWRlcnMuXG4gKlxuICogQG5hbWUgUFJFQ0lTSU9OXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHN0YXRpY1xuICogQGVudW0ge3N0cmluZ31cbiAqIEBjb25zdGFudFxuICogQHByb3BlcnR5IHtzdHJpbmd9IExPVz0nbG93cCdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBNRURJVU09J21lZGl1bXAnXG4gKiBAcHJvcGVydHkge3N0cmluZ30gSElHSD0naGlnaHAnXG4gKi9cbnZhciBQUkVDSVNJT04gPSB7XG4gICAgTE9XOiAnbG93cCcsXG4gICAgTUVESVVNOiAnbWVkaXVtcCcsXG4gICAgSElHSDogJ2hpZ2hwJyxcbn07XG5cbmV4cG9ydCB7IEJMRU5EX01PREVTLCBEUkFXX01PREVTLCBFTlYsIEZPUk1BVFMsIEdDX01PREVTLCBNSVBNQVBfTU9ERVMsIFBSRUNJU0lPTiwgUkVOREVSRVJfVFlQRSwgU0NBTEVfTU9ERVMsIFRBUkdFVFMsIFRZUEVTLCBXUkFQX01PREVTIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuZXMuanMubWFwXG4iLCIvKiFcbiAqIEBwaXhpL3V0aWxzIC0gdjUuMS4zXG4gKiBDb21waWxlZCBNb24sIDA5IFNlcCAyMDE5IDA0OjUxOjUzIFVUQ1xuICpcbiAqIEBwaXhpL3V0aWxzIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgc2V0dGluZ3MgfSBmcm9tICdAcGl4aS9zZXR0aW5ncyc7XG5leHBvcnQgeyBpc01vYmlsZSB9IGZyb20gJ0BwaXhpL3NldHRpbmdzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRlbWl0dGVyMyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVhcmN1dCB9IGZyb20gJ2VhcmN1dCc7XG5pbXBvcnQgX3VybCBmcm9tICd1cmwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1cmwgfSBmcm9tICd1cmwnO1xuaW1wb3J0IHsgQkxFTkRfTU9ERVMgfSBmcm9tICdAcGl4aS9jb25zdGFudHMnO1xuXG4vKipcbiAqIFRoZSBwcmVmaXggdGhhdCBkZW5vdGVzIGEgVVJMIGlzIGZvciBhIHJldGluYSBhc3NldC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBSRVRJTkFfUFJFRklYXG4gKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBkZWZhdWx0IC9AKFswLTlcXC5dKyl4L1xuICogQGV4YW1wbGUgYEAyeGBcbiAqL1xuc2V0dGluZ3MuUkVUSU5BX1BSRUZJWCA9IC9AKFswLTlcXC5dKyl4LztcblxuLyoqXG4gKiBTaG91bGQgdGhlIGBmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0YCBmbGFnIGJlIGVuYWJsZWQgYXMgYSBjb250ZXh0IG9wdGlvbiB1c2VkIGluIHRoZSBgaXNXZWJHTFN1cHBvcnRlZGAgZnVuY3Rpb24uXG4gKiBGb3IgbW9zdCBzY2VuYXJpb3MgdGhpcyBzaG91bGQgYmUgbGVmdCBhcyB0cnVlLCBhcyBvdGhlcndpc2UgdGhlIHVzZXIgbWF5IGhhdmUgYSBwb29yIGV4cGVyaWVuY2UuXG4gKiBIb3dldmVyLCBpdCBjYW4gYmUgdXNlZnVsIHRvIGRpc2FibGUgdW5kZXIgY2VydGFpbiBzY2VuYXJpb3MsIHN1Y2ggYXMgaGVhZGxlc3MgdW5pdCB0ZXN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBGQUlMX0lGX01BSk9SX1BFUkZPUk1BTkNFX0NBVkVBVFxuICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAqIEB0eXBlIHtib29sZWFufVxuICogQGRlZmF1bHQgdHJ1ZVxuICovXG5zZXR0aW5ncy5GQUlMX0lGX01BSk9SX1BFUkZPUk1BTkNFX0NBVkVBVCA9IHRydWU7XG5cbnZhciBzYWlkSGVsbG8gPSBmYWxzZTtcbnZhciBWRVJTSU9OID0gJzUuMS4zJztcblxuLyoqXG4gKiBTa2lwcyB0aGUgaGVsbG8gbWVzc2FnZSBvZiByZW5kZXJlcnMgdGhhdCBhcmUgY3JlYXRlZCBhZnRlciB0aGlzIGlzIHJ1bi5cbiAqXG4gKiBAZnVuY3Rpb24gc2tpcEhlbGxvXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICovXG5mdW5jdGlvbiBza2lwSGVsbG8oKVxue1xuICAgIHNhaWRIZWxsbyA9IHRydWU7XG59XG5cbi8qKlxuICogTG9ncyBvdXQgdGhlIHZlcnNpb24gYW5kIHJlbmRlcmVyIGluZm9ybWF0aW9uIGZvciB0aGlzIHJ1bm5pbmcgaW5zdGFuY2Ugb2YgUElYSS5cbiAqIElmIHlvdSBkb24ndCB3YW50IHRvIHNlZSB0aGlzIG1lc3NhZ2UgeW91IGNhbiBydW4gYFBJWEkudXRpbHMuc2tpcEhlbGxvKClgIGJlZm9yZVxuICogY3JlYXRpbmcgeW91ciByZW5kZXJlci4gS2VlcCBpbiBtaW5kIHRoYXQgZG9pbmcgdGhhdCB3aWxsIGZvcmV2ZXIgbWFrZSB5b3UgYSBqZXJrIGZhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQGZ1bmN0aW9uIHNheUhlbGxvXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgc3RyaW5nIHJlbmRlcmVyIHR5cGUgdG8gbG9nLlxuICovXG5mdW5jdGlvbiBzYXlIZWxsbyh0eXBlKVxue1xuICAgIGlmIChzYWlkSGVsbG8pXG4gICAge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdjaHJvbWUnKSA+IC0xKVxuICAgIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXG4gICAgICAgICAgICAoXCJcXG4gJWMgJWMgJWMgUGl4aUpTIFwiICsgVkVSU0lPTiArIFwiIC0g4pywIFwiICsgdHlwZSArIFwiIOKcsCAgJWMgICVjICBodHRwOi8vd3d3LnBpeGlqcy5jb20vICAlYyAlYyDimaUlY+KZpSVj4pmlIFxcblxcblwiKSxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kOiAjZmY2NmE1OyBwYWRkaW5nOjVweCAwOycsXG4gICAgICAgICAgICAnYmFja2dyb3VuZDogI2ZmNjZhNTsgcGFkZGluZzo1cHggMDsnLFxuICAgICAgICAgICAgJ2NvbG9yOiAjZmY2NmE1OyBiYWNrZ3JvdW5kOiAjMDMwMzA3OyBwYWRkaW5nOjVweCAwOycsXG4gICAgICAgICAgICAnYmFja2dyb3VuZDogI2ZmNjZhNTsgcGFkZGluZzo1cHggMDsnLFxuICAgICAgICAgICAgJ2JhY2tncm91bmQ6ICNmZmMzZGM7IHBhZGRpbmc6NXB4IDA7JyxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kOiAjZmY2NmE1OyBwYWRkaW5nOjVweCAwOycsXG4gICAgICAgICAgICAnY29sb3I6ICNmZjI0MjQ7IGJhY2tncm91bmQ6ICNmZmY7IHBhZGRpbmc6NXB4IDA7JyxcbiAgICAgICAgICAgICdjb2xvcjogI2ZmMjQyNDsgYmFja2dyb3VuZDogI2ZmZjsgcGFkZGluZzo1cHggMDsnLFxuICAgICAgICAgICAgJ2NvbG9yOiAjZmYyNDI0OyBiYWNrZ3JvdW5kOiAjZmZmOyBwYWRkaW5nOjVweCAwOycgXTtcblxuICAgICAgICB3aW5kb3cuY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHdpbmRvdy5jb25zb2xlKVxuICAgIHtcbiAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKChcIlBpeGlKUyBcIiArIFZFUlNJT04gKyBcIiAtIFwiICsgdHlwZSArIFwiIC0gaHR0cDovL3d3dy5waXhpanMuY29tL1wiKSk7XG4gICAgfVxuXG4gICAgc2FpZEhlbGxvID0gdHJ1ZTtcbn1cblxudmFyIHN1cHBvcnRlZDtcblxuLyoqXG4gKiBIZWxwZXIgZm9yIGNoZWNraW5nIGZvciBXZWJHTCBzdXBwb3J0LlxuICpcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAZnVuY3Rpb24gaXNXZWJHTFN1cHBvcnRlZFxuICogQHJldHVybiB7Ym9vbGVhbn0gSXMgV2ViR0wgc3VwcG9ydGVkLlxuICovXG5mdW5jdGlvbiBpc1dlYkdMU3VwcG9ydGVkKClcbntcbiAgICBpZiAodHlwZW9mIHN1cHBvcnRlZCA9PT0gJ3VuZGVmaW5lZCcpXG4gICAge1xuICAgICAgICBzdXBwb3J0ZWQgPSAoZnVuY3Rpb24gc3VwcG9ydGVkKClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHN0ZW5jaWw6IHRydWUsXG4gICAgICAgICAgICAgICAgZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdDogc2V0dGluZ3MuRkFJTF9JRl9NQUpPUl9QRVJGT1JNQU5DRV9DQVZFQVQsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0cnlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdpbmRvdy5XZWJHTFJlbmRlcmluZ0NvbnRleHQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgICAgIHZhciBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIGNvbnRleHRPcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICB8fCBjYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJywgY29udGV4dE9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSAhIShnbCAmJiBnbC5nZXRDb250ZXh0QXR0cmlidXRlcygpLnN0ZW5jaWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGdsKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvc2VDb250ZXh0ID0gZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9sb3NlX2NvbnRleHQnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobG9zZUNvbnRleHQpXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvc2VDb250ZXh0Lmxvc2VDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBnbCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwcG9ydGVkO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgaGV4YWRlY2ltYWwgY29sb3IgbnVtYmVyIHRvIGFuIFtSLCBHLCBCXSBhcnJheSBvZiBub3JtYWxpemVkIGZsb2F0cyAobnVtYmVycyBmcm9tIDAuMCB0byAxLjApLlxuICpcbiAqIEBleGFtcGxlXG4gKiBQSVhJLnV0aWxzLmhleDJyZ2IoMHhmZmZmZmYpOyAvLyByZXR1cm5zIFsxLCAxLCAxXVxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBoZXgycmdiXG4gKiBAcGFyYW0ge251bWJlcn0gaGV4IC0gVGhlIGhleGFkZWNpbWFsIG51bWJlciB0byBjb252ZXJ0XG4gKiBAcGFyYW0gIHtudW1iZXJbXX0gW291dD1bXV0gSWYgc3VwcGxpZWQsIHRoaXMgYXJyYXkgd2lsbCBiZSB1c2VkIHJhdGhlciB0aGFuIHJldHVybmluZyBhIG5ldyBvbmVcbiAqIEByZXR1cm4ge251bWJlcltdfSBBbiBhcnJheSByZXByZXNlbnRpbmcgdGhlIFtSLCBHLCBCXSBvZiB0aGUgY29sb3Igd2hlcmUgYWxsIHZhbHVlcyBhcmUgZmxvYXRzLlxuICovXG5mdW5jdGlvbiBoZXgycmdiKGhleCwgb3V0KVxue1xuICAgIG91dCA9IG91dCB8fCBbXTtcblxuICAgIG91dFswXSA9ICgoaGV4ID4+IDE2KSAmIDB4RkYpIC8gMjU1O1xuICAgIG91dFsxXSA9ICgoaGV4ID4+IDgpICYgMHhGRikgLyAyNTU7XG4gICAgb3V0WzJdID0gKGhleCAmIDB4RkYpIC8gMjU1O1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGhleGFkZWNpbWFsIGNvbG9yIG51bWJlciB0byBhIHN0cmluZy5cbiAqXG4gKiBAZXhhbXBsZVxuICogUElYSS51dGlscy5oZXgyc3RyaW5nKDB4ZmZmZmZmKTsgLy8gcmV0dXJucyBcIiNmZmZmZmZcIlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBoZXgyc3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gaGV4IC0gTnVtYmVyIGluIGhleCAoZS5nLiwgYDB4ZmZmZmZmYClcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyBjb2xvciAoZS5nLiwgYFwiI2ZmZmZmZlwiYCkuXG4gKi9cbmZ1bmN0aW9uIGhleDJzdHJpbmcoaGV4KVxue1xuICAgIGhleCA9IGhleC50b1N0cmluZygxNik7XG4gICAgaGV4ID0gJzAwMDAwMCcuc3Vic3RyKDAsIDYgLSBoZXgubGVuZ3RoKSArIGhleDtcblxuICAgIHJldHVybiAoXCIjXCIgKyBoZXgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgaGV4YWRlY2ltYWwgc3RyaW5nIHRvIGEgaGV4YWRlY2ltYWwgY29sb3IgbnVtYmVyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBQSVhJLnV0aWxzLnN0cmluZzJoZXgoXCIjZmZmZmZmXCIpOyAvLyByZXR1cm5zIDB4ZmZmZmZmXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIHN0cmluZzJoZXhcbiAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIGNvbG9yIChlLmcuLCBgXCIjZmZmZmZmXCJgKVxuICogQHJldHVybiB7bnVtYmVyfSBOdW1iZXIgaW4gaGV4YWRlY2ltYWwuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZzJoZXgoc3RyaW5nKVxue1xuICAgIGlmICh0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJyAmJiBzdHJpbmdbMF0gPT09ICcjJylcbiAgICB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHIoMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZywgMTYpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgYXMgYW4gW1IsIEcsIEJdIGFycmF5IG9mIG5vcm1hbGl6ZWQgZmxvYXRzIHRvIGEgaGV4YWRlY2ltYWwgbnVtYmVyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBQSVhJLnV0aWxzLnJnYjJoZXgoWzEsIDEsIDFdKTsgLy8gcmV0dXJucyAweGZmZmZmZlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiByZ2IyaGV4XG4gKiBAcGFyYW0ge251bWJlcltdfSByZ2IgLSBBcnJheSBvZiBudW1iZXJzIHdoZXJlIGFsbCB2YWx1ZXMgYXJlIG5vcm1hbGl6ZWQgZmxvYXRzIGZyb20gMC4wIHRvIDEuMC5cbiAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIGluIGhleGFkZWNpbWFsLlxuICovXG5mdW5jdGlvbiByZ2IyaGV4KHJnYilcbntcbiAgICByZXR1cm4gKCgocmdiWzBdICogMjU1KSA8PCAxNikgKyAoKHJnYlsxXSAqIDI1NSkgPDwgOCkgKyAocmdiWzJdICogMjU1IHwgMCkpO1xufVxuXG4vKipcbiAqIENvcnJlY3RzIFBpeGlKUyBibGVuZCwgdGFrZXMgcHJlbXVsdGlwbGllZCBhbHBoYSBpbnRvIGFjY291bnRcbiAqXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIG1hcFByZW11bHRpcGxpZWRCbGVuZE1vZGVzXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheTxudW1iZXJbXT59IFthcnJheV0gLSBUaGUgYXJyYXkgdG8gb3V0cHV0IGludG8uXG4gKiBAcmV0dXJuIHtBcnJheTxudW1iZXJbXT59IE1hcHBlZCBtb2Rlcy5cbiAqL1xuZnVuY3Rpb24gbWFwUHJlbXVsdGlwbGllZEJsZW5kTW9kZXMoKVxue1xuICAgIHZhciBwbSA9IFtdO1xuICAgIHZhciBucG0gPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKylcbiAgICB7XG4gICAgICAgIHBtW2ldID0gaTtcbiAgICAgICAgbnBtW2ldID0gaTtcbiAgICB9XG5cbiAgICBwbVtCTEVORF9NT0RFUy5OT1JNQUxfTlBNXSA9IEJMRU5EX01PREVTLk5PUk1BTDtcbiAgICBwbVtCTEVORF9NT0RFUy5BRERfTlBNXSA9IEJMRU5EX01PREVTLkFERDtcbiAgICBwbVtCTEVORF9NT0RFUy5TQ1JFRU5fTlBNXSA9IEJMRU5EX01PREVTLlNDUkVFTjtcblxuICAgIG5wbVtCTEVORF9NT0RFUy5OT1JNQUxdID0gQkxFTkRfTU9ERVMuTk9STUFMX05QTTtcbiAgICBucG1bQkxFTkRfTU9ERVMuQUREXSA9IEJMRU5EX01PREVTLkFERF9OUE07XG4gICAgbnBtW0JMRU5EX01PREVTLlNDUkVFTl0gPSBCTEVORF9NT0RFUy5TQ1JFRU5fTlBNO1xuXG4gICAgdmFyIGFycmF5ID0gW107XG5cbiAgICBhcnJheS5wdXNoKG5wbSk7XG4gICAgYXJyYXkucHVzaChwbSk7XG5cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogbWFwcyBwcmVtdWx0aXBseSBmbGFnIGFuZCBibGVuZE1vZGUgdG8gYWRqdXN0ZWQgYmxlbmRNb2RlXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGNvbnN0IHByZW11bHRpcGx5QmxlbmRNb2RlXG4gKiBAdHlwZSB7QXJyYXk8bnVtYmVyW10+fVxuICovXG52YXIgcHJlbXVsdGlwbHlCbGVuZE1vZGUgPSBtYXBQcmVtdWx0aXBsaWVkQmxlbmRNb2RlcygpO1xuXG4vKipcbiAqIGNoYW5nZXMgYmxlbmRNb2RlIGFjY29yZGluZyB0byB0ZXh0dXJlIGZvcm1hdFxuICpcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAZnVuY3Rpb24gY29ycmVjdEJsZW5kTW9kZVxuICogQHBhcmFtIHtudW1iZXJ9IGJsZW5kTW9kZSBzdXBwb3NlZCBibGVuZCBtb2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHByZW11bHRpcGxpZWQgIHdoZXRoZXIgc291cmNlIGlzIHByZW11bHRpcGxpZWRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHRydWUgYmxlbmQgbW9kZSBmb3IgdGhpcyB0ZXh0dXJlXG4gKi9cbmZ1bmN0aW9uIGNvcnJlY3RCbGVuZE1vZGUoYmxlbmRNb2RlLCBwcmVtdWx0aXBsaWVkKVxue1xuICAgIHJldHVybiBwcmVtdWx0aXBseUJsZW5kTW9kZVtwcmVtdWx0aXBsaWVkID8gMSA6IDBdW2JsZW5kTW9kZV07XG59XG5cbi8qKlxuICogY29tYmluZXMgcmdiIGFuZCBhbHBoYSB0byBvdXQgYXJyYXlcbiAqXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIHByZW11bHRpcGx5UmdiYVxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8bnVtYmVyW119IHJnYiBpbnB1dCByZ2JcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbHBoYSBhbHBoYSBwYXJhbVxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IFtvdXRdIG91dHB1dFxuICogQHBhcmFtIHtib29sZWFufSBbcHJlbXVsdGlwbHk9dHJ1ZV0gZG8gcHJlbXVsdGlwbHkgaXRcbiAqIEByZXR1cm5zIHtGbG9hdDMyQXJyYXl9IHZlYzQgcmdiYVxuICovXG5mdW5jdGlvbiBwcmVtdWx0aXBseVJnYmEocmdiLCBhbHBoYSwgb3V0LCBwcmVtdWx0aXBseSlcbntcbiAgICBvdXQgPSBvdXQgfHwgbmV3IEZsb2F0MzJBcnJheSg0KTtcbiAgICBpZiAocHJlbXVsdGlwbHkgfHwgcHJlbXVsdGlwbHkgPT09IHVuZGVmaW5lZClcbiAgICB7XG4gICAgICAgIG91dFswXSA9IHJnYlswXSAqIGFscGhhO1xuICAgICAgICBvdXRbMV0gPSByZ2JbMV0gKiBhbHBoYTtcbiAgICAgICAgb3V0WzJdID0gcmdiWzJdICogYWxwaGE7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIG91dFswXSA9IHJnYlswXTtcbiAgICAgICAgb3V0WzFdID0gcmdiWzFdO1xuICAgICAgICBvdXRbMl0gPSByZ2JbMl07XG4gICAgfVxuICAgIG91dFszXSA9IGFscGhhO1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBwcmVtdWx0aXBsaWVzIHRpbnRcbiAqXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIHByZW11bHRpcGx5VGludFxuICogQHBhcmFtIHtudW1iZXJ9IHRpbnQgaW50ZWdlciBSR0JcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbHBoYSBmbG9hdGluZyBwb2ludCBhbHBoYSAoMC4wLTEuMClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHRpbnQgbXVsdGlwbGllZCBieSBhbHBoYVxuICovXG5mdW5jdGlvbiBwcmVtdWx0aXBseVRpbnQodGludCwgYWxwaGEpXG57XG4gICAgaWYgKGFscGhhID09PSAxLjApXG4gICAge1xuICAgICAgICByZXR1cm4gKGFscGhhICogMjU1IDw8IDI0KSArIHRpbnQ7XG4gICAgfVxuICAgIGlmIChhbHBoYSA9PT0gMC4wKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHZhciBSID0gKCh0aW50ID4+IDE2KSAmIDB4RkYpO1xuICAgIHZhciBHID0gKCh0aW50ID4+IDgpICYgMHhGRik7XG4gICAgdmFyIEIgPSAodGludCAmIDB4RkYpO1xuXG4gICAgUiA9ICgoUiAqIGFscGhhKSArIDAuNSkgfCAwO1xuICAgIEcgPSAoKEcgKiBhbHBoYSkgKyAwLjUpIHwgMDtcbiAgICBCID0gKChCICogYWxwaGEpICsgMC41KSB8IDA7XG5cbiAgICByZXR1cm4gKGFscGhhICogMjU1IDw8IDI0KSArIChSIDw8IDE2KSArIChHIDw8IDgpICsgQjtcbn1cblxuLyoqXG4gKiBjb252ZXJ0cyBpbnRlZ2VyIHRpbnQgYW5kIGZsb2F0IGFscGhhIHRvIHZlYzQgZm9ybSwgcHJlbXVsdGlwbGllcyBieSBkZWZhdWx0XG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBwcmVtdWx0aXBseVRpbnRUb1JnYmFcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW50IGlucHV0IHRpbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbHBoYSBhbHBoYSBwYXJhbVxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IFtvdXRdIG91dHB1dFxuICogQHBhcmFtIHtib29sZWFufSBbcHJlbXVsdGlwbHk9dHJ1ZV0gZG8gcHJlbXVsdGlwbHkgaXRcbiAqIEByZXR1cm5zIHtGbG9hdDMyQXJyYXl9IHZlYzQgcmdiYVxuICovXG5mdW5jdGlvbiBwcmVtdWx0aXBseVRpbnRUb1JnYmEodGludCwgYWxwaGEsIG91dCwgcHJlbXVsdGlwbHkpXG57XG4gICAgb3V0ID0gb3V0IHx8IG5ldyBGbG9hdDMyQXJyYXkoNCk7XG4gICAgb3V0WzBdID0gKCh0aW50ID4+IDE2KSAmIDB4RkYpIC8gMjU1LjA7XG4gICAgb3V0WzFdID0gKCh0aW50ID4+IDgpICYgMHhGRikgLyAyNTUuMDtcbiAgICBvdXRbMl0gPSAodGludCAmIDB4RkYpIC8gMjU1LjA7XG4gICAgaWYgKHByZW11bHRpcGx5IHx8IHByZW11bHRpcGx5ID09PSB1bmRlZmluZWQpXG4gICAge1xuICAgICAgICBvdXRbMF0gKj0gYWxwaGE7XG4gICAgICAgIG91dFsxXSAqPSBhbHBoYTtcbiAgICAgICAgb3V0WzJdICo9IGFscGhhO1xuICAgIH1cbiAgICBvdXRbM10gPSBhbHBoYTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJpYyBNYXNrIFN0YWNrIGRhdGEgc3RydWN0dXJlXG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBjcmVhdGVJbmRpY2VzRm9yUXVhZHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIC0gTnVtYmVyIG9mIHF1YWRzXG4gKiBAcGFyYW0ge1VpbnQxNkFycmF5fFVpbnQzMkFycmF5fSBbb3V0QnVmZmVyXSAtIEJ1ZmZlciBmb3Igb3V0cHV0LCBsZW5ndGggaGFzIHRvIGJlIGA2ICogc2l6ZWBcbiAqIEByZXR1cm4ge1VpbnQxNkFycmF5fFVpbnQzMkFycmF5fSAtIFJlc3VsdGluZyBpbmRleCBidWZmZXJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5kaWNlc0ZvclF1YWRzKHNpemUsIG91dEJ1ZmZlcilcbntcbiAgICBpZiAoIG91dEJ1ZmZlciA9PT0gdm9pZCAwICkgb3V0QnVmZmVyID0gbnVsbDtcblxuICAgIC8vIHRoZSB0b3RhbCBudW1iZXIgb2YgaW5kaWNlcyBpbiBvdXIgYXJyYXksIHRoZXJlIGFyZSA2IHBvaW50cyBwZXIgcXVhZC5cbiAgICB2YXIgdG90YWxJbmRpY2VzID0gc2l6ZSAqIDY7XG5cbiAgICBvdXRCdWZmZXIgPSBvdXRCdWZmZXIgfHwgbmV3IFVpbnQxNkFycmF5KHRvdGFsSW5kaWNlcyk7XG5cbiAgICBpZiAob3V0QnVmZmVyLmxlbmd0aCAhPT0gdG90YWxJbmRpY2VzKVxuICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKChcIk91dCBidWZmZXIgbGVuZ3RoIGlzIGluY29ycmVjdCwgZ290IFwiICsgKG91dEJ1ZmZlci5sZW5ndGgpICsgXCIgYW5kIGV4cGVjdGVkIFwiICsgdG90YWxJbmRpY2VzKSk7XG4gICAgfVxuXG4gICAgLy8gZmlsbCB0aGUgaW5kaWNlcyB3aXRoIHRoZSBxdWFkcyB0byBkcmF3XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgdG90YWxJbmRpY2VzOyBpICs9IDYsIGogKz0gNClcbiAgICB7XG4gICAgICAgIG91dEJ1ZmZlcltpICsgMF0gPSBqICsgMDtcbiAgICAgICAgb3V0QnVmZmVyW2kgKyAxXSA9IGogKyAxO1xuICAgICAgICBvdXRCdWZmZXJbaSArIDJdID0gaiArIDI7XG4gICAgICAgIG91dEJ1ZmZlcltpICsgM10gPSBqICsgMDtcbiAgICAgICAgb3V0QnVmZmVyW2kgKyA0XSA9IGogKyAyO1xuICAgICAgICBvdXRCdWZmZXJbaSArIDVdID0gaiArIDM7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dEJ1ZmZlcjtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaXRlbXMgZnJvbSBhIGphdmFzY3JpcHQgYXJyYXkgd2l0aG91dCBnZW5lcmF0aW5nIGdhcmJhZ2VcbiAqXG4gKiBAZnVuY3Rpb24gcmVtb3ZlSXRlbXNcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciBBcnJheSB0byByZW1vdmUgZWxlbWVudHMgZnJvbVxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0SWR4IHN0YXJ0aW5nIGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gcmVtb3ZlQ291bnQgaG93IG1hbnkgdG8gcmVtb3ZlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUl0ZW1zKGFyciwgc3RhcnRJZHgsIHJlbW92ZUNvdW50KVxue1xuICAgIHZhciBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgIHZhciBpO1xuXG4gICAgaWYgKHN0YXJ0SWR4ID49IGxlbmd0aCB8fCByZW1vdmVDb3VudCA9PT0gMClcbiAgICB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZW1vdmVDb3VudCA9IChzdGFydElkeCArIHJlbW92ZUNvdW50ID4gbGVuZ3RoID8gbGVuZ3RoIC0gc3RhcnRJZHggOiByZW1vdmVDb3VudCk7XG5cbiAgICB2YXIgbGVuID0gbGVuZ3RoIC0gcmVtb3ZlQ291bnQ7XG5cbiAgICBmb3IgKGkgPSBzdGFydElkeDsgaSA8IGxlbjsgKytpKVxuICAgIHtcbiAgICAgICAgYXJyW2ldID0gYXJyW2kgKyByZW1vdmVDb3VudF07XG4gICAgfVxuXG4gICAgYXJyLmxlbmd0aCA9IGxlbjtcbn1cblxudmFyIG5leHRVaWQgPSAwO1xuXG4vKipcbiAqIEdldHMgdGhlIG5leHQgdW5pcXVlIGlkZW50aWZpZXJcbiAqXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIHVpZFxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbmV4dCB1bmlxdWUgaWRlbnRpZmllciB0byB1c2UuXG4gKi9cbmZ1bmN0aW9uIHVpZCgpXG57XG4gICAgcmV0dXJuICsrbmV4dFVpZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHNpZ24gb2YgbnVtYmVyXG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBzaWduXG4gKiBAcGFyYW0ge251bWJlcn0gbiAtIHRoZSBudW1iZXIgdG8gY2hlY2sgdGhlIHNpZ24gb2ZcbiAqIEByZXR1cm5zIHtudW1iZXJ9IDAgaWYgYG5gIGlzIDAsIC0xIGlmIGBuYCBpcyBuZWdhdGl2ZSwgMSBpZiBgbmAgaXMgcG9zaXRpdmVcbiAqL1xuZnVuY3Rpb24gc2lnbihuKVxue1xuICAgIGlmIChuID09PSAwKSB7IHJldHVybiAwOyB9XG5cbiAgICByZXR1cm4gbiA8IDAgPyAtMSA6IDE7XG59XG5cbi8vIFRha2VuIGZyb20gdGhlIGJpdC10d2lkZGxlIHBhY2thZ2VcblxuLyoqXG4gKiBSb3VuZHMgdG8gbmV4dCBwb3dlciBvZiB0d28uXG4gKlxuICogQGZ1bmN0aW9uIG5leHRQb3cyXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQHBhcmFtIHtudW1iZXJ9IHYgaW5wdXQgdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gbmV4dFBvdzIodilcbntcbiAgICB2ICs9IHYgPT09IDA7XG4gICAgLS12O1xuICAgIHYgfD0gdiA+Pj4gMTtcbiAgICB2IHw9IHYgPj4+IDI7XG4gICAgdiB8PSB2ID4+PiA0O1xuICAgIHYgfD0gdiA+Pj4gODtcbiAgICB2IHw9IHYgPj4+IDE2O1xuXG4gICAgcmV0dXJuIHYgKyAxO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIG51bWJlciBpcyBhIHBvd2VyIG9mIHR3by5cbiAqXG4gKiBAZnVuY3Rpb24gaXNQb3cyXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQHBhcmFtIHtudW1iZXJ9IHYgaW5wdXQgdmFsdWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB2YWx1ZSBpcyBwb3dlciBvZiB0d29cbiAqL1xuZnVuY3Rpb24gaXNQb3cyKHYpXG57XG4gICAgcmV0dXJuICEodiAmICh2IC0gMSkpICYmICghIXYpO1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGNlaWwgb2YgbG9nIGJhc2UgMlxuICpcbiAqIEBmdW5jdGlvbiBsb2cyXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQHBhcmFtIHtudW1iZXJ9IHYgaW5wdXQgdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn0gbG9nYXJpdGhtIGJhc2UgMlxuICovXG5mdW5jdGlvbiBsb2cyKHYpXG57XG4gICAgdmFyIHIgPSAodiA+IDB4RkZGRikgPDwgNDtcblxuICAgIHYgPj4+PSByO1xuXG4gICAgdmFyIHNoaWZ0ID0gKHYgPiAweEZGKSA8PCAzO1xuXG4gICAgdiA+Pj49IHNoaWZ0OyByIHw9IHNoaWZ0O1xuICAgIHNoaWZ0ID0gKHYgPiAweEYpIDw8IDI7XG4gICAgdiA+Pj49IHNoaWZ0OyByIHw9IHNoaWZ0O1xuICAgIHNoaWZ0ID0gKHYgPiAweDMpIDw8IDE7XG4gICAgdiA+Pj49IHNoaWZ0OyByIHw9IHNoaWZ0O1xuXG4gICAgcmV0dXJuIHIgfCAodiA+PiAxKTtcbn1cblxuLyoqXG4gKiBAdG9kbyBEZXNjcmliZSBwcm9wZXJ0eSB1c2FnZVxuICpcbiAqIEBzdGF0aWNcbiAqIEBuYW1lIFByb2dyYW1DYWNoZVxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBQcm9ncmFtQ2FjaGUgPSB7fTtcblxuLyoqXG4gKiBAdG9kbyBEZXNjcmliZSBwcm9wZXJ0eSB1c2FnZVxuICpcbiAqIEBzdGF0aWNcbiAqIEBuYW1lIFRleHR1cmVDYWNoZVxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBUZXh0dXJlQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4vKipcbiAqIEB0b2RvIERlc2NyaWJlIHByb3BlcnR5IHVzYWdlXG4gKlxuICogQHN0YXRpY1xuICogQG5hbWUgQmFzZVRleHR1cmVDYWNoZVxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxudmFyIEJhc2VUZXh0dXJlQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqXG4gKiBEZXN0cm95cyBhbGwgdGV4dHVyZSBpbiB0aGUgY2FjaGVcbiAqXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIGRlc3Ryb3lUZXh0dXJlQ2FjaGVcbiAqL1xuZnVuY3Rpb24gZGVzdHJveVRleHR1cmVDYWNoZSgpXG57XG4gICAgdmFyIGtleTtcblxuICAgIGZvciAoa2V5IGluIFRleHR1cmVDYWNoZSlcbiAgICB7XG4gICAgICAgIFRleHR1cmVDYWNoZVtrZXldLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgZm9yIChrZXkgaW4gQmFzZVRleHR1cmVDYWNoZSlcbiAgICB7XG4gICAgICAgIEJhc2VUZXh0dXJlQ2FjaGVba2V5XS5kZXN0cm95KCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIHRleHR1cmVzIGZyb20gY2FjaGUsIGJ1dCBkb2VzIG5vdCBkZXN0cm95IHRoZW1cbiAqXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIGNsZWFyVGV4dHVyZUNhY2hlXG4gKi9cbmZ1bmN0aW9uIGNsZWFyVGV4dHVyZUNhY2hlKClcbntcbiAgICB2YXIga2V5O1xuXG4gICAgZm9yIChrZXkgaW4gVGV4dHVyZUNhY2hlKVxuICAgIHtcbiAgICAgICAgZGVsZXRlIFRleHR1cmVDYWNoZVtrZXldO1xuICAgIH1cbiAgICBmb3IgKGtleSBpbiBCYXNlVGV4dHVyZUNhY2hlKVxuICAgIHtcbiAgICAgICAgZGVsZXRlIEJhc2VUZXh0dXJlQ2FjaGVba2V5XTtcbiAgICB9XG59XG5cbi8qKlxuICogVHJpbSB0cmFuc3BhcmVudCBib3JkZXJzIGZyb20gYSBjYW52YXNcbiAqXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIHRyaW1DYW52YXNcbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcyAtIHRoZSBjYW52YXMgdG8gdHJpbVxuICogQHJldHVybnMge29iamVjdH0gVHJpbSBkYXRhXG4gKi9cbmZ1bmN0aW9uIHRyaW1DYW52YXMoY2FudmFzKVxue1xuICAgIC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3JlbXkvNzg0NTA4XG5cbiAgICB2YXIgd2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgdmFyIGhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG5cbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHZhciBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB2YXIgcGl4ZWxzID0gaW1hZ2VEYXRhLmRhdGE7XG4gICAgdmFyIGxlbiA9IHBpeGVscy5sZW5ndGg7XG5cbiAgICB2YXIgYm91bmQgPSB7XG4gICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgbGVmdDogbnVsbCxcbiAgICAgICAgcmlnaHQ6IG51bGwsXG4gICAgICAgIGJvdHRvbTogbnVsbCxcbiAgICB9O1xuICAgIHZhciBkYXRhID0gbnVsbDtcbiAgICB2YXIgaTtcbiAgICB2YXIgeDtcbiAgICB2YXIgeTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNClcbiAgICB7XG4gICAgICAgIGlmIChwaXhlbHNbaSArIDNdICE9PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICB4ID0gKGkgLyA0KSAlIHdpZHRoO1xuICAgICAgICAgICAgeSA9IH5+KChpIC8gNCkgLyB3aWR0aCk7XG5cbiAgICAgICAgICAgIGlmIChib3VuZC50b3AgPT09IG51bGwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYm91bmQudG9wID0geTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJvdW5kLmxlZnQgPT09IG51bGwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYm91bmQubGVmdCA9IHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh4IDwgYm91bmQubGVmdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBib3VuZC5sZWZ0ID0geDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJvdW5kLnJpZ2h0ID09PSBudWxsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJvdW5kLnJpZ2h0ID0geCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChib3VuZC5yaWdodCA8IHgpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYm91bmQucmlnaHQgPSB4ICsgMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJvdW5kLmJvdHRvbSA9PT0gbnVsbClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBib3VuZC5ib3R0b20gPSB5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYm91bmQuYm90dG9tIDwgeSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBib3VuZC5ib3R0b20gPSB5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJvdW5kLnRvcCAhPT0gbnVsbClcbiAgICB7XG4gICAgICAgIHdpZHRoID0gYm91bmQucmlnaHQgLSBib3VuZC5sZWZ0O1xuICAgICAgICBoZWlnaHQgPSBib3VuZC5ib3R0b20gLSBib3VuZC50b3AgKyAxO1xuICAgICAgICBkYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoYm91bmQubGVmdCwgYm91bmQudG9wLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBkYXRhOiBkYXRhLFxuICAgIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIENhbnZhcyBlbGVtZW50IG9mIHRoZSBnaXZlbiBzaXplIHRvIGJlIHVzZWQgYXMgYSB0YXJnZXQgZm9yIHJlbmRlcmluZyB0by5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJLnV0aWxzXG4gKi9cbnZhciBDYW52YXNSZW5kZXJUYXJnZXQgPSBmdW5jdGlvbiBDYW52YXNSZW5kZXJUYXJnZXQod2lkdGgsIGhlaWdodCwgcmVzb2x1dGlvbilcbntcbiAgICAvKipcbiAgICAgKiBUaGUgQ2FudmFzIG9iamVjdCB0aGF0IGJlbG9uZ3MgdG8gdGhpcyBDYW52YXNSZW5kZXJUYXJnZXQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtIVE1MQ2FudmFzRWxlbWVudH1cbiAgICAgKi9cbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgLyoqXG4gICAgICogQSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgb2JqZWN0IHJlcHJlc2VudGluZyBhIHR3by1kaW1lbnNpb25hbCByZW5kZXJpbmcgY29udGV4dC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH1cbiAgICAgKi9cbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgdGhpcy5yZXNvbHV0aW9uID0gcmVzb2x1dGlvbiB8fCBzZXR0aW5ncy5SRVNPTFVUSU9OO1xuXG4gICAgdGhpcy5yZXNpemUod2lkdGgsIGhlaWdodCk7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyB3aWR0aDogeyBjb25maWd1cmFibGU6IHRydWUgfSxoZWlnaHQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLyoqXG4gKiBDbGVhcnMgdGhlIGNhbnZhcyB0aGF0IHdhcyBjcmVhdGVkIGJ5IHRoZSBDYW52YXNSZW5kZXJUYXJnZXQgY2xhc3MuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQ2FudmFzUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpXG57XG4gICAgdGhpcy5jb250ZXh0LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xufTtcblxuLyoqXG4gKiBSZXNpemVzIHRoZSBjYW52YXMgdG8gdGhlIHNwZWNpZmllZCB3aWR0aCBhbmQgaGVpZ2h0LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIHRoZSBuZXcgd2lkdGggb2YgdGhlIGNhbnZhc1xuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIHRoZSBuZXcgaGVpZ2h0IG9mIHRoZSBjYW52YXNcbiAqL1xuQ2FudmFzUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiByZXNpemUgKHdpZHRoLCBoZWlnaHQpXG57XG4gICAgdGhpcy5jYW52YXMud2lkdGggPSB3aWR0aCAqIHRoaXMucmVzb2x1dGlvbjtcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiB0aGlzLnJlc29sdXRpb247XG59O1xuXG4vKipcbiAqIERlc3Ryb3lzIHRoaXMgY2FudmFzLlxuICpcbiAqL1xuQ2FudmFzUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5jYW52YXMgPSBudWxsO1xufTtcblxuLyoqXG4gKiBUaGUgd2lkdGggb2YgdGhlIGNhbnZhcyBidWZmZXIgaW4gcGl4ZWxzLlxuICpcbiAqIEBtZW1iZXIge251bWJlcn1cbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzLndpZHRoLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzLndpZHRoO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLndpZHRoLnNldCA9IGZ1bmN0aW9uICh2YWwpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xue1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gdmFsO1xufTtcblxuLyoqXG4gKiBUaGUgaGVpZ2h0IG9mIHRoZSBjYW52YXMgYnVmZmVyIGluIHBpeGVscy5cbiAqXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5oZWlnaHQuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy5jYW52YXMuaGVpZ2h0O1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLmhlaWdodC5zZXQgPSBmdW5jdGlvbiAodmFsKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB2YWw7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggQ2FudmFzUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbi8qKlxuICogUmVnZXhwIGZvciBkYXRhIFVSSS5cbiAqIEJhc2VkIG9uOiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3JhZ2luZ3dpbmQvZGF0YS11cmktcmVnZXh9XG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0YW50IHtSZWdFeHB8c3RyaW5nfSBEQVRBX1VSSVxuICogQG1lbWJlcm9mIFBJWElcbiAqIEBleGFtcGxlIGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NFxuICovXG52YXIgREFUQV9VUkkgPSAvXlxccypkYXRhOig/OihbXFx3LV0rKVxcLyhbXFx3Ky4tXSspKT8oPzo7Y2hhcnNldD0oW1xcdy1dKykpPyg/OjsoYmFzZTY0KSk/LCguKikvaTtcblxuLyoqXG4gKiBUeXBlZGVmIGZvciBkZWNvbXBvc2VEYXRhVXJpIHJldHVybiBvYmplY3QuXG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEB0eXBlZGVmIHtvYmplY3R9IERlY29tcG9zZWREYXRhVXJpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbWVkaWFUeXBlIE1lZGlhIHR5cGUsIGVnLiBgaW1hZ2VgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3ViVHlwZSBTdWIgdHlwZSwgZWcuIGBwbmdgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZW5jb2RpbmcgRGF0YSBlbmNvZGluZywgZWcuIGBiYXNlNjRgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGF0YSBUaGUgYWN0dWFsIGRhdGFcbiAqL1xuXG4vKipcbiAqIFNwbGl0IGEgZGF0YSBVUkkgaW50byBjb21wb25lbnRzLiBSZXR1cm5zIHVuZGVmaW5lZCBpZlxuICogcGFyYW1ldGVyIGBkYXRhVXJpYCBpcyBub3QgYSB2YWxpZCBkYXRhIFVSSS5cbiAqXG4gKiBAbWVtYmVyb2YgUElYSS51dGlsc1xuICogQGZ1bmN0aW9uIGRlY29tcG9zZURhdGFVcmlcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhVXJpIC0gdGhlIGRhdGEgVVJJIHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtQSVhJLnV0aWxzLkRlY29tcG9zZWREYXRhVXJpfHVuZGVmaW5lZH0gVGhlIGRlY29tcG9zZWQgZGF0YSB1cmkgb3IgdW5kZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIGRlY29tcG9zZURhdGFVcmkoZGF0YVVyaSlcbntcbiAgICB2YXIgZGF0YVVyaU1hdGNoID0gREFUQV9VUkkuZXhlYyhkYXRhVXJpKTtcblxuICAgIGlmIChkYXRhVXJpTWF0Y2gpXG4gICAge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWVkaWFUeXBlOiBkYXRhVXJpTWF0Y2hbMV0gPyBkYXRhVXJpTWF0Y2hbMV0udG9Mb3dlckNhc2UoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHN1YlR5cGU6IGRhdGFVcmlNYXRjaFsyXSA/IGRhdGFVcmlNYXRjaFsyXS50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY2hhcnNldDogZGF0YVVyaU1hdGNoWzNdID8gZGF0YVVyaU1hdGNoWzNdLnRvTG93ZXJDYXNlKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBlbmNvZGluZzogZGF0YVVyaU1hdGNoWzRdID8gZGF0YVVyaU1hdGNoWzRdLnRvTG93ZXJDYXNlKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkYXRhOiBkYXRhVXJpTWF0Y2hbNV0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxudmFyIHRlbXBBbmNob3I7XG5cbi8qKlxuICogU2V0cyB0aGUgYGNyb3NzT3JpZ2luYCBwcm9wZXJ0eSBmb3IgdGhpcyByZXNvdXJjZSBiYXNlZCBvbiBpZiB0aGUgdXJsXG4gKiBmb3IgdGhpcyByZXNvdXJjZSBpcyBjcm9zcy1vcmlnaW4uIElmIGNyb3NzT3JpZ2luIHdhcyBtYW51YWxseSBzZXQsIHRoaXNcbiAqIGZ1bmN0aW9uIGRvZXMgbm90aGluZy5cbiAqIE5pcHBlZCBmcm9tIHRoZSByZXNvdXJjZSBsb2FkZXIhXG4gKlxuICogQGlnbm9yZVxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSB1cmwgdG8gdGVzdC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbbG9jPXdpbmRvdy5sb2NhdGlvbl0gLSBUaGUgbG9jYXRpb24gb2JqZWN0IHRvIHRlc3QgYWdhaW5zdC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNyb3NzT3JpZ2luIHZhbHVlIHRvIHVzZSAob3IgZW1wdHkgc3RyaW5nIGZvciBub25lKS5cbiAqL1xuZnVuY3Rpb24gZGV0ZXJtaW5lQ3Jvc3NPcmlnaW4odXJsLCBsb2MpXG57XG4gICAgaWYgKCBsb2MgPT09IHZvaWQgMCApIGxvYyA9IHdpbmRvdy5sb2NhdGlvbjtcblxuICAgIC8vIGRhdGE6IGFuZCBqYXZhc2NyaXB0OiB1cmxzIGFyZSBjb25zaWRlcmVkIHNhbWUtb3JpZ2luXG4gICAgaWYgKHVybC5pbmRleE9mKCdkYXRhOicpID09PSAwKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgaXMgd2luZG93LmxvY2F0aW9uXG4gICAgbG9jID0gbG9jIHx8IHdpbmRvdy5sb2NhdGlvbjtcblxuICAgIGlmICghdGVtcEFuY2hvcilcbiAgICB7XG4gICAgICAgIHRlbXBBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgfVxuXG4gICAgLy8gbGV0IHRoZSBicm93c2VyIGRldGVybWluZSB0aGUgZnVsbCBocmVmIGZvciB0aGUgdXJsIG9mIHRoaXMgcmVzb3VyY2UgYW5kIHRoZW5cbiAgICAvLyBwYXJzZSB3aXRoIHRoZSBub2RlIHVybCBsaWIsIHdlIGNhbid0IHVzZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgYW5jaG9yIGVsZW1lbnRcbiAgICAvLyBiZWNhdXNlIHRoZXkgZG9uJ3Qgd29yayBpbiBJRTkgOihcbiAgICB0ZW1wQW5jaG9yLmhyZWYgPSB1cmw7XG4gICAgdXJsID0gX3VybC5wYXJzZSh0ZW1wQW5jaG9yLmhyZWYpO1xuXG4gICAgdmFyIHNhbWVQb3J0ID0gKCF1cmwucG9ydCAmJiBsb2MucG9ydCA9PT0gJycpIHx8ICh1cmwucG9ydCA9PT0gbG9jLnBvcnQpO1xuXG4gICAgLy8gaWYgY3Jvc3Mgb3JpZ2luXG4gICAgaWYgKHVybC5ob3N0bmFtZSAhPT0gbG9jLmhvc3RuYW1lIHx8ICFzYW1lUG9ydCB8fCB1cmwucHJvdG9jb2wgIT09IGxvYy5wcm90b2NvbClcbiAgICB7XG4gICAgICAgIHJldHVybiAnYW5vbnltb3VzJztcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogZ2V0IHRoZSByZXNvbHV0aW9uIC8gZGV2aWNlIHBpeGVsIHJhdGlvIG9mIGFuIGFzc2V0IGJ5IGxvb2tpbmcgZm9yIHRoZSBwcmVmaXhcbiAqIHVzZWQgYnkgc3ByaXRlc2hlZXRzIGFuZCBpbWFnZSB1cmxzXG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBnZXRSZXNvbHV0aW9uT2ZVcmxcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSB0aGUgaW1hZ2UgcGF0aFxuICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWU9MV0gLSB0aGUgZGVmYXVsdFZhbHVlIGlmIG5vIGZpbGVuYW1lIHByZWZpeCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHJlc29sdXRpb24gLyBkZXZpY2UgcGl4ZWwgcmF0aW8gb2YgYW4gYXNzZXRcbiAqL1xuZnVuY3Rpb24gZ2V0UmVzb2x1dGlvbk9mVXJsKHVybCwgZGVmYXVsdFZhbHVlKVxue1xuICAgIHZhciByZXNvbHV0aW9uID0gc2V0dGluZ3MuUkVUSU5BX1BSRUZJWC5leGVjKHVybCk7XG5cbiAgICBpZiAocmVzb2x1dGlvbilcbiAgICB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHJlc29sdXRpb25bMV0pO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IDE7XG59XG5cbi8vIEEgbWFwIG9mIHdhcm5pbmcgbWVzc2FnZXMgYWxyZWFkeSBmaXJlZFxudmFyIHdhcm5pbmdzID0ge307XG5cbi8qKlxuICogSGVscGVyIGZvciB3YXJuaW5nIGRldmVsb3BlcnMgYWJvdXQgZGVwcmVjYXRlZCBmZWF0dXJlcyAmIHNldHRpbmdzLlxuICogQSBzdGFjayB0cmFjayBmb3Igd2FybmluZ3MgaXMgZ2l2ZW47IHVzZWZ1bCBmb3IgdHJhY2tpbmctZG93biB3aGVyZVxuICogZGVwcmVjYXRlZCBtZXRob2RzL3Byb3BlcnRpZXMvY2xhc3NlcyBhcmUgYmVpbmcgdXNlZCB3aXRoaW4gdGhlIGNvZGUuXG4gKlxuICogQG1lbWJlcm9mIFBJWEkudXRpbHNcbiAqIEBmdW5jdGlvbiBkZXByZWNhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb24gLSBUaGUgdmVyc2lvbiB3aGVyZSB0aGUgZmVhdHVyZSBiZWNhbWUgZGVwcmVjYXRlZFxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBNZXNzYWdlIHNob3VsZCBpbmNsdWRlIHdoYXQgaXMgZGVwcmVjYXRlZCwgd2hlcmUsIGFuZCB0aGUgbmV3IHNvbHV0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gW2lnbm9yZURlcHRoPTNdIC0gVGhlIG51bWJlciBvZiBzdGVwcyB0byBpZ25vcmUgYXQgdGhlIHRvcCBvZiB0aGUgZXJyb3Igc3RhY2tcbiAqICAgICAgICB0aGlzIGlzIG1vc3RseSB0byBpZ25vcmUgaW50ZXJuYWwgZGVwcmVjYXRpb24gY2FsbHMuXG4gKi9cbmZ1bmN0aW9uIGRlcHJlY2F0aW9uKHZlcnNpb24sIG1lc3NhZ2UsIGlnbm9yZURlcHRoKVxue1xuICAgIGlmICggaWdub3JlRGVwdGggPT09IHZvaWQgMCApIGlnbm9yZURlcHRoID0gMztcblxuICAgIC8vIElnbm9yZSBkdXBsaWNhdFxuICAgIGlmICh3YXJuaW5nc1ttZXNzYWdlXSlcbiAgICB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgdmFyIHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG5cbiAgICAvLyBIYW5kbGUgSUUgPCAxMCBhbmQgU2FmYXJpIDwgNlxuICAgIGlmICh0eXBlb2Ygc3RhY2sgPT09ICd1bmRlZmluZWQnKVxuICAgIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdQaXhpSlMgRGVwcmVjYXRpb24gV2FybmluZzogJywgKG1lc3NhZ2UgKyBcIlxcbkRlcHJlY2F0ZWQgc2luY2UgdlwiICsgdmVyc2lvbikpO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICAvLyBjaG9wIG9mZiB0aGUgc3RhY2sgdHJhY2Ugd2hpY2ggaW5jbHVkZXMgUGl4aUpTIGludGVybmFsIGNhbGxzXG4gICAgICAgIHN0YWNrID0gc3RhY2suc3BsaXQoJ1xcbicpLnNwbGljZShpZ25vcmVEZXB0aCkuam9pbignXFxuJyk7XG5cbiAgICAgICAgaWYgKGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoXG4gICAgICAgICAgICAgICAgJyVjUGl4aUpTIERlcHJlY2F0aW9uIFdhcm5pbmc6ICVjJXMnLFxuICAgICAgICAgICAgICAgICdjb2xvcjojNjE0MTA4O2JhY2tncm91bmQ6I2ZmZmJlNicsXG4gICAgICAgICAgICAgICAgJ2ZvbnQtd2VpZ2h0Om5vcm1hbDtjb2xvcjojNjE0MTA4O2JhY2tncm91bmQ6I2ZmZmJlNicsXG4gICAgICAgICAgICAgICAgKG1lc3NhZ2UgKyBcIlxcbkRlcHJlY2F0ZWQgc2luY2UgdlwiICsgdmVyc2lvbilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oc3RhY2spO1xuICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdQaXhpSlMgRGVwcmVjYXRpb24gV2FybmluZzogJywgKG1lc3NhZ2UgKyBcIlxcbkRlcHJlY2F0ZWQgc2luY2UgdlwiICsgdmVyc2lvbikpO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKHN0YWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuICAgIHdhcm5pbmdzW21lc3NhZ2VdID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBHZW5lcmFsaXplZCBjb252ZW5pZW5jZSB1dGlsaXRpZXMgZm9yIFBJWEkuXG4gKiBAZXhhbXBsZVxuICogLy8gRXh0ZW5kIFBJWEkncyBpbnRlcm5hbCBFdmVudCBFbWl0dGVyLlxuICogY2xhc3MgTXlFbWl0dGVyIGV4dGVuZHMgUElYSS51dGlscy5FdmVudEVtaXR0ZXIge1xuICogICBjb25zdHJ1Y3RvcigpIHtcbiAqICAgICAgc3VwZXIoKTtcbiAqICAgICAgY29uc29sZS5sb2coXCJFbWl0dGVyIGNyZWF0ZWQhXCIpO1xuICogICB9XG4gKiB9XG4gKlxuICogLy8gR2V0IGluZm8gb24gY3VycmVudCBkZXZpY2VcbiAqIGNvbnNvbGUubG9nKFBJWEkudXRpbHMuaXNNb2JpbGUpO1xuICpcbiAqIC8vIENvbnZlcnQgaGV4IGNvbG9yIHRvIHN0cmluZ1xuICogY29uc29sZS5sb2coUElYSS51dGlscy5oZXgyc3RyaW5nKDB4ZmYwMGZmKSk7IC8vIHJldHVybnM6IFwiI2ZmMDBmZlwiXG4gKiBAbmFtZXNwYWNlIFBJWEkudXRpbHNcbiAqL1xuXG5leHBvcnQgeyBCYXNlVGV4dHVyZUNhY2hlLCBDYW52YXNSZW5kZXJUYXJnZXQsIERBVEFfVVJJLCBQcm9ncmFtQ2FjaGUsIFRleHR1cmVDYWNoZSwgY2xlYXJUZXh0dXJlQ2FjaGUsIGNvcnJlY3RCbGVuZE1vZGUsIGNyZWF0ZUluZGljZXNGb3JRdWFkcywgZGVjb21wb3NlRGF0YVVyaSwgZGVwcmVjYXRpb24sIGRlc3Ryb3lUZXh0dXJlQ2FjaGUsIGRldGVybWluZUNyb3NzT3JpZ2luLCBnZXRSZXNvbHV0aW9uT2ZVcmwsIGhleDJyZ2IsIGhleDJzdHJpbmcsIGlzUG93MiwgaXNXZWJHTFN1cHBvcnRlZCwgbG9nMiwgbmV4dFBvdzIsIHByZW11bHRpcGx5QmxlbmRNb2RlLCBwcmVtdWx0aXBseVJnYmEsIHByZW11bHRpcGx5VGludCwgcHJlbXVsdGlwbHlUaW50VG9SZ2JhLCByZW1vdmVJdGVtcywgcmdiMmhleCwgc2F5SGVsbG8sIHNpZ24sIHNraXBIZWxsbywgc3RyaW5nMmhleCwgdHJpbUNhbnZhcywgdWlkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5lcy5qcy5tYXBcbiIsIi8qIVxuICogQHBpeGkvdGlja2VyIC0gdjUuMS4zXG4gKiBDb21waWxlZCBNb24sIDA5IFNlcCAyMDE5IDA0OjUxOjUzIFVUQ1xuICpcbiAqIEBwaXhpL3RpY2tlciBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbmltcG9ydCB7IHNldHRpbmdzIH0gZnJvbSAnQHBpeGkvc2V0dGluZ3MnO1xuXG4vKipcbiAqIFRhcmdldCBmcmFtZXMgcGVyIG1pbGxpc2Vjb25kLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBuYW1lIFRBUkdFVF9GUE1TXG4gKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0IDAuMDZcbiAqL1xuc2V0dGluZ3MuVEFSR0VUX0ZQTVMgPSAwLjA2O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHVwZGF0ZSBwcmlvcml0aWVzIHVzZWQgYnkgaW50ZXJuYWwgUElYSSBjbGFzc2VzIHdoZW4gcmVnaXN0ZXJlZCB3aXRoXG4gKiB0aGUge0BsaW5rIFBJWEkuVGlja2VyfSBvYmplY3QuIEhpZ2hlciBwcmlvcml0eSBpdGVtcyBhcmUgdXBkYXRlZCBmaXJzdCBhbmQgbG93ZXJcbiAqIHByaW9yaXR5IGl0ZW1zLCBzdWNoIGFzIHJlbmRlciwgc2hvdWxkIGdvIGxhdGVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudFxuICogQG5hbWUgVVBEQVRFX1BSSU9SSVRZXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHR5cGUge29iamVjdH1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBJTlRFUkFDVElPTj01MCBIaWdoZXN0IHByaW9yaXR5LCB1c2VkIGZvciB7QGxpbmsgUElYSS5pbnRlcmFjdGlvbi5JbnRlcmFjdGlvbk1hbmFnZXJ9XG4gKiBAcHJvcGVydHkge251bWJlcn0gSElHSD0yNSBIaWdoIHByaW9yaXR5IHVwZGF0aW5nLCB7QGxpbmsgUElYSS5WaWRlb0Jhc2VUZXh0dXJlfSBhbmQge0BsaW5rIFBJWEkuQW5pbWF0ZWRTcHJpdGV9XG4gKiBAcHJvcGVydHkge251bWJlcn0gTk9STUFMPTAgRGVmYXVsdCBwcmlvcml0eSBmb3IgdGlja2VyIGV2ZW50cywgc2VlIHtAbGluayBQSVhJLlRpY2tlciNhZGR9LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IExPVz0tMjUgTG93IHByaW9yaXR5IHVzZWQgZm9yIHtAbGluayBQSVhJLkFwcGxpY2F0aW9ufSByZW5kZXJpbmcuXG4gKiBAcHJvcGVydHkge251bWJlcn0gVVRJTElUWT0tNTAgTG93ZXN0IHByaW9yaXR5IHVzZWQgZm9yIHtAbGluayBQSVhJLnByZXBhcmUuQmFzZVByZXBhcmV9IHV0aWxpdHkuXG4gKi9cbnZhciBVUERBVEVfUFJJT1JJVFkgPSB7XG4gICAgSU5URVJBQ1RJT046IDUwLFxuICAgIEhJR0g6IDI1LFxuICAgIE5PUk1BTDogMCxcbiAgICBMT1c6IC0yNSxcbiAgICBVVElMSVRZOiAtNTAsXG59O1xuXG4vKipcbiAqIEludGVybmFsIGNsYXNzIGZvciBoYW5kbGluZyB0aGUgcHJpb3JpdHkgc29ydGluZyBvZiB0aWNrZXIgaGFuZGxlcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFRpY2tlckxpc3RlbmVyID0gZnVuY3Rpb24gVGlja2VyTGlzdGVuZXIoZm4sIGNvbnRleHQsIHByaW9yaXR5LCBvbmNlKVxue1xuICAgIGlmICggY29udGV4dCA9PT0gdm9pZCAwICkgY29udGV4dCA9IG51bGw7XG4gICAgaWYgKCBwcmlvcml0eSA9PT0gdm9pZCAwICkgcHJpb3JpdHkgPSAwO1xuICAgIGlmICggb25jZSA9PT0gdm9pZCAwICkgb25jZSA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGhhbmRsZXIgZnVuY3Rpb24gdG8gZXhlY3V0ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZW1iZXIge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMuZm4gPSBmbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsaW5nIHRvIGV4ZWN1dGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWVtYmVyIHsqfVxuICAgICAqL1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBwcmlvcml0eS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIHNob3VsZCBvbmx5IGV4ZWN1dGUgb25jZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5vbmNlID0gb25jZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBuZXh0IGl0ZW0gaW4gY2hhaW4uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWVtYmVyIHtUaWNrZXJMaXN0ZW5lcn1cbiAgICAgKi9cbiAgICB0aGlzLm5leHQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHByZXZpb3VzIGl0ZW0gaW4gY2hhaW4uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWVtYmVyIHtUaWNrZXJMaXN0ZW5lcn1cbiAgICAgKi9cbiAgICB0aGlzLnByZXZpb3VzID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIGB0cnVlYCBpZiB0aGlzIGxpc3RlbmVyIGhhcyBiZWVuIGRlc3Ryb3llZCBhbHJlYWR5LlxuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9kZXN0cm95ZWQgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogU2ltcGxlIGNvbXBhcmUgZnVuY3Rpb24gdG8gZmlndXJlIG91dCBpZiBhIGZ1bmN0aW9uIGFuZCBjb250ZXh0IG1hdGNoLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIGFkZGVkIGZvciBvbmUgdXBkYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb250ZXh0IC0gVGhlIGxpc3RlbmVyIGNvbnRleHRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgbGlzdGVuZXIgbWF0Y2ggdGhlIGFyZ3VtZW50c1xuICovXG5UaWNrZXJMaXN0ZW5lci5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbiBtYXRjaCAoZm4sIGNvbnRleHQpXG57XG4gICAgY29udGV4dCA9IGNvbnRleHQgfHwgbnVsbDtcblxuICAgIHJldHVybiB0aGlzLmZuID09PSBmbiAmJiB0aGlzLmNvbnRleHQgPT09IGNvbnRleHQ7XG59O1xuXG4vKipcbiAqIEVtaXQgYnkgY2FsbGluZyB0aGUgY3VycmVudCBmdW5jdGlvbi5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lIC0gdGltZSBzaW5jZSB0aGUgbGFzdCBlbWl0LlxuICogQHJldHVybiB7VGlja2VyTGlzdGVuZXJ9IE5leHQgdGlja2VyXG4gKi9cblRpY2tlckxpc3RlbmVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCAoZGVsdGFUaW1lKVxue1xuICAgIGlmICh0aGlzLmZuKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGV4dClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5mbi5jYWxsKHRoaXMuY29udGV4dCwgZGVsdGFUaW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZm4oZGVsdGFUaW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWRpcmVjdCA9IHRoaXMubmV4dDtcblxuICAgIGlmICh0aGlzLm9uY2UpXG4gICAge1xuICAgICAgICB0aGlzLmRlc3Ryb3kodHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gU29mdC1kZXN0cm95aW5nIHNob3VsZCByZW1vdmVcbiAgICAvLyB0aGUgbmV4dCByZWZlcmVuY2VcbiAgICBpZiAodGhpcy5fZGVzdHJveWVkKVxuICAgIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVkaXJlY3Q7XG59O1xuXG4vKipcbiAqIENvbm5lY3QgdG8gdGhlIGxpc3QuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtUaWNrZXJMaXN0ZW5lcn0gcHJldmlvdXMgLSBJbnB1dCBub2RlLCBwcmV2aW91cyBsaXN0ZW5lclxuICovXG5UaWNrZXJMaXN0ZW5lci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QgKHByZXZpb3VzKVxue1xuICAgIHRoaXMucHJldmlvdXMgPSBwcmV2aW91cztcbiAgICBpZiAocHJldmlvdXMubmV4dClcbiAgICB7XG4gICAgICAgIHByZXZpb3VzLm5leHQucHJldmlvdXMgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLm5leHQgPSBwcmV2aW91cy5uZXh0O1xuICAgIHByZXZpb3VzLm5leHQgPSB0aGlzO1xufTtcblxuLyoqXG4gKiBEZXN0cm95IGFuZCBkb24ndCB1c2UgYWZ0ZXIgdGhpcy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtoYXJkID0gZmFsc2VdIGB0cnVlYCB0byByZW1vdmUgdGhlIGBuZXh0YCByZWZlcmVuY2UsIHRoaXNcbiAqICAgIGlzIGNvbnNpZGVyZWQgYSBoYXJkIGRlc3Ryb3kuIFNvZnQgZGVzdHJveSBtYWludGFpbnMgdGhlIG5leHQgcmVmZXJlbmNlLlxuICogQHJldHVybiB7VGlja2VyTGlzdGVuZXJ9IFRoZSBsaXN0ZW5lciB0byByZWRpcmVjdCB3aGlsZSBlbWl0dGluZyBvciByZW1vdmluZy5cbiAqL1xuVGlja2VyTGlzdGVuZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95IChoYXJkKVxue1xuICAgICAgICBpZiAoIGhhcmQgPT09IHZvaWQgMCApIGhhcmQgPSBmYWxzZTtcblxuICAgIHRoaXMuX2Rlc3Ryb3llZCA9IHRydWU7XG4gICAgdGhpcy5mbiA9IG51bGw7XG4gICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcblxuICAgIC8vIERpc2Nvbm5lY3QsIGhvb2sgdXAgbmV4dCBhbmQgcHJldmlvdXNcbiAgICBpZiAodGhpcy5wcmV2aW91cylcbiAgICB7XG4gICAgICAgIHRoaXMucHJldmlvdXMubmV4dCA9IHRoaXMubmV4dDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZXh0KVxuICAgIHtcbiAgICAgICAgdGhpcy5uZXh0LnByZXZpb3VzID0gdGhpcy5wcmV2aW91cztcbiAgICB9XG5cbiAgICAvLyBSZWRpcmVjdCB0byB0aGUgbmV4dCBpdGVtXG4gICAgdmFyIHJlZGlyZWN0ID0gdGhpcy5uZXh0O1xuXG4gICAgLy8gUmVtb3ZlIHJlZmVyZW5jZXNcbiAgICB0aGlzLm5leHQgPSBoYXJkID8gbnVsbCA6IHJlZGlyZWN0O1xuICAgIHRoaXMucHJldmlvdXMgPSBudWxsO1xuXG4gICAgcmV0dXJuIHJlZGlyZWN0O1xufTtcblxuLyoqXG4gKiBBIFRpY2tlciBjbGFzcyB0aGF0IHJ1bnMgYW4gdXBkYXRlIGxvb3AgdGhhdCBvdGhlciBvYmplY3RzIGxpc3RlbiB0by5cbiAqXG4gKiBUaGlzIGNsYXNzIGlzIGNvbXBvc2VkIGFyb3VuZCBsaXN0ZW5lcnMgbWVhbnQgZm9yIGV4ZWN1dGlvbiBvbiB0aGUgbmV4dCByZXF1ZXN0ZWQgYW5pbWF0aW9uIGZyYW1lLlxuICogQW5pbWF0aW9uIGZyYW1lcyBhcmUgcmVxdWVzdGVkIG9ubHkgd2hlbiBuZWNlc3NhcnksIGUuZy4gV2hlbiB0aGUgdGlja2VyIGlzIHN0YXJ0ZWQgYW5kIHRoZSBlbWl0dGVyIGhhcyBsaXN0ZW5lcnMuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgVGlja2VyID0gZnVuY3Rpb24gVGlja2VyKClcbntcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIC8qKlxuICAgICAqIFRoZSBmaXJzdCBsaXN0ZW5lci4gQWxsIG5ldyBsaXN0ZW5lcnMgYWRkZWQgYXJlIGNoYWluZWQgb24gdGhpcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtUaWNrZXJMaXN0ZW5lcn1cbiAgICAgKi9cbiAgICB0aGlzLl9oZWFkID0gbmV3IFRpY2tlckxpc3RlbmVyKG51bGwsIG51bGwsIEluZmluaXR5KTtcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGN1cnJlbnQgZnJhbWUgcmVxdWVzdCBJRFxuICAgICAqIEB0eXBlIHs/bnVtYmVyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcmVxdWVzdElkID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIHZhbHVlIG1hbmFnZWQgYnkgbWluRlBTIHByb3BlcnR5IHNldHRlciBhbmQgZ2V0dGVyLlxuICAgICAqIFRoaXMgaXMgdGhlIG1heGltdW0gYWxsb3dlZCBtaWxsaXNlY29uZHMgYmV0d2VlbiB1cGRhdGVzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9tYXhFbGFwc2VkTVMgPSAxMDA7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCB2YWx1ZSBtYW5hZ2VkIGJ5IG1heEZQUyBwcm9wZXJ0eSBzZXR0ZXIgYW5kIGdldHRlci5cbiAgICAgKiBUaGlzIGlzIHRoZSBtaW5pbXVtIGFsbG93ZWQgbWlsbGlzZWNvbmRzIGJldHdlZW4gdXBkYXRlcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX21pbkVsYXBzZWRNUyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGlzIHRpY2tlciBzaG91bGQgaW52b2tlIHRoZSBtZXRob2RcbiAgICAgKiB7QGxpbmsgUElYSS5UaWNrZXIjc3RhcnR9IGF1dG9tYXRpY2FsbHlcbiAgICAgKiB3aGVuIGEgbGlzdGVuZXIgaXMgYWRkZWQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgdGhpcy5hdXRvU3RhcnQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFNjYWxhciB0aW1lIHZhbHVlIGZyb20gbGFzdCBmcmFtZSB0byB0aGlzIGZyYW1lLlxuICAgICAqIFRoaXMgdmFsdWUgaXMgY2FwcGVkIGJ5IHNldHRpbmcge0BsaW5rIFBJWEkuVGlja2VyI21pbkZQU31cbiAgICAgKiBhbmQgaXMgc2NhbGVkIHdpdGgge0BsaW5rIFBJWEkuVGlja2VyI3NwZWVkfS5cbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhcCBtYXkgYmUgZXhjZWVkZWQgYnkgc2NhbGluZy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgdGhpcy5kZWx0YVRpbWUgPSAxO1xuXG4gICAgLyoqXG4gICAgICogU2NhbGVyIHRpbWUgZWxhcHNlZCBpbiBtaWxsaXNlY29uZHMgZnJvbSBsYXN0IGZyYW1lIHRvIHRoaXMgZnJhbWUuXG4gICAgICogVGhpcyB2YWx1ZSBpcyBjYXBwZWQgYnkgc2V0dGluZyB7QGxpbmsgUElYSS5UaWNrZXIjbWluRlBTfVxuICAgICAqIGFuZCBpcyBzY2FsZWQgd2l0aCB7QGxpbmsgUElYSS5UaWNrZXIjc3BlZWR9LlxuICAgICAqICoqTm90ZToqKiBUaGUgY2FwIG1heSBiZSBleGNlZWRlZCBieSBzY2FsaW5nLlxuICAgICAqIElmIHRoZSBwbGF0Zm9ybSBzdXBwb3J0cyBET01IaWdoUmVzVGltZVN0YW1wLFxuICAgICAqIHRoaXMgdmFsdWUgd2lsbCBoYXZlIGEgcHJlY2lzaW9uIG9mIDEgwrVzLlxuICAgICAqIERlZmF1bHRzIHRvIHRhcmdldCBmcmFtZSB0aW1lXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMTYuNjZcbiAgICAgKi9cbiAgICB0aGlzLmRlbHRhTVMgPSAxIC8gc2V0dGluZ3MuVEFSR0VUX0ZQTVM7XG5cbiAgICAvKipcbiAgICAgKiBUaW1lIGVsYXBzZWQgaW4gbWlsbGlzZWNvbmRzIGZyb20gbGFzdCBmcmFtZSB0byB0aGlzIGZyYW1lLlxuICAgICAqIE9wcG9zZWQgdG8gd2hhdCB0aGUgc2NhbGFyIHtAbGluayBQSVhJLlRpY2tlciNkZWx0YVRpbWV9XG4gICAgICogaXMgYmFzZWQsIHRoaXMgdmFsdWUgaXMgbmVpdGhlciBjYXBwZWQgbm9yIHNjYWxlZC5cbiAgICAgKiBJZiB0aGUgcGxhdGZvcm0gc3VwcG9ydHMgRE9NSGlnaFJlc1RpbWVTdGFtcCxcbiAgICAgKiB0aGlzIHZhbHVlIHdpbGwgaGF2ZSBhIHByZWNpc2lvbiBvZiAxIMK1cy5cbiAgICAgKiBEZWZhdWx0cyB0byB0YXJnZXQgZnJhbWUgdGltZVxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDE2LjY2XG4gICAgICovXG4gICAgdGhpcy5lbGFwc2VkTVMgPSAxIC8gc2V0dGluZ3MuVEFSR0VUX0ZQTVM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFzdCB0aW1lIHtAbGluayBQSVhJLlRpY2tlciN1cGRhdGV9IHdhcyBpbnZva2VkLlxuICAgICAqIFRoaXMgdmFsdWUgaXMgYWxzbyByZXNldCBpbnRlcm5hbGx5IG91dHNpZGUgb2YgaW52b2tpbmdcbiAgICAgKiB1cGRhdGUsIGJ1dCBvbmx5IHdoZW4gYSBuZXcgYW5pbWF0aW9uIGZyYW1lIGlzIHJlcXVlc3RlZC5cbiAgICAgKiBJZiB0aGUgcGxhdGZvcm0gc3VwcG9ydHMgRE9NSGlnaFJlc1RpbWVTdGFtcCxcbiAgICAgKiB0aGlzIHZhbHVlIHdpbGwgaGF2ZSBhIHByZWNpc2lvbiBvZiAxIMK1cy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAtMVxuICAgICAqL1xuICAgIHRoaXMubGFzdFRpbWUgPSAtMTtcblxuICAgIC8qKlxuICAgICAqIEZhY3RvciBvZiBjdXJyZW50IHtAbGluayBQSVhJLlRpY2tlciNkZWx0YVRpbWV9LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gU2NhbGVzIHRpY2tlci5kZWx0YVRpbWUgdG8gd2hhdCB3b3VsZCBiZVxuICAgICAqIC8vIHRoZSBlcXVpdmFsZW50IG9mIGFwcHJveGltYXRlbHkgMTIwIEZQU1xuICAgICAqIHRpY2tlci5zcGVlZCA9IDI7XG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIHRoaXMuc3BlZWQgPSAxO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhpcyB0aWNrZXIgaGFzIGJlZW4gc3RhcnRlZC5cbiAgICAgKiBgdHJ1ZWAgaWYge0BsaW5rIFBJWEkuVGlja2VyI3N0YXJ0fSBoYXMgYmVlbiBjYWxsZWQuXG4gICAgICogYGZhbHNlYCBpZiB7QGxpbmsgUElYSS5UaWNrZXIjc3RvcH0gaGFzIGJlZW4gY2FsbGVkLlxuICAgICAqIFdoaWxlIGBmYWxzZWAsIHRoaXMgdmFsdWUgbWF5IGNoYW5nZSB0byBgdHJ1ZWAgaW4gdGhlXG4gICAgICogZXZlbnQgb2Yge0BsaW5rIFBJWEkuVGlja2VyI2F1dG9TdGFydH0gYmVpbmcgYHRydWVgXG4gICAgICogYW5kIGEgbGlzdGVuZXIgaXMgYWRkZWQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBJZiBlbmFibGVkLCBkZWxldGluZyBpcyBkaXNhYmxlZC5cbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9wcm90ZWN0ZWQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYXN0IHRpbWUga2V5ZnJhbWUgd2FzIGV4ZWN1dGVkLlxuICAgICAqIE1haW50YWlucyBhIHJlbGF0aXZlbHkgZml4ZWQgaW50ZXJ2YWwgd2l0aCB0aGUgcHJldmlvdXMgdmFsdWUuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IC0xXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9sYXN0RnJhbWUgPSAtMTtcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIHRpY2sgbWV0aG9kIGJvdW5kIHRvIHRpY2tlciBpbnN0YW5jZS5cbiAgICAgKiBUaGlzIGlzIGJlY2F1c2UgaW4gZWFybHkgMjAxNSwgRnVuY3Rpb24uYmluZFxuICAgICAqIGlzIHN0aWxsIDYwJSBzbG93ZXIgaW4gaGlnaCBwZXJmb3JtYW5jZSBzY2VuYXJpb3MuXG4gICAgICogQWxzbyBzZXBhcmF0aW5nIGZyYW1lIHJlcXVlc3RzIGZyb20gdXBkYXRlIG1ldGhvZFxuICAgICAqIHNvIGxpc3RlbmVycyBtYXkgYmUgY2FsbGVkIGF0IGFueSB0aW1lIGFuZCB3aXRoXG4gICAgICogYW55IGFuaW1hdGlvbiBBUEksIGp1c3QgaW52b2tlIHRpY2tlci51cGRhdGUodGltZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gVGltZSBzaW5jZSBsYXN0IHRpY2suXG4gICAgICovXG4gICAgdGhpcy5fdGljayA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgIHRoaXMkMS5fcmVxdWVzdElkID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcyQxLnN0YXJ0ZWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIEludm9rZSBsaXN0ZW5lcnMgbm93XG4gICAgICAgICAgICB0aGlzJDEudXBkYXRlKHRpbWUpO1xuICAgICAgICAgICAgLy8gTGlzdGVuZXIgc2lkZSBlZmZlY3RzIG1heSBoYXZlIG1vZGlmaWVkIHRpY2tlciBzdGF0ZS5cbiAgICAgICAgICAgIGlmICh0aGlzJDEuc3RhcnRlZCAmJiB0aGlzJDEuX3JlcXVlc3RJZCA9PT0gbnVsbCAmJiB0aGlzJDEuX2hlYWQubmV4dClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzJDEuX3JlcXVlc3RJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzJDEuX3RpY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IEZQUzogeyBjb25maWd1cmFibGU6IHRydWUgfSxtaW5GUFM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbWF4RlBTOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG52YXIgc3RhdGljQWNjZXNzb3JzID0geyBzaGFyZWQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sc3lzdGVtOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qKlxuICogQ29uZGl0aW9uYWxseSByZXF1ZXN0cyBhIG5ldyBhbmltYXRpb24gZnJhbWUuXG4gKiBJZiBhIGZyYW1lIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZCwgYW5kIGlmIHRoZSBpbnRlcm5hbFxuICogZW1pdHRlciBoYXMgbGlzdGVuZXJzLCBhIG5ldyBmcmFtZSBpcyByZXF1ZXN0ZWQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuVGlja2VyLnByb3RvdHlwZS5fcmVxdWVzdElmTmVlZGVkID0gZnVuY3Rpb24gX3JlcXVlc3RJZk5lZWRlZCAoKVxue1xuICAgIGlmICh0aGlzLl9yZXF1ZXN0SWQgPT09IG51bGwgJiYgdGhpcy5faGVhZC5uZXh0KVxuICAgIHtcbiAgICAgICAgLy8gZW5zdXJlIGNhbGxiYWNrcyBnZXQgY29ycmVjdCBkZWx0YVxuICAgICAgICB0aGlzLmxhc3RUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIHRoaXMuX2xhc3RGcmFtZSA9IHRoaXMubGFzdFRpbWU7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLl90aWNrKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENvbmRpdGlvbmFsbHkgY2FuY2VscyBhIHBlbmRpbmcgYW5pbWF0aW9uIGZyYW1lLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblRpY2tlci5wcm90b3R5cGUuX2NhbmNlbElmTmVlZGVkID0gZnVuY3Rpb24gX2NhbmNlbElmTmVlZGVkICgpXG57XG4gICAgaWYgKHRoaXMuX3JlcXVlc3RJZCAhPT0gbnVsbClcbiAgICB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3JlcXVlc3RJZCk7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RJZCA9IG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDb25kaXRpb25hbGx5IHJlcXVlc3RzIGEgbmV3IGFuaW1hdGlvbiBmcmFtZS5cbiAqIElmIHRoZSB0aWNrZXIgaGFzIGJlZW4gc3RhcnRlZCBpdCBjaGVja3MgaWYgYSBmcmFtZSBoYXMgbm90IGFscmVhZHlcbiAqIGJlZW4gcmVxdWVzdGVkLCBhbmQgaWYgdGhlIGludGVybmFsIGVtaXR0ZXIgaGFzIGxpc3RlbmVycy4gSWYgdGhlc2VcbiAqIGNvbmRpdGlvbnMgYXJlIG1ldCwgYSBuZXcgZnJhbWUgaXMgcmVxdWVzdGVkLiBJZiB0aGUgdGlja2VyIGhhcyBub3RcbiAqIGJlZW4gc3RhcnRlZCwgYnV0IGF1dG9TdGFydCBpcyBgdHJ1ZWAsIHRoZW4gdGhlIHRpY2tlciBzdGFydHMgbm93LFxuICogYW5kIGNvbnRpbnVlcyB3aXRoIHRoZSBwcmV2aW91cyBjb25kaXRpb25zIHRvIHJlcXVlc3QgYSBuZXcgZnJhbWUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuVGlja2VyLnByb3RvdHlwZS5fc3RhcnRJZlBvc3NpYmxlID0gZnVuY3Rpb24gX3N0YXJ0SWZQb3NzaWJsZSAoKVxue1xuICAgIGlmICh0aGlzLnN0YXJ0ZWQpXG4gICAge1xuICAgICAgICB0aGlzLl9yZXF1ZXN0SWZOZWVkZWQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5hdXRvU3RhcnQpXG4gICAge1xuICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZWdpc3RlciBhIGhhbmRsZXIgZm9yIHRpY2sgZXZlbnRzLiBDYWxscyBjb250aW51b3VzbHkgdW5sZXNzXG4gKiBpdCBpcyByZW1vdmVkIG9yIHRoZSB0aWNrZXIgaXMgc3RvcHBlZC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBsaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBhZGRlZCBmb3IgdXBkYXRlc1xuICogQHBhcmFtIHsqfSBbY29udGV4dF0gLSBUaGUgbGlzdGVuZXIgY29udGV4dFxuICogQHBhcmFtIHtudW1iZXJ9IFtwcmlvcml0eT1QSVhJLlVQREFURV9QUklPUklUWS5OT1JNQUxdIC0gVGhlIHByaW9yaXR5IGZvciBlbWl0dGluZ1xuICogQHJldHVybnMge1BJWEkuVGlja2VyfSBUaGlzIGluc3RhbmNlIG9mIGEgdGlja2VyXG4gKi9cblRpY2tlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChmbiwgY29udGV4dCwgcHJpb3JpdHkpXG57XG4gICAgICAgIGlmICggcHJpb3JpdHkgPT09IHZvaWQgMCApIHByaW9yaXR5ID0gVVBEQVRFX1BSSU9SSVRZLk5PUk1BTDtcblxuICAgIHJldHVybiB0aGlzLl9hZGRMaXN0ZW5lcihuZXcgVGlja2VyTGlzdGVuZXIoZm4sIGNvbnRleHQsIHByaW9yaXR5KSk7XG59O1xuXG4vKipcbiAqIEFkZCBhIGhhbmRsZXIgZm9yIHRoZSB0aWNrIGV2ZW50IHdoaWNoIGlzIG9ubHkgZXhlY3V0ZSBvbmNlLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIGFkZGVkIGZvciBvbmUgdXBkYXRlXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0XSAtIFRoZSBsaXN0ZW5lciBjb250ZXh0XG4gKiBAcGFyYW0ge251bWJlcn0gW3ByaW9yaXR5PVBJWEkuVVBEQVRFX1BSSU9SSVRZLk5PUk1BTF0gLSBUaGUgcHJpb3JpdHkgZm9yIGVtaXR0aW5nXG4gKiBAcmV0dXJucyB7UElYSS5UaWNrZXJ9IFRoaXMgaW5zdGFuY2Ugb2YgYSB0aWNrZXJcbiAqL1xuVGlja2VyLnByb3RvdHlwZS5hZGRPbmNlID0gZnVuY3Rpb24gYWRkT25jZSAoZm4sIGNvbnRleHQsIHByaW9yaXR5KVxue1xuICAgICAgICBpZiAoIHByaW9yaXR5ID09PSB2b2lkIDAgKSBwcmlvcml0eSA9IFVQREFURV9QUklPUklUWS5OT1JNQUw7XG5cbiAgICByZXR1cm4gdGhpcy5fYWRkTGlzdGVuZXIobmV3IFRpY2tlckxpc3RlbmVyKGZuLCBjb250ZXh0LCBwcmlvcml0eSwgdHJ1ZSkpO1xufTtcblxuLyoqXG4gKiBJbnRlcm5hbGx5IGFkZHMgdGhlIGV2ZW50IGhhbmRsZXIgc28gdGhhdCBpdCBjYW4gYmUgc29ydGVkIGJ5IHByaW9yaXR5LlxuICogUHJpb3JpdHkgYWxsb3dzIGNlcnRhaW4gaGFuZGxlciAodXNlciwgQW5pbWF0ZWRTcHJpdGUsIEludGVyYWN0aW9uKSB0byBiZSBydW5cbiAqIGJlZm9yZSB0aGUgcmVuZGVyaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1RpY2tlckxpc3RlbmVyfSBsaXN0ZW5lciAtIEN1cnJlbnQgbGlzdGVuZXIgYmVpbmcgYWRkZWQuXG4gKiBAcmV0dXJucyB7UElYSS5UaWNrZXJ9IFRoaXMgaW5zdGFuY2Ugb2YgYSB0aWNrZXJcbiAqL1xuVGlja2VyLnByb3RvdHlwZS5fYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIgKGxpc3RlbmVyKVxue1xuICAgIC8vIEZvciBhdHRhY2hpbmcgdG8gaGVhZFxuICAgIHZhciBjdXJyZW50ID0gdGhpcy5faGVhZC5uZXh0O1xuICAgIHZhciBwcmV2aW91cyA9IHRoaXMuX2hlYWQ7XG5cbiAgICAvLyBBZGQgdGhlIGZpcnN0IGl0ZW1cbiAgICBpZiAoIWN1cnJlbnQpXG4gICAge1xuICAgICAgICBsaXN0ZW5lci5jb25uZWN0KHByZXZpb3VzKTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgLy8gR28gZnJvbSBoaWdoZXN0IHRvIGxvd2VzdCBwcmlvcml0eVxuICAgICAgICB3aGlsZSAoY3VycmVudClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyLnByaW9yaXR5ID4gY3VycmVudC5wcmlvcml0eSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5jb25uZWN0KHByZXZpb3VzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZpb3VzID0gY3VycmVudDtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3QgeWV0IGNvbm5lY3RlZFxuICAgICAgICBpZiAoIWxpc3RlbmVyLnByZXZpb3VzKVxuICAgICAgICB7XG4gICAgICAgICAgICBsaXN0ZW5lci5jb25uZWN0KHByZXZpb3VzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3N0YXJ0SWZQb3NzaWJsZSgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYW55IGhhbmRsZXJzIG1hdGNoaW5nIHRoZSBmdW5jdGlvbiBhbmQgY29udGV4dCBwYXJhbWV0ZXJzLlxuICogSWYgbm8gaGFuZGxlcnMgYXJlIGxlZnQgYWZ0ZXIgcmVtb3ZpbmcsIHRoZW4gaXQgY2FuY2VscyB0aGUgYW5pbWF0aW9uIGZyYW1lLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIHJlbW92ZWRcbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHRdIC0gVGhlIGxpc3RlbmVyIGNvbnRleHQgdG8gYmUgcmVtb3ZlZFxuICogQHJldHVybnMge1BJWEkuVGlja2VyfSBUaGlzIGluc3RhbmNlIG9mIGEgdGlja2VyXG4gKi9cblRpY2tlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlIChmbiwgY29udGV4dClcbntcbiAgICB2YXIgbGlzdGVuZXIgPSB0aGlzLl9oZWFkLm5leHQ7XG5cbiAgICB3aGlsZSAobGlzdGVuZXIpXG4gICAge1xuICAgICAgICAvLyBXZSBmb3VuZCBhIG1hdGNoLCBsZXRzIHJlbW92ZSBpdFxuICAgICAgICAvLyBubyBicmVhayB0byBkZWxldGUgYWxsIHBvc3NpYmxlIG1hdGNoZXNcbiAgICAgICAgLy8gaW5jYXNlIGEgbGlzdGVuZXIgd2FzIGFkZGVkIDIrIHRpbWVzXG4gICAgICAgIGlmIChsaXN0ZW5lci5tYXRjaChmbiwgY29udGV4dCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9oZWFkLm5leHQpXG4gICAge1xuICAgICAgICB0aGlzLl9jYW5jZWxJZk5lZWRlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTdGFydHMgdGhlIHRpY2tlci4gSWYgdGhlIHRpY2tlciBoYXMgbGlzdGVuZXJzXG4gKiBhIG5ldyBhbmltYXRpb24gZnJhbWUgaXMgcmVxdWVzdGVkIGF0IHRoaXMgcG9pbnQuXG4gKi9cblRpY2tlci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiBzdGFydCAoKVxue1xuICAgIGlmICghdGhpcy5zdGFydGVkKVxuICAgIHtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdElmTmVlZGVkKCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBTdG9wcyB0aGUgdGlja2VyLiBJZiB0aGUgdGlja2VyIGhhcyByZXF1ZXN0ZWRcbiAqIGFuIGFuaW1hdGlvbiBmcmFtZSBpdCBpcyBjYW5jZWxlZCBhdCB0aGlzIHBvaW50LlxuICovXG5UaWNrZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiBzdG9wICgpXG57XG4gICAgaWYgKHRoaXMuc3RhcnRlZClcbiAgICB7XG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jYW5jZWxJZk5lZWRlZCgpO1xuICAgIH1cbn07XG5cbi8qKlxuICogRGVzdHJveSB0aGUgdGlja2VyIGFuZCBkb24ndCB1c2UgYWZ0ZXIgdGhpcy4gQ2FsbGluZ1xuICogdGhpcyBtZXRob2QgcmVtb3ZlcyBhbGwgcmVmZXJlbmNlcyB0byBpbnRlcm5hbCBldmVudHMuXG4gKi9cblRpY2tlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbntcbiAgICBpZiAoIXRoaXMuX3Byb3RlY3RlZClcbiAgICB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuXG4gICAgICAgIHZhciBsaXN0ZW5lciA9IHRoaXMuX2hlYWQubmV4dDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIuZGVzdHJveSh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2hlYWQuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9oZWFkID0gbnVsbDtcbiAgICB9XG59O1xuXG4vKipcbiAqIFRyaWdnZXJzIGFuIHVwZGF0ZS4gQW4gdXBkYXRlIGVudGFpbHMgc2V0dGluZyB0aGVcbiAqIGN1cnJlbnQge0BsaW5rIFBJWEkuVGlja2VyI2VsYXBzZWRNU30sXG4gKiB0aGUgY3VycmVudCB7QGxpbmsgUElYSS5UaWNrZXIjZGVsdGFUaW1lfSxcbiAqIGludm9raW5nIGFsbCBsaXN0ZW5lcnMgd2l0aCBjdXJyZW50IGRlbHRhVGltZSxcbiAqIGFuZCB0aGVuIGZpbmFsbHkgc2V0dGluZyB7QGxpbmsgUElYSS5UaWNrZXIjbGFzdFRpbWV9XG4gKiB3aXRoIHRoZSB2YWx1ZSBvZiBjdXJyZW50VGltZSB0aGF0IHdhcyBwcm92aWRlZC5cbiAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIGF1dG9tYXRpY2FsbHkgYnkgYW5pbWF0aW9uXG4gKiBmcmFtZSBjYWxsYmFja3MgaWYgdGhlIHRpY2tlciBpbnN0YW5jZSBoYXMgYmVlbiBzdGFydGVkXG4gKiBhbmQgbGlzdGVuZXJzIGFyZSBhZGRlZC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW2N1cnJlbnRUaW1lPXBlcmZvcm1hbmNlLm5vdygpXSAtIHRoZSBjdXJyZW50IHRpbWUgb2YgZXhlY3V0aW9uXG4gKi9cblRpY2tlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChjdXJyZW50VGltZSlcbntcbiAgICAgICAgaWYgKCBjdXJyZW50VGltZSA9PT0gdm9pZCAwICkgY3VycmVudFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgIHZhciBlbGFwc2VkTVM7XG5cbiAgICAvLyBJZiB0aGUgZGlmZmVyZW5jZSBpbiB0aW1lIGlzIHplcm8gb3IgbmVnYXRpdmUsIHdlIGlnbm9yZSBtb3N0IG9mIHRoZSB3b3JrIGRvbmUgaGVyZS5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyB2YWxpZCBkaWZmZXJlbmNlLCB0aGVuIHNob3VsZCBiZSBubyByZWFzb24gdG8gbGV0IGFueW9uZSBrbm93IGFib3V0IGl0LlxuICAgIC8vIEEgemVybyBkZWx0YSwgaXMgZXhhY3RseSB0aGF0LCBub3RoaW5nIHNob3VsZCB1cGRhdGUuXG4gICAgLy9cbiAgICAvLyBUaGUgZGlmZmVyZW5jZSBpbiB0aW1lIGNhbiBiZSBuZWdhdGl2ZSwgYW5kIG5vIHRoaXMgZG9lcyBub3QgbWVhbiB0aW1lIHRyYXZlbGluZy5cbiAgICAvLyBUaGlzIGNhbiBiZSB0aGUgcmVzdWx0IG9mIGEgcmFjZSBjb25kaXRpb24gYmV0d2VlbiB3aGVuIGFuIGFuaW1hdGlvbiBmcmFtZSBpcyByZXF1ZXN0ZWRcbiAgICAvLyBvbiB0aGUgY3VycmVudCBKYXZhU2NyaXB0IGVuZ2luZSBldmVudCBsb29wLCBhbmQgd2hlbiB0aGUgdGlja2VyJ3Mgc3RhcnQgbWV0aG9kIGlzIGludm9rZWRcbiAgICAvLyAod2hpY2ggaW52b2tlcyB0aGUgaW50ZXJuYWwgX3JlcXVlc3RJZk5lZWRlZCBtZXRob2QpLiBJZiBhIGZyYW1lIGlzIHJlcXVlc3RlZCBiZWZvcmVcbiAgICAvLyBfcmVxdWVzdElmTmVlZGVkIGlzIGludm9rZWQsIHRoZW4gdGhlIGNhbGxiYWNrIGZvciB0aGUgYW5pbWF0aW9uIGZyYW1lIHRoZSB0aWNrZXIgcmVxdWVzdHMsXG4gICAgLy8gY2FuIHJlY2VpdmUgYSB0aW1lIGFyZ3VtZW50IHRoYXQgY2FuIGJlIGxlc3MgdGhhbiB0aGUgbGFzdFRpbWUgdmFsdWUgdGhhdCB3YXMgc2V0IHdpdGhpblxuICAgIC8vIF9yZXF1ZXN0SWZOZWVkZWQuIFRoaXMgZGlmZmVyZW5jZSBpcyBpbiBtaWNyb3NlY29uZHMsIGJ1dCB0aGlzIGlzIGVub3VnaCB0byBjYXVzZSBwcm9ibGVtcy5cbiAgICAvL1xuICAgIC8vIFRoaXMgY2hlY2sgY292ZXJzIHRoaXMgYnJvd3NlciBlbmdpbmUgdGltaW5nIGlzc3VlLCBhcyB3ZWxsIGFzIGlmIGNvbnN1bWVycyBwYXNzIGFuIGludmFsaWRcbiAgICAvLyBjdXJyZW50VGltZSB2YWx1ZS4gVGhpcyBtYXkgaGFwcGVuIGlmIGNvbnN1bWVycyBvcHQtb3V0IG9mIHRoZSBhdXRvU3RhcnQsIGFuZCB1cGRhdGUgdGhlbXNlbHZlcy5cblxuICAgIGlmIChjdXJyZW50VGltZSA+IHRoaXMubGFzdFRpbWUpXG4gICAge1xuICAgICAgICAvLyBTYXZlIHVuY2FwcGVkIGVsYXBzZWRNUyBmb3IgbWVhc3VyZW1lbnRcbiAgICAgICAgZWxhcHNlZE1TID0gdGhpcy5lbGFwc2VkTVMgPSBjdXJyZW50VGltZSAtIHRoaXMubGFzdFRpbWU7XG5cbiAgICAgICAgLy8gY2FwIHRoZSBtaWxsaXNlY29uZHMgZWxhcHNlZCB1c2VkIGZvciBkZWx0YVRpbWVcbiAgICAgICAgaWYgKGVsYXBzZWRNUyA+IHRoaXMuX21heEVsYXBzZWRNUylcbiAgICAgICAge1xuICAgICAgICAgICAgZWxhcHNlZE1TID0gdGhpcy5fbWF4RWxhcHNlZE1TO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxhcHNlZE1TICo9IHRoaXMuc3BlZWQ7XG5cbiAgICAgICAgLy8gSWYgbm90IGVub3VnaCB0aW1lIGhhcyBwYXNzZWQsIGV4aXQgdGhlIGZ1bmN0aW9uLlxuICAgICAgICAvLyBHZXQgcmVhZHkgZm9yIG5leHQgZnJhbWUgYnkgc2V0dGluZyBfbGFzdEZyYW1lLCBidXQgYmFzZWQgb24gX21pbkVsYXBzZWRNU1xuICAgICAgICAvLyBhZGp1c3RtZW50IHRvIGVuc3VyZSBhIHJlbGF0aXZlbHkgc3RhYmxlIGludGVydmFsLlxuICAgICAgICBpZiAodGhpcy5fbWluRWxhcHNlZE1TKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSBjdXJyZW50VGltZSAtIHRoaXMuX2xhc3RGcmFtZSB8IDA7XG5cbiAgICAgICAgICAgIGlmIChkZWx0YSA8IHRoaXMuX21pbkVsYXBzZWRNUylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2xhc3RGcmFtZSA9IGN1cnJlbnRUaW1lIC0gKGRlbHRhICUgdGhpcy5fbWluRWxhcHNlZE1TKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVsdGFNUyA9IGVsYXBzZWRNUztcbiAgICAgICAgdGhpcy5kZWx0YVRpbWUgPSB0aGlzLmRlbHRhTVMgKiBzZXR0aW5ncy5UQVJHRVRfRlBNUztcblxuICAgICAgICAvLyBDYWNoZSBhIGxvY2FsIHJlZmVyZW5jZSwgaW4tY2FzZSB0aWNrZXIgaXMgZGVzdHJveWVkXG4gICAgICAgIC8vIGR1cmluZyB0aGUgZW1pdCwgd2UgY2FuIHN0aWxsIGNoZWNrIGZvciBoZWFkLm5leHRcbiAgICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuXG4gICAgICAgIC8vIEludm9rZSBsaXN0ZW5lcnMgYWRkZWQgdG8gaW50ZXJuYWwgZW1pdHRlclxuICAgICAgICB2YXIgbGlzdGVuZXIgPSBoZWFkLm5leHQ7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLmVtaXQodGhpcy5kZWx0YVRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFoZWFkLm5leHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbmNlbElmTmVlZGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgdGhpcy5kZWx0YVRpbWUgPSB0aGlzLmRlbHRhTVMgPSB0aGlzLmVsYXBzZWRNUyA9IDA7XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0VGltZSA9IGN1cnJlbnRUaW1lO1xufTtcblxuLyoqXG4gKiBUaGUgZnJhbWVzIHBlciBzZWNvbmQgYXQgd2hpY2ggdGhpcyB0aWNrZXIgaXMgcnVubmluZy5cbiAqIFRoZSBkZWZhdWx0IGlzIGFwcHJveGltYXRlbHkgNjAgaW4gbW9zdCBtb2Rlcm4gYnJvd3NlcnMuXG4gKiAqKk5vdGU6KiogVGhpcyBkb2VzIG5vdCBmYWN0b3IgaW4gdGhlIHZhbHVlIG9mXG4gKiB7QGxpbmsgUElYSS5UaWNrZXIjc3BlZWR9LCB3aGljaCBpcyBzcGVjaWZpY1xuICogdG8gc2NhbGluZyB7QGxpbmsgUElYSS5UaWNrZXIjZGVsdGFUaW1lfS5cbiAqXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKiBAcmVhZG9ubHlcbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzLkZQUy5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiAxMDAwIC8gdGhpcy5lbGFwc2VkTVM7XG59O1xuXG4vKipcbiAqIE1hbmFnZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIG1pbGxpc2Vjb25kcyBhbGxvd2VkIHRvXG4gKiBlbGFwc2UgYmV0d2VlbiBpbnZva2luZyB7QGxpbmsgUElYSS5UaWNrZXIjdXBkYXRlfS5cbiAqIFRoaXMgdmFsdWUgaXMgdXNlZCB0byBjYXAge0BsaW5rIFBJWEkuVGlja2VyI2RlbHRhVGltZX0sXG4gKiBidXQgZG9lcyBub3QgZWZmZWN0IHRoZSBtZWFzdXJlZCB2YWx1ZSBvZiB7QGxpbmsgUElYSS5UaWNrZXIjRlBTfS5cbiAqIFdoZW4gc2V0dGluZyB0aGlzIHByb3BlcnR5IGl0IGlzIGNsYW1wZWQgdG8gYSB2YWx1ZSBiZXR3ZWVuXG4gKiBgMGAgYW5kIGBQSVhJLnNldHRpbmdzLlRBUkdFVF9GUE1TICogMTAwMGAuXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICogQGRlZmF1bHQgMTBcbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzLm1pbkZQUy5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiAxMDAwIC8gdGhpcy5fbWF4RWxhcHNlZE1TO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLm1pbkZQUy5zZXQgPSBmdW5jdGlvbiAoZnBzKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICAvLyBNaW5pbXVtIG11c3QgYmUgYmVsb3cgdGhlIG1heEZQU1xuICAgIHZhciBtaW5GUFMgPSBNYXRoLm1pbih0aGlzLm1heEZQUywgZnBzKTtcblxuICAgIC8vIE11c3QgYmUgYXQgbGVhc3QgMCwgYnV0IGJlbG93IDEgLyBzZXR0aW5ncy5UQVJHRVRfRlBNU1xuICAgIHZhciBtaW5GUE1TID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgbWluRlBTKSAvIDEwMDAsIHNldHRpbmdzLlRBUkdFVF9GUE1TKTtcblxuICAgIHRoaXMuX21heEVsYXBzZWRNUyA9IDEgLyBtaW5GUE1TO1xufTtcblxuLyoqXG4gKiBNYW5hZ2VzIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgcmVxdWlyZWQgdG9cbiAqIGVsYXBzZSBiZXR3ZWVuIGludm9raW5nIHtAbGluayBQSVhJLlRpY2tlciN1cGRhdGV9LlxuICogVGhpcyB3aWxsIGVmZmVjdCB0aGUgbWVhc3VyZWQgdmFsdWUgb2Yge0BsaW5rIFBJWEkuVGlja2VyI0ZQU30uXG4gKiBJZiBpdCBpcyBzZXQgdG8gYDBgLCB0aGVuIHRoZXJlIGlzIG5vIGxpbWl0OyBQaXhpSlMgd2lsbCByZW5kZXIgYXMgbWFueSBmcmFtZXMgYXMgaXQgY2FuLlxuICogT3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgYG1pbkZQU2BcbiAqXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKiBAZGVmYXVsdCAwXG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5tYXhGUFMuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICBpZiAodGhpcy5fbWluRWxhcHNlZE1TKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoMTAwMCAvIHRoaXMuX21pbkVsYXBzZWRNUyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMubWF4RlBTLnNldCA9IGZ1bmN0aW9uIChmcHMpXG57XG4gICAgaWYgKGZwcyA9PT0gMClcbiAgICB7XG4gICAgICAgIHRoaXMuX21pbkVsYXBzZWRNUyA9IDA7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIC8vIE1heCBtdXN0IGJlIGF0IGxlYXN0IHRoZSBtaW5GUFNcbiAgICAgICAgdmFyIG1heEZQUyA9IE1hdGgubWF4KHRoaXMubWluRlBTLCBmcHMpO1xuXG4gICAgICAgIHRoaXMuX21pbkVsYXBzZWRNUyA9IDEgLyAobWF4RlBTIC8gMTAwMCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBUaGUgc2hhcmVkIHRpY2tlciBpbnN0YW5jZSB1c2VkIGJ5IHtAbGluayBQSVhJLkFuaW1hdGVkU3ByaXRlfSBhbmQgYnlcbiAqIHtAbGluayBQSVhJLlZpZGVvUmVzb3VyY2V9IHRvIHVwZGF0ZSBhbmltYXRpb24gZnJhbWVzIC8gdmlkZW8gdGV4dHVyZXMuXG4gKlxuICogSXQgbWF5IGFsc28gYmUgdXNlZCBieSB7QGxpbmsgUElYSS5BcHBsaWNhdGlvbn0gaWYgY3JlYXRlZCB3aXRoIHRoZSBgc2hhcmVkVGlja2VyYCBvcHRpb24gcHJvcGVydHkgc2V0IHRvIHRydWUuXG4gKlxuICogVGhlIHByb3BlcnR5IHtAbGluayBQSVhJLlRpY2tlciNhdXRvU3RhcnR9IGlzIHNldCB0byBgdHJ1ZWAgZm9yIHRoaXMgaW5zdGFuY2UuXG4gKiBQbGVhc2UgZm9sbG93IHRoZSBleGFtcGxlcyBmb3IgdXNhZ2UsIGluY2x1ZGluZyBob3cgdG8gb3B0LW91dCBvZiBhdXRvLXN0YXJ0aW5nIHRoZSBzaGFyZWQgdGlja2VyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBsZXQgdGlja2VyID0gUElYSS5UaWNrZXIuc2hhcmVkO1xuICogLy8gU2V0IHRoaXMgdG8gcHJldmVudCBzdGFydGluZyB0aGlzIHRpY2tlciB3aGVuIGxpc3RlbmVycyBhcmUgYWRkZWQuXG4gKiAvLyBCeSBkZWZhdWx0IHRoaXMgaXMgdHJ1ZSBvbmx5IGZvciB0aGUgUElYSS5UaWNrZXIuc2hhcmVkIGluc3RhbmNlLlxuICogdGlja2VyLmF1dG9TdGFydCA9IGZhbHNlO1xuICogLy8gRllJLCBjYWxsIHRoaXMgdG8gZW5zdXJlIHRoZSB0aWNrZXIgaXMgc3RvcHBlZC4gSXQgc2hvdWxkIGJlIHN0b3BwZWRcbiAqIC8vIGlmIHlvdSBoYXZlIG5vdCBhdHRlbXB0ZWQgdG8gcmVuZGVyIGFueXRoaW5nIHlldC5cbiAqIHRpY2tlci5zdG9wKCk7XG4gKiAvLyBDYWxsIHRoaXMgd2hlbiB5b3UgYXJlIHJlYWR5IGZvciBhIHJ1bm5pbmcgc2hhcmVkIHRpY2tlci5cbiAqIHRpY2tlci5zdGFydCgpO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBZb3UgbWF5IHVzZSB0aGUgc2hhcmVkIHRpY2tlciB0byByZW5kZXIuLi5cbiAqIGxldCByZW5kZXJlciA9IFBJWEkuYXV0b0RldGVjdFJlbmRlcmVyKCk7XG4gKiBsZXQgc3RhZ2UgPSBuZXcgUElYSS5Db250YWluZXIoKTtcbiAqIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVuZGVyZXIudmlldyk7XG4gKiB0aWNrZXIuYWRkKGZ1bmN0aW9uICh0aW1lKSB7XG4gKiByZW5kZXJlci5yZW5kZXIoc3RhZ2UpO1xuICogfSk7XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIE9yIHlvdSBjYW4ganVzdCB1cGRhdGUgaXQgbWFudWFsbHkuXG4gKiB0aWNrZXIuYXV0b1N0YXJ0ID0gZmFsc2U7XG4gKiB0aWNrZXIuc3RvcCgpO1xuICogZnVuY3Rpb24gYW5pbWF0ZSh0aW1lKSB7XG4gKiB0aWNrZXIudXBkYXRlKHRpbWUpO1xuICogcmVuZGVyZXIucmVuZGVyKHN0YWdlKTtcbiAqIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAqIH1cbiAqIGFuaW1hdGUocGVyZm9ybWFuY2Uubm93KCkpO1xuICpcbiAqIEBtZW1iZXIge1BJWEkuVGlja2VyfVxuICogQHN0YXRpY1xuICovXG5zdGF0aWNBY2Nlc3NvcnMuc2hhcmVkLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgaWYgKCFUaWNrZXIuX3NoYXJlZClcbiAgICB7XG4gICAgICAgIHZhciBzaGFyZWQgPSBUaWNrZXIuX3NoYXJlZCA9IG5ldyBUaWNrZXIoKTtcblxuICAgICAgICBzaGFyZWQuYXV0b1N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgc2hhcmVkLl9wcm90ZWN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBUaWNrZXIuX3NoYXJlZDtcbn07XG5cbi8qKlxuICogVGhlIHN5c3RlbSB0aWNrZXIgaW5zdGFuY2UgdXNlZCBieSB7QGxpbmsgUElYSS5pbnRlcmFjdGlvbi5JbnRlcmFjdGlvbk1hbmFnZXJ9IGFuZCBieVxuICoge0BsaW5rIFBJWEkuQmFzZVByZXBhcmV9IGZvciBjb3JlIHRpbWluZyBmdW5jdGlvbmFsaXR5IHRoYXQgc2hvdWxkbid0IHVzdWFsbHkgbmVlZCB0byBiZSBwYXVzZWQsXG4gKiB1bmxpa2UgdGhlIGBzaGFyZWRgIHRpY2tlciB3aGljaCBkcml2ZXMgdmlzdWFsIGFuaW1hdGlvbnMgYW5kIHJlbmRlcmluZyB3aGljaCBtYXkgd2FudCB0byBiZSBwYXVzZWQuXG4gKlxuICogVGhlIHByb3BlcnR5IHtAbGluayBQSVhJLlRpY2tlciNhdXRvU3RhcnR9IGlzIHNldCB0byBgdHJ1ZWAgZm9yIHRoaXMgaW5zdGFuY2UuXG4gKlxuICogQG1lbWJlciB7UElYSS5UaWNrZXJ9XG4gKiBAc3RhdGljXG4gKi9cbnN0YXRpY0FjY2Vzc29ycy5zeXN0ZW0uZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICBpZiAoIVRpY2tlci5fc3lzdGVtKVxuICAgIHtcbiAgICAgICAgdmFyIHN5c3RlbSA9IFRpY2tlci5fc3lzdGVtID0gbmV3IFRpY2tlcigpO1xuXG4gICAgICAgIHN5c3RlbS5hdXRvU3RhcnQgPSB0cnVlO1xuICAgICAgICBzeXN0ZW0uX3Byb3RlY3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFRpY2tlci5fc3lzdGVtO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFRpY2tlci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFRpY2tlciwgc3RhdGljQWNjZXNzb3JzICk7XG5cbi8qKlxuICogTWlkZGxld2FyZSBmb3IgZm9yIEFwcGxpY2F0aW9uIFRpY2tlci5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHtUaWNrZXJQbHVnaW59IGZyb20gJ0BwaXhpL3RpY2tlcic7XG4gKiBpbXBvcnQge0FwcGxpY2F0aW9ufSBmcm9tICdAcGl4aS9hcHAnO1xuICogQXBwbGljYXRpb24ucmVnaXN0ZXJQbHVnaW4oVGlja2VyUGx1Z2luKTtcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBUaWNrZXJQbHVnaW4gPSBmdW5jdGlvbiBUaWNrZXJQbHVnaW4gKCkge307XG5cblRpY2tlclBsdWdpbi5pbml0ID0gZnVuY3Rpb24gaW5pdCAob3B0aW9ucylcbntcbiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAvLyBTZXQgZGVmYXVsdFxuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgYXV0b1N0YXJ0OiB0cnVlLFxuICAgICAgICBzaGFyZWRUaWNrZXI6IGZhbHNlLFxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgLy8gQ3JlYXRlIHRpY2tlciBzZXR0ZXJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3RpY2tlcicsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHRpY2tlcilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGlja2VyKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGlja2VyLnJlbW92ZSh0aGlzLnJlbmRlciwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3RpY2tlciA9IHRpY2tlcjtcbiAgICAgICAgICAgICAgICBpZiAodGlja2VyKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGlja2VyLmFkZCh0aGlzLnJlbmRlciwgdGhpcywgVVBEQVRFX1BSSU9SSVRZLkxPVyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGlja2VyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHN0b3BwaW5nIHRoZSByZW5kZXIuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIFBJWEkuQXBwbGljYXRpb24jc3RvcFxuICAgICAqL1xuICAgIHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcyQxLl90aWNrZXIuc3RvcCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHN0YXJ0aW5nIHRoZSByZW5kZXIuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIFBJWEkuQXBwbGljYXRpb24jc3RhcnRcbiAgICAgKi9cbiAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzJDEuX3RpY2tlci5zdGFydCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCByZWZlcmVuY2UgdG8gdGhlIHRpY2tlci5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtQSVhJLlRpY2tlcn1cbiAgICAgKiBAbmFtZSBfdGlja2VyXG4gICAgICogQG1lbWJlcm9mIFBJWEkuQXBwbGljYXRpb24jXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl90aWNrZXIgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGlja2VyIGZvciBkb2luZyByZW5kZXIgdXBkYXRlcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtQSVhJLlRpY2tlcn1cbiAgICAgKiBAbmFtZSB0aWNrZXJcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5BcHBsaWNhdGlvbiNcbiAgICAgKiBAZGVmYXVsdCBQSVhJLlRpY2tlci5zaGFyZWRcbiAgICAgKi9cbiAgICB0aGlzLnRpY2tlciA9IG9wdGlvbnMuc2hhcmVkVGlja2VyID8gVGlja2VyLnNoYXJlZCA6IG5ldyBUaWNrZXIoKTtcblxuICAgIC8vIFN0YXJ0IHRoZSByZW5kZXJpbmdcbiAgICBpZiAob3B0aW9ucy5hdXRvU3RhcnQpXG4gICAge1xuICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0aGUgdGlja2VyLCBzY29wZWQgdG8gYXBwbGljYXRpb24uXG4gKlxuICogQHN0YXRpY1xuICogQHByaXZhdGVcbiAqL1xuVGlja2VyUGx1Z2luLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG57XG4gICAgaWYgKHRoaXMuX3RpY2tlcilcbiAgICB7XG4gICAgICAgIHZhciBvbGRUaWNrZXIgPSB0aGlzLl90aWNrZXI7XG5cbiAgICAgICAgdGhpcy50aWNrZXIgPSBudWxsO1xuICAgICAgICBvbGRUaWNrZXIuZGVzdHJveSgpO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IFRpY2tlciwgVGlja2VyUGx1Z2luLCBVUERBVEVfUFJJT1JJVFkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpY2tlci5lcy5qcy5tYXBcbiIsIi8qIVxuICogQHBpeGkvbWF0aCAtIHY1LjEuMFxuICogQ29tcGlsZWQgRnJpLCAxOSBKdWwgMjAxOSAyMTo1NDozNiBVVENcbiAqXG4gKiBAcGl4aS9tYXRoIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUaGUgUG9pbnQgb2JqZWN0IHJlcHJlc2VudHMgYSBsb2NhdGlvbiBpbiBhIHR3by1kaW1lbnNpb25hbCBjb29yZGluYXRlIHN5c3RlbSwgd2hlcmUgeCByZXByZXNlbnRzXG4gKiB0aGUgaG9yaXpvbnRhbCBheGlzIGFuZCB5IHJlcHJlc2VudHMgdGhlIHZlcnRpY2FsIGF4aXMuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgUG9pbnQgPSBmdW5jdGlvbiBQb2ludCh4LCB5KVxue1xuICAgIGlmICggeCA9PT0gdm9pZCAwICkgeCA9IDA7XG4gICAgaWYgKCB5ID09PSB2b2lkIDAgKSB5ID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy54ID0geDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy55ID0geTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgcG9pbnRcbiAqXG4gKiBAcmV0dXJuIHtQSVhJLlBvaW50fSBhIGNvcHkgb2YgdGhlIHBvaW50XG4gKi9cblBvaW50LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpXG57XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLngsIHRoaXMueSk7XG59O1xuXG4vKipcbiAqIENvcGllcyB4IGFuZCB5IGZyb20gdGhlIGdpdmVuIHBvaW50XG4gKlxuICogQHBhcmFtIHtQSVhJLklQb2ludH0gcCAtIFRoZSBwb2ludCB0byBjb3B5IGZyb21cbiAqIEByZXR1cm5zIHtQSVhJLklQb2ludH0gUmV0dXJucyBpdHNlbGYuXG4gKi9cblBvaW50LnByb3RvdHlwZS5jb3B5RnJvbSA9IGZ1bmN0aW9uIGNvcHlGcm9tIChwKVxue1xuICAgIHRoaXMuc2V0KHAueCwgcC55KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDb3BpZXMgeCBhbmQgeSBpbnRvIHRoZSBnaXZlbiBwb2ludFxuICpcbiAqIEBwYXJhbSB7UElYSS5JUG9pbnR9IHAgLSBUaGUgcG9pbnQgdG8gY29weS5cbiAqIEByZXR1cm5zIHtQSVhJLklQb2ludH0gR2l2ZW4gcG9pbnQgd2l0aCB2YWx1ZXMgdXBkYXRlZFxuICovXG5Qb2ludC5wcm90b3R5cGUuY29weVRvID0gZnVuY3Rpb24gY29weVRvIChwKVxue1xuICAgIHAuc2V0KHRoaXMueCwgdGhpcy55KTtcblxuICAgIHJldHVybiBwO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHBvaW50IGlzIGVxdWFsIHRvIHRoaXMgcG9pbnRcbiAqXG4gKiBAcGFyYW0ge1BJWEkuSVBvaW50fSBwIC0gVGhlIHBvaW50IHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gcG9pbnQgZXF1YWwgdG8gdGhpcyBwb2ludFxuICovXG5Qb2ludC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChwKVxue1xuICAgIHJldHVybiAocC54ID09PSB0aGlzLngpICYmIChwLnkgPT09IHRoaXMueSk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHBvaW50IHRvIGEgbmV3IHggYW5kIHkgcG9zaXRpb24uXG4gKiBJZiB5IGlzIG9taXR0ZWQsIGJvdGggeCBhbmQgeSB3aWxsIGJlIHNldCB0byB4LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbeD0wXSAtIHBvc2l0aW9uIG9mIHRoZSBwb2ludCBvbiB0aGUgeCBheGlzXG4gKiBAcGFyYW0ge251bWJlcn0gW3k9MF0gLSBwb3NpdGlvbiBvZiB0aGUgcG9pbnQgb24gdGhlIHkgYXhpc1xuICovXG5Qb2ludC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0ICh4LCB5KVxue1xuICAgIHRoaXMueCA9IHggfHwgMDtcbiAgICB0aGlzLnkgPSB5IHx8ICgoeSAhPT0gMCkgPyB0aGlzLnggOiAwKTtcbn07XG5cbi8qKlxuICogVGhlIFBvaW50IG9iamVjdCByZXByZXNlbnRzIGEgbG9jYXRpb24gaW4gYSB0d28tZGltZW5zaW9uYWwgY29vcmRpbmF0ZSBzeXN0ZW0sIHdoZXJlIHggcmVwcmVzZW50c1xuICogdGhlIGhvcml6b250YWwgYXhpcyBhbmQgeSByZXByZXNlbnRzIHRoZSB2ZXJ0aWNhbCBheGlzLlxuICpcbiAqIEFuIE9ic2VydmFibGVQb2ludCBpcyBhIHBvaW50IHRoYXQgdHJpZ2dlcnMgYSBjYWxsYmFjayB3aGVuIHRoZSBwb2ludCdzIHBvc2l0aW9uIGlzIGNoYW5nZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgT2JzZXJ2YWJsZVBvaW50ID0gZnVuY3Rpb24gT2JzZXJ2YWJsZVBvaW50KGNiLCBzY29wZSwgeCwgeSlcbntcbiAgICBpZiAoIHggPT09IHZvaWQgMCApIHggPSAwO1xuICAgIGlmICggeSA9PT0gdm9pZCAwICkgeSA9IDA7XG5cbiAgICB0aGlzLl94ID0geDtcbiAgICB0aGlzLl95ID0geTtcblxuICAgIHRoaXMuY2IgPSBjYjtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyB4OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHk6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhpcyBwb2ludC5cbiAqIFRoZSBjYWxsYmFjayBhbmQgc2NvcGUgcGFyYW1zIGNhbiBiZSBvdmVyaWRkZW4gb3RoZXJ3aXNlIHRoZXkgd2lsbCBkZWZhdWx0XG4gKiB0byB0aGUgY2xvbmUgb2JqZWN0J3MgdmFsdWVzLlxuICpcbiAqIEBvdmVycmlkZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiPW51bGxdIC0gY2FsbGJhY2sgd2hlbiBjaGFuZ2VkXG4gKiBAcGFyYW0ge29iamVjdH0gW3Njb3BlPW51bGxdIC0gb3duZXIgb2YgY2FsbGJhY2tcbiAqIEByZXR1cm4ge1BJWEkuT2JzZXJ2YWJsZVBvaW50fSBhIGNvcHkgb2YgdGhlIHBvaW50XG4gKi9cbk9ic2VydmFibGVQb2ludC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoY2IsIHNjb3BlKVxue1xuICAgICAgICBpZiAoIGNiID09PSB2b2lkIDAgKSBjYiA9IG51bGw7XG4gICAgICAgIGlmICggc2NvcGUgPT09IHZvaWQgMCApIHNjb3BlID0gbnVsbDtcblxuICAgIHZhciBfY2IgPSBjYiB8fCB0aGlzLmNiO1xuICAgIHZhciBfc2NvcGUgPSBzY29wZSB8fCB0aGlzLnNjb3BlO1xuXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlUG9pbnQoX2NiLCBfc2NvcGUsIHRoaXMuX3gsIHRoaXMuX3kpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBwb2ludCB0byBhIG5ldyB4IGFuZCB5IHBvc2l0aW9uLlxuICogSWYgeSBpcyBvbWl0dGVkLCBib3RoIHggYW5kIHkgd2lsbCBiZSBzZXQgdG8geC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBwb3NpdGlvbiBvZiB0aGUgcG9pbnQgb24gdGhlIHggYXhpc1xuICogQHBhcmFtIHtudW1iZXJ9IFt5PTBdIC0gcG9zaXRpb24gb2YgdGhlIHBvaW50IG9uIHRoZSB5IGF4aXNcbiAqL1xuT2JzZXJ2YWJsZVBvaW50LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQgKHgsIHkpXG57XG4gICAgdmFyIF94ID0geCB8fCAwO1xuICAgIHZhciBfeSA9IHkgfHwgKCh5ICE9PSAwKSA/IF94IDogMCk7XG5cbiAgICBpZiAodGhpcy5feCAhPT0gX3ggfHwgdGhpcy5feSAhPT0gX3kpXG4gICAge1xuICAgICAgICB0aGlzLl94ID0gX3g7XG4gICAgICAgIHRoaXMuX3kgPSBfeTtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMuc2NvcGUpO1xuICAgIH1cbn07XG5cbi8qKlxuICogQ29waWVzIHggYW5kIHkgZnJvbSB0aGUgZ2l2ZW4gcG9pbnRcbiAqXG4gKiBAcGFyYW0ge1BJWEkuSVBvaW50fSBwIC0gVGhlIHBvaW50IHRvIGNvcHkgZnJvbS5cbiAqIEByZXR1cm5zIHtQSVhJLklQb2ludH0gUmV0dXJucyBpdHNlbGYuXG4gKi9cbk9ic2VydmFibGVQb2ludC5wcm90b3R5cGUuY29weUZyb20gPSBmdW5jdGlvbiBjb3B5RnJvbSAocClcbntcbiAgICBpZiAodGhpcy5feCAhPT0gcC54IHx8IHRoaXMuX3kgIT09IHAueSlcbiAgICB7XG4gICAgICAgIHRoaXMuX3ggPSBwLng7XG4gICAgICAgIHRoaXMuX3kgPSBwLnk7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnNjb3BlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ29waWVzIHggYW5kIHkgaW50byB0aGUgZ2l2ZW4gcG9pbnRcbiAqXG4gKiBAcGFyYW0ge1BJWEkuSVBvaW50fSBwIC0gVGhlIHBvaW50IHRvIGNvcHkuXG4gKiBAcmV0dXJucyB7UElYSS5JUG9pbnR9IEdpdmVuIHBvaW50IHdpdGggdmFsdWVzIHVwZGF0ZWRcbiAqL1xuT2JzZXJ2YWJsZVBvaW50LnByb3RvdHlwZS5jb3B5VG8gPSBmdW5jdGlvbiBjb3B5VG8gKHApXG57XG4gICAgcC5zZXQodGhpcy5feCwgdGhpcy5feSk7XG5cbiAgICByZXR1cm4gcDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBwb2ludCBpcyBlcXVhbCB0byB0aGlzIHBvaW50XG4gKlxuICogQHBhcmFtIHtQSVhJLklQb2ludH0gcCAtIFRoZSBwb2ludCB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIHBvaW50IGVxdWFsIHRvIHRoaXMgcG9pbnRcbiAqL1xuT2JzZXJ2YWJsZVBvaW50LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKHApXG57XG4gICAgcmV0dXJuIChwLnggPT09IHRoaXMuX3gpICYmIChwLnkgPT09IHRoaXMuX3kpO1xufTtcblxuLyoqXG4gKiBUaGUgcG9zaXRpb24gb2YgdGhlIGRpc3BsYXlPYmplY3Qgb24gdGhlIHggYXhpcyByZWxhdGl2ZSB0byB0aGUgbG9jYWwgY29vcmRpbmF0ZXMgb2YgdGhlIHBhcmVudC5cbiAqXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycy54LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMuX3g7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMueC5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xue1xuICAgIGlmICh0aGlzLl94ICE9PSB2YWx1ZSlcbiAgICB7XG4gICAgICAgIHRoaXMuX3ggPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMuc2NvcGUpO1xuICAgIH1cbn07XG5cbi8qKlxuICogVGhlIHBvc2l0aW9uIG9mIHRoZSBkaXNwbGF5T2JqZWN0IG9uIHRoZSB4IGF4aXMgcmVsYXRpdmUgdG8gdGhlIGxvY2FsIGNvb3JkaW5hdGVzIG9mIHRoZSBwYXJlbnQuXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMueS5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiB0aGlzLl95O1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLnkuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICBpZiAodGhpcy5feSAhPT0gdmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLl95ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnNjb3BlKTtcbiAgICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggT2JzZXJ2YWJsZVBvaW50LnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbi8qKlxuICogQSBudW1iZXIsIG9yIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBudW1iZXIuXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHR5cGVkZWYgeyhQSVhJLlBvaW50fFBJWEkuT2JzZXJ2YWJsZVBvaW50KX0gSVBvaW50XG4gKi9cblxuLyoqXG4gKiBUd28gUGkuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0YW50IHtudW1iZXJ9IFBJXzJcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBQSV8yID0gTWF0aC5QSSAqIDI7XG5cbi8qKlxuICogQ29udmVyc2lvbiBmYWN0b3IgZm9yIGNvbnZlcnRpbmcgcmFkaWFucyB0byBkZWdyZWVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudCB7bnVtYmVyfSBSQURfVE9fREVHXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgUkFEX1RPX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbi8qKlxuICogQ29udmVyc2lvbiBmYWN0b3IgZm9yIGNvbnZlcnRpbmcgZGVncmVlcyB0byByYWRpYW5zLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudCB7bnVtYmVyfSBERUdfVE9fUkFEXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgREVHX1RPX1JBRCA9IE1hdGguUEkgLyAxODA7XG5cbi8qKlxuICogQ29uc3RhbnRzIHRoYXQgaWRlbnRpZnkgc2hhcGVzLCBtYWlubHkgdG8gcHJldmVudCBgaW5zdGFuY2VvZmAgY2FsbHMuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0YW50XG4gKiBAbmFtZSBTSEFQRVNcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAdHlwZSB7b2JqZWN0fVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFBPTFkgUG9seWdvblxuICogQHByb3BlcnR5IHtudW1iZXJ9IFJFQ1QgUmVjdGFuZ2xlXG4gKiBAcHJvcGVydHkge251bWJlcn0gQ0lSQyBDaXJjbGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBFTElQIEVsbGlwc2VcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBSUkVDIFJvdW5kZWQgUmVjdGFuZ2xlXG4gKi9cbnZhciBTSEFQRVMgPSB7XG4gICAgUE9MWTogMCxcbiAgICBSRUNUOiAxLFxuICAgIENJUkM6IDIsXG4gICAgRUxJUDogMyxcbiAgICBSUkVDOiA0LFxufTtcblxuLyoqXG4gKiBUaGUgUGl4aUpTIE1hdHJpeCBhcyBhIGNsYXNzIG1ha2VzIGl0IGEgbG90IGZhc3Rlci5cbiAqXG4gKiBIZXJlIGlzIGEgcmVwcmVzZW50YXRpb24gb2YgaXQ6XG4gKiBgYGBqc1xuICogfCBhIHwgYyB8IHR4fFxuICogfCBiIHwgZCB8IHR5fFxuICogfCAwIHwgMCB8IDEgfFxuICogYGBgXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBNYXRyaXggPSBmdW5jdGlvbiBNYXRyaXgoYSwgYiwgYywgZCwgdHgsIHR5KVxue1xuICAgIGlmICggYSA9PT0gdm9pZCAwICkgYSA9IDE7XG4gICAgaWYgKCBiID09PSB2b2lkIDAgKSBiID0gMDtcbiAgICBpZiAoIGMgPT09IHZvaWQgMCApIGMgPSAwO1xuICAgIGlmICggZCA9PT0gdm9pZCAwICkgZCA9IDE7XG4gICAgaWYgKCB0eCA9PT0gdm9pZCAwICkgdHggPSAwO1xuICAgIGlmICggdHkgPT09IHZvaWQgMCApIHR5ID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgdGhpcy5hID0gYTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy5iID0gYjtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy5jID0gYztcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgdGhpcy5kID0gZDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy50eCA9IHR4O1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLnR5ID0gdHk7XG5cbiAgICB0aGlzLmFycmF5ID0gbnVsbDtcbn07XG5cbnZhciBzdGF0aWNBY2Nlc3NvcnMgPSB7IElERU5USVRZOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LFRFTVBfTUFUUklYOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qKlxuICogQ3JlYXRlcyBhIE1hdHJpeCBvYmplY3QgYmFzZWQgb24gdGhlIGdpdmVuIGFycmF5LiBUaGUgRWxlbWVudCB0byBNYXRyaXggbWFwcGluZyBvcmRlciBpcyBhcyBmb2xsb3dzOlxuICpcbiAqIGEgPSBhcnJheVswXVxuICogYiA9IGFycmF5WzFdXG4gKiBjID0gYXJyYXlbM11cbiAqIGQgPSBhcnJheVs0XVxuICogdHggPSBhcnJheVsyXVxuICogdHkgPSBhcnJheVs1XVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyW119IGFycmF5IC0gVGhlIGFycmF5IHRoYXQgdGhlIG1hdHJpeCB3aWxsIGJlIHBvcHVsYXRlZCBmcm9tLlxuICovXG5NYXRyaXgucHJvdG90eXBlLmZyb21BcnJheSA9IGZ1bmN0aW9uIGZyb21BcnJheSAoYXJyYXkpXG57XG4gICAgdGhpcy5hID0gYXJyYXlbMF07XG4gICAgdGhpcy5iID0gYXJyYXlbMV07XG4gICAgdGhpcy5jID0gYXJyYXlbM107XG4gICAgdGhpcy5kID0gYXJyYXlbNF07XG4gICAgdGhpcy50eCA9IGFycmF5WzJdO1xuICAgIHRoaXMudHkgPSBhcnJheVs1XTtcbn07XG5cbi8qKlxuICogc2V0cyB0aGUgbWF0cml4IHByb3BlcnRpZXNcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gYSAtIE1hdHJpeCBjb21wb25lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBiIC0gTWF0cml4IGNvbXBvbmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGMgLSBNYXRyaXggY29tcG9uZW50XG4gKiBAcGFyYW0ge251bWJlcn0gZCAtIE1hdHJpeCBjb21wb25lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eCAtIE1hdHJpeCBjb21wb25lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eSAtIE1hdHJpeCBjb21wb25lbnRcbiAqXG4gKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhpcyBtYXRyaXguIEdvb2QgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAqL1xuTWF0cml4LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQgKGEsIGIsIGMsIGQsIHR4LCB0eSlcbntcbiAgICB0aGlzLmEgPSBhO1xuICAgIHRoaXMuYiA9IGI7XG4gICAgdGhpcy5jID0gYztcbiAgICB0aGlzLmQgPSBkO1xuICAgIHRoaXMudHggPSB0eDtcbiAgICB0aGlzLnR5ID0gdHk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBmcm9tIHRoZSBjdXJyZW50IE1hdHJpeCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB0cmFuc3Bvc2UgLSBXaGV0aGVyIHdlIG5lZWQgdG8gdHJhbnNwb3NlIHRoZSBtYXRyaXggb3Igbm90XG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gW291dD1uZXcgRmxvYXQzMkFycmF5KDkpXSAtIElmIHByb3ZpZGVkIHRoZSBhcnJheSB3aWxsIGJlIGFzc2lnbmVkIHRvIG91dFxuICogQHJldHVybiB7bnVtYmVyW119IHRoZSBuZXdseSBjcmVhdGVkIGFycmF5IHdoaWNoIGNvbnRhaW5zIHRoZSBtYXRyaXhcbiAqL1xuTWF0cml4LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAodHJhbnNwb3NlLCBvdXQpXG57XG4gICAgaWYgKCF0aGlzLmFycmF5KVxuICAgIHtcbiAgICAgICAgdGhpcy5hcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoOSk7XG4gICAgfVxuXG4gICAgdmFyIGFycmF5ID0gb3V0IHx8IHRoaXMuYXJyYXk7XG5cbiAgICBpZiAodHJhbnNwb3NlKVxuICAgIHtcbiAgICAgICAgYXJyYXlbMF0gPSB0aGlzLmE7XG4gICAgICAgIGFycmF5WzFdID0gdGhpcy5iO1xuICAgICAgICBhcnJheVsyXSA9IDA7XG4gICAgICAgIGFycmF5WzNdID0gdGhpcy5jO1xuICAgICAgICBhcnJheVs0XSA9IHRoaXMuZDtcbiAgICAgICAgYXJyYXlbNV0gPSAwO1xuICAgICAgICBhcnJheVs2XSA9IHRoaXMudHg7XG4gICAgICAgIGFycmF5WzddID0gdGhpcy50eTtcbiAgICAgICAgYXJyYXlbOF0gPSAxO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICBhcnJheVswXSA9IHRoaXMuYTtcbiAgICAgICAgYXJyYXlbMV0gPSB0aGlzLmM7XG4gICAgICAgIGFycmF5WzJdID0gdGhpcy50eDtcbiAgICAgICAgYXJyYXlbM10gPSB0aGlzLmI7XG4gICAgICAgIGFycmF5WzRdID0gdGhpcy5kO1xuICAgICAgICBhcnJheVs1XSA9IHRoaXMudHk7XG4gICAgICAgIGFycmF5WzZdID0gMDtcbiAgICAgICAgYXJyYXlbN10gPSAwO1xuICAgICAgICBhcnJheVs4XSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufTtcblxuLyoqXG4gKiBHZXQgYSBuZXcgcG9zaXRpb24gd2l0aCB0aGUgY3VycmVudCB0cmFuc2Zvcm1hdGlvbiBhcHBsaWVkLlxuICogQ2FuIGJlIHVzZWQgdG8gZ28gZnJvbSBhIGNoaWxkJ3MgY29vcmRpbmF0ZSBzcGFjZSB0byB0aGUgd29ybGQgY29vcmRpbmF0ZSBzcGFjZS4gKGUuZy4gcmVuZGVyaW5nKVxuICpcbiAqIEBwYXJhbSB7UElYSS5Qb2ludH0gcG9zIC0gVGhlIG9yaWdpblxuICogQHBhcmFtIHtQSVhJLlBvaW50fSBbbmV3UG9zXSAtIFRoZSBwb2ludCB0aGF0IHRoZSBuZXcgcG9zaXRpb24gaXMgYXNzaWduZWQgdG8gKGFsbG93ZWQgdG8gYmUgc2FtZSBhcyBpbnB1dClcbiAqIEByZXR1cm4ge1BJWEkuUG9pbnR9IFRoZSBuZXcgcG9pbnQsIHRyYW5zZm9ybWVkIHRocm91Z2ggdGhpcyBtYXRyaXhcbiAqL1xuTWF0cml4LnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIGFwcGx5IChwb3MsIG5ld1BvcylcbntcbiAgICBuZXdQb3MgPSBuZXdQb3MgfHwgbmV3IFBvaW50KCk7XG5cbiAgICB2YXIgeCA9IHBvcy54O1xuICAgIHZhciB5ID0gcG9zLnk7XG5cbiAgICBuZXdQb3MueCA9ICh0aGlzLmEgKiB4KSArICh0aGlzLmMgKiB5KSArIHRoaXMudHg7XG4gICAgbmV3UG9zLnkgPSAodGhpcy5iICogeCkgKyAodGhpcy5kICogeSkgKyB0aGlzLnR5O1xuXG4gICAgcmV0dXJuIG5ld1Bvcztcbn07XG5cbi8qKlxuICogR2V0IGEgbmV3IHBvc2l0aW9uIHdpdGggdGhlIGludmVyc2Ugb2YgdGhlIGN1cnJlbnQgdHJhbnNmb3JtYXRpb24gYXBwbGllZC5cbiAqIENhbiBiZSB1c2VkIHRvIGdvIGZyb20gdGhlIHdvcmxkIGNvb3JkaW5hdGUgc3BhY2UgdG8gYSBjaGlsZCdzIGNvb3JkaW5hdGUgc3BhY2UuIChlLmcuIGlucHV0KVxuICpcbiAqIEBwYXJhbSB7UElYSS5Qb2ludH0gcG9zIC0gVGhlIG9yaWdpblxuICogQHBhcmFtIHtQSVhJLlBvaW50fSBbbmV3UG9zXSAtIFRoZSBwb2ludCB0aGF0IHRoZSBuZXcgcG9zaXRpb24gaXMgYXNzaWduZWQgdG8gKGFsbG93ZWQgdG8gYmUgc2FtZSBhcyBpbnB1dClcbiAqIEByZXR1cm4ge1BJWEkuUG9pbnR9IFRoZSBuZXcgcG9pbnQsIGludmVyc2UtdHJhbnNmb3JtZWQgdGhyb3VnaCB0aGlzIG1hdHJpeFxuICovXG5NYXRyaXgucHJvdG90eXBlLmFwcGx5SW52ZXJzZSA9IGZ1bmN0aW9uIGFwcGx5SW52ZXJzZSAocG9zLCBuZXdQb3MpXG57XG4gICAgbmV3UG9zID0gbmV3UG9zIHx8IG5ldyBQb2ludCgpO1xuXG4gICAgdmFyIGlkID0gMSAvICgodGhpcy5hICogdGhpcy5kKSArICh0aGlzLmMgKiAtdGhpcy5iKSk7XG5cbiAgICB2YXIgeCA9IHBvcy54O1xuICAgIHZhciB5ID0gcG9zLnk7XG5cbiAgICBuZXdQb3MueCA9ICh0aGlzLmQgKiBpZCAqIHgpICsgKC10aGlzLmMgKiBpZCAqIHkpICsgKCgodGhpcy50eSAqIHRoaXMuYykgLSAodGhpcy50eCAqIHRoaXMuZCkpICogaWQpO1xuICAgIG5ld1Bvcy55ID0gKHRoaXMuYSAqIGlkICogeSkgKyAoLXRoaXMuYiAqIGlkICogeCkgKyAoKCgtdGhpcy50eSAqIHRoaXMuYSkgKyAodGhpcy50eCAqIHRoaXMuYikpICogaWQpO1xuXG4gICAgcmV0dXJuIG5ld1Bvcztcbn07XG5cbi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbWF0cml4IG9uIHRoZSB4IGFuZCB5LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IEhvdyBtdWNoIHRvIHRyYW5zbGF0ZSB4IGJ5XG4gKiBAcGFyYW0ge251bWJlcn0geSBIb3cgbXVjaCB0byB0cmFuc2xhdGUgeSBieVxuICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gKi9cbk1hdHJpeC5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24gdHJhbnNsYXRlICh4LCB5KVxue1xuICAgIHRoaXMudHggKz0geDtcbiAgICB0aGlzLnR5ICs9IHk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQXBwbGllcyBhIHNjYWxlIHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBtYXRyaXguXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIGFtb3VudCB0byBzY2FsZSBob3Jpem9udGFsbHlcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSBhbW91bnQgdG8gc2NhbGUgdmVydGljYWxseVxuICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gKi9cbk1hdHJpeC5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbiBzY2FsZSAoeCwgeSlcbntcbiAgICB0aGlzLmEgKj0geDtcbiAgICB0aGlzLmQgKj0geTtcbiAgICB0aGlzLmMgKj0geDtcbiAgICB0aGlzLmIgKj0geTtcbiAgICB0aGlzLnR4ICo9IHg7XG4gICAgdGhpcy50eSAqPSB5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFwcGxpZXMgYSByb3RhdGlvbiB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgbWF0cml4LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFRoZSBhbmdsZSBpbiByYWRpYW5zLlxuICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gKi9cbk1hdHJpeC5wcm90b3R5cGUucm90YXRlID0gZnVuY3Rpb24gcm90YXRlIChhbmdsZSlcbntcbiAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgIHZhciBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG5cbiAgICB2YXIgYTEgPSB0aGlzLmE7XG4gICAgdmFyIGMxID0gdGhpcy5jO1xuICAgIHZhciB0eDEgPSB0aGlzLnR4O1xuXG4gICAgdGhpcy5hID0gKGExICogY29zKSAtICh0aGlzLmIgKiBzaW4pO1xuICAgIHRoaXMuYiA9IChhMSAqIHNpbikgKyAodGhpcy5iICogY29zKTtcbiAgICB0aGlzLmMgPSAoYzEgKiBjb3MpIC0gKHRoaXMuZCAqIHNpbik7XG4gICAgdGhpcy5kID0gKGMxICogc2luKSArICh0aGlzLmQgKiBjb3MpO1xuICAgIHRoaXMudHggPSAodHgxICogY29zKSAtICh0aGlzLnR5ICogc2luKTtcbiAgICB0aGlzLnR5ID0gKHR4MSAqIHNpbikgKyAodGhpcy50eSAqIGNvcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQXBwZW5kcyB0aGUgZ2l2ZW4gTWF0cml4IHRvIHRoaXMgTWF0cml4LlxuICpcbiAqIEBwYXJhbSB7UElYSS5NYXRyaXh9IG1hdHJpeCAtIFRoZSBtYXRyaXggdG8gYXBwZW5kLlxuICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gKi9cbk1hdHJpeC5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kIChtYXRyaXgpXG57XG4gICAgdmFyIGExID0gdGhpcy5hO1xuICAgIHZhciBiMSA9IHRoaXMuYjtcbiAgICB2YXIgYzEgPSB0aGlzLmM7XG4gICAgdmFyIGQxID0gdGhpcy5kO1xuXG4gICAgdGhpcy5hID0gKG1hdHJpeC5hICogYTEpICsgKG1hdHJpeC5iICogYzEpO1xuICAgIHRoaXMuYiA9IChtYXRyaXguYSAqIGIxKSArIChtYXRyaXguYiAqIGQxKTtcbiAgICB0aGlzLmMgPSAobWF0cml4LmMgKiBhMSkgKyAobWF0cml4LmQgKiBjMSk7XG4gICAgdGhpcy5kID0gKG1hdHJpeC5jICogYjEpICsgKG1hdHJpeC5kICogZDEpO1xuXG4gICAgdGhpcy50eCA9IChtYXRyaXgudHggKiBhMSkgKyAobWF0cml4LnR5ICogYzEpICsgdGhpcy50eDtcbiAgICB0aGlzLnR5ID0gKG1hdHJpeC50eCAqIGIxKSArIChtYXRyaXgudHkgKiBkMSkgKyB0aGlzLnR5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1hdHJpeCBiYXNlZCBvbiBhbGwgdGhlIGF2YWlsYWJsZSBwcm9wZXJ0aWVzXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBQb3NpdGlvbiBvbiB0aGUgeCBheGlzXG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFBvc2l0aW9uIG9uIHRoZSB5IGF4aXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBwaXZvdFggLSBQaXZvdCBvbiB0aGUgeCBheGlzXG4gKiBAcGFyYW0ge251bWJlcn0gcGl2b3RZIC0gUGl2b3Qgb24gdGhlIHkgYXhpc1xuICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWCAtIFNjYWxlIG9uIHRoZSB4IGF4aXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVkgLSBTY2FsZSBvbiB0aGUgeSBheGlzXG4gKiBAcGFyYW0ge251bWJlcn0gcm90YXRpb24gLSBSb3RhdGlvbiBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gc2tld1ggLSBTa2V3IG9uIHRoZSB4IGF4aXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBza2V3WSAtIFNrZXcgb24gdGhlIHkgYXhpc1xuICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gKi9cbk1hdHJpeC5wcm90b3R5cGUuc2V0VHJhbnNmb3JtID0gZnVuY3Rpb24gc2V0VHJhbnNmb3JtICh4LCB5LCBwaXZvdFgsIHBpdm90WSwgc2NhbGVYLCBzY2FsZVksIHJvdGF0aW9uLCBza2V3WCwgc2tld1kpXG57XG4gICAgdGhpcy5hID0gTWF0aC5jb3Mocm90YXRpb24gKyBza2V3WSkgKiBzY2FsZVg7XG4gICAgdGhpcy5iID0gTWF0aC5zaW4ocm90YXRpb24gKyBza2V3WSkgKiBzY2FsZVg7XG4gICAgdGhpcy5jID0gLU1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogc2NhbGVZO1xuICAgIHRoaXMuZCA9IE1hdGguY29zKHJvdGF0aW9uIC0gc2tld1gpICogc2NhbGVZO1xuXG4gICAgdGhpcy50eCA9IHggLSAoKHBpdm90WCAqIHRoaXMuYSkgKyAocGl2b3RZICogdGhpcy5jKSk7XG4gICAgdGhpcy50eSA9IHkgLSAoKHBpdm90WCAqIHRoaXMuYikgKyAocGl2b3RZICogdGhpcy5kKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUHJlcGVuZHMgdGhlIGdpdmVuIE1hdHJpeCB0byB0aGlzIE1hdHJpeC5cbiAqXG4gKiBAcGFyYW0ge1BJWEkuTWF0cml4fSBtYXRyaXggLSBUaGUgbWF0cml4IHRvIHByZXBlbmRcbiAqIEByZXR1cm4ge1BJWEkuTWF0cml4fSBUaGlzIG1hdHJpeC4gR29vZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICovXG5NYXRyaXgucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiBwcmVwZW5kIChtYXRyaXgpXG57XG4gICAgdmFyIHR4MSA9IHRoaXMudHg7XG5cbiAgICBpZiAobWF0cml4LmEgIT09IDEgfHwgbWF0cml4LmIgIT09IDAgfHwgbWF0cml4LmMgIT09IDAgfHwgbWF0cml4LmQgIT09IDEpXG4gICAge1xuICAgICAgICB2YXIgYTEgPSB0aGlzLmE7XG4gICAgICAgIHZhciBjMSA9IHRoaXMuYztcblxuICAgICAgICB0aGlzLmEgPSAoYTEgKiBtYXRyaXguYSkgKyAodGhpcy5iICogbWF0cml4LmMpO1xuICAgICAgICB0aGlzLmIgPSAoYTEgKiBtYXRyaXguYikgKyAodGhpcy5iICogbWF0cml4LmQpO1xuICAgICAgICB0aGlzLmMgPSAoYzEgKiBtYXRyaXguYSkgKyAodGhpcy5kICogbWF0cml4LmMpO1xuICAgICAgICB0aGlzLmQgPSAoYzEgKiBtYXRyaXguYikgKyAodGhpcy5kICogbWF0cml4LmQpO1xuICAgIH1cblxuICAgIHRoaXMudHggPSAodHgxICogbWF0cml4LmEpICsgKHRoaXMudHkgKiBtYXRyaXguYykgKyBtYXRyaXgudHg7XG4gICAgdGhpcy50eSA9ICh0eDEgKiBtYXRyaXguYikgKyAodGhpcy50eSAqIG1hdHJpeC5kKSArIG1hdHJpeC50eTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEZWNvbXBvc2VzIHRoZSBtYXRyaXggKHgsIHksIHNjYWxlWCwgc2NhbGVZLCBhbmQgcm90YXRpb24pIGFuZCBzZXRzIHRoZSBwcm9wZXJ0aWVzIG9uIHRvIGEgdHJhbnNmb3JtLlxuICpcbiAqIEBwYXJhbSB7UElYSS5UcmFuc2Zvcm19IHRyYW5zZm9ybSAtIFRoZSB0cmFuc2Zvcm0gdG8gYXBwbHkgdGhlIHByb3BlcnRpZXMgdG8uXG4gKiBAcmV0dXJuIHtQSVhJLlRyYW5zZm9ybX0gVGhlIHRyYW5zZm9ybSB3aXRoIHRoZSBuZXdseSBhcHBsaWVkIHByb3BlcnRpZXNcbiAqL1xuTWF0cml4LnByb3RvdHlwZS5kZWNvbXBvc2UgPSBmdW5jdGlvbiBkZWNvbXBvc2UgKHRyYW5zZm9ybSlcbntcbiAgICAvLyBzb3J0IG91dCByb3RhdGlvbiAvIHNrZXcuLlxuICAgIHZhciBhID0gdGhpcy5hO1xuICAgIHZhciBiID0gdGhpcy5iO1xuICAgIHZhciBjID0gdGhpcy5jO1xuICAgIHZhciBkID0gdGhpcy5kO1xuXG4gICAgdmFyIHNrZXdYID0gLU1hdGguYXRhbjIoLWMsIGQpO1xuICAgIHZhciBza2V3WSA9IE1hdGguYXRhbjIoYiwgYSk7XG5cbiAgICB2YXIgZGVsdGEgPSBNYXRoLmFicyhza2V3WCArIHNrZXdZKTtcblxuICAgIGlmIChkZWx0YSA8IDAuMDAwMDEgfHwgTWF0aC5hYnMoUElfMiAtIGRlbHRhKSA8IDAuMDAwMDEpXG4gICAge1xuICAgICAgICB0cmFuc2Zvcm0ucm90YXRpb24gPSBza2V3WTtcbiAgICAgICAgdHJhbnNmb3JtLnNrZXcueCA9IHRyYW5zZm9ybS5za2V3LnkgPSAwO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICB0cmFuc2Zvcm0ucm90YXRpb24gPSAwO1xuICAgICAgICB0cmFuc2Zvcm0uc2tldy54ID0gc2tld1g7XG4gICAgICAgIHRyYW5zZm9ybS5za2V3LnkgPSBza2V3WTtcbiAgICB9XG5cbiAgICAvLyBuZXh0IHNldCBzY2FsZVxuICAgIHRyYW5zZm9ybS5zY2FsZS54ID0gTWF0aC5zcXJ0KChhICogYSkgKyAoYiAqIGIpKTtcbiAgICB0cmFuc2Zvcm0uc2NhbGUueSA9IE1hdGguc3FydCgoYyAqIGMpICsgKGQgKiBkKSk7XG5cbiAgICAvLyBuZXh0IHNldCBwb3NpdGlvblxuICAgIHRyYW5zZm9ybS5wb3NpdGlvbi54ID0gdGhpcy50eDtcbiAgICB0cmFuc2Zvcm0ucG9zaXRpb24ueSA9IHRoaXMudHk7XG5cbiAgICByZXR1cm4gdHJhbnNmb3JtO1xufTtcblxuLyoqXG4gKiBJbnZlcnRzIHRoaXMgbWF0cml4XG4gKlxuICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gKi9cbk1hdHJpeC5wcm90b3R5cGUuaW52ZXJ0ID0gZnVuY3Rpb24gaW52ZXJ0ICgpXG57XG4gICAgdmFyIGExID0gdGhpcy5hO1xuICAgIHZhciBiMSA9IHRoaXMuYjtcbiAgICB2YXIgYzEgPSB0aGlzLmM7XG4gICAgdmFyIGQxID0gdGhpcy5kO1xuICAgIHZhciB0eDEgPSB0aGlzLnR4O1xuICAgIHZhciBuID0gKGExICogZDEpIC0gKGIxICogYzEpO1xuXG4gICAgdGhpcy5hID0gZDEgLyBuO1xuICAgIHRoaXMuYiA9IC1iMSAvIG47XG4gICAgdGhpcy5jID0gLWMxIC8gbjtcbiAgICB0aGlzLmQgPSBhMSAvIG47XG4gICAgdGhpcy50eCA9ICgoYzEgKiB0aGlzLnR5KSAtIChkMSAqIHR4MSkpIC8gbjtcbiAgICB0aGlzLnR5ID0gLSgoYTEgKiB0aGlzLnR5KSAtIChiMSAqIHR4MSkpIC8gbjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZXNldHMgdGhpcyBNYXRyaXggdG8gYW4gaWRlbnRpdHkgKGRlZmF1bHQpIG1hdHJpeC5cbiAqXG4gKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhpcyBtYXRyaXguIEdvb2QgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAqL1xuTWF0cml4LnByb3RvdHlwZS5pZGVudGl0eSA9IGZ1bmN0aW9uIGlkZW50aXR5ICgpXG57XG4gICAgdGhpcy5hID0gMTtcbiAgICB0aGlzLmIgPSAwO1xuICAgIHRoaXMuYyA9IDA7XG4gICAgdGhpcy5kID0gMTtcbiAgICB0aGlzLnR4ID0gMDtcbiAgICB0aGlzLnR5ID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IE1hdHJpeCBvYmplY3Qgd2l0aCB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhpcyBvbmUuXG4gKlxuICogQHJldHVybiB7UElYSS5NYXRyaXh9IEEgY29weSBvZiB0aGlzIG1hdHJpeC4gR29vZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICovXG5NYXRyaXgucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKClcbntcbiAgICB2YXIgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgbWF0cml4LmEgPSB0aGlzLmE7XG4gICAgbWF0cml4LmIgPSB0aGlzLmI7XG4gICAgbWF0cml4LmMgPSB0aGlzLmM7XG4gICAgbWF0cml4LmQgPSB0aGlzLmQ7XG4gICAgbWF0cml4LnR4ID0gdGhpcy50eDtcbiAgICBtYXRyaXgudHkgPSB0aGlzLnR5O1xuXG4gICAgcmV0dXJuIG1hdHJpeDtcbn07XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBtYXRyaXggdG8gYmUgdGhlIHNhbWUgYXMgdGhlIG9uZXMgaW4gdGhpcyBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge1BJWEkuTWF0cml4fSBtYXRyaXggLSBUaGUgbWF0cml4IHRvIGNvcHkgdG8uXG4gKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhlIG1hdHJpeCBnaXZlbiBpbiBwYXJhbWV0ZXIgd2l0aCBpdHMgdmFsdWVzIHVwZGF0ZWQuXG4gKi9cbk1hdHJpeC5wcm90b3R5cGUuY29weVRvID0gZnVuY3Rpb24gY29weVRvIChtYXRyaXgpXG57XG4gICAgbWF0cml4LmEgPSB0aGlzLmE7XG4gICAgbWF0cml4LmIgPSB0aGlzLmI7XG4gICAgbWF0cml4LmMgPSB0aGlzLmM7XG4gICAgbWF0cml4LmQgPSB0aGlzLmQ7XG4gICAgbWF0cml4LnR4ID0gdGhpcy50eDtcbiAgICBtYXRyaXgudHkgPSB0aGlzLnR5O1xuXG4gICAgcmV0dXJuIG1hdHJpeDtcbn07XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgdmFsdWVzIG9mIHRoZSBtYXRyaXggdG8gYmUgdGhlIHNhbWUgYXMgdGhlIG9uZXMgaW4gZ2l2ZW4gbWF0cml4XG4gKlxuICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gbWF0cml4IC0gVGhlIG1hdHJpeCB0byBjb3B5IGZyb20uXG4gKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gdGhpc1xuICovXG5NYXRyaXgucHJvdG90eXBlLmNvcHlGcm9tID0gZnVuY3Rpb24gY29weUZyb20gKG1hdHJpeClcbntcbiAgICB0aGlzLmEgPSBtYXRyaXguYTtcbiAgICB0aGlzLmIgPSBtYXRyaXguYjtcbiAgICB0aGlzLmMgPSBtYXRyaXguYztcbiAgICB0aGlzLmQgPSBtYXRyaXguZDtcbiAgICB0aGlzLnR4ID0gbWF0cml4LnR4O1xuICAgIHRoaXMudHkgPSBtYXRyaXgudHk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQSBkZWZhdWx0IChpZGVudGl0eSkgbWF0cml4XG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAbWVtYmVyIHtQSVhJLk1hdHJpeH1cbiAqL1xuc3RhdGljQWNjZXNzb3JzLklERU5USVRZLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgoKTtcbn07XG5cbi8qKlxuICogQSB0ZW1wIG1hdHJpeFxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQG1lbWJlciB7UElYSS5NYXRyaXh9XG4gKi9cbnN0YXRpY0FjY2Vzc29ycy5URU1QX01BVFJJWC5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiBuZXcgTWF0cml4KCk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTWF0cml4LCBzdGF0aWNBY2Nlc3NvcnMgKTtcblxuLy8gWW91ciBmcmllbmRseSBuZWlnaGJvdXIgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGloZWRyYWxfZ3JvdXBcblxuLypcbiAqIFRyYW5zZm9ybSBtYXRyaXggZm9yIG9wZXJhdGlvbiBuIGlzOlxuICogfCB1eCB8IHZ4IHxcbiAqIHwgdXkgfCB2eSB8XG4gKi9cblxudmFyIHV4ID0gWzEsIDEsIDAsIC0xLCAtMSwgLTEsIDAsIDEsIDEsIDEsIDAsIC0xLCAtMSwgLTEsIDAsIDFdO1xudmFyIHV5ID0gWzAsIDEsIDEsIDEsIDAsIC0xLCAtMSwgLTEsIDAsIDEsIDEsIDEsIDAsIC0xLCAtMSwgLTFdO1xudmFyIHZ4ID0gWzAsIC0xLCAtMSwgLTEsIDAsIDEsIDEsIDEsIDAsIDEsIDEsIDEsIDAsIC0xLCAtMSwgLTFdO1xudmFyIHZ5ID0gWzEsIDEsIDAsIC0xLCAtMSwgLTEsIDAsIDEsIC0xLCAtMSwgMCwgMSwgMSwgMSwgMCwgLTFdO1xuXG4vKipcbiAqIFtDYXlsZXkgVGFibGVde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NheWxleV90YWJsZX1cbiAqIGZvciB0aGUgY29tcG9zaXRpb24gb2YgZWFjaCByb3RhdGlvbiBpbiB0aGUgZGloZWRlcmFsIGdyb3VwIEQ4LlxuICpcbiAqIEB0eXBlIG51bWJlcltdW11cbiAqIEBwcml2YXRlXG4gKi9cbnZhciByb3RhdGlvbkNheWxleSA9IFtdO1xuXG4vKipcbiAqIE1hdHJpY2VzIGZvciBlYWNoIGBHRDhTeW1tZXRyeWAgcm90YXRpb24uXG4gKlxuICogQHR5cGUgTWF0cml4W11cbiAqIEBwcml2YXRlXG4gKi9cbnZhciByb3RhdGlvbk1hdHJpY2VzID0gW107XG5cbi8qXG4gKiBBbGlhcyBmb3Ige0Bjb2RlIE1hdGguc2lnbn0uXG4gKi9cbnZhciBzaWdudW0gPSBNYXRoLnNpZ247XG5cbi8qXG4gKiBJbml0aWFsaXplcyBgcm90YXRpb25DYXlsZXlgIGFuZCBgcm90YXRpb25NYXRyaWNlc2AuIEl0IGlzIGNhbGxlZFxuICogb25seSBvbmNlIGJlbG93LlxuICovXG5mdW5jdGlvbiBpbml0KClcbntcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAge1xuICAgICAgICB2YXIgcm93ID0gW107XG5cbiAgICAgICAgcm90YXRpb25DYXlsZXkucHVzaChyb3cpO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7IGorKylcbiAgICAgICAge1xuICAgICAgICAgICAgLyogTXVsdGlwbGllcyByb3RhdGlvbiBtYXRyaWNlcyBpIGFuZCBqLiAqL1xuICAgICAgICAgICAgdmFyIF91eCA9IHNpZ251bSgodXhbaV0gKiB1eFtqXSkgKyAodnhbaV0gKiB1eVtqXSkpO1xuICAgICAgICAgICAgdmFyIF91eSA9IHNpZ251bSgodXlbaV0gKiB1eFtqXSkgKyAodnlbaV0gKiB1eVtqXSkpO1xuICAgICAgICAgICAgdmFyIF92eCA9IHNpZ251bSgodXhbaV0gKiB2eFtqXSkgKyAodnhbaV0gKiB2eVtqXSkpO1xuICAgICAgICAgICAgdmFyIF92eSA9IHNpZ251bSgodXlbaV0gKiB2eFtqXSkgKyAodnlbaV0gKiB2eVtqXSkpO1xuXG4gICAgICAgICAgICAvKiBGaW5kcyByb3RhdGlvbiBtYXRyaXggbWF0Y2hpbmcgdGhlIHByb2R1Y3QgYW5kIHB1c2hlcyBpdC4gKi9cbiAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgMTY7IGsrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAodXhba10gPT09IF91eCAmJiB1eVtrXSA9PT0gX3V5XG4gICAgICAgICAgICAgICAgICAgICAgJiYgdnhba10gPT09IF92eCAmJiB2eVtrXSA9PT0gX3Z5KVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcm93LnB1c2goayk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IDE2OyBpJDErKylcbiAgICB7XG4gICAgICAgIHZhciBtYXQgPSBuZXcgTWF0cml4KCk7XG5cbiAgICAgICAgbWF0LnNldCh1eFtpJDFdLCB1eVtpJDFdLCB2eFtpJDFdLCB2eVtpJDFdLCAwLCAwKTtcbiAgICAgICAgcm90YXRpb25NYXRyaWNlcy5wdXNoKG1hdCk7XG4gICAgfVxufVxuXG5pbml0KCk7XG5cbi8qKlxuICogQG1lbWJlcm9mIFBJWElcbiAqIEB0eXBlZGVmIHtudW1iZXJ9IEdEOFN5bW1ldHJ5XG4gKiBAc2VlIFBJWEkuR3JvdXBEOFxuICovXG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgZGloZWRyYWwgZ3JvdXAgRDgsIHdoaWNoIGlzIHNpbWlsYXIgdG9cbiAqIFtncm91cCBENF17QGxpbmsgaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9EaWhlZHJhbEdyb3VwRDQuaHRtbH07XG4gKiBEOCBpcyB0aGUgc2FtZSBidXQgd2l0aCBkaWFnb25hbHMsIGFuZCBpdCBpcyB1c2VkIGZvciB0ZXh0dXJlXG4gKiByb3RhdGlvbnMuXG4gKlxuICogVGhlIGRpcmVjdGlvbnMgdGhlIFUtIGFuZCBWLSBheGVzIGFmdGVyIHJvdGF0aW9uXG4gKiBvZiBhbiBhbmdsZSBvZiBgYTogR0Q4Q29uc3RhbnRgIGFyZSB0aGUgdmVjdG9ycyBgKHVYKGEpLCB1WShhKSlgXG4gKiBhbmQgYCh2WChhKSwgdlkoYSkpYC4gVGhlc2UgYXJlbid0IG5lY2Vzc2FyaWx5IHVuaXQgdmVjdG9ycy5cbiAqXG4gKiAqKk9yaWdpbjoqKjxicj5cbiAqICBUaGlzIGlzIHRoZSBzbWFsbCBwYXJ0IG9mIGdhbWVvZmJvbWJzLmNvbSBwb3J0YWwgc3lzdGVtLiBJdCB3b3Jrcy5cbiAqXG4gKiBAc2VlIFBJWEkuR3JvdXBEOC5FXG4gKiBAc2VlIFBJWEkuR3JvdXBEOC5TRVxuICogQHNlZSBQSVhJLkdyb3VwRDguU1xuICogQHNlZSBQSVhJLkdyb3VwRDguU1dcbiAqIEBzZWUgUElYSS5Hcm91cEQ4LldcbiAqIEBzZWUgUElYSS5Hcm91cEQ4Lk5XXG4gKiBAc2VlIFBJWEkuR3JvdXBEOC5OXG4gKiBAc2VlIFBJWEkuR3JvdXBEOC5ORVxuICogQGF1dGhvciBJdmFuIEBpdmFucG9wZWx5c2hldlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgR3JvdXBEOCA9IHtcbiAgICAvKipcbiAgICAgKiB8IFJvdGF0aW9uIHwgRGlyZWN0aW9uIHxcbiAgICAgKiB8LS0tLS0tLS0tLXwtLS0tLS0tLS0tLXxcbiAgICAgKiB8IDDCsCAgICAgICB8IEVhc3QgICAgICB8XG4gICAgICpcbiAgICAgKiBAY29uc3RhbnQge1BJWEkuR0Q4U3ltbWV0cnl9XG4gICAgICovXG4gICAgRTogMCxcblxuICAgIC8qKlxuICAgICAqIHwgUm90YXRpb24gfCBEaXJlY3Rpb24gfFxuICAgICAqIHwtLS0tLS0tLS0tfC0tLS0tLS0tLS0tfFxuICAgICAqIHwgNDXCsOKGuyAgICAgfCBTb3V0aGVhc3QgfFxuICAgICAqXG4gICAgICogQGNvbnN0YW50IHtQSVhJLkdEOFN5bW1ldHJ5fVxuICAgICAqL1xuICAgIFNFOiAxLFxuXG4gICAgLyoqXG4gICAgICogfCBSb3RhdGlvbiB8IERpcmVjdGlvbiB8XG4gICAgICogfC0tLS0tLS0tLS18LS0tLS0tLS0tLS18XG4gICAgICogfCA5MMKw4oa7ICAgICB8IFNvdXRoICAgICB8XG4gICAgICpcbiAgICAgKiBAY29uc3RhbnQge1BJWEkuR0Q4U3ltbWV0cnl9XG4gICAgICovXG4gICAgUzogMixcblxuICAgIC8qKlxuICAgICAqIHwgUm90YXRpb24gfCBEaXJlY3Rpb24gfFxuICAgICAqIHwtLS0tLS0tLS0tfC0tLS0tLS0tLS0tfFxuICAgICAqIHwgMTM1wrDihrsgICAgfCBTb3V0aHdlc3QgfFxuICAgICAqXG4gICAgICogQGNvbnN0YW50IHtQSVhJLkdEOFN5bW1ldHJ5fVxuICAgICAqL1xuICAgIFNXOiAzLFxuXG4gICAgLyoqXG4gICAgICogfCBSb3RhdGlvbiB8IERpcmVjdGlvbiB8XG4gICAgICogfC0tLS0tLS0tLS18LS0tLS0tLS0tLS18XG4gICAgICogfCAxODDCsCAgICAgfCBXZXN0ICAgICAgfFxuICAgICAqXG4gICAgICogQGNvbnN0YW50IHtQSVhJLkdEOFN5bW1ldHJ5fVxuICAgICAqL1xuICAgIFc6IDQsXG5cbiAgICAvKipcbiAgICAgKiB8IFJvdGF0aW9uICAgIHwgRGlyZWN0aW9uICAgIHxcbiAgICAgKiB8LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLXxcbiAgICAgKiB8IC0xMzXCsC8yMjXCsOKGuyB8IE5vcnRod2VzdCAgICB8XG4gICAgICpcbiAgICAgKiBAY29uc3RhbnQge1BJWEkuR0Q4U3ltbWV0cnl9XG4gICAgICovXG4gICAgTlc6IDUsXG5cbiAgICAvKipcbiAgICAgKiB8IFJvdGF0aW9uICAgIHwgRGlyZWN0aW9uICAgIHxcbiAgICAgKiB8LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLXxcbiAgICAgKiB8IC05MMKwLzI3MMKw4oa7ICB8IE5vcnRoICAgICAgICB8XG4gICAgICpcbiAgICAgKiBAY29uc3RhbnQge1BJWEkuR0Q4U3ltbWV0cnl9XG4gICAgICovXG4gICAgTjogNixcblxuICAgIC8qKlxuICAgICAqIHwgUm90YXRpb24gICAgfCBEaXJlY3Rpb24gICAgfFxuICAgICAqIHwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tfFxuICAgICAqIHwgLTQ1wrAvMzE1wrDihrsgIHwgTm9ydGhlYXN0ICAgIHxcbiAgICAgKlxuICAgICAqIEBjb25zdGFudCB7UElYSS5HRDhTeW1tZXRyeX1cbiAgICAgKi9cbiAgICBORTogNyxcblxuICAgIC8qKlxuICAgICAqIFJlZmxlY3Rpb24gYWJvdXQgWS1heGlzLlxuICAgICAqXG4gICAgICogQGNvbnN0YW50IHtQSVhJLkdEOFN5bW1ldHJ5fVxuICAgICAqL1xuICAgIE1JUlJPUl9WRVJUSUNBTDogOCxcblxuICAgIC8qKlxuICAgICAqIFJlZmxlY3Rpb24gYWJvdXQgdGhlIG1haW4gZGlhZ29uYWwuXG4gICAgICpcbiAgICAgKiBAY29uc3RhbnQge1BJWEkuR0Q4U3ltbWV0cnl9XG4gICAgICovXG4gICAgTUFJTl9ESUFHT05BTDogMTAsXG5cbiAgICAvKipcbiAgICAgKiBSZWZsZWN0aW9uIGFib3V0IFgtYXhpcy5cbiAgICAgKlxuICAgICAqIEBjb25zdGFudCB7UElYSS5HRDhTeW1tZXRyeX1cbiAgICAgKi9cbiAgICBNSVJST1JfSE9SSVpPTlRBTDogMTIsXG5cbiAgICAvKipcbiAgICAgKiBSZWZsZWN0aW9uIGFib3V0IHJldmVyc2UgZGlhZ29uYWwuXG4gICAgICpcbiAgICAgKiBAY29uc3RhbnQge1BJWEkuR0Q4U3ltbWV0cnl9XG4gICAgICovXG4gICAgUkVWRVJTRV9ESUFHT05BTDogMTQsXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtQSVhJLkdEOFN5bW1ldHJ5fSBpbmQgLSBzcHJpdGUgcm90YXRpb24gYW5nbGUuXG4gICAgICogQHJldHVybiB7UElYSS5HRDhTeW1tZXRyeX0gVGhlIFgtY29tcG9uZW50IG9mIHRoZSBVLWF4aXNcbiAgICAgKiAgICBhZnRlciByb3RhdGluZyB0aGUgYXhlcy5cbiAgICAgKi9cbiAgICB1WDogZnVuY3Rpb24gKGluZCkgeyByZXR1cm4gdXhbaW5kXTsgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLkdyb3VwRDhcbiAgICAgKiBAcGFyYW0ge1BJWEkuR0Q4U3ltbWV0cnl9IGluZCAtIHNwcml0ZSByb3RhdGlvbiBhbmdsZS5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLkdEOFN5bW1ldHJ5fSBUaGUgWS1jb21wb25lbnQgb2YgdGhlIFUtYXhpc1xuICAgICAqICAgIGFmdGVyIHJvdGF0aW5nIHRoZSBheGVzLlxuICAgICAqL1xuICAgIHVZOiBmdW5jdGlvbiAoaW5kKSB7IHJldHVybiB1eVtpbmRdOyB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFBJWEkuR3JvdXBEOFxuICAgICAqIEBwYXJhbSB7UElYSS5HRDhTeW1tZXRyeX0gaW5kIC0gc3ByaXRlIHJvdGF0aW9uIGFuZ2xlLlxuICAgICAqIEByZXR1cm4ge1BJWEkuR0Q4U3ltbWV0cnl9IFRoZSBYLWNvbXBvbmVudCBvZiB0aGUgVi1heGlzXG4gICAgICogICAgYWZ0ZXIgcm90YXRpbmcgdGhlIGF4ZXMuXG4gICAgICovXG4gICAgdlg6IGZ1bmN0aW9uIChpbmQpIHsgcmV0dXJuIHZ4W2luZF07IH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtQSVhJLkdEOFN5bW1ldHJ5fSBpbmQgLSBzcHJpdGUgcm90YXRpb24gYW5nbGUuXG4gICAgICogQHJldHVybiB7UElYSS5HRDhTeW1tZXRyeX0gVGhlIFktY29tcG9uZW50IG9mIHRoZSBWLWF4aXNcbiAgICAgKiAgICBhZnRlciByb3RhdGluZyB0aGUgYXhlcy5cbiAgICAgKi9cbiAgICB2WTogZnVuY3Rpb24gKGluZCkgeyByZXR1cm4gdnlbaW5kXTsgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLkdyb3VwRDhcbiAgICAgKiBAcGFyYW0ge1BJWEkuR0Q4U3ltbWV0cnl9IHJvdGF0aW9uIC0gc3ltbWV0cnkgd2hvc2Ugb3Bwb3NpdGVcbiAgICAgKiAgIGlzIG5lZWRlZC4gT25seSByb3RhdGlvbnMgaGF2ZSBvcHBvc2l0ZSBzeW1tZXRyaWVzIHdoaWxlXG4gICAgICogICByZWZsZWN0aW9ucyBkb24ndC5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLkdEOFN5bW1ldHJ5fSBUaGUgb3Bwb3NpdGUgc3ltbWV0cnkgb2YgYHJvdGF0aW9uYFxuICAgICAqL1xuICAgIGludjogZnVuY3Rpb24gKHJvdGF0aW9uKSB7XG4gICAgICAgIGlmIChyb3RhdGlvbiAmIDgpLy8gdHJ1ZSBvbmx5IGlmIGJldHdlZW4gOCAmIDE1IChyZWZsZWN0aW9ucylcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHJvdGF0aW9uICYgMTU7Ly8gb3Igcm90YXRpb24gJSAxNlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgtcm90YXRpb24pICYgNzsvLyBvciAoOCAtIHJvdGF0aW9uKSAlIDhcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29tcG9zZXMgdGhlIHR3byBEOCBvcGVyYXRpb25zLlxuICAgICAqXG4gICAgICogVGFraW5nIGBeYCBhcyByZWZsZWN0aW9uOlxuICAgICAqXG4gICAgICogfCAgICAgICB8IEU9MCB8IFM9MiB8IFc9NCB8IE49NiB8IEVePTggfCBTXj0xMCB8IFdePTEyIHwgTl49MTQgfFxuICAgICAqIHwtLS0tLS0tfC0tLS0tfC0tLS0tfC0tLS0tfC0tLS0tfC0tLS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAgKiB8IEU9MCAgIHwgRSAgIHwgUyAgIHwgVyAgIHwgTiAgIHwgRV4gICB8IFNeICAgIHwgV14gICAgfCBOXiAgICB8XG4gICAgICogfCBTPTIgICB8IFMgICB8IFcgICB8IE4gICB8IEUgICB8IFNeICAgfCBXXiAgICB8IE5eICAgIHwgRV4gICAgfFxuICAgICAqIHwgVz00ICAgfCBXICAgfCBOICAgfCBFICAgfCBTICAgfCBXXiAgIHwgTl4gICAgfCBFXiAgICB8IFNeICAgIHxcbiAgICAgKiB8IE49NiAgIHwgTiAgIHwgRSAgIHwgUyAgIHwgVyAgIHwgTl4gICB8IEVeICAgIHwgU14gICAgfCBXXiAgICB8XG4gICAgICogfCBFXj04ICB8IEVeICB8IE5eICB8IFdeICB8IFNeICB8IEUgICAgfCBOICAgICB8IFcgICAgIHwgUyAgICAgfFxuICAgICAqIHwgU149MTAgfCBTXiAgfCBFXiAgfCBOXiAgfCBXXiAgfCBTICAgIHwgRSAgICAgfCBOICAgICB8IFcgICAgIHxcbiAgICAgKiB8IFdePTEyIHwgV14gIHwgU14gIHwgRV4gIHwgTl4gIHwgVyAgICB8IFMgICAgIHwgRSAgICAgfCBOICAgICB8XG4gICAgICogfCBOXj0xNCB8IE5eICB8IFdeICB8IFNeICB8IEVeICB8IE4gICAgfCBXICAgICB8IFMgICAgIHwgRSAgICAgfFxuICAgICAqXG4gICAgICogW1RoaXMgaXMgYSBDYXlsZXkgdGFibGVde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NheWxleV90YWJsZX1cbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtQSVhJLkdEOFN5bW1ldHJ5fSByb3RhdGlvblNlY29uZCAtIFNlY29uZCBvcGVyYXRpb24sIHdoaWNoXG4gICAgICogICBpcyB0aGUgcm93IGluIHRoZSBhYm92ZSBjYXlsZXkgdGFibGUuXG4gICAgICogQHBhcmFtIHtQSVhJLkdEOFN5bW1ldHJ5fSByb3RhdGlvbkZpcnN0IC0gRmlyc3Qgb3BlcmF0aW9uLCB3aGljaFxuICAgICAqICAgaXMgdGhlIGNvbHVtbiBpbiB0aGUgYWJvdmUgY2F5bGV5IHRhYmxlLlxuICAgICAqIEByZXR1cm4ge1BJWEkuR0Q4U3ltbWV0cnl9IENvbXBvc2VkIG9wZXJhdGlvblxuICAgICAqL1xuICAgIGFkZDogZnVuY3Rpb24gKHJvdGF0aW9uU2Vjb25kLCByb3RhdGlvbkZpcnN0KSB7IHJldHVybiAoXG4gICAgICAgIHJvdGF0aW9uQ2F5bGV5W3JvdGF0aW9uU2Vjb25kXVtyb3RhdGlvbkZpcnN0XVxuICAgICk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlIG9mIGBhZGRgLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBJWEkuR3JvdXBEOFxuICAgICAqIEBwYXJhbSB7UElYSS5HRDhTeW1tZXRyeX0gcm90YXRpb25TZWNvbmQgLSBTZWNvbmQgb3BlcmF0aW9uXG4gICAgICogQHBhcmFtIHtQSVhJLkdEOFN5bW1ldHJ5fSByb3RhdGlvbkZpcnN0IC0gRmlyc3Qgb3BlcmF0aW9uXG4gICAgICogQHJldHVybiB7UElYSS5HRDhTeW1tZXRyeX0gUmVzdWx0XG4gICAgICovXG4gICAgc3ViOiBmdW5jdGlvbiAocm90YXRpb25TZWNvbmQsIHJvdGF0aW9uRmlyc3QpIHsgcmV0dXJuIChcbiAgICAgICAgcm90YXRpb25DYXlsZXlbcm90YXRpb25TZWNvbmRdW0dyb3VwRDguaW52KHJvdGF0aW9uRmlyc3QpXVxuICAgICk7IH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIDE4MCBkZWdyZWVzIHRvIHJvdGF0aW9uLCB3aGljaCBpcyBhIGNvbW11dGF0aXZlXG4gICAgICogb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBJWEkuR3JvdXBEOFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3RhdGlvbiAtIFRoZSBudW1iZXIgdG8gcm90YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJvdGF0ZWQgbnVtYmVyXG4gICAgICovXG4gICAgcm90YXRlMTgwOiBmdW5jdGlvbiAocm90YXRpb24pIHsgcmV0dXJuIHJvdGF0aW9uIF4gNDsgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgcm90YXRpb24gYW5nbGUgaXMgdmVydGljYWwsIGkuZS4gc291dGhcbiAgICAgKiBvciBub3J0aC4gSXQgZG9lc24ndCB3b3JrIGZvciByZWZsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLkdyb3VwRDhcbiAgICAgKiBAcGFyYW0ge1BJWEkuR0Q4U3ltbWV0cnl9IHJvdGF0aW9uIC0gVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGRpcmVjdGlvbiBpcyB2ZXJ0aWNhbFxuICAgICAqL1xuICAgIGlzVmVydGljYWw6IGZ1bmN0aW9uIChyb3RhdGlvbikgeyByZXR1cm4gKHJvdGF0aW9uICYgMykgPT09IDI7IH0sIC8vIHJvdGF0aW9uICUgNCA9PT0gMlxuXG4gICAgLyoqXG4gICAgICogQXBwcm94aW1hdGVzIHRoZSB2ZWN0b3IgYFYoZHgsZHkpYCBpbnRvIG9uZSBvZiB0aGVcbiAgICAgKiBlaWdodCBkaXJlY3Rpb25zIHByb3ZpZGVkIGJ5IGBHcm91cEQ4YC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLkdyb3VwRDhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZHggLSBYLWNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGR5IC0gWS1jb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICAgICAqIEByZXR1cm4ge1BJWEkuR0Q4U3ltbWV0cnl9IEFwcHJveGltYXRpb24gb2YgdGhlIHZlY3RvciBpbnRvXG4gICAgICogIG9uZSBvZiB0aGUgZWlnaHQgc3ltbWV0cmllcy5cbiAgICAgKi9cbiAgICBieURpcmVjdGlvbjogZnVuY3Rpb24gKGR4LCBkeSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMoZHgpICogMiA8PSBNYXRoLmFicyhkeSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChkeSA+PSAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBHcm91cEQ4LlM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBHcm91cEQ4Lk47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoTWF0aC5hYnMoZHkpICogMiA8PSBNYXRoLmFicyhkeCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChkeCA+IDApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEdyb3VwRDguRTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIEdyb3VwRDguVztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeSA+IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChkeCA+IDApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEdyb3VwRDguU0U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBHcm91cEQ4LlNXO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGR4ID4gMClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIEdyb3VwRDguTkU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gR3JvdXBEOC5OVztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGVscHMgc3ByaXRlIHRvIGNvbXBlbnNhdGUgdGV4dHVyZSBwYWNrZXIgcm90YXRpb24uXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gbWF0cml4IC0gc3ByaXRlIHdvcmxkIG1hdHJpeFxuICAgICAqIEBwYXJhbSB7UElYSS5HRDhTeW1tZXRyeX0gcm90YXRpb24gLSBUaGUgcm90YXRpb24gZmFjdG9yIHRvIHVzZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHggLSBzcHJpdGUgYW5jaG9yaW5nXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR5IC0gc3ByaXRlIGFuY2hvcmluZ1xuICAgICAqL1xuICAgIG1hdHJpeEFwcGVuZFJvdGF0aW9uSW52OiBmdW5jdGlvbiAobWF0cml4LCByb3RhdGlvbiwgdHgsIHR5KSB7XG4gICAgICAgIGlmICggdHggPT09IHZvaWQgMCApIHR4ID0gMDtcbiAgICAgICAgaWYgKCB0eSA9PT0gdm9pZCAwICkgdHkgPSAwO1xuXG4gICAgICAgIC8vIFBhY2tlciB1c2VkIFwicm90YXRpb25cIiwgd2UgdXNlIFwiaW52KHJvdGF0aW9uKVwiXG4gICAgICAgIHZhciBtYXQgPSByb3RhdGlvbk1hdHJpY2VzW0dyb3VwRDguaW52KHJvdGF0aW9uKV07XG5cbiAgICAgICAgbWF0LnR4ID0gdHg7XG4gICAgICAgIG1hdC50eSA9IHR5O1xuICAgICAgICBtYXRyaXguYXBwZW5kKG1hdCk7XG4gICAgfSxcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoYXQgdGFrZXMgY2FyZSBhYm91dCBpdHMgdmVyc2lvbnNcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBUcmFuc2Zvcm0gPSBmdW5jdGlvbiBUcmFuc2Zvcm0oKVxue1xuICAgIC8qKlxuICAgICAqIFRoZSB3b3JsZCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLk1hdHJpeH1cbiAgICAgKi9cbiAgICB0aGlzLndvcmxkVHJhbnNmb3JtID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxvY2FsIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuTWF0cml4fVxuICAgICAqL1xuICAgIHRoaXMubG9jYWxUcmFuc2Zvcm0gPSBuZXcgTWF0cml4KCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29vcmRpbmF0ZSBvZiB0aGUgb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBsb2NhbCBjb29yZGluYXRlcyBvZiB0aGUgcGFyZW50LlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5PYnNlcnZhYmxlUG9pbnR9XG4gICAgICovXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBPYnNlcnZhYmxlUG9pbnQodGhpcy5vbkNoYW5nZSwgdGhpcywgMCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2NhbGUgZmFjdG9yIG9mIHRoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLk9ic2VydmFibGVQb2ludH1cbiAgICAgKi9cbiAgICB0aGlzLnNjYWxlID0gbmV3IE9ic2VydmFibGVQb2ludCh0aGlzLm9uQ2hhbmdlLCB0aGlzLCAxLCAxKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwaXZvdCBwb2ludCBvZiB0aGUgZGlzcGxheU9iamVjdCB0aGF0IGl0IHJvdGF0ZXMgYXJvdW5kLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5PYnNlcnZhYmxlUG9pbnR9XG4gICAgICovXG4gICAgdGhpcy5waXZvdCA9IG5ldyBPYnNlcnZhYmxlUG9pbnQodGhpcy5vbkNoYW5nZSwgdGhpcywgMCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2tldyBhbW91bnQsIG9uIHRoZSB4IGFuZCB5IGF4aXMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLk9ic2VydmFibGVQb2ludH1cbiAgICAgKi9cbiAgICB0aGlzLnNrZXcgPSBuZXcgT2JzZXJ2YWJsZVBvaW50KHRoaXMudXBkYXRlU2tldywgdGhpcywgMCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcm90YXRpb24gYW1vdW50LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9yb3RhdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgWC1jb29yZGluYXRlIHZhbHVlIG9mIHRoZSBub3JtYWxpemVkIGxvY2FsIFggYXhpcyxcbiAgICAgKiB0aGUgZmlyc3QgY29sdW1uIG9mIHRoZSBsb2NhbCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggd2l0aG91dCBhIHNjYWxlLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9jeCA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgWS1jb29yZGluYXRlIHZhbHVlIG9mIHRoZSBub3JtYWxpemVkIGxvY2FsIFggYXhpcyxcbiAgICAgKiB0aGUgZmlyc3QgY29sdW1uIG9mIHRoZSBsb2NhbCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggd2l0aG91dCBhIHNjYWxlLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9zeCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgWC1jb29yZGluYXRlIHZhbHVlIG9mIHRoZSBub3JtYWxpemVkIGxvY2FsIFkgYXhpcyxcbiAgICAgKiB0aGUgc2Vjb25kIGNvbHVtbiBvZiB0aGUgbG9jYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IHdpdGhvdXQgYSBzY2FsZS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fY3kgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFktY29vcmRpbmF0ZSB2YWx1ZSBvZiB0aGUgbm9ybWFsaXplZCBsb2NhbCBZIGF4aXMsXG4gICAgICogdGhlIHNlY29uZCBjb2x1bW4gb2YgdGhlIGxvY2FsIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB3aXRob3V0IGEgc2NhbGUuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3N5ID0gMTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb2NhbGx5IHVuaXF1ZSBJRCBvZiB0aGUgbG9jYWwgdHJhbnNmb3JtLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9sb2NhbElEID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb2NhbGx5IHVuaXF1ZSBJRCBvZiB0aGUgbG9jYWwgdHJhbnNmb3JtXG4gICAgICogdXNlZCB0byBjYWxjdWxhdGUgdGhlIGN1cnJlbnQgbG9jYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9jdXJyZW50TG9jYWxJRCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYWxseSB1bmlxdWUgSUQgb2YgdGhlIHdvcmxkIHRyYW5zZm9ybS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fd29ybGRJRCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYWxseSB1bmlxdWUgSUQgb2YgdGhlIHBhcmVudCdzIHdvcmxkIHRyYW5zZm9ybVxuICAgICAqIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBjdXJyZW50IHdvcmxkIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fcGFyZW50SUQgPSAwO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyByb3RhdGlvbjogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIGEgdmFsdWUgY2hhbmdlcy5cbiAqXG4gKiBAcHJvdGVjdGVkXG4gKi9cblRyYW5zZm9ybS5wcm90b3R5cGUub25DaGFuZ2UgPSBmdW5jdGlvbiBvbkNoYW5nZSAoKVxue1xuICAgIHRoaXMuX2xvY2FsSUQrKztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gdGhlIHNrZXcgb3IgdGhlIHJvdGF0aW9uIGNoYW5nZXMuXG4gKlxuICogQHByb3RlY3RlZFxuICovXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnVwZGF0ZVNrZXcgPSBmdW5jdGlvbiB1cGRhdGVTa2V3ICgpXG57XG4gICAgdGhpcy5fY3ggPSBNYXRoLmNvcyh0aGlzLl9yb3RhdGlvbiArIHRoaXMuc2tldy5feSk7XG4gICAgdGhpcy5fc3ggPSBNYXRoLnNpbih0aGlzLl9yb3RhdGlvbiArIHRoaXMuc2tldy5feSk7XG4gICAgdGhpcy5fY3kgPSAtTWF0aC5zaW4odGhpcy5fcm90YXRpb24gLSB0aGlzLnNrZXcuX3gpOyAvLyBjb3MsIGFkZGVkIFBJLzJcbiAgICB0aGlzLl9zeSA9IE1hdGguY29zKHRoaXMuX3JvdGF0aW9uIC0gdGhpcy5za2V3Ll94KTsgLy8gc2luLCBhZGRlZCBQSS8yXG5cbiAgICB0aGlzLl9sb2NhbElEKys7XG59O1xuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIGxvY2FsIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAqL1xuVHJhbnNmb3JtLnByb3RvdHlwZS51cGRhdGVMb2NhbFRyYW5zZm9ybSA9IGZ1bmN0aW9uIHVwZGF0ZUxvY2FsVHJhbnNmb3JtICgpXG57XG4gICAgdmFyIGx0ID0gdGhpcy5sb2NhbFRyYW5zZm9ybTtcblxuICAgIGlmICh0aGlzLl9sb2NhbElEICE9PSB0aGlzLl9jdXJyZW50TG9jYWxJRClcbiAgICB7XG4gICAgICAgIC8vIGdldCB0aGUgbWF0cml4IHZhbHVlcyBvZiB0aGUgZGlzcGxheW9iamVjdCBiYXNlZCBvbiBpdHMgdHJhbnNmb3JtIHByb3BlcnRpZXMuLlxuICAgICAgICBsdC5hID0gdGhpcy5fY3ggKiB0aGlzLnNjYWxlLl94O1xuICAgICAgICBsdC5iID0gdGhpcy5fc3ggKiB0aGlzLnNjYWxlLl94O1xuICAgICAgICBsdC5jID0gdGhpcy5fY3kgKiB0aGlzLnNjYWxlLl95O1xuICAgICAgICBsdC5kID0gdGhpcy5fc3kgKiB0aGlzLnNjYWxlLl95O1xuXG4gICAgICAgIGx0LnR4ID0gdGhpcy5wb3NpdGlvbi5feCAtICgodGhpcy5waXZvdC5feCAqIGx0LmEpICsgKHRoaXMucGl2b3QuX3kgKiBsdC5jKSk7XG4gICAgICAgIGx0LnR5ID0gdGhpcy5wb3NpdGlvbi5feSAtICgodGhpcy5waXZvdC5feCAqIGx0LmIpICsgKHRoaXMucGl2b3QuX3kgKiBsdC5kKSk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRMb2NhbElEID0gdGhpcy5fbG9jYWxJRDtcblxuICAgICAgICAvLyBmb3JjZSBhbiB1cGRhdGUuLlxuICAgICAgICB0aGlzLl9wYXJlbnRJRCA9IC0xO1xuICAgIH1cbn07XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgbG9jYWwgYW5kIHRoZSB3b3JsZCB0cmFuc2Zvcm1hdGlvbiBtYXRyaWNlcy5cbiAqXG4gKiBAcGFyYW0ge1BJWEkuVHJhbnNmb3JtfSBwYXJlbnRUcmFuc2Zvcm0gLSBUaGUgcGFyZW50IHRyYW5zZm9ybVxuICovXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnVwZGF0ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIHVwZGF0ZVRyYW5zZm9ybSAocGFyZW50VHJhbnNmb3JtKVxue1xuICAgIHZhciBsdCA9IHRoaXMubG9jYWxUcmFuc2Zvcm07XG5cbiAgICBpZiAodGhpcy5fbG9jYWxJRCAhPT0gdGhpcy5fY3VycmVudExvY2FsSUQpXG4gICAge1xuICAgICAgICAvLyBnZXQgdGhlIG1hdHJpeCB2YWx1ZXMgb2YgdGhlIGRpc3BsYXlvYmplY3QgYmFzZWQgb24gaXRzIHRyYW5zZm9ybSBwcm9wZXJ0aWVzLi5cbiAgICAgICAgbHQuYSA9IHRoaXMuX2N4ICogdGhpcy5zY2FsZS5feDtcbiAgICAgICAgbHQuYiA9IHRoaXMuX3N4ICogdGhpcy5zY2FsZS5feDtcbiAgICAgICAgbHQuYyA9IHRoaXMuX2N5ICogdGhpcy5zY2FsZS5feTtcbiAgICAgICAgbHQuZCA9IHRoaXMuX3N5ICogdGhpcy5zY2FsZS5feTtcblxuICAgICAgICBsdC50eCA9IHRoaXMucG9zaXRpb24uX3ggLSAoKHRoaXMucGl2b3QuX3ggKiBsdC5hKSArICh0aGlzLnBpdm90Ll95ICogbHQuYykpO1xuICAgICAgICBsdC50eSA9IHRoaXMucG9zaXRpb24uX3kgLSAoKHRoaXMucGl2b3QuX3ggKiBsdC5iKSArICh0aGlzLnBpdm90Ll95ICogbHQuZCkpO1xuICAgICAgICB0aGlzLl9jdXJyZW50TG9jYWxJRCA9IHRoaXMuX2xvY2FsSUQ7XG5cbiAgICAgICAgLy8gZm9yY2UgYW4gdXBkYXRlLi5cbiAgICAgICAgdGhpcy5fcGFyZW50SUQgPSAtMTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcGFyZW50SUQgIT09IHBhcmVudFRyYW5zZm9ybS5fd29ybGRJRClcbiAgICB7XG4gICAgICAgIC8vIGNvbmNhdCB0aGUgcGFyZW50IG1hdHJpeCB3aXRoIHRoZSBvYmplY3RzIHRyYW5zZm9ybS5cbiAgICAgICAgdmFyIHB0ID0gcGFyZW50VHJhbnNmb3JtLndvcmxkVHJhbnNmb3JtO1xuICAgICAgICB2YXIgd3QgPSB0aGlzLndvcmxkVHJhbnNmb3JtO1xuXG4gICAgICAgIHd0LmEgPSAobHQuYSAqIHB0LmEpICsgKGx0LmIgKiBwdC5jKTtcbiAgICAgICAgd3QuYiA9IChsdC5hICogcHQuYikgKyAobHQuYiAqIHB0LmQpO1xuICAgICAgICB3dC5jID0gKGx0LmMgKiBwdC5hKSArIChsdC5kICogcHQuYyk7XG4gICAgICAgIHd0LmQgPSAobHQuYyAqIHB0LmIpICsgKGx0LmQgKiBwdC5kKTtcbiAgICAgICAgd3QudHggPSAobHQudHggKiBwdC5hKSArIChsdC50eSAqIHB0LmMpICsgcHQudHg7XG4gICAgICAgIHd0LnR5ID0gKGx0LnR4ICogcHQuYikgKyAobHQudHkgKiBwdC5kKSArIHB0LnR5O1xuXG4gICAgICAgIHRoaXMuX3BhcmVudElEID0gcGFyZW50VHJhbnNmb3JtLl93b3JsZElEO1xuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgaWQgb2YgdGhlIHRyYW5zZm9ybS4uXG4gICAgICAgIHRoaXMuX3dvcmxkSUQrKztcbiAgICB9XG59O1xuXG4vKipcbiAqIERlY29tcG9zZXMgYSBtYXRyaXggYW5kIHNldHMgdGhlIHRyYW5zZm9ybXMgcHJvcGVydGllcyBiYXNlZCBvbiBpdC5cbiAqXG4gKiBAcGFyYW0ge1BJWEkuTWF0cml4fSBtYXRyaXggLSBUaGUgbWF0cml4IHRvIGRlY29tcG9zZVxuICovXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnNldEZyb21NYXRyaXggPSBmdW5jdGlvbiBzZXRGcm9tTWF0cml4IChtYXRyaXgpXG57XG4gICAgbWF0cml4LmRlY29tcG9zZSh0aGlzKTtcbiAgICB0aGlzLl9sb2NhbElEKys7XG59O1xuXG4vKipcbiAqIFRoZSByb3RhdGlvbiBvZiB0aGUgb2JqZWN0IGluIHJhZGlhbnMuXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5yb3RhdGlvbi5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiB0aGlzLl9yb3RhdGlvbjtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxLnJvdGF0aW9uLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG57XG4gICAgaWYgKHRoaXMuX3JvdGF0aW9uICE9PSB2YWx1ZSlcbiAgICB7XG4gICAgICAgIHRoaXMuX3JvdGF0aW9uID0gdmFsdWU7XG4gICAgICAgIHRoaXMudXBkYXRlU2tldygpO1xuICAgIH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBUcmFuc2Zvcm0ucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG4vKipcbiAqIEEgZGVmYXVsdCAoaWRlbnRpdHkpIHRyYW5zZm9ybVxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudFxuICogQG1lbWJlciB7UElYSS5UcmFuc2Zvcm19XG4gKi9cblRyYW5zZm9ybS5JREVOVElUWSA9IG5ldyBUcmFuc2Zvcm0oKTtcblxuLyoqXG4gKiBTaXplIG9iamVjdCwgY29udGFpbnMgd2lkdGggYW5kIGhlaWdodFxuICpcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBJU2l6ZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHdpZHRoIC0gV2lkdGggY29tcG9uZW50XG4gKiBAcHJvcGVydHkge251bWJlcn0gaGVpZ2h0IC0gSGVpZ2h0IGNvbXBvbmVudFxuICovXG5cbi8qKlxuICogUmVjdGFuZ2xlIG9iamVjdCBpcyBhbiBhcmVhIGRlZmluZWQgYnkgaXRzIHBvc2l0aW9uLCBhcyBpbmRpY2F0ZWQgYnkgaXRzIHRvcC1sZWZ0IGNvcm5lclxuICogcG9pbnQgKHgsIHkpIGFuZCBieSBpdHMgd2lkdGggYW5kIGl0cyBoZWlnaHQuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgUmVjdGFuZ2xlID0gZnVuY3Rpb24gUmVjdGFuZ2xlKHgsIHksIHdpZHRoLCBoZWlnaHQpXG57XG4gICAgaWYgKCB4ID09PSB2b2lkIDAgKSB4ID0gMDtcbiAgICBpZiAoIHkgPT09IHZvaWQgMCApIHkgPSAwO1xuICAgIGlmICggd2lkdGggPT09IHZvaWQgMCApIHdpZHRoID0gMDtcbiAgICBpZiAoIGhlaWdodCA9PT0gdm9pZCAwICkgaGVpZ2h0ID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy54ID0gTnVtYmVyKHgpO1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLnkgPSBOdW1iZXIoeSk7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMud2lkdGggPSBOdW1iZXIod2lkdGgpO1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLmhlaWdodCA9IE51bWJlcihoZWlnaHQpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIG9iamVjdCwgbWFpbmx5IHVzZWQgdG8gYXZvaWQgYGluc3RhbmNlb2ZgIGNoZWNrc1xuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IFBJWEkuU0hBUEVTLlJFQ1RcbiAgICAgKiBAc2VlIFBJWEkuU0hBUEVTXG4gICAgICovXG4gICAgdGhpcy50eXBlID0gU0hBUEVTLlJFQ1Q7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDIgPSB7IGxlZnQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scmlnaHQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sdG9wOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGJvdHRvbTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xudmFyIHN0YXRpY0FjY2Vzc29ycyQxID0geyBFTVBUWTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vKipcbiAqIHJldHVybnMgdGhlIGxlZnQgZWRnZSBvZiB0aGUgcmVjdGFuZ2xlXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi5sZWZ0LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMueDtcbn07XG5cbi8qKlxuICogcmV0dXJucyB0aGUgcmlnaHQgZWRnZSBvZiB0aGUgcmVjdGFuZ2xlXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi5yaWdodC5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiB0aGlzLnggKyB0aGlzLndpZHRoO1xufTtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSB0b3AgZWRnZSBvZiB0aGUgcmVjdGFuZ2xlXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi50b3AuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy55O1xufTtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSBib3R0b20gZWRnZSBvZiB0aGUgcmVjdGFuZ2xlXG4gKlxuICogQG1lbWJlciB7bnVtYmVyfVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi5ib3R0b20uZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XG59O1xuXG4vKipcbiAqIEEgY29uc3RhbnQgZW1wdHkgcmVjdGFuZ2xlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudFxuICogQG1lbWJlciB7UElYSS5SZWN0YW5nbGV9XG4gKi9cbnN0YXRpY0FjY2Vzc29ycyQxLkVNUFRZLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUoMCwgMCwgMCwgMCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIFJlY3RhbmdsZVxuICpcbiAqIEByZXR1cm4ge1BJWEkuUmVjdGFuZ2xlfSBhIGNvcHkgb2YgdGhlIHJlY3RhbmdsZVxuICovXG5SZWN0YW5nbGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKClcbntcbiAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh0aGlzLngsIHRoaXMueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xufTtcblxuLyoqXG4gKiBDb3BpZXMgYW5vdGhlciByZWN0YW5nbGUgdG8gdGhpcyBvbmUuXG4gKlxuICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gcmVjdGFuZ2xlIC0gVGhlIHJlY3RhbmdsZSB0byBjb3B5IGZyb20uXG4gKiBAcmV0dXJuIHtQSVhJLlJlY3RhbmdsZX0gUmV0dXJucyBpdHNlbGYuXG4gKi9cblJlY3RhbmdsZS5wcm90b3R5cGUuY29weUZyb20gPSBmdW5jdGlvbiBjb3B5RnJvbSAocmVjdGFuZ2xlKVxue1xuICAgIHRoaXMueCA9IHJlY3RhbmdsZS54O1xuICAgIHRoaXMueSA9IHJlY3RhbmdsZS55O1xuICAgIHRoaXMud2lkdGggPSByZWN0YW5nbGUud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSByZWN0YW5nbGUuaGVpZ2h0O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENvcGllcyB0aGlzIHJlY3RhbmdsZSB0byBhbm90aGVyIG9uZS5cbiAqXG4gKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSByZWN0YW5nbGUgLSBUaGUgcmVjdGFuZ2xlIHRvIGNvcHkgdG8uXG4gKiBAcmV0dXJuIHtQSVhJLlJlY3RhbmdsZX0gUmV0dXJucyBnaXZlbiBwYXJhbWV0ZXIuXG4gKi9cblJlY3RhbmdsZS5wcm90b3R5cGUuY29weVRvID0gZnVuY3Rpb24gY29weVRvIChyZWN0YW5nbGUpXG57XG4gICAgcmVjdGFuZ2xlLnggPSB0aGlzLng7XG4gICAgcmVjdGFuZ2xlLnkgPSB0aGlzLnk7XG4gICAgcmVjdGFuZ2xlLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICByZWN0YW5nbGUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG5cbiAgICByZXR1cm4gcmVjdGFuZ2xlO1xufTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgeCBhbmQgeSBjb29yZGluYXRlcyBnaXZlbiBhcmUgY29udGFpbmVkIHdpdGhpbiB0aGlzIFJlY3RhbmdsZVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIFggY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQgdG8gdGVzdFxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBwb2ludCB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB4L3kgY29vcmRpbmF0ZXMgYXJlIHdpdGhpbiB0aGlzIFJlY3RhbmdsZVxuICovXG5SZWN0YW5nbGUucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gY29udGFpbnMgKHgsIHkpXG57XG4gICAgaWYgKHRoaXMud2lkdGggPD0gMCB8fCB0aGlzLmhlaWdodCA8PSAwKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh4ID49IHRoaXMueCAmJiB4IDwgdGhpcy54ICsgdGhpcy53aWR0aClcbiAgICB7XG4gICAgICAgIGlmICh5ID49IHRoaXMueSAmJiB5IDwgdGhpcy55ICsgdGhpcy5oZWlnaHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBQYWRzIHRoZSByZWN0YW5nbGUgbWFraW5nIGl0IGdyb3cgaW4gYWxsIGRpcmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdYIC0gVGhlIGhvcml6b250YWwgcGFkZGluZyBhbW91bnQuXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1kgLSBUaGUgdmVydGljYWwgcGFkZGluZyBhbW91bnQuXG4gKi9cblJlY3RhbmdsZS5wcm90b3R5cGUucGFkID0gZnVuY3Rpb24gcGFkIChwYWRkaW5nWCwgcGFkZGluZ1kpXG57XG4gICAgcGFkZGluZ1ggPSBwYWRkaW5nWCB8fCAwO1xuICAgIHBhZGRpbmdZID0gcGFkZGluZ1kgfHwgKChwYWRkaW5nWSAhPT0gMCkgPyBwYWRkaW5nWCA6IDApO1xuXG4gICAgdGhpcy54IC09IHBhZGRpbmdYO1xuICAgIHRoaXMueSAtPSBwYWRkaW5nWTtcblxuICAgIHRoaXMud2lkdGggKz0gcGFkZGluZ1ggKiAyO1xuICAgIHRoaXMuaGVpZ2h0ICs9IHBhZGRpbmdZICogMjtcbn07XG5cbi8qKlxuICogRml0cyB0aGlzIHJlY3RhbmdsZSBhcm91bmQgdGhlIHBhc3NlZCBvbmUuXG4gKlxuICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gcmVjdGFuZ2xlIC0gVGhlIHJlY3RhbmdsZSB0byBmaXQuXG4gKi9cblJlY3RhbmdsZS5wcm90b3R5cGUuZml0ID0gZnVuY3Rpb24gZml0IChyZWN0YW5nbGUpXG57XG4gICAgdmFyIHgxID0gTWF0aC5tYXgodGhpcy54LCByZWN0YW5nbGUueCk7XG4gICAgdmFyIHgyID0gTWF0aC5taW4odGhpcy54ICsgdGhpcy53aWR0aCwgcmVjdGFuZ2xlLnggKyByZWN0YW5nbGUud2lkdGgpO1xuICAgIHZhciB5MSA9IE1hdGgubWF4KHRoaXMueSwgcmVjdGFuZ2xlLnkpO1xuICAgIHZhciB5MiA9IE1hdGgubWluKHRoaXMueSArIHRoaXMuaGVpZ2h0LCByZWN0YW5nbGUueSArIHJlY3RhbmdsZS5oZWlnaHQpO1xuXG4gICAgdGhpcy54ID0geDE7XG4gICAgdGhpcy53aWR0aCA9IE1hdGgubWF4KHgyIC0geDEsIDApO1xuICAgIHRoaXMueSA9IHkxO1xuICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5tYXgoeTIgLSB5MSwgMCk7XG59O1xuXG4vKipcbiAqIEVubGFyZ2VzIHJlY3RhbmdsZSB0aGF0IHdheSBpdHMgY29ybmVycyBsaWUgb24gZ3JpZFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcmVzb2x1dGlvbj0xXSByZXNvbHV0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gW2Vwcz0wLjAwMV0gcHJlY2lzaW9uXG4gKi9cblJlY3RhbmdsZS5wcm90b3R5cGUuY2VpbCA9IGZ1bmN0aW9uIGNlaWwgKHJlc29sdXRpb24sIGVwcylcbntcbiAgICAgICAgaWYgKCByZXNvbHV0aW9uID09PSB2b2lkIDAgKSByZXNvbHV0aW9uID0gMTtcbiAgICAgICAgaWYgKCBlcHMgPT09IHZvaWQgMCApIGVwcyA9IDAuMDAxO1xuXG4gICAgdmFyIHgyID0gTWF0aC5jZWlsKCh0aGlzLnggKyB0aGlzLndpZHRoIC0gZXBzKSAqIHJlc29sdXRpb24pIC8gcmVzb2x1dGlvbjtcbiAgICB2YXIgeTIgPSBNYXRoLmNlaWwoKHRoaXMueSArIHRoaXMuaGVpZ2h0IC0gZXBzKSAqIHJlc29sdXRpb24pIC8gcmVzb2x1dGlvbjtcblxuICAgIHRoaXMueCA9IE1hdGguZmxvb3IoKHRoaXMueCArIGVwcykgKiByZXNvbHV0aW9uKSAvIHJlc29sdXRpb247XG4gICAgdGhpcy55ID0gTWF0aC5mbG9vcigodGhpcy55ICsgZXBzKSAqIHJlc29sdXRpb24pIC8gcmVzb2x1dGlvbjtcblxuICAgIHRoaXMud2lkdGggPSB4MiAtIHRoaXMueDtcbiAgICB0aGlzLmhlaWdodCA9IHkyIC0gdGhpcy55O1xufTtcblxuLyoqXG4gKiBFbmxhcmdlcyB0aGlzIHJlY3RhbmdsZSB0byBpbmNsdWRlIHRoZSBwYXNzZWQgcmVjdGFuZ2xlLlxuICpcbiAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IHJlY3RhbmdsZSAtIFRoZSByZWN0YW5nbGUgdG8gaW5jbHVkZS5cbiAqL1xuUmVjdGFuZ2xlLnByb3RvdHlwZS5lbmxhcmdlID0gZnVuY3Rpb24gZW5sYXJnZSAocmVjdGFuZ2xlKVxue1xuICAgIHZhciB4MSA9IE1hdGgubWluKHRoaXMueCwgcmVjdGFuZ2xlLngpO1xuICAgIHZhciB4MiA9IE1hdGgubWF4KHRoaXMueCArIHRoaXMud2lkdGgsIHJlY3RhbmdsZS54ICsgcmVjdGFuZ2xlLndpZHRoKTtcbiAgICB2YXIgeTEgPSBNYXRoLm1pbih0aGlzLnksIHJlY3RhbmdsZS55KTtcbiAgICB2YXIgeTIgPSBNYXRoLm1heCh0aGlzLnkgKyB0aGlzLmhlaWdodCwgcmVjdGFuZ2xlLnkgKyByZWN0YW5nbGUuaGVpZ2h0KTtcblxuICAgIHRoaXMueCA9IHgxO1xuICAgIHRoaXMud2lkdGggPSB4MiAtIHgxO1xuICAgIHRoaXMueSA9IHkxO1xuICAgIHRoaXMuaGVpZ2h0ID0geTIgLSB5MTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBSZWN0YW5nbGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMiApO1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFJlY3RhbmdsZSwgc3RhdGljQWNjZXNzb3JzJDEgKTtcblxuLyoqXG4gKiBUaGUgQ2lyY2xlIG9iamVjdCBpcyB1c2VkIHRvIGhlbHAgZHJhdyBncmFwaGljcyBhbmQgY2FuIGFsc28gYmUgdXNlZCB0byBzcGVjaWZ5IGEgaGl0IGFyZWEgZm9yIGRpc3BsYXlPYmplY3RzLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIENpcmNsZSA9IGZ1bmN0aW9uIENpcmNsZSh4LCB5LCByYWRpdXMpXG57XG4gICAgaWYgKCB4ID09PSB2b2lkIDAgKSB4ID0gMDtcbiAgICBpZiAoIHkgPT09IHZvaWQgMCApIHkgPSAwO1xuICAgIGlmICggcmFkaXVzID09PSB2b2lkIDAgKSByYWRpdXMgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLnggPSB4O1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLnkgPSB5O1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBvYmplY3QsIG1haW5seSB1c2VkIHRvIGF2b2lkIGBpbnN0YW5jZW9mYCBjaGVja3NcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBQSVhJLlNIQVBFUy5DSVJDXG4gICAgICogQHNlZSBQSVhJLlNIQVBFU1xuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IFNIQVBFUy5DSVJDO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhpcyBDaXJjbGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtQSVhJLkNpcmNsZX0gYSBjb3B5IG9mIHRoZSBDaXJjbGVcbiAqL1xuQ2lyY2xlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpXG57XG4gICAgcmV0dXJuIG5ldyBDaXJjbGUodGhpcy54LCB0aGlzLnksIHRoaXMucmFkaXVzKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgZ2l2ZW4gYXJlIGNvbnRhaW5lZCB3aXRoaW4gdGhpcyBjaXJjbGVcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIFkgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgeC95IGNvb3JkaW5hdGVzIGFyZSB3aXRoaW4gdGhpcyBDaXJjbGVcbiAqL1xuQ2lyY2xlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zICh4LCB5KVxue1xuICAgIGlmICh0aGlzLnJhZGl1cyA8PSAwKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciByMiA9IHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXM7XG4gICAgdmFyIGR4ID0gKHRoaXMueCAtIHgpO1xuICAgIHZhciBkeSA9ICh0aGlzLnkgLSB5KTtcblxuICAgIGR4ICo9IGR4O1xuICAgIGR5ICo9IGR5O1xuXG4gICAgcmV0dXJuIChkeCArIGR5IDw9IHIyKTtcbn07XG5cbi8qKlxuKiBSZXR1cm5zIHRoZSBmcmFtaW5nIHJlY3RhbmdsZSBvZiB0aGUgY2lyY2xlIGFzIGEgUmVjdGFuZ2xlIG9iamVjdFxuKlxuKiBAcmV0dXJuIHtQSVhJLlJlY3RhbmdsZX0gdGhlIGZyYW1pbmcgcmVjdGFuZ2xlXG4qL1xuQ2lyY2xlLnByb3RvdHlwZS5nZXRCb3VuZHMgPSBmdW5jdGlvbiBnZXRCb3VuZHMgKClcbntcbiAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh0aGlzLnggLSB0aGlzLnJhZGl1cywgdGhpcy55IC0gdGhpcy5yYWRpdXMsIHRoaXMucmFkaXVzICogMiwgdGhpcy5yYWRpdXMgKiAyKTtcbn07XG5cbi8qKlxuICogVGhlIEVsbGlwc2Ugb2JqZWN0IGlzIHVzZWQgdG8gaGVscCBkcmF3IGdyYXBoaWNzIGFuZCBjYW4gYWxzbyBiZSB1c2VkIHRvIHNwZWNpZnkgYSBoaXQgYXJlYSBmb3IgZGlzcGxheU9iamVjdHMuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgRWxsaXBzZSA9IGZ1bmN0aW9uIEVsbGlwc2UoeCwgeSwgaGFsZldpZHRoLCBoYWxmSGVpZ2h0KVxue1xuICAgIGlmICggeCA9PT0gdm9pZCAwICkgeCA9IDA7XG4gICAgaWYgKCB5ID09PSB2b2lkIDAgKSB5ID0gMDtcbiAgICBpZiAoIGhhbGZXaWR0aCA9PT0gdm9pZCAwICkgaGFsZldpZHRoID0gMDtcbiAgICBpZiAoIGhhbGZIZWlnaHQgPT09IHZvaWQgMCApIGhhbGZIZWlnaHQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLnggPSB4O1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLnkgPSB5O1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLndpZHRoID0gaGFsZldpZHRoO1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLmhlaWdodCA9IGhhbGZIZWlnaHQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LCBtYWlubHkgdXNlZCB0byBhdm9pZCBgaW5zdGFuY2VvZmAgY2hlY2tzXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgUElYSS5TSEFQRVMuRUxJUFxuICAgICAqIEBzZWUgUElYSS5TSEFQRVNcbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSBTSEFQRVMuRUxJUDtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgRWxsaXBzZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge1BJWEkuRWxsaXBzZX0gYSBjb3B5IG9mIHRoZSBlbGxpcHNlXG4gKi9cbkVsbGlwc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKClcbntcbiAgICByZXR1cm4gbmV3IEVsbGlwc2UodGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgZ2l2ZW4gYXJlIGNvbnRhaW5lZCB3aXRoaW4gdGhpcyBlbGxpcHNlXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgWCBjb29yZGluYXRlIG9mIHRoZSBwb2ludCB0byB0ZXN0XG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHgveSBjb29yZHMgYXJlIHdpdGhpbiB0aGlzIGVsbGlwc2VcbiAqL1xuRWxsaXBzZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyAoeCwgeSlcbntcbiAgICBpZiAodGhpcy53aWR0aCA8PSAwIHx8IHRoaXMuaGVpZ2h0IDw9IDApXG4gICAge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gbm9ybWFsaXplIHRoZSBjb29yZHMgdG8gYW4gZWxsaXBzZSB3aXRoIGNlbnRlciAwLDBcbiAgICB2YXIgbm9ybXggPSAoKHggLSB0aGlzLngpIC8gdGhpcy53aWR0aCk7XG4gICAgdmFyIG5vcm15ID0gKCh5IC0gdGhpcy55KSAvIHRoaXMuaGVpZ2h0KTtcblxuICAgIG5vcm14ICo9IG5vcm14O1xuICAgIG5vcm15ICo9IG5vcm15O1xuXG4gICAgcmV0dXJuIChub3JteCArIG5vcm15IDw9IDEpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmcmFtaW5nIHJlY3RhbmdsZSBvZiB0aGUgZWxsaXBzZSBhcyBhIFJlY3RhbmdsZSBvYmplY3RcbiAqXG4gKiBAcmV0dXJuIHtQSVhJLlJlY3RhbmdsZX0gdGhlIGZyYW1pbmcgcmVjdGFuZ2xlXG4gKi9cbkVsbGlwc2UucHJvdG90eXBlLmdldEJvdW5kcyA9IGZ1bmN0aW9uIGdldEJvdW5kcyAoKVxue1xuICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHRoaXMueCAtIHRoaXMud2lkdGgsIHRoaXMueSAtIHRoaXMuaGVpZ2h0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG59O1xuXG4vKipcbiAqIEEgY2xhc3MgdG8gZGVmaW5lIGEgc2hhcGUgdmlhIHVzZXIgZGVmaW5lZCBjby1vcmluYXRlcy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBQb2x5Z29uID0gZnVuY3Rpb24gUG9seWdvbigpXG57XG4gICAgdmFyIHBvaW50cyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBwb2ludHNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHBvaW50c1swXSkpXG4gICAge1xuICAgICAgICBwb2ludHMgPSBwb2ludHNbMF07XG4gICAgfVxuXG4gICAgLy8gaWYgdGhpcyBpcyBhbiBhcnJheSBvZiBwb2ludHMsIGNvbnZlcnQgaXQgdG8gYSBmbGF0IGFycmF5IG9mIG51bWJlcnNcbiAgICBpZiAocG9pbnRzWzBdIGluc3RhbmNlb2YgUG9pbnQpXG4gICAge1xuICAgICAgICB2YXIgcCA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBwLnB1c2gocG9pbnRzW2ldLngsIHBvaW50c1tpXS55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvaW50cyA9IHA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgdGhlIHBvaW50cyBvZiB0aGlzIHBvbHlnb25cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcltdfVxuICAgICAqL1xuICAgIHRoaXMucG9pbnRzID0gcG9pbnRzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIG9iamVjdCwgbWFpbmx5IHVzZWQgdG8gYXZvaWQgYGluc3RhbmNlb2ZgIGNoZWNrc1xuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IFBJWEkuU0hBUEVTLlBPTFlcbiAgICAgKiBAc2VlIFBJWEkuU0hBUEVTXG4gICAgICovXG4gICAgdGhpcy50eXBlID0gU0hBUEVTLlBPTFk7XG5cbiAgICAvKipcbiAgICAgKiBgZmFsc2VgIGFmdGVyIG1vdmVUbywgYHRydWVgIGFmdGVyIGBjbG9zZVBhdGhgLiBJbiBhbGwgb3RoZXIgY2FzZXMgaXQgaXMgYHRydWVgLlxuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHRoaXMuY2xvc2VTdHJva2UgPSB0cnVlO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhpcyBwb2x5Z29uXG4gKlxuICogQHJldHVybiB7UElYSS5Qb2x5Z29ufSBhIGNvcHkgb2YgdGhlIHBvbHlnb25cbiAqL1xuUG9seWdvbi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKVxue1xuICAgIHZhciBwb2x5Z29uID0gbmV3IFBvbHlnb24odGhpcy5wb2ludHMuc2xpY2UoKSk7XG5cbiAgICBwb2x5Z29uLmNsb3NlU3Ryb2tlID0gdGhpcy5jbG9zZVN0cm9rZTtcblxuICAgIHJldHVybiBwb2x5Z29uO1xufTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgeCBhbmQgeSBjb29yZGluYXRlcyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbiBhcmUgY29udGFpbmVkIHdpdGhpbiB0aGlzIHBvbHlnb25cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIFkgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgeC95IGNvb3JkaW5hdGVzIGFyZSB3aXRoaW4gdGhpcyBwb2x5Z29uXG4gKi9cblBvbHlnb24ucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gY29udGFpbnMgKHgsIHkpXG57XG4gICAgdmFyIGluc2lkZSA9IGZhbHNlO1xuXG4gICAgLy8gdXNlIHNvbWUgcmF5Y2FzdGluZyB0byB0ZXN0IGhpdHNcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vc3Vic3RhY2svcG9pbnQtaW4tcG9seWdvbi9ibG9iL21hc3Rlci9pbmRleC5qc1xuICAgIHZhciBsZW5ndGggPSB0aGlzLnBvaW50cy5sZW5ndGggLyAyO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBsZW5ndGggLSAxOyBpIDwgbGVuZ3RoOyBqID0gaSsrKVxuICAgIHtcbiAgICAgICAgdmFyIHhpID0gdGhpcy5wb2ludHNbaSAqIDJdO1xuICAgICAgICB2YXIgeWkgPSB0aGlzLnBvaW50c1soaSAqIDIpICsgMV07XG4gICAgICAgIHZhciB4aiA9IHRoaXMucG9pbnRzW2ogKiAyXTtcbiAgICAgICAgdmFyIHlqID0gdGhpcy5wb2ludHNbKGogKiAyKSArIDFdO1xuICAgICAgICB2YXIgaW50ZXJzZWN0ID0gKCh5aSA+IHkpICE9PSAoeWogPiB5KSkgJiYgKHggPCAoKHhqIC0geGkpICogKCh5IC0geWkpIC8gKHlqIC0geWkpKSkgKyB4aSk7XG5cbiAgICAgICAgaWYgKGludGVyc2VjdClcbiAgICAgICAge1xuICAgICAgICAgICAgaW5zaWRlID0gIWluc2lkZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpbnNpZGU7XG59O1xuXG4vKipcbiAqIFRoZSBSb3VuZGVkIFJlY3RhbmdsZSBvYmplY3QgaXMgYW4gYXJlYSB0aGF0IGhhcyBuaWNlIHJvdW5kZWQgY29ybmVycywgYXMgaW5kaWNhdGVkIGJ5IGl0c1xuICogdG9wLWxlZnQgY29ybmVyIHBvaW50ICh4LCB5KSBhbmQgYnkgaXRzIHdpZHRoIGFuZCBpdHMgaGVpZ2h0IGFuZCBpdHMgcmFkaXVzLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFJvdW5kZWRSZWN0YW5nbGUgPSBmdW5jdGlvbiBSb3VuZGVkUmVjdGFuZ2xlKHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cylcbntcbiAgICBpZiAoIHggPT09IHZvaWQgMCApIHggPSAwO1xuICAgIGlmICggeSA9PT0gdm9pZCAwICkgeSA9IDA7XG4gICAgaWYgKCB3aWR0aCA9PT0gdm9pZCAwICkgd2lkdGggPSAwO1xuICAgIGlmICggaGVpZ2h0ID09PSB2b2lkIDAgKSBoZWlnaHQgPSAwO1xuICAgIGlmICggcmFkaXVzID09PSB2b2lkIDAgKSByYWRpdXMgPSAyMDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy54ID0geDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy55ID0geTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAyMFxuICAgICAqL1xuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIG9iamVjdCwgbWFpbmx5IHVzZWQgdG8gYXZvaWQgYGluc3RhbmNlb2ZgIGNoZWNrc1xuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqIEBkZWZhdWx0IFBJWEkuU0hBUEVTLlJSRUNcbiAgICAgKiBAc2VlIFBJWEkuU0hBUEVTXG4gICAgICovXG4gICAgdGhpcy50eXBlID0gU0hBUEVTLlJSRUM7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIFJvdW5kZWQgUmVjdGFuZ2xlXG4gKlxuICogQHJldHVybiB7UElYSS5Sb3VuZGVkUmVjdGFuZ2xlfSBhIGNvcHkgb2YgdGhlIHJvdW5kZWQgcmVjdGFuZ2xlXG4gKi9cblJvdW5kZWRSZWN0YW5nbGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKClcbntcbiAgICByZXR1cm4gbmV3IFJvdW5kZWRSZWN0YW5nbGUodGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLnJhZGl1cyk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSB4IGFuZCB5IGNvb3JkaW5hdGVzIGdpdmVuIGFyZSBjb250YWluZWQgd2l0aGluIHRoaXMgUm91bmRlZCBSZWN0YW5nbGVcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIFkgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgeC95IGNvb3JkaW5hdGVzIGFyZSB3aXRoaW4gdGhpcyBSb3VuZGVkIFJlY3RhbmdsZVxuICovXG5Sb3VuZGVkUmVjdGFuZ2xlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zICh4LCB5KVxue1xuICAgIGlmICh0aGlzLndpZHRoIDw9IDAgfHwgdGhpcy5oZWlnaHQgPD0gMClcbiAgICB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHggPj0gdGhpcy54ICYmIHggPD0gdGhpcy54ICsgdGhpcy53aWR0aClcbiAgICB7XG4gICAgICAgIGlmICh5ID49IHRoaXMueSAmJiB5IDw9IHRoaXMueSArIHRoaXMuaGVpZ2h0KVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoKHkgPj0gdGhpcy55ICsgdGhpcy5yYWRpdXMgJiYgeSA8PSB0aGlzLnkgKyB0aGlzLmhlaWdodCAtIHRoaXMucmFkaXVzKVxuICAgICAgICAgICAgfHwgKHggPj0gdGhpcy54ICsgdGhpcy5yYWRpdXMgJiYgeCA8PSB0aGlzLnggKyB0aGlzLndpZHRoIC0gdGhpcy5yYWRpdXMpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGR4ID0geCAtICh0aGlzLnggKyB0aGlzLnJhZGl1cyk7XG4gICAgICAgICAgICB2YXIgZHkgPSB5IC0gKHRoaXMueSArIHRoaXMucmFkaXVzKTtcbiAgICAgICAgICAgIHZhciByYWRpdXMyID0gdGhpcy5yYWRpdXMgKiB0aGlzLnJhZGl1cztcblxuICAgICAgICAgICAgaWYgKChkeCAqIGR4KSArIChkeSAqIGR5KSA8PSByYWRpdXMyKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHggPSB4IC0gKHRoaXMueCArIHRoaXMud2lkdGggLSB0aGlzLnJhZGl1cyk7XG4gICAgICAgICAgICBpZiAoKGR4ICogZHgpICsgKGR5ICogZHkpIDw9IHJhZGl1czIpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkeSA9IHkgLSAodGhpcy55ICsgdGhpcy5oZWlnaHQgLSB0aGlzLnJhZGl1cyk7XG4gICAgICAgICAgICBpZiAoKGR4ICogZHgpICsgKGR5ICogZHkpIDw9IHJhZGl1czIpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkeCA9IHggLSAodGhpcy54ICsgdGhpcy5yYWRpdXMpO1xuICAgICAgICAgICAgaWYgKChkeCAqIGR4KSArIChkeSAqIGR5KSA8PSByYWRpdXMyKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBNYXRoIGNsYXNzZXMgYW5kIHV0aWxpdGllcyBtaXhlZCBpbnRvIFBJWEkgbmFtZXNwYWNlLlxuICpcbiAqIEBsZW5kcyBQSVhJXG4gKi9cblxuZXhwb3J0IHsgQ2lyY2xlLCBERUdfVE9fUkFELCBFbGxpcHNlLCBHcm91cEQ4LCBNYXRyaXgsIE9ic2VydmFibGVQb2ludCwgUElfMiwgUG9pbnQsIFBvbHlnb24sIFJBRF9UT19ERUcsIFJlY3RhbmdsZSwgUm91bmRlZFJlY3RhbmdsZSwgU0hBUEVTLCBUcmFuc2Zvcm0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGguZXMuanMubWFwXG4iLCIvKiFcbiAqIEBwaXhpL2Rpc3BsYXkgLSB2NS4xLjNcbiAqIENvbXBpbGVkIE1vbiwgMDkgU2VwIDIwMTkgMDQ6NTE6NTMgVVRDXG4gKlxuICogQHBpeGkvZGlzcGxheSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbmltcG9ydCB7IHNldHRpbmdzIH0gZnJvbSAnQHBpeGkvc2V0dGluZ3MnO1xuaW1wb3J0IHsgUmVjdGFuZ2xlLCBSQURfVE9fREVHLCBERUdfVE9fUkFELCBUcmFuc2Zvcm0gfSBmcm9tICdAcGl4aS9tYXRoJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgcmVtb3ZlSXRlbXMgfSBmcm9tICdAcGl4aS91dGlscyc7XG5cbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGNvbnRhaW5lciBwcm9wZXJ0eSAnc29ydGFibGVDaGlsZHJlbicuXG4gKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIGNvbnRhaW5lciB3aWxsIHNvcnQgaXRzIGNoaWxkcmVuIGJ5IHpJbmRleCB2YWx1ZVxuICogd2hlbiB1cGRhdGVUcmFuc2Zvcm0oKSBpcyBjYWxsZWQsIG9yIG1hbnVhbGx5IGlmIHNvcnRDaGlsZHJlbigpIGlzIGNhbGxlZC5cbiAqXG4gKiBUaGlzIGFjdHVhbGx5IGNoYW5nZXMgdGhlIG9yZGVyIG9mIGVsZW1lbnRzIGluIHRoZSBhcnJheSwgc28gc2hvdWxkIGJlIHRyZWF0ZWRcbiAqIGFzIGEgYmFzaWMgc29sdXRpb24gdGhhdCBpcyBub3QgcGVyZm9ybWFudCBjb21wYXJlZCB0byBvdGhlciBzb2x1dGlvbnMsXG4gKiBzdWNoIGFzIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpanMvcGl4aS1kaXNwbGF5XG4gKlxuICogQWxzbyBiZSBhd2FyZSBvZiB0aGF0IHRoaXMgbWF5IG5vdCB3b3JrIG5pY2VseSB3aXRoIHRoZSBhZGRDaGlsZEF0KCkgZnVuY3Rpb24sXG4gKiBhcyB0aGUgekluZGV4IHNvcnRpbmcgbWF5IGNhdXNlIHRoZSBjaGlsZCB0byBhdXRvbWF0aWNhbGx5IHNvcnRlZCB0byBhbm90aGVyIHBvc2l0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudFxuICogQG5hbWUgU09SVEFCTEVfQ0hJTERSRU5cbiAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0IGZhbHNlXG4gKi9cbnNldHRpbmdzLlNPUlRBQkxFX0NISUxEUkVOID0gZmFsc2U7XG5cbi8qKlxuICogJ0J1aWxkZXInIHBhdHRlcm4gZm9yIGJvdW5kcyByZWN0YW5nbGVzLlxuICpcbiAqIFRoaXMgY291bGQgYmUgY2FsbGVkIGFuIEF4aXMtQWxpZ25lZCBCb3VuZGluZyBCb3guXG4gKiBJdCBpcyBub3QgYW4gYWN0dWFsIHNoYXBlLiBJdCBpcyBhIG11dGFibGUgdGhpbmc7IG5vICdFTVBUWScgb3IgdGhvc2Uga2luZCBvZiBwcm9ibGVtcy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBCb3VuZHMgPSBmdW5jdGlvbiBCb3VuZHMoKVxue1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy5taW5YID0gSW5maW5pdHk7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMubWluWSA9IEluZmluaXR5O1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLm1heFggPSAtSW5maW5pdHk7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMubWF4WSA9IC1JbmZpbml0eTtcblxuICAgIHRoaXMucmVjdCA9IG51bGw7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiBib3VuZHMgYXJlIGVtcHR5LlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgZW1wdHkuXG4gKi9cbkJvdW5kcy5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkgKClcbntcbiAgICByZXR1cm4gdGhpcy5taW5YID4gdGhpcy5tYXhYIHx8IHRoaXMubWluWSA+IHRoaXMubWF4WTtcbn07XG5cbi8qKlxuICogQ2xlYXJzIHRoZSBib3VuZHMgYW5kIHJlc2V0cy5cbiAqXG4gKi9cbkJvdW5kcy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKVxue1xuICAgIHRoaXMudXBkYXRlSUQrKztcblxuICAgIHRoaXMubWluWCA9IEluZmluaXR5O1xuICAgIHRoaXMubWluWSA9IEluZmluaXR5O1xuICAgIHRoaXMubWF4WCA9IC1JbmZpbml0eTtcbiAgICB0aGlzLm1heFkgPSAtSW5maW5pdHk7XG59O1xuXG4vKipcbiAqIENhbiByZXR1cm4gUmVjdGFuZ2xlLkVNUFRZIGNvbnN0YW50LCBlaXRoZXIgY29uc3RydWN0IG5ldyByZWN0YW5nbGUsIGVpdGhlciB1c2UgeW91ciByZWN0YW5nbGVcbiAqIEl0IGlzIG5vdCBndWFyYW50ZWVkIHRoYXQgaXQgd2lsbCByZXR1cm4gdGVtcFJlY3RcbiAqXG4gKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSByZWN0IC0gdGVtcG9yYXJ5IG9iamVjdCB3aWxsIGJlIHVzZWQgaWYgQUFCQiBpcyBub3QgZW1wdHlcbiAqIEByZXR1cm5zIHtQSVhJLlJlY3RhbmdsZX0gQSByZWN0YW5nbGUgb2YgdGhlIGJvdW5kc1xuICovXG5Cb3VuZHMucHJvdG90eXBlLmdldFJlY3RhbmdsZSA9IGZ1bmN0aW9uIGdldFJlY3RhbmdsZSAocmVjdClcbntcbiAgICBpZiAodGhpcy5taW5YID4gdGhpcy5tYXhYIHx8IHRoaXMubWluWSA+IHRoaXMubWF4WSlcbiAgICB7XG4gICAgICAgIHJldHVybiBSZWN0YW5nbGUuRU1QVFk7XG4gICAgfVxuXG4gICAgcmVjdCA9IHJlY3QgfHwgbmV3IFJlY3RhbmdsZSgwLCAwLCAxLCAxKTtcblxuICAgIHJlY3QueCA9IHRoaXMubWluWDtcbiAgICByZWN0LnkgPSB0aGlzLm1pblk7XG4gICAgcmVjdC53aWR0aCA9IHRoaXMubWF4WCAtIHRoaXMubWluWDtcbiAgICByZWN0LmhlaWdodCA9IHRoaXMubWF4WSAtIHRoaXMubWluWTtcblxuICAgIHJldHVybiByZWN0O1xufTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBpbmxpbmVkIHdoZW4gaXRzIHBvc3NpYmxlLlxuICpcbiAqIEBwYXJhbSB7UElYSS5Qb2ludH0gcG9pbnQgLSBUaGUgcG9pbnQgdG8gYWRkLlxuICovXG5Cb3VuZHMucHJvdG90eXBlLmFkZFBvaW50ID0gZnVuY3Rpb24gYWRkUG9pbnQgKHBvaW50KVxue1xuICAgIHRoaXMubWluWCA9IE1hdGgubWluKHRoaXMubWluWCwgcG9pbnQueCk7XG4gICAgdGhpcy5tYXhYID0gTWF0aC5tYXgodGhpcy5tYXhYLCBwb2ludC54KTtcbiAgICB0aGlzLm1pblkgPSBNYXRoLm1pbih0aGlzLm1pblksIHBvaW50LnkpO1xuICAgIHRoaXMubWF4WSA9IE1hdGgubWF4KHRoaXMubWF4WSwgcG9pbnQueSk7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBxdWFkLCBub3QgdHJhbnNmb3JtZWRcbiAqXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gdmVydGljZXMgLSBUaGUgdmVydHMgdG8gYWRkLlxuICovXG5Cb3VuZHMucHJvdG90eXBlLmFkZFF1YWQgPSBmdW5jdGlvbiBhZGRRdWFkICh2ZXJ0aWNlcylcbntcbiAgICB2YXIgbWluWCA9IHRoaXMubWluWDtcbiAgICB2YXIgbWluWSA9IHRoaXMubWluWTtcbiAgICB2YXIgbWF4WCA9IHRoaXMubWF4WDtcbiAgICB2YXIgbWF4WSA9IHRoaXMubWF4WTtcblxuICAgIHZhciB4ID0gdmVydGljZXNbMF07XG4gICAgdmFyIHkgPSB2ZXJ0aWNlc1sxXTtcblxuICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgIG1pblkgPSB5IDwgbWluWSA/IHkgOiBtaW5ZO1xuICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuXG4gICAgeCA9IHZlcnRpY2VzWzJdO1xuICAgIHkgPSB2ZXJ0aWNlc1szXTtcbiAgICBtaW5YID0geCA8IG1pblggPyB4IDogbWluWDtcbiAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICBtYXhYID0geCA+IG1heFggPyB4IDogbWF4WDtcbiAgICBtYXhZID0geSA+IG1heFkgPyB5IDogbWF4WTtcblxuICAgIHggPSB2ZXJ0aWNlc1s0XTtcbiAgICB5ID0gdmVydGljZXNbNV07XG4gICAgbWluWCA9IHggPCBtaW5YID8geCA6IG1pblg7XG4gICAgbWluWSA9IHkgPCBtaW5ZID8geSA6IG1pblk7XG4gICAgbWF4WCA9IHggPiBtYXhYID8geCA6IG1heFg7XG4gICAgbWF4WSA9IHkgPiBtYXhZID8geSA6IG1heFk7XG5cbiAgICB4ID0gdmVydGljZXNbNl07XG4gICAgeSA9IHZlcnRpY2VzWzddO1xuICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgIG1pblkgPSB5IDwgbWluWSA/IHkgOiBtaW5ZO1xuICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuXG4gICAgdGhpcy5taW5YID0gbWluWDtcbiAgICB0aGlzLm1pblkgPSBtaW5ZO1xuICAgIHRoaXMubWF4WCA9IG1heFg7XG4gICAgdGhpcy5tYXhZID0gbWF4WTtcbn07XG5cbi8qKlxuICogQWRkcyBzcHJpdGUgZnJhbWUsIHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwYXJhbSB7UElYSS5UcmFuc2Zvcm19IHRyYW5zZm9ybSAtIFRPRE9cbiAqIEBwYXJhbSB7bnVtYmVyfSB4MCAtIFRPRE9cbiAqIEBwYXJhbSB7bnVtYmVyfSB5MCAtIFRPRE9cbiAqIEBwYXJhbSB7bnVtYmVyfSB4MSAtIFRPRE9cbiAqIEBwYXJhbSB7bnVtYmVyfSB5MSAtIFRPRE9cbiAqL1xuQm91bmRzLnByb3RvdHlwZS5hZGRGcmFtZSA9IGZ1bmN0aW9uIGFkZEZyYW1lICh0cmFuc2Zvcm0sIHgwLCB5MCwgeDEsIHkxKVxue1xuICAgIHZhciBtYXRyaXggPSB0cmFuc2Zvcm0ud29ybGRUcmFuc2Zvcm07XG4gICAgdmFyIGEgPSBtYXRyaXguYTtcbiAgICB2YXIgYiA9IG1hdHJpeC5iO1xuICAgIHZhciBjID0gbWF0cml4LmM7XG4gICAgdmFyIGQgPSBtYXRyaXguZDtcbiAgICB2YXIgdHggPSBtYXRyaXgudHg7XG4gICAgdmFyIHR5ID0gbWF0cml4LnR5O1xuXG4gICAgdmFyIG1pblggPSB0aGlzLm1pblg7XG4gICAgdmFyIG1pblkgPSB0aGlzLm1pblk7XG4gICAgdmFyIG1heFggPSB0aGlzLm1heFg7XG4gICAgdmFyIG1heFkgPSB0aGlzLm1heFk7XG5cbiAgICB2YXIgeCA9IChhICogeDApICsgKGMgKiB5MCkgKyB0eDtcbiAgICB2YXIgeSA9IChiICogeDApICsgKGQgKiB5MCkgKyB0eTtcblxuICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgIG1pblkgPSB5IDwgbWluWSA/IHkgOiBtaW5ZO1xuICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuXG4gICAgeCA9IChhICogeDEpICsgKGMgKiB5MCkgKyB0eDtcbiAgICB5ID0gKGIgKiB4MSkgKyAoZCAqIHkwKSArIHR5O1xuICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgIG1pblkgPSB5IDwgbWluWSA/IHkgOiBtaW5ZO1xuICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuXG4gICAgeCA9IChhICogeDApICsgKGMgKiB5MSkgKyB0eDtcbiAgICB5ID0gKGIgKiB4MCkgKyAoZCAqIHkxKSArIHR5O1xuICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgIG1pblkgPSB5IDwgbWluWSA/IHkgOiBtaW5ZO1xuICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuXG4gICAgeCA9IChhICogeDEpICsgKGMgKiB5MSkgKyB0eDtcbiAgICB5ID0gKGIgKiB4MSkgKyAoZCAqIHkxKSArIHR5O1xuICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgIG1pblkgPSB5IDwgbWluWSA/IHkgOiBtaW5ZO1xuICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuXG4gICAgdGhpcy5taW5YID0gbWluWDtcbiAgICB0aGlzLm1pblkgPSBtaW5ZO1xuICAgIHRoaXMubWF4WCA9IG1heFg7XG4gICAgdGhpcy5tYXhZID0gbWF4WTtcbn07XG5cbi8qKlxuICogQWRkcyBzY3JlZW4gdmVydGljZXMgZnJvbSBhcnJheVxuICpcbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSB2ZXJ0ZXhEYXRhIC0gY2FsY3VsYXRlZCB2ZXJ0aWNlc1xuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luT2Zmc2V0IC0gYmVnaW4gb2Zmc2V0XG4gKiBAcGFyYW0ge251bWJlcn0gZW5kT2Zmc2V0IC0gZW5kIG9mZnNldCwgZXhjbHVkZWRcbiAqL1xuQm91bmRzLnByb3RvdHlwZS5hZGRWZXJ0ZXhEYXRhID0gZnVuY3Rpb24gYWRkVmVydGV4RGF0YSAodmVydGV4RGF0YSwgYmVnaW5PZmZzZXQsIGVuZE9mZnNldClcbntcbiAgICB2YXIgbWluWCA9IHRoaXMubWluWDtcbiAgICB2YXIgbWluWSA9IHRoaXMubWluWTtcbiAgICB2YXIgbWF4WCA9IHRoaXMubWF4WDtcbiAgICB2YXIgbWF4WSA9IHRoaXMubWF4WTtcblxuICAgIGZvciAodmFyIGkgPSBiZWdpbk9mZnNldDsgaSA8IGVuZE9mZnNldDsgaSArPSAyKVxuICAgIHtcbiAgICAgICAgdmFyIHggPSB2ZXJ0ZXhEYXRhW2ldO1xuICAgICAgICB2YXIgeSA9IHZlcnRleERhdGFbaSArIDFdO1xuXG4gICAgICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgICAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICAgICAgbWF4WCA9IHggPiBtYXhYID8geCA6IG1heFg7XG4gICAgICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuICAgIH1cblxuICAgIHRoaXMubWluWCA9IG1pblg7XG4gICAgdGhpcy5taW5ZID0gbWluWTtcbiAgICB0aGlzLm1heFggPSBtYXhYO1xuICAgIHRoaXMubWF4WSA9IG1heFk7XG59O1xuXG4vKipcbiAqIEFkZCBhbiBhcnJheSBvZiBtZXNoIHZlcnRpY2VzXG4gKlxuICogQHBhcmFtIHtQSVhJLlRyYW5zZm9ybX0gdHJhbnNmb3JtIC0gbWVzaCB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSB2ZXJ0aWNlcyAtIG1lc2ggY29vcmRpbmF0ZXMgaW4gYXJyYXlcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpbk9mZnNldCAtIGJlZ2luIG9mZnNldFxuICogQHBhcmFtIHtudW1iZXJ9IGVuZE9mZnNldCAtIGVuZCBvZmZzZXQsIGV4Y2x1ZGVkXG4gKi9cbkJvdW5kcy5wcm90b3R5cGUuYWRkVmVydGljZXMgPSBmdW5jdGlvbiBhZGRWZXJ0aWNlcyAodHJhbnNmb3JtLCB2ZXJ0aWNlcywgYmVnaW5PZmZzZXQsIGVuZE9mZnNldClcbntcbiAgICB2YXIgbWF0cml4ID0gdHJhbnNmb3JtLndvcmxkVHJhbnNmb3JtO1xuICAgIHZhciBhID0gbWF0cml4LmE7XG4gICAgdmFyIGIgPSBtYXRyaXguYjtcbiAgICB2YXIgYyA9IG1hdHJpeC5jO1xuICAgIHZhciBkID0gbWF0cml4LmQ7XG4gICAgdmFyIHR4ID0gbWF0cml4LnR4O1xuICAgIHZhciB0eSA9IG1hdHJpeC50eTtcblxuICAgIHZhciBtaW5YID0gdGhpcy5taW5YO1xuICAgIHZhciBtaW5ZID0gdGhpcy5taW5ZO1xuICAgIHZhciBtYXhYID0gdGhpcy5tYXhYO1xuICAgIHZhciBtYXhZID0gdGhpcy5tYXhZO1xuXG4gICAgZm9yICh2YXIgaSA9IGJlZ2luT2Zmc2V0OyBpIDwgZW5kT2Zmc2V0OyBpICs9IDIpXG4gICAge1xuICAgICAgICB2YXIgcmF3WCA9IHZlcnRpY2VzW2ldO1xuICAgICAgICB2YXIgcmF3WSA9IHZlcnRpY2VzW2kgKyAxXTtcbiAgICAgICAgdmFyIHggPSAoYSAqIHJhd1gpICsgKGMgKiByYXdZKSArIHR4O1xuICAgICAgICB2YXIgeSA9IChkICogcmF3WSkgKyAoYiAqIHJhd1gpICsgdHk7XG5cbiAgICAgICAgbWluWCA9IHggPCBtaW5YID8geCA6IG1pblg7XG4gICAgICAgIG1pblkgPSB5IDwgbWluWSA/IHkgOiBtaW5ZO1xuICAgICAgICBtYXhYID0geCA+IG1heFggPyB4IDogbWF4WDtcbiAgICAgICAgbWF4WSA9IHkgPiBtYXhZID8geSA6IG1heFk7XG4gICAgfVxuXG4gICAgdGhpcy5taW5YID0gbWluWDtcbiAgICB0aGlzLm1pblkgPSBtaW5ZO1xuICAgIHRoaXMubWF4WCA9IG1heFg7XG4gICAgdGhpcy5tYXhZID0gbWF4WTtcbn07XG5cbi8qKlxuICogQWRkcyBvdGhlciBCb3VuZHNcbiAqXG4gKiBAcGFyYW0ge1BJWEkuQm91bmRzfSBib3VuZHMgLSBUT0RPXG4gKi9cbkJvdW5kcy5wcm90b3R5cGUuYWRkQm91bmRzID0gZnVuY3Rpb24gYWRkQm91bmRzIChib3VuZHMpXG57XG4gICAgdmFyIG1pblggPSB0aGlzLm1pblg7XG4gICAgdmFyIG1pblkgPSB0aGlzLm1pblk7XG4gICAgdmFyIG1heFggPSB0aGlzLm1heFg7XG4gICAgdmFyIG1heFkgPSB0aGlzLm1heFk7XG5cbiAgICB0aGlzLm1pblggPSBib3VuZHMubWluWCA8IG1pblggPyBib3VuZHMubWluWCA6IG1pblg7XG4gICAgdGhpcy5taW5ZID0gYm91bmRzLm1pblkgPCBtaW5ZID8gYm91bmRzLm1pblkgOiBtaW5ZO1xuICAgIHRoaXMubWF4WCA9IGJvdW5kcy5tYXhYID4gbWF4WCA/IGJvdW5kcy5tYXhYIDogbWF4WDtcbiAgICB0aGlzLm1heFkgPSBib3VuZHMubWF4WSA+IG1heFkgPyBib3VuZHMubWF4WSA6IG1heFk7XG59O1xuXG4vKipcbiAqIEFkZHMgb3RoZXIgQm91bmRzLCBtYXNrZWQgd2l0aCBCb3VuZHNcbiAqXG4gKiBAcGFyYW0ge1BJWEkuQm91bmRzfSBib3VuZHMgLSBUT0RPXG4gKiBAcGFyYW0ge1BJWEkuQm91bmRzfSBtYXNrIC0gVE9ET1xuICovXG5Cb3VuZHMucHJvdG90eXBlLmFkZEJvdW5kc01hc2sgPSBmdW5jdGlvbiBhZGRCb3VuZHNNYXNrIChib3VuZHMsIG1hc2spXG57XG4gICAgdmFyIF9taW5YID0gYm91bmRzLm1pblggPiBtYXNrLm1pblggPyBib3VuZHMubWluWCA6IG1hc2subWluWDtcbiAgICB2YXIgX21pblkgPSBib3VuZHMubWluWSA+IG1hc2subWluWSA/IGJvdW5kcy5taW5ZIDogbWFzay5taW5ZO1xuICAgIHZhciBfbWF4WCA9IGJvdW5kcy5tYXhYIDwgbWFzay5tYXhYID8gYm91bmRzLm1heFggOiBtYXNrLm1heFg7XG4gICAgdmFyIF9tYXhZID0gYm91bmRzLm1heFkgPCBtYXNrLm1heFkgPyBib3VuZHMubWF4WSA6IG1hc2subWF4WTtcblxuICAgIGlmIChfbWluWCA8PSBfbWF4WCAmJiBfbWluWSA8PSBfbWF4WSlcbiAgICB7XG4gICAgICAgIHZhciBtaW5YID0gdGhpcy5taW5YO1xuICAgICAgICB2YXIgbWluWSA9IHRoaXMubWluWTtcbiAgICAgICAgdmFyIG1heFggPSB0aGlzLm1heFg7XG4gICAgICAgIHZhciBtYXhZID0gdGhpcy5tYXhZO1xuXG4gICAgICAgIHRoaXMubWluWCA9IF9taW5YIDwgbWluWCA/IF9taW5YIDogbWluWDtcbiAgICAgICAgdGhpcy5taW5ZID0gX21pblkgPCBtaW5ZID8gX21pblkgOiBtaW5ZO1xuICAgICAgICB0aGlzLm1heFggPSBfbWF4WCA+IG1heFggPyBfbWF4WCA6IG1heFg7XG4gICAgICAgIHRoaXMubWF4WSA9IF9tYXhZID4gbWF4WSA/IF9tYXhZIDogbWF4WTtcbiAgICB9XG59O1xuXG4vKipcbiAqIEFkZHMgb3RoZXIgQm91bmRzLCBtYXNrZWQgd2l0aCBSZWN0YW5nbGVcbiAqXG4gKiBAcGFyYW0ge1BJWEkuQm91bmRzfSBib3VuZHMgLSBUT0RPXG4gKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBhcmVhIC0gVE9ET1xuICovXG5Cb3VuZHMucHJvdG90eXBlLmFkZEJvdW5kc0FyZWEgPSBmdW5jdGlvbiBhZGRCb3VuZHNBcmVhIChib3VuZHMsIGFyZWEpXG57XG4gICAgdmFyIF9taW5YID0gYm91bmRzLm1pblggPiBhcmVhLnggPyBib3VuZHMubWluWCA6IGFyZWEueDtcbiAgICB2YXIgX21pblkgPSBib3VuZHMubWluWSA+IGFyZWEueSA/IGJvdW5kcy5taW5ZIDogYXJlYS55O1xuICAgIHZhciBfbWF4WCA9IGJvdW5kcy5tYXhYIDwgYXJlYS54ICsgYXJlYS53aWR0aCA/IGJvdW5kcy5tYXhYIDogKGFyZWEueCArIGFyZWEud2lkdGgpO1xuICAgIHZhciBfbWF4WSA9IGJvdW5kcy5tYXhZIDwgYXJlYS55ICsgYXJlYS5oZWlnaHQgPyBib3VuZHMubWF4WSA6IChhcmVhLnkgKyBhcmVhLmhlaWdodCk7XG5cbiAgICBpZiAoX21pblggPD0gX21heFggJiYgX21pblkgPD0gX21heFkpXG4gICAge1xuICAgICAgICB2YXIgbWluWCA9IHRoaXMubWluWDtcbiAgICAgICAgdmFyIG1pblkgPSB0aGlzLm1pblk7XG4gICAgICAgIHZhciBtYXhYID0gdGhpcy5tYXhYO1xuICAgICAgICB2YXIgbWF4WSA9IHRoaXMubWF4WTtcblxuICAgICAgICB0aGlzLm1pblggPSBfbWluWCA8IG1pblggPyBfbWluWCA6IG1pblg7XG4gICAgICAgIHRoaXMubWluWSA9IF9taW5ZIDwgbWluWSA/IF9taW5ZIDogbWluWTtcbiAgICAgICAgdGhpcy5tYXhYID0gX21heFggPiBtYXhYID8gX21heFggOiBtYXhYO1xuICAgICAgICB0aGlzLm1heFkgPSBfbWF4WSA+IG1heFkgPyBfbWF4WSA6IG1heFk7XG4gICAgfVxufTtcblxuLy8gX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50ID0gbmV3IERpc3BsYXlPYmplY3QoKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgYWxsIG9iamVjdHMgdGhhdCBhcmUgcmVuZGVyZWQgb24gdGhlIHNjcmVlbi5cbiAqXG4gKiBUaGlzIGlzIGFuIGFic3RyYWN0IGNsYXNzIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgb24gaXRzIG93bjsgcmF0aGVyIGl0IHNob3VsZCBiZSBleHRlbmRlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkudXRpbHMuRXZlbnRFbWl0dGVyXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgRGlzcGxheU9iamVjdCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEV2ZW50RW1pdHRlcikge1xuICAgIGZ1bmN0aW9uIERpc3BsYXlPYmplY3QoKVxuICAgIHtcbiAgICAgICAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICAgICAgdGhpcy50ZW1wRGlzcGxheU9iamVjdFBhcmVudCA9IG51bGw7XG5cbiAgICAgICAgLy8gVE9ETzogbmVlZCB0byBjcmVhdGUgVHJhbnNmb3JtIGZyb20gZmFjdG9yeVxuICAgICAgICAvKipcbiAgICAgICAgICogV29ybGQgdHJhbnNmb3JtIGFuZCBsb2NhbCB0cmFuc2Zvcm0gb2YgdGhpcyBvYmplY3QuXG4gICAgICAgICAqIFRoaXMgd2lsbCBiZWNvbWUgcmVhZC1vbmx5IGxhdGVyLCBwbGVhc2UgZG8gbm90IGFzc2lnbiBhbnl0aGluZyB0aGVyZSB1bmxlc3MgeW91IGtub3cgd2hhdCBhcmUgeW91IGRvaW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlRyYW5zZm9ybX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybSgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgb3BhY2l0eSBvZiB0aGUgb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFscGhhID0gMTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHZpc2liaWxpdHkgb2YgdGhlIG9iamVjdC4gSWYgZmFsc2UgdGhlIG9iamVjdCB3aWxsIG5vdCBiZSBkcmF3biwgYW5kXG4gICAgICAgICAqIHRoZSB1cGRhdGVUcmFuc2Zvcm0gZnVuY3Rpb24gd2lsbCBub3QgYmUgY2FsbGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBPbmx5IGFmZmVjdHMgcmVjdXJzaXZlIGNhbGxzIGZyb20gcGFyZW50LiBZb3UgY2FuIGFzayBmb3IgYm91bmRzIG9yIGNhbGwgdXBkYXRlVHJhbnNmb3JtIG1hbnVhbGx5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FuIHRoaXMgb2JqZWN0IGJlIHJlbmRlcmVkLCBpZiBmYWxzZSB0aGUgb2JqZWN0IHdpbGwgbm90IGJlIGRyYXduIGJ1dCB0aGUgdXBkYXRlVHJhbnNmb3JtXG4gICAgICAgICAqIG1ldGhvZHMgd2lsbCBzdGlsbCBiZSBjYWxsZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIE9ubHkgYWZmZWN0cyByZWN1cnNpdmUgY2FsbHMgZnJvbSBwYXJlbnQuIFlvdSBjYW4gYXNrIGZvciBib3VuZHMgbWFudWFsbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbmRlcmFibGUgPSB0cnVlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGlzcGxheSBvYmplY3QgY29udGFpbmVyIHRoYXQgY29udGFpbnMgdGhpcyBkaXNwbGF5IG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5Db250YWluZXJ9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbXVsdGlwbGllZCBhbHBoYSBvZiB0aGUgZGlzcGxheU9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMud29ybGRBbHBoYSA9IDE7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoaWNoIGluZGV4IGluIHRoZSBjaGlsZHJlbiBhcnJheSB0aGUgZGlzcGxheSBjb21wb25lbnQgd2FzIGJlZm9yZSB0aGUgcHJldmlvdXMgekluZGV4IHNvcnQuXG4gICAgICAgICAqIFVzZWQgYnkgY29udGFpbmVycyB0byBoZWxwIHNvcnQgb2JqZWN0cyB3aXRoIHRoZSBzYW1lIHpJbmRleCwgYnkgdXNpbmcgcHJldmlvdXMgYXJyYXkgaW5kZXggYXMgdGhlIGRlY2lkZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbGFzdFNvcnRlZEluZGV4ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHpJbmRleCBvZiB0aGUgZGlzcGxheU9iamVjdC5cbiAgICAgICAgICogQSBoaWdoZXIgdmFsdWUgd2lsbCBtZWFuIGl0IHdpbGwgYmUgcmVuZGVyZWQgb24gdG9wIG9mIG90aGVyIGRpc3BsYXlPYmplY3RzIHdpdGhpbiB0aGUgc2FtZSBjb250YWluZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fekluZGV4ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGFyZWEgdGhlIGZpbHRlciBpcyBhcHBsaWVkIHRvLiBUaGlzIGlzIHVzZWQgYXMgbW9yZSBvZiBhbiBvcHRpbWl6YXRpb25cbiAgICAgICAgICogcmF0aGVyIHRoYW4gZmlndXJpbmcgb3V0IHRoZSBkaW1lbnNpb25zIG9mIHRoZSBkaXNwbGF5T2JqZWN0IGVhY2ggZnJhbWUgeW91IGNhbiBzZXQgdGhpcyByZWN0YW5nbGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEFsc28gd29ya3MgYXMgYW4gaW50ZXJhY3Rpb24gbWFzay5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7P1BJWEkuUmVjdGFuZ2xlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWx0ZXJBcmVhID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgZmlsdGVycyBmb3IgdGhlIGRpc3BsYXlPYmplY3QuXG4gICAgICAgICAqICogSU1QT1JUQU5UOiBUaGlzIGlzIGEgV2ViR0wgb25seSBmZWF0dXJlIGFuZCB3aWxsIGJlIGlnbm9yZWQgYnkgdGhlIGNhbnZhcyByZW5kZXJlci5cbiAgICAgICAgICogVG8gcmVtb3ZlIGZpbHRlcnMgc2ltcGx5IHNldCB0aGlzIHByb3BlcnR5IHRvIGAnbnVsbCdgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHs/UElYSS5GaWx0ZXJbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsdGVycyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2VuYWJsZWRGaWx0ZXJzID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGJvdW5kcyBvYmplY3QsIHRoaXMgaXMgdXNlZCB0byBjYWxjdWxhdGUgYW5kIHN0b3JlIHRoZSBib3VuZHMgb2YgdGhlIGRpc3BsYXlPYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuQm91bmRzfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9ib3VuZHMgPSBuZXcgQm91bmRzKCk7XG4gICAgICAgIHRoaXMuX2JvdW5kc0lEID0gMDtcbiAgICAgICAgdGhpcy5fbGFzdEJvdW5kc0lEID0gLTE7XG4gICAgICAgIHRoaXMuX2JvdW5kc1JlY3QgPSBudWxsO1xuICAgICAgICB0aGlzLl9sb2NhbEJvdW5kc1JlY3QgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgb3JpZ2luYWwsIGNhY2hlZCBtYXNrIG9mIHRoZSBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuR3JhcGhpY3N8UElYSS5TcHJpdGV8bnVsbH1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbWFzayA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gdGhpcyBEaXNwbGF5T2JqZWN0IGlzIGFkZGVkIHRvIGEgQ29udGFpbmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgUElYSS5EaXNwbGF5T2JqZWN0I2FkZGVkXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5Db250YWluZXJ9IGNvbnRhaW5lciAtIFRoZSBjb250YWluZXIgYWRkZWQgdG8uXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIHRoaXMgRGlzcGxheU9iamVjdCBpcyByZW1vdmVkIGZyb20gYSBDb250YWluZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBQSVhJLkRpc3BsYXlPYmplY3QjcmVtb3ZlZFxuICAgICAgICAgKiBAcGFyYW0ge1BJWEkuQ29udGFpbmVyfSBjb250YWluZXIgLSBUaGUgY29udGFpbmVyIHJlbW92ZWQgZnJvbS5cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZSBvYmplY3QgaGFzIGJlZW4gZGVzdHJveWVkIHZpYSBkZXN0cm95KCkuIElmIHRydWUsIGl0IHNob3VsZCBub3QgYmUgdXNlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVzZWQgdG8gZmFzdCBjaGVjayBpZiBhIHNwcml0ZSBpcy4uIGEgc3ByaXRlIVxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc1Nwcml0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICggRXZlbnRFbWl0dGVyICkgRGlzcGxheU9iamVjdC5fX3Byb3RvX18gPSBFdmVudEVtaXR0ZXI7XG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdmVudEVtaXR0ZXIgJiYgRXZlbnRFbWl0dGVyLnByb3RvdHlwZSApO1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGlzcGxheU9iamVjdDtcblxuICAgIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IF90ZW1wRGlzcGxheU9iamVjdFBhcmVudDogeyBjb25maWd1cmFibGU6IHRydWUgfSx4OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHk6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sd29ybGRUcmFuc2Zvcm06IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbG9jYWxUcmFuc2Zvcm06IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scG9zaXRpb246IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sc2NhbGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scGl2b3Q6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sc2tldzogeyBjb25maWd1cmFibGU6IHRydWUgfSxyb3RhdGlvbjogeyBjb25maWd1cmFibGU6IHRydWUgfSxhbmdsZTogeyBjb25maWd1cmFibGU6IHRydWUgfSx6SW5kZXg6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sd29ybGRWaXNpYmxlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG1hc2s6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtQSVhJLkRpc3BsYXlPYmplY3R9XG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5taXhpbiA9IGZ1bmN0aW9uIG1peGluIChzb3VyY2UpXG4gICAge1xuICAgICAgICAvLyBpbiBFUzgvRVMyMDE3LCB0aGlzIHdvdWxkIGJlIHJlYWxseSBlYXN5OlxuICAgICAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuXG4gICAgICAgIC8vIGdldCBhbGwgdGhlIGVudW1lcmFibGUgcHJvcGVydHkga2V5c1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHByb3BlcnRpZXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0ga2V5c1tpXTtcblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBwcm9wZXJ0eSB1c2luZyB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciAtIHRoaXMgd29ya3MgZm9yIGFjY2Vzc29ycyBhbmQgbm9ybWFsIHZhbHVlIHByb3BlcnRpZXNcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWUsXG4gICAgICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHByb3BlcnR5TmFtZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMudGVtcERpc3BsYXlPYmplY3RQYXJlbnQgPT09IG51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudGVtcERpc3BsYXlPYmplY3RQYXJlbnQgPSBuZXcgRGlzcGxheU9iamVjdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcERpc3BsYXlPYmplY3RQYXJlbnQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIG9iamVjdCB0cmFuc2Zvcm0gZm9yIHJlbmRlcmluZy5cbiAgICAgKlxuICAgICAqIFRPRE8gLSBPcHRpbWl6YXRpb24gcGFzcyFcbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS51cGRhdGVUcmFuc2Zvcm0gPSBmdW5jdGlvbiB1cGRhdGVUcmFuc2Zvcm0gKClcbiAgICB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnVwZGF0ZVRyYW5zZm9ybSh0aGlzLnBhcmVudC50cmFuc2Zvcm0pO1xuICAgICAgICAvLyBtdWx0aXBseSB0aGUgYWxwaGFzLi5cbiAgICAgICAgdGhpcy53b3JsZEFscGhhID0gdGhpcy5hbHBoYSAqIHRoaXMucGFyZW50LndvcmxkQWxwaGE7XG5cbiAgICAgICAgdGhpcy5fYm91bmRzLnVwZGF0ZUlEKys7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IHVwZGF0ZXMgdHJhbnNmb3JtIG9mIGFsbCBvYmplY3RzIGZyb20gdGhlIHJvb3QgdG8gdGhpcyBvbmVcbiAgICAgKiBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgdG9Mb2NhbCgpXG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUuX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfcmVjdXJzaXZlUG9zdFVwZGF0ZVRyYW5zZm9ybSAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5fcmVjdXJzaXZlUG9zdFVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0udXBkYXRlVHJhbnNmb3JtKHRoaXMucGFyZW50LnRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS51cGRhdGVUcmFuc2Zvcm0odGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQudHJhbnNmb3JtKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGJvdW5kcyBvZiB0aGUgZGlzcGxheU9iamVjdCBhcyBhIHJlY3RhbmdsZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwVXBkYXRlXSAtIFNldHRpbmcgdG8gYHRydWVgIHdpbGwgc3RvcCB0aGUgdHJhbnNmb3JtcyBvZiB0aGUgc2NlbmUgZ3JhcGggZnJvbVxuICAgICAqICBiZWluZyB1cGRhdGVkLiBUaGlzIG1lYW5zIHRoZSBjYWxjdWxhdGlvbiByZXR1cm5lZCBNQVkgYmUgb3V0IG9mIGRhdGUgQlVUIHdpbGwgZ2l2ZSB5b3UgYVxuICAgICAqICBuaWNlIHBlcmZvcm1hbmNlIGJvb3N0LlxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IFtyZWN0XSAtIE9wdGlvbmFsIHJlY3RhbmdsZSB0byBzdG9yZSB0aGUgcmVzdWx0IG9mIHRoZSBib3VuZHMgY2FsY3VsYXRpb24uXG4gICAgICogQHJldHVybiB7UElYSS5SZWN0YW5nbGV9IFRoZSByZWN0YW5ndWxhciBib3VuZGluZyBhcmVhLlxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLmdldEJvdW5kcyA9IGZ1bmN0aW9uIGdldEJvdW5kcyAoc2tpcFVwZGF0ZSwgcmVjdClcbiAgICB7XG4gICAgICAgIGlmICghc2tpcFVwZGF0ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IHRoaXMuX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50O1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvdW5kc0lEICE9PSB0aGlzLl9sYXN0Qm91bmRzSUQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlQm91bmRzKCk7XG4gICAgICAgICAgICB0aGlzLl9sYXN0Qm91bmRzSUQgPSB0aGlzLl9ib3VuZHNJRDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVjdClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9ib3VuZHNSZWN0KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JvdW5kc1JlY3QgPSBuZXcgUmVjdGFuZ2xlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlY3QgPSB0aGlzLl9ib3VuZHNSZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2JvdW5kcy5nZXRSZWN0YW5nbGUocmVjdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgbG9jYWwgYm91bmRzIG9mIHRoZSBkaXNwbGF5T2JqZWN0IGFzIGEgcmVjdGFuZ2xlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IFtyZWN0XSAtIE9wdGlvbmFsIHJlY3RhbmdsZSB0byBzdG9yZSB0aGUgcmVzdWx0IG9mIHRoZSBib3VuZHMgY2FsY3VsYXRpb24uXG4gICAgICogQHJldHVybiB7UElYSS5SZWN0YW5nbGV9IFRoZSByZWN0YW5ndWxhciBib3VuZGluZyBhcmVhLlxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLmdldExvY2FsQm91bmRzID0gZnVuY3Rpb24gZ2V0TG9jYWxCb3VuZHMgKHJlY3QpXG4gICAge1xuICAgICAgICB2YXIgdHJhbnNmb3JtUmVmID0gdGhpcy50cmFuc2Zvcm07XG4gICAgICAgIHZhciBwYXJlbnRSZWYgPSB0aGlzLnBhcmVudDtcblxuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gdGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQudHJhbnNmb3JtO1xuXG4gICAgICAgIGlmICghcmVjdClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9sb2NhbEJvdW5kc1JlY3QpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxCb3VuZHNSZWN0ID0gbmV3IFJlY3RhbmdsZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZWN0ID0gdGhpcy5fbG9jYWxCb3VuZHNSZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKGZhbHNlLCByZWN0KTtcblxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudFJlZjtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1SZWY7XG5cbiAgICAgICAgcmV0dXJuIGJvdW5kcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZ2xvYmFsIHBvc2l0aW9uIG9mIHRoZSBkaXNwbGF5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5JUG9pbnR9IHBvc2l0aW9uIC0gVGhlIHdvcmxkIG9yaWdpbiB0byBjYWxjdWxhdGUgZnJvbS5cbiAgICAgKiBAcGFyYW0ge1BJWEkuSVBvaW50fSBbcG9pbnRdIC0gQSBQb2ludCBvYmplY3QgaW4gd2hpY2ggdG8gc3RvcmUgdGhlIHZhbHVlLCBvcHRpb25hbFxuICAgICAqICAob3RoZXJ3aXNlIHdpbGwgY3JlYXRlIGEgbmV3IFBvaW50KS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwVXBkYXRlPWZhbHNlXSAtIFNob3VsZCB3ZSBza2lwIHRoZSB1cGRhdGUgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm4ge1BJWEkuSVBvaW50fSBBIHBvaW50IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHBvc2l0aW9uIG9mIHRoaXMgb2JqZWN0LlxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLnRvR2xvYmFsID0gZnVuY3Rpb24gdG9HbG9iYWwgKHBvc2l0aW9uLCBwb2ludCwgc2tpcFVwZGF0ZSlcbiAgICB7XG4gICAgICAgIGlmICggc2tpcFVwZGF0ZSA9PT0gdm9pZCAwICkgc2tpcFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICghc2tpcFVwZGF0ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fcmVjdXJzaXZlUG9zdFVwZGF0ZVRyYW5zZm9ybSgpO1xuXG4gICAgICAgICAgICAvLyB0aGlzIHBhcmVudCBjaGVjayBpcyBmb3IganVzdCBpbiBjYXNlIHRoZSBpdGVtIGlzIGEgcm9vdCBvYmplY3QuXG4gICAgICAgICAgICAvLyBJZiBpdCBpcyB3ZSBuZWVkIHRvIGdpdmUgaXQgYSB0ZW1wb3JhcnkgcGFyZW50IHNvIHRoYXQgZGlzcGxheU9iamVjdFVwZGF0ZVRyYW5zZm9ybSB3b3JrcyBjb3JyZWN0bHlcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbWFpbmx5IHRvIGF2b2lkIGEgcGFyZW50IGNoZWNrIGluIHRoZSBtYWluIGxvb3AuIEV2ZXJ5IGxpdHRsZSBoZWxwcyBmb3IgcGVyZm9ybWFuY2UgOilcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudDtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlPYmplY3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkb24ndCBuZWVkIHRvIHVwZGF0ZSB0aGUgbG90XG4gICAgICAgIHJldHVybiB0aGlzLndvcmxkVHJhbnNmb3JtLmFwcGx5KHBvc2l0aW9uLCBwb2ludCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGxvY2FsIHBvc2l0aW9uIG9mIHRoZSBkaXNwbGF5IG9iamVjdCByZWxhdGl2ZSB0byBhbm90aGVyIHBvaW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLklQb2ludH0gcG9zaXRpb24gLSBUaGUgd29ybGQgb3JpZ2luIHRvIGNhbGN1bGF0ZSBmcm9tLlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBbZnJvbV0gLSBUaGUgRGlzcGxheU9iamVjdCB0byBjYWxjdWxhdGUgdGhlIGdsb2JhbCBwb3NpdGlvbiBmcm9tLlxuICAgICAqIEBwYXJhbSB7UElYSS5JUG9pbnR9IFtwb2ludF0gLSBBIFBvaW50IG9iamVjdCBpbiB3aGljaCB0byBzdG9yZSB0aGUgdmFsdWUsIG9wdGlvbmFsXG4gICAgICogIChvdGhlcndpc2Ugd2lsbCBjcmVhdGUgYSBuZXcgUG9pbnQpLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBVcGRhdGU9ZmFsc2VdIC0gU2hvdWxkIHdlIHNraXAgdGhlIHVwZGF0ZSB0cmFuc2Zvcm1cbiAgICAgKiBAcmV0dXJuIHtQSVhJLklQb2ludH0gQSBwb2ludCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBwb3NpdGlvbiBvZiB0aGlzIG9iamVjdFxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLnRvTG9jYWwgPSBmdW5jdGlvbiB0b0xvY2FsIChwb3NpdGlvbiwgZnJvbSwgcG9pbnQsIHNraXBVcGRhdGUpXG4gICAge1xuICAgICAgICBpZiAoZnJvbSlcbiAgICAgICAge1xuICAgICAgICAgICAgcG9zaXRpb24gPSBmcm9tLnRvR2xvYmFsKHBvc2l0aW9uLCBwb2ludCwgc2tpcFVwZGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBVcGRhdGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0oKTtcblxuICAgICAgICAgICAgLy8gdGhpcyBwYXJlbnQgY2hlY2sgaXMgZm9yIGp1c3QgaW4gY2FzZSB0aGUgaXRlbSBpcyBhIHJvb3Qgb2JqZWN0LlxuICAgICAgICAgICAgLy8gSWYgaXQgaXMgd2UgbmVlZCB0byBnaXZlIGl0IGEgdGVtcG9yYXJ5IHBhcmVudCBzbyB0aGF0IGRpc3BsYXlPYmplY3RVcGRhdGVUcmFuc2Zvcm0gd29ya3MgY29ycmVjdGx5XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG1haW5seSB0byBhdm9pZCBhIHBhcmVudCBjaGVjayBpbiB0aGUgbWFpbiBsb29wLiBFdmVyeSBsaXR0bGUgaGVscHMgZm9yIHBlcmZvcm1hbmNlIDopXG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyZW50KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheU9iamVjdFVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2ltcGx5IGFwcGx5IHRoZSBtYXRyaXguLlxuICAgICAgICByZXR1cm4gdGhpcy53b3JsZFRyYW5zZm9ybS5hcHBseUludmVyc2UocG9zaXRpb24sIHBvaW50KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgb2JqZWN0IHVzaW5nIHRoZSBXZWJHTCByZW5kZXJlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChyZW5kZXJlcikgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHtcbiAgICAgICAgLy8gT1ZFUldSSVRFO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHBhcmVudCBDb250YWluZXIgb2YgdGhpcyBEaXNwbGF5T2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkNvbnRhaW5lcn0gY29udGFpbmVyIC0gVGhlIENvbnRhaW5lciB0byBhZGQgdGhpcyBEaXNwbGF5T2JqZWN0IHRvLlxuICAgICAqIEByZXR1cm4ge1BJWEkuQ29udGFpbmVyfSBUaGUgQ29udGFpbmVyIHRoYXQgdGhpcyBEaXNwbGF5T2JqZWN0IHdhcyBhZGRlZCB0by5cbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5zZXRQYXJlbnQgPSBmdW5jdGlvbiBzZXRQYXJlbnQgKGNvbnRhaW5lcilcbiAgICB7XG4gICAgICAgIGlmICghY29udGFpbmVyIHx8ICFjb250YWluZXIuYWRkQ2hpbGQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2V0UGFyZW50OiBBcmd1bWVudCBtdXN0IGJlIGEgQ29udGFpbmVyJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250YWluZXIuYWRkQ2hpbGQodGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgZnVuY3Rpb24gdG8gc2V0IHRoZSBwb3NpdGlvbiwgc2NhbGUsIHNrZXcgYW5kIHBpdm90IGF0IG9uY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBUaGUgWCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIFRoZSBZIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzY2FsZVg9MV0gLSBUaGUgWCBzY2FsZSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2NhbGVZPTFdIC0gVGhlIFkgc2NhbGUgdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JvdGF0aW9uPTBdIC0gVGhlIHJvdGF0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2V3WD0wXSAtIFRoZSBYIHNrZXcgdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NrZXdZPTBdIC0gVGhlIFkgc2tldyB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGl2b3RYPTBdIC0gVGhlIFggcGl2b3QgdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bpdm90WT0wXSAtIFRoZSBZIHBpdm90IHZhbHVlXG4gICAgICogQHJldHVybiB7UElYSS5EaXNwbGF5T2JqZWN0fSBUaGUgRGlzcGxheU9iamVjdCBpbnN0YW5jZVxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLnNldFRyYW5zZm9ybSA9IGZ1bmN0aW9uIHNldFRyYW5zZm9ybSAoeCwgeSwgc2NhbGVYLCBzY2FsZVksIHJvdGF0aW9uLCBza2V3WCwgc2tld1ksIHBpdm90WCwgcGl2b3RZKVxuICAgIHtcbiAgICAgICAgaWYgKCB4ID09PSB2b2lkIDAgKSB4ID0gMDtcbiAgICAgICAgaWYgKCB5ID09PSB2b2lkIDAgKSB5ID0gMDtcbiAgICAgICAgaWYgKCBzY2FsZVggPT09IHZvaWQgMCApIHNjYWxlWCA9IDE7XG4gICAgICAgIGlmICggc2NhbGVZID09PSB2b2lkIDAgKSBzY2FsZVkgPSAxO1xuICAgICAgICBpZiAoIHJvdGF0aW9uID09PSB2b2lkIDAgKSByb3RhdGlvbiA9IDA7XG4gICAgICAgIGlmICggc2tld1ggPT09IHZvaWQgMCApIHNrZXdYID0gMDtcbiAgICAgICAgaWYgKCBza2V3WSA9PT0gdm9pZCAwICkgc2tld1kgPSAwO1xuICAgICAgICBpZiAoIHBpdm90WCA9PT0gdm9pZCAwICkgcGl2b3RYID0gMDtcbiAgICAgICAgaWYgKCBwaXZvdFkgPT09IHZvaWQgMCApIHBpdm90WSA9IDA7XG5cbiAgICAgICAgdGhpcy5wb3NpdGlvbi54ID0geDtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0geTtcbiAgICAgICAgdGhpcy5zY2FsZS54ID0gIXNjYWxlWCA/IDEgOiBzY2FsZVg7XG4gICAgICAgIHRoaXMuc2NhbGUueSA9ICFzY2FsZVkgPyAxIDogc2NhbGVZO1xuICAgICAgICB0aGlzLnJvdGF0aW9uID0gcm90YXRpb247XG4gICAgICAgIHRoaXMuc2tldy54ID0gc2tld1g7XG4gICAgICAgIHRoaXMuc2tldy55ID0gc2tld1k7XG4gICAgICAgIHRoaXMucGl2b3QueCA9IHBpdm90WDtcbiAgICAgICAgdGhpcy5waXZvdC55ID0gcGl2b3RZO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBCYXNlIGRlc3Ryb3kgbWV0aG9kIGZvciBnZW5lcmljIGRpc3BsYXkgb2JqZWN0cy4gVGhpcyB3aWxsIGF1dG9tYXRpY2FsbHlcbiAgICAgKiByZW1vdmUgdGhlIGRpc3BsYXkgb2JqZWN0IGZyb20gaXRzIHBhcmVudCBDb250YWluZXIgYXMgd2VsbCBhcyByZW1vdmVcbiAgICAgKiBhbGwgY3VycmVudCBldmVudCBsaXN0ZW5lcnMgYW5kIGludGVybmFsIHJlZmVyZW5jZXMuIERvIG5vdCB1c2UgYSBEaXNwbGF5T2JqZWN0XG4gICAgICogYWZ0ZXIgY2FsbGluZyBgZGVzdHJveSgpYC5cbiAgICAgKlxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG4gICAge1xuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gbnVsbDtcblxuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fYm91bmRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY3VycmVudEJvdW5kcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX21hc2sgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZmlsdGVyQXJlYSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5pbnRlcmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmludGVyYWN0aXZlQ2hpbGRyZW4gPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9kZXN0cm95ZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIGRpc3BsYXlPYmplY3Qgb24gdGhlIHggYXhpcyByZWxhdGl2ZSB0byB0aGUgbG9jYWwgY29vcmRpbmF0ZXMgb2YgdGhlIHBhcmVudC5cbiAgICAgKiBBbiBhbGlhcyB0byBwb3NpdGlvbi54XG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnguZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLng7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy54LnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi54ID0gdmFsdWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgZGlzcGxheU9iamVjdCBvbiB0aGUgeSBheGlzIHJlbGF0aXZlIHRvIHRoZSBsb2NhbCBjb29yZGluYXRlcyBvZiB0aGUgcGFyZW50LlxuICAgICAqIEFuIGFsaWFzIHRvIHBvc2l0aW9uLnlcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMueS5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueTtcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnkuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnkgPSB2YWx1ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCB0cmFuc2Zvcm0gb2YgdGhlIG9iamVjdCBiYXNlZCBvbiB3b3JsZCAocGFyZW50KSBmYWN0b3JzLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5NYXRyaXh9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLndvcmxkVHJhbnNmb3JtLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ud29ybGRUcmFuc2Zvcm07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgdHJhbnNmb3JtIG9mIHRoZSBvYmplY3QgYmFzZWQgb24gbG9jYWwgZmFjdG9yczogcG9zaXRpb24sIHNjYWxlLCBvdGhlciBzdHVmZi5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuTWF0cml4fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5sb2NhbFRyYW5zZm9ybS5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLmxvY2FsVHJhbnNmb3JtO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29vcmRpbmF0ZSBvZiB0aGUgb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBsb2NhbCBjb29yZGluYXRlcyBvZiB0aGUgcGFyZW50LlxuICAgICAqIEFzc2lnbm1lbnQgYnkgdmFsdWUgc2luY2UgcGl4aS12NC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuSVBvaW50fVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5wb3NpdGlvbi5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMucG9zaXRpb24uc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmNvcHlGcm9tKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjYWxlIGZhY3RvciBvZiB0aGUgb2JqZWN0LlxuICAgICAqIEFzc2lnbm1lbnQgYnkgdmFsdWUgc2luY2UgcGl4aS12NC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuSVBvaW50fVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5zY2FsZS5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnNjYWxlO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuc2NhbGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnNjYWxlLmNvcHlGcm9tKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBpdm90IHBvaW50IG9mIHRoZSBkaXNwbGF5T2JqZWN0IHRoYXQgaXQgcm90YXRlcyBhcm91bmQuXG4gICAgICogQXNzaWdubWVudCBieSB2YWx1ZSBzaW5jZSBwaXhpLXY0LlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5JUG9pbnR9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnBpdm90LmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ucGl2b3Q7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5waXZvdC5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucGl2b3QuY29weUZyb20odmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2tldyBmYWN0b3IgZm9yIHRoZSBvYmplY3QgaW4gcmFkaWFucy5cbiAgICAgKiBBc3NpZ25tZW50IGJ5IHZhbHVlIHNpbmNlIHBpeGktdjQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLk9ic2VydmFibGVQb2ludH1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuc2tldy5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnNrZXc7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5za2V3LnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS5za2V3LmNvcHlGcm9tKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJvdGF0aW9uIG9mIHRoZSBvYmplY3QgaW4gcmFkaWFucy5cbiAgICAgKiAncm90YXRpb24nIGFuZCAnYW5nbGUnIGhhdmUgdGhlIHNhbWUgZWZmZWN0IG9uIGEgZGlzcGxheSBvYmplY3Q7IHJvdGF0aW9uIGlzIGluIHJhZGlhbnMsIGFuZ2xlIGlzIGluIGRlZ3JlZXMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnJvdGF0aW9uLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ucm90YXRpb247XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5yb3RhdGlvbi5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24gPSB2YWx1ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFuZ2xlIG9mIHRoZSBvYmplY3QgaW4gZGVncmVlcy5cbiAgICAgKiAncm90YXRpb24nIGFuZCAnYW5nbGUnIGhhdmUgdGhlIHNhbWUgZWZmZWN0IG9uIGEgZGlzcGxheSBvYmplY3Q7IHJvdGF0aW9uIGlzIGluIHJhZGlhbnMsIGFuZ2xlIGlzIGluIGRlZ3JlZXMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmFuZ2xlLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ucm90YXRpb24gKiBSQURfVE9fREVHO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuYW5nbGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uID0gdmFsdWUgKiBERUdfVE9fUkFEO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgekluZGV4IG9mIHRoZSBkaXNwbGF5T2JqZWN0LlxuICAgICAqIElmIGEgY29udGFpbmVyIGhhcyB0aGUgc29ydGFibGVDaGlsZHJlbiBwcm9wZXJ0eSBzZXQgdG8gdHJ1ZSwgY2hpbGRyZW4gd2lsbCBiZSBhdXRvbWF0aWNhbGx5XG4gICAgICogc29ydGVkIGJ5IHpJbmRleCB2YWx1ZTsgYSBoaWdoZXIgdmFsdWUgd2lsbCBtZWFuIGl0IHdpbGwgYmUgbW92ZWQgdG93YXJkcyB0aGUgZW5kIG9mIHRoZSBhcnJheSxcbiAgICAgKiBhbmQgdGh1cyByZW5kZXJlZCBvbiB0b3Agb2Ygb3RoZXIgZGlzcGxheU9iamVjdHMgd2l0aGluIHRoZSBzYW1lIGNvbnRhaW5lci5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuekluZGV4LmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fekluZGV4O1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuekluZGV4LnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICB0aGlzLl96SW5kZXggPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5zb3J0RGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgb2JqZWN0IGlzIGdsb2JhbGx5IHZpc2libGUuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy53b3JsZFZpc2libGUuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHZhciBpdGVtID0gdGhpcztcblxuICAgICAgICBkb1xuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIWl0ZW0udmlzaWJsZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGl0ZW0gPSBpdGVtLnBhcmVudDtcbiAgICAgICAgfSB3aGlsZSAoaXRlbSk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBtYXNrIGZvciB0aGUgZGlzcGxheU9iamVjdC4gQSBtYXNrIGlzIGFuIG9iamVjdCB0aGF0IGxpbWl0cyB0aGUgdmlzaWJpbGl0eSBvZiBhblxuICAgICAqIG9iamVjdCB0byB0aGUgc2hhcGUgb2YgdGhlIG1hc2sgYXBwbGllZCB0byBpdC4gSW4gUGl4aUpTIGEgcmVndWxhciBtYXNrIG11c3QgYmUgYVxuICAgICAqIHtAbGluayBQSVhJLkdyYXBoaWNzfSBvciBhIHtAbGluayBQSVhJLlNwcml0ZX0gb2JqZWN0LiBUaGlzIGFsbG93cyBmb3IgbXVjaCBmYXN0ZXIgbWFza2luZyBpbiBjYW52YXMgYXMgaXRcbiAgICAgKiB1dGlsaXRpZXMgc2hhcGUgY2xpcHBpbmcuIFRvIHJlbW92ZSBhIG1hc2ssIHNldCB0aGlzIHByb3BlcnR5IHRvIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEZvciBzcHJpdGUgbWFzayBib3RoIGFscGhhIGFuZCByZWQgY2hhbm5lbCBhcmUgdXNlZC4gQmxhY2sgbWFzayBpcyB0aGUgc2FtZSBhcyB0cmFuc3BhcmVudCBtYXNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3QgZ3JhcGhpY3MgPSBuZXcgUElYSS5HcmFwaGljcygpO1xuICAgICAqIGdyYXBoaWNzLmJlZ2luRmlsbCgweEZGMzMwMCk7XG4gICAgICogZ3JhcGhpY3MuZHJhd1JlY3QoNTAsIDI1MCwgMTAwLCAxMDApO1xuICAgICAqIGdyYXBoaWNzLmVuZEZpbGwoKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IHNwcml0ZSA9IG5ldyBQSVhJLlNwcml0ZSh0ZXh0dXJlKTtcbiAgICAgKiBzcHJpdGUubWFzayA9IGdyYXBoaWNzO1xuICAgICAqIEB0b2RvIEF0IHRoZSBtb21lbnQsIFBJWEkuQ2FudmFzUmVuZGVyZXIgZG9lc24ndCBzdXBwb3J0IFBJWEkuU3ByaXRlIGFzIG1hc2suXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLkdyYXBoaWNzfFBJWEkuU3ByaXRlfG51bGx9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLm1hc2suZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXNrO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMubWFzay5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuX21hc2spXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX21hc2sucmVuZGVyYWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9tYXNrLmlzTWFzayA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbWFzayA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLl9tYXNrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9tYXNrLnJlbmRlcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX21hc2suaXNNYXNrID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggRGlzcGxheU9iamVjdC5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gICAgcmV0dXJuIERpc3BsYXlPYmplY3Q7XG59KEV2ZW50RW1pdHRlcikpO1xuXG4vKipcbiAqIERpc3BsYXlPYmplY3QgZGVmYXVsdCB1cGRhdGVUcmFuc2Zvcm0sIGRvZXMgbm90IHVwZGF0ZSBjaGlsZHJlbiBvZiBjb250YWluZXIuXG4gKiBXaWxsIGNyYXNoIGlmIHRoZXJlJ3Mgbm8gcGFyZW50IGVsZW1lbnQuXG4gKlxuICogQG1lbWJlcm9mIFBJWEkuRGlzcGxheU9iamVjdCNcbiAqIEBmdW5jdGlvbiBkaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtXG4gKi9cbkRpc3BsYXlPYmplY3QucHJvdG90eXBlLmRpc3BsYXlPYmplY3RVcGRhdGVUcmFuc2Zvcm0gPSBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS51cGRhdGVUcmFuc2Zvcm07XG5cbmZ1bmN0aW9uIHNvcnRDaGlsZHJlbihhLCBiKVxue1xuICAgIGlmIChhLnpJbmRleCA9PT0gYi56SW5kZXgpXG4gICAge1xuICAgICAgICByZXR1cm4gYS5fbGFzdFNvcnRlZEluZGV4IC0gYi5fbGFzdFNvcnRlZEluZGV4O1xuICAgIH1cblxuICAgIHJldHVybiBhLnpJbmRleCAtIGIuekluZGV4O1xufVxuXG4vKipcbiAqIEEgQ29udGFpbmVyIHJlcHJlc2VudHMgYSBjb2xsZWN0aW9uIG9mIGRpc3BsYXkgb2JqZWN0cy5cbiAqXG4gKiBJdCBpcyB0aGUgYmFzZSBjbGFzcyBvZiBhbGwgZGlzcGxheSBvYmplY3RzIHRoYXQgYWN0IGFzIGEgY29udGFpbmVyIGZvciBvdGhlciBvYmplY3RzIChsaWtlIFNwcml0ZXMpLlxuICpcbiAqYGBganNcbiAqIGxldCBjb250YWluZXIgPSBuZXcgUElYSS5Db250YWluZXIoKTtcbiAqIGNvbnRhaW5lci5hZGRDaGlsZChzcHJpdGUpO1xuICogYGBgXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLkRpc3BsYXlPYmplY3RcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBDb250YWluZXIgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChEaXNwbGF5T2JqZWN0KSB7XG4gICAgZnVuY3Rpb24gQ29udGFpbmVyKClcbiAgICB7XG4gICAgICAgIERpc3BsYXlPYmplY3QuY2FsbCh0aGlzKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGFycmF5IG9mIGNoaWxkcmVuIG9mIHRoaXMgY29udGFpbmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkRpc3BsYXlPYmplY3RbXX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHNldCB0byB0cnVlLCB0aGUgY29udGFpbmVyIHdpbGwgc29ydCBpdHMgY2hpbGRyZW4gYnkgekluZGV4IHZhbHVlXG4gICAgICAgICAqIHdoZW4gdXBkYXRlVHJhbnNmb3JtKCkgaXMgY2FsbGVkLCBvciBtYW51YWxseSBpZiBzb3J0Q2hpbGRyZW4oKSBpcyBjYWxsZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgYWN0dWFsbHkgY2hhbmdlcyB0aGUgb3JkZXIgb2YgZWxlbWVudHMgaW4gdGhlIGFycmF5LCBzbyBzaG91bGQgYmUgdHJlYXRlZFxuICAgICAgICAgKiBhcyBhIGJhc2ljIHNvbHV0aW9uIHRoYXQgaXMgbm90IHBlcmZvcm1hbnQgY29tcGFyZWQgdG8gb3RoZXIgc29sdXRpb25zLFxuICAgICAgICAgKiBzdWNoIGFzIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpanMvcGl4aS1kaXNwbGF5XG4gICAgICAgICAqXG4gICAgICAgICAqIEFsc28gYmUgYXdhcmUgb2YgdGhhdCB0aGlzIG1heSBub3Qgd29yayBuaWNlbHkgd2l0aCB0aGUgYWRkQ2hpbGRBdCgpIGZ1bmN0aW9uLFxuICAgICAgICAgKiBhcyB0aGUgekluZGV4IHNvcnRpbmcgbWF5IGNhdXNlIHRoZSBjaGlsZCB0byBhdXRvbWF0aWNhbGx5IHNvcnRlZCB0byBhbm90aGVyIHBvc2l0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc2VlIFBJWEkuc2V0dGluZ3MuU09SVEFCTEVfQ0hJTERSRU5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc29ydGFibGVDaGlsZHJlbiA9IHNldHRpbmdzLlNPUlRBQkxFX0NISUxEUkVOO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG91bGQgY2hpbGRyZW4gYmUgc29ydGVkIGJ5IHpJbmRleCBhdCB0aGUgbmV4dCB1cGRhdGVUcmFuc2Zvcm0gY2FsbC5cbiAgICAgICAgICogV2lsbCBnZXQgYXV0b21hdGljYWxseSBzZXQgdG8gdHJ1ZSBpZiBhIG5ldyBjaGlsZCBpcyBhZGRlZCwgb3IgaWYgYSBjaGlsZCdzIHpJbmRleCBjaGFuZ2VzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zb3J0RGlydHkgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgd2hlbiBhIERpc3BsYXlPYmplY3QgaXMgYWRkZWQgdG8gdGhpcyBDb250YWluZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBQSVhJLkNvbnRhaW5lciNjaGlsZEFkZGVkXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIFRoZSBjaGlsZCBhZGRlZCB0byB0aGUgQ29udGFpbmVyLlxuICAgICAgICAgKiBAcGFyYW0ge1BJWEkuQ29udGFpbmVyfSBjb250YWluZXIgLSBUaGUgY29udGFpbmVyIHRoYXQgYWRkZWQgdGhlIGNoaWxkLlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgY2hpbGRyZW4ncyBpbmRleCBvZiB0aGUgYWRkZWQgY2hpbGQuXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIGEgRGlzcGxheU9iamVjdCBpcyByZW1vdmVkIGZyb20gdGhpcyBDb250YWluZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBQSVhJLkRpc3BsYXlPYmplY3QjcmVtb3ZlZEZyb21cbiAgICAgICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IGNoaWxkIC0gVGhlIGNoaWxkIHJlbW92ZWQgZnJvbSB0aGUgQ29udGFpbmVyLlxuICAgICAgICAgKiBAcGFyYW0ge1BJWEkuQ29udGFpbmVyfSBjb250YWluZXIgLSBUaGUgY29udGFpbmVyIHRoYXQgcmVtb3ZlZCByZW1vdmVkIHRoZSBjaGlsZC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGZvcm1lciBjaGlsZHJlbidzIGluZGV4IG9mIHRoZSByZW1vdmVkIGNoaWxkXG4gICAgICAgICAqL1xuICAgIH1cblxuICAgIGlmICggRGlzcGxheU9iamVjdCApIENvbnRhaW5lci5fX3Byb3RvX18gPSBEaXNwbGF5T2JqZWN0O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBEaXNwbGF5T2JqZWN0ICYmIERpc3BsYXlPYmplY3QucHJvdG90eXBlICk7XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnRhaW5lcjtcblxuICAgIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHdpZHRoOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGhlaWdodDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGFibGUgbWV0aG9kIHRoYXQgY2FuIGJlIHVzZWQgYnkgQ29udGFpbmVyIHN1YmNsYXNzZXMgd2hlbmV2ZXIgdGhlIGNoaWxkcmVuIGFycmF5IGlzIG1vZGlmaWVkXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5vbkNoaWxkcmVuQ2hhbmdlID0gZnVuY3Rpb24gb25DaGlsZHJlbkNoYW5nZSAoKVxuICAgIHtcbiAgICAgICAgLyogZW1wdHkgKi9cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBvbmUgb3IgbW9yZSBjaGlsZHJlbiB0byB0aGUgY29udGFpbmVyLlxuICAgICAqXG4gICAgICogTXVsdGlwbGUgaXRlbXMgY2FuIGJlIGFkZGVkIGxpa2Ugc286IGBteUNvbnRhaW5lci5hZGRDaGlsZCh0aGluZ09uZSwgdGhpbmdUd28sIHRoaW5nVGhyZWUpYFxuICAgICAqXG4gICAgICogQHBhcmFtIHsuLi5QSVhJLkRpc3BsYXlPYmplY3R9IGNoaWxkIC0gVGhlIERpc3BsYXlPYmplY3QocykgdG8gYWRkIHRvIHRoZSBjb250YWluZXJcbiAgICAgKiBAcmV0dXJuIHtQSVhJLkRpc3BsYXlPYmplY3R9IFRoZSBmaXJzdCBjaGlsZCB0aGF0IHdhcyBhZGRlZC5cbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLmFkZENoaWxkID0gZnVuY3Rpb24gYWRkQ2hpbGQgKGNoaWxkKVxuICAgIHtcbiAgICAgICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lIGFyZ3VtZW50IHdlIGNhbiBieXBhc3MgbG9vcGluZyB0aHJvdWdoIHRoZSB0aGVtXG4gICAgICAgIGlmIChhcmd1bWVudHNMZW5ndGggPiAxKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGFyZ3VtZW50cyBwcm9wZXJ0eSBhbmQgYWRkIGFsbCBjaGlsZHJlblxuICAgICAgICAgICAgLy8gdXNlIGl0IHRoZSByaWdodCB3YXkgKC5sZW5ndGggYW5kIFtpXSkgc28gdGhhdCB0aGlzIGZ1bmN0aW9uIGNhbiBzdGlsbCBiZSBvcHRpbWl6ZWQgYnkgSlMgcnVudGltZXNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzTGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRDaGlsZChhcmd1bWVudHMkMVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBpZiB0aGUgY2hpbGQgaGFzIGEgcGFyZW50IHRoZW4gbGV0cyByZW1vdmUgaXQgYXMgUGl4aUpTIG9iamVjdHMgY2FuIG9ubHkgZXhpc3QgaW4gb25lIHBsYWNlXG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNoaWxkLnBhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnBhcmVudCA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnNvcnREaXJ0eSA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIGVuc3VyZSBjaGlsZCB0cmFuc2Zvcm0gd2lsbCBiZSByZWNhbGN1bGF0ZWRcbiAgICAgICAgICAgIGNoaWxkLnRyYW5zZm9ybS5fcGFyZW50SUQgPSAtMTtcblxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcblxuICAgICAgICAgICAgLy8gZW5zdXJlIGJvdW5kcyB3aWxsIGJlIHJlY2FsY3VsYXRlZFxuICAgICAgICAgICAgdGhpcy5fYm91bmRzSUQrKztcblxuICAgICAgICAgICAgLy8gVE9ETyAtIGxldHMgZWl0aGVyIGRvIGFsbCBjYWxsYmFja3Mgb3IgYWxsIGV2ZW50cy4uIG5vdCBib3RoIVxuICAgICAgICAgICAgdGhpcy5vbkNoaWxkcmVuQ2hhbmdlKHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2NoaWxkQWRkZWQnLCBjaGlsZCwgdGhpcywgdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIGNoaWxkLmVtaXQoJ2FkZGVkJywgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBjaGlsZCB0byB0aGUgY29udGFpbmVyIGF0IGEgc3BlY2lmaWVkIGluZGV4LiBJZiB0aGUgaW5kZXggaXMgb3V0IG9mIGJvdW5kcyBhbiBlcnJvciB3aWxsIGJlIHRocm93blxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IGNoaWxkIC0gVGhlIGNoaWxkIHRvIGFkZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCB0byBwbGFjZSB0aGUgY2hpbGQgaW5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLkRpc3BsYXlPYmplY3R9IFRoZSBjaGlsZCB0aGF0IHdhcyBhZGRlZC5cbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLmFkZENoaWxkQXQgPSBmdW5jdGlvbiBhZGRDaGlsZEF0IChjaGlsZCwgaW5kZXgpXG4gICAge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGhpcy5jaGlsZHJlbi5sZW5ndGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoY2hpbGQgKyBcImFkZENoaWxkQXQ6IFRoZSBpbmRleCBcIiArIGluZGV4ICsgXCIgc3VwcGxpZWQgaXMgb3V0IG9mIGJvdW5kcyBcIiArICh0aGlzLmNoaWxkcmVuLmxlbmd0aCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGlsZC5wYXJlbnQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNoaWxkLnBhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICB0aGlzLnNvcnREaXJ0eSA9IHRydWU7XG5cbiAgICAgICAgLy8gZW5zdXJlIGNoaWxkIHRyYW5zZm9ybSB3aWxsIGJlIHJlY2FsY3VsYXRlZFxuICAgICAgICBjaGlsZC50cmFuc2Zvcm0uX3BhcmVudElEID0gLTE7XG5cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIGNoaWxkKTtcblxuICAgICAgICAvLyBlbnN1cmUgYm91bmRzIHdpbGwgYmUgcmVjYWxjdWxhdGVkXG4gICAgICAgIHRoaXMuX2JvdW5kc0lEKys7XG5cbiAgICAgICAgLy8gVE9ETyAtIGxldHMgZWl0aGVyIGRvIGFsbCBjYWxsYmFja3Mgb3IgYWxsIGV2ZW50cy4uIG5vdCBib3RoIVxuICAgICAgICB0aGlzLm9uQ2hpbGRyZW5DaGFuZ2UoaW5kZXgpO1xuICAgICAgICBjaGlsZC5lbWl0KCdhZGRlZCcsIHRoaXMpO1xuICAgICAgICB0aGlzLmVtaXQoJ2NoaWxkQWRkZWQnLCBjaGlsZCwgdGhpcywgaW5kZXgpO1xuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3dhcHMgdGhlIHBvc2l0aW9uIG9mIDIgRGlzcGxheSBPYmplY3RzIHdpdGhpbiB0aGlzIGNvbnRhaW5lci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIEZpcnN0IGRpc3BsYXkgb2JqZWN0IHRvIHN3YXBcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gY2hpbGQyIC0gU2Vjb25kIGRpc3BsYXkgb2JqZWN0IHRvIHN3YXBcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnN3YXBDaGlsZHJlbiA9IGZ1bmN0aW9uIHN3YXBDaGlsZHJlbiAoY2hpbGQsIGNoaWxkMilcbiAgICB7XG4gICAgICAgIGlmIChjaGlsZCA9PT0gY2hpbGQyKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5kZXgxID0gdGhpcy5nZXRDaGlsZEluZGV4KGNoaWxkKTtcbiAgICAgICAgdmFyIGluZGV4MiA9IHRoaXMuZ2V0Q2hpbGRJbmRleChjaGlsZDIpO1xuXG4gICAgICAgIHRoaXMuY2hpbGRyZW5baW5kZXgxXSA9IGNoaWxkMjtcbiAgICAgICAgdGhpcy5jaGlsZHJlbltpbmRleDJdID0gY2hpbGQ7XG4gICAgICAgIHRoaXMub25DaGlsZHJlbkNoYW5nZShpbmRleDEgPCBpbmRleDIgPyBpbmRleDEgOiBpbmRleDIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpbmRleCBwb3NpdGlvbiBvZiBhIGNoaWxkIERpc3BsYXlPYmplY3QgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIFRoZSBEaXNwbGF5T2JqZWN0IGluc3RhbmNlIHRvIGlkZW50aWZ5XG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGNoaWxkIGRpc3BsYXkgb2JqZWN0IHRvIGlkZW50aWZ5XG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXRDaGlsZEluZGV4ID0gZnVuY3Rpb24gZ2V0Q2hpbGRJbmRleCAoY2hpbGQpXG4gICAge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHN1cHBsaWVkIERpc3BsYXlPYmplY3QgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBjYWxsZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgcG9zaXRpb24gb2YgYW4gZXhpc3RpbmcgY2hpbGQgaW4gdGhlIGRpc3BsYXkgb2JqZWN0IGNvbnRhaW5lclxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IGNoaWxkIC0gVGhlIGNoaWxkIERpc3BsYXlPYmplY3QgaW5zdGFuY2UgZm9yIHdoaWNoIHlvdSB3YW50IHRvIGNoYW5nZSB0aGUgaW5kZXggbnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIHJlc3VsdGluZyBpbmRleCBudW1iZXIgZm9yIHRoZSBjaGlsZCBkaXNwbGF5IG9iamVjdFxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuc2V0Q2hpbGRJbmRleCA9IGZ1bmN0aW9uIHNldENoaWxkSW5kZXggKGNoaWxkLCBpbmRleClcbiAgICB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5jaGlsZHJlbi5sZW5ndGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoXCJUaGUgaW5kZXggXCIgKyBpbmRleCArIFwiIHN1cHBsaWVkIGlzIG91dCBvZiBib3VuZHMgXCIgKyAodGhpcy5jaGlsZHJlbi5sZW5ndGgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5nZXRDaGlsZEluZGV4KGNoaWxkKTtcblxuICAgICAgICByZW1vdmVJdGVtcyh0aGlzLmNoaWxkcmVuLCBjdXJyZW50SW5kZXgsIDEpOyAvLyByZW1vdmUgZnJvbSBvbGQgcG9zaXRpb25cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIGNoaWxkKTsgLy8gYWRkIGF0IG5ldyBwb3NpdGlvblxuXG4gICAgICAgIHRoaXMub25DaGlsZHJlbkNoYW5nZShpbmRleCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNoaWxkIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCB0byBnZXQgdGhlIGNoaWxkIGF0XG4gICAgICogQHJldHVybiB7UElYSS5EaXNwbGF5T2JqZWN0fSBUaGUgY2hpbGQgYXQgdGhlIGdpdmVuIGluZGV4LCBpZiBhbnkuXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXRDaGlsZEF0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRBdCAoaW5kZXgpXG4gICAge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKFwiZ2V0Q2hpbGRBdDogSW5kZXggKFwiICsgaW5kZXggKyBcIikgZG9lcyBub3QgZXhpc3QuXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuW2luZGV4XTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBvbmUgb3IgbW9yZSBjaGlsZHJlbiBmcm9tIHRoZSBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gey4uLlBJWEkuRGlzcGxheU9iamVjdH0gY2hpbGQgLSBUaGUgRGlzcGxheU9iamVjdChzKSB0byByZW1vdmVcbiAgICAgKiBAcmV0dXJuIHtQSVhJLkRpc3BsYXlPYmplY3R9IFRoZSBmaXJzdCBjaGlsZCB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCAoY2hpbGQpXG4gICAge1xuICAgICAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICAgICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUgYXJndW1lbnQgd2UgY2FuIGJ5cGFzcyBsb29waW5nIHRocm91Z2ggdGhlIHRoZW1cbiAgICAgICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA+IDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgYXJndW1lbnRzIHByb3BlcnR5IGFuZCBhZGQgYWxsIGNoaWxkcmVuXG4gICAgICAgICAgICAvLyB1c2UgaXQgdGhlIHJpZ2h0IHdheSAoLmxlbmd0aCBhbmQgW2ldKSBzbyB0aGF0IHRoaXMgZnVuY3Rpb24gY2FuIHN0aWxsIGJlIG9wdGltaXplZCBieSBKUyBydW50aW1lc1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHNMZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKGFyZ3VtZW50cyQxW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCk7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIC8vIGVuc3VyZSBjaGlsZCB0cmFuc2Zvcm0gd2lsbCBiZSByZWNhbGN1bGF0ZWRcbiAgICAgICAgICAgIGNoaWxkLnRyYW5zZm9ybS5fcGFyZW50SUQgPSAtMTtcbiAgICAgICAgICAgIHJlbW92ZUl0ZW1zKHRoaXMuY2hpbGRyZW4sIGluZGV4LCAxKTtcblxuICAgICAgICAgICAgLy8gZW5zdXJlIGJvdW5kcyB3aWxsIGJlIHJlY2FsY3VsYXRlZFxuICAgICAgICAgICAgdGhpcy5fYm91bmRzSUQrKztcblxuICAgICAgICAgICAgLy8gVE9ETyAtIGxldHMgZWl0aGVyIGRvIGFsbCBjYWxsYmFja3Mgb3IgYWxsIGV2ZW50cy4uIG5vdCBib3RoIVxuICAgICAgICAgICAgdGhpcy5vbkNoaWxkcmVuQ2hhbmdlKGluZGV4KTtcbiAgICAgICAgICAgIGNoaWxkLmVtaXQoJ3JlbW92ZWQnLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnY2hpbGRSZW1vdmVkJywgY2hpbGQsIHRoaXMsIGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNoaWxkIGZyb20gdGhlIHNwZWNpZmllZCBpbmRleCBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCB0byBnZXQgdGhlIGNoaWxkIGZyb21cbiAgICAgKiBAcmV0dXJuIHtQSVhJLkRpc3BsYXlPYmplY3R9IFRoZSBjaGlsZCB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVtb3ZlQ2hpbGRBdCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkQXQgKGluZGV4KVxuICAgIHtcbiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5nZXRDaGlsZEF0KGluZGV4KTtcblxuICAgICAgICAvLyBlbnN1cmUgY2hpbGQgdHJhbnNmb3JtIHdpbGwgYmUgcmVjYWxjdWxhdGVkLi5cbiAgICAgICAgY2hpbGQucGFyZW50ID0gbnVsbDtcbiAgICAgICAgY2hpbGQudHJhbnNmb3JtLl9wYXJlbnRJRCA9IC0xO1xuICAgICAgICByZW1vdmVJdGVtcyh0aGlzLmNoaWxkcmVuLCBpbmRleCwgMSk7XG5cbiAgICAgICAgLy8gZW5zdXJlIGJvdW5kcyB3aWxsIGJlIHJlY2FsY3VsYXRlZFxuICAgICAgICB0aGlzLl9ib3VuZHNJRCsrO1xuXG4gICAgICAgIC8vIFRPRE8gLSBsZXRzIGVpdGhlciBkbyBhbGwgY2FsbGJhY2tzIG9yIGFsbCBldmVudHMuLiBub3QgYm90aCFcbiAgICAgICAgdGhpcy5vbkNoaWxkcmVuQ2hhbmdlKGluZGV4KTtcbiAgICAgICAgY2hpbGQuZW1pdCgncmVtb3ZlZCcsIHRoaXMpO1xuICAgICAgICB0aGlzLmVtaXQoJ2NoaWxkUmVtb3ZlZCcsIGNoaWxkLCB0aGlzLCBpbmRleCk7XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBjaGlsZHJlbiBmcm9tIHRoaXMgY29udGFpbmVyIHRoYXQgYXJlIHdpdGhpbiB0aGUgYmVnaW4gYW5kIGVuZCBpbmRleGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtiZWdpbkluZGV4PTBdIC0gVGhlIGJlZ2lubmluZyBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZEluZGV4PXRoaXMuY2hpbGRyZW4ubGVuZ3RoXSAtIFRoZSBlbmRpbmcgcG9zaXRpb24uIERlZmF1bHQgdmFsdWUgaXMgc2l6ZSBvZiB0aGUgY29udGFpbmVyLlxuICAgICAqIEByZXR1cm5zIHtQSVhJLkRpc3BsYXlPYmplY3RbXX0gTGlzdCBvZiByZW1vdmVkIGNoaWxkcmVuXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5yZW1vdmVDaGlsZHJlbiA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkcmVuIChiZWdpbkluZGV4LCBlbmRJbmRleClcbiAgICB7XG4gICAgICAgIGlmICggYmVnaW5JbmRleCA9PT0gdm9pZCAwICkgYmVnaW5JbmRleCA9IDA7XG5cbiAgICAgICAgdmFyIGJlZ2luID0gYmVnaW5JbmRleDtcbiAgICAgICAgdmFyIGVuZCA9IHR5cGVvZiBlbmRJbmRleCA9PT0gJ251bWJlcicgPyBlbmRJbmRleCA6IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICB2YXIgcmFuZ2UgPSBlbmQgLSBiZWdpbjtcbiAgICAgICAgdmFyIHJlbW92ZWQ7XG5cbiAgICAgICAgaWYgKHJhbmdlID4gMCAmJiByYW5nZSA8PSBlbmQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlbW92ZWQgPSB0aGlzLmNoaWxkcmVuLnNwbGljZShiZWdpbiwgcmFuZ2UpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbW92ZWQubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZFtpXS5wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkW2ldLnRyYW5zZm9ybSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWRbaV0udHJhbnNmb3JtLl9wYXJlbnRJRCA9IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fYm91bmRzSUQrKztcblxuICAgICAgICAgICAgdGhpcy5vbkNoaWxkcmVuQ2hhbmdlKGJlZ2luSW5kZXgpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCByZW1vdmVkLmxlbmd0aDsgKytpJDEpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZFtpJDFdLmVtaXQoJ3JlbW92ZWQnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2NoaWxkUmVtb3ZlZCcsIHJlbW92ZWRbaSQxXSwgdGhpcywgaSQxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmFuZ2UgPT09IDAgJiYgdGhpcy5jaGlsZHJlbi5sZW5ndGggPT09IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdyZW1vdmVDaGlsZHJlbjogbnVtZXJpYyB2YWx1ZXMgYXJlIG91dHNpZGUgdGhlIGFjY2VwdGFibGUgcmFuZ2UuJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNvcnRzIGNoaWxkcmVuIGJ5IHpJbmRleC4gUHJldmlvdXMgb3JkZXIgaXMgbWFudGFpbmVkIGZvciAyIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUgekluZGV4LlxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuc29ydENoaWxkcmVuID0gZnVuY3Rpb24gc29ydENoaWxkcmVuJDEgKClcbiAgICB7XG4gICAgICAgIHZhciBzb3J0UmVxdWlyZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgajsgKytpKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldO1xuXG4gICAgICAgICAgICBjaGlsZC5fbGFzdFNvcnRlZEluZGV4ID0gaTtcblxuICAgICAgICAgICAgaWYgKCFzb3J0UmVxdWlyZWQgJiYgY2hpbGQuekluZGV4ICE9PSAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNvcnRSZXF1aXJlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc29ydFJlcXVpcmVkICYmIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zb3J0KHNvcnRDaGlsZHJlbik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNvcnREaXJ0eSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSB0cmFuc2Zvcm0gb24gYWxsIGNoaWxkcmVuIG9mIHRoaXMgY29udGFpbmVyIGZvciByZW5kZXJpbmdcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnVwZGF0ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIHVwZGF0ZVRyYW5zZm9ybSAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuc29ydGFibGVDaGlsZHJlbiAmJiB0aGlzLnNvcnREaXJ0eSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zb3J0Q2hpbGRyZW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2JvdW5kc0lEKys7XG5cbiAgICAgICAgdGhpcy50cmFuc2Zvcm0udXBkYXRlVHJhbnNmb3JtKHRoaXMucGFyZW50LnRyYW5zZm9ybSk7XG5cbiAgICAgICAgLy8gVE9ETzogY2hlY2sgcmVuZGVyIGZsYWdzLCBob3cgdG8gcHJvY2VzcyBzdHVmZiBoZXJlXG4gICAgICAgIHRoaXMud29ybGRBbHBoYSA9IHRoaXMuYWxwaGEgKiB0aGlzLnBhcmVudC53b3JsZEFscGhhO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBqOyArK2kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV07XG5cbiAgICAgICAgICAgIGlmIChjaGlsZC52aXNpYmxlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNoaWxkLnVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlY2FsY3VsYXRlcyB0aGUgYm91bmRzIG9mIHRoZSBjb250YWluZXIuXG4gICAgICpcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLmNhbGN1bGF0ZUJvdW5kcyA9IGZ1bmN0aW9uIGNhbGN1bGF0ZUJvdW5kcyAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5fYm91bmRzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlQm91bmRzKCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWNoaWxkLnZpc2libGUgfHwgIWNoaWxkLnJlbmRlcmFibGUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLmNhbGN1bGF0ZUJvdW5kcygpO1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBmaWx0ZXIrbWFzaywgbmVlZCB0byBtYXNrIGJvdGggc29tZWhvd1xuICAgICAgICAgICAgaWYgKGNoaWxkLl9tYXNrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNoaWxkLl9tYXNrLmNhbGN1bGF0ZUJvdW5kcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2JvdW5kcy5hZGRCb3VuZHNNYXNrKGNoaWxkLl9ib3VuZHMsIGNoaWxkLl9tYXNrLl9ib3VuZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQuZmlsdGVyQXJlYSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ib3VuZHMuYWRkQm91bmRzQXJlYShjaGlsZC5fYm91bmRzLCBjaGlsZC5maWx0ZXJBcmVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ib3VuZHMuYWRkQm91bmRzKGNoaWxkLl9ib3VuZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdEJvdW5kc0lEID0gdGhpcy5fYm91bmRzSUQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlY2FsY3VsYXRlcyB0aGUgYm91bmRzIG9mIHRoZSBvYmplY3QuIE92ZXJyaWRlIHRoaXMgdG9cbiAgICAgKiBjYWxjdWxhdGUgdGhlIGJvdW5kcyBvZiB0aGUgc3BlY2lmaWMgb2JqZWN0IChub3QgaW5jbHVkaW5nIGNoaWxkcmVuKS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLl9jYWxjdWxhdGVCb3VuZHMgPSBmdW5jdGlvbiBfY2FsY3VsYXRlQm91bmRzICgpXG4gICAge1xuICAgICAgICAvLyBGSUxMIElOLy9cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgb2JqZWN0IHVzaW5nIHRoZSBXZWJHTCByZW5kZXJlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlclxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIC8vIGlmIHRoZSBvYmplY3QgaXMgbm90IHZpc2libGUgb3IgdGhlIGFscGhhIGlzIDAgdGhlbiBubyBuZWVkIHRvIHJlbmRlciB0aGlzIGVsZW1lbnRcbiAgICAgICAgaWYgKCF0aGlzLnZpc2libGUgfHwgdGhpcy53b3JsZEFscGhhIDw9IDAgfHwgIXRoaXMucmVuZGVyYWJsZSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZG8gYSBxdWljayBjaGVjayB0byBzZWUgaWYgdGhpcyBlbGVtZW50IGhhcyBhIG1hc2sgb3IgYSBmaWx0ZXIuXG4gICAgICAgIGlmICh0aGlzLl9tYXNrIHx8ICh0aGlzLmZpbHRlcnMgJiYgdGhpcy5maWx0ZXJzLmxlbmd0aCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyQWR2YW5jZWQocmVuZGVyZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyKHJlbmRlcmVyKTtcblxuICAgICAgICAgICAgLy8gc2ltcGxlIHJlbmRlciBjaGlsZHJlbiFcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBqOyArK2kpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpXS5yZW5kZXIocmVuZGVyZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbmRlciB0aGUgb2JqZWN0IHVzaW5nIHRoZSBXZWJHTCByZW5kZXJlciBhbmQgYWR2YW5jZWQgZmVhdHVyZXMuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlclxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVuZGVyQWR2YW5jZWQgPSBmdW5jdGlvbiByZW5kZXJBZHZhbmNlZCAocmVuZGVyZXIpXG4gICAge1xuICAgICAgICByZW5kZXJlci5iYXRjaC5mbHVzaCgpO1xuXG4gICAgICAgIHZhciBmaWx0ZXJzID0gdGhpcy5maWx0ZXJzO1xuICAgICAgICB2YXIgbWFzayA9IHRoaXMuX21hc2s7XG5cbiAgICAgICAgLy8gcHVzaCBmaWx0ZXIgZmlyc3QgYXMgd2UgbmVlZCB0byBlbnN1cmUgdGhlIHN0ZW5jaWwgYnVmZmVyIGlzIGNvcnJlY3QgZm9yIGFueSBtYXNraW5nXG4gICAgICAgIGlmIChmaWx0ZXJzKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2VuYWJsZWRGaWx0ZXJzKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuYWJsZWRGaWx0ZXJzID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2VuYWJsZWRGaWx0ZXJzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyc1tpXS5lbmFibGVkKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5hYmxlZEZpbHRlcnMucHVzaChmaWx0ZXJzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9lbmFibGVkRmlsdGVycy5sZW5ndGgpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuZmlsdGVyLnB1c2godGhpcywgdGhpcy5fZW5hYmxlZEZpbHRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hc2spXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlbmRlcmVyLm1hc2sucHVzaCh0aGlzLCB0aGlzLl9tYXNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCB0aGlzIG9iamVjdCB0byB0aGUgYmF0Y2gsIG9ubHkgcmVuZGVyZWQgaWYgaXQgaGFzIGEgdGV4dHVyZS5cbiAgICAgICAgdGhpcy5fcmVuZGVyKHJlbmRlcmVyKTtcblxuICAgICAgICAvLyBub3cgbG9vcCB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhbmQgbWFrZSBzdXJlIHRoZXkgZ2V0IHJlbmRlcmVkXG4gICAgICAgIGZvciAodmFyIGkkMSA9IDAsIGogPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSQxIDwgajsgaSQxKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baSQxXS5yZW5kZXIocmVuZGVyZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyZXIuYmF0Y2guZmx1c2goKTtcblxuICAgICAgICBpZiAobWFzaylcbiAgICAgICAge1xuICAgICAgICAgICAgcmVuZGVyZXIubWFzay5wb3AodGhpcywgdGhpcy5fbWFzayk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsdGVycyAmJiB0aGlzLl9lbmFibGVkRmlsdGVycyAmJiB0aGlzLl9lbmFibGVkRmlsdGVycy5sZW5ndGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlbmRlcmVyLmZpbHRlci5wb3AoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUbyBiZSBvdmVycmlkZGVuIGJ5IHRoZSBzdWJjbGFzc2VzLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXJcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiBfcmVuZGVyIChyZW5kZXJlcikgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHtcbiAgICAgICAgLy8gdGhpcyBpcyB3aGVyZSBjb250ZW50IGl0c2VsZiBnZXRzIHJlbmRlcmVkLi4uXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGludGVybmFsIHJlZmVyZW5jZXMgYW5kIGxpc3RlbmVycyBhcyB3ZWxsIGFzIHJlbW92ZXMgY2hpbGRyZW4gZnJvbSB0aGUgZGlzcGxheSBsaXN0LlxuICAgICAqIERvIG5vdCB1c2UgYSBDb250YWluZXIgYWZ0ZXIgY2FsbGluZyBgZGVzdHJveWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdHxib29sZWFufSBbb3B0aW9uc10gLSBPcHRpb25zIHBhcmFtZXRlci4gQSBib29sZWFuIHdpbGwgYWN0IGFzIGlmIGFsbCBvcHRpb25zXG4gICAgICogIGhhdmUgYmVlbiBzZXQgdG8gdGhhdCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hpbGRyZW49ZmFsc2VdIC0gaWYgc2V0IHRvIHRydWUsIGFsbCB0aGUgY2hpbGRyZW4gd2lsbCBoYXZlIHRoZWlyIGRlc3Ryb3lcbiAgICAgKiAgbWV0aG9kIGNhbGxlZCBhcyB3ZWxsLiAnb3B0aW9ucycgd2lsbCBiZSBwYXNzZWQgb24gdG8gdGhvc2UgY2FsbHMuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50ZXh0dXJlPWZhbHNlXSAtIE9ubHkgdXNlZCBmb3IgY2hpbGQgU3ByaXRlcyBpZiBvcHRpb25zLmNoaWxkcmVuIGlzIHNldCB0byB0cnVlXG4gICAgICogIFNob3VsZCBpdCBkZXN0cm95IHRoZSB0ZXh0dXJlIG9mIHRoZSBjaGlsZCBzcHJpdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmJhc2VUZXh0dXJlPWZhbHNlXSAtIE9ubHkgdXNlZCBmb3IgY2hpbGQgU3ByaXRlcyBpZiBvcHRpb25zLmNoaWxkcmVuIGlzIHNldCB0byB0cnVlXG4gICAgICogIFNob3VsZCBpdCBkZXN0cm95IHRoZSBiYXNlIHRleHR1cmUgb2YgdGhlIGNoaWxkIHNwcml0ZVxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKG9wdGlvbnMpXG4gICAge1xuICAgICAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG5cbiAgICAgICAgdGhpcy5zb3J0RGlydHkgPSBmYWxzZTtcblxuICAgICAgICB2YXIgZGVzdHJveUNoaWxkcmVuID0gdHlwZW9mIG9wdGlvbnMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMgOiBvcHRpb25zICYmIG9wdGlvbnMuY2hpbGRyZW47XG5cbiAgICAgICAgdmFyIG9sZENoaWxkcmVuID0gdGhpcy5yZW1vdmVDaGlsZHJlbigwLCB0aGlzLmNoaWxkcmVuLmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKGRlc3Ryb3lDaGlsZHJlbilcbiAgICAgICAge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGRDaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvbGRDaGlsZHJlbltpXS5kZXN0cm95KG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgQ29udGFpbmVyLCBzZXR0aW5nIHRoaXMgd2lsbCBhY3R1YWxseSBtb2RpZnkgdGhlIHNjYWxlIHRvIGFjaGlldmUgdGhlIHZhbHVlIHNldFxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy53aWR0aC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGUueCAqIHRoaXMuZ2V0TG9jYWxCb3VuZHMoKS53aWR0aDtcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLndpZHRoLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldExvY2FsQm91bmRzKCkud2lkdGg7XG5cbiAgICAgICAgaWYgKHdpZHRoICE9PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnNjYWxlLnggPSB2YWx1ZSAvIHdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zY2FsZS54ID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3dpZHRoID0gdmFsdWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBoZWlnaHQgb2YgdGhlIENvbnRhaW5lciwgc2V0dGluZyB0aGlzIHdpbGwgYWN0dWFsbHkgbW9kaWZ5IHRoZSBzY2FsZSB0byBhY2hpZXZlIHRoZSB2YWx1ZSBzZXRcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuaGVpZ2h0LmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5zY2FsZS55ICogdGhpcy5nZXRMb2NhbEJvdW5kcygpLmhlaWdodDtcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmhlaWdodC5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuZ2V0TG9jYWxCb3VuZHMoKS5oZWlnaHQ7XG5cbiAgICAgICAgaWYgKGhlaWdodCAhPT0gMClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zY2FsZS55ID0gdmFsdWUgLyBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnNjYWxlLnkgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gdmFsdWU7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBDb250YWluZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICAgIHJldHVybiBDb250YWluZXI7XG59KERpc3BsYXlPYmplY3QpKTtcblxuLy8gcGVyZm9ybWFuY2UgaW5jcmVhc2UgdG8gYXZvaWQgdXNpbmcgY2FsbC4uICgxMHggZmFzdGVyKVxuQ29udGFpbmVyLnByb3RvdHlwZS5jb250YWluZXJVcGRhdGVUcmFuc2Zvcm0gPSBDb250YWluZXIucHJvdG90eXBlLnVwZGF0ZVRyYW5zZm9ybTtcblxuZXhwb3J0IHsgQm91bmRzLCBDb250YWluZXIsIERpc3BsYXlPYmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3BsYXkuZXMuanMubWFwXG4iLCIvKiFcbiAqIEBwaXhpL2NvcmUgLSB2NS4xLjVcbiAqIENvbXBpbGVkIFR1ZSwgMjQgU2VwIDIwMTkgMDQ6MDc6MDUgVVRDXG4gKlxuICogQHBpeGkvY29yZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbmltcG9ydCB7IFJ1bm5lciB9IGZyb20gJ0BwaXhpL3J1bm5lcic7XG5pbXBvcnQgeyBkZXRlcm1pbmVDcm9zc09yaWdpbiwgaXNQb3cyLCBCYXNlVGV4dHVyZUNhY2hlLCBUZXh0dXJlQ2FjaGUsIHVpZCwgRXZlbnRFbWl0dGVyLCBnZXRSZXNvbHV0aW9uT2ZVcmwsIG5leHRQb3cyLCBpc01vYmlsZSwgUHJvZ3JhbUNhY2hlLCByZW1vdmVJdGVtcywgaGV4MnN0cmluZywgaGV4MnJnYiwgZGVwcmVjYXRpb24sIGlzV2ViR0xTdXBwb3J0ZWQsIHNheUhlbGxvLCBwcmVtdWx0aXBseUJsZW5kTW9kZSwgbG9nMiwgcHJlbXVsdGlwbHlUaW50IH0gZnJvbSAnQHBpeGkvdXRpbHMnO1xuaW1wb3J0IHsgc2V0dGluZ3MgfSBmcm9tICdAcGl4aS9zZXR0aW5ncyc7XG5pbXBvcnQgeyBTQ0FMRV9NT0RFUywgRk9STUFUUywgVFlQRVMsIFRBUkdFVFMsIERSQVdfTU9ERVMsIEVOViwgUFJFQ0lTSU9OLCBCTEVORF9NT0RFUywgR0NfTU9ERVMsIE1JUE1BUF9NT0RFUywgV1JBUF9NT0RFUywgUkVOREVSRVJfVFlQRSB9IGZyb20gJ0BwaXhpL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBUaWNrZXIgfSBmcm9tICdAcGl4aS90aWNrZXInO1xuaW1wb3J0IHsgR3JvdXBEOCwgUmVjdGFuZ2xlLCBQb2ludCwgTWF0cml4IH0gZnJvbSAnQHBpeGkvbWF0aCc7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICdAcGl4aS9kaXNwbGF5JztcblxuLyoqXG4gKiBCYXNlIHJlc291cmNlIGNsYXNzIGZvciB0ZXh0dXJlcyB0aGF0IG1hbmFnZXMgdmFsaWRhdGlvbiBhbmQgdXBsb2FkaW5nLCBkZXBlbmRpbmcgb24gaXRzIHR5cGUuXG4gKlxuICogVXBsb2FkaW5nIG9mIGEgYmFzZSB0ZXh0dXJlIHRvIHRoZSBHUFUgaXMgcmVxdWlyZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSS5yZXNvdXJjZXNcbiAqL1xudmFyIFJlc291cmNlID0gZnVuY3Rpb24gUmVzb3VyY2Uod2lkdGgsIGhlaWdodClcbntcbiAgICBpZiAoIHdpZHRoID09PSB2b2lkIDAgKSB3aWR0aCA9IDA7XG4gICAgaWYgKCBoZWlnaHQgPT09IHZvaWQgMCApIGhlaWdodCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCB3aWR0aCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBoZWlnaHQgb2YgdGhlIHJlc291cmNlXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAvKipcbiAgICAgKiBJZiByZXNvdXJjZSBoYXMgYmVlbiBkZXN0cm95ZWRcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqIEByZWFkb25seVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIGB0cnVlYCBpZiByZXNvdXJjZSBpcyBjcmVhdGVkIGJ5IEJhc2VUZXh0dXJlXG4gICAgICogdXNlZnVsIGZvciBkb2luZyBjbGVhbnVwIHdpdGggQmFzZVRleHR1cmUgZGVzdHJveVxuICAgICAqIGFuZCBub3QgY2xlYW5pbmcgdXAgcmVzb3VyY2VzIHRoYXQgd2VyZSBjcmVhdGVkXG4gICAgICogZXh0ZXJuYWxseS5cbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB0aGlzLmludGVybmFsID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBNaW5pLXJ1bm5lciBmb3IgaGFuZGxpbmcgcmVzaXplIGV2ZW50c1xuICAgICAqXG4gICAgICogQG1lbWJlciB7UnVubmVyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5vblJlc2l6ZSA9IG5ldyBSdW5uZXIoJ3NldFJlYWxTaXplJywgMik7XG5cbiAgICAvKipcbiAgICAgKiBNaW5pLXJ1bm5lciBmb3IgaGFuZGxpbmcgdXBkYXRlIGV2ZW50c1xuICAgICAqXG4gICAgICogQG1lbWJlciB7UnVubmVyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5vblVwZGF0ZSA9IG5ldyBSdW5uZXIoJ3VwZGF0ZScpO1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIGludGVybmFsIGVycm9ycywgc3VjaCBhcyBsb2FkaW5nIGVycm9yc1xuICAgICAqXG4gICAgICogQG1lbWJlciB7UnVubmVyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5vbkVycm9yID0gbmV3IFJ1bm5lcignb25FcnJvcicsIDEpO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgdmFsaWQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sd2lkdGg6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0saGVpZ2h0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qKlxuICogQmluZCB0byBhIHBhcmVudCBCYXNlVGV4dHVyZVxuICpcbiAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgLSBQYXJlbnQgdGV4dHVyZVxuICovXG5SZXNvdXJjZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQgKGJhc2VUZXh0dXJlKVxue1xuICAgIHRoaXMub25SZXNpemUuYWRkKGJhc2VUZXh0dXJlKTtcbiAgICB0aGlzLm9uVXBkYXRlLmFkZChiYXNlVGV4dHVyZSk7XG4gICAgdGhpcy5vbkVycm9yLmFkZChiYXNlVGV4dHVyZSk7XG5cbiAgICAvLyBDYWxsIGEgcmVzaXplIGltbWVkaWF0ZSBpZiB3ZSBhbHJlYWR5XG4gICAgLy8gaGF2ZSB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgcmVzb3VyY2VcbiAgICBpZiAodGhpcy5fd2lkdGggfHwgdGhpcy5faGVpZ2h0KVxuICAgIHtcbiAgICAgICAgdGhpcy5vblJlc2l6ZS5ydW4odGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBVbmJpbmQgdG8gYSBwYXJlbnQgQmFzZVRleHR1cmVcbiAqXG4gKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IGJhc2VUZXh0dXJlIC0gUGFyZW50IHRleHR1cmVcbiAqL1xuUmVzb3VyY2UucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCAoYmFzZVRleHR1cmUpXG57XG4gICAgdGhpcy5vblJlc2l6ZS5yZW1vdmUoYmFzZVRleHR1cmUpO1xuICAgIHRoaXMub25VcGRhdGUucmVtb3ZlKGJhc2VUZXh0dXJlKTtcbiAgICB0aGlzLm9uRXJyb3IucmVtb3ZlKGJhc2VUZXh0dXJlKTtcbn07XG5cbi8qKlxuICogVHJpZ2dlciBhIHJlc2l6ZSBldmVudFxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFggZGltZW5zaW9uXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IFkgZGltZW5zaW9uXG4gKi9cblJlc291cmNlLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiByZXNpemUgKHdpZHRoLCBoZWlnaHQpXG57XG4gICAgaWYgKHdpZHRoICE9PSB0aGlzLl93aWR0aCB8fCBoZWlnaHQgIT09IHRoaXMuX2hlaWdodClcbiAgICB7XG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5vblJlc2l6ZS5ydW4od2lkdGgsIGhlaWdodCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBIYXMgYmVlbiB2YWxpZGF0ZWRcbiAqIEByZWFkb25seVxuICogQG1lbWJlciB7Ym9vbGVhbn1cbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzLnZhbGlkLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuICEhdGhpcy5fd2lkdGggJiYgISF0aGlzLl9oZWlnaHQ7XG59O1xuXG4vKipcbiAqIEhhcyBiZWVuIHVwZGF0ZWQgdHJpZ2dlciBldmVudFxuICovXG5SZXNvdXJjZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpXG57XG4gICAgaWYgKCF0aGlzLmRlc3Ryb3llZClcbiAgICB7XG4gICAgICAgIHRoaXMub25VcGRhdGUucnVuKCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBUaGlzIGNhbiBiZSBvdmVycmlkZGVuIHRvIHN0YXJ0IHByZWxvYWRpbmcgYSByZXNvdXJjZVxuICogb3IgZG8gYW55IG90aGVyIHByZXBhcmUgc3RlcC5cbiAqIEBwcm90ZWN0ZWRcbiAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IEhhbmRsZSB0aGUgdmFsaWRhdGUgZXZlbnRcbiAqL1xuUmVzb3VyY2UucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiBsb2FkICgpXG57XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufTtcblxuLyoqXG4gKiBUaGUgd2lkdGggb2YgdGhlIHJlc291cmNlLlxuICpcbiAqIEBtZW1iZXIge251bWJlcn1cbiAqIEByZWFkb25seVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMud2lkdGguZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy5fd2lkdGg7XG59O1xuXG4vKipcbiAqIFRoZSBoZWlnaHQgb2YgdGhlIHJlc291cmNlLlxuICpcbiAqIEBtZW1iZXIge251bWJlcn1cbiAqIEByZWFkb25seVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuaGVpZ2h0LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbn07XG5cbi8qKlxuICogVXBsb2FkcyB0aGUgdGV4dHVyZSBvciByZXR1cm5zIGZhbHNlIGlmIGl0IGNhbnQgZm9yIHNvbWUgcmVhc29uLiBPdmVycmlkZSB0aGlzLlxuICpcbiAqIEBwYXJhbSB7UElYSS5SZW5kZXJlcn0gcmVuZGVyZXIgLSB5ZWFoLCByZW5kZXJlciFcbiAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgLSB0aGUgdGV4dHVyZVxuICogQHBhcmFtIHtQSVhJLkdMVGV4dHVyZX0gZ2xUZXh0dXJlIC0gdGV4dHVyZSBpbnN0YW5jZSBmb3IgdGhpcyB3ZWJnbCBjb250ZXh0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpcyBzdWNjZXNzXG4gKi9cblJlc291cmNlLnByb3RvdHlwZS51cGxvYWQgPSBmdW5jdGlvbiB1cGxvYWQgKHJlbmRlcmVyLCBiYXNlVGV4dHVyZSwgZ2xUZXh0dXJlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG57XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHN0eWxlLCBvcHRpb25hbCB0byBvdmVycmlkZVxuICpcbiAqIEBwYXJhbSB7UElYSS5SZW5kZXJlcn0gcmVuZGVyZXIgLSB5ZWFoLCByZW5kZXJlciFcbiAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgLSB0aGUgdGV4dHVyZVxuICogQHBhcmFtIHtQSVhJLkdMVGV4dHVyZX0gZ2xUZXh0dXJlIC0gdGV4dHVyZSBpbnN0YW5jZSBmb3IgdGhpcyB3ZWJnbCBjb250ZXh0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlzIHN1Y2Nlc3NcbiAqL1xuUmVzb3VyY2UucHJvdG90eXBlLnN0eWxlID0gZnVuY3Rpb24gc3R5bGUgKHJlbmRlcmVyLCBiYXNlVGV4dHVyZSwgZ2xUZXh0dXJlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG57XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBhbnl0aGluZywgdGhpcyBoYXBwZW5zIHdoZW4gZGVzdHJveWluZyBpcyByZWFkeS5cbiAqXG4gKiBAcHJvdGVjdGVkXG4gKi9cblJlc291cmNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSAoKVxue1xuICAgIC8vIG92ZXJyaWRlXG59O1xuXG4vKipcbiAqIENhbGwgd2hlbiBkZXN0cm95aW5nIHJlc291cmNlLCB1bmJpbmQgYW55IEJhc2VUZXh0dXJlIG9iamVjdFxuICogYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2QsIGFzIHJlZmVyZW5jZSBjb3VudHMgYXJlIG1haW50YWluZWRcbiAqIGludGVybmFsbHkuXG4gKi9cblJlc291cmNlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIGlmICghdGhpcy5kZXN0cm95ZWQpXG4gICAge1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLm9uRXJyb3IucmVtb3ZlQWxsKCk7XG4gICAgICAgIHRoaXMub25FcnJvciA9IG51bGw7XG4gICAgICAgIHRoaXMub25SZXNpemUucmVtb3ZlQWxsKCk7XG4gICAgICAgIHRoaXMub25SZXNpemUgPSBudWxsO1xuICAgICAgICB0aGlzLm9uVXBkYXRlLnJlbW92ZUFsbCgpO1xuICAgICAgICB0aGlzLm9uVXBkYXRlID0gbnVsbDtcbiAgICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggUmVzb3VyY2UucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuLyoqXG4gKiBCYXNlIGZvciBhbGwgdGhlIGltYWdlL2NhbnZhcyByZXNvdXJjZXNcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5yZXNvdXJjZXMuUmVzb3VyY2VcbiAqIEBtZW1iZXJvZiBQSVhJLnJlc291cmNlc1xuICovXG52YXIgQmFzZUltYWdlUmVzb3VyY2UgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChSZXNvdXJjZSkge1xuICAgIGZ1bmN0aW9uIEJhc2VJbWFnZVJlc291cmNlKHNvdXJjZSlcbiAgICB7XG4gICAgICAgIHZhciB3aWR0aCA9IHNvdXJjZS5uYXR1cmFsV2lkdGggfHwgc291cmNlLnZpZGVvV2lkdGggfHwgc291cmNlLndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gc291cmNlLm5hdHVyYWxIZWlnaHQgfHwgc291cmNlLnZpZGVvSGVpZ2h0IHx8IHNvdXJjZS5oZWlnaHQ7XG5cbiAgICAgICAgUmVzb3VyY2UuY2FsbCh0aGlzLCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHNvdXJjZSBlbGVtZW50XG4gICAgICAgICAqIEBtZW1iZXIge0hUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR8SFRNTFZpZGVvRWxlbWVudHxTVkdFbGVtZW50fVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCB3aWxsIGZvcmNlIGB0ZXhJbWFnZTJEYCBvdmVyIGB0ZXhTdWJJbWFnZTJEYCBmb3IgdXBsb2FkaW5nLlxuICAgICAgICAgKiBDZXJ0YWluIHR5cGVzIG9mIG1lZGlhIChlLmcuIHZpZGVvKSB1c2luZyBgdGV4SW1hZ2UyRGAgaXMgbW9yZSBwZXJmb3JtYW50LlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ub1N1YkltYWdlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCBSZXNvdXJjZSApIEJhc2VJbWFnZVJlc291cmNlLl9fcHJvdG9fXyA9IFJlc291cmNlO1xuICAgIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFJlc291cmNlICYmIFJlc291cmNlLnByb3RvdHlwZSApO1xuICAgIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJhc2VJbWFnZVJlc291cmNlO1xuXG4gICAgLyoqXG4gICAgICogU2V0IGNyb3NzIG9yaWdpbiBiYXNlZCBkZXRlY3RpbmcgdGhlIHVybCBhbmQgdGhlIGNyb3Nzb3JpZ2luXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IGNyb3NzT3JpZ2luXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFVSTCB0byBjaGVja1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxzdHJpbmd9IFtjcm9zc29yaWdpbj10cnVlXSAtIENyb3NzIG9yaWdpbiB2YWx1ZSB0byB1c2VcbiAgICAgKi9cbiAgICBCYXNlSW1hZ2VSZXNvdXJjZS5jcm9zc09yaWdpbiA9IGZ1bmN0aW9uIGNyb3NzT3JpZ2luIChlbGVtZW50LCB1cmwsIGNyb3Nzb3JpZ2luKVxuICAgIHtcbiAgICAgICAgaWYgKGNyb3Nzb3JpZ2luID09PSB1bmRlZmluZWQgJiYgdXJsLmluZGV4T2YoJ2RhdGE6JykgIT09IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY3Jvc3NPcmlnaW4gPSBkZXRlcm1pbmVDcm9zc09yaWdpbih1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNyb3Nzb3JpZ2luICE9PSBmYWxzZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZWxlbWVudC5jcm9zc09yaWdpbiA9IHR5cGVvZiBjcm9zc29yaWdpbiA9PT0gJ3N0cmluZycgPyBjcm9zc29yaWdpbiA6ICdhbm9ueW1vdXMnO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwbG9hZCB0aGUgdGV4dHVyZSB0byB0aGUgR1BVLlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJlcn0gcmVuZGVyZXIgVXBsb2FkIHRvIHRoZSByZW5kZXJlclxuICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgUmVmZXJlbmNlIHRvIHBhcmVudCB0ZXh0dXJlXG4gICAgICogQHBhcmFtIHtQSVhJLkdMVGV4dHVyZX0gZ2xUZXh0dXJlXG4gICAgICogQHBhcmFtIHtIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fEhUTUxWaWRlb0VsZW1lbnR8U1ZHRWxlbWVudH0gW3NvdXJjZV0gKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlzIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBCYXNlSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUudXBsb2FkID0gZnVuY3Rpb24gdXBsb2FkIChyZW5kZXJlciwgYmFzZVRleHR1cmUsIGdsVGV4dHVyZSwgc291cmNlKVxuICAgIHtcbiAgICAgICAgdmFyIGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgICAgIHZhciB3aWR0aCA9IGJhc2VUZXh0dXJlLnJlYWxXaWR0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IGJhc2VUZXh0dXJlLnJlYWxIZWlnaHQ7XG5cbiAgICAgICAgc291cmNlID0gc291cmNlIHx8IHRoaXMuc291cmNlO1xuXG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgYmFzZVRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLm5vU3ViSW1hZ2VcbiAgICAgICAgICAgICYmIGJhc2VUZXh0dXJlLnRhcmdldCA9PT0gZ2wuVEVYVFVSRV8yRFxuICAgICAgICAgICAgJiYgZ2xUZXh0dXJlLndpZHRoID09PSB3aWR0aFxuICAgICAgICAgICAgJiYgZ2xUZXh0dXJlLmhlaWdodCA9PT0gaGVpZ2h0KVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC50ZXhTdWJJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIGJhc2VUZXh0dXJlLmZvcm1hdCwgYmFzZVRleHR1cmUudHlwZSwgc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsVGV4dHVyZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgZ2xUZXh0dXJlLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChiYXNlVGV4dHVyZS50YXJnZXQsIDAsIGJhc2VUZXh0dXJlLmZvcm1hdCwgYmFzZVRleHR1cmUuZm9ybWF0LCBiYXNlVGV4dHVyZS50eXBlLCBzb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBzb3VyY2Ugd2lkdGgvaGVpZ2h0IHdhcyBjaGFuZ2VkLCByZXNpemUgY2FuIGNhdXNlIGV4dHJhIGJhc2VUZXh0dXJlIHVwZGF0ZS5cbiAgICAgKiBUcmlnZ2VycyBvbmUgdXBkYXRlIGluIGFueSBjYXNlLlxuICAgICAqL1xuICAgIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5zb3VyY2UubmF0dXJhbFdpZHRoIHx8IHRoaXMuc291cmNlLnZpZGVvV2lkdGggfHwgdGhpcy5zb3VyY2Uud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLnNvdXJjZS5uYXR1cmFsSGVpZ2h0IHx8IHRoaXMuc291cmNlLnZpZGVvSGVpZ2h0IHx8IHRoaXMuc291cmNlLmhlaWdodDtcblxuICAgICAgICB0aGlzLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICBSZXNvdXJjZS5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhpcyBCYXNlSW1hZ2VSZXNvdXJjZVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gW2Zyb21UZXh0dXJlXSBPcHRpb25hbCBiYXNlIHRleHR1cmVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBEZXN0cm95IHdhcyBzdWNjZXNzZnVsXG4gICAgICovXG4gICAgQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlICgpXG4gICAge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiBCYXNlSW1hZ2VSZXNvdXJjZTtcbn0oUmVzb3VyY2UpKTtcblxuLyoqXG4gKiBSZXNvdXJjZSB0eXBlIGZvciBIVE1MSW1hZ2VFbGVtZW50LlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLnJlc291cmNlcy5CYXNlSW1hZ2VSZXNvdXJjZVxuICogQG1lbWJlcm9mIFBJWEkucmVzb3VyY2VzXG4gKi9cbnZhciBJbWFnZVJlc291cmNlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQmFzZUltYWdlUmVzb3VyY2UpIHtcbiAgICBmdW5jdGlvbiBJbWFnZVJlc291cmNlKHNvdXJjZSwgb3B0aW9ucylcbiAgICB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQpKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgaW1hZ2VFbGVtZW50ID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgICAgIEJhc2VJbWFnZVJlc291cmNlLmNyb3NzT3JpZ2luKGltYWdlRWxlbWVudCwgc291cmNlLCBvcHRpb25zLmNyb3Nzb3JpZ2luKTtcblxuICAgICAgICAgICAgaW1hZ2VFbGVtZW50LnNyYyA9IHNvdXJjZTtcbiAgICAgICAgICAgIHNvdXJjZSA9IGltYWdlRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIEJhc2VJbWFnZVJlc291cmNlLmNhbGwodGhpcywgc291cmNlKTtcblxuICAgICAgICAvLyBGaXJlRm94IDY4LCBhbmQgcG9zc2libHkgb3RoZXIgdmVyc2lvbnMsIHNlZW1zIGxpa2Ugc2V0dGluZyB0aGUgSFRNTEltYWdlRWxlbWVudCN3aWR0aCBhbmQgI2hlaWdodFxuICAgICAgICAvLyB0byBub24temVybyB2YWx1ZXMgYmVmb3JlIGl0cyBsb2FkaW5nIGNvbXBsZXRlcyBpZiBpbWFnZXMgYXJlIGluIGEgY2FjaGUuXG4gICAgICAgIC8vIEJlY2F1c2Ugb2YgdGhpcywgbmVlZCB0byBzZXQgdGhlIGBfd2lkdGhgIGFuZCB0aGUgYF9oZWlnaHRgIHRvIHplcm8gdG8gYXZvaWQgdXBsb2FkaW5nIGluY29tcGxldGUgaW1hZ2VzLlxuICAgICAgICAvLyBQbGVhc2UgcmVmZXIgdG8gdGhlIGlzc3VlICM1OTY4IChodHRwczovL2dpdGh1Yi5jb20vcGl4aWpzL3BpeGkuanMvaXNzdWVzLzU5NjgpLlxuICAgICAgICBpZiAoIXNvdXJjZS5jb21wbGV0ZSAmJiAhIXRoaXMuX3dpZHRoICYmICEhdGhpcy5faGVpZ2h0KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl93aWR0aCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVSTCBvZiB0aGUgaW1hZ2Ugc291cmNlXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudXJsID0gc291cmNlLnNyYztcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBwcm9jZXNzIGlzIGNvbXBsZXRlZFxuICAgICAgICAgKiBAbWVtYmVyIHtQcm9taXNlPHZvaWQ+fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcHJvY2VzcyA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZSBpbWFnZSBzaG91bGQgYmUgZGlzcG9zZWQgYWZ0ZXIgdXBsb2FkXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnByZXNlcnZlQml0bWFwID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGNhcGFibGUsIGNvbnZlcnQgdGhlIGltYWdlIHVzaW5nIGNyZWF0ZUltYWdlQml0bWFwIEFQSVxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCBQSVhJLnNldHRpbmdzLkNSRUFURV9JTUFHRV9CSVRNQVBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3JlYXRlQml0bWFwID0gKG9wdGlvbnMuY3JlYXRlQml0bWFwICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gb3B0aW9ucy5jcmVhdGVCaXRtYXAgOiBzZXR0aW5ncy5DUkVBVEVfSU1BR0VfQklUTUFQKSAmJiAhIXdpbmRvdy5jcmVhdGVJbWFnZUJpdG1hcDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbHMgdGV4dHVyZSBwcmVtdWx0aXBseUFscGhhIGZpZWxkXG4gICAgICAgICAqIENvcGllcyBmcm9tIG9wdGlvbnNcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbnxudWxsfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IG9wdGlvbnMucHJlbXVsdGlwbHlBbHBoYSAhPT0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBJbWFnZUJpdG1hcCBlbGVtZW50IGNyZWF0ZWQgZm9yIEhUTUxJbWFnZUVsZW1lbnRcbiAgICAgICAgICogQG1lbWJlciB7SW1hZ2VCaXRtYXB9XG4gICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYml0bWFwID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvbWlzZSB3aGVuIGxvYWRpbmdcbiAgICAgICAgICogQG1lbWJlciB7UHJvbWlzZTx2b2lkPn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbG9hZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXV0b0xvYWQgIT09IGZhbHNlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICggQmFzZUltYWdlUmVzb3VyY2UgKSBJbWFnZVJlc291cmNlLl9fcHJvdG9fXyA9IEJhc2VJbWFnZVJlc291cmNlO1xuICAgIEltYWdlUmVzb3VyY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQmFzZUltYWdlUmVzb3VyY2UgJiYgQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlICk7XG4gICAgSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbWFnZVJlc291cmNlO1xuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyBhIHByb21pc2Ugd2hlbiBpbWFnZSB3aWxsIGJlIGxvYWRlZCBhbmQgcHJvY2Vzc2VkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjcmVhdGVCaXRtYXA9dHJ1ZV0gd2hldGhlciBwcm9jZXNzIGltYWdlIGludG8gYml0bWFwXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIGxvYWQgKGNyZWF0ZUJpdG1hcClcbiAgICB7XG4gICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgIGlmIChjcmVhdGVCaXRtYXAgIT09IHVuZGVmaW5lZClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVCaXRtYXAgPSBjcmVhdGVCaXRtYXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fbG9hZClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb2FkID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHRoaXMkMS51cmwgPSB0aGlzJDEuc291cmNlLnNyYztcbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzJDE7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gcmVmLnNvdXJjZTtcblxuICAgICAgICAgICAgdmFyIGNvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcyQxLmRlc3Ryb3llZClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc291cmNlLm9ubG9hZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgc291cmNlLm9uZXJyb3IgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgdGhpcyQxLnJlc2l6ZShzb3VyY2Uud2lkdGgsIHNvdXJjZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIHRoaXMkMS5fbG9hZCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcyQxLmNyZWF0ZUJpdG1hcClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcyQxLnByb2Nlc3MoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcyQxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoc291cmNlLmNvbXBsZXRlICYmIHNvdXJjZS5zcmMpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlLm9ubG9hZCA9IGNvbXBsZXRlZDtcbiAgICAgICAgICAgICAgICBzb3VyY2Uub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gdGhpcyQxLm9uRXJyb3IucnVuKGV2ZW50KTsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHdlIG5lZWQgdG8gY29udmVydCBpbWFnZSBpbnRvIEJpdG1hcEltYWdlLlxuICAgICAqIENhbiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMsIHJlYWwgcHJvbWlzZSBpcyBjYWNoZWQgaW5zaWRlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IGNhY2hlZCBwcm9taXNlIHRvIGZpbGwgdGhhdCBiaXRtYXBcbiAgICAgKi9cbiAgICBJbWFnZVJlc291cmNlLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcyAoKVxuICAgIHtcbiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMuX3Byb2Nlc3MgIT09IG51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJpdG1hcCAhPT0gbnVsbCB8fCAhd2luZG93LmNyZWF0ZUltYWdlQml0bWFwKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcHJvY2VzcyA9IHdpbmRvdy5jcmVhdGVJbWFnZUJpdG1hcCh0aGlzLnNvdXJjZSxcbiAgICAgICAgICAgIDAsIDAsIHRoaXMuc291cmNlLndpZHRoLCB0aGlzLnNvdXJjZS5oZWlnaHQsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcHJlbXVsdGlwbHlBbHBoYTogdGhpcy5wcmVtdWx0aXBseUFscGhhID8gJ3ByZW11bHRpcGx5JyA6ICdub25lJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYml0bWFwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMkMS5kZXN0cm95ZWQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcyQxLmJpdG1hcCA9IGJpdG1hcDtcbiAgICAgICAgICAgICAgICB0aGlzJDEudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcyQxLl9wcm9jZXNzID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcyQxKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgdGhlIGltYWdlIHJlc291cmNlIHRvIEdQVS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJlcn0gcmVuZGVyZXIgLSBSZW5kZXJlciB0byB1cGxvYWQgdG9cbiAgICAgKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IGJhc2VUZXh0dXJlIC0gQmFzZVRleHR1cmUgZm9yIHRoaXMgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0ge1BJWEkuR0xUZXh0dXJlfSBnbFRleHR1cmUgLSBHTFRleHR1cmUgdG8gdXNlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaXMgc3VjY2Vzc1xuICAgICAqL1xuICAgIEltYWdlUmVzb3VyY2UucHJvdG90eXBlLnVwbG9hZCA9IGZ1bmN0aW9uIHVwbG9hZCAocmVuZGVyZXIsIGJhc2VUZXh0dXJlLCBnbFRleHR1cmUpXG4gICAge1xuICAgICAgICBiYXNlVGV4dHVyZS5wcmVtdWx0aXBseUFscGhhID0gdGhpcy5wcmVtdWx0aXBseUFscGhhO1xuXG4gICAgICAgIGlmICghdGhpcy5jcmVhdGVCaXRtYXApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBCYXNlSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUudXBsb2FkLmNhbGwodGhpcywgcmVuZGVyZXIsIGJhc2VUZXh0dXJlLCBnbFRleHR1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5iaXRtYXApXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIHllYWgsIGlnbm9yZSB0aGUgb3V0cHV0XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3MoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5iaXRtYXApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlLnVwbG9hZC5jYWxsKHRoaXMsIHJlbmRlcmVyLCBiYXNlVGV4dHVyZSwgZ2xUZXh0dXJlLCB0aGlzLmJpdG1hcCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnByZXNlcnZlQml0bWFwKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBjaGVja3MgaWYgdGhlcmUgYXJlIG90aGVyIHJlbmRlcmVycyB0aGF0IHBvc3NpYmx5IG5lZWQgdGhpcyBiaXRtYXBcblxuICAgICAgICAgICAgdmFyIGZsYWcgPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYmFzZVRleHR1cmUuX2dsVGV4dHVyZXMpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVyVGV4ID0gYmFzZVRleHR1cmUuX2dsVGV4dHVyZXNba2V5XTtcblxuICAgICAgICAgICAgICAgIGlmIChvdGhlclRleCAhPT0gZ2xUZXh0dXJlICYmIG90aGVyVGV4LmRpcnR5SWQgIT09IGJhc2VUZXh0dXJlLmRpcnR5SWQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZsYWcpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYml0bWFwLmNsb3NlKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iaXRtYXAuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJpdG1hcCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhpcyB0ZXh0dXJlXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UgKClcbiAgICB7XG4gICAgICAgIHRoaXMuc291cmNlLm9ubG9hZCA9IG51bGw7XG4gICAgICAgIHRoaXMuc291cmNlLm9uZXJyb3IgPSBudWxsO1xuXG4gICAgICAgIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cbiAgICAgICAgaWYgKHRoaXMuYml0bWFwKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmJpdG1hcC5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5iaXRtYXAgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Byb2Nlc3MgPSBudWxsO1xuICAgICAgICB0aGlzLl9sb2FkID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEltYWdlUmVzb3VyY2U7XG59KEJhc2VJbWFnZVJlc291cmNlKSk7XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBpbnN0YWxsZWQgcmVzb3VyY2UgdHlwZXMsIGNsYXNzIG11c3QgZXh0ZW5kIHtAbGluayBQSVhJLnJlc291cmNlcy5SZXNvdXJjZX0uXG4gKiBAZXhhbXBsZVxuICogY2xhc3MgQ3VzdG9tUmVzb3VyY2UgZXh0ZW5kcyBQSVhJLnJlc291cmNlcy5SZXNvdXJjZSB7XG4gKiAgIC8vIE1VU1QgaGF2ZSBzb3VyY2UsIG9wdGlvbnMgY29uc3RydWN0b3Igc2lnbmF0dXJlXG4gKiAgIC8vIGZvciBhdXRvLWRldGVjdGVkIHJlc291cmNlcyB0byBiZSBjcmVhdGVkLlxuICogICBjb25zdHJ1Y3Rvcihzb3VyY2UsIG9wdGlvbnMpIHtcbiAqICAgICBzdXBlcigpO1xuICogICB9XG4gKiAgIHVwbG9hZChyZW5kZXJlciwgYmFzZVRleHR1cmUsIGdsVGV4dHVyZSkge1xuICogICAgIC8vIHVwbG9hZCB3aXRoIEdMXG4gKiAgICAgcmV0dXJuIHRydWU7XG4gKiAgIH1cbiAqICAgLy8gdXNlZCB0byBhdXRvLWRldGVjdCByZXNvdXJjZVxuICogICBzdGF0aWMgdGVzdChzb3VyY2UsIGV4dGVuc2lvbikge1xuICogICAgIHJldHVybiBleHRlbnNpb24gPT09ICd4eXonfHwgc291cmNlIGluc3RhbmNlb2YgU29tZUNsYXNzO1xuICogICB9XG4gKiB9XG4gKiAvLyBJbnN0YWxsIHRoZSBuZXcgcmVzb3VyY2UgdHlwZVxuICogUElYSS5yZXNvdXJjZXMuSU5TVEFMTEVELnB1c2goQ3VzdG9tUmVzb3VyY2UpO1xuICpcbiAqIEBuYW1lIFBJWEkucmVzb3VyY2VzLklOU1RBTExFRFxuICogQHR5cGUge0FycmF5PCo+fVxuICogQHN0YXRpY1xuICogQHJlYWRvbmx5XG4gKi9cbnZhciBJTlNUQUxMRUQgPSBbXTtcblxuLyoqXG4gKiBDcmVhdGUgYSByZXNvdXJjZSBlbGVtZW50IGZyb20gYSBzaW5nbGUgc291cmNlIGVsZW1lbnQuIFRoaXNcbiAqIGF1dG8tZGV0ZWN0cyB3aGljaCB0eXBlIG9mIHJlc291cmNlIHRvIGNyZWF0ZS4gQWxsIHJlc291cmNlcyB0aGF0XG4gKiBhcmUgYXV0by1kZXRlY3RhYmxlIG11c3QgaGF2ZSBhIHN0YXRpYyBgdGVzdGAgbWV0aG9kIGFuZCBhIGNvbnN0cnVjdG9yXG4gKiB3aXRoIHRoZSBhcmd1bWVudHMgYChzb3VyY2UsIG9wdGlvbnM/KWAuIEN1cnJlbnRseSwgdGhlIHN1cHBvcnRlZFxuICogcmVzb3VyY2VzIGZvciBhdXRvLWRldGVjdGlvbiBpbmNsdWRlOlxuICogIC0ge0BsaW5rIFBJWEkucmVzb3VyY2VzLkltYWdlUmVzb3VyY2V9XG4gKiAgLSB7QGxpbmsgUElYSS5yZXNvdXJjZXMuQ2FudmFzUmVzb3VyY2V9XG4gKiAgLSB7QGxpbmsgUElYSS5yZXNvdXJjZXMuVmlkZW9SZXNvdXJjZX1cbiAqICAtIHtAbGluayBQSVhJLnJlc291cmNlcy5TVkdSZXNvdXJjZX1cbiAqICAtIHtAbGluayBQSVhJLnJlc291cmNlcy5CdWZmZXJSZXNvdXJjZX1cbiAqIEBzdGF0aWNcbiAqIEBmdW5jdGlvbiBQSVhJLnJlc291cmNlcy5hdXRvRGV0ZWN0UmVzb3VyY2VcbiAqIEBwYXJhbSB7c3RyaW5nfCp9IHNvdXJjZSAtIFJlc291cmNlIHNvdXJjZSwgdGhpcyBjYW4gYmUgdGhlIFVSTCB0byB0aGUgcmVzb3VyY2UsXG4gKiAgICAgICAgYSB0eXBlZC1hcnJheSAoZm9yIEJ1ZmZlclJlc291cmNlKSwgSFRNTFZpZGVvRWxlbWVudCwgU1ZHIGRhdGEtdXJpXG4gKiAgICAgICAgb3IgYW55IG90aGVyIHJlc291cmNlIHRoYXQgY2FuIGJlIGF1dG8tZGV0ZWN0ZWQuIElmIG5vdCByZXNvdXJjZSBpc1xuICogICAgICAgIGRldGVjdGVkLCBpdCdzIGFzc3VtZWQgdG8gYmUgYW4gSW1hZ2VSZXNvdXJjZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBQYXNzLXRocm91Z2ggb3B0aW9ucyB0byB1c2UgZm9yIFJlc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud2lkdGhdIC0gV2lkdGggb2YgQnVmZmVyUmVzb3VyY2Ugb3IgU1ZHIHJhc3Rlcml6YXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5oZWlnaHRdIC0gSGVpZ2h0IG9mIEJ1ZmZlclJlc291cmNlIG9yIFNWRyByYXN0ZXJpemF0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmF1dG9Mb2FkPXRydWVdIC0gSW1hZ2UsIFNWRyBhbmQgVmlkZW8gZmxhZyB0byBzdGFydCBsb2FkaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc2NhbGU9MV0gLSBTVkcgc291cmNlIHNjYWxlLiBPdmVycmlkZGVuIGJ5IHdpZHRoLCBoZWlnaHRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY3JlYXRlQml0bWFwPVBJWEkuc2V0dGluZ3MuQ1JFQVRFX0lNQUdFX0JJVE1BUF0gLSBJbWFnZSBvcHRpb24gdG8gY3JlYXRlIEJpdG1hcCBvYmplY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY3Jvc3NvcmlnaW49dHJ1ZV0gLSBJbWFnZSBhbmQgVmlkZW8gb3B0aW9uIHRvIHNldCBjcm9zc09yaWdpblxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hdXRvUGxheT10cnVlXSAtIFZpZGVvIG9wdGlvbiB0byBzdGFydCBwbGF5aW5nIHZpZGVvIGltbWVkaWF0ZWx5XG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMudXBkYXRlRlBTPTBdIC0gVmlkZW8gb3B0aW9uIHRvIHVwZGF0ZSBob3cgbWFueSB0aW1lcyBhIHNlY29uZCB0aGVcbiAqICAgICAgICB0ZXh0dXJlIHNob3VsZCBiZSB1cGRhdGVkIGZyb20gdGhlIHZpZGVvLiBMZWF2ZSBhdCAwIHRvIHVwZGF0ZSBhdCBldmVyeSByZW5kZXJcbiAqIEByZXR1cm4ge1BJWEkucmVzb3VyY2VzLlJlc291cmNlfSBUaGUgY3JlYXRlZCByZXNvdXJjZS5cbiAqL1xuZnVuY3Rpb24gYXV0b0RldGVjdFJlc291cmNlKHNvdXJjZSwgb3B0aW9ucylcbntcbiAgICBpZiAoIXNvdXJjZSlcbiAgICB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBleHRlbnNpb24gPSAnJztcblxuICAgIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJylcbiAgICB7XG4gICAgICAgIC8vIHNlYXJjaCBmb3IgZmlsZSBleHRlbnNpb246IHBlcmlvZCwgMy00IGNoYXJzLCB0aGVuID8sICMgb3IgRU9MXG4gICAgICAgIHZhciByZXN1bHQgPSAoL1xcLihcXHd7Myw0fSkoPzokfFxcP3wjKS9pKS5leGVjKHNvdXJjZSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdClcbiAgICAgICAge1xuICAgICAgICAgICAgZXh0ZW5zaW9uID0gcmVzdWx0WzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gSU5TVEFMTEVELmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKVxuICAgIHtcbiAgICAgICAgdmFyIFJlc291cmNlUGx1Z2luID0gSU5TVEFMTEVEW2ldO1xuXG4gICAgICAgIGlmIChSZXNvdXJjZVBsdWdpbi50ZXN0ICYmIFJlc291cmNlUGx1Z2luLnRlc3Qoc291cmNlLCBleHRlbnNpb24pKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlc291cmNlUGx1Z2luKHNvdXJjZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXaGVuIGluIGRvdWJ0OiBwcm9iYWJseSBhbiBpbWFnZVxuICAgIC8vIG1pZ2h0IGJlIGFwcHJvcHJpYXRlIHRvIHRocm93IGFuIGVycm9yIG9yIHJldHVybiBudWxsXG4gICAgcmV0dXJuIG5ldyBJbWFnZVJlc291cmNlKHNvdXJjZSwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogQGludGVyZmFjZSBTaGFyZWRBcnJheUJ1ZmZlclxuICovXG5cbi8qKlxuICogQnVmZmVyIHJlc291cmNlIHdpdGggZGF0YSBvZiB0eXBlZCBhcnJheS5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5yZXNvdXJjZXMuUmVzb3VyY2VcbiAqIEBtZW1iZXJvZiBQSVhJLnJlc291cmNlc1xuICovXG52YXIgQnVmZmVyUmVzb3VyY2UgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChSZXNvdXJjZSkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlclJlc291cmNlKHNvdXJjZSwgb3B0aW9ucylcbiAgICB7XG4gICAgICAgIHZhciByZWYgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgd2lkdGggPSByZWYud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuXG4gICAgICAgIGlmICghd2lkdGggfHwgIWhlaWdodClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCdWZmZXJSZXNvdXJjZSB3aWR0aCBvciBoZWlnaHQgaW52YWxpZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgUmVzb3VyY2UuY2FsbCh0aGlzLCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU291cmNlIGFycmF5XG4gICAgICAgICAqIENhbm5vdCBiZSBDbGFtcGVkVWludDhBcnJheSBiZWNhdXNlIGl0IGNhbnQgYmUgdXBsb2FkZWQgdG8gV2ViR0xcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7RmxvYXQzMkFycmF5fFVpbnQ4QXJyYXl8VWludDMyQXJyYXl9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRhdGEgPSBzb3VyY2U7XG4gICAgfVxuXG4gICAgaWYgKCBSZXNvdXJjZSApIEJ1ZmZlclJlc291cmNlLl9fcHJvdG9fXyA9IFJlc291cmNlO1xuICAgIEJ1ZmZlclJlc291cmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFJlc291cmNlICYmIFJlc291cmNlLnByb3RvdHlwZSApO1xuICAgIEJ1ZmZlclJlc291cmNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJ1ZmZlclJlc291cmNlO1xuXG4gICAgLyoqXG4gICAgICogVXBsb2FkIHRoZSB0ZXh0dXJlIHRvIHRoZSBHUFUuXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlcmVyfSByZW5kZXJlciBVcGxvYWQgdG8gdGhlIHJlbmRlcmVyXG4gICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSBSZWZlcmVuY2UgdG8gcGFyZW50IHRleHR1cmVcbiAgICAgKiBAcGFyYW0ge1BJWEkuR0xUZXh0dXJlfSBnbFRleHR1cmUgZ2xUZXh0dXJlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaXMgc3VjY2Vzc1xuICAgICAqL1xuICAgIEJ1ZmZlclJlc291cmNlLnByb3RvdHlwZS51cGxvYWQgPSBmdW5jdGlvbiB1cGxvYWQgKHJlbmRlcmVyLCBiYXNlVGV4dHVyZSwgZ2xUZXh0dXJlKVxuICAgIHtcbiAgICAgICAgdmFyIGdsID0gcmVuZGVyZXIuZ2w7XG5cbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCBiYXNlVGV4dHVyZS5wcmVtdWx0aXBseUFscGhhKTtcblxuICAgICAgICBpZiAoZ2xUZXh0dXJlLndpZHRoID09PSBiYXNlVGV4dHVyZS53aWR0aCAmJiBnbFRleHR1cmUuaGVpZ2h0ID09PSBiYXNlVGV4dHVyZS5oZWlnaHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLnRleFN1YkltYWdlMkQoXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUudGFyZ2V0LFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLndpZHRoLFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLmhlaWdodCxcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUudHlwZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBnbFRleHR1cmUud2lkdGggPSBiYXNlVGV4dHVyZS53aWR0aDtcbiAgICAgICAgICAgIGdsVGV4dHVyZS5oZWlnaHQgPSBiYXNlVGV4dHVyZS5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQoXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUudGFyZ2V0LFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgZ2xUZXh0dXJlLmludGVybmFsRm9ybWF0LFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLndpZHRoLFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLmhlaWdodCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSBhbmQgZG9uJ3QgdXNlIGFmdGVyIHRoaXNcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBCdWZmZXJSZXNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZGF0YSA9IG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gYXV0by1kZXRlY3QgdGhlIHR5cGUgb2YgcmVzb3VyY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHsqfSBzb3VyY2UgLSBUaGUgc291cmNlIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiA8Y2FudmFzPlxuICAgICAqL1xuICAgIEJ1ZmZlclJlc291cmNlLnRlc3QgPSBmdW5jdGlvbiB0ZXN0IChzb3VyY2UpXG4gICAge1xuICAgICAgICByZXR1cm4gc291cmNlIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5XG4gICAgICAgICAgICB8fCBzb3VyY2UgaW5zdGFuY2VvZiBVaW50OEFycmF5XG4gICAgICAgICAgICB8fCBzb3VyY2UgaW5zdGFuY2VvZiBVaW50MzJBcnJheTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJ1ZmZlclJlc291cmNlO1xufShSZXNvdXJjZSkpO1xuXG52YXIgZGVmYXVsdEJ1ZmZlck9wdGlvbnMgPSB7XG4gICAgc2NhbGVNb2RlOiBTQ0FMRV9NT0RFUy5ORUFSRVNULFxuICAgIGZvcm1hdDogRk9STUFUUy5SR0JBLFxuICAgIHByZW11bHRpcGx5QWxwaGE6IGZhbHNlLFxufTtcblxuLyoqXG4gKiBBIFRleHR1cmUgc3RvcmVzIHRoZSBpbmZvcm1hdGlvbiB0aGF0IHJlcHJlc2VudHMgYW4gaW1hZ2UuXG4gKiBBbGwgdGV4dHVyZXMgaGF2ZSBhIGJhc2UgdGV4dHVyZSwgd2hpY2ggY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNvdXJjZS5cbiAqIFRoZXJlZm9yZSB5b3UgY2FuIGhhdmUgbWFueSB0ZXh0dXJlcyBhbGwgdXNpbmcgYSBzaW5nbGUgQmFzZVRleHR1cmVcbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkudXRpbHMuRXZlbnRFbWl0dGVyXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQHBhcmFtIHtQSVhJLnJlc291cmNlcy5SZXNvdXJjZXxzdHJpbmd8SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudHxIVE1MVmlkZW9FbGVtZW50fSBbcmVzb3VyY2U9bnVsbF1cbiAqICAgICAgICBUaGUgY3VycmVudCByZXNvdXJjZSB0byB1c2UsIGZvciB0aGluZ3MgdGhhdCBhcmVuJ3QgUmVzb3VyY2Ugb2JqZWN0cywgd2lsbCBiZSBjb252ZXJ0ZWRcbiAqICAgICAgICBpbnRvIGEgUmVzb3VyY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQ29sbGVjdGlvbiBvZiBvcHRpb25zXG4gKiBAcGFyYW0ge1BJWEkuTUlQTUFQX01PREVTfSBbb3B0aW9ucy5taXBtYXA9UElYSS5zZXR0aW5ncy5NSVBNQVBfVEVYVFVSRVNdIC0gSWYgbWlwbWFwcGluZyBpcyBlbmFibGVkIGZvciB0ZXh0dXJlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuYW5pc290cm9waWNMZXZlbD1QSVhJLnNldHRpbmdzLkFOSVNPVFJPUElDX0xFVkVMXSAtIEFuaXNvdHJvcGljIGZpbHRlcmluZyBsZXZlbCBvZiB0ZXh0dXJlXG4gKiBAcGFyYW0ge1BJWEkuV1JBUF9NT0RFU30gW29wdGlvbnMud3JhcE1vZGU9UElYSS5zZXR0aW5ncy5XUkFQX01PREVdIC0gV3JhcCBtb2RlIGZvciB0ZXh0dXJlc1xuICogQHBhcmFtIHtQSVhJLlNDQUxFX01PREVTfSBbb3B0aW9ucy5zY2FsZU1vZGU9UElYSS5zZXR0aW5ncy5TQ0FMRV9NT0RFXSAtIERlZmF1bHQgc2NhbGUgbW9kZSwgbGluZWFyLCBuZWFyZXN0XG4gKiBAcGFyYW0ge1BJWEkuRk9STUFUU30gW29wdGlvbnMuZm9ybWF0PVBJWEkuRk9STUFUUy5SR0JBXSAtIEdMIGZvcm1hdCB0eXBlXG4gKiBAcGFyYW0ge1BJWEkuVFlQRVN9IFtvcHRpb25zLnR5cGU9UElYSS5UWVBFUy5VTlNJR05FRF9CWVRFXSAtIEdMIGRhdGEgdHlwZVxuICogQHBhcmFtIHtQSVhJLlRBUkdFVFN9IFtvcHRpb25zLnRhcmdldD1QSVhJLlRBUkdFVFMuVEVYVFVSRV8yRF0gLSBHTCB0ZXh0dXJlIHRhcmdldFxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wcmVtdWx0aXBseUFscGhhPXRydWVdIC0gUHJlIG11bHRpcGx5IHRoZSBpbWFnZSBhbHBoYVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndpZHRoPTBdIC0gV2lkdGggb2YgdGhlIHRleHR1cmVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5oZWlnaHQ9MF0gLSBIZWlnaHQgb2YgdGhlIHRleHR1cmVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5yZXNvbHV0aW9uXSAtIFJlc29sdXRpb24gb2YgdGhlIGJhc2UgdGV4dHVyZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnJlc291cmNlT3B0aW9uc10gLSBPcHRpb25hbCByZXNvdXJjZSBvcHRpb25zLFxuICogICAgICAgIHNlZSB7QGxpbmsgUElYSS5yZXNvdXJjZXMuYXV0b0RldGVjdFJlc291cmNlIGF1dG9EZXRlY3RSZXNvdXJjZX1cbiAqL1xudmFyIEJhc2VUZXh0dXJlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoRXZlbnRFbWl0dGVyKSB7XG4gICAgZnVuY3Rpb24gQmFzZVRleHR1cmUocmVzb3VyY2UsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICBpZiAoIHJlc291cmNlID09PSB2b2lkIDAgKSByZXNvdXJjZSA9IG51bGw7XG4gICAgICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IG51bGw7XG5cbiAgICAgICAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdmFyIHByZW11bHRpcGx5QWxwaGEgPSBvcHRpb25zLnByZW11bHRpcGx5QWxwaGE7XG4gICAgICAgIHZhciBtaXBtYXAgPSBvcHRpb25zLm1pcG1hcDtcbiAgICAgICAgdmFyIGFuaXNvdHJvcGljTGV2ZWwgPSBvcHRpb25zLmFuaXNvdHJvcGljTGV2ZWw7XG4gICAgICAgIHZhciBzY2FsZU1vZGUgPSBvcHRpb25zLnNjYWxlTW9kZTtcbiAgICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0O1xuICAgICAgICB2YXIgd3JhcE1vZGUgPSBvcHRpb25zLndyYXBNb2RlO1xuICAgICAgICB2YXIgZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQ7XG4gICAgICAgIHZhciB0eXBlID0gb3B0aW9ucy50eXBlO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gb3B0aW9ucy50YXJnZXQ7XG4gICAgICAgIHZhciByZXNvbHV0aW9uID0gb3B0aW9ucy5yZXNvbHV0aW9uO1xuICAgICAgICB2YXIgcmVzb3VyY2VPcHRpb25zID0gb3B0aW9ucy5yZXNvdXJjZU9wdGlvbnM7XG5cbiAgICAgICAgLy8gQ29udmVydCB0aGUgcmVzb3VyY2UgdG8gYSBSZXNvdXJjZSBvYmplY3RcbiAgICAgICAgaWYgKHJlc291cmNlICYmICEocmVzb3VyY2UgaW5zdGFuY2VvZiBSZXNvdXJjZSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlc291cmNlID0gYXV0b0RldGVjdFJlc291cmNlKHJlc291cmNlLCByZXNvdXJjZU9wdGlvbnMpO1xuICAgICAgICAgICAgcmVzb3VyY2UuaW50ZXJuYWwgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgYmFzZSB0ZXh0dXJlIHNldCB3aGVuIHRoZSBpbWFnZSBoYXMgbG9hZGVkXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGggfHwgMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGhlaWdodCBvZiB0aGUgYmFzZSB0ZXh0dXJlIHNldCB3aGVuIHRoZSBpbWFnZSBoYXMgbG9hZGVkXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodCB8fCAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmVzb2x1dGlvbiAvIGRldmljZSBwaXhlbCByYXRpbyBvZiB0aGUgdGV4dHVyZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuc2V0dGluZ3MuUkVTT0xVVElPTlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXNvbHV0aW9uID0gcmVzb2x1dGlvbiB8fCBzZXR0aW5ncy5SRVNPTFVUSU9OO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNaXBtYXAgbW9kZSBvZiB0aGUgdGV4dHVyZSwgYWZmZWN0cyBkb3duc2NhbGVkIGltYWdlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLk1JUE1BUF9NT0RFU31cbiAgICAgICAgICogQGRlZmF1bHQgUElYSS5zZXR0aW5ncy5NSVBNQVBfVEVYVFVSRVNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWlwbWFwID0gbWlwbWFwICE9PSB1bmRlZmluZWQgPyBtaXBtYXAgOiBzZXR0aW5ncy5NSVBNQVBfVEVYVFVSRVM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuaXNvdHJvcGljIGZpbHRlcmluZyBsZXZlbCBvZiB0ZXh0dXJlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgUElYSS5zZXR0aW5ncy5BTklTT1RST1BJQ19MRVZFTFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hbmlzb3Ryb3BpY0xldmVsID0gYW5pc290cm9waWNMZXZlbCAhPT0gdW5kZWZpbmVkID8gYW5pc290cm9waWNMZXZlbCA6IHNldHRpbmdzLkFOSVNPVFJPUElDX0xFVkVMO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb3cgdGhlIHRleHR1cmUgd3JhcHNcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53cmFwTW9kZSA9IHdyYXBNb2RlIHx8IHNldHRpbmdzLldSQVBfTU9ERTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHNjYWxlIG1vZGUgdG8gYXBwbHkgd2hlbiBzY2FsaW5nIHRoaXMgdGV4dHVyZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlNDQUxFX01PREVTfVxuICAgICAgICAgKiBAZGVmYXVsdCBQSVhJLnNldHRpbmdzLlNDQUxFX01PREVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2NhbGVNb2RlID0gc2NhbGVNb2RlICE9PSB1bmRlZmluZWQgPyBzY2FsZU1vZGUgOiBzZXR0aW5ncy5TQ0FMRV9NT0RFO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGl4ZWwgZm9ybWF0IG9mIHRoZSB0ZXh0dXJlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuRk9STUFUU31cbiAgICAgICAgICogQGRlZmF1bHQgUElYSS5GT1JNQVRTLlJHQkFcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0IHx8IEZPUk1BVFMuUkdCQTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgcmVzb3VyY2UgZGF0YVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlRZUEVTfVxuICAgICAgICAgKiBAZGVmYXVsdCBQSVhJLlRZUEVTLlVOU0lHTkVEX0JZVEVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGUgfHwgVFlQRVMuVU5TSUdORURfQllURTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRhcmdldCB0eXBlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuVEFSR0VUU31cbiAgICAgICAgICogQGRlZmF1bHQgUElYSS5UQVJHRVRTLlRFWFRVUkVfMkRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0IHx8IFRBUkdFVFMuVEVYVFVSRV8yRDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRvIHRydWUgdG8gZW5hYmxlIHByZS1tdWx0aXBsaWVkIGFscGhhXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IHByZW11bHRpcGx5QWxwaGEgIT09IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHbG9iYWwgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgQmFzZVRleHR1cmVcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVpZCA9IHVpZCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIGJ5IGF1dG9tYXRpYyB0ZXh0dXJlIEdhcmJhZ2UgQ29sbGVjdGlvbiwgc3RvcmVzIGxhc3QgR0MgdGljayB3aGVuIGl0IHdhcyBib3VuZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudG91Y2hlZCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSB0ZXh0dXJlIGlzIGEgcG93ZXIgb2YgdHdvLCB0cnkgdG8gdXNlIHBvd2VyIG9mIHR3byB0ZXh0dXJlcyBhcyBtdWNoXG4gICAgICAgICAqIGFzIHlvdSBjYW5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzUG93ZXJPZlR3byA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZWZyZXNoUE9UKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtYXAgb2YgcmVuZGVyIGNvbnRleHQgdGV4dHVyZXMgd2hlcmUgdGhpcyBpcyBib3VuZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9nbFRleHR1cmVzID0ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZWQgYnkgVGV4dHVyZVN5c3RlbSB0byBvbmx5IHVwZGF0ZSB0ZXh0dXJlIHRvIHRoZSBHUFUgd2hlbiBuZWVkZWQuXG4gICAgICAgICAqIFBsZWFzZSBjYWxsIGB1cGRhdGUoKWAgdG8gaW5jcmVtZW50IGl0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXJ0eUlkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXNlZCBieSBUZXh0dXJlU3lzdGVtIHRvIG9ubHkgdXBkYXRlIHRleHR1cmUgc3R5bGUgd2hlbiBuZWVkZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXJ0eVN0eWxlSWQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50bHkgZGVmYXVsdCBjYWNoZSBJRC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYWNoZUlkID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2VuZXJhbGx5IHNwZWFraW5nIG1lYW5zIHdoZW4gcmVzb3VyY2UgaXMgbG9hZGVkLlxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmFsaWQgPSB3aWR0aCA+IDAgJiYgaGVpZ2h0ID4gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbGxlY3Rpb24gb2YgYWx0ZXJuYXRpdmUgY2FjaGUgaWRzLCBzaW5jZSBzb21lIEJhc2VUZXh0dXJlc1xuICAgICAgICAgKiBjYW4gaGF2ZSBtb3JlIHRoYW4gb25lIElELCBzaG9ydCBuYW1lIGFuZCBsb25nZXIgZnVsbCBVUkxcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7QXJyYXk8c3RyaW5nPn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRleHR1cmVDYWNoZUlkcyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGbGFnIGlmIEJhc2VUZXh0dXJlIGhhcyBiZWVuIGRlc3Ryb3llZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmVzb3VyY2UgdXNlZCBieSB0aGlzIEJhc2VUZXh0dXJlLCB0aGVyZSBjYW4gb25seVxuICAgICAgICAgKiBiZSBvbmUgcmVzb3VyY2UgcGVyIEJhc2VUZXh0dXJlLCBidXQgdGV4dHVyZXMgY2FuIHNoYXJlXG4gICAgICAgICAqIHJlc291cmNlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5yZXNvdXJjZXMuUmVzb3VyY2V9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE51bWJlciBvZiB0aGUgdGV4dHVyZSBiYXRjaCwgdXNlZCBieSBtdWx0aS10ZXh0dXJlIHJlbmRlcmVyc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9iYXRjaEVuYWJsZWQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIGEgbm90LWltbWVkaWF0ZWx5LWF2YWlsYWJsZSBzb3VyY2UgZmluaXNoZXMgbG9hZGluZy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAZXZlbnQgUElYSS5CYXNlVGV4dHVyZSNsb2FkZWRcbiAgICAgICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSAtIFJlc291cmNlIGxvYWRlZC5cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gYSBub3QtaW1tZWRpYXRlbHktYXZhaWxhYmxlIHNvdXJjZSBmYWlscyB0byBsb2FkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEBldmVudCBQSVhJLkJhc2VUZXh0dXJlI2Vycm9yXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gYmFzZVRleHR1cmUgLSBSZXNvdXJjZSBlcnJvcmVkLlxuICAgICAgICAgKiBAcGFyYW0ge0Vycm9yRXZlbnR9IGV2ZW50IC0gTG9hZCBlcnJvciBldmVudC5cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gQmFzZVRleHR1cmUgaXMgdXBkYXRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAZXZlbnQgUElYSS5CYXNlVGV4dHVyZSNsb2FkZWRcbiAgICAgICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSAtIFJlc291cmNlIGxvYWRlZC5cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gQmFzZVRleHR1cmUgaXMgdXBkYXRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAZXZlbnQgUElYSS5CYXNlVGV4dHVyZSN1cGRhdGVcbiAgICAgICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSAtIEluc3RhbmNlIG9mIHRleHR1cmUgYmVpbmcgdXBkYXRlZC5cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gQmFzZVRleHR1cmUgaXMgZGVzdHJveWVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEBldmVudCBQSVhJLkJhc2VUZXh0dXJlI2Rpc3Bvc2VcbiAgICAgICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSAtIEluc3RhbmNlIG9mIHRleHR1cmUgYmVpbmcgZGVzdHJveWVkLlxuICAgICAgICAgKi9cblxuICAgICAgICAvLyBTZXQgdGhlIHJlc291cmNlXG4gICAgICAgIHRoaXMuc2V0UmVzb3VyY2UocmVzb3VyY2UpO1xuICAgIH1cblxuICAgIGlmICggRXZlbnRFbWl0dGVyICkgQmFzZVRleHR1cmUuX19wcm90b19fID0gRXZlbnRFbWl0dGVyO1xuICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2ZW50RW1pdHRlciAmJiBFdmVudEVtaXR0ZXIucHJvdG90eXBlICk7XG4gICAgQmFzZVRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQmFzZVRleHR1cmU7XG5cbiAgICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyByZWFsV2lkdGg6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scmVhbEhlaWdodDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgLyoqXG4gICAgICogUGl4ZWwgd2lkdGggb2YgdGhlIHNvdXJjZSBvZiB0aGlzIHRleHR1cmVcbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMucmVhbFdpZHRoLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKCh0aGlzLndpZHRoICogdGhpcy5yZXNvbHV0aW9uKSAtIDFlLTQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQaXhlbCBoZWlnaHQgb2YgdGhlIHNvdXJjZSBvZiB0aGlzIHRleHR1cmVcbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMucmVhbEhlaWdodC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCgodGhpcy5oZWlnaHQgKiB0aGlzLnJlc29sdXRpb24pIC0gMWUtNCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgc3R5bGUgb3B0aW9ucyBvZiBCYXNlVGV4dHVyZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlNDQUxFX01PREVTfSBbc2NhbGVNb2RlXSAtIFBpeGkgc2NhbGVtb2RlXG4gICAgICogQHBhcmFtIHtQSVhJLk1JUE1BUF9NT0RFU30gW21pcG1hcF0gLSBlbmFibGUgbWlwbWFwc1xuICAgICAqIEByZXR1cm5zIHtQSVhJLkJhc2VUZXh0dXJlfSB0aGlzXG4gICAgICovXG4gICAgQmFzZVRleHR1cmUucHJvdG90eXBlLnNldFN0eWxlID0gZnVuY3Rpb24gc2V0U3R5bGUgKHNjYWxlTW9kZSwgbWlwbWFwKVxuICAgIHtcbiAgICAgICAgdmFyIGRpcnR5O1xuXG4gICAgICAgIGlmIChzY2FsZU1vZGUgIT09IHVuZGVmaW5lZCAmJiBzY2FsZU1vZGUgIT09IHRoaXMuc2NhbGVNb2RlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnNjYWxlTW9kZSA9IHNjYWxlTW9kZTtcbiAgICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtaXBtYXAgIT09IHVuZGVmaW5lZCAmJiBtaXBtYXAgIT09IHRoaXMubWlwbWFwKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLm1pcG1hcCA9IG1pcG1hcDtcbiAgICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJ0eSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eVN0eWxlSWQrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHcvaC9yZXNvbHV0aW9uLiBUZXh0dXJlIGJlY29tZXMgdmFsaWQgaWYgd2lkdGggYW5kIGhlaWdodCBhcmUgZ3JlYXRlciB0aGFuIHplcm8uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggVmlzdWFsIHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBWaXN1YWwgaGVpZ2h0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyZXNvbHV0aW9uXSBPcHRpb25hbGx5IHNldCByZXNvbHV0aW9uXG4gICAgICogQHJldHVybnMge1BJWEkuQmFzZVRleHR1cmV9IHRoaXNcbiAgICAgKi9cbiAgICBCYXNlVGV4dHVyZS5wcm90b3R5cGUuc2V0U2l6ZSA9IGZ1bmN0aW9uIHNldFNpemUgKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb24pXG4gICAge1xuICAgICAgICB0aGlzLnJlc29sdXRpb24gPSByZXNvbHV0aW9uIHx8IHRoaXMucmVzb2x1dGlvbjtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5fcmVmcmVzaFBPVCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHJlYWwgc2l6ZSBvZiBiYXNlVGV4dHVyZSwgcHJlc2VydmVzIGN1cnJlbnQgcmVzb2x1dGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByZWFsV2lkdGggRnVsbCByZW5kZXJlZCB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByZWFsSGVpZ2h0IEZ1bGwgcmVuZGVyZWQgaGVpZ2h0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyZXNvbHV0aW9uXSBPcHRpb25hbGx5IHNldCByZXNvbHV0aW9uXG4gICAgICogQHJldHVybnMge1BJWEkuQmFzZVRleHR1cmV9IHRoaXNcbiAgICAgKi9cbiAgICBCYXNlVGV4dHVyZS5wcm90b3R5cGUuc2V0UmVhbFNpemUgPSBmdW5jdGlvbiBzZXRSZWFsU2l6ZSAocmVhbFdpZHRoLCByZWFsSGVpZ2h0LCByZXNvbHV0aW9uKVxuICAgIHtcbiAgICAgICAgdGhpcy5yZXNvbHV0aW9uID0gcmVzb2x1dGlvbiB8fCB0aGlzLnJlc29sdXRpb247XG4gICAgICAgIHRoaXMud2lkdGggPSByZWFsV2lkdGggLyB0aGlzLnJlc29sdXRpb247XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gcmVhbEhlaWdodCAvIHRoaXMucmVzb2x1dGlvbjtcbiAgICAgICAgdGhpcy5fcmVmcmVzaFBPVCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWZyZXNoIGNoZWNrIGZvciBpc1Bvd2VyT2ZUd28gdGV4dHVyZSBiYXNlZCBvbiBzaXplXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZS5fcmVmcmVzaFBPVCA9IGZ1bmN0aW9uIF9yZWZyZXNoUE9UICgpXG4gICAge1xuICAgICAgICB0aGlzLmlzUG93ZXJPZlR3byA9IGlzUG93Mih0aGlzLnJlYWxXaWR0aCkgJiYgaXNQb3cyKHRoaXMucmVhbEhlaWdodCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgcmVzb2x1dGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyZXNvbHV0aW9uXSByZXNcbiAgICAgKiBAcmV0dXJucyB7UElYSS5CYXNlVGV4dHVyZX0gdGhpc1xuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZS5zZXRSZXNvbHV0aW9uID0gZnVuY3Rpb24gc2V0UmVzb2x1dGlvbiAocmVzb2x1dGlvbilcbiAgICB7XG4gICAgICAgIHZhciBvbGRSZXNvbHV0aW9uID0gdGhpcy5yZXNvbHV0aW9uO1xuXG4gICAgICAgIGlmIChvbGRSZXNvbHV0aW9uID09PSByZXNvbHV0aW9uKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzb2x1dGlvbiA9IHJlc29sdXRpb247XG5cbiAgICAgICAgaWYgKHRoaXMudmFsaWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLndpZHRoICogb2xkUmVzb2x1dGlvbiAvIHJlc29sdXRpb247XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuaGVpZ2h0ICogb2xkUmVzb2x1dGlvbiAvIHJlc29sdXRpb247XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVmcmVzaFBPVCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSByZXNvdXJjZSBpZiBpdCB3YXNuJ3Qgc2V0LiBUaHJvd3MgZXJyb3IgaWYgcmVzb3VyY2UgYWxyZWFkeSBwcmVzZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkucmVzb3VyY2VzLlJlc291cmNlfSByZXNvdXJjZSAtIHRoYXQgaXMgbWFuYWdpbmcgdGhpcyBCYXNlVGV4dHVyZVxuICAgICAqIEByZXR1cm5zIHtQSVhJLkJhc2VUZXh0dXJlfSB0aGlzXG4gICAgICovXG4gICAgQmFzZVRleHR1cmUucHJvdG90eXBlLnNldFJlc291cmNlID0gZnVuY3Rpb24gc2V0UmVzb3VyY2UgKHJlc291cmNlKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMucmVzb3VyY2UgPT09IHJlc291cmNlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnJlc291cmNlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jlc291cmNlIGNhbiBiZSBzZXQgb25seSBvbmNlJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXNvdXJjZS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByZXNvdXJjZTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW52YWxpZGF0ZXMgdGhlIG9iamVjdC4gVGV4dHVyZSBiZWNvbWVzIHZhbGlkIGlmIHdpZHRoIGFuZCBoZWlnaHQgYXJlIGdyZWF0ZXIgdGhhbiB6ZXJvLlxuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKClcbiAgICB7XG4gICAgICAgIGlmICghdGhpcy52YWxpZClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHRoaXMud2lkdGggPiAwICYmIHRoaXMuaGVpZ2h0ID4gMClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2xvYWRlZCcsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgndXBkYXRlJywgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5SWQrKztcbiAgICAgICAgICAgIHRoaXMuZGlydHlTdHlsZUlkKys7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBlcnJvcnMgd2l0aCByZXNvdXJjZXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Vycm9yRXZlbnR9IGV2ZW50IC0gRXJyb3IgZXZlbnQgZW1pdHRlZC5cbiAgICAgKi9cbiAgICBCYXNlVGV4dHVyZS5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IgKGV2ZW50KVxuICAgIHtcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHRoaXMsIGV2ZW50KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhpcyBiYXNlIHRleHR1cmUuXG4gICAgICogVGhlIG1ldGhvZCBzdG9wcyBpZiByZXNvdXJjZSBkb2Vzbid0IHdhbnQgdGhpcyB0ZXh0dXJlIHRvIGJlIGRlc3Ryb3llZC5cbiAgICAgKiBSZW1vdmVzIHRleHR1cmUgZnJvbSBhbGwgY2FjaGVzLlxuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxuICAgIHtcbiAgICAgICAgLy8gcmVtb3ZlIGFuZCBkZXN0cm95IHRoZSByZXNvdXJjZVxuICAgICAgICBpZiAodGhpcy5yZXNvdXJjZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZS51bmJpbmQodGhpcyk7XG4gICAgICAgICAgICAvLyBvbmx5IGRlc3Ryb3kgcmVzb3VyY2VkIGNyZWF0ZWQgaW50ZXJuYWxseVxuICAgICAgICAgICAgaWYgKHRoaXMucmVzb3VyY2UuaW50ZXJuYWwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNvdXJjZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlc291cmNlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNhY2hlSWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlbGV0ZSBCYXNlVGV4dHVyZUNhY2hlW3RoaXMuY2FjaGVJZF07XG4gICAgICAgICAgICBkZWxldGUgVGV4dHVyZUNhY2hlW3RoaXMuY2FjaGVJZF07XG5cbiAgICAgICAgICAgIHRoaXMuY2FjaGVJZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5hbGx5IGxldCB0aGUgV2ViR0wgcmVuZGVyZXIga25vdy4uXG4gICAgICAgIHRoaXMuZGlzcG9zZSgpO1xuXG4gICAgICAgIEJhc2VUZXh0dXJlLnJlbW92ZUZyb21DYWNoZSh0aGlzKTtcbiAgICAgICAgdGhpcy50ZXh0dXJlQ2FjaGVJZHMgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRnJlZXMgdGhlIHRleHR1cmUgZnJvbSBXZWJHTCBtZW1vcnkgd2l0aG91dCBkZXN0cm95aW5nIHRoaXMgdGV4dHVyZSBvYmplY3QuXG4gICAgICogVGhpcyBtZWFucyB5b3UgY2FuIHN0aWxsIHVzZSB0aGUgdGV4dHVyZSBsYXRlciB3aGljaCB3aWxsIHVwbG9hZCBpdCB0byBHUFVcbiAgICAgKiBtZW1vcnkgYWdhaW4uXG4gICAgICpcbiAgICAgKiBAZmlyZXMgUElYSS5CYXNlVGV4dHVyZSNkaXNwb3NlXG4gICAgICovXG4gICAgQmFzZVRleHR1cmUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlICgpXG4gICAge1xuICAgICAgICB0aGlzLmVtaXQoJ2Rpc3Bvc2UnLCB0aGlzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIGJhc2UgdGV4dHVyZSBiYXNlZCBvbiB0aGUgc291cmNlIHlvdSBwcm92aWRlLlxuICAgICAqIFRoZSBzb3VyY2UgY2FuIGJlIC0gaW1hZ2UgdXJsLCBpbWFnZSBlbGVtZW50LCBjYW52YXMgZWxlbWVudC4gSWYgdGhlXG4gICAgICogc291cmNlIGlzIGFuIGltYWdlIHVybCBvciBhbiBpbWFnZSBlbGVtZW50IGFuZCBub3QgaW4gdGhlIGJhc2UgdGV4dHVyZVxuICAgICAqIGNhY2hlLCBpdCB3aWxsIGJlIGNyZWF0ZWQgYW5kIGxvYWRlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fFNWR0VsZW1lbnR8SFRNTFZpZGVvRWxlbWVudH0gc291cmNlIC0gVGhlXG4gICAgICogICAgICAgIHNvdXJjZSB0byBjcmVhdGUgYmFzZSB0ZXh0dXJlIGZyb20uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBTZWUge0BsaW5rIFBJWEkuQmFzZVRleHR1cmV9J3MgY29uc3RydWN0b3IgZm9yIG9wdGlvbnMuXG4gICAgICogQHJldHVybnMge1BJWEkuQmFzZVRleHR1cmV9IFRoZSBuZXcgYmFzZSB0ZXh0dXJlLlxuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLmZyb20gPSBmdW5jdGlvbiBmcm9tIChzb3VyY2UsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICB2YXIgY2FjaGVJZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKVxuICAgICAgICB7XG4gICAgICAgICAgICBjYWNoZUlkID0gc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UuX3BpeGlJZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UuX3BpeGlJZCA9IFwicGl4aWlkX1wiICsgKHVpZCgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FjaGVJZCA9IHNvdXJjZS5fcGl4aUlkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJhc2VUZXh0dXJlID0gQmFzZVRleHR1cmVDYWNoZVtjYWNoZUlkXTtcblxuICAgICAgICBpZiAoIWJhc2VUZXh0dXJlKVxuICAgICAgICB7XG4gICAgICAgICAgICBiYXNlVGV4dHVyZSA9IG5ldyBCYXNlVGV4dHVyZShzb3VyY2UsIG9wdGlvbnMpO1xuICAgICAgICAgICAgYmFzZVRleHR1cmUuY2FjaGVJZCA9IGNhY2hlSWQ7XG4gICAgICAgICAgICBCYXNlVGV4dHVyZS5hZGRUb0NhY2hlKGJhc2VUZXh0dXJlLCBjYWNoZUlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBiYXNlVGV4dHVyZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEJhc2VUZXh0dXJlIHdpdGggYSBCdWZmZXJSZXNvdXJjZSBmcm9tIGEgRmxvYXQzMkFycmF5LlxuICAgICAqIFJHQkEgdmFsdWVzIGFyZSBmbG9hdHMgZnJvbSAwIHRvIDEuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fFVpbnQ4QXJyYXl9IGJ1ZmZlciBUaGUgb3B0aW9uYWwgYXJyYXkgdG8gdXNlLCBpZiBubyBkYXRhXG4gICAgICogICAgICAgIGlzIHByb3ZpZGVkLCBhIG5ldyBGbG9hdDMyQXJyYXkgaXMgY3JlYXRlZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBXaWR0aCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gSGVpZ2h0IG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gU2VlIHtAbGluayBQSVhJLkJhc2VUZXh0dXJlfSdzIGNvbnN0cnVjdG9yIGZvciBvcHRpb25zLlxuICAgICAqIEByZXR1cm4ge1BJWEkuQmFzZVRleHR1cmV9IFRoZSByZXN1bHRpbmcgbmV3IEJhc2VUZXh0dXJlXG4gICAgICovXG4gICAgQmFzZVRleHR1cmUuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uIGZyb21CdWZmZXIgKGJ1ZmZlciwgd2lkdGgsIGhlaWdodCwgb3B0aW9ucylcbiAgICB7XG4gICAgICAgIGJ1ZmZlciA9IGJ1ZmZlciB8fCBuZXcgRmxvYXQzMkFycmF5KHdpZHRoICogaGVpZ2h0ICogNCk7XG5cbiAgICAgICAgdmFyIHJlc291cmNlID0gbmV3IEJ1ZmZlclJlc291cmNlKGJ1ZmZlciwgeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xuICAgICAgICB2YXIgdHlwZSA9IGJ1ZmZlciBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSA/IFRZUEVTLkZMT0FUIDogVFlQRVMuVU5TSUdORURfQllURTtcblxuICAgICAgICByZXR1cm4gbmV3IEJhc2VUZXh0dXJlKHJlc291cmNlLCBPYmplY3QuYXNzaWduKGRlZmF1bHRCdWZmZXJPcHRpb25zLCBvcHRpb25zIHx8IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgdHlwZTogdHlwZSB9KSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBCYXNlVGV4dHVyZSB0byB0aGUgZ2xvYmFsIEJhc2VUZXh0dXJlQ2FjaGUuIFRoaXMgY2FjaGUgaXMgc2hhcmVkIGFjcm9zcyB0aGUgd2hvbGUgUElYSSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSAtIFRoZSBCYXNlVGV4dHVyZSB0byBhZGQgdG8gdGhlIGNhY2hlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBpZCB0aGF0IHRoZSBCYXNlVGV4dHVyZSB3aWxsIGJlIHN0b3JlZCBhZ2FpbnN0LlxuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLmFkZFRvQ2FjaGUgPSBmdW5jdGlvbiBhZGRUb0NhY2hlIChiYXNlVGV4dHVyZSwgaWQpXG4gICAge1xuICAgICAgICBpZiAoaWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChiYXNlVGV4dHVyZS50ZXh0dXJlQ2FjaGVJZHMuaW5kZXhPZihpZCkgPT09IC0xKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLnRleHR1cmVDYWNoZUlkcy5wdXNoKGlkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKEJhc2VUZXh0dXJlQ2FjaGVbaWRdKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKChcIkJhc2VUZXh0dXJlIGFkZGVkIHRvIHRoZSBjYWNoZSB3aXRoIGFuIGlkIFtcIiArIGlkICsgXCJdIHRoYXQgYWxyZWFkeSBoYWQgYW4gZW50cnlcIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBCYXNlVGV4dHVyZUNhY2hlW2lkXSA9IGJhc2VUZXh0dXJlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIEJhc2VUZXh0dXJlIGZyb20gdGhlIGdsb2JhbCBCYXNlVGV4dHVyZUNhY2hlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfFBJWEkuQmFzZVRleHR1cmV9IGJhc2VUZXh0dXJlIC0gaWQgb2YgYSBCYXNlVGV4dHVyZSB0byBiZSByZW1vdmVkLCBvciBhIEJhc2VUZXh0dXJlIGluc3RhbmNlIGl0c2VsZi5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLkJhc2VUZXh0dXJlfG51bGx9IFRoZSBCYXNlVGV4dHVyZSB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAqL1xuICAgIEJhc2VUZXh0dXJlLnJlbW92ZUZyb21DYWNoZSA9IGZ1bmN0aW9uIHJlbW92ZUZyb21DYWNoZSAoYmFzZVRleHR1cmUpXG4gICAge1xuICAgICAgICBpZiAodHlwZW9mIGJhc2VUZXh0dXJlID09PSAnc3RyaW5nJylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGJhc2VUZXh0dXJlRnJvbUNhY2hlID0gQmFzZVRleHR1cmVDYWNoZVtiYXNlVGV4dHVyZV07XG5cbiAgICAgICAgICAgIGlmIChiYXNlVGV4dHVyZUZyb21DYWNoZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBiYXNlVGV4dHVyZUZyb21DYWNoZS50ZXh0dXJlQ2FjaGVJZHMuaW5kZXhPZihiYXNlVGV4dHVyZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlRnJvbUNhY2hlLnRleHR1cmVDYWNoZUlkcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBCYXNlVGV4dHVyZUNhY2hlW2Jhc2VUZXh0dXJlXTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBiYXNlVGV4dHVyZUZyb21DYWNoZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYXNlVGV4dHVyZSAmJiBiYXNlVGV4dHVyZS50ZXh0dXJlQ2FjaGVJZHMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZVRleHR1cmUudGV4dHVyZUNhY2hlSWRzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBCYXNlVGV4dHVyZUNhY2hlW2Jhc2VUZXh0dXJlLnRleHR1cmVDYWNoZUlkc1tpXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJhc2VUZXh0dXJlLnRleHR1cmVDYWNoZUlkcy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICByZXR1cm4gYmFzZVRleHR1cmU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJhc2VUZXh0dXJlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICByZXR1cm4gQmFzZVRleHR1cmU7XG59KEV2ZW50RW1pdHRlcikpO1xuXG4vKipcbiAqIEdsb2JhbCBudW1iZXIgb2YgdGhlIHRleHR1cmUgYmF0Y2gsIHVzZWQgYnkgbXVsdGktdGV4dHVyZSByZW5kZXJlcnNcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKi9cbkJhc2VUZXh0dXJlLl9nbG9iYWxCYXRjaCA9IDA7XG5cbi8qKlxuICogQSByZXNvdXJjZSB0aGF0IGNvbnRhaW5zIGEgbnVtYmVyIG9mIHNvdXJjZXMuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLnJlc291cmNlcy5SZXNvdXJjZVxuICogQG1lbWJlcm9mIFBJWEkucmVzb3VyY2VzXG4gKiBAcGFyYW0ge251bWJlcnxBcnJheTwqPn0gc291cmNlIC0gTnVtYmVyIG9mIGl0ZW1zIGluIGFycmF5IG9yIHRoZSBjb2xsZWN0aW9uXG4gKiAgICAgICAgb2YgaW1hZ2UgVVJMcyB0byB1c2UuIENhbiBhbHNvIGJlIHJlc291cmNlcywgaW1hZ2UgZWxlbWVudHMsIGNhbnZhcywgZXRjLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIHRvIGFwcGx5IHRvIHtAbGluayBQSVhJLnJlc291cmNlcy5hdXRvRGV0ZWN0UmVzb3VyY2V9XG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud2lkdGhdIC0gV2lkdGggb2YgdGhlIHJlc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaGVpZ2h0XSAtIEhlaWdodCBvZiB0aGUgcmVzb3VyY2VcbiAqL1xudmFyIEFycmF5UmVzb3VyY2UgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChSZXNvdXJjZSkge1xuICAgIGZ1bmN0aW9uIEFycmF5UmVzb3VyY2Uoc291cmNlLCBvcHRpb25zKVxuICAgIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdmFyIHVybHM7XG4gICAgICAgIHZhciBsZW5ndGggPSBzb3VyY2U7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdXJscyA9IHNvdXJjZTtcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBSZXNvdXJjZS5jYWxsKHRoaXMsIG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29sbGVjdGlvbiBvZiByZXNvdXJjZXMuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5PFBJWEkuQmFzZVRleHR1cmU+fVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGlydHkgSURzIGZvciBlYWNoIHBhcnRcbiAgICAgICAgICogQG1lbWJlciB7QXJyYXk8bnVtYmVyPn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLml0ZW1EaXJ0eUlkcyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBwYXJ0VGV4dHVyZSA9IG5ldyBCYXNlVGV4dHVyZSgpO1xuXG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2gocGFydFRleHR1cmUpO1xuICAgICAgICAgICAgdGhpcy5pdGVtRGlydHlJZHMucHVzaCgtMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTnVtYmVyIG9mIGVsZW1lbnRzIGluIGFycmF5XG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvbWlzZSB3aGVuIGxvYWRpbmdcbiAgICAgICAgICogQG1lbWJlciB7UHJvbWlzZX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbG9hZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHVybHMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGxlbmd0aDsgaSQxKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRSZXNvdXJjZUF0KGF1dG9EZXRlY3RSZXNvdXJjZSh1cmxzW2kkMV0sIG9wdGlvbnMpLCBpJDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCBSZXNvdXJjZSApIEFycmF5UmVzb3VyY2UuX19wcm90b19fID0gUmVzb3VyY2U7XG4gICAgQXJyYXlSZXNvdXJjZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBSZXNvdXJjZSAmJiBSZXNvdXJjZS5wcm90b3R5cGUgKTtcbiAgICBBcnJheVJlc291cmNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFycmF5UmVzb3VyY2U7XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoaXMgQmFzZUltYWdlUmVzb3VyY2VcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBBcnJheVJlc291cmNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSAoKVxuICAgIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXRlbXMgPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW1EaXJ0eUlkcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xvYWQgPSBudWxsO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYSByZXNvdXJjZSBieSBJRFxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLnJlc291cmNlcy5SZXNvdXJjZX0gcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBaZXJvLWJhc2VkIGluZGV4IG9mIHJlc291cmNlIHRvIHNldFxuICAgICAqIEByZXR1cm4ge1BJWEkucmVzb3VyY2VzLkFycmF5UmVzb3VyY2V9IEluc3RhbmNlIGZvciBjaGFpbmluZ1xuICAgICAqL1xuICAgIEFycmF5UmVzb3VyY2UucHJvdG90eXBlLmFkZFJlc291cmNlQXQgPSBmdW5jdGlvbiBhZGRSZXNvdXJjZUF0IChyZXNvdXJjZSwgaW5kZXgpXG4gICAge1xuICAgICAgICB2YXIgYmFzZVRleHR1cmUgPSB0aGlzLml0ZW1zW2luZGV4XTtcblxuICAgICAgICBpZiAoIWJhc2VUZXh0dXJlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKFwiSW5kZXggXCIgKyBpbmRleCArIFwiIGlzIG91dCBvZiBib3VuZHNcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5oZXJpdCB0aGUgZmlyc3QgcmVzb3VyY2UgZGltZW5zaW9uc1xuICAgICAgICBpZiAocmVzb3VyY2UudmFsaWQgJiYgIXRoaXMudmFsaWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplKHJlc291cmNlLndpZHRoLCByZXNvdXJjZS5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pdGVtc1tpbmRleF0uc2V0UmVzb3VyY2UocmVzb3VyY2UpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHBhcmVudCBiYXNlIHRleHR1cmVcbiAgICAgKiBAbWVtYmVyIHtQSVhJLkJhc2VUZXh0dXJlfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIEFycmF5UmVzb3VyY2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kIChiYXNlVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIFJlc291cmNlLnByb3RvdHlwZS5iaW5kLmNhbGwodGhpcywgYmFzZVRleHR1cmUpO1xuXG4gICAgICAgIGJhc2VUZXh0dXJlLnRhcmdldCA9IFRBUkdFVFMuVEVYVFVSRV8yRF9BUlJBWTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0ub24oJ3VwZGF0ZScsIGJhc2VUZXh0dXJlLnVwZGF0ZSwgYmFzZVRleHR1cmUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVuc2V0IHRoZSBwYXJlbnQgYmFzZSB0ZXh0dXJlXG4gICAgICogQG1lbWJlciB7UElYSS5CYXNlVGV4dHVyZX1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBBcnJheVJlc291cmNlLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQgKGJhc2VUZXh0dXJlKVxuICAgIHtcbiAgICAgICAgUmVzb3VyY2UucHJvdG90eXBlLnVuYmluZC5jYWxsKHRoaXMsIGJhc2VUZXh0dXJlKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0ub2ZmKCd1cGRhdGUnLCBiYXNlVGV4dHVyZS51cGRhdGUsIGJhc2VUZXh0dXJlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBMb2FkIGFsbCB0aGUgcmVzb3VyY2VzIHNpbXVsdGFuZW91c2x5XG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gV2hlbiBsb2FkIGlzIHJlc29sdmVkXG4gICAgICovXG4gICAgQXJyYXlSZXNvdXJjZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIGxvYWQgKClcbiAgICB7XG4gICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9sb2FkKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXNvdXJjZXMgPSB0aGlzLml0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbS5yZXNvdXJjZTsgfSk7XG5cbiAgICAgICAgLy8gVE9ETzogYWxzbyBpbXBsZW1lbnQgbG9hZCBwYXJ0LWJ5LXBhcnQgc3RyYXRlZ3lcbiAgICAgICAgdmFyIHByb21pc2VzID0gcmVzb3VyY2VzLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbS5sb2FkKCk7IH0pO1xuXG4gICAgICAgIHRoaXMuX2xvYWQgPSBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gcmVzb3VyY2VzWzBdO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgICAgICAgICAgICAgIHRoaXMkMS5yZXNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMkMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgdGhlIHJlc291cmNlcyB0byB0aGUgR1BVLlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJlcn0gcmVuZGVyZXJcbiAgICAgKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IHRleHR1cmVcbiAgICAgKiBAcGFyYW0ge1BJWEkuR0xUZXh0dXJlfSBnbFRleHR1cmVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciB0ZXh0dXJlIHdhcyB1cGxvYWRlZFxuICAgICAqL1xuICAgIEFycmF5UmVzb3VyY2UucHJvdG90eXBlLnVwbG9hZCA9IGZ1bmN0aW9uIHVwbG9hZCAocmVuZGVyZXIsIHRleHR1cmUsIGdsVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgbGVuZ3RoID0gcmVmLmxlbmd0aDtcbiAgICAgICAgdmFyIGl0ZW1EaXJ0eUlkcyA9IHJlZi5pdGVtRGlydHlJZHM7XG4gICAgICAgIHZhciBpdGVtcyA9IHJlZi5pdGVtcztcbiAgICAgICAgdmFyIGdsID0gcmVuZGVyZXIuZ2w7XG5cbiAgICAgICAgaWYgKGdsVGV4dHVyZS5kaXJ0eUlkIDwgMClcbiAgICAgICAge1xuICAgICAgICAgICAgZ2wudGV4SW1hZ2UzRChcbiAgICAgICAgICAgICAgICBnbC5URVhUVVJFXzJEX0FSUkFZLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgdGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgICAgICAgdGhpcy5fd2lkdGgsXG4gICAgICAgICAgICAgICAgdGhpcy5faGVpZ2h0LFxuICAgICAgICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIHRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgICAgICAgIHRleHR1cmUudHlwZSxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcblxuICAgICAgICAgICAgaWYgKGl0ZW1EaXJ0eUlkc1tpXSA8IGl0ZW0uZGlydHlJZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtRGlydHlJZHNbaV0gPSBpdGVtLmRpcnR5SWQ7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udmFsaWQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBnbC50ZXhTdWJJbWFnZTNEKFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuVEVYVFVSRV8yRF9BUlJBWSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAwLCAvLyB4b2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAwLCAvLyB5b2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBpLCAvLyB6b2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnJlc291cmNlLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5yZXNvdXJjZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnJlc291cmNlLnNvdXJjZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gQXJyYXlSZXNvdXJjZTtcbn0oUmVzb3VyY2UpKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIE9mZnNjcmVlbkNhbnZhc1xuICovXG5cbi8qKlxuICogUmVzb3VyY2UgdHlwZSBmb3IgSFRNTENhbnZhc0VsZW1lbnQuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkucmVzb3VyY2VzLkJhc2VJbWFnZVJlc291cmNlXG4gKiBAbWVtYmVyb2YgUElYSS5yZXNvdXJjZXNcbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IHNvdXJjZSAtIENhbnZhcyBlbGVtZW50IHRvIHVzZVxuICovXG52YXIgQ2FudmFzUmVzb3VyY2UgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChCYXNlSW1hZ2VSZXNvdXJjZSkge1xuICAgIGZ1bmN0aW9uIENhbnZhc1Jlc291cmNlICgpIHtcbiAgICAgICAgQmFzZUltYWdlUmVzb3VyY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBpZiAoIEJhc2VJbWFnZVJlc291cmNlICkgQ2FudmFzUmVzb3VyY2UuX19wcm90b19fID0gQmFzZUltYWdlUmVzb3VyY2U7XG4gICAgQ2FudmFzUmVzb3VyY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQmFzZUltYWdlUmVzb3VyY2UgJiYgQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlICk7XG4gICAgQ2FudmFzUmVzb3VyY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2FudmFzUmVzb3VyY2U7XG5cbiAgICBDYW52YXNSZXNvdXJjZS50ZXN0ID0gZnVuY3Rpb24gdGVzdCAoc291cmNlKVxuICAgIHtcbiAgICAgICAgdmFyIE9mZnNjcmVlbkNhbnZhcyA9IHdpbmRvdy5PZmZzY3JlZW5DYW52YXM7XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3QgeWV0IHN1cHBvcnQgT2Zmc2NyZWVuQ2FudmFzXG4gICAgICAgIGlmIChPZmZzY3JlZW5DYW52YXMgJiYgc291cmNlIGluc3RhbmNlb2YgT2Zmc2NyZWVuQ2FudmFzKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3VyY2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENhbnZhc1Jlc291cmNlO1xufShCYXNlSW1hZ2VSZXNvdXJjZSkpO1xuXG4vKipcbiAqIFJlc291cmNlIGZvciBhIEN1YmVUZXh0dXJlIHdoaWNoIGNvbnRhaW5zIHNpeCByZXNvdXJjZXMuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLnJlc291cmNlcy5BcnJheVJlc291cmNlXG4gKiBAbWVtYmVyb2YgUElYSS5yZXNvdXJjZXNcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFBJWEkucmVzb3VyY2VzLlJlc291cmNlPn0gW3NvdXJjZV0gQ29sbGVjdGlvbiBvZiBVUkxzIG9yIHJlc291cmNlc1xuICogICAgICAgIHRvIHVzZSBhcyB0aGUgc2lkZXMgb2YgdGhlIGN1YmUuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gSW1hZ2VSZXNvdXJjZSBvcHRpb25zXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud2lkdGhdIC0gV2lkdGggb2YgcmVzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5oZWlnaHRdIC0gSGVpZ2h0IG9mIHJlc291cmNlXG4gKi9cbnZhciBDdWJlUmVzb3VyY2UgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChBcnJheVJlc291cmNlKSB7XG4gICAgZnVuY3Rpb24gQ3ViZVJlc291cmNlKHNvdXJjZSwgb3B0aW9ucylcbiAgICB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIEFycmF5UmVzb3VyY2UuY2FsbCh0aGlzLCBzb3VyY2UsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCAhPT0gQ3ViZVJlc291cmNlLlNJREVTKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKFwiSW52YWxpZCBsZW5ndGguIEdvdCBcIiArICh0aGlzLmxlbmd0aCkgKyBcIiwgZXhwZWN0ZWQgNlwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEN1YmVSZXNvdXJjZS5TSURFUzsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldLnRhcmdldCA9IFRBUkdFVFMuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmF1dG9Mb2FkICE9PSBmYWxzZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIEFycmF5UmVzb3VyY2UgKSBDdWJlUmVzb3VyY2UuX19wcm90b19fID0gQXJyYXlSZXNvdXJjZTtcbiAgICBDdWJlUmVzb3VyY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQXJyYXlSZXNvdXJjZSAmJiBBcnJheVJlc291cmNlLnByb3RvdHlwZSApO1xuICAgIEN1YmVSZXNvdXJjZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlUmVzb3VyY2U7XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYmluZGluZ1xuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBiYXNlVGV4dHVyZSAtIHBhcmVudCBiYXNlIHRleHR1cmVcbiAgICAgKi9cbiAgICBDdWJlUmVzb3VyY2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kIChiYXNlVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIEFycmF5UmVzb3VyY2UucHJvdG90eXBlLmJpbmQuY2FsbCh0aGlzLCBiYXNlVGV4dHVyZSk7XG5cbiAgICAgICAgYmFzZVRleHR1cmUudGFyZ2V0ID0gVEFSR0VUUy5URVhUVVJFX0NVQkVfTUFQO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgdGhlIHJlc291cmNlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpcyBzdWNjZXNzXG4gICAgICovXG4gICAgQ3ViZVJlc291cmNlLnByb3RvdHlwZS51cGxvYWQgPSBmdW5jdGlvbiB1cGxvYWQgKHJlbmRlcmVyLCBiYXNlVGV4dHVyZSwgZ2xUZXh0dXJlKVxuICAgIHtcbiAgICAgICAgdmFyIGRpcnR5ID0gdGhpcy5pdGVtRGlydHlJZHM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBDdWJlUmVzb3VyY2UuU0lERVM7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHNpZGUgPSB0aGlzLml0ZW1zW2ldO1xuXG4gICAgICAgICAgICBpZiAoZGlydHlbaV0gPCBzaWRlLmRpcnR5SWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGlydHlbaV0gPSBzaWRlLmRpcnR5SWQ7XG4gICAgICAgICAgICAgICAgaWYgKHNpZGUudmFsaWQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzaWRlLnJlc291cmNlLnVwbG9hZChyZW5kZXJlciwgc2lkZSwgZ2xUZXh0dXJlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEN1YmVSZXNvdXJjZTtcbn0oQXJyYXlSZXNvdXJjZSkpO1xuXG4vKipcbiAqIE51bWJlciBvZiB0ZXh0dXJlIHNpZGVzIHRvIHN0b3JlIGZvciBDdWJlUmVzb3VyY2VzXG4gKlxuICogQG5hbWUgUElYSS5yZXNvdXJjZXMuQ3ViZVJlc291cmNlLlNJREVTXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKiBAZGVmYXVsdCA2XG4gKi9cbkN1YmVSZXNvdXJjZS5TSURFUyA9IDY7XG5cbi8qKlxuICogUmVzb3VyY2UgdHlwZSBmb3IgU1ZHIGVsZW1lbnRzIGFuZCBncmFwaGljcy5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5yZXNvdXJjZXMuQmFzZUltYWdlUmVzb3VyY2VcbiAqIEBtZW1iZXJvZiBQSVhJLnJlc291cmNlc1xuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSAtIEJhc2U2NCBlbmNvZGVkIFNWRyBlbGVtZW50IG9yIFVSTCBmb3IgU1ZHIGZpbGUuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9ucyB0byB1c2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zY2FsZT0xXSBTY2FsZSB0byBhcHBseSB0byBTVkcuIE92ZXJyaWRkZW4gYnkuLi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53aWR0aF0gUmFzdGVyaXplIFNWRyB0aGlzIHdpZGUuIEFzcGVjdCByYXRpbyBwcmVzZXJ2ZWQgaWYgaGVpZ2h0IG5vdCBzcGVjaWZpZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaGVpZ2h0XSBSYXN0ZXJpemUgU1ZHIHRoaXMgaGlnaC4gQXNwZWN0IHJhdGlvIHByZXNlcnZlZCBpZiB3aWR0aCBub3Qgc3BlY2lmaWVkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hdXRvTG9hZD10cnVlXSBTdGFydCBsb2FkaW5nIHJpZ2h0IGF3YXkuXG4gKi9cbnZhciBTVkdSZXNvdXJjZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEJhc2VJbWFnZVJlc291cmNlKSB7XG4gICAgZnVuY3Rpb24gU1ZHUmVzb3VyY2Uoc291cmNlLCBvcHRpb25zKVxuICAgIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgQmFzZUltYWdlUmVzb3VyY2UuY2FsbCh0aGlzLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSk7XG4gICAgICAgIHRoaXMuX3dpZHRoID0gMDtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQmFzZTY0IGVuY29kZWQgU1ZHIGVsZW1lbnQgb3IgVVJMIGZvciBTVkcgZmlsZVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdmcgPSBzb3VyY2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzb3VyY2Ugc2NhbGUgdG8gYXBwbHkgd2hlbiByYXN0ZXJpemluZyBvbiBsb2FkXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjYWxlID0gb3B0aW9ucy5zY2FsZSB8fCAxO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHdpZHRoIG92ZXJyaWRlIGZvciByYXN0ZXJpemF0aW9uIG9uIGxvYWRcbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX292ZXJyaWRlV2lkdGggPSBvcHRpb25zLndpZHRoO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGhlaWdodCBvdmVycmlkZSBmb3IgcmFzdGVyaXphdGlvbiBvbiBsb2FkXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9vdmVycmlkZUhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsIHdoZW4gY29tcGxldGVseSBsb2FkZWRcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQG1lbWJlciB7ZnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9yZXNvbHZlID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3Jvc3Mgb3JpZ2luIHZhbHVlIHRvIHVzZVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufHN0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2Nyb3Nzb3JpZ2luID0gb3B0aW9ucy5jcm9zc29yaWdpbjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvbWlzZSB3aGVuIGxvYWRpbmdcbiAgICAgICAgICogQG1lbWJlciB7UHJvbWlzZTx2b2lkPn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbG9hZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXV0b0xvYWQgIT09IGZhbHNlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICggQmFzZUltYWdlUmVzb3VyY2UgKSBTVkdSZXNvdXJjZS5fX3Byb3RvX18gPSBCYXNlSW1hZ2VSZXNvdXJjZTtcbiAgICBTVkdSZXNvdXJjZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCYXNlSW1hZ2VSZXNvdXJjZSAmJiBCYXNlSW1hZ2VSZXNvdXJjZS5wcm90b3R5cGUgKTtcbiAgICBTVkdSZXNvdXJjZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTVkdSZXNvdXJjZTtcblxuICAgIFNWR1Jlc291cmNlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gbG9hZCAoKVxuICAgIHtcbiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMuX2xvYWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2FkO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9hZCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAvLyBTYXZlIHRoaXMgdW50aWwgYWZ0ZXIgbG9hZCBpcyBmaW5pc2hlZFxuICAgICAgICAgICAgdGhpcyQxLl9yZXNvbHZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMkMS5yZXNpemUodGhpcyQxLnNvdXJjZS53aWR0aCwgdGhpcyQxLnNvdXJjZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcyQxKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIENvbnZlcnQgU1ZHIGlubGluZSBzdHJpbmcgdG8gZGF0YS11cmlcbiAgICAgICAgICAgIGlmICgoL15cXDxzdmcvKS50ZXN0KHRoaXMkMS5zdmcudHJpbSgpKSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJ0b2EpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdXIgYnJvd3NlciBkb2VzblxcJ3Qgc3VwcG9ydCBiYXNlNjQgY29udmVyc2lvbnMuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMkMS5zdmcgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsXCIgKyAoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodGhpcyQxLnN2ZykpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMkMS5fbG9hZFN2ZygpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTG9hZHMgYW4gU1ZHIGltYWdlIGZyb20gYGltYWdlVXJsYCBvciBgZGF0YSBVUkxgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBTVkdSZXNvdXJjZS5wcm90b3R5cGUuX2xvYWRTdmcgPSBmdW5jdGlvbiBfbG9hZFN2ZyAoKVxuICAgIHtcbiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRlbXBJbWFnZSA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgIEJhc2VJbWFnZVJlc291cmNlLmNyb3NzT3JpZ2luKHRlbXBJbWFnZSwgdGhpcy5zdmcsIHRoaXMuX2Nyb3Nzb3JpZ2luKTtcbiAgICAgICAgdGVtcEltYWdlLnNyYyA9IHRoaXMuc3ZnO1xuXG4gICAgICAgIHRlbXBJbWFnZS5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB0ZW1wSW1hZ2Uub25lcnJvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzJDEub25FcnJvci5ydW4oZXZlbnQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRlbXBJbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3ZnV2lkdGggPSB0ZW1wSW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gdGVtcEltYWdlLmhlaWdodDtcblxuICAgICAgICAgICAgaWYgKCFzdmdXaWR0aCB8fCAhc3ZnSGVpZ2h0KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIFNWRyBpbWFnZSBtdXN0IGhhdmUgd2lkdGggYW5kIGhlaWdodCBkZWZpbmVkIChpbiBwaXhlbHMpLCBjYW52YXMgQVBJIG5lZWRzIHRoZW0uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCByZW5kZXIgc2l6ZVxuICAgICAgICAgICAgdmFyIHdpZHRoID0gc3ZnV2lkdGggKiB0aGlzJDEuc2NhbGU7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gc3ZnSGVpZ2h0ICogdGhpcyQxLnNjYWxlO1xuXG4gICAgICAgICAgICBpZiAodGhpcyQxLl9vdmVycmlkZVdpZHRoIHx8IHRoaXMkMS5fb3ZlcnJpZGVIZWlnaHQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSB0aGlzJDEuX292ZXJyaWRlV2lkdGggfHwgdGhpcyQxLl9vdmVycmlkZUhlaWdodCAvIHN2Z0hlaWdodCAqIHN2Z1dpZHRoO1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMkMS5fb3ZlcnJpZGVIZWlnaHQgfHwgdGhpcyQxLl9vdmVycmlkZVdpZHRoIC8gc3ZnV2lkdGggKiBzdmdIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aWR0aCA9IE1hdGgucm91bmQod2lkdGgpO1xuICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5yb3VuZChoZWlnaHQpO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBjYW52YXMgZWxlbWVudFxuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IHRoaXMkMS5zb3VyY2U7XG5cbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIGNhbnZhcy5fcGl4aUlkID0gXCJjYW52YXNfXCIgKyAodWlkKCkpO1xuXG4gICAgICAgICAgICAvLyBEcmF3IHRoZSBTdmcgdG8gdGhlIGNhbnZhc1xuICAgICAgICAgICAgY2FudmFzXG4gICAgICAgICAgICAgICAgLmdldENvbnRleHQoJzJkJylcbiAgICAgICAgICAgICAgICAuZHJhd0ltYWdlKHRlbXBJbWFnZSwgMCwgMCwgc3ZnV2lkdGgsIHN2Z0hlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgICAgIHRoaXMkMS5fcmVzb2x2ZSgpO1xuICAgICAgICAgICAgdGhpcyQxLl9yZXNvbHZlID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHNpemUgZnJvbSBhbiBzdmcgc3RyaW5nIHVzaW5nIHJlZ2V4cC5cbiAgICAgKlxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3ZnU3RyaW5nIC0gYSBzZXJpYWxpemVkIHN2ZyBlbGVtZW50XG4gICAgICogQHJldHVybiB7UElYSS5JU2l6ZX0gaW1hZ2UgZXh0ZW5zaW9uXG4gICAgICovXG4gICAgU1ZHUmVzb3VyY2UuZ2V0U2l6ZSA9IGZ1bmN0aW9uIGdldFNpemUgKHN2Z1N0cmluZylcbiAgICB7XG4gICAgICAgIHZhciBzaXplTWF0Y2ggPSBTVkdSZXNvdXJjZS5TVkdfU0laRS5leGVjKHN2Z1N0cmluZyk7XG4gICAgICAgIHZhciBzaXplID0ge307XG5cbiAgICAgICAgaWYgKHNpemVNYXRjaClcbiAgICAgICAge1xuICAgICAgICAgICAgc2l6ZVtzaXplTWF0Y2hbMV1dID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KHNpemVNYXRjaFszXSkpO1xuICAgICAgICAgICAgc2l6ZVtzaXplTWF0Y2hbNV1dID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KHNpemVNYXRjaFs3XSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgdGV4dHVyZVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIFNWR1Jlc291cmNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSAoKVxuICAgIHtcbiAgICAgICAgQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Nyb3Nzb3JpZ2luID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBhdXRvLWRldGVjdCB0aGUgdHlwZSBvZiByZXNvdXJjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyp9IHNvdXJjZSAtIFRoZSBzb3VyY2Ugb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4dGVuc2lvbiAtIFRoZSBleHRlbnNpb24gb2Ygc291cmNlLCBpZiBzZXRcbiAgICAgKi9cbiAgICBTVkdSZXNvdXJjZS50ZXN0ID0gZnVuY3Rpb24gdGVzdCAoc291cmNlLCBleHRlbnNpb24pXG4gICAge1xuICAgICAgICAvLyB1cmwgZmlsZSBleHRlbnNpb24gaXMgU1ZHXG4gICAgICAgIHJldHVybiBleHRlbnNpb24gPT09ICdzdmcnXG4gICAgICAgICAgICAvLyBzb3VyY2UgaXMgU1ZHIGRhdGEtdXJpXG4gICAgICAgICAgICB8fCAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgJiYgc291cmNlLmluZGV4T2YoJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQnKSA9PT0gMClcbiAgICAgICAgICAgIC8vIHNvdXJjZSBpcyBTVkcgaW5saW5lXG4gICAgICAgICAgICB8fCAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgJiYgc291cmNlLmluZGV4T2YoJzxzdmcnKSA9PT0gMCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTVkdSZXNvdXJjZTtcbn0oQmFzZUltYWdlUmVzb3VyY2UpKTtcblxuLyoqXG4gKiBSZWdFeHAgZm9yIFNWRyBzaXplLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudCB7UmVnRXhwfHN0cmluZ30gU1ZHX1NJWkVcbiAqIEBtZW1iZXJvZiBQSVhJLnJlc291cmNlcy5TVkdSZXNvdXJjZVxuICogQGV4YW1wbGUgJmx0O3N2ZyB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiJmd0OyZsdDsvc3ZnJmd0O1xuICovXG5TVkdSZXNvdXJjZS5TVkdfU0laRSA9IC88c3ZnW14+XSooPzpcXHMod2lkdGh8aGVpZ2h0KT0oJ3xcIikoXFxkKig/OlxcLlxcZCspPykoPzpweCk/KCd8XCIpKVtePl0qKD86XFxzKHdpZHRofGhlaWdodCk9KCd8XCIpKFxcZCooPzpcXC5cXGQrKT8pKD86cHgpPygnfFwiKSlbXj5dKj4vaTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBtYXgtbGVuXG5cbi8qKlxuICogUmVzb3VyY2UgdHlwZSBmb3IgSFRNTFZpZGVvRWxlbWVudC5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5yZXNvdXJjZXMuQmFzZUltYWdlUmVzb3VyY2VcbiAqIEBtZW1iZXJvZiBQSVhJLnJlc291cmNlc1xuICogQHBhcmFtIHtIVE1MVmlkZW9FbGVtZW50fG9iamVjdHxzdHJpbmd8QXJyYXk8c3RyaW5nfG9iamVjdD59IHNvdXJjZSAtIFZpZGVvIGVsZW1lbnQgdG8gdXNlLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbnMgdG8gdXNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmF1dG9Mb2FkPXRydWVdIC0gU3RhcnQgbG9hZGluZyB0aGUgdmlkZW8gaW1tZWRpYXRlbHlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXV0b1BsYXk9dHJ1ZV0gLSBTdGFydCBwbGF5aW5nIHZpZGVvIGltbWVkaWF0ZWx5XG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMudXBkYXRlRlBTPTBdIC0gSG93IG1hbnkgdGltZXMgYSBzZWNvbmQgdG8gdXBkYXRlIHRoZSB0ZXh0dXJlIGZyb20gdGhlIHZpZGVvLlxuICogTGVhdmUgYXQgMCB0byB1cGRhdGUgYXQgZXZlcnkgcmVuZGVyLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jcm9zc29yaWdpbj10cnVlXSAtIExvYWQgaW1hZ2UgdXNpbmcgY3Jvc3Mgb3JpZ2luXG4gKi9cbnZhciBWaWRlb1Jlc291cmNlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQmFzZUltYWdlUmVzb3VyY2UpIHtcbiAgICBmdW5jdGlvbiBWaWRlb1Jlc291cmNlKHNvdXJjZSwgb3B0aW9ucylcbiAgICB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQpKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgdmlkZW9FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcblxuICAgICAgICAgICAgLy8gd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3BpeGlqcy9waXhpLmpzL2lzc3Vlcy81OTk2XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQuc2V0QXR0cmlidXRlKCdwcmVsb2FkJywgJ2F1dG8nKTtcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dlYmtpdC1wbGF5c2lubGluZScsICcnKTtcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3BsYXlzaW5saW5lJywgJycpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlID0gW3NvdXJjZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEJhc2VJbWFnZVJlc291cmNlLmNyb3NzT3JpZ2luKHZpZGVvRWxlbWVudCwgKHNvdXJjZVswXS5zcmMgfHwgc291cmNlWzBdKSwgb3B0aW9ucy5jcm9zc29yaWdpbik7XG5cbiAgICAgICAgICAgIC8vIGFycmF5IG9mIG9iamVjdHMgb3Igc3RyaW5nc1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcblxuICAgICAgICAgICAgICAgIHZhciByZWYgPSBzb3VyY2VbaV07XG4gICAgICAgICAgICAgICAgdmFyIHNyYyA9IHJlZi5zcmM7XG4gICAgICAgICAgICAgICAgdmFyIG1pbWUgPSByZWYubWltZTtcblxuICAgICAgICAgICAgICAgIHNyYyA9IHNyYyB8fCBzb3VyY2VbaV07XG5cbiAgICAgICAgICAgICAgICB2YXIgYmFzZVNyYyA9IHNyYy5zcGxpdCgnPycpLnNoaWZ0KCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB2YXIgZXh0ID0gYmFzZVNyYy5zdWJzdHIoYmFzZVNyYy5sYXN0SW5kZXhPZignLicpICsgMSk7XG5cbiAgICAgICAgICAgICAgICBtaW1lID0gbWltZSB8fCAoXCJ2aWRlby9cIiArIGV4dCk7XG5cbiAgICAgICAgICAgICAgICBzb3VyY2VFbGVtZW50LnNyYyA9IHNyYztcbiAgICAgICAgICAgICAgICBzb3VyY2VFbGVtZW50LnR5cGUgPSBtaW1lO1xuXG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50LmFwcGVuZENoaWxkKHNvdXJjZUVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPdmVycmlkZSB0aGUgc291cmNlXG4gICAgICAgICAgICBzb3VyY2UgPSB2aWRlb0VsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBCYXNlSW1hZ2VSZXNvdXJjZS5jYWxsKHRoaXMsIHNvdXJjZSk7XG5cbiAgICAgICAgdGhpcy5ub1N1YkltYWdlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fYXV0b1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2lzQXV0b1VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUZQUyA9IG9wdGlvbnMudXBkYXRlRlBTIHx8IDA7XG4gICAgICAgIHRoaXMuX21zVG9OZXh0VXBkYXRlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBzZXQgdG8gdHJ1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgcGxheSB2aWRlb3MgdXNlZCBieSB0aGlzIHRleHR1cmUgb25jZVxuICAgICAgICAgKiB0aGV5IGFyZSBsb2FkZWQuIElmIGZhbHNlLCBpdCB3aWxsIG5vdCBtb2RpZnkgdGhlIHBsYXlpbmcgc3RhdGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYXV0b1BsYXkgPSBvcHRpb25zLmF1dG9QbGF5ICE9PSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvbWlzZSB3aGVuIGxvYWRpbmdcbiAgICAgICAgICogQG1lbWJlciB7UHJvbWlzZTx2b2lkPn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbG9hZCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxiYWNrIHdoZW4gY29tcGxldGVkIHdpdGggbG9hZC5cbiAgICAgICAgICogQG1lbWJlciB7ZnVuY3Rpb259XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9yZXNvbHZlID0gbnVsbDtcblxuICAgICAgICAvLyBCaW5kIGZvciBsaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5fb25DYW5QbGF5ID0gdGhpcy5fb25DYW5QbGF5LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX29uRXJyb3IgPSB0aGlzLl9vbkVycm9yLmJpbmQodGhpcyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXV0b0xvYWQgIT09IGZhbHNlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICggQmFzZUltYWdlUmVzb3VyY2UgKSBWaWRlb1Jlc291cmNlLl9fcHJvdG9fXyA9IEJhc2VJbWFnZVJlc291cmNlO1xuICAgIFZpZGVvUmVzb3VyY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQmFzZUltYWdlUmVzb3VyY2UgJiYgQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlICk7XG4gICAgVmlkZW9SZXNvdXJjZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWaWRlb1Jlc291cmNlO1xuXG4gICAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgYXV0b1VwZGF0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSx1cGRhdGVGUFM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdXBkYXRpbmcgb2YgdGhlIHRleHR1cmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVsdGFUaW1lPTBdIC0gdGltZSBkZWx0YSBzaW5jZSBsYXN0IHRpY2tcbiAgICAgKi9cbiAgICBWaWRlb1Jlc291cmNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRlbHRhVGltZSlcbiAgICB7XG4gICAgICAgIGlmICggZGVsdGFUaW1lID09PSB2b2lkIDAgKSBkZWx0YVRpbWUgPSAwO1xuXG4gICAgICAgIGlmICghdGhpcy5kZXN0cm95ZWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGFjY291bnQgZm9yIGlmIHZpZGVvIGhhcyBoYWQgaXRzIHBsYXliYWNrUmF0ZSBjaGFuZ2VkXG4gICAgICAgICAgICB2YXIgZWxhcHNlZE1TID0gVGlja2VyLnNoYXJlZC5lbGFwc2VkTVMgKiB0aGlzLnNvdXJjZS5wbGF5YmFja1JhdGU7XG5cbiAgICAgICAgICAgIHRoaXMuX21zVG9OZXh0VXBkYXRlID0gTWF0aC5mbG9vcih0aGlzLl9tc1RvTmV4dFVwZGF0ZSAtIGVsYXBzZWRNUyk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3VwZGF0ZUZQUyB8fCB0aGlzLl9tc1RvTmV4dFVwZGF0ZSA8PSAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIEJhc2VJbWFnZVJlc291cmNlLnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzLCBkZWx0YVRpbWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21zVG9OZXh0VXBkYXRlID0gdGhpcy5fdXBkYXRlRlBTID8gTWF0aC5mbG9vcigxMDAwIC8gdGhpcy5fdXBkYXRlRlBTKSA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3RhcnQgcHJlbG9hZGluZyB0aGUgdmlkZW8gcmVzb3VyY2UuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gSGFuZGxlIHRoZSB2YWxpZGF0ZSBldmVudFxuICAgICAqL1xuICAgIFZpZGVvUmVzb3VyY2UucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiBsb2FkICgpXG4gICAge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5fbG9hZClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc291cmNlID0gdGhpcy5zb3VyY2U7XG5cbiAgICAgICAgaWYgKChzb3VyY2UucmVhZHlTdGF0ZSA9PT0gc291cmNlLkhBVkVfRU5PVUdIX0RBVEEgfHwgc291cmNlLnJlYWR5U3RhdGUgPT09IHNvdXJjZS5IQVZFX0ZVVFVSRV9EQVRBKVxuICAgICAgICAgICAgJiYgc291cmNlLndpZHRoICYmIHNvdXJjZS5oZWlnaHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNvdXJjZS5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcigncGxheScsIHRoaXMuX29uUGxheVN0YXJ0LmJpbmQodGhpcykpO1xuICAgICAgICBzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcigncGF1c2UnLCB0aGlzLl9vblBsYXlTdG9wLmJpbmQodGhpcykpO1xuXG4gICAgICAgIGlmICghdGhpcy5faXNTb3VyY2VSZWFkeSgpKVxuICAgICAgICB7XG4gICAgICAgICAgICBzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheScsIHRoaXMuX29uQ2FuUGxheSk7XG4gICAgICAgICAgICBzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheXRocm91Z2gnLCB0aGlzLl9vbkNhblBsYXkpO1xuICAgICAgICAgICAgc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5fb25FcnJvciwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9vbkNhblBsYXkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvYWQgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMkMS52YWxpZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMkMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcyQxLl9yZXNvbHZlID0gcmVzb2x2ZTtcblxuICAgICAgICAgICAgICAgIHNvdXJjZS5sb2FkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdmlkZW8gZXJyb3IgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBWaWRlb1Jlc291cmNlLnByb3RvdHlwZS5fb25FcnJvciA9IGZ1bmN0aW9uIF9vbkVycm9yICgpXG4gICAge1xuICAgICAgICB0aGlzLnNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX29uRXJyb3IsIHRydWUpO1xuICAgICAgICB0aGlzLm9uRXJyb3IucnVuKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB1bmRlcmx5aW5nIHNvdXJjZSBpcyBwbGF5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHBsYXlpbmcuXG4gICAgICovXG4gICAgVmlkZW9SZXNvdXJjZS5wcm90b3R5cGUuX2lzU291cmNlUGxheWluZyA9IGZ1bmN0aW9uIF9pc1NvdXJjZVBsYXlpbmcgKClcbiAgICB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcblxuICAgICAgICByZXR1cm4gKHNvdXJjZS5jdXJyZW50VGltZSA+IDAgJiYgc291cmNlLnBhdXNlZCA9PT0gZmFsc2UgJiYgc291cmNlLmVuZGVkID09PSBmYWxzZSAmJiBzb3VyY2UucmVhZHlTdGF0ZSA+IDIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHVuZGVybHlpbmcgc291cmNlIGlzIHJlYWR5IGZvciBwbGF5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHJlYWR5LlxuICAgICAqL1xuICAgIFZpZGVvUmVzb3VyY2UucHJvdG90eXBlLl9pc1NvdXJjZVJlYWR5ID0gZnVuY3Rpb24gX2lzU291cmNlUmVhZHkgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZS5yZWFkeVN0YXRlID09PSAzIHx8IHRoaXMuc291cmNlLnJlYWR5U3RhdGUgPT09IDQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIHVwZGF0ZSBsb29wIHdoZW4gdGhlIHZpZGVvIGlzIHJlYWR5IHRvIHBsYXlcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgVmlkZW9SZXNvdXJjZS5wcm90b3R5cGUuX29uUGxheVN0YXJ0ID0gZnVuY3Rpb24gX29uUGxheVN0YXJ0ICgpXG4gICAge1xuICAgICAgICAvLyBKdXN0IGluIGNhc2UgdGhlIHZpZGVvIGhhcyBub3QgcmVjZWl2ZWQgaXRzIGNhbiBwbGF5IGV2ZW4geWV0Li5cbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9vbkNhblBsYXkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5faXNBdXRvVXBkYXRpbmcgJiYgdGhpcy5hdXRvVXBkYXRlKVxuICAgICAgICB7XG4gICAgICAgICAgICBUaWNrZXIuc2hhcmVkLmFkZCh0aGlzLnVwZGF0ZSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9pc0F1dG9VcGRhdGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIHBhdXNlIGV2ZW50IGlzIHRyaWdnZXJlZCwgc3RvcHMgdGhlIHVwZGF0ZSBsb29wXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFZpZGVvUmVzb3VyY2UucHJvdG90eXBlLl9vblBsYXlTdG9wID0gZnVuY3Rpb24gX29uUGxheVN0b3AgKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLl9pc0F1dG9VcGRhdGluZylcbiAgICAgICAge1xuICAgICAgICAgICAgVGlja2VyLnNoYXJlZC5yZW1vdmUodGhpcy51cGRhdGUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5faXNBdXRvVXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSB2aWRlbyBpcyBsb2FkZWQgYW5kIHJlYWR5IHRvIHBsYXlcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgVmlkZW9SZXNvdXJjZS5wcm90b3R5cGUuX29uQ2FuUGxheSA9IGZ1bmN0aW9uIF9vbkNhblBsYXkgKClcbiAgICB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgc291cmNlID0gcmVmLnNvdXJjZTtcblxuICAgICAgICBzb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2FucGxheScsIHRoaXMuX29uQ2FuUGxheSk7XG4gICAgICAgIHNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjYW5wbGF5dGhyb3VnaCcsIHRoaXMuX29uQ2FuUGxheSk7XG5cbiAgICAgICAgdmFyIHZhbGlkID0gdGhpcy52YWxpZDtcblxuICAgICAgICB0aGlzLnJlc2l6ZShzb3VyY2UudmlkZW9XaWR0aCwgc291cmNlLnZpZGVvSGVpZ2h0KTtcblxuICAgICAgICAvLyBwcmV2ZW50IG11bHRpcGxlIGxvYWRlZCBkaXNwYXRjaGVzLi5cbiAgICAgICAgaWYgKCF2YWxpZCAmJiB0aGlzLl9yZXNvbHZlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faXNTb3VyY2VQbGF5aW5nKCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX29uUGxheVN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hdXRvUGxheSlcbiAgICAgICAge1xuICAgICAgICAgICAgc291cmNlLnBsYXkoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGlzIHRleHR1cmVcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBWaWRlb1Jlc291cmNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzQXV0b1VwZGF0aW5nKVxuICAgICAgICB7XG4gICAgICAgICAgICBUaWNrZXIuc2hhcmVkLnJlbW92ZSh0aGlzLnVwZGF0ZSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zb3VyY2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5fb25FcnJvciwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZS5wYXVzZSgpO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2Uuc3JjID0gJyc7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZS5sb2FkKCk7XG4gICAgICAgIH1cbiAgICAgICAgQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2hvdWxkIHRoZSBiYXNlIHRleHR1cmUgYXV0b21hdGljYWxseSB1cGRhdGUgaXRzZWxmLCBzZXQgdG8gdHJ1ZSBieSBkZWZhdWx0XG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5hdXRvVXBkYXRlLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXV0b1VwZGF0ZTtcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmF1dG9VcGRhdGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fYXV0b1VwZGF0ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fYXV0b1VwZGF0ZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2F1dG9VcGRhdGUgJiYgdGhpcy5faXNBdXRvVXBkYXRpbmcpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgVGlja2VyLnNoYXJlZC5yZW1vdmUodGhpcy51cGRhdGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzQXV0b1VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9hdXRvVXBkYXRlICYmICF0aGlzLl9pc0F1dG9VcGRhdGluZylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBUaWNrZXIuc2hhcmVkLmFkZCh0aGlzLnVwZGF0ZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNBdXRvVXBkYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhvdyBtYW55IHRpbWVzIGEgc2Vjb25kIHRvIHVwZGF0ZSB0aGUgdGV4dHVyZSBmcm9tIHRoZSB2aWRlby4gTGVhdmUgYXQgMCB0byB1cGRhdGUgYXQgZXZlcnkgcmVuZGVyLlxuICAgICAqIEEgbG93ZXIgZnBzIGNhbiBoZWxwIHBlcmZvcm1hbmNlLCBhcyB1cGRhdGluZyB0aGUgdGV4dHVyZSBhdCA2MGZwcyBvbiBhIDMwcHMgdmlkZW8gbWF5IG5vdCBiZSBlZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnVwZGF0ZUZQUy5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZUZQUztcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnVwZGF0ZUZQUy5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLl91cGRhdGVGUFMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUZQUyA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gYXV0by1kZXRlY3QgdGhlIHR5cGUgb2YgcmVzb3VyY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHsqfSBzb3VyY2UgLSBUaGUgc291cmNlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHRlbnNpb24gLSBUaGUgZXh0ZW5zaW9uIG9mIHNvdXJjZSwgaWYgc2V0XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHZpZGVvIHNvdXJjZVxuICAgICAqL1xuICAgIFZpZGVvUmVzb3VyY2UudGVzdCA9IGZ1bmN0aW9uIHRlc3QgKHNvdXJjZSwgZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIChzb3VyY2UgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50KVxuICAgICAgICAgICAgfHwgVmlkZW9SZXNvdXJjZS5UWVBFUy5pbmRleE9mKGV4dGVuc2lvbikgPiAtMTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZpZGVvUmVzb3VyY2UucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICAgIHJldHVybiBWaWRlb1Jlc291cmNlO1xufShCYXNlSW1hZ2VSZXNvdXJjZSkpO1xuXG4vKipcbiAqIExpc3Qgb2YgY29tbW9uIHZpZGVvIGZpbGUgZXh0ZW5zaW9ucyBzdXBwb3J0ZWQgYnkgVmlkZW9SZXNvdXJjZS5cbiAqIEBjb25zdGFudFxuICogQG1lbWJlciB7QXJyYXk8c3RyaW5nPn1cbiAqIEBzdGF0aWNcbiAqIEByZWFkb25seVxuICovXG5WaWRlb1Jlc291cmNlLlRZUEVTID0gWydtcDQnLCAnbTR2JywgJ3dlYm0nLCAnb2dnJywgJ29ndicsICdoMjY0JywgJ2F2aScsICdtb3YnXTtcblxuLyoqXG4gKiBSZXNvdXJjZSB0eXBlIGZvciBJbWFnZUJpdG1hcC5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5yZXNvdXJjZXMuQmFzZUltYWdlUmVzb3VyY2VcbiAqIEBtZW1iZXJvZiBQSVhJLnJlc291cmNlc1xuICogQHBhcmFtIHtJbWFnZUJpdG1hcH0gc291cmNlIC0gSW1hZ2UgZWxlbWVudCB0byB1c2VcbiAqL1xudmFyIEltYWdlQml0bWFwUmVzb3VyY2UgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChCYXNlSW1hZ2VSZXNvdXJjZSkge1xuICAgIGZ1bmN0aW9uIEltYWdlQml0bWFwUmVzb3VyY2UgKCkge1xuICAgICAgICBCYXNlSW1hZ2VSZXNvdXJjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGlmICggQmFzZUltYWdlUmVzb3VyY2UgKSBJbWFnZUJpdG1hcFJlc291cmNlLl9fcHJvdG9fXyA9IEJhc2VJbWFnZVJlc291cmNlO1xuICAgIEltYWdlQml0bWFwUmVzb3VyY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQmFzZUltYWdlUmVzb3VyY2UgJiYgQmFzZUltYWdlUmVzb3VyY2UucHJvdG90eXBlICk7XG4gICAgSW1hZ2VCaXRtYXBSZXNvdXJjZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbWFnZUJpdG1hcFJlc291cmNlO1xuXG4gICAgSW1hZ2VCaXRtYXBSZXNvdXJjZS50ZXN0ID0gZnVuY3Rpb24gdGVzdCAoc291cmNlKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICEhd2luZG93LmNyZWF0ZUltYWdlQml0bWFwICYmIHNvdXJjZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwO1xuICAgIH07XG5cbiAgICByZXR1cm4gSW1hZ2VCaXRtYXBSZXNvdXJjZTtcbn0oQmFzZUltYWdlUmVzb3VyY2UpKTtcblxuSU5TVEFMTEVELnB1c2goXG4gICAgSW1hZ2VSZXNvdXJjZSxcbiAgICBJbWFnZUJpdG1hcFJlc291cmNlLFxuICAgIENhbnZhc1Jlc291cmNlLFxuICAgIFZpZGVvUmVzb3VyY2UsXG4gICAgU1ZHUmVzb3VyY2UsXG4gICAgQnVmZmVyUmVzb3VyY2UsXG4gICAgQ3ViZVJlc291cmNlLFxuICAgIEFycmF5UmVzb3VyY2Vcbik7XG5cbnZhciBpbmRleCA9ICh7XG4gICAgSU5TVEFMTEVEOiBJTlNUQUxMRUQsXG4gICAgYXV0b0RldGVjdFJlc291cmNlOiBhdXRvRGV0ZWN0UmVzb3VyY2UsXG4gICAgQXJyYXlSZXNvdXJjZTogQXJyYXlSZXNvdXJjZSxcbiAgICBCdWZmZXJSZXNvdXJjZTogQnVmZmVyUmVzb3VyY2UsXG4gICAgQ2FudmFzUmVzb3VyY2U6IENhbnZhc1Jlc291cmNlLFxuICAgIEN1YmVSZXNvdXJjZTogQ3ViZVJlc291cmNlLFxuICAgIEltYWdlUmVzb3VyY2U6IEltYWdlUmVzb3VyY2UsXG4gICAgSW1hZ2VCaXRtYXBSZXNvdXJjZTogSW1hZ2VCaXRtYXBSZXNvdXJjZSxcbiAgICBTVkdSZXNvdXJjZTogU1ZHUmVzb3VyY2UsXG4gICAgVmlkZW9SZXNvdXJjZTogVmlkZW9SZXNvdXJjZSxcbiAgICBSZXNvdXJjZTogUmVzb3VyY2UsXG4gICAgQmFzZUltYWdlUmVzb3VyY2U6IEJhc2VJbWFnZVJlc291cmNlXG59KTtcblxuLyoqXG4gKiBTeXN0ZW0gaXMgYSBiYXNlIGNsYXNzIHVzZWQgZm9yIGV4dGVuZGluZyBzeXN0ZW1zIHVzZWQgYnkgdGhlIHtAbGluayBQSVhJLlJlbmRlcmVyfVxuICpcbiAqIEBzZWUgUElYSS5SZW5kZXJlciNhZGRTeXN0ZW1cbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFN5c3RlbSA9IGZ1bmN0aW9uIFN5c3RlbShyZW5kZXJlcilcbntcbiAgICAvKipcbiAgICAgKiBUaGUgcmVuZGVyZXIgdGhpcyBtYW5hZ2VyIHdvcmtzIGZvci5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge1BJWEkuUmVuZGVyZXJ9XG4gICAgICovXG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xufTtcblxuLyoqXG4gKiBHZW5lcmljIGRlc3Ryb3kgbWV0aG9kcyB0byBiZSBvdmVycmlkZGVuIGJ5IHRoZSBzdWJjbGFzc1xuICovXG5TeXN0ZW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG57XG4gICAgdGhpcy5yZW5kZXJlciA9IG51bGw7XG59O1xuXG4vKipcbiAqIFJlc291cmNlIHR5cGUgZm9yIERlcHRoVGV4dHVyZS5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5yZXNvdXJjZXMuQnVmZmVyUmVzb3VyY2VcbiAqIEBtZW1iZXJvZiBQSVhJLnJlc291cmNlc1xuICovXG52YXIgRGVwdGhSZXNvdXJjZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEJ1ZmZlclJlc291cmNlKSB7XG4gICAgZnVuY3Rpb24gRGVwdGhSZXNvdXJjZSAoKSB7XG4gICAgICAgIEJ1ZmZlclJlc291cmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgaWYgKCBCdWZmZXJSZXNvdXJjZSApIERlcHRoUmVzb3VyY2UuX19wcm90b19fID0gQnVmZmVyUmVzb3VyY2U7XG4gICAgRGVwdGhSZXNvdXJjZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJSZXNvdXJjZSAmJiBCdWZmZXJSZXNvdXJjZS5wcm90b3R5cGUgKTtcbiAgICBEZXB0aFJlc291cmNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERlcHRoUmVzb3VyY2U7XG5cbiAgICBEZXB0aFJlc291cmNlLnByb3RvdHlwZS51cGxvYWQgPSBmdW5jdGlvbiB1cGxvYWQgKHJlbmRlcmVyLCBiYXNlVGV4dHVyZSwgZ2xUZXh0dXJlKVxuICAgIHtcbiAgICAgICAgdmFyIGdsID0gcmVuZGVyZXIuZ2w7XG5cbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCBiYXNlVGV4dHVyZS5wcmVtdWx0aXBseUFscGhhKTtcblxuICAgICAgICBpZiAoZ2xUZXh0dXJlLndpZHRoID09PSBiYXNlVGV4dHVyZS53aWR0aCAmJiBnbFRleHR1cmUuaGVpZ2h0ID09PSBiYXNlVGV4dHVyZS5oZWlnaHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLnRleFN1YkltYWdlMkQoXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUudGFyZ2V0LFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLndpZHRoLFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLmhlaWdodCxcbiAgICAgICAgICAgICAgICBiYXNlVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUudHlwZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBnbFRleHR1cmUud2lkdGggPSBiYXNlVGV4dHVyZS53aWR0aDtcbiAgICAgICAgICAgIGdsVGV4dHVyZS5oZWlnaHQgPSBiYXNlVGV4dHVyZS5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQoXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUudGFyZ2V0LFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgZ2wuREVQVEhfQ09NUE9ORU5UMTYsIC8vIE5lZWRlZCBmb3IgZGVwdGggdG8gcmVuZGVyIHByb3Blcmx5IGluIHdlYmdsMi4wXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUud2lkdGgsXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgYmFzZVRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlLnR5cGUsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBEZXB0aFJlc291cmNlO1xufShCdWZmZXJSZXNvdXJjZSkpO1xuXG4vKipcbiAqIEZyYW1lIGJ1ZmZlciB1c2VkIGJ5IHRoZSBCYXNlUmVuZGVyVGV4dHVyZVxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEZyYW1lYnVmZmVyID0gZnVuY3Rpb24gRnJhbWVidWZmZXIod2lkdGgsIGhlaWdodClcbntcbiAgICB0aGlzLndpZHRoID0gTWF0aC5jZWlsKHdpZHRoIHx8IDEwMCk7XG4gICAgdGhpcy5oZWlnaHQgPSBNYXRoLmNlaWwoaGVpZ2h0IHx8IDEwMCk7XG5cbiAgICB0aGlzLnN0ZW5jaWwgPSBmYWxzZTtcbiAgICB0aGlzLmRlcHRoID0gZmFsc2U7XG5cbiAgICB0aGlzLmRpcnR5SWQgPSAwO1xuICAgIHRoaXMuZGlydHlGb3JtYXQgPSAwO1xuICAgIHRoaXMuZGlydHlTaXplID0gMDtcblxuICAgIHRoaXMuZGVwdGhUZXh0dXJlID0gbnVsbDtcbiAgICB0aGlzLmNvbG9yVGV4dHVyZXMgPSBbXTtcblxuICAgIHRoaXMuZ2xGcmFtZWJ1ZmZlcnMgPSB7fTtcblxuICAgIHRoaXMuZGlzcG9zZVJ1bm5lciA9IG5ldyBSdW5uZXIoJ2Rpc3Bvc2VGcmFtZWJ1ZmZlcicsIDIpO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBjb2xvclRleHR1cmU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIGNvbG9yVGV4dHVyZS5cbiAqXG4gKiBAbWVtYmVyIHtQSVhJLlRleHR1cmVbXX1cbiAqIEByZWFkb25seVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5jb2xvclRleHR1cmUuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy5jb2xvclRleHR1cmVzWzBdO1xufTtcblxuLyoqXG4gKiBBZGQgdGV4dHVyZSB0byB0aGUgY29sb3JUZXh0dXJlIGFycmF5XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleD0wXSAtIEluZGV4IG9mIHRoZSBhcnJheSB0byBhZGQgdGhlIHRleHR1cmUgdG9cbiAqIEBwYXJhbSB7UElYSS5UZXh0dXJlfSBbdGV4dHVyZV0gLSBUZXh0dXJlIHRvIGFkZCB0byB0aGUgYXJyYXlcbiAqL1xuRnJhbWVidWZmZXIucHJvdG90eXBlLmFkZENvbG9yVGV4dHVyZSA9IGZ1bmN0aW9uIGFkZENvbG9yVGV4dHVyZSAoaW5kZXgsIHRleHR1cmUpXG57XG4gICAgICAgIGlmICggaW5kZXggPT09IHZvaWQgMCApIGluZGV4ID0gMDtcblxuICAgIC8vIFRPRE8gYWRkIHNvbWUgdmFsaWRhdGlvbiB0byB0aGUgdGV4dHVyZSAtIHNhbWUgd2lkdGggLyBoZWlnaHQgZXRjP1xuICAgIHRoaXMuY29sb3JUZXh0dXJlc1tpbmRleF0gPSB0ZXh0dXJlIHx8IG5ldyBCYXNlVGV4dHVyZShudWxsLCB7IHNjYWxlTW9kZTogMCxcbiAgICAgICAgcmVzb2x1dGlvbjogMSxcbiAgICAgICAgbWlwbWFwOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQgfSk7Ly8gfHwgbmV3IFRleHR1cmUoKTtcblxuICAgIHRoaXMuZGlydHlJZCsrO1xuICAgIHRoaXMuZGlydHlGb3JtYXQrKztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGQgYSBkZXB0aCB0ZXh0dXJlIHRvIHRoZSBmcmFtZSBidWZmZXJcbiAqXG4gKiBAcGFyYW0ge1BJWEkuVGV4dHVyZX0gW3RleHR1cmVdIC0gVGV4dHVyZSB0byBhZGRcbiAqL1xuRnJhbWVidWZmZXIucHJvdG90eXBlLmFkZERlcHRoVGV4dHVyZSA9IGZ1bmN0aW9uIGFkZERlcHRoVGV4dHVyZSAodGV4dHVyZSlcbntcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgdGhpcy5kZXB0aFRleHR1cmUgPSB0ZXh0dXJlIHx8IG5ldyBCYXNlVGV4dHVyZShuZXcgRGVwdGhSZXNvdXJjZShudWxsLCB7IHdpZHRoOiB0aGlzLndpZHRoLCBoZWlnaHQ6IHRoaXMuaGVpZ2h0IH0pLCB7IHNjYWxlTW9kZTogMCxcbiAgICAgICAgcmVzb2x1dGlvbjogMSxcbiAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgIG1pcG1hcDogZmFsc2UsXG4gICAgICAgIGZvcm1hdDogRk9STUFUUy5ERVBUSF9DT01QT05FTlQsXG4gICAgICAgIHR5cGU6IFRZUEVTLlVOU0lHTkVEX1NIT1JUIH0pOy8vIFVOU0lHTkVEX1NIT1JUO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICB0aGlzLmRpcnR5SWQrKztcbiAgICB0aGlzLmRpcnR5Rm9ybWF0Kys7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRW5hYmxlIGRlcHRoIG9uIHRoZSBmcmFtZSBidWZmZXJcbiAqL1xuRnJhbWVidWZmZXIucHJvdG90eXBlLmVuYWJsZURlcHRoID0gZnVuY3Rpb24gZW5hYmxlRGVwdGggKClcbntcbiAgICB0aGlzLmRlcHRoID0gdHJ1ZTtcblxuICAgIHRoaXMuZGlydHlJZCsrO1xuICAgIHRoaXMuZGlydHlGb3JtYXQrKztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBFbmFibGUgc3RlbmNpbCBvbiB0aGUgZnJhbWUgYnVmZmVyXG4gKi9cbkZyYW1lYnVmZmVyLnByb3RvdHlwZS5lbmFibGVTdGVuY2lsID0gZnVuY3Rpb24gZW5hYmxlU3RlbmNpbCAoKVxue1xuICAgIHRoaXMuc3RlbmNpbCA9IHRydWU7XG5cbiAgICB0aGlzLmRpcnR5SWQrKztcbiAgICB0aGlzLmRpcnR5Rm9ybWF0Kys7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVzaXplIHRoZSBmcmFtZSBidWZmZXJcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBXaWR0aCBvZiB0aGUgZnJhbWUgYnVmZmVyIHRvIHJlc2l6ZSB0b1xuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIEhlaWdodCBvZiB0aGUgZnJhbWUgYnVmZmVyIHRvIHJlc2l6ZSB0b1xuICovXG5GcmFtZWJ1ZmZlci5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gcmVzaXplICh3aWR0aCwgaGVpZ2h0KVxue1xuICAgIHdpZHRoID0gTWF0aC5jZWlsKHdpZHRoKTtcbiAgICBoZWlnaHQgPSBNYXRoLmNlaWwoaGVpZ2h0KTtcblxuICAgIGlmICh3aWR0aCA9PT0gdGhpcy53aWR0aCAmJiBoZWlnaHQgPT09IHRoaXMuaGVpZ2h0KSB7IHJldHVybjsgfVxuXG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgdGhpcy5kaXJ0eUlkKys7XG4gICAgdGhpcy5kaXJ0eVNpemUrKztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb2xvclRleHR1cmVzLmxlbmd0aDsgaSsrKVxuICAgIHtcbiAgICAgICAgdmFyIHRleHR1cmUgPSB0aGlzLmNvbG9yVGV4dHVyZXNbaV07XG4gICAgICAgIHZhciByZXNvbHV0aW9uID0gdGV4dHVyZS5yZXNvbHV0aW9uO1xuXG4gICAgICAgIC8vIHRha2UgaW50byBhY291bnQgdGhlIGZhY3QgdGhlIHRleHR1cmUgbWF5IGhhdmUgYSBkaWZmZXJlbnQgcmVzb2x1dGlvbi4uXG4gICAgICAgIHRleHR1cmUuc2V0U2l6ZSh3aWR0aCAvIHJlc29sdXRpb24sIGhlaWdodCAvIHJlc29sdXRpb24pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRlcHRoVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciByZXNvbHV0aW9uJDEgPSB0aGlzLmRlcHRoVGV4dHVyZS5yZXNvbHV0aW9uO1xuXG4gICAgICAgIHRoaXMuZGVwdGhUZXh0dXJlLnNldFNpemUod2lkdGggLyByZXNvbHV0aW9uJDEsIGhlaWdodCAvIHJlc29sdXRpb24kMSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBkaXNwb3NlcyBXZWJHTCByZXNvdXJjZXMgdGhhdCBhcmUgY29ubmVjdGVkIHRvIHRoaXMgZ2VvbWV0cnlcbiAqL1xuRnJhbWVidWZmZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlICgpXG57XG4gICAgdGhpcy5kaXNwb3NlUnVubmVyLnJ1bih0aGlzLCBmYWxzZSk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggRnJhbWVidWZmZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG4vKipcbiAqIEEgQmFzZVJlbmRlclRleHR1cmUgaXMgYSBzcGVjaWFsIHRleHR1cmUgdGhhdCBhbGxvd3MgYW55IFBpeGlKUyBkaXNwbGF5IG9iamVjdCB0byBiZSByZW5kZXJlZCB0byBpdC5cbiAqXG4gKiBfX0hpbnRfXzogQWxsIERpc3BsYXlPYmplY3RzIChpLmUuIFNwcml0ZXMpIHRoYXQgcmVuZGVyIHRvIGEgQmFzZVJlbmRlclRleHR1cmUgc2hvdWxkIGJlIHByZWxvYWRlZFxuICogb3RoZXJ3aXNlIGJsYWNrIHJlY3RhbmdsZXMgd2lsbCBiZSBkcmF3biBpbnN0ZWFkLlxuICpcbiAqIEEgQmFzZVJlbmRlclRleHR1cmUgdGFrZXMgYSBzbmFwc2hvdCBvZiBhbnkgRGlzcGxheSBPYmplY3QgZ2l2ZW4gdG8gaXRzIHJlbmRlciBtZXRob2QuIFRoZSBwb3NpdGlvblxuICogYW5kIHJvdGF0aW9uIG9mIHRoZSBnaXZlbiBEaXNwbGF5IE9iamVjdHMgaXMgaWdub3JlZC4gRm9yIGV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGxldCByZW5kZXJlciA9IFBJWEkuYXV0b0RldGVjdFJlbmRlcmVyKCk7XG4gKiBsZXQgYmFzZVJlbmRlclRleHR1cmUgPSBuZXcgUElYSS5CYXNlUmVuZGVyVGV4dHVyZSh7IHdpZHRoOiA4MDAsIGhlaWdodDogNjAwIH0pO1xuICogbGV0IHJlbmRlclRleHR1cmUgPSBuZXcgUElYSS5SZW5kZXJUZXh0dXJlKGJhc2VSZW5kZXJUZXh0dXJlKTtcbiAqIGxldCBzcHJpdGUgPSBQSVhJLlNwcml0ZS5mcm9tKFwic3Bpbk9ial8wMS5wbmdcIik7XG4gKlxuICogc3ByaXRlLnBvc2l0aW9uLnggPSA4MDAvMjtcbiAqIHNwcml0ZS5wb3NpdGlvbi55ID0gNjAwLzI7XG4gKiBzcHJpdGUuYW5jaG9yLnggPSAwLjU7XG4gKiBzcHJpdGUuYW5jaG9yLnkgPSAwLjU7XG4gKlxuICogcmVuZGVyZXIucmVuZGVyKHNwcml0ZSwgcmVuZGVyVGV4dHVyZSk7XG4gKiBgYGBcbiAqXG4gKiBUaGUgU3ByaXRlIGluIHRoaXMgY2FzZSB3aWxsIGJlIHJlbmRlcmVkIHVzaW5nIGl0cyBsb2NhbCB0cmFuc2Zvcm0uIFRvIHJlbmRlciB0aGlzIHNwcml0ZSBhdCAwLDBcbiAqIHlvdSBjYW4gY2xlYXIgdGhlIHRyYW5zZm9ybVxuICpcbiAqIGBgYGpzXG4gKlxuICogc3ByaXRlLnNldFRyYW5zZm9ybSgpXG4gKlxuICogbGV0IGJhc2VSZW5kZXJUZXh0dXJlID0gbmV3IFBJWEkuQmFzZVJlbmRlclRleHR1cmUoeyB3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMCB9KTtcbiAqIGxldCByZW5kZXJUZXh0dXJlID0gbmV3IFBJWEkuUmVuZGVyVGV4dHVyZShiYXNlUmVuZGVyVGV4dHVyZSk7XG4gKlxuICogcmVuZGVyZXIucmVuZGVyKHNwcml0ZSwgcmVuZGVyVGV4dHVyZSk7ICAvLyBSZW5kZXJzIHRvIGNlbnRlciBvZiBSZW5kZXJUZXh0dXJlXG4gKiBgYGBcbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuQmFzZVRleHR1cmVcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBCYXNlUmVuZGVyVGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEJhc2VUZXh0dXJlKSB7XG4gICAgZnVuY3Rpb24gQmFzZVJlbmRlclRleHR1cmUob3B0aW9ucylcbiAgICB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ251bWJlcicpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIHByZWZlci1yZXN0LXBhcmFtcyAqL1xuICAgICAgICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSBvZiBzaWduYXR1cmVcbiAgICAgICAgICAgIHZhciB3aWR0aCQxID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdmFyIGhlaWdodCQxID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgdmFyIHNjYWxlTW9kZSA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgICAgIHZhciByZXNvbHV0aW9uID0gYXJndW1lbnRzWzNdO1xuXG4gICAgICAgICAgICBvcHRpb25zID0geyB3aWR0aDogd2lkdGgkMSwgaGVpZ2h0OiBoZWlnaHQkMSwgc2NhbGVNb2RlOiBzY2FsZU1vZGUsIHJlc29sdXRpb246IHJlc29sdXRpb24gfTtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG4gICAgICAgIH1cblxuICAgICAgICBCYXNlVGV4dHVyZS5jYWxsKHRoaXMsIG51bGwsIG9wdGlvbnMpO1xuXG4gICAgICAgIHZhciByZWYgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgd2lkdGggPSByZWYud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuXG4gICAgICAgIC8vIFNldCBkZWZhdWx0c1xuICAgICAgICB0aGlzLm1pcG1hcCA9IGZhbHNlO1xuICAgICAgICB0aGlzLndpZHRoID0gTWF0aC5jZWlsKHdpZHRoKSB8fCAxMDA7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCkgfHwgMTAwO1xuICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGNhbnZhcyByZW5kZXIgdGFyZ2V0ICh3ZSBvbmx5IG5lZWQgb25lIGFzIHRoaXMgY2FuIGJlIHNoYXJlZCBhY3Jvc3MgcmVuZGVyZXJzKVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2NhbnZhc1JlbmRlclRhcmdldCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5jbGVhckNvbG9yID0gWzAsIDAsIDAsIDBdO1xuXG4gICAgICAgIHRoaXMuZnJhbWVidWZmZXIgPSBuZXcgRnJhbWVidWZmZXIodGhpcy53aWR0aCAqIHRoaXMucmVzb2x1dGlvbiwgdGhpcy5oZWlnaHQgKiB0aGlzLnJlc29sdXRpb24pXG4gICAgICAgICAgICAuYWRkQ29sb3JUZXh0dXJlKDAsIHRoaXMpO1xuXG4gICAgICAgIC8vIFRPRE8gLSBjb3VsZCB0aGlzIGJlIGFkZGVkIHRoZSBzeXN0ZW1zP1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGF0YSBzdHJ1Y3R1cmUgZm9yIHRoZSBzdGVuY2lsIG1hc2tzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkdyYXBoaWNzW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0ZW5jaWxNYXNrU3RhY2sgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRhdGEgc3RydWN0dXJlIGZvciB0aGUgZmlsdGVycy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5HcmFwaGljc1tdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWx0ZXJTdGFjayA9IFt7fV07XG4gICAgfVxuXG4gICAgaWYgKCBCYXNlVGV4dHVyZSApIEJhc2VSZW5kZXJUZXh0dXJlLl9fcHJvdG9fXyA9IEJhc2VUZXh0dXJlO1xuICAgIEJhc2VSZW5kZXJUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJhc2VUZXh0dXJlICYmIEJhc2VUZXh0dXJlLnByb3RvdHlwZSApO1xuICAgIEJhc2VSZW5kZXJUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJhc2VSZW5kZXJUZXh0dXJlO1xuXG4gICAgLyoqXG4gICAgICogUmVzaXplcyB0aGUgQmFzZVJlbmRlclRleHR1cmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggdG8gcmVzaXplIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IHRvIHJlc2l6ZSB0by5cbiAgICAgKi9cbiAgICBCYXNlUmVuZGVyVGV4dHVyZS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gcmVzaXplICh3aWR0aCwgaGVpZ2h0KVxuICAgIHtcbiAgICAgICAgd2lkdGggPSBNYXRoLmNlaWwod2lkdGgpO1xuICAgICAgICBoZWlnaHQgPSBNYXRoLmNlaWwoaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5mcmFtZWJ1ZmZlci5yZXNpemUod2lkdGggKiB0aGlzLnJlc29sdXRpb24sIGhlaWdodCAqIHRoaXMucmVzb2x1dGlvbik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZyZWVzIHRoZSB0ZXh0dXJlIGFuZCBmcmFtZWJ1ZmZlciBmcm9tIFdlYkdMIG1lbW9yeSB3aXRob3V0IGRlc3Ryb3lpbmcgdGhpcyB0ZXh0dXJlIG9iamVjdC5cbiAgICAgKiBUaGlzIG1lYW5zIHlvdSBjYW4gc3RpbGwgdXNlIHRoZSB0ZXh0dXJlIGxhdGVyIHdoaWNoIHdpbGwgdXBsb2FkIGl0IHRvIEdQVVxuICAgICAqIG1lbW9yeSBhZ2Fpbi5cbiAgICAgKlxuICAgICAqIEBmaXJlcyBQSVhJLkJhc2VUZXh0dXJlI2Rpc3Bvc2VcbiAgICAgKi9cbiAgICBCYXNlUmVuZGVyVGV4dHVyZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZnJhbWVidWZmZXIuZGlzcG9zZSgpO1xuXG4gICAgICAgIEJhc2VUZXh0dXJlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgdGV4dHVyZS5cbiAgICAgKlxuICAgICAqL1xuICAgIEJhc2VSZW5kZXJUZXh0dXJlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxuICAgIHtcbiAgICAgICAgQmFzZVRleHR1cmUucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzLCB0cnVlKTtcblxuICAgICAgICB0aGlzLmZyYW1lYnVmZmVyID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJhc2VSZW5kZXJUZXh0dXJlO1xufShCYXNlVGV4dHVyZSkpO1xuXG4vKipcbiAqIFN0b3JlcyBhIHRleHR1cmUncyBmcmFtZSBpbiBVViBjb29yZGluYXRlcywgaW5cbiAqIHdoaWNoIGV2ZXJ5dGhpbmcgbGllcyBpbiB0aGUgcmVjdGFuZ2xlIGBbKDAsMCksICgxLDApLFxuICogKDEsMSksICgwLDEpXWAuXG4gKlxuICogfCBDb3JuZXIgICAgICAgfCBDb29yZGluYXRlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLXxcbiAqIHwgVG9wLUxlZnQgICAgIHwgYCh4MCx5MClgICAgfFxuICogfCBUb3AtUmlnaHQgICAgfCBgKHgxLHkxKWAgICB8XG4gKiB8IEJvdHRvbS1SaWdodCB8IGAoeDIseTIpYCAgIHxcbiAqIHwgQm90dG9tLUxlZnQgIHwgYCh4Myx5MylgICAgfFxuICpcbiAqIEBjbGFzc1xuICogQHByb3RlY3RlZFxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFRleHR1cmVVdnMgPSBmdW5jdGlvbiBUZXh0dXJlVXZzKClcbntcbiAgICAvKipcbiAgICAgKiBYLWNvbXBvbmVudCBvZiB0b3AtbGVmdCBjb3JuZXIgYCh4MCx5MClgLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMueDAgPSAwO1xuXG4gICAgLyoqXG4gICAgICogWS1jb21wb25lbnQgb2YgdG9wLWxlZnQgY29ybmVyIGAoeDAseTApYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnkwID0gMDtcblxuICAgIC8qKlxuICAgICAqIFgtY29tcG9uZW50IG9mIHRvcC1yaWdodCBjb3JuZXIgYCh4MSx5MSlgLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMueDEgPSAxO1xuXG4gICAgLyoqXG4gICAgICogWS1jb21wb25lbnQgb2YgdG9wLXJpZ2h0IGNvcm5lciBgKHgxLHkxKWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy55MSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBYLWNvbXBvbmVudCBvZiBib3R0b20tcmlnaHQgY29ybmVyIGAoeDIseTIpYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLngyID0gMTtcblxuICAgIC8qKlxuICAgICAqIFktY29tcG9uZW50IG9mIGJvdHRvbS1yaWdodCBjb3JuZXIgYCh4Mix5MilgLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMueTIgPSAxO1xuXG4gICAgLyoqXG4gICAgICogWC1jb21wb25lbnQgb2YgYm90dG9tLWxlZnQgY29ybmVyIGAoeDMseTMpYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLngzID0gMDtcblxuICAgIC8qKlxuICAgICAqIFktY29tcG9uZW50IG9mIGJvdHRvbS1yaWdodCBjb3JuZXIgYCh4Myx5MylgLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMueTMgPSAxO1xuXG4gICAgdGhpcy51dnNGbG9hdDMyID0gbmV3IEZsb2F0MzJBcnJheSg4KTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgdGV4dHVyZSBVdnMgYmFzZWQgb24gdGhlIGdpdmVuIGZyYW1lIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwcm90ZWN0ZWRcbiAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IGZyYW1lIC0gVGhlIGZyYW1lIG9mIHRoZSB0ZXh0dXJlXG4gKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBiYXNlRnJhbWUgLSBUaGUgYmFzZSBmcmFtZSBvZiB0aGUgdGV4dHVyZVxuICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0ZSAtIFJvdGF0aW9uIG9mIGZyYW1lLCBzZWUge0BsaW5rIFBJWEkuR3JvdXBEOH1cbiAqL1xuVGV4dHVyZVV2cy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0IChmcmFtZSwgYmFzZUZyYW1lLCByb3RhdGUpXG57XG4gICAgdmFyIHR3ID0gYmFzZUZyYW1lLndpZHRoO1xuICAgIHZhciB0aCA9IGJhc2VGcmFtZS5oZWlnaHQ7XG5cbiAgICBpZiAocm90YXRlKVxuICAgIHtcbiAgICAgICAgLy8gd2lkdGggYW5kIGhlaWdodCBkaXYgMiBkaXYgYmFzZUZyYW1lIHNpemVcbiAgICAgICAgdmFyIHcyID0gZnJhbWUud2lkdGggLyAyIC8gdHc7XG4gICAgICAgIHZhciBoMiA9IGZyYW1lLmhlaWdodCAvIDIgLyB0aDtcblxuICAgICAgICAvLyBjb29yZGluYXRlcyBvZiBjZW50ZXJcbiAgICAgICAgdmFyIGNYID0gKGZyYW1lLnggLyB0dykgKyB3MjtcbiAgICAgICAgdmFyIGNZID0gKGZyYW1lLnkgLyB0aCkgKyBoMjtcblxuICAgICAgICByb3RhdGUgPSBHcm91cEQ4LmFkZChyb3RhdGUsIEdyb3VwRDguTlcpOyAvLyBOVyBpcyB0b3AtbGVmdCBjb3JuZXJcbiAgICAgICAgdGhpcy54MCA9IGNYICsgKHcyICogR3JvdXBEOC51WChyb3RhdGUpKTtcbiAgICAgICAgdGhpcy55MCA9IGNZICsgKGgyICogR3JvdXBEOC51WShyb3RhdGUpKTtcblxuICAgICAgICByb3RhdGUgPSBHcm91cEQ4LmFkZChyb3RhdGUsIDIpOyAvLyByb3RhdGUgOTAgZGVncmVlcyBjbG9ja3dpc2VcbiAgICAgICAgdGhpcy54MSA9IGNYICsgKHcyICogR3JvdXBEOC51WChyb3RhdGUpKTtcbiAgICAgICAgdGhpcy55MSA9IGNZICsgKGgyICogR3JvdXBEOC51WShyb3RhdGUpKTtcblxuICAgICAgICByb3RhdGUgPSBHcm91cEQ4LmFkZChyb3RhdGUsIDIpO1xuICAgICAgICB0aGlzLngyID0gY1ggKyAodzIgKiBHcm91cEQ4LnVYKHJvdGF0ZSkpO1xuICAgICAgICB0aGlzLnkyID0gY1kgKyAoaDIgKiBHcm91cEQ4LnVZKHJvdGF0ZSkpO1xuXG4gICAgICAgIHJvdGF0ZSA9IEdyb3VwRDguYWRkKHJvdGF0ZSwgMik7XG4gICAgICAgIHRoaXMueDMgPSBjWCArICh3MiAqIEdyb3VwRDgudVgocm90YXRlKSk7XG4gICAgICAgIHRoaXMueTMgPSBjWSArIChoMiAqIEdyb3VwRDgudVkocm90YXRlKSk7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIHRoaXMueDAgPSBmcmFtZS54IC8gdHc7XG4gICAgICAgIHRoaXMueTAgPSBmcmFtZS55IC8gdGg7XG5cbiAgICAgICAgdGhpcy54MSA9IChmcmFtZS54ICsgZnJhbWUud2lkdGgpIC8gdHc7XG4gICAgICAgIHRoaXMueTEgPSBmcmFtZS55IC8gdGg7XG5cbiAgICAgICAgdGhpcy54MiA9IChmcmFtZS54ICsgZnJhbWUud2lkdGgpIC8gdHc7XG4gICAgICAgIHRoaXMueTIgPSAoZnJhbWUueSArIGZyYW1lLmhlaWdodCkgLyB0aDtcblxuICAgICAgICB0aGlzLngzID0gZnJhbWUueCAvIHR3O1xuICAgICAgICB0aGlzLnkzID0gKGZyYW1lLnkgKyBmcmFtZS5oZWlnaHQpIC8gdGg7XG4gICAgfVxuXG4gICAgdGhpcy51dnNGbG9hdDMyWzBdID0gdGhpcy54MDtcbiAgICB0aGlzLnV2c0Zsb2F0MzJbMV0gPSB0aGlzLnkwO1xuICAgIHRoaXMudXZzRmxvYXQzMlsyXSA9IHRoaXMueDE7XG4gICAgdGhpcy51dnNGbG9hdDMyWzNdID0gdGhpcy55MTtcbiAgICB0aGlzLnV2c0Zsb2F0MzJbNF0gPSB0aGlzLngyO1xuICAgIHRoaXMudXZzRmxvYXQzMls1XSA9IHRoaXMueTI7XG4gICAgdGhpcy51dnNGbG9hdDMyWzZdID0gdGhpcy54MztcbiAgICB0aGlzLnV2c0Zsb2F0MzJbN10gPSB0aGlzLnkzO1xufTtcblxudmFyIERFRkFVTFRfVVZTID0gbmV3IFRleHR1cmVVdnMoKTtcblxuLyoqXG4gKiBBIHRleHR1cmUgc3RvcmVzIHRoZSBpbmZvcm1hdGlvbiB0aGF0IHJlcHJlc2VudHMgYW4gaW1hZ2Ugb3IgcGFydCBvZiBhbiBpbWFnZS5cbiAqXG4gKiBJdCBjYW5ub3QgYmUgYWRkZWQgdG8gdGhlIGRpc3BsYXkgbGlzdCBkaXJlY3RseTsgaW5zdGVhZCB1c2UgaXQgYXMgdGhlIHRleHR1cmUgZm9yIGEgU3ByaXRlLlxuICogSWYgbm8gZnJhbWUgaXMgcHJvdmlkZWQgZm9yIGEgdGV4dHVyZSwgdGhlbiB0aGUgd2hvbGUgaW1hZ2UgaXMgdXNlZC5cbiAqXG4gKiBZb3UgY2FuIGRpcmVjdGx5IGNyZWF0ZSBhIHRleHR1cmUgZnJvbSBhbiBpbWFnZSBhbmQgdGhlbiByZXVzZSBpdCBtdWx0aXBsZSB0aW1lcyBsaWtlIHRoaXMgOlxuICpcbiAqIGBgYGpzXG4gKiBsZXQgdGV4dHVyZSA9IFBJWEkuVGV4dHVyZS5mcm9tKCdhc3NldHMvaW1hZ2UucG5nJyk7XG4gKiBsZXQgc3ByaXRlMSA9IG5ldyBQSVhJLlNwcml0ZSh0ZXh0dXJlKTtcbiAqIGxldCBzcHJpdGUyID0gbmV3IFBJWEkuU3ByaXRlKHRleHR1cmUpO1xuICogYGBgXG4gKlxuICogSWYgeW91IGRpZG50IHBhc3MgdGhlIHRleHR1cmUgZnJhbWUgdG8gY29uc3RydWN0b3IsIGl0IGVuYWJsZXMgYG5vRnJhbWVgIG1vZGU6XG4gKiBpdCBzdWJzY3JpYmVzIG9uIGJhc2VUZXh0dXJlIGV2ZW50cywgaXQgYXV0b21hdGljYWxseSByZXNpemVzIGF0IHRoZSBzYW1lIHRpbWUgYXMgYmFzZVRleHR1cmUuXG4gKlxuICogVGV4dHVyZXMgbWFkZSBmcm9tIFNWR3MsIGxvYWRlZCBvciBub3QsIGNhbm5vdCBiZSB1c2VkIGJlZm9yZSB0aGUgZmlsZSBmaW5pc2hlcyBwcm9jZXNzaW5nLlxuICogWW91IGNhbiBjaGVjayBmb3IgdGhpcyBieSBjaGVja2luZyB0aGUgc3ByaXRlJ3MgX3RleHR1cmVJRCBwcm9wZXJ0eS5cbiAqIGBgYGpzXG4gKiB2YXIgdGV4dHVyZSA9IFBJWEkuVGV4dHVyZS5mcm9tKCdhc3NldHMvaW1hZ2Uuc3ZnJyk7XG4gKiB2YXIgc3ByaXRlMSA9IG5ldyBQSVhJLlNwcml0ZSh0ZXh0dXJlKTtcbiAqIC8vc3ByaXRlMS5fdGV4dHVyZUlEIHNob3VsZCBub3QgYmUgdW5kZWZpbmVkIGlmIHRoZSB0ZXh0dXJlIGhhcyBmaW5pc2hlZCBwcm9jZXNzaW5nIHRoZSBTVkcgZmlsZVxuICogYGBgXG4gKiBZb3UgY2FuIHVzZSBhIHRpY2tlciBvciByQUYgdG8gZW5zdXJlIHlvdXIgc3ByaXRlcyBsb2FkIHRoZSBmaW5pc2hlZCB0ZXh0dXJlcyBhZnRlciBwcm9jZXNzaW5nLiBTZWUgaXNzdWUgIzMwNjguXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLnV0aWxzLkV2ZW50RW1pdHRlclxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFRleHR1cmUgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChFdmVudEVtaXR0ZXIpIHtcbiAgICBmdW5jdGlvbiBUZXh0dXJlKGJhc2VUZXh0dXJlLCBmcmFtZSwgb3JpZywgdHJpbSwgcm90YXRlLCBhbmNob3IpXG4gICAge1xuICAgICAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRG9lcyB0aGlzIFRleHR1cmUgaGF2ZSBhbnkgZnJhbWUgZGF0YSBhc3NpZ25lZCB0byBpdD9cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtb2RlIGlzIGVuYWJsZWQgYXV0b21hdGljYWxseSBpZiBubyBmcmFtZSB3YXMgcGFzc2VkIGluc2lkZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICpcbiAgICAgICAgICogSW4gdGhpcyBtb2RlIHRleHR1cmUgaXMgc3Vic2NyaWJlZCB0byBiYXNlVGV4dHVyZSBldmVudHMsIGFuZCBmaXJlcyBgdXBkYXRlYCBvbiBhbnkgY2hhbmdlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBCZXdhcmUsIGFmdGVyIGxvYWRpbmcgb3IgcmVzaXplIG9mIGJhc2VUZXh0dXJlIGV2ZW50IGNhbiBmaXJlZCB0d28gdGltZXMhXG4gICAgICAgICAqIElmIHlvdSB3YW50IG1vcmUgY29udHJvbCwgc3Vic2NyaWJlIG9uIGJhc2VUZXh0dXJlIGl0c2VsZi5cbiAgICAgICAgICpcbiAgICAgICAgICogYGBganNcbiAgICAgICAgICogdGV4dHVyZS5vbigndXBkYXRlJywgKCkgPT4ge30pO1xuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogQW55IGFzc2lnbm1lbnQgb2YgYGZyYW1lYCBzd2l0Y2hlcyBvZmYgYG5vRnJhbWVgIG1vZGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5vRnJhbWUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIWZyYW1lKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLm5vRnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgZnJhbWUgPSBuZXcgUmVjdGFuZ2xlKDAsIDAsIDEsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJhc2VUZXh0dXJlIGluc3RhbmNlb2YgVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgYmFzZVRleHR1cmUgPSBiYXNlVGV4dHVyZS5iYXNlVGV4dHVyZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYmFzZSB0ZXh0dXJlIHRoYXQgdGhpcyB0ZXh0dXJlIHVzZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuQmFzZVRleHR1cmV9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJhc2VUZXh0dXJlID0gYmFzZVRleHR1cmU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgaXMgdGhlIGFyZWEgb2YgdGhlIEJhc2VUZXh0dXJlIGltYWdlIHRvIGFjdHVhbGx5IGNvcHkgdG8gdGhlIENhbnZhcyAvIFdlYkdMIHdoZW4gcmVuZGVyaW5nLFxuICAgICAgICAgKiBpcnJlc3BlY3RpdmUgb2YgdGhlIGFjdHVhbCBmcmFtZSBzaXplIG9yIHBsYWNlbWVudCAod2hpY2ggY2FuIGJlIGluZmx1ZW5jZWQgYnkgdHJpbW1lZCB0ZXh0dXJlIGF0bGFzZXMpXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUmVjdGFuZ2xlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZnJhbWUgPSBmcmFtZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBpcyB0aGUgdHJpbW1lZCBhcmVhIG9mIG9yaWdpbmFsIHRleHR1cmUsIGJlZm9yZSBpdCB3YXMgcHV0IGluIGF0bGFzXG4gICAgICAgICAqIFBsZWFzZSBjYWxsIGB1cGRhdGVVdnMoKWAgYWZ0ZXIgeW91IGNoYW5nZSBjb29yZGluYXRlcyBvZiBgdHJpbWAgbWFudWFsbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUmVjdGFuZ2xlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50cmltID0gdHJpbTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyB3aWxsIGxldCB0aGUgcmVuZGVyZXIga25vdyBpZiB0aGUgdGV4dHVyZSBpcyB2YWxpZC4gSWYgaXQncyBub3QgdGhlbiBpdCBjYW5ub3QgYmUgcmVuZGVyZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgd2lsbCBsZXQgYSByZW5kZXJlciBrbm93IHRoYXQgYSB0ZXh0dXJlIGhhcyBiZWVuIHVwZGF0ZWQgKHVzZWQgbWFpbmx5IGZvciBXZWJHTCB1diB1cGRhdGVzKVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXF1aXJlc1VwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgV2ViR0wgVVYgZGF0YSBjYWNoZS4gQ2FuIGJlIHVzZWQgYXMgcXVhZCBVVlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlRleHR1cmVVdnN9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3V2cyA9IERFRkFVTFRfVVZTO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZhdWx0IFRleHR1cmVNYXRyaXggaW5zdGFuY2UgZm9yIHRoaXMgdGV4dHVyZVxuICAgICAgICAgKiBCeSBkZWZhdWx0IHRoYXQgb2JqZWN0IGlzIG5vdCBjcmVhdGVkIGJlY2F1c2UgaXRzIGhlYXZ5XG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuVGV4dHVyZU1hdHJpeH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudXZNYXRyaXggPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGlzIHRoZSBhcmVhIG9mIG9yaWdpbmFsIHRleHR1cmUsIGJlZm9yZSBpdCB3YXMgcHV0IGluIGF0bGFzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUmVjdGFuZ2xlfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vcmlnID0gb3JpZyB8fCBmcmFtZTsvLyBuZXcgUmVjdGFuZ2xlKDAsIDAsIDEsIDEpO1xuXG4gICAgICAgIHRoaXMuX3JvdGF0ZSA9IE51bWJlcihyb3RhdGUgfHwgMCk7XG5cbiAgICAgICAgaWYgKHJvdGF0ZSA9PT0gdHJ1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBvbGQgdGV4dHVyZXBhY2tlciBsZWdhY3ksIHNvbWUgZ2FtZXMvbGlicmFyaWVzIGFyZSBwYXNzaW5nIFwidHJ1ZVwiIGZvciByb3RhdGVkIHRleHR1cmVzXG4gICAgICAgICAgICB0aGlzLl9yb3RhdGUgPSAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3JvdGF0ZSAlIDIgIT09IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXR0ZW1wdCB0byB1c2UgZGlhbW9uZC1zaGFwZWQgVVZzLiBJZiB5b3UgYXJlIHN1cmUsIHNldCByb3RhdGlvbiBtYW51YWxseScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuY2hvciBwb2ludCB0aGF0IGlzIHVzZWQgYXMgZGVmYXVsdCBpZiBzcHJpdGUgaXMgY3JlYXRlZCB3aXRoIHRoaXMgdGV4dHVyZS5cbiAgICAgICAgICogQ2hhbmdpbmcgdGhlIGBkZWZhdWx0QW5jaG9yYCBhdCBhIGxhdGVyIHBvaW50IG9mIHRpbWUgd2lsbCBub3QgdXBkYXRlIFNwcml0ZSdzIGFuY2hvciBwb2ludC5cbiAgICAgICAgICogQG1lbWJlciB7UElYSS5Qb2ludH1cbiAgICAgICAgICogQGRlZmF1bHQgezAsMH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVmYXVsdEFuY2hvciA9IGFuY2hvciA/IG5ldyBQb2ludChhbmNob3IueCwgYW5jaG9yLnkpIDogbmV3IFBvaW50KDAsIDApO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgSUQgaXMgb2JzZXJ2ZWQgYnkgc3ByaXRlcyBhbmQgVGV4dHVyZU1hdHJpeCBpbnN0YW5jZXMuXG4gICAgICAgICAqIENhbGwgdXBkYXRlVXZzKCkgdG8gaW5jcmVtZW50IGl0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG5cbiAgICAgICAgdGhpcy5fdXBkYXRlSUQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaWRzIHVuZGVyIHdoaWNoIHRoaXMgVGV4dHVyZSBoYXMgYmVlbiBhZGRlZCB0byB0aGUgdGV4dHVyZSBjYWNoZS4gVGhpcyBpc1xuICAgICAgICAgKiBhdXRvbWF0aWNhbGx5IHNldCBhcyBsb25nIGFzIFRleHR1cmUuYWRkVG9DYWNoZSBpcyB1c2VkLCBidXQgbWF5IG5vdCBiZSBzZXQgaWYgYVxuICAgICAgICAgKiBUZXh0dXJlIGlzIGFkZGVkIGRpcmVjdGx5IHRvIHRoZSBUZXh0dXJlQ2FjaGUgYXJyYXkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ1tdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50ZXh0dXJlQ2FjaGVJZHMgPSBbXTtcblxuICAgICAgICBpZiAoIWJhc2VUZXh0dXJlLnZhbGlkKVxuICAgICAgICB7XG4gICAgICAgICAgICBiYXNlVGV4dHVyZS5vbmNlKCdsb2FkZWQnLCB0aGlzLm9uQmFzZVRleHR1cmVVcGRhdGVkLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm5vRnJhbWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIGZyYW1lIHdlIHNob3VsZCBtb25pdG9yIGZvciBhbnkgYmFzZSB0ZXh0dXJlIGNoYW5nZXMuLlxuICAgICAgICAgICAgaWYgKGJhc2VUZXh0dXJlLnZhbGlkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMub25CYXNlVGV4dHVyZVVwZGF0ZWQoYmFzZVRleHR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5mcmFtZSA9IGZyYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubm9GcmFtZSlcbiAgICAgICAge1xuICAgICAgICAgICAgYmFzZVRleHR1cmUub24oJ3VwZGF0ZScsIHRoaXMub25CYXNlVGV4dHVyZVVwZGF0ZWQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCBFdmVudEVtaXR0ZXIgKSBUZXh0dXJlLl9fcHJvdG9fXyA9IEV2ZW50RW1pdHRlcjtcbiAgICBUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2ZW50RW1pdHRlciAmJiBFdmVudEVtaXR0ZXIucHJvdG90eXBlICk7XG4gICAgVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXh0dXJlO1xuXG4gICAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgcmVzb2x1dGlvbjogeyBjb25maWd1cmFibGU6IHRydWUgfSxmcmFtZTogeyBjb25maWd1cmFibGU6IHRydWUgfSxyb3RhdGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sd2lkdGg6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0saGVpZ2h0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoaXMgdGV4dHVyZSBvbiB0aGUgZ3B1LlxuICAgICAqXG4gICAgICogQ2FsbHMgdGhlIFRleHR1cmVSZXNvdXJjZSB1cGRhdGUuXG4gICAgICpcbiAgICAgKiBJZiB5b3UgYWRqdXN0ZWQgYGZyYW1lYCBtYW51YWxseSwgcGxlYXNlIGNhbGwgYHVwZGF0ZVV2cygpYCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICovXG4gICAgVGV4dHVyZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5iYXNlVGV4dHVyZS5yZXNvdXJjZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5iYXNlVGV4dHVyZS5yZXNvdXJjZS51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgYmFzZSB0ZXh0dXJlIGlzIHVwZGF0ZWRcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IGJhc2VUZXh0dXJlIC0gVGhlIGJhc2UgdGV4dHVyZS5cbiAgICAgKi9cbiAgICBUZXh0dXJlLnByb3RvdHlwZS5vbkJhc2VUZXh0dXJlVXBkYXRlZCA9IGZ1bmN0aW9uIG9uQmFzZVRleHR1cmVVcGRhdGVkIChiYXNlVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLm5vRnJhbWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5iYXNlVGV4dHVyZS52YWxpZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lLndpZHRoID0gYmFzZVRleHR1cmUud2lkdGg7XG4gICAgICAgICAgICB0aGlzLl9mcmFtZS5oZWlnaHQgPSBiYXNlVGV4dHVyZS5oZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVXZzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBUT0RPIHRoaXMgY29kZSBsb29rcyBjb25mdXNpbmcuLiBib28gdG8gYWJ1c2luZyBnZXR0ZXJzIGFuZCBzZXR0ZXJzIVxuICAgICAgICAgICAgLy8gaWYgdXNlciBnYXZlIHVzIGZyYW1lIHRoYXQgaGFzIGJpZ2dlciBzaXplIHRoYW4gcmVzaXplZCB0ZXh0dXJlIGl0IGNhbiBiZSBhIHByb2JsZW1cbiAgICAgICAgICAgIHRoaXMuZnJhbWUgPSB0aGlzLl9mcmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZW1pdCgndXBkYXRlJywgdGhpcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgdGV4dHVyZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZGVzdHJveUJhc2U9ZmFsc2VdIFdoZXRoZXIgdG8gZGVzdHJveSB0aGUgYmFzZSB0ZXh0dXJlIGFzIHdlbGxcbiAgICAgKi9cbiAgICBUZXh0dXJlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoZGVzdHJveUJhc2UpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5iYXNlVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKGRlc3Ryb3lCYXNlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLmJhc2VUZXh0dXJlO1xuICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IHJlZi5yZXNvdXJjZTtcblxuICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSB0aGUgdGV4dHVyZSBpZiBpdCBleGlzdHMgaW4gdGhlIHRleHR1cmUgY2FjaGUuLlxuICAgICAgICAgICAgICAgIC8vIHRoaXMgb25seSBuZWVkcyB0byBiZSByZW1vdmVkIGlmIHRoZSBiYXNlIHRleHR1cmUgaXMgYWN0dWFsbHkgZGVzdHJveWVkIHRvby4uXG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlICYmIFRleHR1cmVDYWNoZVtyZXNvdXJjZS51cmxdKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgVGV4dHVyZS5yZW1vdmVGcm9tQ2FjaGUocmVzb3VyY2UudXJsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJhc2VUZXh0dXJlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5iYXNlVGV4dHVyZS5vZmYoJ3VwZGF0ZScsIHRoaXMub25CYXNlVGV4dHVyZVVwZGF0ZWQsIHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLmJhc2VUZXh0dXJlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2ZyYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdXZzID0gbnVsbDtcbiAgICAgICAgdGhpcy50cmltID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcmlnID0gbnVsbDtcblxuICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgVGV4dHVyZS5yZW1vdmVGcm9tQ2FjaGUodGhpcyk7XG4gICAgICAgIHRoaXMudGV4dHVyZUNhY2hlSWRzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0ZXh0dXJlIG9iamVjdCB0aGF0IGFjdHMgdGhlIHNhbWUgYXMgdGhpcyBvbmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQSVhJLlRleHR1cmV9IFRoZSBuZXcgdGV4dHVyZVxuICAgICAqL1xuICAgIFRleHR1cmUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKClcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgVGV4dHVyZSh0aGlzLmJhc2VUZXh0dXJlLCB0aGlzLmZyYW1lLCB0aGlzLm9yaWcsIHRoaXMudHJpbSwgdGhpcy5yb3RhdGUsIHRoaXMuZGVmYXVsdEFuY2hvcik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGludGVybmFsIFdlYkdMIFVWIGNhY2hlLiBVc2UgaXQgYWZ0ZXIgeW91IGNoYW5nZSBgZnJhbWVgIG9yIGB0cmltYCBvZiB0aGUgdGV4dHVyZS5cbiAgICAgKiBDYWxsIGl0IGFmdGVyIGNoYW5naW5nIHRoZSBmcmFtZVxuICAgICAqL1xuICAgIFRleHR1cmUucHJvdG90eXBlLnVwZGF0ZVV2cyA9IGZ1bmN0aW9uIHVwZGF0ZVV2cyAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuX3V2cyA9PT0gREVGQVVMVF9VVlMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3V2cyA9IG5ldyBUZXh0dXJlVXZzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl91dnMuc2V0KHRoaXMuX2ZyYW1lLCB0aGlzLmJhc2VUZXh0dXJlLCB0aGlzLnJvdGF0ZSk7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlSUQrKztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIG5ldyBUZXh0dXJlIGJhc2VkIG9uIHRoZSBzb3VyY2UgeW91IHByb3ZpZGUuXG4gICAgICogVGhlIHNvdXJjZSBjYW4gYmUgLSBmcmFtZSBpZCwgaW1hZ2UgdXJsLCB2aWRlbyB1cmwsIGNhbnZhcyBlbGVtZW50LCB2aWRlbyBlbGVtZW50LCBiYXNlIHRleHR1cmVcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudHxIVE1MVmlkZW9FbGVtZW50fFBJWEkuQmFzZVRleHR1cmV9IHNvdXJjZVxuICAgICAqICAgICAgICBTb3VyY2UgdG8gY3JlYXRlIHRleHR1cmUgZnJvbVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gU2VlIHtAbGluayBQSVhJLkJhc2VUZXh0dXJlfSdzIGNvbnN0cnVjdG9yIGZvciBvcHRpb25zLlxuICAgICAqIEByZXR1cm4ge1BJWEkuVGV4dHVyZX0gVGhlIG5ld2x5IGNyZWF0ZWQgdGV4dHVyZVxuICAgICAqL1xuICAgIFRleHR1cmUuZnJvbSA9IGZ1bmN0aW9uIGZyb20gKHNvdXJjZSwgb3B0aW9ucylcbiAgICB7XG4gICAgICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gICAgICAgIHZhciBjYWNoZUlkID0gbnVsbDtcblxuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhY2hlSWQgPSBzb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIXNvdXJjZS5fcGl4aUlkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNvdXJjZS5fcGl4aUlkID0gXCJwaXhpaWRfXCIgKyAodWlkKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWNoZUlkID0gc291cmNlLl9waXhpSWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGV4dHVyZSA9IFRleHR1cmVDYWNoZVtjYWNoZUlkXTtcblxuICAgICAgICBpZiAoIXRleHR1cmUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5yZXNvbHV0aW9uKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucmVzb2x1dGlvbiA9IGdldFJlc29sdXRpb25PZlVybChzb3VyY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0ZXh0dXJlID0gbmV3IFRleHR1cmUobmV3IEJhc2VUZXh0dXJlKHNvdXJjZSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgdGV4dHVyZS5iYXNlVGV4dHVyZS5jYWNoZUlkID0gY2FjaGVJZDtcblxuICAgICAgICAgICAgQmFzZVRleHR1cmUuYWRkVG9DYWNoZSh0ZXh0dXJlLmJhc2VUZXh0dXJlLCBjYWNoZUlkKTtcbiAgICAgICAgICAgIFRleHR1cmUuYWRkVG9DYWNoZSh0ZXh0dXJlLCBjYWNoZUlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxldHMgYXNzdW1lIGl0cyBhIGJhc2UgdGV4dHVyZSFcbiAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBUZXh0dXJlIHdpdGggYSBCdWZmZXJSZXNvdXJjZSBmcm9tIGEgRmxvYXQzMkFycmF5LlxuICAgICAqIFJHQkEgdmFsdWVzIGFyZSBmbG9hdHMgZnJvbSAwIHRvIDEuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fFVpbnQ4QXJyYXl9IGJ1ZmZlciBUaGUgb3B0aW9uYWwgYXJyYXkgdG8gdXNlLCBpZiBubyBkYXRhXG4gICAgICogICAgICAgIGlzIHByb3ZpZGVkLCBhIG5ldyBGbG9hdDMyQXJyYXkgaXMgY3JlYXRlZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBXaWR0aCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gSGVpZ2h0IG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gU2VlIHtAbGluayBQSVhJLkJhc2VUZXh0dXJlfSdzIGNvbnN0cnVjdG9yIGZvciBvcHRpb25zLlxuICAgICAqIEByZXR1cm4ge1BJWEkuVGV4dHVyZX0gVGhlIHJlc3VsdGluZyBuZXcgQmFzZVRleHR1cmVcbiAgICAgKi9cbiAgICBUZXh0dXJlLmZyb21CdWZmZXIgPSBmdW5jdGlvbiBmcm9tQnVmZmVyIChidWZmZXIsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IFRleHR1cmUoQmFzZVRleHR1cmUuZnJvbUJ1ZmZlcihidWZmZXIsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgdGV4dHVyZSBmcm9tIGEgc291cmNlIGFuZCBhZGQgdG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudH0gc291cmNlIC0gVGhlIGlucHV0IHNvdXJjZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaW1hZ2VVcmwgLSBGaWxlIG5hbWUgb2YgdGV4dHVyZSwgZm9yIGNhY2hlIGFuZCByZXNvbHZpbmcgcmVzb2x1dGlvbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW25hbWVdIC0gSHVtYW4gcmVhZGFibGUgbmFtZSBmb3IgdGhlIHRleHR1cmUgY2FjaGUuIElmIG5vIG5hbWUgaXNcbiAgICAgKiAgICAgICAgc3BlY2lmaWVkLCBvbmx5IGBpbWFnZVVybGAgd2lsbCBiZSB1c2VkIGFzIHRoZSBjYWNoZSBJRC5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLlRleHR1cmV9IE91dHB1dCB0ZXh0dXJlXG4gICAgICovXG4gICAgVGV4dHVyZS5mcm9tTG9hZGVyID0gZnVuY3Rpb24gZnJvbUxvYWRlciAoc291cmNlLCBpbWFnZVVybCwgbmFtZSlcbiAgICB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG5ldyBJbWFnZVJlc291cmNlKHNvdXJjZSk7XG5cbiAgICAgICAgcmVzb3VyY2UudXJsID0gaW1hZ2VVcmw7XG5cbiAgICAgICAgdmFyIGJhc2VUZXh0dXJlID0gbmV3IEJhc2VUZXh0dXJlKHJlc291cmNlLCB7XG4gICAgICAgICAgICBzY2FsZU1vZGU6IHNldHRpbmdzLlNDQUxFX01PREUsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiBnZXRSZXNvbHV0aW9uT2ZVcmwoaW1hZ2VVcmwpLFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKGJhc2VUZXh0dXJlKTtcblxuICAgICAgICAvLyBObyBuYW1lLCB1c2UgaW1hZ2VVcmwgaW5zdGVhZFxuICAgICAgICBpZiAoIW5hbWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWUgPSBpbWFnZVVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxldHMgYWxzbyBhZGQgdGhlIGZyYW1lIHRvIHBpeGkncyBnbG9iYWwgY2FjaGUgZm9yICdmcm9tTG9hZGVyJyBmdW5jdGlvblxuICAgICAgICBCYXNlVGV4dHVyZS5hZGRUb0NhY2hlKHRleHR1cmUuYmFzZVRleHR1cmUsIG5hbWUpO1xuICAgICAgICBUZXh0dXJlLmFkZFRvQ2FjaGUodGV4dHVyZSwgbmFtZSk7XG5cbiAgICAgICAgLy8gYWxzbyBhZGQgcmVmZXJlbmNlcyBieSB1cmwgaWYgdGhleSBhcmUgZGlmZmVyZW50LlxuICAgICAgICBpZiAobmFtZSAhPT0gaW1hZ2VVcmwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIEJhc2VUZXh0dXJlLmFkZFRvQ2FjaGUodGV4dHVyZS5iYXNlVGV4dHVyZSwgaW1hZ2VVcmwpO1xuICAgICAgICAgICAgVGV4dHVyZS5hZGRUb0NhY2hlKHRleHR1cmUsIGltYWdlVXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgVGV4dHVyZSB0byB0aGUgZ2xvYmFsIFRleHR1cmVDYWNoZS4gVGhpcyBjYWNoZSBpcyBzaGFyZWQgYWNyb3NzIHRoZSB3aG9sZSBQSVhJIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge1BJWEkuVGV4dHVyZX0gdGV4dHVyZSAtIFRoZSBUZXh0dXJlIHRvIGFkZCB0byB0aGUgY2FjaGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gVGhlIGlkIHRoYXQgdGhlIFRleHR1cmUgd2lsbCBiZSBzdG9yZWQgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBUZXh0dXJlLmFkZFRvQ2FjaGUgPSBmdW5jdGlvbiBhZGRUb0NhY2hlICh0ZXh0dXJlLCBpZClcbiAgICB7XG4gICAgICAgIGlmIChpZClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHRleHR1cmUudGV4dHVyZUNhY2hlSWRzLmluZGV4T2YoaWQpID09PSAtMSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLnRleHR1cmVDYWNoZUlkcy5wdXNoKGlkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFRleHR1cmVDYWNoZVtpZF0pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oKFwiVGV4dHVyZSBhZGRlZCB0byB0aGUgY2FjaGUgd2l0aCBhbiBpZCBbXCIgKyBpZCArIFwiXSB0aGF0IGFscmVhZHkgaGFkIGFuIGVudHJ5XCIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgVGV4dHVyZUNhY2hlW2lkXSA9IHRleHR1cmU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgVGV4dHVyZSBmcm9tIHRoZSBnbG9iYWwgVGV4dHVyZUNhY2hlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfFBJWEkuVGV4dHVyZX0gdGV4dHVyZSAtIGlkIG9mIGEgVGV4dHVyZSB0byBiZSByZW1vdmVkLCBvciBhIFRleHR1cmUgaW5zdGFuY2UgaXRzZWxmXG4gICAgICogQHJldHVybiB7UElYSS5UZXh0dXJlfG51bGx9IFRoZSBUZXh0dXJlIHRoYXQgd2FzIHJlbW92ZWRcbiAgICAgKi9cbiAgICBUZXh0dXJlLnJlbW92ZUZyb21DYWNoZSA9IGZ1bmN0aW9uIHJlbW92ZUZyb21DYWNoZSAodGV4dHVyZSlcbiAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdGV4dHVyZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciB0ZXh0dXJlRnJvbUNhY2hlID0gVGV4dHVyZUNhY2hlW3RleHR1cmVdO1xuXG4gICAgICAgICAgICBpZiAodGV4dHVyZUZyb21DYWNoZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0ZXh0dXJlRnJvbUNhY2hlLnRleHR1cmVDYWNoZUlkcy5pbmRleE9mKHRleHR1cmUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlRnJvbUNhY2hlLnRleHR1cmVDYWNoZUlkcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBUZXh0dXJlQ2FjaGVbdGV4dHVyZV07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dHVyZUZyb21DYWNoZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0ZXh0dXJlICYmIHRleHR1cmUudGV4dHVyZUNhY2hlSWRzKVxuICAgICAgICB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHR1cmUudGV4dHVyZUNhY2hlSWRzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGV4dHVyZSBtYXRjaGVzIHRoZSBvbmUgYmVpbmcgcGFzc2VkIGluIGJlZm9yZSBkZWxldGluZyBpdCBmcm9tIHRoZSBjYWNoZS5cbiAgICAgICAgICAgICAgICBpZiAoVGV4dHVyZUNhY2hlW3RleHR1cmUudGV4dHVyZUNhY2hlSWRzW2ldXSA9PT0gdGV4dHVyZSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBUZXh0dXJlQ2FjaGVbdGV4dHVyZS50ZXh0dXJlQ2FjaGVJZHNbaV1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGV4dHVyZS50ZXh0dXJlQ2FjaGVJZHMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyByZXNvbHV0aW9uIG9mIGJhc2VUZXh0dXJlXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnJlc29sdXRpb24uZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VUZXh0dXJlLnJlc29sdXRpb247XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmcmFtZSBzcGVjaWZpZXMgdGhlIHJlZ2lvbiBvZiB0aGUgYmFzZSB0ZXh0dXJlIHRoYXQgdGhpcyB0ZXh0dXJlIHVzZXMuXG4gICAgICogUGxlYXNlIGNhbGwgYHVwZGF0ZVV2cygpYCBhZnRlciB5b3UgY2hhbmdlIGNvb3JkaW5hdGVzIG9mIGBmcmFtZWAgbWFudWFsbHkuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLlJlY3RhbmdsZX1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuZnJhbWUuZ2V0ID0gZnVuY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mcmFtZTtcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmZyYW1lLnNldCA9IGZ1bmN0aW9uIChmcmFtZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG4gICAge1xuICAgICAgICB0aGlzLl9mcmFtZSA9IGZyYW1lO1xuXG4gICAgICAgIHRoaXMubm9GcmFtZSA9IGZhbHNlO1xuXG4gICAgICAgIHZhciB4ID0gZnJhbWUueDtcbiAgICAgICAgdmFyIHkgPSBmcmFtZS55O1xuICAgICAgICB2YXIgd2lkdGggPSBmcmFtZS53aWR0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IGZyYW1lLmhlaWdodDtcbiAgICAgICAgdmFyIHhOb3RGaXQgPSB4ICsgd2lkdGggPiB0aGlzLmJhc2VUZXh0dXJlLndpZHRoO1xuICAgICAgICB2YXIgeU5vdEZpdCA9IHkgKyBoZWlnaHQgPiB0aGlzLmJhc2VUZXh0dXJlLmhlaWdodDtcblxuICAgICAgICBpZiAoeE5vdEZpdCB8fCB5Tm90Rml0KVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcmVsYXRpb25zaGlwID0geE5vdEZpdCAmJiB5Tm90Rml0ID8gJ2FuZCcgOiAnb3InO1xuICAgICAgICAgICAgdmFyIGVycm9yWCA9IFwiWDogXCIgKyB4ICsgXCIgKyBcIiArIHdpZHRoICsgXCIgPSBcIiArICh4ICsgd2lkdGgpICsgXCIgPiBcIiArICh0aGlzLmJhc2VUZXh0dXJlLndpZHRoKTtcbiAgICAgICAgICAgIHZhciBlcnJvclkgPSBcIlk6IFwiICsgeSArIFwiICsgXCIgKyBoZWlnaHQgKyBcIiA9IFwiICsgKHkgKyBoZWlnaHQpICsgXCIgPiBcIiArICh0aGlzLmJhc2VUZXh0dXJlLmhlaWdodCk7XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGV4dHVyZSBFcnJvcjogZnJhbWUgZG9lcyBub3QgZml0IGluc2lkZSB0aGUgYmFzZSBUZXh0dXJlIGRpbWVuc2lvbnM6ICdcbiAgICAgICAgICAgICAgICArIGVycm9yWCArIFwiIFwiICsgcmVsYXRpb25zaGlwICsgXCIgXCIgKyBlcnJvclkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52YWxpZCA9IHdpZHRoICYmIGhlaWdodCAmJiB0aGlzLmJhc2VUZXh0dXJlLnZhbGlkO1xuXG4gICAgICAgIGlmICghdGhpcy50cmltICYmICF0aGlzLnJvdGF0ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5vcmlnID0gZnJhbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy52YWxpZClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVVdnMoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdGV4dHVyZSBpcyByb3RhdGVkIGluc2lkZSB0aGUgYXRsYXNcbiAgICAgKiBzZXQgdG8gMiB0byBjb21wZW5zYXRlIGZvciB0ZXh0dXJlIHBhY2tlciByb3RhdGlvblxuICAgICAqIHNldCB0byA2IHRvIGNvbXBlbnNhdGUgZm9yIHNwaW5lIHBhY2tlciByb3RhdGlvblxuICAgICAqIGNhbiBiZSB1c2VkIHRvIHJvdGF0ZSBvciBtaXJyb3Igc3ByaXRlc1xuICAgICAqIFNlZSB7QGxpbmsgUElYSS5Hcm91cEQ4fSBmb3IgZXhwbGFuYXRpb25cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMucm90YXRlLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm90YXRlO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMucm90YXRlLnNldCA9IGZ1bmN0aW9uIChyb3RhdGUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgdGhpcy5fcm90YXRlID0gcm90YXRlO1xuICAgICAgICBpZiAodGhpcy52YWxpZClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVVdnMoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggb2YgdGhlIFRleHR1cmUgaW4gcGl4ZWxzLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy53aWR0aC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZy53aWR0aDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGhlaWdodCBvZiB0aGUgVGV4dHVyZSBpbiBwaXhlbHMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmhlaWdodC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZy5oZWlnaHQ7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBUZXh0dXJlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICByZXR1cm4gVGV4dHVyZTtcbn0oRXZlbnRFbWl0dGVyKSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVdoaXRlVGV4dHVyZSgpXG57XG4gICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgY2FudmFzLndpZHRoID0gMTY7XG4gICAgY2FudmFzLmhlaWdodCA9IDE2O1xuXG4gICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIDE2LCAxNik7XG5cbiAgICByZXR1cm4gbmV3IFRleHR1cmUobmV3IEJhc2VUZXh0dXJlKG5ldyBDYW52YXNSZXNvdXJjZShjYW52YXMpKSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUFsbEhhbmRsZXJzKHRleClcbntcbiAgICB0ZXguZGVzdHJveSA9IGZ1bmN0aW9uIF9lbXB0eURlc3Ryb3koKSB7IC8qIGVtcHR5ICovIH07XG4gICAgdGV4Lm9uID0gZnVuY3Rpb24gX2VtcHR5T24oKSB7IC8qIGVtcHR5ICovIH07XG4gICAgdGV4Lm9uY2UgPSBmdW5jdGlvbiBfZW1wdHlPbmNlKCkgeyAvKiBlbXB0eSAqLyB9O1xuICAgIHRleC5lbWl0ID0gZnVuY3Rpb24gX2VtcHR5RW1pdCgpIHsgLyogZW1wdHkgKi8gfTtcbn1cblxuLyoqXG4gKiBBbiBlbXB0eSB0ZXh0dXJlLCB1c2VkIG9mdGVuIHRvIG5vdCBoYXZlIHRvIGNyZWF0ZSBtdWx0aXBsZSBlbXB0eSB0ZXh0dXJlcy5cbiAqIENhbiBub3QgYmUgZGVzdHJveWVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudFxuICogQG1lbWJlciB7UElYSS5UZXh0dXJlfVxuICovXG5UZXh0dXJlLkVNUFRZID0gbmV3IFRleHR1cmUobmV3IEJhc2VUZXh0dXJlKCkpO1xucmVtb3ZlQWxsSGFuZGxlcnMoVGV4dHVyZS5FTVBUWSk7XG5yZW1vdmVBbGxIYW5kbGVycyhUZXh0dXJlLkVNUFRZLmJhc2VUZXh0dXJlKTtcblxuLyoqXG4gKiBBIHdoaXRlIHRleHR1cmUgb2YgMTZ4MTYgc2l6ZSwgdXNlZCBmb3IgZ3JhcGhpY3MgYW5kIG90aGVyIHRoaW5nc1xuICogQ2FuIG5vdCBiZSBkZXN0cm95ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0YW50XG4gKiBAbWVtYmVyIHtQSVhJLlRleHR1cmV9XG4gKi9cblRleHR1cmUuV0hJVEUgPSBjcmVhdGVXaGl0ZVRleHR1cmUoKTtcbnJlbW92ZUFsbEhhbmRsZXJzKFRleHR1cmUuV0hJVEUpO1xucmVtb3ZlQWxsSGFuZGxlcnMoVGV4dHVyZS5XSElURS5iYXNlVGV4dHVyZSk7XG5cbi8qKlxuICogQSBSZW5kZXJUZXh0dXJlIGlzIGEgc3BlY2lhbCB0ZXh0dXJlIHRoYXQgYWxsb3dzIGFueSBQaXhpSlMgZGlzcGxheSBvYmplY3QgdG8gYmUgcmVuZGVyZWQgdG8gaXQuXG4gKlxuICogX19IaW50X186IEFsbCBEaXNwbGF5T2JqZWN0cyAoaS5lLiBTcHJpdGVzKSB0aGF0IHJlbmRlciB0byBhIFJlbmRlclRleHR1cmUgc2hvdWxkIGJlIHByZWxvYWRlZFxuICogb3RoZXJ3aXNlIGJsYWNrIHJlY3RhbmdsZXMgd2lsbCBiZSBkcmF3biBpbnN0ZWFkLlxuICpcbiAqIF9fSGludC0yX186IFRoZSBhY3R1YWwgbWVtb3J5IGFsbG9jYXRpb24gd2lsbCBoYXBwZW4gb24gZmlyc3QgcmVuZGVyLlxuICogWW91IHNob3VsZG4ndCBjcmVhdGUgcmVuZGVyVGV4dHVyZXMgZWFjaCBmcmFtZSBqdXN0IHRvIGRlbGV0ZSB0aGVtIGFmdGVyLCB0cnkgdG8gcmV1c2UgdGhlbS5cbiAqXG4gKiBBIFJlbmRlclRleHR1cmUgdGFrZXMgYSBzbmFwc2hvdCBvZiBhbnkgRGlzcGxheSBPYmplY3QgZ2l2ZW4gdG8gaXRzIHJlbmRlciBtZXRob2QuIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBsZXQgcmVuZGVyZXIgPSBQSVhJLmF1dG9EZXRlY3RSZW5kZXJlcigpO1xuICogbGV0IHJlbmRlclRleHR1cmUgPSBQSVhJLlJlbmRlclRleHR1cmUuY3JlYXRlKDgwMCwgNjAwKTtcbiAqIGxldCBzcHJpdGUgPSBQSVhJLlNwcml0ZS5mcm9tKFwic3Bpbk9ial8wMS5wbmdcIik7XG4gKlxuICogc3ByaXRlLnBvc2l0aW9uLnggPSA4MDAvMjtcbiAqIHNwcml0ZS5wb3NpdGlvbi55ID0gNjAwLzI7XG4gKiBzcHJpdGUuYW5jaG9yLnggPSAwLjU7XG4gKiBzcHJpdGUuYW5jaG9yLnkgPSAwLjU7XG4gKlxuICogcmVuZGVyZXIucmVuZGVyKHNwcml0ZSwgcmVuZGVyVGV4dHVyZSk7XG4gKiBgYGBcbiAqXG4gKiBUaGUgU3ByaXRlIGluIHRoaXMgY2FzZSB3aWxsIGJlIHJlbmRlcmVkIHVzaW5nIGl0cyBsb2NhbCB0cmFuc2Zvcm0uIFRvIHJlbmRlciB0aGlzIHNwcml0ZSBhdCAwLDBcbiAqIHlvdSBjYW4gY2xlYXIgdGhlIHRyYW5zZm9ybVxuICpcbiAqIGBgYGpzXG4gKlxuICogc3ByaXRlLnNldFRyYW5zZm9ybSgpXG4gKlxuICogbGV0IHJlbmRlclRleHR1cmUgPSBuZXcgUElYSS5SZW5kZXJUZXh0dXJlLmNyZWF0ZSgxMDAsIDEwMCk7XG4gKlxuICogcmVuZGVyZXIucmVuZGVyKHNwcml0ZSwgcmVuZGVyVGV4dHVyZSk7ICAvLyBSZW5kZXJzIHRvIGNlbnRlciBvZiBSZW5kZXJUZXh0dXJlXG4gKiBgYGBcbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuVGV4dHVyZVxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFJlbmRlclRleHR1cmUgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChUZXh0dXJlKSB7XG4gICAgZnVuY3Rpb24gUmVuZGVyVGV4dHVyZShiYXNlUmVuZGVyVGV4dHVyZSwgZnJhbWUpXG4gICAge1xuICAgICAgICAvLyBzdXBwb3J0IGZvciBsZWdhY3kuLlxuICAgICAgICB2YXIgX2xlZ2FjeVJlbmRlcmVyID0gbnVsbDtcblxuICAgICAgICBpZiAoIShiYXNlUmVuZGVyVGV4dHVyZSBpbnN0YW5jZW9mIEJhc2VSZW5kZXJUZXh0dXJlKSlcbiAgICAgICAge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXJlc3QtcGFyYW1zLCBuby1jb25zb2xlICovXG4gICAgICAgICAgICB2YXIgd2lkdGggPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gYXJndW1lbnRzWzJdO1xuICAgICAgICAgICAgdmFyIHNjYWxlTW9kZSA9IGFyZ3VtZW50c1szXTtcbiAgICAgICAgICAgIHZhciByZXNvbHV0aW9uID0gYXJndW1lbnRzWzRdO1xuXG4gICAgICAgICAgICAvLyB3ZSBoYXZlIGFuIG9sZCByZW5kZXIgdGV4dHVyZS4uXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oKFwiUGxlYXNlIHVzZSBSZW5kZXJUZXh0dXJlLmNyZWF0ZShcIiArIHdpZHRoICsgXCIsIFwiICsgaGVpZ2h0ICsgXCIpIGluc3RlYWQgb2YgdGhlIGN0b3IgZGlyZWN0bHkuXCIpKTtcbiAgICAgICAgICAgIF9sZWdhY3lSZW5kZXJlciA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXJlc3QtcGFyYW1zLCBuby1jb25zb2xlICovXG5cbiAgICAgICAgICAgIGZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgIGJhc2VSZW5kZXJUZXh0dXJlID0gbmV3IEJhc2VSZW5kZXJUZXh0dXJlKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgc2NhbGVNb2RlOiBzY2FsZU1vZGUsXG4gICAgICAgICAgICAgICAgcmVzb2x1dGlvbjogcmVzb2x1dGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBiYXNlIHRleHR1cmUgb2JqZWN0IHRoYXQgdGhpcyB0ZXh0dXJlIHVzZXNcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5CYXNlVGV4dHVyZX1cbiAgICAgICAgICovXG4gICAgICAgIFRleHR1cmUuY2FsbCh0aGlzLCBiYXNlUmVuZGVyVGV4dHVyZSwgZnJhbWUpO1xuXG4gICAgICAgIHRoaXMubGVnYWN5UmVuZGVyZXIgPSBfbGVnYWN5UmVuZGVyZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgd2lsbCBsZXQgdGhlIHJlbmRlcmVyIGtub3cgaWYgdGhlIHRleHR1cmUgaXMgdmFsaWQuIElmIGl0J3Mgbm90IHRoZW4gaXQgY2Fubm90IGJlIHJlbmRlcmVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyBgc291cmNlRnJhbWVgIHdoZW4gdGhpcyB0ZXh0dXJlIGlzIGluc2lkZSBjdXJyZW50IGZpbHRlciBzdGFjay5cbiAgICAgICAgICogWW91IGNhbiByZWFkIGl0IGluc2lkZSBmaWx0ZXJzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5SZWN0YW5nbGV9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZpbHRlckZyYW1lID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGtleSBmb3IgcG9vbGVkIHRleHR1cmUgb2YgRmlsdGVyU3lzdGVtXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWx0ZXJQb29sS2V5ID0gbnVsbDtcblxuICAgICAgICB0aGlzLnVwZGF0ZVV2cygpO1xuICAgIH1cblxuICAgIGlmICggVGV4dHVyZSApIFJlbmRlclRleHR1cmUuX19wcm90b19fID0gVGV4dHVyZTtcbiAgICBSZW5kZXJUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRleHR1cmUgJiYgVGV4dHVyZS5wcm90b3R5cGUgKTtcbiAgICBSZW5kZXJUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlbmRlclRleHR1cmU7XG5cbiAgICAvKipcbiAgICAgKiBSZXNpemVzIHRoZSBSZW5kZXJUZXh0dXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIHRvIHJlc2l6ZSB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCB0byByZXNpemUgdG8uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmVzaXplQmFzZVRleHR1cmU9dHJ1ZV0gLSBTaG91bGQgdGhlIGJhc2VUZXh0dXJlLndpZHRoIGFuZCBoZWlnaHQgdmFsdWVzIGJlIHJlc2l6ZWQgYXMgd2VsbD9cbiAgICAgKi9cbiAgICBSZW5kZXJUZXh0dXJlLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiByZXNpemUgKHdpZHRoLCBoZWlnaHQsIHJlc2l6ZUJhc2VUZXh0dXJlKVxuICAgIHtcbiAgICAgICAgaWYgKCByZXNpemVCYXNlVGV4dHVyZSA9PT0gdm9pZCAwICkgcmVzaXplQmFzZVRleHR1cmUgPSB0cnVlO1xuXG4gICAgICAgIHdpZHRoID0gTWF0aC5jZWlsKHdpZHRoKTtcbiAgICAgICAgaGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCk7XG5cbiAgICAgICAgLy8gVE9ETyAtIGNvdWxkIGJlIG5vdCByZXF1aXJlZC4uXG4gICAgICAgIHRoaXMudmFsaWQgPSAod2lkdGggPiAwICYmIGhlaWdodCA+IDApO1xuXG4gICAgICAgIHRoaXMuX2ZyYW1lLndpZHRoID0gdGhpcy5vcmlnLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX2ZyYW1lLmhlaWdodCA9IHRoaXMub3JpZy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgaWYgKHJlc2l6ZUJhc2VUZXh0dXJlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmJhc2VUZXh0dXJlLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlVXZzKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIHJlc29sdXRpb24gb2YgYmFzZVRleHR1cmUsIGJ1dCBkb2VzIG5vdCBjaGFuZ2UgZnJhbWVidWZmZXIgc2l6ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByZXNvbHV0aW9uIC0gVGhlIG5ldyByZXNvbHV0aW9uIHRvIGFwcGx5IHRvIFJlbmRlclRleHR1cmVcbiAgICAgKi9cbiAgICBSZW5kZXJUZXh0dXJlLnByb3RvdHlwZS5zZXRSZXNvbHV0aW9uID0gZnVuY3Rpb24gc2V0UmVzb2x1dGlvbiAocmVzb2x1dGlvbilcbiAgICB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgYmFzZVRleHR1cmUgPSByZWYuYmFzZVRleHR1cmU7XG5cbiAgICAgICAgaWYgKGJhc2VUZXh0dXJlLnJlc29sdXRpb24gPT09IHJlc29sdXRpb24pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJhc2VUZXh0dXJlLnNldFJlc29sdXRpb24ocmVzb2x1dGlvbik7XG4gICAgICAgIHRoaXMucmVzaXplKGJhc2VUZXh0dXJlLndpZHRoLCBiYXNlVGV4dHVyZS5oZWlnaHQsIGZhbHNlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQSBzaG9ydCBoYW5kIHdheSBvZiBjcmVhdGluZyBhIHJlbmRlciB0ZXh0dXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud2lkdGg9MTAwXSAtIFRoZSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRleHR1cmVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaGVpZ2h0PTEwMF0gLSBUaGUgaGVpZ2h0IG9mIHRoZSByZW5kZXIgdGV4dHVyZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zY2FsZU1vZGU9UElYSS5zZXR0aW5ncy5TQ0FMRV9NT0RFXSAtIFNlZSB7QGxpbmsgUElYSS5TQ0FMRV9NT0RFU30gZm9yIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5yZXNvbHV0aW9uPTFdIC0gVGhlIHJlc29sdXRpb24gLyBkZXZpY2UgcGl4ZWwgcmF0aW8gb2YgdGhlIHRleHR1cmUgYmVpbmcgZ2VuZXJhdGVkXG4gICAgICogQHJldHVybiB7UElYSS5SZW5kZXJUZXh0dXJlfSBUaGUgbmV3IHJlbmRlciB0ZXh0dXJlXG4gICAgICovXG4gICAgUmVuZGVyVGV4dHVyZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUgKG9wdGlvbnMpXG4gICAge1xuICAgICAgICAvLyBmYWxsYmFjaywgb2xkLXN0eWxlOiBjcmVhdGUod2lkdGgsIGhlaWdodCwgc2NhbGVNb2RlLCByZXNvbHV0aW9uKVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKVxuICAgICAgICB7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbiAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBhcmd1bWVudHNbMV0sXG4gICAgICAgICAgICAgICAgc2NhbGVNb2RlOiBhcmd1bWVudHNbMl0sXG4gICAgICAgICAgICAgICAgcmVzb2x1dGlvbjogYXJndW1lbnRzWzNdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFJlbmRlclRleHR1cmUobmV3IEJhc2VSZW5kZXJUZXh0dXJlKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlbmRlclRleHR1cmU7XG59KFRleHR1cmUpKTtcblxuLyoqXG4gKiBFeHBlcmltZW50YWwhXG4gKlxuICogVGV4dHVyZSBwb29sLCB1c2VkIGJ5IEZpbHRlclN5c3RlbSBhbmQgcGx1Z2luc1xuICogU3RvcmVzIGNvbGxlY3Rpb24gb2YgdGVtcG9yYXJ5IHBvdzIgb3Igc2NyZWVuLXNpemVkIHJlbmRlclRleHR1cmVzXG4gKlxuICogSWYgeW91IHVzZSBjdXN0b20gUmVuZGVyVGV4dHVyZVBvb2wgZm9yIHlvdXIgZmlsdGVycywgeW91IGNhbiB1c2UgbWV0aG9kc1xuICogYGdldEZpbHRlclRleHR1cmVgIGFuZCBgcmV0dXJuRmlsdGVyVGV4dHVyZWAgc2FtZSBhcyBpblxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFJlbmRlclRleHR1cmVQb29sID0gZnVuY3Rpb24gUmVuZGVyVGV4dHVyZVBvb2wodGV4dHVyZU9wdGlvbnMpXG57XG4gICAgdGhpcy50ZXh0dXJlUG9vbCA9IHt9O1xuICAgIHRoaXMudGV4dHVyZU9wdGlvbnMgPSB0ZXh0dXJlT3B0aW9ucyB8fCB7fTtcbiAgICAvKipcbiAgICAgKiBBbGxvdyByZW5kZXJUZXh0dXJlcyBvZiB0aGUgc2FtZSBzaXplIGFzIHNjcmVlbiwgbm90IGp1c3QgcG93MlxuICAgICAqXG4gICAgICogQXV0b21hdGljYWxseSBzZXRzIHRvIHRydWUgYWZ0ZXIgYHNldFNjcmVlblNpemVgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgdGhpcy5lbmFibGVGdWxsU2NyZWVuID0gZmFsc2U7XG5cbiAgICB0aGlzLl9waXhlbHNXaWR0aCA9IDA7XG4gICAgdGhpcy5fcGl4ZWxzSGVpZ2h0ID0gMDtcbn07XG5cbi8qKlxuICogY3JlYXRlcyBvZiB0ZXh0dXJlIHdpdGggcGFyYW1zIHRoYXQgd2VyZSBzcGVjaWZpZWQgaW4gcG9vbCBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSByZWFsV2lkdGggd2lkdGggb2YgdGV4dHVyZSBpbiBwaXhlbHNcbiAqIEBwYXJhbSB7bnVtYmVyfSByZWFsSGVpZ2h0IGhlaWdodCBvZiB0ZXh0dXJlIGluIHBpeGVsc1xuICogQHJldHVybnMge1JlbmRlclRleHR1cmV9XG4gKi9cblJlbmRlclRleHR1cmVQb29sLnByb3RvdHlwZS5jcmVhdGVUZXh0dXJlID0gZnVuY3Rpb24gY3JlYXRlVGV4dHVyZSAocmVhbFdpZHRoLCByZWFsSGVpZ2h0KVxue1xuICAgIHZhciBiYXNlUmVuZGVyVGV4dHVyZSA9IG5ldyBCYXNlUmVuZGVyVGV4dHVyZShPYmplY3QuYXNzaWduKHtcbiAgICAgICAgd2lkdGg6IHJlYWxXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiByZWFsSGVpZ2h0LFxuICAgICAgICByZXNvbHV0aW9uOiAxLFxuICAgIH0sIHRoaXMudGV4dHVyZU9wdGlvbnMpKTtcblxuICAgIHJldHVybiBuZXcgUmVuZGVyVGV4dHVyZShiYXNlUmVuZGVyVGV4dHVyZSk7XG59O1xuXG4vKipcbiAqIEdldHMgYSBQb3dlci1vZi1Ud28gcmVuZGVyIHRleHR1cmUgb3IgZnVsbFNjcmVlbiB0ZXh0dXJlXG4gKlxuICogQHByb3RlY3RlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbldpZHRoIC0gVGhlIG1pbmltdW0gd2lkdGggb2YgdGhlIHJlbmRlciB0ZXh0dXJlIGluIHJlYWwgcGl4ZWxzLlxuICogQHBhcmFtIHtudW1iZXJ9IG1pbkhlaWdodCAtIFRoZSBtaW5pbXVtIGhlaWdodCBvZiB0aGUgcmVuZGVyIHRleHR1cmUgaW4gcmVhbCBwaXhlbHMuXG4gKiBAcGFyYW0ge251bWJlcn0gW3Jlc29sdXRpb249MV0gLSBUaGUgcmVzb2x1dGlvbiBvZiB0aGUgcmVuZGVyIHRleHR1cmUuXG4gKiBAcmV0dXJuIHtQSVhJLlJlbmRlclRleHR1cmV9IFRoZSBuZXcgcmVuZGVyIHRleHR1cmUuXG4gKi9cblJlbmRlclRleHR1cmVQb29sLnByb3RvdHlwZS5nZXRPcHRpbWFsVGV4dHVyZSA9IGZ1bmN0aW9uIGdldE9wdGltYWxUZXh0dXJlIChtaW5XaWR0aCwgbWluSGVpZ2h0LCByZXNvbHV0aW9uKVxue1xuICAgICAgICBpZiAoIHJlc29sdXRpb24gPT09IHZvaWQgMCApIHJlc29sdXRpb24gPSAxO1xuXG4gICAgdmFyIGtleSA9IFJlbmRlclRleHR1cmVQb29sLlNDUkVFTl9LRVk7XG5cbiAgICBtaW5XaWR0aCAqPSByZXNvbHV0aW9uO1xuICAgIG1pbkhlaWdodCAqPSByZXNvbHV0aW9uO1xuXG4gICAgaWYgKCF0aGlzLmVuYWJsZUZ1bGxTY3JlZW4gfHwgbWluV2lkdGggIT09IHRoaXMuX3BpeGVsc1dpZHRoIHx8IG1pbkhlaWdodCAhPT0gdGhpcy5fcGl4ZWxzSGVpZ2h0KVxuICAgIHtcbiAgICAgICAgbWluV2lkdGggPSBuZXh0UG93MihtaW5XaWR0aCk7XG4gICAgICAgIG1pbkhlaWdodCA9IG5leHRQb3cyKG1pbkhlaWdodCk7XG4gICAgICAgIGtleSA9ICgobWluV2lkdGggJiAweEZGRkYpIDw8IDE2KSB8IChtaW5IZWlnaHQgJiAweEZGRkYpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy50ZXh0dXJlUG9vbFtrZXldKVxuICAgIHtcbiAgICAgICAgdGhpcy50ZXh0dXJlUG9vbFtrZXldID0gW107XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlclRleHR1cmUgPSB0aGlzLnRleHR1cmVQb29sW2tleV0ucG9wKCk7XG5cbiAgICBpZiAoIXJlbmRlclRleHR1cmUpXG4gICAge1xuICAgICAgICByZW5kZXJUZXh0dXJlID0gdGhpcy5jcmVhdGVUZXh0dXJlKG1pbldpZHRoLCBtaW5IZWlnaHQpO1xuICAgIH1cblxuICAgIHJlbmRlclRleHR1cmUuZmlsdGVyUG9vbEtleSA9IGtleTtcbiAgICByZW5kZXJUZXh0dXJlLnNldFJlc29sdXRpb24ocmVzb2x1dGlvbik7XG5cbiAgICByZXR1cm4gcmVuZGVyVGV4dHVyZTtcbn07XG5cbi8qKlxuICogR2V0cyBleHRyYSB0ZXh0dXJlIG9mIHRoZSBzYW1lIHNpemUgYXMgaW5wdXQgcmVuZGVyVGV4dHVyZVxuICpcbiAqIGBnZXRGaWx0ZXJUZXh0dXJlKGlucHV0LCAwLjUpYCBvciBgZ2V0RmlsdGVyVGV4dHVyZSgwLjUsIGlucHV0KWBcbiAqXG4gKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gaW5wdXQgcmVuZGVyVGV4dHVyZSBmcm9tIHdoaWNoIHNpemUgYW5kIHJlc29sdXRpb24gd2lsbCBiZSBjb3BpZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcmVzb2x1dGlvbl0gb3ZlcnJpZGUgcmVzb2x1dGlvbiBvZiB0aGUgcmVuZGVyVGV4dHVyZVxuICogIEl0IG92ZXJyaWRlcywgaXQgZG9lcyBub3QgbXVsdGlwbHlcbiAqIEByZXR1cm5zIHtQSVhJLlJlbmRlclRleHR1cmV9XG4gKi9cblJlbmRlclRleHR1cmVQb29sLnByb3RvdHlwZS5nZXRGaWx0ZXJUZXh0dXJlID0gZnVuY3Rpb24gZ2V0RmlsdGVyVGV4dHVyZSAoaW5wdXQsIHJlc29sdXRpb24pXG57XG4gICAgdmFyIGZpbHRlclRleHR1cmUgPSB0aGlzLmdldE9wdGltYWxUZXh0dXJlKGlucHV0LndpZHRoLCBpbnB1dC5oZWlnaHQsIHJlc29sdXRpb24gfHwgaW5wdXQucmVzb2x1dGlvbik7XG5cbiAgICBmaWx0ZXJUZXh0dXJlLmZpbHRlckZyYW1lID0gaW5wdXQuZmlsdGVyRnJhbWU7XG5cbiAgICByZXR1cm4gZmlsdGVyVGV4dHVyZTtcbn07XG5cbi8qKlxuICogUGxhY2UgYSByZW5kZXIgdGV4dHVyZSBiYWNrIGludG8gdGhlIHBvb2wuXG4gKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gcmVuZGVyVGV4dHVyZSAtIFRoZSByZW5kZXJUZXh0dXJlIHRvIGZyZWVcbiAqL1xuUmVuZGVyVGV4dHVyZVBvb2wucHJvdG90eXBlLnJldHVyblRleHR1cmUgPSBmdW5jdGlvbiByZXR1cm5UZXh0dXJlIChyZW5kZXJUZXh0dXJlKVxue1xuICAgIHZhciBrZXkgPSByZW5kZXJUZXh0dXJlLmZpbHRlclBvb2xLZXk7XG5cbiAgICByZW5kZXJUZXh0dXJlLmZpbHRlckZyYW1lID0gbnVsbDtcbiAgICB0aGlzLnRleHR1cmVQb29sW2tleV0ucHVzaChyZW5kZXJUZXh0dXJlKTtcbn07XG5cbi8qKlxuICogQWxpYXMgZm9yIHJldHVyblRleHR1cmUsIHRvIGJlIGNvbXBsaWFudCB3aXRoIEZpbHRlclN5c3RlbSBpbnRlcmZhY2VcbiAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSByZW5kZXJUZXh0dXJlIC0gVGhlIHJlbmRlclRleHR1cmUgdG8gZnJlZVxuICovXG5SZW5kZXJUZXh0dXJlUG9vbC5wcm90b3R5cGUucmV0dXJuRmlsdGVyVGV4dHVyZSA9IGZ1bmN0aW9uIHJldHVybkZpbHRlclRleHR1cmUgKHJlbmRlclRleHR1cmUpXG57XG4gICAgdGhpcy5yZXR1cm5UZXh0dXJlKHJlbmRlclRleHR1cmUpO1xufTtcblxuLyoqXG4gKiBDbGVhcnMgdGhlIHBvb2xcbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtkZXN0cm95VGV4dHVyZXM9dHJ1ZV0gZGVzdHJveSBhbGwgc3RvcmVkIHRleHR1cmVzXG4gKi9cblJlbmRlclRleHR1cmVQb29sLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyIChkZXN0cm95VGV4dHVyZXMpXG57XG4gICAgZGVzdHJveVRleHR1cmVzID0gZGVzdHJveVRleHR1cmVzICE9PSBmYWxzZTtcbiAgICBpZiAoZGVzdHJveVRleHR1cmVzKVxuICAgIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLnRleHR1cmVQb29sKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgdGV4dHVyZXMgPSB0aGlzLnRleHR1cmVQb29sW2ldO1xuXG4gICAgICAgICAgICBpZiAodGV4dHVyZXMpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0ZXh0dXJlcy5sZW5ndGg7IGorKylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVzW2pdLmRlc3Ryb3kodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0dXJlUG9vbCA9IHt9O1xufTtcblxuLyoqXG4gKiBJZiBzY3JlZW4gc2l6ZSB3YXMgY2hhbmdlZCwgZHJvcHMgYWxsIHNjcmVlbi1zaXplZCB0ZXh0dXJlcyxcbiAqIHNldHMgbmV3IHNjcmVlbiBzaXplLCBzZXRzIGBlbmFibGVGdWxsU2NyZWVuYCB0byB0cnVlXG4gKlxuICogU2l6ZSBpcyBtZWFzdXJlZCBpbiBwaXhlbHMsIGByZW5kZXJlci52aWV3YCBjYW4gYmUgcGFzc2VkIGhlcmUsIG5vdCBgcmVuZGVyZXIuc2NyZWVuYFxuICpcbiAqIEBwYXJhbSB7UElYSS5JU2l6ZX0gc2l6ZSAtIEluaXRpYWwgc2l6ZSBvZiBzY3JlZW5cbiAqL1xuUmVuZGVyVGV4dHVyZVBvb2wucHJvdG90eXBlLnNldFNjcmVlblNpemUgPSBmdW5jdGlvbiBzZXRTY3JlZW5TaXplIChzaXplKVxue1xuICAgIGlmIChzaXplLndpZHRoID09PSB0aGlzLl9waXhlbHNXaWR0aFxuICAgICAgICAmJiBzaXplLmhlaWdodCA9PT0gdGhpcy5fcGl4ZWxzSGVpZ2h0KVxuICAgIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzY3JlZW5LZXkgPSBSZW5kZXJUZXh0dXJlUG9vbC5TQ1JFRU5fS0VZO1xuICAgIHZhciB0ZXh0dXJlcyA9IHRoaXMudGV4dHVyZVBvb2xbc2NyZWVuS2V5XTtcblxuICAgIHRoaXMuZW5hYmxlRnVsbFNjcmVlbiA9IHNpemUud2lkdGggPiAwICYmIHNpemUuaGVpZ2h0ID4gMDtcblxuICAgIGlmICh0ZXh0dXJlcylcbiAgICB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGV4dHVyZXMubGVuZ3RoOyBqKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRleHR1cmVzW2pdLmRlc3Ryb3kodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50ZXh0dXJlUG9vbFtzY3JlZW5LZXldID0gW107XG5cbiAgICB0aGlzLl9waXhlbHNXaWR0aCA9IHNpemUud2lkdGg7XG4gICAgdGhpcy5fcGl4ZWxzSGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG59O1xuXG4vKipcbiAqIEtleSB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgZnVsbHNjcmVlbiByZW5kZXJUZXh0dXJlcyBpbiBhIHBvb2xcbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuUmVuZGVyVGV4dHVyZVBvb2wuU0NSRUVOX0tFWSA9ICdzY3JlZW4nO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbi8qKlxuICogSG9sZHMgdGhlIGluZm9ybWF0aW9uIGZvciBhIHNpbmdsZSBhdHRyaWJ1dGUgc3RydWN0dXJlIHJlcXVpcmVkIHRvIHJlbmRlciBnZW9tZXRyeS5cbiAqXG4gKiBUaGlzIGRvZXMgbm90IGNvbnRhaW4gdGhlIGFjdHVhbCBkYXRhLCBidXQgaW5zdGVhZCBoYXMgYSBidWZmZXIgaWQgdGhhdCBtYXBzIHRvIGEge0BsaW5rIFBJWEkuQnVmZmVyfVxuICogVGhpcyBjYW4gaW5jbHVkZSBhbnl0aGluZyBmcm9tIHBvc2l0aW9ucywgdXZzLCBub3JtYWxzLCBjb2xvcnMgZXRjLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIEF0dHJpYnV0ZShidWZmZXIsIHNpemUsIG5vcm1hbGl6ZWQsIHR5cGUsIHN0cmlkZSwgc3RhcnQsIGluc3RhbmNlKVxue1xuICAgIGlmICggbm9ybWFsaXplZCA9PT0gdm9pZCAwICkgbm9ybWFsaXplZCA9IGZhbHNlO1xuICAgIGlmICggdHlwZSA9PT0gdm9pZCAwICkgdHlwZSA9IDUxMjY7XG5cbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIHRoaXMubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnN0cmlkZSA9IHN0cmlkZTtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xufTtcblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgQXR0cmlidXRlLlxuICovXG5BdHRyaWJ1dGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG57XG4gICAgdGhpcy5idWZmZXIgPSBudWxsO1xufTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGFuIEF0dHJpYnV0ZSBiYXNlZCBvbiB0aGUgaW5mb3JtYXRpb24gcHJvdmlkZWRcbiAqXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVmZmVyICB0aGUgaWQgb2YgdGhlIGJ1ZmZlciB0aGF0IHRoaXMgYXR0cmlidXRlIHdpbGwgbG9vayBmb3JcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2l6ZT0yXSB0aGUgc2l6ZSBvZiB0aGUgYXR0cmlidXRlLiBJZiB5b3UgaGF2ZSAyIGZsb2F0cyBwZXIgdmVydGV4IChlZyBwb3NpdGlvbiB4IGFuZCB5KSB0aGlzIHdvdWxkIGJlIDJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc3RyaWRlPTBdIEhvdyBmYXIgYXBhcnQgKGluIGZsb2F0cykgdGhlIHN0YXJ0IG9mIGVhY2ggdmFsdWUgaXMuICh1c2VkIGZvciBpbnRlcmxlYXZpbmcgZGF0YSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc3RhcnQ9MF0gSG93IGZhciBpbnRvIHRoZSBhcnJheSB0byBzdGFydCByZWFkaW5nIHZhbHVlcyAodXNlZCBmb3IgaW50ZXJsZWF2aW5nIGRhdGEpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtub3JtYWxpemVkPWZhbHNlXSBzaG91bGQgdGhlIGRhdGEgYmUgbm9ybWFsaXplZC5cbiAqXG4gKiBAcmV0dXJucyB7UElYSS5BdHRyaWJ1dGV9IEEgbmV3IHtAbGluayBQSVhJLkF0dHJpYnV0ZX0gYmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkXG4gKi9cbkF0dHJpYnV0ZS5mcm9tID0gZnVuY3Rpb24gZnJvbSAoYnVmZmVyLCBzaXplLCBub3JtYWxpemVkLCB0eXBlLCBzdHJpZGUpXG57XG4gICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGUoYnVmZmVyLCBzaXplLCBub3JtYWxpemVkLCB0eXBlLCBzdHJpZGUpO1xufTtcblxudmFyIFVJRCA9IDA7XG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbi8qKlxuICogQSB3cmFwcGVyIGZvciBkYXRhIHNvIHRoYXQgaXQgY2FuIGJlIHVzZWQgYW5kIHVwbG9hZGVkIGJ5IFdlYkdMXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgQnVmZmVyID0gZnVuY3Rpb24gQnVmZmVyKGRhdGEsIF9zdGF0aWMsIGluZGV4KVxue1xuICAgIGlmICggX3N0YXRpYyA9PT0gdm9pZCAwICkgX3N0YXRpYyA9IHRydWU7XG4gICAgaWYgKCBpbmRleCA9PT0gdm9pZCAwICkgaW5kZXggPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkYXRhIGluIHRoZSBidWZmZXIsIGFzIGEgdHlwZWQgYXJyYXlcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge0FycmF5QnVmZmVyfCBTaGFyZWRBcnJheUJ1ZmZlcnxBcnJheUJ1ZmZlclZpZXd9XG4gICAgICovXG4gICAgdGhpcy5kYXRhID0gZGF0YSB8fCBuZXcgRmxvYXQzMkFycmF5KDEpO1xuXG4gICAgLyoqXG4gICAgICogQSBtYXAgb2YgcmVuZGVyZXIgSURzIHRvIHdlYmdsIGJ1ZmZlclxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWVtYmVyIHtvYmplY3Q8bnVtYmVyLCBHTEJ1ZmZlcj59XG4gICAgICovXG4gICAgdGhpcy5fZ2xCdWZmZXJzID0ge307XG5cbiAgICB0aGlzLl91cGRhdGVJRCA9IDA7XG5cbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG5cbiAgICB0aGlzLnN0YXRpYyA9IF9zdGF0aWM7XG5cbiAgICB0aGlzLmlkID0gVUlEKys7XG5cbiAgICB0aGlzLmRpc3Bvc2VSdW5uZXIgPSBuZXcgUnVubmVyKCdkaXNwb3NlQnVmZmVyJywgMik7XG59O1xuXG4vLyBUT0RPIGNvdWxkIGV4cGxvcmUgZmxhZ2dpbmcgb25seSBhIHBhcnRpYWwgdXBsb2FkP1xuLyoqXG4gKiBmbGFncyB0aGlzIGJ1ZmZlciBhcyByZXF1aXJpbmcgYW4gdXBsb2FkIHRvIHRoZSBHUFVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ8U2hhcmVkQXJyYXlCdWZmZXJ8QXJyYXlCdWZmZXJWaWV3fSBbZGF0YV0gdGhlIGRhdGEgdG8gdXBkYXRlIGluIHRoZSBidWZmZXIuXG4gKi9cbkJ1ZmZlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkYXRhKVxue1xuICAgIHRoaXMuZGF0YSA9IGRhdGEgfHwgdGhpcy5kYXRhO1xuICAgIHRoaXMuX3VwZGF0ZUlEKys7XG59O1xuXG4vKipcbiAqIGRpc3Bvc2VzIFdlYkdMIHJlc291cmNlcyB0aGF0IGFyZSBjb25uZWN0ZWQgdG8gdGhpcyBnZW9tZXRyeVxuICovXG5CdWZmZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlICgpXG57XG4gICAgdGhpcy5kaXNwb3NlUnVubmVyLnJ1bih0aGlzLCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIERlc3Ryb3lzIHRoZSBidWZmZXJcbiAqL1xuQnVmZmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIHRoaXMuZGlzcG9zZSgpO1xuXG4gICAgdGhpcy5kYXRhID0gbnVsbDtcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIGJ1ZmZlciBiYXNlZCBvbiBhbiBhcnJheSBvciBUeXBlZEFycmF5XG4gKlxuICogQHN0YXRpY1xuICogQHBhcmFtIHtBcnJheUJ1ZmZlclZpZXcgfCBudW1iZXJbXX0gZGF0YSB0aGUgVHlwZWRBcnJheSB0aGF0IHRoZSBidWZmZXIgd2lsbCBzdG9yZS4gSWYgdGhpcyBpcyBhIHJlZ3VsYXIgQXJyYXkgaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBGbG9hdDMyQXJyYXkuXG4gKiBAcmV0dXJuIHtQSVhJLkJ1ZmZlcn0gQSBuZXcgQnVmZmVyIGJhc2VkIG9uIHRoZSBkYXRhIHByb3ZpZGVkLlxuICovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIGZyb20gKGRhdGEpXG57XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheSlcbiAgICB7XG4gICAgICAgIGRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQnVmZmVyKGRhdGEpO1xufTtcblxuZnVuY3Rpb24gZ2V0QnVmZmVyVHlwZShhcnJheSlcbntcbiAgICBpZiAoYXJyYXkuQllURVNfUEVSX0VMRU1FTlQgPT09IDQpXG4gICAge1xuICAgICAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiAnRmxvYXQzMkFycmF5JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5KVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gJ1VpbnQzMkFycmF5JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnSW50MzJBcnJheSc7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFycmF5LkJZVEVTX1BFUl9FTEVNRU5UID09PSAyKVxuICAgIHtcbiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiAnVWludDE2QXJyYXknO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGFycmF5LkJZVEVTX1BFUl9FTEVNRU5UID09PSAxKVxuICAgIHtcbiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuICdVaW50OEFycmF5JztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE8gbWFwIG91dCB0aGUgcmVzdCBvZiB0aGUgYXJyYXkgZWxlbWVudHMhXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG9iamVjdC1zaG9ydGhhbmQgKi9cbnZhciBtYXAgPSB7XG4gICAgRmxvYXQzMkFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgVWludDMyQXJyYXk6IFVpbnQzMkFycmF5LFxuICAgIEludDMyQXJyYXk6IEludDMyQXJyYXksXG4gICAgVWludDhBcnJheTogVWludDhBcnJheSxcbn07XG5cbmZ1bmN0aW9uIGludGVybGVhdmVUeXBlZEFycmF5cyhhcnJheXMsIHNpemVzKVxue1xuICAgIHZhciBvdXRTaXplID0gMDtcbiAgICB2YXIgc3RyaWRlID0gMDtcbiAgICB2YXIgdmlld3MgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlzLmxlbmd0aDsgaSsrKVxuICAgIHtcbiAgICAgICAgc3RyaWRlICs9IHNpemVzW2ldO1xuICAgICAgICBvdXRTaXplICs9IGFycmF5c1tpXS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihvdXRTaXplICogNCk7XG5cbiAgICB2YXIgb3V0ID0gbnVsbDtcbiAgICB2YXIgbGl0dGxlT2Zmc2V0ID0gMDtcblxuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGFycmF5cy5sZW5ndGg7IGkkMSsrKVxuICAgIHtcbiAgICAgICAgdmFyIHNpemUgPSBzaXplc1tpJDFdO1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaSQxXTtcblxuICAgICAgICB2YXIgdHlwZSA9IGdldEJ1ZmZlclR5cGUoYXJyYXkpO1xuXG4gICAgICAgIGlmICghdmlld3NbdHlwZV0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZpZXdzW3R5cGVdID0gbmV3IG1hcFt0eXBlXShidWZmZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0ID0gdmlld3NbdHlwZV07XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhcnJheS5sZW5ndGg7IGorKylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGluZGV4U3RhcnQgPSAoKGogLyBzaXplIHwgMCkgKiBzdHJpZGUpICsgbGl0dGxlT2Zmc2V0O1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gaiAlIHNpemU7XG5cbiAgICAgICAgICAgIG91dFtpbmRleFN0YXJ0ICsgaW5kZXhdID0gYXJyYXlbal07XG4gICAgICAgIH1cblxuICAgICAgICBsaXR0bGVPZmZzZXQgKz0gc2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xufVxuXG52YXIgYnl0ZVNpemVNYXAgPSB7IDUxMjY6IDQsIDUxMjM6IDIsIDUxMjE6IDEgfTtcbnZhciBVSUQkMSA9IDA7XG5cbi8qIGVzbGludC1kaXNhYmxlIG9iamVjdC1zaG9ydGhhbmQgKi9cbnZhciBtYXAkMSA9IHtcbiAgICBGbG9hdDMyQXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICBVaW50MzJBcnJheTogVWludDMyQXJyYXksXG4gICAgSW50MzJBcnJheTogSW50MzJBcnJheSxcbiAgICBVaW50OEFycmF5OiBVaW50OEFycmF5LFxuICAgIFVpbnQxNkFycmF5OiBVaW50MTZBcnJheSxcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuLyoqXG4gKiBUaGUgR2VvbWV0cnkgcmVwcmVzZW50cyBhIG1vZGVsLiBJdCBjb25zaXN0cyBvZiB0d28gY29tcG9uZW50czpcbiAqIC0gR2VvbWV0cnlTdHlsZSAtIFRoZSBzdHJ1Y3R1cmUgb2YgdGhlIG1vZGVsIHN1Y2ggYXMgdGhlIGF0dHJpYnV0ZXMgbGF5b3V0XG4gKiAtIEdlb21ldHJ5RGF0YSAtIHRoZSBkYXRhIG9mIHRoZSBtb2RlbCAtIHRoaXMgY29uc2lzdHMgb2YgYnVmZmVycy5cbiAqIFRoaXMgY2FuIGluY2x1ZGUgYW55dGhpbmcgZnJvbSBwb3NpdGlvbnMsIHV2cywgbm9ybWFscywgY29sb3JzIGV0Yy5cbiAqXG4gKiBHZW9tZXRyeSBjYW4gYmUgZGVmaW5lZCB3aXRob3V0IHBhc3NpbmcgaW4gYSBzdHlsZSBvciBkYXRhIGlmIHJlcXVpcmVkICh0aGF0cyBob3cgSSBwcmVmZXIhKVxuICpcbiAqIGBgYGpzXG4gKiBsZXQgZ2VvbWV0cnkgPSBuZXcgUElYSS5HZW9tZXRyeSgpO1xuICpcbiAqIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncG9zaXRpb25zJywgWzAsIDAsIDEwMCwgMCwgMTAwLCAxMDAsIDAsIDEwMF0sIDIpO1xuICogZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCd1dnMnLCBbMCwwLDEsMCwxLDEsMCwxXSwyKVxuICogZ2VvbWV0cnkuYWRkSW5kZXgoWzAsMSwyLDEsMywyXSlcbiAqXG4gKiBgYGBcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEdlb21ldHJ5ID0gZnVuY3Rpb24gR2VvbWV0cnkoYnVmZmVycywgYXR0cmlidXRlcylcbntcbiAgICBpZiAoIGJ1ZmZlcnMgPT09IHZvaWQgMCApIGJ1ZmZlcnMgPSBbXTtcbiAgICBpZiAoIGF0dHJpYnV0ZXMgPT09IHZvaWQgMCApIGF0dHJpYnV0ZXMgPSB7fTtcblxuICAgIHRoaXMuYnVmZmVycyA9IGJ1ZmZlcnM7XG5cbiAgICB0aGlzLmluZGV4QnVmZmVyID0gbnVsbDtcblxuICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG5cbiAgICAvKipcbiAgICAgKiBBIG1hcCBvZiByZW5kZXJlciBJRHMgdG8gd2ViZ2wgVkFPc1xuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5nbFZlcnRleEFycmF5T2JqZWN0cyA9IHt9O1xuXG4gICAgdGhpcy5pZCA9IFVJRCQxKys7XG5cbiAgICB0aGlzLmluc3RhbmNlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIGluc3RhbmNlcyBpbiB0aGlzIGdlb21ldHJ5LCBwYXNzIGl0IHRvIGBHZW9tZXRyeVN5c3RlbS5kcmF3KClgXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICB0aGlzLmluc3RhbmNlQ291bnQgPSAxO1xuXG4gICAgdGhpcy5kaXNwb3NlUnVubmVyID0gbmV3IFJ1bm5lcignZGlzcG9zZUdlb21ldHJ5JywgMik7XG5cbiAgICAvKipcbiAgICAgKiBDb3VudCBvZiBleGlzdGluZyAobm90IGRlc3Ryb3llZCkgbWVzaGVzIHRoYXQgcmVmZXJlbmNlIHRoaXMgZ2VvbWV0cnlcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5yZWZDb3VudCA9IDA7XG59O1xuXG4vKipcbipcbiogQWRkcyBhbiBhdHRyaWJ1dGUgdG8gdGhlIGdlb21ldHJ5XG4qXG4qIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgKG1hdGNoaW5nIHVwIHRvIGEgc2hhZGVyKVxuKiBAcGFyYW0ge1BJWEkuQnVmZmVyfG51bWJlcltdfSBbYnVmZmVyXSB0aGUgYnVmZmVyIHRoYXQgaG9sZHMgdGhlIGRhdGEgb2YgdGhlIGF0dHJpYnV0ZSAuIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIEFycmF5IGFuZCBhIGJ1ZmZlciB3aWxsIGJlIGNyZWF0ZWQgZnJvbSBpdC5cbiogQHBhcmFtIHtOdW1iZXJ9IFtzaXplPTBdIHRoZSBzaXplIG9mIHRoZSBhdHRyaWJ1dGUuIElmIHlvdSBoYXZlIDIgZmxvYXRzIHBlciB2ZXJ0ZXggKGVnIHBvc2l0aW9uIHggYW5kIHkpIHRoaXMgd291bGQgYmUgMlxuKiBAcGFyYW0ge0Jvb2xlYW59IFtub3JtYWxpemVkPWZhbHNlXSBzaG91bGQgdGhlIGRhdGEgYmUgbm9ybWFsaXplZC5cbiogQHBhcmFtIHtOdW1iZXJ9IFt0eXBlPVBJWEkuVFlQRVMuRkxPQVRdIHdoYXQgdHlwZSBvZiBudW1iZXIgaXMgdGhlIGF0dHJpYnV0ZS4gQ2hlY2sge1BJWEkuVFlQRVN9IHRvIHNlZSB0aGUgb25lcyBhdmFpbGFibGVcbiogQHBhcmFtIHtOdW1iZXJ9IFtzdHJpZGU9MF0gSG93IGZhciBhcGFydCAoaW4gZmxvYXRzKSB0aGUgc3RhcnQgb2YgZWFjaCB2YWx1ZSBpcy4gKHVzZWQgZm9yIGludGVybGVhdmluZyBkYXRhKVxuKiBAcGFyYW0ge051bWJlcn0gW3N0YXJ0PTBdIEhvdyBmYXIgaW50byB0aGUgYXJyYXkgdG8gc3RhcnQgcmVhZGluZyB2YWx1ZXMgKHVzZWQgZm9yIGludGVybGVhdmluZyBkYXRhKVxuKlxuKiBAcmV0dXJuIHtQSVhJLkdlb21ldHJ5fSByZXR1cm5zIHNlbGYsIHVzZWZ1bCBmb3IgY2hhaW5pbmcuXG4qL1xuR2VvbWV0cnkucHJvdG90eXBlLmFkZEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIGFkZEF0dHJpYnV0ZSAoaWQsIGJ1ZmZlciwgc2l6ZSwgbm9ybWFsaXplZCwgdHlwZSwgc3RyaWRlLCBzdGFydCwgaW5zdGFuY2UpXG57XG4gICAgICAgIGlmICggbm9ybWFsaXplZCA9PT0gdm9pZCAwICkgbm9ybWFsaXplZCA9IGZhbHNlO1xuICAgICAgICBpZiAoIGluc3RhbmNlID09PSB2b2lkIDAgKSBpbnN0YW5jZSA9IGZhbHNlO1xuXG4gICAgaWYgKCFidWZmZXIpXG4gICAge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSBidWZmZXIgd2hlbiBjcmVhdGluZyBhbiBhdHRyaWJ1dGUnKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiB0aGlzIGlzIGEgYnVmZmVyIVxuICAgIGlmICghYnVmZmVyLmRhdGEpXG4gICAge1xuICAgICAgICAvLyBpdHMgYW4gYXJyYXkhXG4gICAgICAgIGlmIChidWZmZXIgaW5zdGFuY2VvZiBBcnJheSlcbiAgICAgICAge1xuICAgICAgICAgICAgYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnVmZmVyID0gbmV3IEJ1ZmZlcihidWZmZXIpO1xuICAgIH1cblxuICAgIHZhciBpZHMgPSBpZC5zcGxpdCgnfCcpO1xuXG4gICAgaWYgKGlkcy5sZW5ndGggPiAxKVxuICAgIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKGlkc1tpXSwgYnVmZmVyLCBzaXplLCBub3JtYWxpemVkLCB0eXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBidWZmZXJJbmRleCA9IHRoaXMuYnVmZmVycy5pbmRleE9mKGJ1ZmZlcik7XG5cbiAgICBpZiAoYnVmZmVySW5kZXggPT09IC0xKVxuICAgIHtcbiAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goYnVmZmVyKTtcbiAgICAgICAgYnVmZmVySW5kZXggPSB0aGlzLmJ1ZmZlcnMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICB0aGlzLmF0dHJpYnV0ZXNbaWRdID0gbmV3IEF0dHJpYnV0ZShidWZmZXJJbmRleCwgc2l6ZSwgbm9ybWFsaXplZCwgdHlwZSwgc3RyaWRlLCBzdGFydCwgaW5zdGFuY2UpO1xuXG4gICAgLy8gYXNzdW1pbmcgdGhhdCBpZiB0aGVyZSBpcyBpbnN0YW5jZWQgZGF0YSB0aGVuIHRoaXMgd2lsbCBiZSBkcmF3biB3aXRoIGluc3RhbmNpbmchXG4gICAgdGhpcy5pbnN0YW5jZWQgPSB0aGlzLmluc3RhbmNlZCB8fCBpbnN0YW5jZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSByZXF1ZXN0ZWQgYXR0cmlidXRlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlkICB0aGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHJlcXVpcmVkXG4gKiBAcmV0dXJuIHtQSVhJLkF0dHJpYnV0ZX0gdGhlIGF0dHJpYnV0ZSByZXF1ZXN0ZWQuXG4gKi9cbkdlb21ldHJ5LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiBnZXRBdHRyaWJ1dGUgKGlkKVxue1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbaWRdO1xufTtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSByZXF1ZXN0ZWQgYnVmZmVyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlkICB0aGUgbmFtZSBvZiB0aGUgYnVmZmVyIHJlcXVpcmVkXG4gKiBAcmV0dXJuIHtQSVhJLkJ1ZmZlcn0gdGhlIGJ1ZmZlciByZXF1ZXN0ZWQuXG4gKi9cbkdlb21ldHJ5LnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIgKGlkKVxue1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlcnNbdGhpcy5nZXRBdHRyaWJ1dGUoaWQpLmJ1ZmZlcl07XG59O1xuXG4vKipcbipcbiogQWRkcyBhbiBpbmRleCBidWZmZXIgdG8gdGhlIGdlb21ldHJ5XG4qIFRoZSBpbmRleCBidWZmZXIgY29udGFpbnMgaW50ZWdlcnMsIHRocmVlIGZvciBlYWNoIHRyaWFuZ2xlIGluIHRoZSBnZW9tZXRyeSwgd2hpY2ggcmVmZXJlbmNlIHRoZSB2YXJpb3VzIGF0dHJpYnV0ZSBidWZmZXJzIChwb3NpdGlvbiwgY29sb3VyLCBVViBjb29yZGluYXRlcywgb3RoZXIgVVYgY29vcmRpbmF0ZXMsIG5vcm1hbCwg4oCmKS4gVGhlcmUgaXMgb25seSBPTkUgaW5kZXggYnVmZmVyLlxuKlxuKiBAcGFyYW0ge1BJWEkuQnVmZmVyfG51bWJlcltdfSBbYnVmZmVyXSB0aGUgYnVmZmVyIHRoYXQgaG9sZHMgdGhlIGRhdGEgb2YgdGhlIGluZGV4IGJ1ZmZlci4gWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gQXJyYXkgYW5kIGEgYnVmZmVyIHdpbGwgYmUgY3JlYXRlZCBmcm9tIGl0LlxuKiBAcmV0dXJuIHtQSVhJLkdlb21ldHJ5fSByZXR1cm5zIHNlbGYsIHVzZWZ1bCBmb3IgY2hhaW5pbmcuXG4qL1xuR2VvbWV0cnkucHJvdG90eXBlLmFkZEluZGV4ID0gZnVuY3Rpb24gYWRkSW5kZXggKGJ1ZmZlcilcbntcbiAgICBpZiAoIWJ1ZmZlci5kYXRhKVxuICAgIHtcbiAgICAgICAgLy8gaXRzIGFuIGFycmF5IVxuICAgICAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBVaW50MTZBcnJheShidWZmZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnVmZmVyID0gbmV3IEJ1ZmZlcihidWZmZXIpO1xuICAgIH1cblxuICAgIGJ1ZmZlci5pbmRleCA9IHRydWU7XG4gICAgdGhpcy5pbmRleEJ1ZmZlciA9IGJ1ZmZlcjtcblxuICAgIGlmICh0aGlzLmJ1ZmZlcnMuaW5kZXhPZihidWZmZXIpID09PSAtMSlcbiAgICB7XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIHJldHVybnMgdGhlIGluZGV4IGJ1ZmZlclxuICpcbiAqIEByZXR1cm4ge1BJWEkuQnVmZmVyfSB0aGUgaW5kZXggYnVmZmVyLlxuICovXG5HZW9tZXRyeS5wcm90b3R5cGUuZ2V0SW5kZXggPSBmdW5jdGlvbiBnZXRJbmRleCAoKVxue1xuICAgIHJldHVybiB0aGlzLmluZGV4QnVmZmVyO1xufTtcblxuLyoqXG4gKiB0aGlzIGZ1bmN0aW9uIG1vZGlmaWVzIHRoZSBzdHJ1Y3R1cmUgc28gdGhhdCBhbGwgY3VycmVudCBhdHRyaWJ1dGVzIGJlY29tZSBpbnRlcmxlYXZlZCBpbnRvIGEgc2luZ2xlIGJ1ZmZlclxuICogVGhpcyBjYW4gYmUgdXNlZnVsIGlmIHlvdXIgbW9kZWwgcmVtYWlucyBzdGF0aWMgYXMgaXQgb2ZmZXJzIGEgbGl0dGxlIHBlcmZvcm1hbmNlIGJvb3N0XG4gKlxuICogQHJldHVybiB7UElYSS5HZW9tZXRyeX0gcmV0dXJucyBzZWxmLCB1c2VmdWwgZm9yIGNoYWluaW5nLlxuICovXG5HZW9tZXRyeS5wcm90b3R5cGUuaW50ZXJsZWF2ZSA9IGZ1bmN0aW9uIGludGVybGVhdmUgKClcbntcbiAgICAvLyBhIHNpbXBsZSBjaGVjayB0byBzZWUgaWYgYnVmZmVycyBhcmUgYWxyZWFkeSBpbnRlcmxlYXZlZC4uXG4gICAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IDEgfHwgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IDIgJiYgdGhpcy5pbmRleEJ1ZmZlcikpIHsgcmV0dXJuIHRoaXM7IH1cblxuICAgIC8vIGFzc3VtZSBhbHJlYWR5IHRoYXQgbm8gYnVmZmVycyBhcmUgaW50ZXJsZWF2ZWRcbiAgICB2YXIgYXJyYXlzID0gW107XG4gICAgdmFyIHNpemVzID0gW107XG4gICAgdmFyIGludGVybGVhdmVkQnVmZmVyID0gbmV3IEJ1ZmZlcigpO1xuICAgIHZhciBpO1xuXG4gICAgZm9yIChpIGluIHRoaXMuYXR0cmlidXRlcylcbiAgICB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZXNbaV07XG5cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyc1thdHRyaWJ1dGUuYnVmZmVyXTtcblxuICAgICAgICBhcnJheXMucHVzaChidWZmZXIuZGF0YSk7XG5cbiAgICAgICAgc2l6ZXMucHVzaCgoYXR0cmlidXRlLnNpemUgKiBieXRlU2l6ZU1hcFthdHRyaWJ1dGUudHlwZV0pIC8gNCk7XG5cbiAgICAgICAgYXR0cmlidXRlLmJ1ZmZlciA9IDA7XG4gICAgfVxuXG4gICAgaW50ZXJsZWF2ZWRCdWZmZXIuZGF0YSA9IGludGVybGVhdmVUeXBlZEFycmF5cyhhcnJheXMsIHNpemVzKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmJ1ZmZlcnMubGVuZ3RoOyBpKyspXG4gICAge1xuICAgICAgICBpZiAodGhpcy5idWZmZXJzW2ldICE9PSB0aGlzLmluZGV4QnVmZmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnNbaV0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5idWZmZXJzID0gW2ludGVybGVhdmVkQnVmZmVyXTtcblxuICAgIGlmICh0aGlzLmluZGV4QnVmZmVyKVxuICAgIHtcbiAgICAgICAgdGhpcy5idWZmZXJzLnB1c2godGhpcy5pbmRleEJ1ZmZlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5HZW9tZXRyeS5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uIGdldFNpemUgKClcbntcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuYXR0cmlidXRlcylcbiAgICB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZXNbaV07XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnNbYXR0cmlidXRlLmJ1ZmZlcl07XG5cbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5kYXRhLmxlbmd0aCAvICgoYXR0cmlidXRlLnN0cmlkZSAvIDQpIHx8IGF0dHJpYnV0ZS5zaXplKTtcbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbn07XG5cbi8qKlxuICogZGlzcG9zZXMgV2ViR0wgcmVzb3VyY2VzIHRoYXQgYXJlIGNvbm5lY3RlZCB0byB0aGlzIGdlb21ldHJ5XG4gKi9cbkdlb21ldHJ5LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSAoKVxue1xuICAgIHRoaXMuZGlzcG9zZVJ1bm5lci5ydW4odGhpcywgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgZ2VvbWV0cnkuXG4gKi9cbkdlb21ldHJ5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIHRoaXMuZGlzcG9zZSgpO1xuXG4gICAgdGhpcy5idWZmZXJzID0gbnVsbDtcbiAgICB0aGlzLmluZGV4QnVmZmVyLmRlc3Ryb3koKTtcblxuICAgIHRoaXMuYXR0cmlidXRlcyA9IG51bGw7XG59O1xuXG4vKipcbiAqIHJldHVybnMgYSBjbG9uZSBvZiB0aGUgZ2VvbWV0cnlcbiAqXG4gKiBAcmV0dXJucyB7UElYSS5HZW9tZXRyeX0gYSBuZXcgY2xvbmUgb2YgdGhpcyBnZW9tZXRyeVxuICovXG5HZW9tZXRyeS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKVxue1xuICAgIHZhciBnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeSgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJ1ZmZlcnMubGVuZ3RoOyBpKyspXG4gICAge1xuICAgICAgICBnZW9tZXRyeS5idWZmZXJzW2ldID0gbmV3IEJ1ZmZlcih0aGlzLmJ1ZmZlcnNbaV0uZGF0YS5zbGljZSgpKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpJDEgaW4gdGhpcy5hdHRyaWJ1dGVzKVxuICAgIHtcbiAgICAgICAgdmFyIGF0dHJpYiA9IHRoaXMuYXR0cmlidXRlc1tpJDFdO1xuXG4gICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXNbaSQxXSA9IG5ldyBBdHRyaWJ1dGUoXG4gICAgICAgICAgICBhdHRyaWIuYnVmZmVyLFxuICAgICAgICAgICAgYXR0cmliLnNpemUsXG4gICAgICAgICAgICBhdHRyaWIubm9ybWFsaXplZCxcbiAgICAgICAgICAgIGF0dHJpYi50eXBlLFxuICAgICAgICAgICAgYXR0cmliLnN0cmlkZSxcbiAgICAgICAgICAgIGF0dHJpYi5zdGFydCxcbiAgICAgICAgICAgIGF0dHJpYi5pbnN0YW5jZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmluZGV4QnVmZmVyKVxuICAgIHtcbiAgICAgICAgZ2VvbWV0cnkuaW5kZXhCdWZmZXIgPSBnZW9tZXRyeS5idWZmZXJzW3RoaXMuYnVmZmVycy5pbmRleE9mKHRoaXMuaW5kZXhCdWZmZXIpXTtcbiAgICAgICAgZ2VvbWV0cnkuaW5kZXhCdWZmZXIuaW5kZXggPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBnZW9tZXRyeTtcbn07XG5cbi8qKlxuICogbWVyZ2VzIGFuIGFycmF5IG9mIGdlb21ldHJpZXMgaW50byBhIG5ldyBzaW5nbGUgb25lXG4gKiBnZW9tZXRyeSBhdHRyaWJ1dGUgc3R5bGVzIG11c3QgbWF0Y2ggZm9yIHRoaXMgb3BlcmF0aW9uIHRvIHdvcmtcbiAqXG4gKiBAcGFyYW0ge1BJWEkuR2VvbWV0cnlbXX0gZ2VvbWV0cmllcyBhcnJheSBvZiBnZW9tZXRyaWVzIHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7UElYSS5HZW9tZXRyeX0gc2hpbnkgbmV3IGdlb21ldHJ5IVxuICovXG5HZW9tZXRyeS5tZXJnZSA9IGZ1bmN0aW9uIG1lcmdlIChnZW9tZXRyaWVzKVxue1xuICAgIC8vIHRvZG8gYWRkIGEgZ2VvbWV0cnkgY2hlY2shXG4gICAgLy8gYWxzbyBhIHNpemUgY2hlY2suLiBjYW50IGJlIHRvbyBiaWchXVxuXG4gICAgdmFyIGdlb21ldHJ5T3V0ID0gbmV3IEdlb21ldHJ5KCk7XG5cbiAgICB2YXIgYXJyYXlzID0gW107XG4gICAgdmFyIHNpemVzID0gW107XG4gICAgdmFyIG9mZnNldHMgPSBbXTtcblxuICAgIHZhciBnZW9tZXRyeTtcblxuICAgIC8vIHBhc3Mgb25lLi4gZ2V0IHNpemVzLi5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdlb21ldHJpZXMubGVuZ3RoOyBpKyspXG4gICAge1xuICAgICAgICBnZW9tZXRyeSA9IGdlb21ldHJpZXNbaV07XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBnZW9tZXRyeS5idWZmZXJzLmxlbmd0aDsgaisrKVxuICAgICAgICB7XG4gICAgICAgICAgICBzaXplc1tqXSA9IHNpemVzW2pdIHx8IDA7XG4gICAgICAgICAgICBzaXplc1tqXSArPSBnZW9tZXRyeS5idWZmZXJzW2pdLmRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgb2Zmc2V0c1tqXSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBidWlsZCB0aGUgY29ycmVjdCBzaXplIGFycmF5cy4uXG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgZ2VvbWV0cnkuYnVmZmVycy5sZW5ndGg7IGkkMSsrKVxuICAgIHtcbiAgICAgICAgLy8gVE9ETyB0eXBlcyFcbiAgICAgICAgYXJyYXlzW2kkMV0gPSBuZXcgbWFwJDFbZ2V0QnVmZmVyVHlwZShnZW9tZXRyeS5idWZmZXJzW2kkMV0uZGF0YSldKHNpemVzW2kkMV0pO1xuICAgICAgICBnZW9tZXRyeU91dC5idWZmZXJzW2kkMV0gPSBuZXcgQnVmZmVyKGFycmF5c1tpJDFdKTtcbiAgICB9XG5cbiAgICAvLyBwYXNzIHRvIHNldCBkYXRhLi5cbiAgICBmb3IgKHZhciBpJDIgPSAwOyBpJDIgPCBnZW9tZXRyaWVzLmxlbmd0aDsgaSQyKyspXG4gICAge1xuICAgICAgICBnZW9tZXRyeSA9IGdlb21ldHJpZXNbaSQyXTtcblxuICAgICAgICBmb3IgKHZhciBqJDEgPSAwOyBqJDEgPCBnZW9tZXRyeS5idWZmZXJzLmxlbmd0aDsgaiQxKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFycmF5c1tqJDFdLnNldChnZW9tZXRyeS5idWZmZXJzW2okMV0uZGF0YSwgb2Zmc2V0c1tqJDFdKTtcbiAgICAgICAgICAgIG9mZnNldHNbaiQxXSArPSBnZW9tZXRyeS5idWZmZXJzW2okMV0uZGF0YS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW9tZXRyeU91dC5hdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuICAgIGlmIChnZW9tZXRyeS5pbmRleEJ1ZmZlcilcbiAgICB7XG4gICAgICAgIGdlb21ldHJ5T3V0LmluZGV4QnVmZmVyID0gZ2VvbWV0cnlPdXQuYnVmZmVyc1tnZW9tZXRyeS5idWZmZXJzLmluZGV4T2YoZ2VvbWV0cnkuaW5kZXhCdWZmZXIpXTtcbiAgICAgICAgZ2VvbWV0cnlPdXQuaW5kZXhCdWZmZXIuaW5kZXggPSB0cnVlO1xuXG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgc3RyaWRlID0gMDtcbiAgICAgICAgdmFyIG9mZnNldDIgPSAwO1xuICAgICAgICB2YXIgYnVmZmVySW5kZXhUb0NvdW50ID0gMDtcblxuICAgICAgICAvLyBnZXQgYSBidWZmZXJcbiAgICAgICAgZm9yICh2YXIgaSQzID0gMDsgaSQzIDwgZ2VvbWV0cnkuYnVmZmVycy5sZW5ndGg7IGkkMysrKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoZ2VvbWV0cnkuYnVmZmVyc1tpJDNdICE9PSBnZW9tZXRyeS5pbmRleEJ1ZmZlcilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBidWZmZXJJbmRleFRvQ291bnQgPSBpJDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaWd1cmUgb3V0IHRoZSBzdHJpZGUgb2Ygb25lIGJ1ZmZlci4uXG4gICAgICAgIGZvciAodmFyIGkkNCBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1tpJDRdO1xuXG4gICAgICAgICAgICBpZiAoKGF0dHJpYnV0ZS5idWZmZXIgfCAwKSA9PT0gYnVmZmVySW5kZXhUb0NvdW50KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmlkZSArPSAoKGF0dHJpYnV0ZS5zaXplICogYnl0ZVNpemVNYXBbYXR0cmlidXRlLnR5cGVdKSAvIDQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGltZSB0byBvZmYgc2V0IGFsbCBpbmRleGVzLi5cbiAgICAgICAgZm9yICh2YXIgaSQ1ID0gMDsgaSQ1IDwgZ2VvbWV0cmllcy5sZW5ndGg7IGkkNSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgaW5kZXhCdWZmZXJEYXRhID0gZ2VvbWV0cmllc1tpJDVdLmluZGV4QnVmZmVyLmRhdGE7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGokMiA9IDA7IGokMiA8IGluZGV4QnVmZmVyRGF0YS5sZW5ndGg7IGokMisrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGdlb21ldHJ5T3V0LmluZGV4QnVmZmVyLmRhdGFbaiQyICsgb2Zmc2V0Ml0gKz0gb2Zmc2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvZmZzZXQgKz0gZ2VvbWV0cnkuYnVmZmVyc1tidWZmZXJJbmRleFRvQ291bnRdLmRhdGEubGVuZ3RoIC8gKHN0cmlkZSk7XG4gICAgICAgICAgICBvZmZzZXQyICs9IGluZGV4QnVmZmVyRGF0YS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ2VvbWV0cnlPdXQ7XG59O1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBjcmVhdGUgYSBxdWFkXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgUXVhZCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEdlb21ldHJ5KSB7XG4gICAgZnVuY3Rpb24gUXVhZCgpXG4gICAge1xuICAgICAgICBHZW9tZXRyeS5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKCdhVmVydGV4UG9zaXRpb24nLCBbXG4gICAgICAgICAgICAwLCAwLFxuICAgICAgICAgICAgMSwgMCxcbiAgICAgICAgICAgIDEsIDEsXG4gICAgICAgICAgICAwLCAxIF0pXG4gICAgICAgICAgICAuYWRkSW5kZXgoWzAsIDEsIDMsIDJdKTtcbiAgICB9XG5cbiAgICBpZiAoIEdlb21ldHJ5ICkgUXVhZC5fX3Byb3RvX18gPSBHZW9tZXRyeTtcbiAgICBRdWFkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5ICYmIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuICAgIFF1YWQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUXVhZDtcblxuICAgIHJldHVybiBRdWFkO1xufShHZW9tZXRyeSkpO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBjcmVhdGUgYSBxdWFkIHdpdGggdXZzIGxpa2UgaW4gdjRcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAZXh0ZW5kcyBQSVhJLkdlb21ldHJ5XG4gKi9cbnZhciBRdWFkVXYgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChHZW9tZXRyeSkge1xuICAgIGZ1bmN0aW9uIFF1YWRVdigpXG4gICAge1xuICAgICAgICBHZW9tZXRyeS5jYWxsKHRoaXMpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBhcnJheSBvZiB2ZXJ0aWNlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtGbG9hdDMyQXJyYXl9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgICAgICAtMSwgLTEsXG4gICAgICAgICAgICAxLCAtMSxcbiAgICAgICAgICAgIDEsIDEsXG4gICAgICAgICAgICAtMSwgMSBdKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIFV2cyBvZiB0aGUgcXVhZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtGbG9hdDMyQXJyYXl9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnV2cyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAgICAgMCwgMCxcbiAgICAgICAgICAgIDEsIDAsXG4gICAgICAgICAgICAxLCAxLFxuICAgICAgICAgICAgMCwgMSBdKTtcblxuICAgICAgICB0aGlzLnZlcnRleEJ1ZmZlciA9IG5ldyBCdWZmZXIodGhpcy52ZXJ0aWNlcyk7XG4gICAgICAgIHRoaXMudXZCdWZmZXIgPSBuZXcgQnVmZmVyKHRoaXMudXZzKTtcblxuICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZSgnYVZlcnRleFBvc2l0aW9uJywgdGhpcy52ZXJ0ZXhCdWZmZXIpXG4gICAgICAgICAgICAuYWRkQXR0cmlidXRlKCdhVGV4dHVyZUNvb3JkJywgdGhpcy51dkJ1ZmZlcilcbiAgICAgICAgICAgIC5hZGRJbmRleChbMCwgMSwgMiwgMCwgMiwgM10pO1xuICAgIH1cblxuICAgIGlmICggR2VvbWV0cnkgKSBRdWFkVXYuX19wcm90b19fID0gR2VvbWV0cnk7XG4gICAgUXVhZFV2LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5ICYmIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuICAgIFF1YWRVdi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBRdWFkVXY7XG5cbiAgICAvKipcbiAgICAgKiBNYXBzIHR3byBSZWN0YW5nbGUgdG8gdGhlIHF1YWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSB0YXJnZXRUZXh0dXJlRnJhbWUgLSB0aGUgZmlyc3QgcmVjdGFuZ2xlXG4gICAgICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gZGVzdGluYXRpb25GcmFtZSAtIHRoZSBzZWNvbmQgcmVjdGFuZ2xlXG4gICAgICogQHJldHVybiB7UElYSS5RdWFkfSBSZXR1cm5zIGl0c2VsZi5cbiAgICAgKi9cbiAgICBRdWFkVXYucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIG1hcCAodGFyZ2V0VGV4dHVyZUZyYW1lLCBkZXN0aW5hdGlvbkZyYW1lKVxuICAgIHtcbiAgICAgICAgdmFyIHggPSAwOyAvLyBkZXN0aW5hdGlvbkZyYW1lLnggLyB0YXJnZXRUZXh0dXJlRnJhbWUud2lkdGg7XG4gICAgICAgIHZhciB5ID0gMDsgLy8gZGVzdGluYXRpb25GcmFtZS55IC8gdGFyZ2V0VGV4dHVyZUZyYW1lLmhlaWdodDtcblxuICAgICAgICB0aGlzLnV2c1swXSA9IHg7XG4gICAgICAgIHRoaXMudXZzWzFdID0geTtcblxuICAgICAgICB0aGlzLnV2c1syXSA9IHggKyAoZGVzdGluYXRpb25GcmFtZS53aWR0aCAvIHRhcmdldFRleHR1cmVGcmFtZS53aWR0aCk7XG4gICAgICAgIHRoaXMudXZzWzNdID0geTtcblxuICAgICAgICB0aGlzLnV2c1s0XSA9IHggKyAoZGVzdGluYXRpb25GcmFtZS53aWR0aCAvIHRhcmdldFRleHR1cmVGcmFtZS53aWR0aCk7XG4gICAgICAgIHRoaXMudXZzWzVdID0geSArIChkZXN0aW5hdGlvbkZyYW1lLmhlaWdodCAvIHRhcmdldFRleHR1cmVGcmFtZS5oZWlnaHQpO1xuXG4gICAgICAgIHRoaXMudXZzWzZdID0geDtcbiAgICAgICAgdGhpcy51dnNbN10gPSB5ICsgKGRlc3RpbmF0aW9uRnJhbWUuaGVpZ2h0IC8gdGFyZ2V0VGV4dHVyZUZyYW1lLmhlaWdodCk7XG5cbiAgICAgICAgeCA9IGRlc3RpbmF0aW9uRnJhbWUueDtcbiAgICAgICAgeSA9IGRlc3RpbmF0aW9uRnJhbWUueTtcblxuICAgICAgICB0aGlzLnZlcnRpY2VzWzBdID0geDtcbiAgICAgICAgdGhpcy52ZXJ0aWNlc1sxXSA9IHk7XG5cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1syXSA9IHggKyBkZXN0aW5hdGlvbkZyYW1lLndpZHRoO1xuICAgICAgICB0aGlzLnZlcnRpY2VzWzNdID0geTtcblxuICAgICAgICB0aGlzLnZlcnRpY2VzWzRdID0geCArIGRlc3RpbmF0aW9uRnJhbWUud2lkdGg7XG4gICAgICAgIHRoaXMudmVydGljZXNbNV0gPSB5ICsgZGVzdGluYXRpb25GcmFtZS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1s2XSA9IHg7XG4gICAgICAgIHRoaXMudmVydGljZXNbN10gPSB5ICsgZGVzdGluYXRpb25GcmFtZS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGxlZ2FjeSB1cGxvYWQgbWV0aG9kLCBqdXN0IG1hcmtzIGJ1ZmZlcnMgZGlydHlcbiAgICAgKiBAcmV0dXJucyB7UElYSS5RdWFkVXZ9IFJldHVybnMgaXRzZWxmLlxuICAgICAqL1xuICAgIFF1YWRVdi5wcm90b3R5cGUuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUgKClcbiAgICB7XG4gICAgICAgIHRoaXMudmVydGV4QnVmZmVyLl91cGRhdGVJRCsrO1xuICAgICAgICB0aGlzLnV2QnVmZmVyLl91cGRhdGVJRCsrO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICByZXR1cm4gUXVhZFV2O1xufShHZW9tZXRyeSkpO1xuXG52YXIgVUlEJDIgPSAwO1xuXG4vKipcbiAqIFVuaWZvcm0gZ3JvdXAgaG9sZHMgdW5pZm9ybSBtYXAgYW5kIHNvbWUgSUQncyBmb3Igd29ya1xuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFVuaWZvcm1Hcm91cCA9IGZ1bmN0aW9uIFVuaWZvcm1Hcm91cCh1bmlmb3JtcywgX3N0YXRpYylcbntcbiAgICAvKipcbiAgICAgKiB1bmlmb3JtIHZhbHVlc1xuICAgICAqIEBtZW1iZXIge29iamVjdH1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICB0aGlzLnVuaWZvcm1zID0gdW5pZm9ybXM7XG5cbiAgICAvKipcbiAgICAgKiBJdHMgYSBncm91cCBhbmQgbm90IGEgc2luZ2xlIHVuaWZvcm1zXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgdGhpcy5ncm91cCA9IHRydWU7XG5cbiAgICAvLyBsZXRzIGdlbmVyYXRlIHRoaXMgd2hlbiB0aGUgc2hhZGVyID9cbiAgICB0aGlzLnN5bmNVbmlmb3JtcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogZGlydHkgdmVyc2lvblxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5kaXJ0eUlkID0gMDtcblxuICAgIC8qKlxuICAgICAqIHVuaXF1ZSBpZFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5pZCA9IFVJRCQyKys7XG5cbiAgICAvKipcbiAgICAgKiBVbmlmb3JtcyB3b250IGJlIGNoYW5nZWQgYWZ0ZXIgY3JlYXRpb25cbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc3RhdGljID0gISFfc3RhdGljO1xufTtcblxuVW5pZm9ybUdyb3VwLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKClcbntcbiAgICB0aGlzLmRpcnR5SWQrKztcbn07XG5cblVuaWZvcm1Hcm91cC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChuYW1lLCB1bmlmb3JtcywgX3N0YXRpYylcbntcbiAgICB0aGlzLnVuaWZvcm1zW25hbWVdID0gbmV3IFVuaWZvcm1Hcm91cCh1bmlmb3JtcywgX3N0YXRpYyk7XG59O1xuXG5Vbmlmb3JtR3JvdXAuZnJvbSA9IGZ1bmN0aW9uIGZyb20gKHVuaWZvcm1zLCBfc3RhdGljKVxue1xuICAgIHJldHVybiBuZXcgVW5pZm9ybUdyb3VwKHVuaWZvcm1zLCBfc3RhdGljKTtcbn07XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIGZpbHRlciBzdGF0ZXMuXG4gKlxuICogQGNsYXNzXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgRmlsdGVyU3RhdGUgPSBmdW5jdGlvbiBGaWx0ZXJTdGF0ZSgpXG57XG4gICAgdGhpcy5yZW5kZXJUZXh0dXJlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRhcmdldCBvZiB0aGUgZmlsdGVyc1xuICAgICAqIFdlIHN0b3JlIGZvciBjYXNlIHdoZW4gY3VzdG9tIGZpbHRlciB3YW50cyB0byBrbm93IHRoZSBlbGVtZW50IGl0IHdhcyBhcHBsaWVkIG9uXG4gICAgICogQG1lbWJlciB7UElYSS5EaXNwbGF5T2JqZWN0fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy50YXJnZXQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ29tcGF0aWJpbGl0eSB3aXRoIFBpeGlKUyB2NCBmaWx0ZXJzXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5sZWdhY3kgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFJlc29sdXRpb24gb2YgZmlsdGVyc1xuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnJlc29sdXRpb24gPSAxO1xuXG4gICAgLy8gbmV4dCB0aHJlZSBmaWVsZHMgYXJlIGNyZWF0ZWQgb25seSBmb3Igcm9vdFxuICAgIC8vIHJlLWFzc2lnbmVkIGZvciBldmVyeXRoaW5nIGVsc2VcblxuICAgIC8qKlxuICAgICAqIFNvdXJjZSBmcmFtZVxuICAgICAqIEBtZW1iZXIge1BJWEkuUmVjdGFuZ2xlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5zb3VyY2VGcmFtZSA9IG5ldyBSZWN0YW5nbGUoKTtcblxuICAgIC8qKlxuICAgICAqIERlc3RpbmF0aW9uIGZyYW1lXG4gICAgICogQG1lbWJlciB7UElYSS5SZWN0YW5nbGV9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmRlc3RpbmF0aW9uRnJhbWUgPSBuZXcgUmVjdGFuZ2xlKCk7XG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIGZpbHRlcnNcbiAgICAgKiBAbWVtYmVyIHtQSVhJLkZpbHRlcltdfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5maWx0ZXJzID0gW107XG59O1xuXG4vKipcbiAqIGNsZWFycyB0aGUgc3RhdGVcbiAqIEBwcml2YXRlXG4gKi9cbkZpbHRlclN0YXRlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpXG57XG4gICAgdGhpcy50YXJnZXQgPSBudWxsO1xuICAgIHRoaXMuZmlsdGVycyA9IG51bGw7XG4gICAgdGhpcy5yZW5kZXJUZXh0dXJlID0gbnVsbDtcbn07XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIHRoZSBmaWx0ZXJzLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICogQGV4dGVuZHMgUElYSS5TeXN0ZW1cbiAqL1xudmFyIEZpbHRlclN5c3RlbSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN5c3RlbSkge1xuICAgIGZ1bmN0aW9uIEZpbHRlclN5c3RlbShyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIFN5c3RlbS5jYWxsKHRoaXMsIHJlbmRlcmVyKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTGlzdCBvZiBmaWx0ZXJzIGZvciB0aGUgRmlsdGVyU3lzdGVtXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdFtdfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVmYXVsdEZpbHRlclN0YWNrID0gW3t9XTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogc3RvcmVzIGEgYnVuY2ggb2YgUE8yIHRleHR1cmVzIHVzZWQgZm9yIGZpbHRlcmluZ1xuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRleHR1cmVQb29sID0gbmV3IFJlbmRlclRleHR1cmVQb29sKCk7XG5cbiAgICAgICAgdGhpcy50ZXh0dXJlUG9vbC5zZXRTY3JlZW5TaXplKHJlbmRlcmVyLnZpZXcpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIHBvb2wgZm9yIHN0b3JpbmcgZmlsdGVyIHN0YXRlcywgc2F2ZSB1cyBjcmVhdGluZyBuZXcgb25lcyBlYWNoIHRpY2tcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0W119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXRlUG9vbCA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHZlcnkgc2ltcGxlIGdlb21ldHJ5IHVzZWQgd2hlbiBkcmF3aW5nIGEgZmlsdGVyIGVmZmVjdCB0byB0aGUgc2NyZWVuXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUXVhZH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucXVhZCA9IG5ldyBRdWFkKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFF1YWQgVVZzXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUXVhZFV2fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5xdWFkVXYgPSBuZXcgUXVhZFV2KCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlbXBvcmFyeSByZWN0IGZvciBtYXRoc1xuICAgICAgICAgKiBAdHlwZSB7UElYSS5SZWN0YW5nbGV9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRlbXBSZWN0ID0gbmV3IFJlY3RhbmdsZSgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBY3RpdmUgc3RhdGVcbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hY3RpdmVTdGF0ZSA9IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHVuaWZvcm0gZ3JvdXAgaXMgYXR0YWNoZWQgdG8gZmlsdGVyIHVuaWZvcm1zIHdoZW4gdXNlZFxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlVuaWZvcm1Hcm91cH1cbiAgICAgICAgICogQHByb3BlcnR5IHtQSVhJLlJlY3RhbmdsZX0gb3V0cHV0RnJhbWVcbiAgICAgICAgICogQHByb3BlcnR5IHtGbG9hdDMyQXJyYXl9IGlucHV0U2l6ZVxuICAgICAgICAgKiBAcHJvcGVydHkge0Zsb2F0MzJBcnJheX0gaW5wdXRQaXhlbFxuICAgICAgICAgKiBAcHJvcGVydHkge0Zsb2F0MzJBcnJheX0gaW5wdXRDbGFtcFxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcmVzb2x1dGlvblxuICAgICAgICAgKiBAcHJvcGVydHkge0Zsb2F0MzJBcnJheX0gZmlsdGVyQXJlYVxuICAgICAgICAgKiBAcHJvcGVydHkge0Zsb2FkMzJBcnJheX0gZmlsdGVyQ2xhbXBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2xvYmFsVW5pZm9ybXMgPSBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgICAgICAgIG91dHB1dEZyYW1lOiB0aGlzLnRlbXBSZWN0LFxuICAgICAgICAgICAgaW5wdXRTaXplOiBuZXcgRmxvYXQzMkFycmF5KDQpLFxuICAgICAgICAgICAgaW5wdXRQaXhlbDogbmV3IEZsb2F0MzJBcnJheSg0KSxcbiAgICAgICAgICAgIGlucHV0Q2xhbXA6IG5ldyBGbG9hdDMyQXJyYXkoNCksXG4gICAgICAgICAgICByZXNvbHV0aW9uOiAxLFxuXG4gICAgICAgICAgICAvLyBsZWdhY3kgdmFyaWFibGVzXG4gICAgICAgICAgICBmaWx0ZXJBcmVhOiBuZXcgRmxvYXQzMkFycmF5KDQpLFxuICAgICAgICAgICAgZmlsdGVyQ2xhbXA6IG5ldyBGbG9hdDMyQXJyYXkoNCksXG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHRoaXMuX3BpeGVsc1dpZHRoID0gcmVuZGVyZXIudmlldy53aWR0aDtcbiAgICAgICAgdGhpcy5fcGl4ZWxzSGVpZ2h0ID0gcmVuZGVyZXIudmlldy5oZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBGaWx0ZXJTeXN0ZW0uX19wcm90b19fID0gU3lzdGVtO1xuICAgIEZpbHRlclN5c3RlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTeXN0ZW0gJiYgU3lzdGVtLnByb3RvdHlwZSApO1xuICAgIEZpbHRlclN5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGaWx0ZXJTeXN0ZW07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IGZpbHRlciB0byB0aGUgU3lzdGVtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2YgdGhlIGZpbHRlciB0byByZW5kZXIuXG4gICAgICogQHBhcmFtIHtQSVhJLkZpbHRlcltdfSBmaWx0ZXJzIC0gVGhlIGZpbHRlcnMgdG8gYXBwbHkuXG4gICAgICovXG4gICAgRmlsdGVyU3lzdGVtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAodGFyZ2V0LCBmaWx0ZXJzKVxuICAgIHtcbiAgICAgICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcbiAgICAgICAgdmFyIGZpbHRlclN0YWNrID0gdGhpcy5kZWZhdWx0RmlsdGVyU3RhY2s7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVQb29sLnBvcCgpIHx8IG5ldyBGaWx0ZXJTdGF0ZSgpO1xuXG4gICAgICAgIHZhciByZXNvbHV0aW9uID0gZmlsdGVyc1swXS5yZXNvbHV0aW9uO1xuICAgICAgICB2YXIgcGFkZGluZyA9IGZpbHRlcnNbMF0ucGFkZGluZztcbiAgICAgICAgdmFyIGF1dG9GaXQgPSBmaWx0ZXJzWzBdLmF1dG9GaXQ7XG4gICAgICAgIHZhciBsZWdhY3kgPSBmaWx0ZXJzWzBdLmxlZ2FjeTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBmaWx0ZXIgPSAgZmlsdGVyc1tpXTtcblxuICAgICAgICAgICAgLy8gbGV0cyB1c2UgdGhlIGxvd2VzdCByZXNvbHV0aW9uLi5cbiAgICAgICAgICAgIHJlc29sdXRpb24gPSBNYXRoLm1pbihyZXNvbHV0aW9uLCBmaWx0ZXIucmVzb2x1dGlvbik7XG4gICAgICAgICAgICAvLyBhbmQgdGhlIGxhcmdlc3QgYW1vdW50IG9mIHBhZGRpbmchXG4gICAgICAgICAgICBwYWRkaW5nID0gTWF0aC5tYXgocGFkZGluZywgZmlsdGVyLnBhZGRpbmcpO1xuICAgICAgICAgICAgLy8gb25seSBhdXRvIGZpdCBpZiBhbGwgZmlsdGVycyBhcmUgYXV0b2ZpdFxuICAgICAgICAgICAgYXV0b0ZpdCA9IGF1dG9GaXQgfHwgZmlsdGVyLmF1dG9GaXQ7XG5cbiAgICAgICAgICAgIGxlZ2FjeSA9IGxlZ2FjeSB8fCBmaWx0ZXIubGVnYWN5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbHRlclN0YWNrLmxlbmd0aCA9PT0gMSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0RmlsdGVyU3RhY2tbMF0ucmVuZGVyVGV4dHVyZSA9IHJlbmRlcmVyLnJlbmRlclRleHR1cmUuY3VycmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpbHRlclN0YWNrLnB1c2goc3RhdGUpO1xuXG4gICAgICAgIHN0YXRlLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuXG4gICAgICAgIHN0YXRlLmxlZ2FjeSA9IGxlZ2FjeTtcblxuICAgICAgICBzdGF0ZS50YXJnZXQgPSB0YXJnZXQ7XG5cbiAgICAgICAgc3RhdGUuc291cmNlRnJhbWUuY29weUZyb20odGFyZ2V0LmZpbHRlckFyZWEgfHwgdGFyZ2V0LmdldEJvdW5kcyh0cnVlKSk7XG5cbiAgICAgICAgc3RhdGUuc291cmNlRnJhbWUucGFkKHBhZGRpbmcpO1xuICAgICAgICBpZiAoYXV0b0ZpdClcbiAgICAgICAge1xuICAgICAgICAgICAgc3RhdGUuc291cmNlRnJhbWUuZml0KHRoaXMucmVuZGVyZXIucmVuZGVyVGV4dHVyZS5zb3VyY2VGcmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByb3VuZCB0byB3aG9sZSBudW1iZXIgYmFzZWQgb24gcmVzb2x1dGlvblxuICAgICAgICBzdGF0ZS5zb3VyY2VGcmFtZS5jZWlsKHJlc29sdXRpb24pO1xuXG4gICAgICAgIHN0YXRlLnJlbmRlclRleHR1cmUgPSB0aGlzLmdldE9wdGltYWxGaWx0ZXJUZXh0dXJlKHN0YXRlLnNvdXJjZUZyYW1lLndpZHRoLCBzdGF0ZS5zb3VyY2VGcmFtZS5oZWlnaHQsIHJlc29sdXRpb24pO1xuICAgICAgICBzdGF0ZS5maWx0ZXJzID0gZmlsdGVycztcblxuICAgICAgICBzdGF0ZS5kZXN0aW5hdGlvbkZyYW1lLndpZHRoID0gc3RhdGUucmVuZGVyVGV4dHVyZS53aWR0aDtcbiAgICAgICAgc3RhdGUuZGVzdGluYXRpb25GcmFtZS5oZWlnaHQgPSBzdGF0ZS5yZW5kZXJUZXh0dXJlLmhlaWdodDtcblxuICAgICAgICBzdGF0ZS5yZW5kZXJUZXh0dXJlLmZpbHRlckZyYW1lID0gc3RhdGUuc291cmNlRnJhbWU7XG5cbiAgICAgICAgcmVuZGVyZXIucmVuZGVyVGV4dHVyZS5iaW5kKHN0YXRlLnJlbmRlclRleHR1cmUsIHN0YXRlLnNvdXJjZUZyYW1lKTsvLyAvLCBzdGF0ZS5kZXN0aW5hdGlvbkZyYW1lKTtcbiAgICAgICAgcmVuZGVyZXIucmVuZGVyVGV4dHVyZS5jbGVhcigpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQb3BzIG9mZiB0aGUgZmlsdGVyIGFuZCBhcHBsaWVzIGl0LlxuICAgICAqXG4gICAgICovXG4gICAgRmlsdGVyU3lzdGVtLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiBwb3AgKClcbiAgICB7XG4gICAgICAgIHZhciBmaWx0ZXJTdGFjayA9IHRoaXMuZGVmYXVsdEZpbHRlclN0YWNrO1xuICAgICAgICB2YXIgc3RhdGUgPSBmaWx0ZXJTdGFjay5wb3AoKTtcbiAgICAgICAgdmFyIGZpbHRlcnMgPSBzdGF0ZS5maWx0ZXJzO1xuXG4gICAgICAgIHRoaXMuYWN0aXZlU3RhdGUgPSBzdGF0ZTtcblxuICAgICAgICB2YXIgZ2xvYmFsVW5pZm9ybXMgPSB0aGlzLmdsb2JhbFVuaWZvcm1zLnVuaWZvcm1zO1xuXG4gICAgICAgIGdsb2JhbFVuaWZvcm1zLm91dHB1dEZyYW1lID0gc3RhdGUuc291cmNlRnJhbWU7XG4gICAgICAgIGdsb2JhbFVuaWZvcm1zLnJlc29sdXRpb24gPSBzdGF0ZS5yZXNvbHV0aW9uO1xuXG4gICAgICAgIHZhciBpbnB1dFNpemUgPSBnbG9iYWxVbmlmb3Jtcy5pbnB1dFNpemU7XG4gICAgICAgIHZhciBpbnB1dFBpeGVsID0gZ2xvYmFsVW5pZm9ybXMuaW5wdXRQaXhlbDtcbiAgICAgICAgdmFyIGlucHV0Q2xhbXAgPSBnbG9iYWxVbmlmb3Jtcy5pbnB1dENsYW1wO1xuXG4gICAgICAgIGlucHV0U2l6ZVswXSA9IHN0YXRlLmRlc3RpbmF0aW9uRnJhbWUud2lkdGg7XG4gICAgICAgIGlucHV0U2l6ZVsxXSA9IHN0YXRlLmRlc3RpbmF0aW9uRnJhbWUuaGVpZ2h0O1xuICAgICAgICBpbnB1dFNpemVbMl0gPSAxLjAgLyBpbnB1dFNpemVbMF07XG4gICAgICAgIGlucHV0U2l6ZVszXSA9IDEuMCAvIGlucHV0U2l6ZVsxXTtcblxuICAgICAgICBpbnB1dFBpeGVsWzBdID0gaW5wdXRTaXplWzBdICogc3RhdGUucmVzb2x1dGlvbjtcbiAgICAgICAgaW5wdXRQaXhlbFsxXSA9IGlucHV0U2l6ZVsxXSAqIHN0YXRlLnJlc29sdXRpb247XG4gICAgICAgIGlucHV0UGl4ZWxbMl0gPSAxLjAgLyBpbnB1dFBpeGVsWzBdO1xuICAgICAgICBpbnB1dFBpeGVsWzNdID0gMS4wIC8gaW5wdXRQaXhlbFsxXTtcblxuICAgICAgICBpbnB1dENsYW1wWzBdID0gMC41ICogaW5wdXRQaXhlbFsyXTtcbiAgICAgICAgaW5wdXRDbGFtcFsxXSA9IDAuNSAqIGlucHV0UGl4ZWxbM107XG4gICAgICAgIGlucHV0Q2xhbXBbMl0gPSAoc3RhdGUuc291cmNlRnJhbWUud2lkdGggKiBpbnB1dFNpemVbMl0pIC0gKDAuNSAqIGlucHV0UGl4ZWxbMl0pO1xuICAgICAgICBpbnB1dENsYW1wWzNdID0gKHN0YXRlLnNvdXJjZUZyYW1lLmhlaWdodCAqIGlucHV0U2l6ZVszXSkgLSAoMC41ICogaW5wdXRQaXhlbFszXSk7XG5cbiAgICAgICAgLy8gb25seSB1cGRhdGUgdGhlIHJlY3QgaWYgaXRzIGxlZ2FjeS4uXG4gICAgICAgIGlmIChzdGF0ZS5sZWdhY3kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJBcmVhID0gZ2xvYmFsVW5pZm9ybXMuZmlsdGVyQXJlYTtcblxuICAgICAgICAgICAgZmlsdGVyQXJlYVswXSA9IHN0YXRlLmRlc3RpbmF0aW9uRnJhbWUud2lkdGg7XG4gICAgICAgICAgICBmaWx0ZXJBcmVhWzFdID0gc3RhdGUuZGVzdGluYXRpb25GcmFtZS5oZWlnaHQ7XG4gICAgICAgICAgICBmaWx0ZXJBcmVhWzJdID0gc3RhdGUuc291cmNlRnJhbWUueDtcbiAgICAgICAgICAgIGZpbHRlckFyZWFbM10gPSBzdGF0ZS5zb3VyY2VGcmFtZS55O1xuXG4gICAgICAgICAgICBnbG9iYWxVbmlmb3Jtcy5maWx0ZXJDbGFtcCA9IGdsb2JhbFVuaWZvcm1zLmlucHV0Q2xhbXA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdsb2JhbFVuaWZvcm1zLnVwZGF0ZSgpO1xuXG4gICAgICAgIHZhciBsYXN0U3RhdGUgPSBmaWx0ZXJTdGFja1tmaWx0ZXJTdGFjay5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAoZmlsdGVycy5sZW5ndGggPT09IDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZpbHRlcnNbMF0uYXBwbHkodGhpcywgc3RhdGUucmVuZGVyVGV4dHVyZSwgbGFzdFN0YXRlLnJlbmRlclRleHR1cmUsIGZhbHNlLCBzdGF0ZSk7XG5cbiAgICAgICAgICAgIHRoaXMucmV0dXJuRmlsdGVyVGV4dHVyZShzdGF0ZS5yZW5kZXJUZXh0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBmbGlwID0gc3RhdGUucmVuZGVyVGV4dHVyZTtcbiAgICAgICAgICAgIHZhciBmbG9wID0gdGhpcy5nZXRPcHRpbWFsRmlsdGVyVGV4dHVyZShcbiAgICAgICAgICAgICAgICBmbGlwLndpZHRoLFxuICAgICAgICAgICAgICAgIGZsaXAuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHN0YXRlLnJlc29sdXRpb25cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZsb3AuZmlsdGVyRnJhbWUgPSBmbGlwLmZpbHRlckZyYW1lO1xuXG4gICAgICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aCAtIDE7ICsraSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJzW2ldLmFwcGx5KHRoaXMsIGZsaXAsIGZsb3AsIHRydWUsIHN0YXRlKTtcblxuICAgICAgICAgICAgICAgIHZhciB0ID0gZmxpcDtcblxuICAgICAgICAgICAgICAgIGZsaXAgPSBmbG9wO1xuICAgICAgICAgICAgICAgIGZsb3AgPSB0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmaWx0ZXJzW2ldLmFwcGx5KHRoaXMsIGZsaXAsIGxhc3RTdGF0ZS5yZW5kZXJUZXh0dXJlLCBmYWxzZSwgc3RhdGUpO1xuXG4gICAgICAgICAgICB0aGlzLnJldHVybkZpbHRlclRleHR1cmUoZmxpcCk7XG4gICAgICAgICAgICB0aGlzLnJldHVybkZpbHRlclRleHR1cmUoZmxvcCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5jbGVhcigpO1xuICAgICAgICB0aGlzLnN0YXRlUG9vbC5wdXNoKHN0YXRlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRHJhd3MgYSBmaWx0ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuRmlsdGVyfSBmaWx0ZXIgLSBUaGUgZmlsdGVyIHRvIGRyYXcuXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IGlucHV0IC0gVGhlIGlucHV0IHJlbmRlciB0YXJnZXQuXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IG91dHB1dCAtIFRoZSB0YXJnZXQgdG8gb3V0cHV0IHRvLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xlYXIgLSBTaG91bGQgdGhlIG91dHB1dCBiZSBjbGVhcmVkIGJlZm9yZSByZW5kZXJpbmcgdG8gaXRcbiAgICAgKi9cbiAgICBGaWx0ZXJTeXN0ZW0ucHJvdG90eXBlLmFwcGx5RmlsdGVyID0gZnVuY3Rpb24gYXBwbHlGaWx0ZXIgKGZpbHRlciwgaW5wdXQsIG91dHB1dCwgY2xlYXIpXG4gICAge1xuICAgICAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXG4gICAgICAgIHJlbmRlcmVyLnJlbmRlclRleHR1cmUuYmluZChvdXRwdXQsIG91dHB1dCA/IG91dHB1dC5maWx0ZXJGcmFtZSA6IG51bGwpO1xuXG4gICAgICAgIGlmIChjbGVhcilcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gZ2wuZGlzYWJsZShnbC5TQ0lTU09SX1RFU1QpO1xuICAgICAgICAgICAgcmVuZGVyZXIucmVuZGVyVGV4dHVyZS5jbGVhcigpO1xuICAgICAgICAgICAgLy8gZ2wuZW5hYmxlKGdsLlNDSVNTT1JfVEVTVCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgdGhlIHVuaWZvcm1zLi5cbiAgICAgICAgZmlsdGVyLnVuaWZvcm1zLnVTYW1wbGVyID0gaW5wdXQ7XG4gICAgICAgIGZpbHRlci51bmlmb3Jtcy5maWx0ZXJHbG9iYWxzID0gdGhpcy5nbG9iYWxVbmlmb3JtcztcblxuICAgICAgICAvLyBUT0RPIG1ha2UgaXQgc28gdGhhdCB0aGUgb3JkZXIgb2YgdGhpcyBkb2VzIG5vdCBtYXR0ZXIuLlxuICAgICAgICAvLyBiZWNhdXNlIGl0IGRvZXMgYXQgdGhlIG1vbWVudCBjb3Mgb2YgZ2xvYmFsIHVuaWZvcm1zLlxuICAgICAgICAvLyB0aGV5IG5lZWQgdG8gZ2V0IHJlc3luY2VkXG5cbiAgICAgICAgcmVuZGVyZXIuc3RhdGUuc2V0KGZpbHRlci5zdGF0ZSk7XG4gICAgICAgIHJlbmRlcmVyLnNoYWRlci5iaW5kKGZpbHRlcik7XG5cbiAgICAgICAgaWYgKGZpbHRlci5sZWdhY3kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucXVhZFV2Lm1hcChpbnB1dC5fZnJhbWUsIGlucHV0LmZpbHRlckZyYW1lKTtcblxuICAgICAgICAgICAgcmVuZGVyZXIuZ2VvbWV0cnkuYmluZCh0aGlzLnF1YWRVdik7XG4gICAgICAgICAgICByZW5kZXJlci5nZW9tZXRyeS5kcmF3KERSQVdfTU9ERVMuVFJJQU5HTEVTKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlbmRlcmVyLmdlb21ldHJ5LmJpbmQodGhpcy5xdWFkKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLmdlb21ldHJ5LmRyYXcoRFJBV19NT0RFUy5UUklBTkdMRV9TVFJJUCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgX2lucHV0IG5vcm1hbGl6ZWQgY29vcmRpbmF0ZXNfIHRvIHRoaXMgbWF0cml4IHRvIGdldCBfc3ByaXRlIHRleHR1cmUgbm9ybWFsaXplZCBjb29yZGluYXRlc18uXG4gICAgICpcbiAgICAgKiBVc2UgYG91dHB1dE1hdHJpeCAqIHZUZXh0dXJlQ29vcmRgIGluIHRoZSBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuTWF0cml4fSBvdXRwdXRNYXRyaXggLSBUaGUgbWF0cml4IHRvIG91dHB1dCB0by5cbiAgICAgKiBAcGFyYW0ge1BJWEkuU3ByaXRlfSBzcHJpdGUgLSBUaGUgc3ByaXRlIHRvIG1hcCB0by5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhlIG1hcHBlZCBtYXRyaXguXG4gICAgICovXG4gICAgRmlsdGVyU3lzdGVtLnByb3RvdHlwZS5jYWxjdWxhdGVTcHJpdGVNYXRyaXggPSBmdW5jdGlvbiBjYWxjdWxhdGVTcHJpdGVNYXRyaXggKG91dHB1dE1hdHJpeCwgc3ByaXRlKVxuICAgIHtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXMuYWN0aXZlU3RhdGU7XG4gICAgICAgIHZhciBzb3VyY2VGcmFtZSA9IHJlZi5zb3VyY2VGcmFtZTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uRnJhbWUgPSByZWYuZGVzdGluYXRpb25GcmFtZTtcbiAgICAgICAgdmFyIHJlZiQxID0gc3ByaXRlLl90ZXh0dXJlO1xuICAgICAgICB2YXIgb3JpZyA9IHJlZiQxLm9yaWc7XG4gICAgICAgIHZhciBtYXBwZWRNYXRyaXggPSBvdXRwdXRNYXRyaXguc2V0KGRlc3RpbmF0aW9uRnJhbWUud2lkdGgsIDAsIDAsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkZyYW1lLmhlaWdodCwgc291cmNlRnJhbWUueCwgc291cmNlRnJhbWUueSk7XG4gICAgICAgIHZhciB3b3JsZFRyYW5zZm9ybSA9IHNwcml0ZS53b3JsZFRyYW5zZm9ybS5jb3B5VG8oTWF0cml4LlRFTVBfTUFUUklYKTtcblxuICAgICAgICB3b3JsZFRyYW5zZm9ybS5pbnZlcnQoKTtcbiAgICAgICAgbWFwcGVkTWF0cml4LnByZXBlbmQod29ybGRUcmFuc2Zvcm0pO1xuICAgICAgICBtYXBwZWRNYXRyaXguc2NhbGUoMS4wIC8gb3JpZy53aWR0aCwgMS4wIC8gb3JpZy5oZWlnaHQpO1xuICAgICAgICBtYXBwZWRNYXRyaXgudHJhbnNsYXRlKHNwcml0ZS5hbmNob3IueCwgc3ByaXRlLmFuY2hvci55KTtcblxuICAgICAgICByZXR1cm4gbWFwcGVkTWF0cml4O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGlzIEZpbHRlciBTeXN0ZW0uXG4gICAgICovXG4gICAgRmlsdGVyU3lzdGVtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxuICAgIHtcbiAgICAgICAgLy8gVGhvc2UgdGV4dHVyZXMgaGFzIHRvIGJlIGRlc3Ryb3llZCBieSBSZW5kZXJUZXh0dXJlU3lzdGVtIG9yIEZyYW1lYnVmZmVyU3lzdGVtXG4gICAgICAgIHRoaXMudGV4dHVyZVBvb2wuY2xlYXIoZmFsc2UpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgUG93ZXItb2YtVHdvIHJlbmRlciB0ZXh0dXJlIG9yIGZ1bGxTY3JlZW4gdGV4dHVyZVxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5XaWR0aCAtIFRoZSBtaW5pbXVtIHdpZHRoIG9mIHRoZSByZW5kZXIgdGV4dHVyZSBpbiByZWFsIHBpeGVscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluSGVpZ2h0IC0gVGhlIG1pbmltdW0gaGVpZ2h0IG9mIHRoZSByZW5kZXIgdGV4dHVyZSBpbiByZWFsIHBpeGVscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Jlc29sdXRpb249MV0gLSBUaGUgcmVzb2x1dGlvbiBvZiB0aGUgcmVuZGVyIHRleHR1cmUuXG4gICAgICogQHJldHVybiB7UElYSS5SZW5kZXJUZXh0dXJlfSBUaGUgbmV3IHJlbmRlciB0ZXh0dXJlLlxuICAgICAqL1xuICAgIEZpbHRlclN5c3RlbS5wcm90b3R5cGUuZ2V0T3B0aW1hbEZpbHRlclRleHR1cmUgPSBmdW5jdGlvbiBnZXRPcHRpbWFsRmlsdGVyVGV4dHVyZSAobWluV2lkdGgsIG1pbkhlaWdodCwgcmVzb2x1dGlvbilcbiAgICB7XG4gICAgICAgIGlmICggcmVzb2x1dGlvbiA9PT0gdm9pZCAwICkgcmVzb2x1dGlvbiA9IDE7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dHVyZVBvb2wuZ2V0T3B0aW1hbFRleHR1cmUobWluV2lkdGgsIG1pbkhlaWdodCwgcmVzb2x1dGlvbik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgZXh0cmEgcmVuZGVyIHRleHR1cmUgdG8gdXNlIGluc2lkZSBjdXJyZW50IGZpbHRlclxuICAgICAqIFRvIGJlIGNvbXBsaWFudCB3aXRoIG9sZGVyIGZpbHRlcnMsIHlvdSBjYW4gdXNlIHBhcmFtcyBpbiBhbnkgb3JkZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSBbaW5wdXRdIHJlbmRlclRleHR1cmUgZnJvbSB3aGljaCBzaXplIGFuZCByZXNvbHV0aW9uIHdpbGwgYmUgY29waWVkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyZXNvbHV0aW9uXSBvdmVycmlkZSByZXNvbHV0aW9uIG9mIHRoZSByZW5kZXJUZXh0dXJlXG4gICAgICogQHJldHVybnMge1BJWEkuUmVuZGVyVGV4dHVyZX1cbiAgICAgKi9cbiAgICBGaWx0ZXJTeXN0ZW0ucHJvdG90eXBlLmdldEZpbHRlclRleHR1cmUgPSBmdW5jdGlvbiBnZXRGaWx0ZXJUZXh0dXJlIChpbnB1dCwgcmVzb2x1dGlvbilcbiAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgc3dhcCA9IGlucHV0O1xuXG4gICAgICAgICAgICBpbnB1dCA9IHJlc29sdXRpb247XG4gICAgICAgICAgICByZXNvbHV0aW9uID0gc3dhcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gaW5wdXQgfHwgdGhpcy5hY3RpdmVTdGF0ZS5yZW5kZXJUZXh0dXJlO1xuXG4gICAgICAgIHZhciBmaWx0ZXJUZXh0dXJlID0gdGhpcy50ZXh0dXJlUG9vbC5nZXRPcHRpbWFsVGV4dHVyZShpbnB1dC53aWR0aCwgaW5wdXQuaGVpZ2h0LCByZXNvbHV0aW9uIHx8IGlucHV0LnJlc29sdXRpb24pO1xuXG4gICAgICAgIGZpbHRlclRleHR1cmUuZmlsdGVyRnJhbWUgPSBpbnB1dC5maWx0ZXJGcmFtZTtcblxuICAgICAgICByZXR1cm4gZmlsdGVyVGV4dHVyZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRnJlZXMgYSByZW5kZXIgdGV4dHVyZSBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gcmVuZGVyVGV4dHVyZSAtIFRoZSByZW5kZXJUYXJnZXQgdG8gZnJlZVxuICAgICAqL1xuICAgIEZpbHRlclN5c3RlbS5wcm90b3R5cGUucmV0dXJuRmlsdGVyVGV4dHVyZSA9IGZ1bmN0aW9uIHJldHVybkZpbHRlclRleHR1cmUgKHJlbmRlclRleHR1cmUpXG4gICAge1xuICAgICAgICB0aGlzLnRleHR1cmVQb29sLnJldHVyblRleHR1cmUocmVuZGVyVGV4dHVyZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVtcHRpZXMgdGhlIHRleHR1cmUgcG9vbC5cbiAgICAgKi9cbiAgICBGaWx0ZXJTeXN0ZW0ucHJvdG90eXBlLmVtcHR5UG9vbCA9IGZ1bmN0aW9uIGVtcHR5UG9vbCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy50ZXh0dXJlUG9vbC5jbGVhcih0cnVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogY2FsbHMgYHRleHR1cmVQb29sLnJlc2l6ZSgpYCwgYWZmZWN0cyBmdWxsU2NyZWVuIHJlbmRlclRleHR1cmVzXG4gICAgICovXG4gICAgRmlsdGVyU3lzdGVtLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiByZXNpemUgKClcbiAgICB7XG4gICAgICAgIHRoaXMudGV4dHVyZVBvb2wuc2V0U2NyZWVuU2l6ZSh0aGlzLnJlbmRlcmVyLnZpZXcpO1xuICAgIH07XG5cbiAgICByZXR1cm4gRmlsdGVyU3lzdGVtO1xufShTeXN0ZW0pKTtcblxuLyoqXG4gKiBCYXNlIGZvciBhIGNvbW1vbiBvYmplY3QgcmVuZGVyZXIgdGhhdCBjYW4gYmUgdXNlZCBhcyBhXG4gKiBzeXN0ZW0gcmVuZGVyZXIgcGx1Z2luLlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5TeXN0ZW1cbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBPYmplY3RSZW5kZXJlciA9IGZ1bmN0aW9uIE9iamVjdFJlbmRlcmVyKHJlbmRlcmVyKVxue1xuICAgIC8qKlxuICAgICAqIFRoZSByZW5kZXJlciB0aGlzIG1hbmFnZXIgd29ya3MgZm9yLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5SZW5kZXJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG59O1xuXG4vKipcbiAqIFN0dWIgbWV0aG9kIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gZW1wdHkgdGhlIGN1cnJlbnRcbiAqIGJhdGNoIGJ5IHJlbmRlcmluZyBvYmplY3RzIG5vdy5cbiAqL1xuT2JqZWN0UmVuZGVyZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gZmx1c2ggKClcbntcbiAgICAvLyBmbHVzaCFcbn07XG5cbi8qKlxuICogR2VuZXJpYyBkZXN0cnVjdGlvbiBtZXRob2QgdGhhdCBmcmVlcyBhbGwgcmVzb3VyY2VzLiBUaGlzXG4gKiBzaG91bGQgYmUgY2FsbGVkIGJ5IHN1YmNsYXNzZXMuXG4gKi9cbk9iamVjdFJlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxue1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xufTtcblxuLyoqXG4gKiBTdHViIG1ldGhvZCB0aGF0IGluaXRpYWxpemVzIGFueSBzdGF0ZSByZXF1aXJlZCBiZWZvcmVcbiAqIHJlbmRlcmluZyBzdGFydHMuIEl0IGlzIGRpZmZlcmVudCBmcm9tIHRoZSBgcHJlcmVuZGVyYFxuICogc2lnbmFsLCB3aGljaCBvY2N1cnMgZXZlcnkgZnJhbWUsIGluIHRoYXQgaXQgaXMgY2FsbGVkXG4gKiB3aGVuZXZlciBhbiBvYmplY3QgcmVxdWVzdHMgX3RoaXNfIHJlbmRlcmVyIHNwZWNpZmljYWxseS5cbiAqL1xuT2JqZWN0UmVuZGVyZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQgKClcbntcbiAgICAvLyBzZXQgdGhlIHNoYWRlci4uXG59O1xuXG4vKipcbiAqIFN0b3BzIHRoZSByZW5kZXJlci4gSXQgc2hvdWxkIGZyZWUgdXAgYW55IHN0YXRlIGFuZFxuICogYmVjb21lIGRvcm1hbnQuXG4gKi9cbk9iamVjdFJlbmRlcmVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gc3RvcCAoKVxue1xuICAgIHRoaXMuZmx1c2goKTtcbn07XG5cbi8qKlxuICogS2VlcHMgdGhlIG9iamVjdCB0byByZW5kZXIuIEl0IGRvZXNuJ3QgaGF2ZSB0byBiZVxuICogcmVuZGVyZWQgaW1tZWRpYXRlbHkuXG4gKlxuICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IG9iamVjdCAtIFRoZSBvYmplY3QgdG8gcmVuZGVyLlxuICovXG5PYmplY3RSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChvYmplY3QpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbntcbiAgICAvLyByZW5kZXIgdGhlIG9iamVjdFxufTtcblxuLyoqXG4gKiBTeXN0ZW0gcGx1Z2luIHRvIHRoZSByZW5kZXJlciB0byBtYW5hZ2UgYmF0Y2hpbmcuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICovXG52YXIgQmF0Y2hTeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBCYXRjaFN5c3RlbShyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIFN5c3RlbS5jYWxsKHRoaXMsIHJlbmRlcmVyKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZW1wdHkgcmVuZGVyZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuT2JqZWN0UmVuZGVyZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVtcHR5UmVuZGVyZXIgPSBuZXcgT2JqZWN0UmVuZGVyZXIocmVuZGVyZXIpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBPYmplY3RSZW5kZXJlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5PYmplY3RSZW5kZXJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3VycmVudFJlbmRlcmVyID0gdGhpcy5lbXB0eVJlbmRlcmVyO1xuICAgIH1cblxuICAgIGlmICggU3lzdGVtICkgQmF0Y2hTeXN0ZW0uX19wcm90b19fID0gU3lzdGVtO1xuICAgIEJhdGNoU3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgQmF0Y2hTeXN0ZW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQmF0Y2hTeXN0ZW07XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBjdXJyZW50IHJlbmRlcmVyIHRvIHRoZSBvbmUgZ2l2ZW4gaW4gcGFyYW1ldGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuT2JqZWN0UmVuZGVyZXJ9IG9iamVjdFJlbmRlcmVyIC0gVGhlIG9iamVjdCByZW5kZXJlciB0byB1c2UuXG4gICAgICovXG4gICAgQmF0Y2hTeXN0ZW0ucHJvdG90eXBlLnNldE9iamVjdFJlbmRlcmVyID0gZnVuY3Rpb24gc2V0T2JqZWN0UmVuZGVyZXIgKG9iamVjdFJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFJlbmRlcmVyID09PSBvYmplY3RSZW5kZXJlcilcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50UmVuZGVyZXIuc3RvcCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRSZW5kZXJlciA9IG9iamVjdFJlbmRlcmVyO1xuXG4gICAgICAgIHRoaXMuY3VycmVudFJlbmRlcmVyLnN0YXJ0KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBpZiB5b3Ugd2lzaCB0byBkbyBzb21lIGN1c3RvbSByZW5kZXJpbmdcbiAgICAgKiBJdCB3aWxsIGJhc2ljYWxseSByZW5kZXIgYW55dGhpbmcgdGhhdCBtYXkgYmUgYmF0Y2hlZCB1cCBzdWNoIGFzIHNwcml0ZXNcbiAgICAgKi9cbiAgICBCYXRjaFN5c3RlbS5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5zZXRPYmplY3RSZW5kZXJlcih0aGlzLmVtcHR5UmVuZGVyZXIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgc3lzdGVtIHRvIGFuIGVtcHR5IHJlbmRlcmVyXG4gICAgICovXG4gICAgQmF0Y2hTeXN0ZW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQgKClcbiAgICB7XG4gICAgICAgIHRoaXMuc2V0T2JqZWN0UmVuZGVyZXIodGhpcy5lbXB0eVJlbmRlcmVyKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJhdGNoU3lzdGVtO1xufShTeXN0ZW0pKTtcblxuLyoqXG4gKiBUaGUgbWF4aW11bSBzdXBwb3J0IGZvciB1c2luZyBXZWJHTC4gSWYgYSBkZXZpY2UgZG9lcyBub3RcbiAqIHN1cHBvcnQgV2ViR0wgdmVyc2lvbiwgZm9yIGluc3RhbmNlIFdlYkdMIDIsIGl0IHdpbGwgc3RpbGxcbiAqIGF0dGVtcHQgdG8gZmFsbGJhY2sgc3VwcG9ydCB0byBXZWJHTCAxLiBJZiB5b3Ugd2FudCB0b1xuICogZXhwbGljaXRseSByZW1vdmUgZmVhdHVyZSBzdXBwb3J0IHRvIHRhcmdldCBhIG1vcmUgc3RhYmxlXG4gKiBiYXNlbGluZSwgcHJlZmVyIGEgbG93ZXIgZW52aXJvbm1lbnQuXG4gKlxuICogRHVlIHRvIHtAbGluayBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05MzQ4MjN8YnVnIGluIGNocm9taXVtfVxuICogd2UgZGlzYWJsZSB3ZWJnbDIgYnkgZGVmYXVsdCBmb3IgYWxsIG5vbi1hcHBsZSBtb2JpbGUgZGV2aWNlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBQUkVGRVJfRU5WXG4gKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0IFBJWEkuRU5WLldFQkdMMlxuICovXG5zZXR0aW5ncy5QUkVGRVJfRU5WID0gaXNNb2JpbGUuYW55ID8gRU5WLldFQkdMIDogRU5WLldFQkdMMjtcblxudmFyIENPTlRFWFRfVUlEID0gMDtcblxuLyoqXG4gKiBTeXN0ZW0gcGx1Z2luIHRvIHRoZSByZW5kZXJlciB0byBtYW5hZ2UgdGhlIGNvbnRleHQuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICovXG52YXIgQ29udGV4dFN5c3RlbSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN5c3RlbSkge1xuICAgIGZ1bmN0aW9uIENvbnRleHRTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVpdGhlciAxIG9yIDIgdG8gcmVmbGVjdCB0aGUgV2ViR0wgdmVyc2lvbiBiZWluZyB1c2VkXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndlYkdMVmVyc2lvbiA9IDE7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4dGVuc2lvbnMgYmVpbmcgdXNlZFxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAcHJvcGVydHkge1dFQkdMX2RyYXdfYnVmZmVyc30gZHJhd0J1ZmZlcnMgLSBXZWJHTCB2MSBleHRlbnNpb25cbiAgICAgICAgICogQHByb3BlcnR5IHtXRUJHTF9kZXB0aF90ZXh0dXJlfSBkZXB0aFRleHR1cmUgLSBXZWJHTCB2MSBleHRlbnNpb25cbiAgICAgICAgICogQHByb3BlcnR5IHtPRVNfdGV4dHVyZV9mbG9hdH0gZmxvYXRUZXh0dXJlIC0gV2ViR0wgdjEgZXh0ZW5zaW9uXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7V0VCR0xfbG9zZV9jb250ZXh0fSBsb3NlQ29udGV4dCAtIFdlYkdMIHYxIGV4dGVuc2lvblxuICAgICAgICAgKiBAcHJvcGVydHkge09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0fSB2ZXJ0ZXhBcnJheU9iamVjdCAtIFdlYkdMIHYxIGV4dGVuc2lvblxuICAgICAgICAgKiBAcHJvcGVydHkge0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY30gYW5pc290cm9waWNGaWx0ZXJpbmcgLSBXZWJHTCB2MSBhbmQgdjIgZXh0ZW5zaW9uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSB7fTtcblxuICAgICAgICAvLyBCaW5kIGZ1bmN0aW9uc1xuICAgICAgICB0aGlzLmhhbmRsZUNvbnRleHRMb3N0ID0gdGhpcy5oYW5kbGVDb250ZXh0TG9zdC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNvbnRleHRSZXN0b3JlZCA9IHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkLmJpbmQodGhpcyk7XG5cbiAgICAgICAgcmVuZGVyZXIudmlldy5hZGRFdmVudExpc3RlbmVyKCd3ZWJnbGNvbnRleHRsb3N0JywgdGhpcy5oYW5kbGVDb250ZXh0TG9zdCwgZmFsc2UpO1xuICAgICAgICByZW5kZXJlci52aWV3LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgdGhpcy5oYW5kbGVDb250ZXh0UmVzdG9yZWQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoIFN5c3RlbSApIENvbnRleHRTeXN0ZW0uX19wcm90b19fID0gU3lzdGVtO1xuICAgIENvbnRleHRTeXN0ZW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3lzdGVtICYmIFN5c3RlbS5wcm90b3R5cGUgKTtcbiAgICBDb250ZXh0U3lzdGVtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnRleHRTeXN0ZW07XG5cbiAgICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBpc0xvc3Q6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAgIC8qKlxuICAgICAqIGB0cnVlYCBpZiB0aGUgY29udGV4dCBpcyBsb3N0XG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuaXNMb3N0LmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gKCF0aGlzLmdsIHx8IHRoaXMuZ2wuaXNDb250ZXh0TG9zdCgpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBjb250ZXh0IGNoYW5nZSBldmVudFxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBuZXcgd2ViZ2wgY29udGV4dFxuICAgICAqL1xuICAgIENvbnRleHRTeXN0ZW0ucHJvdG90eXBlLmNvbnRleHRDaGFuZ2UgPSBmdW5jdGlvbiBjb250ZXh0Q2hhbmdlIChnbClcbiAgICB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5nbCA9IGdsO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLkNPTlRFWFRfVUlEID0gQ09OVEVYVF9VSUQrKztcblxuICAgICAgICAvLyByZXN0b3JlIGEgY29udGV4dCBpZiBpdCB3YXMgcHJldmlvdXNseSBsb3N0XG4gICAgICAgIGlmIChnbC5pc0NvbnRleHRMb3N0KCkgJiYgZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9sb3NlX2NvbnRleHQnKSlcbiAgICAgICAge1xuICAgICAgICAgICAgZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9sb3NlX2NvbnRleHQnKS5yZXN0b3JlQ29udGV4dCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIGNvbnRleHRcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgLSBXZWJHTCBjb250ZXh0XG4gICAgICovXG4gICAgQ29udGV4dFN5c3RlbS5wcm90b3R5cGUuaW5pdEZyb21Db250ZXh0ID0gZnVuY3Rpb24gaW5pdEZyb21Db250ZXh0IChnbClcbiAgICB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy52YWxpZGF0ZUNvbnRleHQoZ2wpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmdsID0gZ2w7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuQ09OVEVYVF9VSUQgPSBDT05URVhUX1VJRCsrO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJ1bm5lcnMuY29udGV4dENoYW5nZS5ydW4oZ2wpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIGZyb20gY29udGV4dCBvcHRpb25zXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTENhbnZhc0VsZW1lbnQvZ2V0Q29udGV4dFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gY29udGV4dCBhdHRyaWJ1dGVzXG4gICAgICovXG4gICAgQ29udGV4dFN5c3RlbS5wcm90b3R5cGUuaW5pdEZyb21PcHRpb25zID0gZnVuY3Rpb24gaW5pdEZyb21PcHRpb25zIChvcHRpb25zKVxuICAgIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5jcmVhdGVDb250ZXh0KHRoaXMucmVuZGVyZXIudmlldywgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5pbml0RnJvbUNvbnRleHQoZ2wpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgY2xhc3MgdG8gY3JlYXRlIGEgV2ViR0wgQ29udGV4dFxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbnZhcyB7SFRNTENhbnZhc0VsZW1lbnR9IHRoZSBjYW52YXMgZWxlbWVudCB0aGF0IHdlIHdpbGwgZ2V0IHRoZSBjb250ZXh0IGZyb21cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7b2JqZWN0fSBBbiBvcHRpb25zIG9iamVjdCB0aGF0IGdldHMgcGFzc2VkIGluIHRvIHRoZSBjYW52YXMgZWxlbWVudCBjb250YWluaW5nIHRoZSBjb250ZXh0IGF0dHJpYnV0ZXNcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9IVE1MQ2FudmFzRWxlbWVudC9nZXRDb250ZXh0XG4gICAgICogQHJldHVybiB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSB0aGUgV2ViR0wgY29udGV4dFxuICAgICAqL1xuICAgIENvbnRleHRTeXN0ZW0ucHJvdG90eXBlLmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVDb250ZXh0IChjYW52YXMsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICB2YXIgZ2w7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLlBSRUZFUl9FTlYgPj0gRU5WLldFQkdMMilcbiAgICAgICAge1xuICAgICAgICAgICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wyJywgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2wpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMud2ViR0xWZXJzaW9uID0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMud2ViR0xWZXJzaW9uID0gMTtcblxuICAgICAgICAgICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBvcHRpb25zKVxuICAgICAgICAgICAgfHwgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICBpZiAoIWdsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGZhaWwsIG5vdCBhYmxlIHRvIGdldCBhIGNvbnRleHRcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFdlYkdMLiBUcnkgdXNpbmcgdGhlIGNhbnZhcyByZW5kZXJlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuXG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9ucygpO1xuXG4gICAgICAgIHJldHVybiBnbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXV0by1wb3B1bGF0ZSB0aGUgZXh0ZW5zaW9uc1xuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIENvbnRleHRTeXN0ZW0ucHJvdG90eXBlLmdldEV4dGVuc2lvbnMgPSBmdW5jdGlvbiBnZXRFeHRlbnNpb25zICgpXG4gICAge1xuICAgICAgICAvLyB0aW1lIHRvIHNldCB1cCBkZWZhdWx0IGV4dGVuc2lvbnMgdGhhdCBQaXhpIHVzZXMuXG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgZ2wgPSByZWYuZ2w7XG5cbiAgICAgICAgaWYgKHRoaXMud2ViR0xWZXJzaW9uID09PSAxKVxuICAgICAgICB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZXh0ZW5zaW9ucywge1xuICAgICAgICAgICAgICAgIGRyYXdCdWZmZXJzOiBnbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpLFxuICAgICAgICAgICAgICAgIGRlcHRoVGV4dHVyZTogZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJLSVRfV0VCR0xfZGVwdGhfdGV4dHVyZScpLFxuICAgICAgICAgICAgICAgIGxvc2VDb250ZXh0OiBnbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2xvc2VfY29udGV4dCcpLFxuICAgICAgICAgICAgICAgIHZlcnRleEFycmF5T2JqZWN0OiBnbC5nZXRFeHRlbnNpb24oJ09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JylcbiAgICAgICAgICAgICAgICAgICAgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCdNT1pfT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnKVxuICAgICAgICAgICAgICAgICAgICB8fCBnbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9PRVNfdmVydGV4X2FycmF5X29iamVjdCcpLFxuICAgICAgICAgICAgICAgIGFuaXNvdHJvcGljRmlsdGVyaW5nOiBnbC5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpLFxuICAgICAgICAgICAgICAgIHVpbnQzMkVsZW1lbnRJbmRleDogZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfZWxlbWVudF9pbmRleF91aW50JyksXG4gICAgICAgICAgICAgICAgLy8gRmxvYXRzIGFuZCBoYWxmLWZsb2F0c1xuICAgICAgICAgICAgICAgIGZsb2F0VGV4dHVyZTogZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9mbG9hdCcpLFxuICAgICAgICAgICAgICAgIGZsb2F0VGV4dHVyZUxpbmVhcjogZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInKSxcbiAgICAgICAgICAgICAgICB0ZXh0dXJlSGFsZkZsb2F0OiBnbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnKSxcbiAgICAgICAgICAgICAgICB0ZXh0dXJlSGFsZkZsb2F0TGluZWFyOiBnbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLndlYkdMVmVyc2lvbiA9PT0gMilcbiAgICAgICAge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmV4dGVuc2lvbnMsIHtcbiAgICAgICAgICAgICAgICBhbmlzb3Ryb3BpY0ZpbHRlcmluZzogZ2wuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSxcbiAgICAgICAgICAgICAgICAvLyBGbG9hdHMgYW5kIGhhbGYtZmxvYXRzXG4gICAgICAgICAgICAgICAgY29sb3JCdWZmZXJGbG9hdDogZ2wuZ2V0RXh0ZW5zaW9uKCdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyksXG4gICAgICAgICAgICAgICAgZmxvYXRUZXh0dXJlTGluZWFyOiBnbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBhIGxvc3Qgd2ViZ2wgY29udGV4dFxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7V2ViR0xDb250ZXh0RXZlbnR9IGV2ZW50IC0gVGhlIGNvbnRleHQgbG9zdCBldmVudC5cbiAgICAgKi9cbiAgICBDb250ZXh0U3lzdGVtLnByb3RvdHlwZS5oYW5kbGVDb250ZXh0TG9zdCA9IGZ1bmN0aW9uIGhhbmRsZUNvbnRleHRMb3N0IChldmVudClcbiAgICB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYSByZXN0b3JlZCB3ZWJnbCBjb250ZXh0XG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgQ29udGV4dFN5c3RlbS5wcm90b3R5cGUuaGFuZGxlQ29udGV4dFJlc3RvcmVkID0gZnVuY3Rpb24gaGFuZGxlQ29udGV4dFJlc3RvcmVkICgpXG4gICAge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJ1bm5lcnMuY29udGV4dENoYW5nZS5ydW4odGhpcy5nbCk7XG4gICAgfTtcblxuICAgIENvbnRleHRTeXN0ZW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG4gICAge1xuICAgICAgICB2YXIgdmlldyA9IHRoaXMucmVuZGVyZXIudmlldztcblxuICAgICAgICAvLyByZW1vdmUgbGlzdGVuZXJzXG4gICAgICAgIHZpZXcucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2ViZ2xjb250ZXh0bG9zdCcsIHRoaXMuaGFuZGxlQ29udGV4dExvc3QpO1xuICAgICAgICB2aWV3LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgdGhpcy5oYW5kbGVDb250ZXh0UmVzdG9yZWQpO1xuXG4gICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShudWxsKTtcblxuICAgICAgICBpZiAodGhpcy5leHRlbnNpb25zLmxvc2VDb250ZXh0KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmV4dGVuc2lvbnMubG9zZUNvbnRleHQubG9zZUNvbnRleHQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIHBvc3QtcmVuZGVyIHJ1bm5lciBldmVudFxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIENvbnRleHRTeXN0ZW0ucHJvdG90eXBlLnBvc3RyZW5kZXIgPSBmdW5jdGlvbiBwb3N0cmVuZGVyICgpXG4gICAge1xuICAgICAgICB0aGlzLmdsLmZsdXNoKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGNvbnRleHRcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgLSBSZW5kZXIgY29udGV4dFxuICAgICAqL1xuICAgIENvbnRleHRTeXN0ZW0ucHJvdG90eXBlLnZhbGlkYXRlQ29udGV4dCA9IGZ1bmN0aW9uIHZhbGlkYXRlQ29udGV4dCAoZ2wpXG4gICAge1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7XG5cbiAgICAgICAgLy8gdGhpcyBpcyBnb2luZyB0byBiZSBmYWlybHkgc2ltcGxlIGZvciBub3cuLiBidXQgYXQgbGVhc3Qgd2UgaGF2ZSByb29tIHRvIGdyb3chXG4gICAgICAgIGlmICghYXR0cmlidXRlcy5zdGVuY2lsKVxuICAgICAgICB7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgICAgICAgIGNvbnNvbGUud2FybignUHJvdmlkZWQgV2ViR0wgY29udGV4dCBkb2VzIG5vdCBoYXZlIGEgc3RlbmNpbCBidWZmZXIsIG1hc2tzIG1heSBub3QgcmVuZGVyIGNvcnJlY3RseScpO1xuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBDb250ZXh0U3lzdGVtLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICByZXR1cm4gQ29udGV4dFN5c3RlbTtcbn0oU3lzdGVtKSk7XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIGZyYW1lYnVmZmVycy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuU3lzdGVtXG4gKiBAbWVtYmVyb2YgUElYSS5zeXN0ZW1zXG4gKi9cbnZhciBGcmFtZWJ1ZmZlclN5c3RlbSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN5c3RlbSkge1xuICAgIGZ1bmN0aW9uIEZyYW1lYnVmZmVyU3lzdGVtKHJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgU3lzdGVtLmNhbGwodGhpcywgcmVuZGVyZXIpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGxpc3Qgb2YgbWFuYWdlZCBmcmFtZWJ1ZmZlcnNcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5GcmFtZWJ1ZmZlcltdfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWFuYWdlZEZyYW1lYnVmZmVycyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGcmFtZWJ1ZmZlciB2YWx1ZSB0aGF0IHNob3dzIHRoYXQgd2UgZG9uJ3Qga25vdyB3aGF0IGlzIGJvdW5kXG4gICAgICAgICAqIEBtZW1iZXIge0ZyYW1lYnVmZmVyfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudW5rbm93bkZyYW1lYnVmZmVyID0gbmV3IEZyYW1lYnVmZmVyKDEwLCAxMCk7XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBGcmFtZWJ1ZmZlclN5c3RlbS5fX3Byb3RvX18gPSBTeXN0ZW07XG4gICAgRnJhbWVidWZmZXJTeXN0ZW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3lzdGVtICYmIFN5c3RlbS5wcm90b3R5cGUgKTtcbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGcmFtZWJ1ZmZlclN5c3RlbTtcblxuICAgIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHNpemU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdXAgdGhlIHJlbmRlcmVyIGNvbnRleHQgYW5kIG5lY2Vzc2FyeSBidWZmZXJzLlxuICAgICAqL1xuICAgIEZyYW1lYnVmZmVyU3lzdGVtLnByb3RvdHlwZS5jb250ZXh0Q2hhbmdlID0gZnVuY3Rpb24gY29udGV4dENoYW5nZSAoKVxuICAgIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbCA9IHRoaXMucmVuZGVyZXIuZ2w7XG5cbiAgICAgICAgdGhpcy5DT05URVhUX1VJRCA9IHRoaXMucmVuZGVyZXIuQ09OVEVYVF9VSUQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMudW5rbm93bkZyYW1lYnVmZmVyO1xuICAgICAgICB0aGlzLnZpZXdwb3J0ID0gbmV3IFJlY3RhbmdsZSgpO1xuICAgICAgICB0aGlzLmhhc01SVCA9IHRydWU7XG4gICAgICAgIHRoaXMud3JpdGVEZXB0aFRleHR1cmUgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuZGlzcG9zZUFsbCh0cnVlKTtcblxuICAgICAgICAvLyB3ZWJnbDJcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIuY29udGV4dC53ZWJHTFZlcnNpb24gPT09IDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIHdlYmdsIDEhXG4gICAgICAgICAgICB2YXIgbmF0aXZlRHJhd0J1ZmZlcnNFeHRlbnNpb24gPSB0aGlzLnJlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucy5kcmF3QnVmZmVycztcbiAgICAgICAgICAgIHZhciBuYXRpdmVEZXB0aFRleHR1cmVFeHRlbnNpb24gPSB0aGlzLnJlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucy5kZXB0aFRleHR1cmU7XG5cbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5QUkVGRVJfRU5WID09PSBFTlYuV0VCR0xfTEVHQUNZKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hdGl2ZURyYXdCdWZmZXJzRXh0ZW5zaW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICBuYXRpdmVEZXB0aFRleHR1cmVFeHRlbnNpb24gPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmF0aXZlRHJhd0J1ZmZlcnNFeHRlbnNpb24pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ2wuZHJhd0J1ZmZlcnMgPSBmdW5jdGlvbiAoYWN0aXZlVGV4dHVyZXMpIHsgcmV0dXJuIG5hdGl2ZURyYXdCdWZmZXJzRXh0ZW5zaW9uLmRyYXdCdWZmZXJzV0VCR0woYWN0aXZlVGV4dHVyZXMpOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzTVJUID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZ2wuZHJhd0J1ZmZlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVtcHR5XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFuYXRpdmVEZXB0aFRleHR1cmVFeHRlbnNpb24pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZURlcHRoVGV4dHVyZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEJpbmQgYSBmcmFtZWJ1ZmZlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkZyYW1lYnVmZmVyfSBmcmFtZWJ1ZmZlclxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IFtmcmFtZV0gZnJhbWUsIGRlZmF1bHQgaXMgZnJhbWVidWZmZXIgc2l6ZVxuICAgICAqL1xuICAgIEZyYW1lYnVmZmVyU3lzdGVtLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCAoZnJhbWVidWZmZXIsIGZyYW1lKVxuICAgIHtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBnbCA9IHJlZi5nbDtcblxuICAgICAgICBpZiAoZnJhbWVidWZmZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPRE8gY2FjaGluZyBsYXllciFcblxuICAgICAgICAgICAgdmFyIGZibyA9IGZyYW1lYnVmZmVyLmdsRnJhbWVidWZmZXJzW3RoaXMuQ09OVEVYVF9VSURdIHx8IHRoaXMuaW5pdEZyYW1lYnVmZmVyKGZyYW1lYnVmZmVyKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gZnJhbWVidWZmZXIpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gZnJhbWVidWZmZXI7XG4gICAgICAgICAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmYm8uZnJhbWVidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGFsbCB0ZXh0dXJlcyBhcmUgdW5ib3VuZC4uXG5cbiAgICAgICAgICAgIC8vIG5vdyBjaGVjayBmb3IgdXBkYXRlcy4uLlxuICAgICAgICAgICAgaWYgKGZiby5kaXJ0eUlkICE9PSBmcmFtZWJ1ZmZlci5kaXJ0eUlkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZiby5kaXJ0eUlkID0gZnJhbWVidWZmZXIuZGlydHlJZDtcblxuICAgICAgICAgICAgICAgIGlmIChmYm8uZGlydHlGb3JtYXQgIT09IGZyYW1lYnVmZmVyLmRpcnR5Rm9ybWF0KVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZmJvLmRpcnR5Rm9ybWF0ID0gZnJhbWVidWZmZXIuZGlydHlGb3JtYXQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRnJhbWVidWZmZXIoZnJhbWVidWZmZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChmYm8uZGlydHlTaXplICE9PSBmcmFtZWJ1ZmZlci5kaXJ0eVNpemUpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBmYm8uZGlydHlTaXplID0gZnJhbWVidWZmZXIuZGlydHlTaXplO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZUZyYW1lYnVmZmVyKGZyYW1lYnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJhbWVidWZmZXIuY29sb3JUZXh0dXJlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVidWZmZXIuY29sb3JUZXh0dXJlc1tpXS50ZXh0dXJlUGFydClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudGV4dHVyZS51bmJpbmQoZnJhbWVidWZmZXIuY29sb3JUZXh0dXJlc1tpXS50ZXh0dXJlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci50ZXh0dXJlLnVuYmluZChmcmFtZWJ1ZmZlci5jb2xvclRleHR1cmVzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmcmFtZWJ1ZmZlci5kZXB0aFRleHR1cmUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci50ZXh0dXJlLnVuYmluZChmcmFtZWJ1ZmZlci5kZXB0aFRleHR1cmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZnJhbWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWaWV3cG9ydChmcmFtZS54LCBmcmFtZS55LCBmcmFtZS53aWR0aCwgZnJhbWUuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZpZXdwb3J0KDAsIDAsIGZyYW1lYnVmZmVyLndpZHRoLCBmcmFtZWJ1ZmZlci5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmcmFtZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZpZXdwb3J0KGZyYW1lLngsIGZyYW1lLnksIGZyYW1lLndpZHRoLCBmcmFtZS5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Vmlld3BvcnQoMCwgMCwgdGhpcy5yZW5kZXJlci53aWR0aCwgdGhpcy5yZW5kZXJlci5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgV2ViR0xSZW5kZXJpbmdDb250ZXh0J3Mgdmlld3BvcnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geCAtIFggcG9zaXRpb24gb2Ygdmlld3BvcnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geSAtIFkgcG9zaXRpb24gb2Ygdmlld3BvcnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGggLSBXaWR0aCBvZiB2aWV3cG9ydFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHQgLSBIZWlnaHQgb2Ygdmlld3BvcnRcbiAgICAgKi9cbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUuc2V0Vmlld3BvcnQgPSBmdW5jdGlvbiBzZXRWaWV3cG9ydCAoeCwgeSwgd2lkdGgsIGhlaWdodClcbiAgICB7XG4gICAgICAgIHZhciB2ID0gdGhpcy52aWV3cG9ydDtcblxuICAgICAgICBpZiAodi53aWR0aCAhPT0gd2lkdGggfHwgdi5oZWlnaHQgIT09IGhlaWdodCB8fCB2LnggIT09IHggfHwgdi55ICE9PSB5KVxuICAgICAgICB7XG4gICAgICAgICAgICB2LnggPSB4O1xuICAgICAgICAgICAgdi55ID0geTtcbiAgICAgICAgICAgIHYud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIHYuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc2l6ZSBvZiB0aGUgY3VycmVudCB3aWR0aCBhbmQgaGVpZ2h0LiBSZXR1cm5zIG9iamVjdCB3aXRoIGB3aWR0aGAgYW5kIGBoZWlnaHRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge29iamVjdH1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuc2l6ZS5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVE9ETyBzdG9yZSB0ZW1wXG4gICAgICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwLCB3aWR0aDogdGhpcy5jdXJyZW50LndpZHRoLCBoZWlnaHQ6IHRoaXMuY3VycmVudC5oZWlnaHQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAsIHdpZHRoOiB0aGlzLnJlbmRlcmVyLndpZHRoLCBoZWlnaHQ6IHRoaXMucmVuZGVyZXIuaGVpZ2h0IH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBjb2xvciBvZiB0aGUgY29udGV4dFxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHIgLSBSZWQgdmFsdWUgZnJvbSAwIHRvIDFcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZyAtIEdyZWVuIHZhbHVlIGZyb20gMCB0byAxXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGIgLSBCbHVlIHZhbHVlIGZyb20gMCB0byAxXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGEgLSBBbHBoYSB2YWx1ZSBmcm9tIDAgdG8gMVxuICAgICAqL1xuICAgIEZyYW1lYnVmZmVyU3lzdGVtLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyIChyLCBnLCBiLCBhKVxuICAgIHtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBnbCA9IHJlZi5nbDtcblxuICAgICAgICAvLyBUT0RPIGNsZWFyIGNvbG9yIGNhbiBiZSBzZXQgb25seSBvbmUgcmlnaHQ/XG4gICAgICAgIGdsLmNsZWFyQ29sb3IociwgZywgYiwgYSk7XG4gICAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBmcmFtZWJ1ZmZlclxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7UElYSS5GcmFtZWJ1ZmZlcn0gZnJhbWVidWZmZXJcbiAgICAgKi9cbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUuaW5pdEZyYW1lYnVmZmVyID0gZnVuY3Rpb24gaW5pdEZyYW1lYnVmZmVyIChmcmFtZWJ1ZmZlcilcbiAgICB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgZ2wgPSByZWYuZ2w7XG5cbiAgICAgICAgLy8gVE9ETyAtIG1ha2UgdGhpcyBhIGNsYXNzP1xuICAgICAgICB2YXIgZmJvID0ge1xuICAgICAgICAgICAgZnJhbWVidWZmZXI6IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCksXG4gICAgICAgICAgICBzdGVuY2lsOiBudWxsLFxuICAgICAgICAgICAgZGlydHlJZDogMCxcbiAgICAgICAgICAgIGRpcnR5Rm9ybWF0OiAwLFxuICAgICAgICAgICAgZGlydHlTaXplOiAwLFxuICAgICAgICB9O1xuXG4gICAgICAgIGZyYW1lYnVmZmVyLmdsRnJhbWVidWZmZXJzW3RoaXMuQ09OVEVYVF9VSURdID0gZmJvO1xuXG4gICAgICAgIHRoaXMubWFuYWdlZEZyYW1lYnVmZmVycy5wdXNoKGZyYW1lYnVmZmVyKTtcbiAgICAgICAgZnJhbWVidWZmZXIuZGlzcG9zZVJ1bm5lci5hZGQodGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIGZibztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzaXplIHRoZSBmcmFtZWJ1ZmZlclxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7UElYSS5GcmFtZWJ1ZmZlcn0gZnJhbWVidWZmZXJcbiAgICAgKi9cbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUucmVzaXplRnJhbWVidWZmZXIgPSBmdW5jdGlvbiByZXNpemVGcmFtZWJ1ZmZlciAoZnJhbWVidWZmZXIpXG4gICAge1xuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGdsID0gcmVmLmdsO1xuXG4gICAgICAgIHZhciBmYm8gPSBmcmFtZWJ1ZmZlci5nbEZyYW1lYnVmZmVyc1t0aGlzLkNPTlRFWFRfVUlEXTtcblxuICAgICAgICBpZiAoZmJvLnN0ZW5jaWwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBmYm8uc3RlbmNpbCk7XG4gICAgICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKGdsLlJFTkRFUkJVRkZFUiwgZ2wuREVQVEhfU1RFTkNJTCwgZnJhbWVidWZmZXIud2lkdGgsIGZyYW1lYnVmZmVyLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29sb3JUZXh0dXJlcyA9IGZyYW1lYnVmZmVyLmNvbG9yVGV4dHVyZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xvclRleHR1cmVzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnRleHR1cmUuYmluZChjb2xvclRleHR1cmVzW2ldLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmcmFtZWJ1ZmZlci5kZXB0aFRleHR1cmUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudGV4dHVyZS5iaW5kKGZyYW1lYnVmZmVyLmRlcHRoVGV4dHVyZSwgMCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBmcmFtZWJ1ZmZlclxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7UElYSS5GcmFtZWJ1ZmZlcn0gZnJhbWVidWZmZXJcbiAgICAgKi9cbiAgICBGcmFtZWJ1ZmZlclN5c3RlbS5wcm90b3R5cGUudXBkYXRlRnJhbWVidWZmZXIgPSBmdW5jdGlvbiB1cGRhdGVGcmFtZWJ1ZmZlciAoZnJhbWVidWZmZXIpXG4gICAge1xuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGdsID0gcmVmLmdsO1xuXG4gICAgICAgIHZhciBmYm8gPSBmcmFtZWJ1ZmZlci5nbEZyYW1lYnVmZmVyc1t0aGlzLkNPTlRFWFRfVUlEXTtcblxuICAgICAgICAvLyBiaW5kIHRoZSBjb2xvciB0ZXh0dXJlXG4gICAgICAgIHZhciBjb2xvclRleHR1cmVzID0gZnJhbWVidWZmZXIuY29sb3JUZXh0dXJlcztcblxuICAgICAgICB2YXIgY291bnQgPSBjb2xvclRleHR1cmVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoIWdsLmRyYXdCdWZmZXJzKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb3VudCA9IE1hdGgubWluKGNvdW50LCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3RpdmVUZXh0dXJlcyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHRleHR1cmUgPSBmcmFtZWJ1ZmZlci5jb2xvclRleHR1cmVzW2ldO1xuXG4gICAgICAgICAgICBpZiAodGV4dHVyZS50ZXh0dXJlUGFydClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnRleHR1cmUuYmluZCh0ZXh0dXJlLnRleHR1cmUsIDApO1xuXG4gICAgICAgICAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsXG4gICAgICAgICAgICAgICAgICAgIGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSxcbiAgICAgICAgICAgICAgICAgICAgZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YICsgdGV4dHVyZS5zaWRlLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLnRleHR1cmUuX2dsVGV4dHVyZXNbdGhpcy5DT05URVhUX1VJRF0udGV4dHVyZSxcbiAgICAgICAgICAgICAgICAgICAgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci50ZXh0dXJlLmJpbmQodGV4dHVyZSwgMCk7XG5cbiAgICAgICAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUixcbiAgICAgICAgICAgICAgICAgICAgZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLFxuICAgICAgICAgICAgICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLl9nbFRleHR1cmVzW3RoaXMuQ09OVEVYVF9VSURdLnRleHR1cmUsXG4gICAgICAgICAgICAgICAgICAgIDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhY3RpdmVUZXh0dXJlcy5wdXNoKGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aXZlVGV4dHVyZXMubGVuZ3RoID4gMSlcbiAgICAgICAge1xuICAgICAgICAgICAgZ2wuZHJhd0J1ZmZlcnMoYWN0aXZlVGV4dHVyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyYW1lYnVmZmVyLmRlcHRoVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHdyaXRlRGVwdGhUZXh0dXJlID0gdGhpcy53cml0ZURlcHRoVGV4dHVyZTtcblxuICAgICAgICAgICAgaWYgKHdyaXRlRGVwdGhUZXh0dXJlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBkZXB0aFRleHR1cmUgPSBmcmFtZWJ1ZmZlci5kZXB0aFRleHR1cmU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnRleHR1cmUuYmluZChkZXB0aFRleHR1cmUsIDApO1xuXG4gICAgICAgICAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsXG4gICAgICAgICAgICAgICAgICAgIGdsLkRFUFRIX0FUVEFDSE1FTlQsXG4gICAgICAgICAgICAgICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgICAgICAgICAgIGRlcHRoVGV4dHVyZS5fZ2xUZXh0dXJlc1t0aGlzLkNPTlRFWFRfVUlEXS50ZXh0dXJlLFxuICAgICAgICAgICAgICAgICAgICAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZmJvLnN0ZW5jaWwgJiYgKGZyYW1lYnVmZmVyLnN0ZW5jaWwgfHwgZnJhbWVidWZmZXIuZGVwdGgpKVxuICAgICAgICB7XG4gICAgICAgICAgICBmYm8uc3RlbmNpbCA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXG4gICAgICAgICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgZmJvLnN0ZW5jaWwpO1xuXG4gICAgICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKGdsLlJFTkRFUkJVRkZFUiwgZ2wuREVQVEhfU1RFTkNJTCwgZnJhbWVidWZmZXIud2lkdGgsIGZyYW1lYnVmZmVyLmhlaWdodCk7XG4gICAgICAgICAgICAvLyBUT0RPLi4gdGhpcyBpcyBkZXB0aCBBTkQgc3RlbmNpbD9cbiAgICAgICAgICAgIGlmICghZnJhbWVidWZmZXIuZGVwdGhUZXh0dXJlKVxuICAgICAgICAgICAgeyAvLyB5b3UgY2FuJ3QgaGF2ZSBib3RoLCBzbyBvbmUgc2hvdWxkIHRha2UgcHJpb3JpdHkgaWYgZW5hYmxlZFxuICAgICAgICAgICAgICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsIGdsLlJFTkRFUkJVRkZFUiwgZmJvLnN0ZW5jaWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERpc3Bvc2VzIGZyYW1lYnVmZmVyXG4gICAgICogQHBhcmFtIHtQSVhJLkZyYW1lYnVmZmVyfSBmcmFtZWJ1ZmZlciBmcmFtZWJ1ZmZlciB0aGF0IGhhcyB0byBiZSBkaXNwb3NlZCBvZlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbnRleHRMb3N0PWZhbHNlXSBJZiBjb250ZXh0IHdhcyBsb3N0LCB3ZSBzdXBwcmVzcyBhbGwgZGVsZXRlIGZ1bmN0aW9uIGNhbGxzXG4gICAgICovXG4gICAgRnJhbWVidWZmZXJTeXN0ZW0ucHJvdG90eXBlLmRpc3Bvc2VGcmFtZWJ1ZmZlciA9IGZ1bmN0aW9uIGRpc3Bvc2VGcmFtZWJ1ZmZlciAoZnJhbWVidWZmZXIsIGNvbnRleHRMb3N0KVxuICAgIHtcbiAgICAgICAgdmFyIGZibyA9IGZyYW1lYnVmZmVyLmdsRnJhbWVidWZmZXJzW3RoaXMuQ09OVEVYVF9VSURdO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgIGlmICghZmJvKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgZnJhbWVidWZmZXIuZ2xGcmFtZWJ1ZmZlcnNbdGhpcy5DT05URVhUX1VJRF07XG5cbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5tYW5hZ2VkRnJhbWVidWZmZXJzLmluZGV4T2YoZnJhbWVidWZmZXIpO1xuXG4gICAgICAgIGlmIChpbmRleCA+PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZWRGcmFtZWJ1ZmZlcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lYnVmZmVyLmRpc3Bvc2VSdW5uZXIucmVtb3ZlKHRoaXMpO1xuXG4gICAgICAgIGlmICghY29udGV4dExvc3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKGZiby5mcmFtZWJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAoZmJvLnN0ZW5jaWwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKGZiby5zdGVuY2lsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlcyBhbGwgZnJhbWVidWZmZXJzLCBidXQgbm90IHRleHR1cmVzIGJvdW5kIHRvIHRoZW1cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjb250ZXh0TG9zdD1mYWxzZV0gSWYgY29udGV4dCB3YXMgbG9zdCwgd2Ugc3VwcHJlc3MgYWxsIGRlbGV0ZSBmdW5jdGlvbiBjYWxsc1xuICAgICAqL1xuICAgIEZyYW1lYnVmZmVyU3lzdGVtLnByb3RvdHlwZS5kaXNwb3NlQWxsID0gZnVuY3Rpb24gZGlzcG9zZUFsbCAoY29udGV4dExvc3QpXG4gICAge1xuICAgICAgICB2YXIgbGlzdCA9IHRoaXMubWFuYWdlZEZyYW1lYnVmZmVycztcblxuICAgICAgICB0aGlzLm1hbmFnZWRGcmFtZWJ1ZmZlcnMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZUZyYW1lYnVmZmVyKGxpc3RbaV0sIGNvbnRleHRMb3N0KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGb3JjaW5nIGNyZWF0aW9uIG9mIHN0ZW5jaWwgYnVmZmVyIGZvciBjdXJyZW50IGZyYW1lYnVmZmVyLCBpZiBpdCB3YXNuJ3QgZG9uZSBiZWZvcmUuXG4gICAgICogVXNlZCBieSBNYXNrU3lzdGVtLCB3aGVuIGl0cyB0aW1lIHRvIHVzZSBzdGVuY2lsIG1hc2sgZm9yIEdyYXBoaWNzIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJdHMgYW4gYWx0ZXJuYXRpdmUgZm9yIHB1YmxpYyBsYXp5IGBmcmFtZWJ1ZmZlci5lbmFibGVTdGVuY2lsYCwgaW4gY2FzZSB3ZSBuZWVkIHN0ZW5jaWwgd2l0aG91dCByZWJpbmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEZyYW1lYnVmZmVyU3lzdGVtLnByb3RvdHlwZS5mb3JjZVN0ZW5jaWwgPSBmdW5jdGlvbiBmb3JjZVN0ZW5jaWwgKClcbiAgICB7XG4gICAgICAgIHZhciBmcmFtZWJ1ZmZlciA9IHRoaXMuY3VycmVudDtcblxuICAgICAgICBpZiAoIWZyYW1lYnVmZmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmJvID0gZnJhbWVidWZmZXIuZ2xGcmFtZWJ1ZmZlcnNbdGhpcy5DT05URVhUX1VJRF07XG5cbiAgICAgICAgaWYgKCFmYm8gfHwgZmJvLnN0ZW5jaWwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmcmFtZWJ1ZmZlci5lbmFibGVTdGVuY2lsKCk7XG5cbiAgICAgICAgdmFyIHcgPSBmcmFtZWJ1ZmZlci53aWR0aDtcbiAgICAgICAgdmFyIGggPSBmcmFtZWJ1ZmZlci5oZWlnaHQ7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIHZhciBzdGVuY2lsID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cbiAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHN0ZW5jaWwpO1xuICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKGdsLlJFTkRFUkJVRkZFUiwgZ2wuREVQVEhfU1RFTkNJTCwgdywgaCk7XG5cbiAgICAgICAgZmJvLnN0ZW5jaWwgPSBzdGVuY2lsO1xuICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULCBnbC5SRU5ERVJCVUZGRVIsIHN0ZW5jaWwpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiByZXNldHMgZnJhbWVidWZmZXIgc3RvcmVkIHN0YXRlLCBiaW5kcyBzY3JlZW4gZnJhbWVidWZmZXJcbiAgICAgKlxuICAgICAqIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIHJlbmRlclRleHR1cmUgcmVzZXQoKVxuICAgICAqL1xuICAgIEZyYW1lYnVmZmVyU3lzdGVtLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0ICgpXG4gICAge1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnVua25vd25GcmFtZWJ1ZmZlcjtcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IG5ldyBSZWN0YW5nbGUoKTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEZyYW1lYnVmZmVyU3lzdGVtLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICByZXR1cm4gRnJhbWVidWZmZXJTeXN0ZW07XG59KFN5c3RlbSkpO1xuXG52YXIgR0xCdWZmZXIgPSBmdW5jdGlvbiBHTEJ1ZmZlcihidWZmZXIpXG57XG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgdGhpcy51cGRhdGVJRCA9IC0xO1xuICAgIHRoaXMuYnl0ZUxlbmd0aCA9IC0xO1xuICAgIHRoaXMucmVmQ291bnQgPSAwO1xufTtcblxudmFyIGJ5dGVTaXplTWFwJDEgPSB7IDUxMjY6IDQsIDUxMjM6IDIsIDUxMjE6IDEgfTtcblxuLyoqXG4gKiBTeXN0ZW0gcGx1Z2luIHRvIHRoZSByZW5kZXJlciB0byBtYW5hZ2UgZ2VvbWV0cnkuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICovXG52YXIgR2VvbWV0cnlTeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBHZW9tZXRyeVN5c3RlbShyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIFN5c3RlbS5jYWxsKHRoaXMsIHJlbmRlcmVyKTtcblxuICAgICAgICB0aGlzLl9hY3RpdmVHZW9tZXRyeSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVZhbyA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGB0cnVlYCBpZiB3ZSBoYXMgYCpfdmVydGV4X2FycmF5X29iamVjdGAgZXh0ZW5zaW9uXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYXNWYW8gPSB0cnVlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBgdHJ1ZWAgaWYgaGFzIGBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzYCBleHRlbnNpb25cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhhc0luc3RhbmNlID0gdHJ1ZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYHRydWVgIGlmIHN1cHBvcnQgYGdsLlVOU0lHTkVEX0lOVGAgaW4gYGdsLmRyYXdFbGVtZW50c2Agb3IgYGdsLmRyYXdFbGVtZW50c0luc3RhbmNlZGBcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhblVzZVVJbnQzMkVsZW1lbnRJbmRleCA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGNhY2hlIG9mIGN1cnJlbnRseSBib3VuZCBidWZmZXIsXG4gICAgICAgICAqIGNvbnRhaW5zIG9ubHkgdHdvIG1lbWJlcnMgd2l0aCBrZXlzIEFSUkFZX0JVRkZFUiBhbmQgRUxFTUVOVF9BUlJBWV9CVUZGRVJcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0LjxudW1iZXIsIFBJWEkuQnVmZmVyPn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJvdW5kQnVmZmVycyA9IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWNoZSBmb3IgYWxsIGdlb21ldHJpZXMgYnkgaWQsIHVzZWQgaW4gY2FzZSByZW5kZXJlciBnZXRzIGRlc3Ryb3llZCBvciBmb3IgcHJvZmlsaW5nXG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1hbmFnZWRHZW9tZXRyaWVzID0ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhY2hlIGZvciBhbGwgYnVmZmVycyBieSBpZCwgdXNlZCBpbiBjYXNlIHJlbmRlcmVyIGdldHMgZGVzdHJveWVkIG9yIGZvciBwcm9maWxpbmdcbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWFuYWdlZEJ1ZmZlcnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIFN5c3RlbSApIEdlb21ldHJ5U3lzdGVtLl9fcHJvdG9fXyA9IFN5c3RlbTtcbiAgICBHZW9tZXRyeVN5c3RlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTeXN0ZW0gJiYgU3lzdGVtLnByb3RvdHlwZSApO1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlb21ldHJ5U3lzdGVtO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB1cCB0aGUgcmVuZGVyZXIgY29udGV4dCBhbmQgbmVjZXNzYXJ5IGJ1ZmZlcnMuXG4gICAgICovXG4gICAgR2VvbWV0cnlTeXN0ZW0ucHJvdG90eXBlLmNvbnRleHRDaGFuZ2UgPSBmdW5jdGlvbiBjb250ZXh0Q2hhbmdlICgpXG4gICAge1xuICAgICAgICB0aGlzLmRpc3Bvc2VBbGwodHJ1ZSk7XG5cbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbCA9IHRoaXMucmVuZGVyZXIuZ2w7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5yZW5kZXJlci5jb250ZXh0O1xuXG4gICAgICAgIHRoaXMuQ09OVEVYVF9VSUQgPSB0aGlzLnJlbmRlcmVyLkNPTlRFWFRfVUlEO1xuXG4gICAgICAgIC8vIHdlYmdsMlxuICAgICAgICBpZiAoIWdsLmNyZWF0ZVZlcnRleEFycmF5KVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyB3ZWJnbCAxIVxuICAgICAgICAgICAgdmFyIG5hdGl2ZVZhb0V4dGVuc2lvbiA9IHRoaXMucmVuZGVyZXIuY29udGV4dC5leHRlbnNpb25zLnZlcnRleEFycmF5T2JqZWN0O1xuXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuUFJFRkVSX0VOViA9PT0gRU5WLldFQkdMX0xFR0FDWSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVWYW9FeHRlbnNpb24gPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmF0aXZlVmFvRXh0ZW5zaW9uKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGdsLmNyZWF0ZVZlcnRleEFycmF5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlVmFvRXh0ZW5zaW9uLmNyZWF0ZVZlcnRleEFycmF5T0VTKCk7IH07XG5cbiAgICAgICAgICAgICAgICBnbC5iaW5kVmVydGV4QXJyYXkgPSBmdW5jdGlvbiAodmFvKSB7IHJldHVybiBuYXRpdmVWYW9FeHRlbnNpb24uYmluZFZlcnRleEFycmF5T0VTKHZhbyk7IH07XG5cbiAgICAgICAgICAgICAgICBnbC5kZWxldGVWZXJ0ZXhBcnJheSA9IGZ1bmN0aW9uICh2YW8pIHsgcmV0dXJuIG5hdGl2ZVZhb0V4dGVuc2lvbi5kZWxldGVWZXJ0ZXhBcnJheU9FUyh2YW8pOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzVmFvID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZ2wuY3JlYXRlVmVydGV4QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVtcHR5XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZW1wdHlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZ2wuZGVsZXRlVmVydGV4QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVtcHR5XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZ2wudmVydGV4QXR0cmliRGl2aXNvcilcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlRXh0ID0gZ2wuZ2V0RXh0ZW5zaW9uKCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyk7XG5cbiAgICAgICAgICAgIGlmIChpbnN0YW5jZUV4dClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJEaXZpc29yID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGluc3RhbmNlRXh0LnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRShhLCBiKTsgfTtcblxuICAgICAgICAgICAgICAgIGdsLmRyYXdFbGVtZW50c0luc3RhbmNlZCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCBlKSB7IHJldHVybiBpbnN0YW5jZUV4dC5kcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRShhLCBiLCBjLCBkLCBlKTsgfTtcblxuICAgICAgICAgICAgICAgIGdsLmRyYXdBcnJheXNJbnN0YW5jZWQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gaW5zdGFuY2VFeHQuZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFKGEsIGIsIGMsIGQpOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzSW5zdGFuY2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FuVXNlVUludDMyRWxlbWVudEluZGV4ID0gY29udGV4dC53ZWJHTFZlcnNpb24gPT09IDIgfHwgISFjb250ZXh0LmV4dGVuc2lvbnMudWludDMyRWxlbWVudEluZGV4O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBnZW9tZXRyeSBzbyB0aGF0IGlzIGNhbiBiZSBkcmF3bi4gQ3JlYXRpbmcgYSBWYW8gaWYgcmVxdWlyZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5HZW9tZXRyeX0gZ2VvbWV0cnkgaW5zdGFuY2Ugb2YgZ2VvbWV0cnkgdG8gYmluZFxuICAgICAqIEBwYXJhbSB7UElYSS5TaGFkZXJ9IFtzaGFkZXJdIGluc3RhbmNlIG9mIHNoYWRlciB0byB1c2UgdmFvIGZvclxuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCAoZ2VvbWV0cnksIHNoYWRlcilcbiAgICB7XG4gICAgICAgIHNoYWRlciA9IHNoYWRlciB8fCB0aGlzLnJlbmRlcmVyLnNoYWRlci5zaGFkZXI7XG5cbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBnbCA9IHJlZi5nbDtcblxuICAgICAgICAvLyBub3Qgc3VyZSB0aGUgYmVzdCB3YXkgdG8gYWRkcmVzcyB0aGlzLi5cbiAgICAgICAgLy8gY3VycmVudGx5IGRpZmZlcmVudCBzaGFkZXJzIHJlcXVpcmUgZGlmZmVyZW50IFZBT3MgZm9yIHRoZSBzYW1lIGdlb21ldHJ5XG4gICAgICAgIC8vIFN0aWxsIG11bGxpbmcgb3ZlciB0aGUgYmVzdCB3YXkgdG8gc29sdmUgdGhpcyBvbmUuLlxuICAgICAgICAvLyB3aWxsIGxpa2VseSBuZWVkIHRvIG1vZGlmeSB0aGUgc2hhZGVyIGF0dHJpYnV0ZSBsb2NhdGlvbnMgYXQgcnVuIHRpbWUhXG4gICAgICAgIHZhciB2YW9zID0gZ2VvbWV0cnkuZ2xWZXJ0ZXhBcnJheU9iamVjdHNbdGhpcy5DT05URVhUX1VJRF07XG5cbiAgICAgICAgaWYgKCF2YW9zKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZWRHZW9tZXRyaWVzW2dlb21ldHJ5LmlkXSA9IGdlb21ldHJ5O1xuICAgICAgICAgICAgZ2VvbWV0cnkuZGlzcG9zZVJ1bm5lci5hZGQodGhpcyk7XG4gICAgICAgICAgICBnZW9tZXRyeS5nbFZlcnRleEFycmF5T2JqZWN0c1t0aGlzLkNPTlRFWFRfVUlEXSA9IHZhb3MgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2YW8gPSB2YW9zW3NoYWRlci5wcm9ncmFtLmlkXSB8fCB0aGlzLmluaXRHZW9tZXRyeVZhbyhnZW9tZXRyeSwgc2hhZGVyLnByb2dyYW0pO1xuXG4gICAgICAgIHRoaXMuX2FjdGl2ZUdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVZhbyAhPT0gdmFvKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVWYW8gPSB2YW87XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmhhc1ZhbylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnbC5iaW5kVmVydGV4QXJyYXkodmFvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRlVmFvKGdlb21ldHJ5LCBzaGFkZXIucHJvZ3JhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPIC0gb3B0aW1pc2UgbGF0ZXIhXG4gICAgICAgIC8vIGRvbid0IG5lZWQgdG8gbG9vcCB0aHJvdWdoIGlmIG5vdGhpbmcgY2hhbmdlZCFcbiAgICAgICAgLy8gbWF5YmUgbG9vayB0byBhZGQgYW4gJ2F1dG91cGRhdGUnIHRvIGdlb21ldHJ5P1xuICAgICAgICB0aGlzLnVwZGF0ZUJ1ZmZlcnMoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzZXQgYW5kIHVuYmluZCBhbnkgYWN0aXZlIFZBTyBhbmQgZ2VvbWV0cnlcbiAgICAgKi9cbiAgICBHZW9tZXRyeVN5c3RlbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGJ1ZmZlcnNcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgR2VvbWV0cnlTeXN0ZW0ucHJvdG90eXBlLnVwZGF0ZUJ1ZmZlcnMgPSBmdW5jdGlvbiB1cGRhdGVCdWZmZXJzICgpXG4gICAge1xuICAgICAgICB2YXIgZ2VvbWV0cnkgPSB0aGlzLl9hY3RpdmVHZW9tZXRyeTtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBnbCA9IHJlZi5nbDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdlb21ldHJ5LmJ1ZmZlcnMubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZW9tZXRyeS5idWZmZXJzW2ldO1xuXG4gICAgICAgICAgICB2YXIgZ2xCdWZmZXIgPSBidWZmZXIuX2dsQnVmZmVyc1t0aGlzLkNPTlRFWFRfVUlEXTtcblxuICAgICAgICAgICAgaWYgKGJ1ZmZlci5fdXBkYXRlSUQgIT09IGdsQnVmZmVyLnVwZGF0ZUlEKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGdsQnVmZmVyLnVwZGF0ZUlEID0gYnVmZmVyLl91cGRhdGVJRDtcblxuICAgICAgICAgICAgICAgIC8vIFRPRE8gY2FuIGNhY2hlIHRoaXMgb24gYnVmZmVyISBtYXliZSBhZGRlZCBhIGdldHRlciAvIHNldHRlcj9cbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGJ1ZmZlci5pbmRleCA/IGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSIDogZ2wuQVJSQVlfQlVGRkVSO1xuXG4gICAgICAgICAgICAgICAgLy8gVE9ETyB0aGlzIGNvdWxkIGNoYW5nZSBpZiB0aGUgVkFPIGNoYW5nZXMuLi5cbiAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIGNvbWUgdXAgd2l0aCBhIGJldHRlciB3YXkgdG8gY2FjaGUuLlxuICAgICAgICAgICAgICAgIC8vIGlmICh0aGlzLmJvdW5kQnVmZmVyc1t0eXBlXSAhPT0gZ2xCdWZmZXIpXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuYm91bmRCdWZmZXJzW3R5cGVdID0gZ2xCdWZmZXI7XG4gICAgICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcih0eXBlLCBnbEJ1ZmZlci5idWZmZXIpO1xuICAgICAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2JvdW5kQnVmZmVyID0gZ2xCdWZmZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAoZ2xCdWZmZXIuYnl0ZUxlbmd0aCA+PSBidWZmZXIuZGF0YS5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb2Zmc2V0IGlzIGFsd2F5cyB6ZXJvIGZvciBub3chXG4gICAgICAgICAgICAgICAgICAgIGdsLmJ1ZmZlclN1YkRhdGEodHlwZSwgMCwgYnVmZmVyLmRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhd1R5cGUgPSBidWZmZXIuc3RhdGljID8gZ2wuU1RBVElDX0RSQVcgOiBnbC5EWU5BTUlDX0RSQVc7XG5cbiAgICAgICAgICAgICAgICAgICAgZ2xCdWZmZXIuYnl0ZUxlbmd0aCA9IGJ1ZmZlci5kYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEodHlwZSwgYnVmZmVyLmRhdGEsIGRyYXdUeXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgY29tcGFiaWxpdHkgYmV0d2VlbiBhIGdlb21ldHJ5IGFuZCBhIHByb2dyYW1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtQSVhJLkdlb21ldHJ5fSBnZW9tZXRyeSAtIEdlb21ldHJ5IGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtQSVhJLlByb2dyYW19IHByb2dyYW0gLSBQcm9ncmFtIGluc3RhbmNlXG4gICAgICovXG4gICAgR2VvbWV0cnlTeXN0ZW0ucHJvdG90eXBlLmNoZWNrQ29tcGF0aWJpbGl0eSA9IGZ1bmN0aW9uIGNoZWNrQ29tcGF0aWJpbGl0eSAoZ2VvbWV0cnksIHByb2dyYW0pXG4gICAge1xuICAgICAgICAvLyBnZW9tZXRyeSBtdXN0IGhhdmUgYXQgbGVhc3QgYWxsIHRoZSBhdHRyaWJ1dGVzIHRoYXQgdGhlIHNoYWRlciByZXF1aXJlcy5cbiAgICAgICAgdmFyIGdlb21ldHJ5QXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG4gICAgICAgIHZhciBzaGFkZXJBdHRyaWJ1dGVzID0gcHJvZ3JhbS5hdHRyaWJ1dGVEYXRhO1xuXG4gICAgICAgIGZvciAodmFyIGogaW4gc2hhZGVyQXR0cmlidXRlcylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFnZW9tZXRyeUF0dHJpYnV0ZXNbal0pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChcInNoYWRlciBhbmQgZ2VvbWV0cnkgaW5jb21wYXRpYmxlLCBnZW9tZXRyeSBtaXNzaW5nIHRoZSBcXFwiXCIgKyBqICsgXCJcXFwiIGF0dHJpYnV0ZVwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBnZW9tZXRyeSBhbmQgcHJvZ3JhbSBhbmQgZ2VuZXJhdGVzIGEgdW5pcXVlIHNpZ25hdHVyZSBmb3IgdGhlbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5HZW9tZXRyeX0gZ2VvbWV0cnkgdG8gZ2V0IHNpZ25hdHVyZSBmcm9tXG4gICAgICogQHBhcmFtIHtQSVhJLlByb2dyYW19IHByb2dyYW0gdG8gdGVzdCBnZW9tZXRyeSBhZ2FpbnN0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gVW5pcXVlIHNpZ25hdHVyZSBvZiB0aGUgZ2VvbWV0cnkgYW5kIHByb2dyYW1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgR2VvbWV0cnlTeXN0ZW0ucHJvdG90eXBlLmdldFNpZ25hdHVyZSA9IGZ1bmN0aW9uIGdldFNpZ25hdHVyZSAoZ2VvbWV0cnksIHByb2dyYW0pXG4gICAge1xuICAgICAgICB2YXIgYXR0cmlicyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG4gICAgICAgIHZhciBzaGFkZXJBdHRyaWJ1dGVzID0gcHJvZ3JhbS5hdHRyaWJ1dGVEYXRhO1xuXG4gICAgICAgIHZhciBzdHJpbmdzID0gWydnJywgZ2VvbWV0cnkuaWRdO1xuXG4gICAgICAgIGZvciAodmFyIGkgaW4gYXR0cmlicylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHNoYWRlckF0dHJpYnV0ZXNbaV0pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5ncy5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cmluZ3Muam9pbignLScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIG9yIGdldHMgVmFvIHdpdGggdGhlIHNhbWUgc3RydWN0dXJlIGFzIHRoZSBnZW9tZXRyeSBhbmQgc3RvcmVzIGl0IG9uIHRoZSBnZW9tZXRyeS5cbiAgICAgKiBJZiB2YW8gaXMgY3JlYXRlZCwgaXQgaXMgYm91bmQgYXV0b21hdGljYWxseS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1BJWEkuR2VvbWV0cnl9IGdlb21ldHJ5IC0gSW5zdGFuY2Ugb2YgZ2VvbWV0cnkgdG8gdG8gZ2VuZXJhdGUgVmFvIGZvclxuICAgICAqIEBwYXJhbSB7UElYSS5Qcm9ncmFtfSBwcm9ncmFtIC0gSW5zdGFuY2Ugb2YgcHJvZ3JhbVxuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5pbml0R2VvbWV0cnlWYW8gPSBmdW5jdGlvbiBpbml0R2VvbWV0cnlWYW8gKGdlb21ldHJ5LCBwcm9ncmFtKVxuICAgIHtcbiAgICAgICAgdGhpcy5jaGVja0NvbXBhdGliaWxpdHkoZ2VvbWV0cnksIHByb2dyYW0pO1xuXG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIHZhciBDT05URVhUX1VJRCA9IHRoaXMuQ09OVEVYVF9VSUQ7XG5cbiAgICAgICAgdmFyIHNpZ25hdHVyZSA9IHRoaXMuZ2V0U2lnbmF0dXJlKGdlb21ldHJ5LCBwcm9ncmFtKTtcblxuICAgICAgICB2YXIgdmFvT2JqZWN0SGFzaCA9IGdlb21ldHJ5LmdsVmVydGV4QXJyYXlPYmplY3RzW3RoaXMuQ09OVEVYVF9VSURdO1xuXG4gICAgICAgIHZhciB2YW8gPSB2YW9PYmplY3RIYXNoW3NpZ25hdHVyZV07XG5cbiAgICAgICAgaWYgKHZhbylcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGdpdmUgdXMgZWFzeSBhY2Nlc3MgdG8gdGhlIHZhb1xuICAgICAgICAgICAgdmFvT2JqZWN0SGFzaFtwcm9ncmFtLmlkXSA9IHZhbztcblxuICAgICAgICAgICAgcmV0dXJuIHZhbztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBidWZmZXJzID0gZ2VvbWV0cnkuYnVmZmVycztcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgdGVtcFN0cmlkZSA9IHt9O1xuICAgICAgICB2YXIgdGVtcFN0YXJ0ID0ge307XG5cbiAgICAgICAgZm9yICh2YXIgaiBpbiBidWZmZXJzKVxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wU3RyaWRlW2pdID0gMDtcbiAgICAgICAgICAgIHRlbXBTdGFydFtqXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqJDEgaW4gYXR0cmlidXRlcylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzW2okMV0uc2l6ZSAmJiBwcm9ncmFtLmF0dHJpYnV0ZURhdGFbaiQxXSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2okMV0uc2l6ZSA9IHByb2dyYW0uYXR0cmlidXRlRGF0YVtqJDFdLnNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghYXR0cmlidXRlc1tqJDFdLnNpemUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKChcIlBJWEkgR2VvbWV0cnkgYXR0cmlidXRlICdcIiArIGokMSArIFwiJyBzaXplIGNhbm5vdCBiZSBkZXRlcm1pbmVkIChsaWtlbHkgdGhlIGJvdW5kIHNoYWRlciBkb2VzIG5vdCBoYXZlIHRoZSBhdHRyaWJ1dGUpXCIpKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGVtcFN0cmlkZVthdHRyaWJ1dGVzW2okMV0uYnVmZmVyXSArPSBhdHRyaWJ1dGVzW2okMV0uc2l6ZSAqIGJ5dGVTaXplTWFwJDFbYXR0cmlidXRlc1tqJDFdLnR5cGVdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiQyIGluIGF0dHJpYnV0ZXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2okMl07XG4gICAgICAgICAgICB2YXIgYXR0cmliU2l6ZSA9IGF0dHJpYnV0ZS5zaXplO1xuXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlLnN0cmlkZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmICh0ZW1wU3RyaWRlW2F0dHJpYnV0ZS5idWZmZXJdID09PSBhdHRyaWJTaXplICogYnl0ZVNpemVNYXAkMVthdHRyaWJ1dGUudHlwZV0pXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUuc3RyaWRlID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLnN0cmlkZSA9IHRlbXBTdHJpZGVbYXR0cmlidXRlLmJ1ZmZlcl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlLnN0YXJ0ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlLnN0YXJ0ID0gdGVtcFN0YXJ0W2F0dHJpYnV0ZS5idWZmZXJdO1xuXG4gICAgICAgICAgICAgICAgdGVtcFN0YXJ0W2F0dHJpYnV0ZS5idWZmZXJdICs9IGF0dHJpYlNpemUgKiBieXRlU2l6ZU1hcCQxW2F0dHJpYnV0ZS50eXBlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhbyA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XG5cbiAgICAgICAgZ2wuYmluZFZlcnRleEFycmF5KHZhbyk7XG5cbiAgICAgICAgLy8gZmlyc3QgdXBkYXRlIC0gYW5kIGNyZWF0ZSB0aGUgYnVmZmVycyFcbiAgICAgICAgLy8gb25seSBjcmVhdGUgYSBnbCBidWZmZXIgaWYgaXQgYWN0dWFsbHkgZ2V0c1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWJ1ZmZlci5fZ2xCdWZmZXJzW0NPTlRFWFRfVUlEXSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBidWZmZXIuX2dsQnVmZmVyc1tDT05URVhUX1VJRF0gPSBuZXcgR0xCdWZmZXIoZ2wuY3JlYXRlQnVmZmVyKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMubWFuYWdlZEJ1ZmZlcnNbYnVmZmVyLmlkXSA9IGJ1ZmZlcjtcbiAgICAgICAgICAgICAgICBidWZmZXIuZGlzcG9zZVJ1bm5lci5hZGQodGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJ1ZmZlci5fZ2xCdWZmZXJzW0NPTlRFWFRfVUlEXS5yZWZDb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETyAtIG1heWJlIG1ha2UgdGhpcyBhIGRhdGEgb2JqZWN0P1xuICAgICAgICAvLyBsZXRzIHdhaXQgdG8gc2VlIGlmIHdlIG5lZWQgdG8gZmlyc3QhXG5cbiAgICAgICAgdGhpcy5hY3RpdmF0ZVZhbyhnZW9tZXRyeSwgcHJvZ3JhbSk7XG5cbiAgICAgICAgdGhpcy5fYWN0aXZlVmFvID0gdmFvO1xuXG4gICAgICAgIC8vIGFkZCBpdCB0byB0aGUgY2FjaGUhXG4gICAgICAgIHZhb09iamVjdEhhc2hbcHJvZ3JhbS5pZF0gPSB2YW87XG4gICAgICAgIHZhb09iamVjdEhhc2hbc2lnbmF0dXJlXSA9IHZhbztcblxuICAgICAgICByZXR1cm4gdmFvO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlcyBidWZmZXJcbiAgICAgKiBAcGFyYW0ge1BJWEkuQnVmZmVyfSBidWZmZXIgYnVmZmVyIHdpdGggZGF0YVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbnRleHRMb3N0PWZhbHNlXSBJZiBjb250ZXh0IHdhcyBsb3N0LCB3ZSBzdXBwcmVzcyBkZWxldGVWZXJ0ZXhBcnJheVxuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5kaXNwb3NlQnVmZmVyID0gZnVuY3Rpb24gZGlzcG9zZUJ1ZmZlciAoYnVmZmVyLCBjb250ZXh0TG9zdClcbiAgICB7XG4gICAgICAgIGlmICghdGhpcy5tYW5hZ2VkQnVmZmVyc1tidWZmZXIuaWRdKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgdGhpcy5tYW5hZ2VkQnVmZmVyc1tidWZmZXIuaWRdO1xuXG4gICAgICAgIHZhciBnbEJ1ZmZlciA9IGJ1ZmZlci5fZ2xCdWZmZXJzW3RoaXMuQ09OVEVYVF9VSURdO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgIGJ1ZmZlci5kaXNwb3NlUnVubmVyLnJlbW92ZSh0aGlzKTtcblxuICAgICAgICBpZiAoIWdsQnVmZmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRleHRMb3N0KVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC5kZWxldGVCdWZmZXIoZ2xCdWZmZXIuYnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBidWZmZXIuX2dsQnVmZmVyc1t0aGlzLkNPTlRFWFRfVUlEXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGlzcG9zZXMgZ2VvbWV0cnlcbiAgICAgKiBAcGFyYW0ge1BJWEkuR2VvbWV0cnl9IGdlb21ldHJ5IEdlb21ldHJ5IHdpdGggYnVmZmVycy4gT25seSBWQU8gd2lsbCBiZSBkaXNwb3NlZFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbnRleHRMb3N0PWZhbHNlXSBJZiBjb250ZXh0IHdhcyBsb3N0LCB3ZSBzdXBwcmVzcyBkZWxldGVWZXJ0ZXhBcnJheVxuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5kaXNwb3NlR2VvbWV0cnkgPSBmdW5jdGlvbiBkaXNwb3NlR2VvbWV0cnkgKGdlb21ldHJ5LCBjb250ZXh0TG9zdClcbiAgICB7XG4gICAgICAgIGlmICghdGhpcy5tYW5hZ2VkR2VvbWV0cmllc1tnZW9tZXRyeS5pZF0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLm1hbmFnZWRHZW9tZXRyaWVzW2dlb21ldHJ5LmlkXTtcblxuICAgICAgICB2YXIgdmFvcyA9IGdlb21ldHJ5LmdsVmVydGV4QXJyYXlPYmplY3RzW3RoaXMuQ09OVEVYVF9VSURdO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgYnVmZmVycyA9IGdlb21ldHJ5LmJ1ZmZlcnM7XG5cbiAgICAgICAgZ2VvbWV0cnkuZGlzcG9zZVJ1bm5lci5yZW1vdmUodGhpcyk7XG5cbiAgICAgICAgaWYgKCF2YW9zKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBidWYgPSBidWZmZXJzW2ldLl9nbEJ1ZmZlcnNbdGhpcy5DT05URVhUX1VJRF07XG5cbiAgICAgICAgICAgIGJ1Zi5yZWZDb3VudC0tO1xuICAgICAgICAgICAgaWYgKGJ1Zi5yZWZDb3VudCA9PT0gMCAmJiAhY29udGV4dExvc3QpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlQnVmZmVyKGJ1ZmZlcnNbaV0sIGNvbnRleHRMb3N0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGV4dExvc3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvciAodmFyIHZhb0lkIGluIHZhb3MpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlIG9ubHkgc2lnbmF0dXJlcywgZXZlcnl0aGluZyBlbHNlIGFyZSBjb3BpZXNcbiAgICAgICAgICAgICAgICBpZiAodmFvSWRbMF0gPT09ICdnJylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YW8gPSB2YW9zW3Zhb0lkXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlVmFvID09PSB2YW8pXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ2wuZGVsZXRlVmVydGV4QXJyYXkodmFvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgZ2VvbWV0cnkuZ2xWZXJ0ZXhBcnJheU9iamVjdHNbdGhpcy5DT05URVhUX1VJRF07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGRpc3Bvc2UgYWxsIFdlYkdMIHJlc291cmNlcyBvZiBhbGwgbWFuYWdlZCBnZW9tZXRyaWVzIGFuZCBidWZmZXJzXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY29udGV4dExvc3Q9ZmFsc2VdIElmIGNvbnRleHQgd2FzIGxvc3QsIHdlIHN1cHByZXNzIGBnbC5kZWxldGVgIGNhbGxzXG4gICAgICovXG4gICAgR2VvbWV0cnlTeXN0ZW0ucHJvdG90eXBlLmRpc3Bvc2VBbGwgPSBmdW5jdGlvbiBkaXNwb3NlQWxsIChjb250ZXh0TG9zdClcbiAgICB7XG4gICAgICAgIHZhciBhbGwgPSBPYmplY3Qua2V5cyh0aGlzLm1hbmFnZWRHZW9tZXRyaWVzKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbC5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NlR2VvbWV0cnkodGhpcy5tYW5hZ2VkR2VvbWV0cmllc1thbGxbaV1dLCBjb250ZXh0TG9zdCk7XG4gICAgICAgIH1cbiAgICAgICAgYWxsID0gT2JqZWN0LmtleXModGhpcy5tYW5hZ2VkQnVmZmVycyk7XG4gICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGFsbC5sZW5ndGg7IGkkMSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2VCdWZmZXIodGhpcy5tYW5hZ2VkQnVmZmVyc1thbGxbaSQxXV0sIGNvbnRleHRMb3N0KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZSB2ZXJ0ZXggYXJyYXkgb2JqZWN0XG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtQSVhJLkdlb21ldHJ5fSBnZW9tZXRyeSAtIEdlb21ldHJ5IGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtQSVhJLlByb2dyYW19IHByb2dyYW0gLSBTaGFkZXIgcHJvZ3JhbSBpbnN0YW5jZVxuICAgICAqL1xuICAgIEdlb21ldHJ5U3lzdGVtLnByb3RvdHlwZS5hY3RpdmF0ZVZhbyA9IGZ1bmN0aW9uIGFjdGl2YXRlVmFvIChnZW9tZXRyeSwgcHJvZ3JhbSlcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIHZhciBDT05URVhUX1VJRCA9IHRoaXMuQ09OVEVYVF9VSUQ7XG4gICAgICAgIHZhciBidWZmZXJzID0gZ2VvbWV0cnkuYnVmZmVycztcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG4gICAgICAgIGlmIChnZW9tZXRyeS5pbmRleEJ1ZmZlcilcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gZmlyc3QgdXBkYXRlIHRoZSBpbmRleCBidWZmZXIgaWYgd2UgaGF2ZSBvbmUuLlxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgZ2VvbWV0cnkuaW5kZXhCdWZmZXIuX2dsQnVmZmVyc1tDT05URVhUX1VJRF0uYnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsYXN0QnVmZmVyID0gbnVsbDtcblxuICAgICAgICAvLyBhZGQgYSBuZXcgb25lIVxuICAgICAgICBmb3IgKHZhciBqIGluIGF0dHJpYnV0ZXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnNbYXR0cmlidXRlLmJ1ZmZlcl07XG4gICAgICAgICAgICB2YXIgZ2xCdWZmZXIgPSBidWZmZXIuX2dsQnVmZmVyc1tDT05URVhUX1VJRF07XG5cbiAgICAgICAgICAgIGlmIChwcm9ncmFtLmF0dHJpYnV0ZURhdGFbal0pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RCdWZmZXIgIT09IGdsQnVmZmVyKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGdsQnVmZmVyLmJ1ZmZlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgbGFzdEJ1ZmZlciA9IGdsQnVmZmVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHByb2dyYW0uYXR0cmlidXRlRGF0YVtqXS5sb2NhdGlvbjtcblxuICAgICAgICAgICAgICAgIC8vIFRPRE8gaW50cm9kdWNlIHN0YXRlIGFnYWluXG4gICAgICAgICAgICAgICAgLy8gd2UgY2FuIG9wdGltaXNlIHRoaXMgZm9yIG9sZGVyIGRldmljZXMgdGhhdCBoYXZlIG5vIFZBT3NcbiAgICAgICAgICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShsb2NhdGlvbik7XG5cbiAgICAgICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUuc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLnR5cGUgfHwgZ2wuRkxPQVQsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS5ub3JtYWxpemVkLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUuc3RyaWRlLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUuc3RhcnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gY2FsY3VsYXRlIGluc3RhbmNlIGNvdW50IGJhc2VkIG9mIHRoaXMuLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzSW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnZlcnRleEF0dHJpYkRpdmlzb3IobG9jYXRpb24sIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZW9tZXRyeSBlcnJvciwgR1BVIEluc3RhbmNpbmcgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGRldmljZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERyYXcgdGhlIGdlb21ldHJ5XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHlwZSAtIHRoZSB0eXBlIHByaW1pdGl2ZSB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3NpemVdIC0gdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBiZSByZW5kZXJlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbc3RhcnRdIC0gU3RhcnRpbmcgaW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2luc3RhbmNlQ291bnRdIC0gdGhlIG51bWJlciBvZiBpbnN0YW5jZXMgb2YgdGhlIHNldCBvZiBlbGVtZW50cyB0byBleGVjdXRlXG4gICAgICovXG4gICAgR2VvbWV0cnlTeXN0ZW0ucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiBkcmF3ICh0eXBlLCBzaXplLCBzdGFydCwgaW5zdGFuY2VDb3VudClcbiAgICB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICB2YXIgZ2wgPSByZWYuZ2w7XG4gICAgICAgIHZhciBnZW9tZXRyeSA9IHRoaXMuX2FjdGl2ZUdlb21ldHJ5O1xuXG4gICAgICAgIC8vIFRPRE8uLiB0aGlzIHNob3VsZCBub3QgY2hhbmdlIHNvIG1heWJlIGNhY2hlIHRoZSBmdW5jdGlvbj9cblxuICAgICAgICBpZiAoZ2VvbWV0cnkuaW5kZXhCdWZmZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBieXRlU2l6ZSA9IGdlb21ldHJ5LmluZGV4QnVmZmVyLmRhdGEuQllURVNfUEVSX0VMRU1FTlQ7XG4gICAgICAgICAgICB2YXIgZ2xUeXBlID0gYnl0ZVNpemUgPT09IDIgPyBnbC5VTlNJR05FRF9TSE9SVCA6IGdsLlVOU0lHTkVEX0lOVDtcblxuICAgICAgICAgICAgaWYgKGJ5dGVTaXplID09PSAyIHx8IChieXRlU2l6ZSA9PT0gNCAmJiB0aGlzLmNhblVzZVVJbnQzMkVsZW1lbnRJbmRleCkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKGdlb21ldHJ5Lmluc3RhbmNlZClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICAgICAgICAgICAgICAgICAgZ2wuZHJhd0VsZW1lbnRzSW5zdGFuY2VkKHR5cGUsIHNpemUgfHwgZ2VvbWV0cnkuaW5kZXhCdWZmZXIuZGF0YS5sZW5ndGgsIGdsVHlwZSwgKHN0YXJ0IHx8IDApICogYnl0ZVNpemUsIGluc3RhbmNlQ291bnQgfHwgMSk7XG4gICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgICAgICAgICAgICAgICAgIGdsLmRyYXdFbGVtZW50cyh0eXBlLCBzaXplIHx8IGdlb21ldHJ5LmluZGV4QnVmZmVyLmRhdGEubGVuZ3RoLCBnbFR5cGUsIChzdGFydCB8fCAwKSAqIGJ5dGVTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigndW5zdXBwb3J0ZWQgaW5kZXggYnVmZmVyIHR5cGU6IHVpbnQzMicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGdlb21ldHJ5Lmluc3RhbmNlZClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVE9ETyBuZWVkIGEgYmV0dGVyIHdheSB0byBjYWxjdWxhdGUgc2l6ZS4uXG4gICAgICAgICAgICBnbC5kcmF3QXJyYXlzSW5zdGFuY2VkKHR5cGUsIHN0YXJ0LCBzaXplIHx8IGdlb21ldHJ5LmdldFNpemUoKSwgaW5zdGFuY2VDb3VudCB8fCAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLmRyYXdBcnJheXModHlwZSwgc3RhcnQsIHNpemUgfHwgZ2VvbWV0cnkuZ2V0U2l6ZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVbmJpbmQvcmVzZXQgZXZlcnl0aGluZ1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBHZW9tZXRyeVN5c3RlbS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kICgpXG4gICAge1xuICAgICAgICB0aGlzLmdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcbiAgICAgICAgdGhpcy5fYWN0aXZlVmFvID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYWN0aXZlR2VvbWV0cnkgPSBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gR2VvbWV0cnlTeXN0ZW07XG59KFN5c3RlbSkpO1xuXG4vKipcbiAqIEBtZXRob2QgY29tcGlsZVByb2dyYW1cbiAqIEBwcml2YXRlXG4gKiBAbWVtYmVyb2YgUElYSS5nbENvcmUuc2hhZGVyXG4gKiBAcGFyYW0gZ2wge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gVGhlIGN1cnJlbnQgV2ViR0wgY29udGV4dCB7V2ViR0xQcm9ncmFtfVxuICogQHBhcmFtIHZlcnRleFNyYyB7c3RyaW5nfHN0cmluZ1tdfSBUaGUgdmVydGV4IHNoYWRlciBzb3VyY2UgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqIEBwYXJhbSBmcmFnbWVudFNyYyB7c3RyaW5nfHN0cmluZ1tdfSBUaGUgZnJhZ21lbnQgc2hhZGVyIHNvdXJjZSBhcyBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICogQHBhcmFtIGF0dHJpYnV0ZUxvY2F0aW9ucyB7T2JqZWN0fSBBbiBhdHRyaWJ1dGUgbG9jYXRpb24gbWFwIHRoYXQgbGV0cyB5b3UgbWFudWFsbHkgc2V0IHRoZSBhdHRyaWJ1dGUgbG9jYXRpb25zXG4gKiBAcmV0dXJuIHtXZWJHTFByb2dyYW19IHRoZSBzaGFkZXIgcHJvZ3JhbVxuICovXG5mdW5jdGlvbiBjb21waWxlUHJvZ3JhbShnbCwgdmVydGV4U3JjLCBmcmFnbWVudFNyYywgYXR0cmlidXRlTG9jYXRpb25zKVxue1xuICAgIHZhciBnbFZlcnRTaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBnbC5WRVJURVhfU0hBREVSLCB2ZXJ0ZXhTcmMpO1xuICAgIHZhciBnbEZyYWdTaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIGZyYWdtZW50U3JjKTtcblxuICAgIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGdsVmVydFNoYWRlcik7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGdsRnJhZ1NoYWRlcik7XG5cbiAgICAvLyBvcHRpb25hbGx5LCBzZXQgdGhlIGF0dHJpYnV0ZXMgbWFudWFsbHkgZm9yIHRoZSBwcm9ncmFtIHJhdGhlciB0aGFuIGxldHRpbmcgV2ViR0wgZGVjaWRlLi5cbiAgICBpZiAoYXR0cmlidXRlTG9jYXRpb25zKVxuICAgIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBhdHRyaWJ1dGVMb2NhdGlvbnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLmJpbmRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBhdHRyaWJ1dGVMb2NhdGlvbnNbaV0sIGkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG5cbiAgICAvLyBpZiBsaW5raW5nIGZhaWxzLCB0aGVuIGxvZyBhbmQgY2xlYW51cFxuICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpXG4gICAge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdQaXhpLmpzIEVycm9yOiBDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaGFkZXIuJyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2dsLlZBTElEQVRFX1NUQVRVUycsIGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuVkFMSURBVEVfU1RBVFVTKSk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2dsLmdldEVycm9yKCknLCBnbC5nZXRFcnJvcigpKTtcblxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIHByb2dyYW0gaW5mbyBsb2csIGxvZyBpdFxuICAgICAgICBpZiAoZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkgIT09ICcnKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BpeGkuanMgV2FybmluZzogZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coKScsIGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdsLmRlbGV0ZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgICAgIHByb2dyYW0gPSBudWxsO1xuICAgIH1cblxuICAgIC8vIGNsZWFuIHVwIHNvbWUgc2hhZGVyc1xuICAgIGdsLmRlbGV0ZVNoYWRlcihnbFZlcnRTaGFkZXIpO1xuICAgIGdsLmRlbGV0ZVNoYWRlcihnbEZyYWdTaGFkZXIpO1xuXG4gICAgcmV0dXJuIHByb2dyYW07XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBnbCB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBUaGUgY3VycmVudCBXZWJHTCBjb250ZXh0IHtXZWJHTFByb2dyYW19XG4gKiBAcGFyYW0gdHlwZSB7TnVtYmVyfSB0aGUgdHlwZSwgY2FuIGJlIGVpdGhlciBWRVJURVhfU0hBREVSIG9yIEZSQUdNRU5UX1NIQURFUlxuICogQHBhcmFtIHZlcnRleFNyYyB7c3RyaW5nfHN0cmluZ1tdfSBUaGUgdmVydGV4IHNoYWRlciBzb3VyY2UgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqIEByZXR1cm4ge1dlYkdMU2hhZGVyfSB0aGUgc2hhZGVyXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGVTaGFkZXIoZ2wsIHR5cGUsIHNyYylcbntcbiAgICB2YXIgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpO1xuXG4gICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc3JjKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSlcbiAgICB7XG4gICAgICAgIGNvbnNvbGUud2FybihzcmMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKSk7XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYWRlcjtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGRlZmF1bHRWYWx1ZVxuICogQG1lbWJlcm9mIFBJWEkuZ2xDb3JlLnNoYWRlclxuICogQHBhcmFtIHR5cGUge1N0cmluZ30gVHlwZSBvZiB2YWx1ZVxuICogQHBhcmFtIHNpemUge051bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRWYWx1ZSh0eXBlLCBzaXplKVxue1xuICAgIHN3aXRjaCAodHlwZSlcbiAgICB7XG4gICAgICAgIGNhc2UgJ2Zsb2F0JzpcbiAgICAgICAgICAgIHJldHVybiAwO1xuXG4gICAgICAgIGNhc2UgJ3ZlYzInOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMiAqIHNpemUpO1xuXG4gICAgICAgIGNhc2UgJ3ZlYzMnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMyAqIHNpemUpO1xuXG4gICAgICAgIGNhc2UgJ3ZlYzQnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNCAqIHNpemUpO1xuXG4gICAgICAgIGNhc2UgJ2ludCc6XG4gICAgICAgIGNhc2UgJ3NhbXBsZXIyRCc6XG4gICAgICAgIGNhc2UgJ3NhbXBsZXIyREFycmF5JzpcbiAgICAgICAgICAgIHJldHVybiAwO1xuXG4gICAgICAgIGNhc2UgJ2l2ZWMyJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheSgyICogc2l6ZSk7XG5cbiAgICAgICAgY2FzZSAnaXZlYzMnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDMgKiBzaXplKTtcblxuICAgICAgICBjYXNlICdpdmVjNCc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEludDMyQXJyYXkoNCAqIHNpemUpO1xuXG4gICAgICAgIGNhc2UgJ2Jvb2wnOlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGNhc2UgJ2J2ZWMyJzpcblxuICAgICAgICAgICAgcmV0dXJuIGJvb2xlYW5BcnJheSgyICogc2l6ZSk7XG5cbiAgICAgICAgY2FzZSAnYnZlYzMnOlxuICAgICAgICAgICAgcmV0dXJuIGJvb2xlYW5BcnJheSgzICogc2l6ZSk7XG5cbiAgICAgICAgY2FzZSAnYnZlYzQnOlxuICAgICAgICAgICAgcmV0dXJuIGJvb2xlYW5BcnJheSg0ICogc2l6ZSk7XG5cbiAgICAgICAgY2FzZSAnbWF0Mic6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbMSwgMCxcbiAgICAgICAgICAgICAgICAwLCAxXSk7XG5cbiAgICAgICAgY2FzZSAnbWF0Myc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbMSwgMCwgMCxcbiAgICAgICAgICAgICAgICAwLCAxLCAwLFxuICAgICAgICAgICAgICAgIDAsIDAsIDFdKTtcblxuICAgICAgICBjYXNlICdtYXQ0JzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFsxLCAwLCAwLCAwLFxuICAgICAgICAgICAgICAgIDAsIDEsIDAsIDAsXG4gICAgICAgICAgICAgICAgMCwgMCwgMSwgMCxcbiAgICAgICAgICAgICAgICAwLCAwLCAwLCAxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGJvb2xlYW5BcnJheShzaXplKVxue1xuICAgIHZhciBhcnJheSA9IG5ldyBBcnJheShzaXplKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspXG4gICAge1xuICAgICAgICBhcnJheVtpXSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn1cblxudmFyIHVua25vd25Db250ZXh0ID0ge307XG52YXIgY29udGV4dCA9IHVua25vd25Db250ZXh0O1xuXG4vKipcbiAqIHJldHVybnMgYSBsaXR0bGUgV2ViR0wgY29udGV4dCB0byB1c2UgZm9yIHByb2dyYW0gaW5zcGVjdGlvbi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge3dlYkdMLWNvbnRleHR9IGEgZ2wgY29udGV4dCB0byB0ZXN0IHdpdGhcbiAqL1xuZnVuY3Rpb24gZ2V0VGVzdENvbnRleHQoKVxue1xuICAgIGlmIChjb250ZXh0ID09PSB1bmtub3duQ29udGV4dCB8fCBjb250ZXh0LmlzQ29udGV4dExvc3QoKSlcbiAgICB7XG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgICAgICB2YXIgZ2w7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLlBSRUZFUl9FTlYgPj0gRU5WLldFQkdMMilcbiAgICAgICAge1xuICAgICAgICAgICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wyJywge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFnbClcbiAgICAgICAge1xuICAgICAgICAgICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCB7fSlcbiAgICAgICAgICAgIHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCB7fSk7XG5cbiAgICAgICAgICAgIGlmICghZ2wpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gZmFpbCwgbm90IGFibGUgdG8gZ2V0IGEgY29udGV4dFxuICAgICAgICAgICAgICAgIGdsID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBmb3Igc2hhZGVyIHRlc3RpbmcuLlxuICAgICAgICAgICAgICAgIGdsLmdldEV4dGVuc2lvbignV0VCR0xfZHJhd19idWZmZXJzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0ID0gZ2w7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG59XG5cbnZhciBtYXhGcmFnbWVudFByZWNpc2lvbjtcblxuZnVuY3Rpb24gZ2V0TWF4RnJhZ21lbnRQcmVjaXNpb24oKVxue1xuICAgIGlmICghbWF4RnJhZ21lbnRQcmVjaXNpb24pXG4gICAge1xuICAgICAgICBtYXhGcmFnbWVudFByZWNpc2lvbiA9IFBSRUNJU0lPTi5NRURJVU07XG4gICAgICAgIHZhciBnbCA9IGdldFRlc3RDb250ZXh0KCk7XG5cbiAgICAgICAgaWYgKGdsKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBzaGFkZXJGcmFnbWVudCA9IGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5GUkFHTUVOVF9TSEFERVIsIGdsLkhJR0hfRkxPQVQpO1xuXG4gICAgICAgICAgICAgICAgbWF4RnJhZ21lbnRQcmVjaXNpb24gPSBzaGFkZXJGcmFnbWVudC5wcmVjaXNpb24gPyBQUkVDSVNJT04uSElHSCA6IFBSRUNJU0lPTi5NRURJVU07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF4RnJhZ21lbnRQcmVjaXNpb247XG59XG5cbi8qKlxuICogU2V0cyB0aGUgZmxvYXQgcHJlY2lzaW9uIG9uIHRoZSBzaGFkZXIsIGVuc3VyaW5nIHRoZSBkZXZpY2Ugc3VwcG9ydHMgdGhlIHJlcXVlc3QgcHJlY2lzaW9uLlxuICogSWYgdGhlIHByZWNpc2lvbiBpcyBhbHJlYWR5IHByZXNlbnQsIGl0IGp1c3QgZW5zdXJlcyB0aGF0IHRoZSBkZXZpY2UgaXMgYWJsZSB0byBoYW5kbGUgaXQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgLSBUaGUgc2hhZGVyIHNvdXJjZVxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFByZWNpc2lvbiAtIFRoZSByZXF1ZXN0IGZsb2F0IHByZWNpc2lvbiBvZiB0aGUgc2hhZGVyLiBPcHRpb25zIGFyZSAnbG93cCcsICdtZWRpdW1wJyBvciAnaGlnaHAnLlxuICogQHBhcmFtIHtzdHJpbmd9IG1heFN1cHBvcnRlZFByZWNpc2lvbiAtIFRoZSBtYXhpbXVtIHByZWNpc2lvbiB0aGUgc2hhZGVyIHN1cHBvcnRzLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gbW9kaWZpZWQgc2hhZGVyIHNvdXJjZVxuICovXG5mdW5jdGlvbiBzZXRQcmVjaXNpb24oc3JjLCByZXF1ZXN0ZWRQcmVjaXNpb24sIG1heFN1cHBvcnRlZFByZWNpc2lvbilcbntcbiAgICBpZiAoc3JjLnN1YnN0cmluZygwLCA5KSAhPT0gJ3ByZWNpc2lvbicpXG4gICAge1xuICAgICAgICAvLyBubyBwcmVjaXNpb24gc3VwcGxpZWQsIHNvIFBpeGlKUyB3aWxsIGFkZCB0aGUgcmVxdWVzdGVkIGxldmVsLlxuICAgICAgICB2YXIgcHJlY2lzaW9uID0gcmVxdWVzdGVkUHJlY2lzaW9uO1xuXG4gICAgICAgIC8vIElmIGhpZ2hwIGlzIHJlcXVlc3RlZCBidXQgbm90IHN1cHBvcnRlZCwgZG93bmdyYWRlIHByZWNpc2lvbiB0byBhIGxldmVsIGFsbCBkZXZpY2VzIHN1cHBvcnQuXG4gICAgICAgIGlmIChyZXF1ZXN0ZWRQcmVjaXNpb24gPT09IFBSRUNJU0lPTi5ISUdIICYmIG1heFN1cHBvcnRlZFByZWNpc2lvbiAhPT0gUFJFQ0lTSU9OLkhJR0gpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByZWNpc2lvbiA9IFBSRUNJU0lPTi5NRURJVU07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFwicHJlY2lzaW9uIFwiICsgcHJlY2lzaW9uICsgXCIgZmxvYXQ7XFxuXCIgKyBzcmMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChtYXhTdXBwb3J0ZWRQcmVjaXNpb24gIT09IFBSRUNJU0lPTi5ISUdIICYmIHNyYy5zdWJzdHJpbmcoMCwgMTUpID09PSAncHJlY2lzaW9uIGhpZ2hwJylcbiAgICB7XG4gICAgICAgIC8vIHByZWNpc2lvbiB3YXMgc3VwcGxpZWQsIGJ1dCBhdCBhIGxldmVsIHRoaXMgZGV2aWNlIGRvZXMgbm90IHN1cHBvcnQsIHNvIGRvd25ncmFkaW5nIHRvIG1lZGl1bXAuXG4gICAgICAgIHJldHVybiBzcmMucmVwbGFjZSgncHJlY2lzaW9uIGhpZ2hwJywgJ3ByZWNpc2lvbiBtZWRpdW1wJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNyYztcbn1cblxudmFyIEdMU0xfVE9fU0laRSA9IHtcbiAgICBmbG9hdDogICAgMSxcbiAgICB2ZWMyOiAgICAgMixcbiAgICB2ZWMzOiAgICAgMyxcbiAgICB2ZWM0OiAgICAgNCxcblxuICAgIGludDogICAgICAxLFxuICAgIGl2ZWMyOiAgICAyLFxuICAgIGl2ZWMzOiAgICAzLFxuICAgIGl2ZWM0OiAgICA0LFxuXG4gICAgYm9vbDogICAgIDEsXG4gICAgYnZlYzI6ICAgIDIsXG4gICAgYnZlYzM6ICAgIDMsXG4gICAgYnZlYzQ6ICAgIDQsXG5cbiAgICBtYXQyOiAgICAgNCxcbiAgICBtYXQzOiAgICAgOSxcbiAgICBtYXQ0OiAgICAgMTYsXG5cbiAgICBzYW1wbGVyMkQ6ICAxLFxufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQG1ldGhvZCBtYXBTaXplXG4gKiBAbWVtYmVyb2YgUElYSS5nbENvcmUuc2hhZGVyXG4gKiBAcGFyYW0gdHlwZSB7U3RyaW5nfVxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5mdW5jdGlvbiBtYXBTaXplKHR5cGUpXG57XG4gICAgcmV0dXJuIEdMU0xfVE9fU0laRVt0eXBlXTtcbn1cblxudmFyIEdMX1RBQkxFID0gbnVsbDtcblxudmFyIEdMX1RPX0dMU0xfVFlQRVMgPSB7XG4gICAgRkxPQVQ6ICAgICAgICdmbG9hdCcsXG4gICAgRkxPQVRfVkVDMjogICd2ZWMyJyxcbiAgICBGTE9BVF9WRUMzOiAgJ3ZlYzMnLFxuICAgIEZMT0FUX1ZFQzQ6ICAndmVjNCcsXG5cbiAgICBJTlQ6ICAgICAgICAgJ2ludCcsXG4gICAgSU5UX1ZFQzI6ICAgICdpdmVjMicsXG4gICAgSU5UX1ZFQzM6ICAgICdpdmVjMycsXG4gICAgSU5UX1ZFQzQ6ICAgICdpdmVjNCcsXG5cbiAgICBCT09MOiAgICAgICAgJ2Jvb2wnLFxuICAgIEJPT0xfVkVDMjogICAnYnZlYzInLFxuICAgIEJPT0xfVkVDMzogICAnYnZlYzMnLFxuICAgIEJPT0xfVkVDNDogICAnYnZlYzQnLFxuXG4gICAgRkxPQVRfTUFUMjogICdtYXQyJyxcbiAgICBGTE9BVF9NQVQzOiAgJ21hdDMnLFxuICAgIEZMT0FUX01BVDQ6ICAnbWF0NCcsXG5cbiAgICBTQU1QTEVSXzJEOiAgJ3NhbXBsZXIyRCcsXG4gICAgU0FNUExFUl9DVUJFOiAgJ3NhbXBsZXJDdWJlJyxcbiAgICBTQU1QTEVSXzJEX0FSUkFZOiAgJ3NhbXBsZXIyREFycmF5Jyxcbn07XG5cbmZ1bmN0aW9uIG1hcFR5cGUoZ2wsIHR5cGUpXG57XG4gICAgaWYgKCFHTF9UQUJMRSlcbiAgICB7XG4gICAgICAgIHZhciB0eXBlTmFtZXMgPSBPYmplY3Qua2V5cyhHTF9UT19HTFNMX1RZUEVTKTtcblxuICAgICAgICBHTF9UQUJMRSA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZU5hbWVzLmxlbmd0aDsgKytpKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgdG4gPSB0eXBlTmFtZXNbaV07XG5cbiAgICAgICAgICAgIEdMX1RBQkxFW2dsW3RuXV0gPSBHTF9UT19HTFNMX1RZUEVTW3RuXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBHTF9UQUJMRVt0eXBlXTtcbn1cblxuLy8gY3YgPSBDYWNoZWRWYWx1ZVxuLy8gdiA9IHZhbHVlXG4vLyB1ZCA9IHVuaWZvcm1EYXRhXG4vLyB1diA9IHVuaWZvcm1WYWx1ZVxuLy8gbCA9IGxvY2F0aW9uXG52YXIgR0xTTF9UT19TSU5HTEVfU0VUVEVSU19DQUNIRUQgPSB7XG5cbiAgICBmbG9hdDogXCJcXG4gICAgaWYoY3YgIT09IHYpXFxuICAgIHtcXG4gICAgICAgIGN2LnYgPSB2O1xcbiAgICAgICAgZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB2KVxcbiAgICB9XCIsXG5cbiAgICB2ZWMyOiBcIlxcbiAgICBpZihjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSlcXG4gICAge1xcbiAgICAgICAgY3ZbMF0gPSB2WzBdO1xcbiAgICAgICAgY3ZbMV0gPSB2WzFdO1xcbiAgICAgICAgZ2wudW5pZm9ybTJmKGxvY2F0aW9uLCB2WzBdLCB2WzFdKVxcbiAgICB9XCIsXG5cbiAgICB2ZWMzOiBcIlxcbiAgICBpZihjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSB8fCBjdlsyXSAhPT0gdlsyXSlcXG4gICAge1xcbiAgICAgICAgY3ZbMF0gPSB2WzBdO1xcbiAgICAgICAgY3ZbMV0gPSB2WzFdO1xcbiAgICAgICAgY3ZbMl0gPSB2WzJdO1xcblxcbiAgICAgICAgZ2wudW5pZm9ybTNmKGxvY2F0aW9uLCB2WzBdLCB2WzFdLCB2WzJdKVxcbiAgICB9XCIsXG5cbiAgICB2ZWM0OiAgICAgJ2dsLnVuaWZvcm00Zihsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSwgdlszXSknLFxuXG4gICAgaW50OiAgICAgICdnbC51bmlmb3JtMWkobG9jYXRpb24sIHYpJyxcbiAgICBpdmVjMjogICAgJ2dsLnVuaWZvcm0yaShsb2NhdGlvbiwgdlswXSwgdlsxXSknLFxuICAgIGl2ZWMzOiAgICAnZ2wudW5pZm9ybTNpKGxvY2F0aW9uLCB2WzBdLCB2WzFdLCB2WzJdKScsXG4gICAgaXZlYzQ6ICAgICdnbC51bmlmb3JtNGkobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0sIHZbM10pJyxcblxuICAgIGJvb2w6ICAgICAnZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCB2KScsXG4gICAgYnZlYzI6ICAgICdnbC51bmlmb3JtMmkobG9jYXRpb24sIHZbMF0sIHZbMV0pJyxcbiAgICBidmVjMzogICAgJ2dsLnVuaWZvcm0zaShsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSknLFxuICAgIGJ2ZWM0OiAgICAnZ2wudW5pZm9ybTRpKGxvY2F0aW9uLCB2WzBdLCB2WzFdLCB2WzJdLCB2WzNdKScsXG5cbiAgICBtYXQyOiAgICAgJ2dsLnVuaWZvcm1NYXRyaXgyZnYobG9jYXRpb24sIGZhbHNlLCB2KScsXG4gICAgbWF0MzogICAgICdnbC51bmlmb3JtTWF0cml4M2Z2KGxvY2F0aW9uLCBmYWxzZSwgdiknLFxuICAgIG1hdDQ6ICAgICAnZ2wudW5pZm9ybU1hdHJpeDRmdihsb2NhdGlvbiwgZmFsc2UsIHYpJyxcblxuICAgIHNhbXBsZXIyRDogICAgICAnZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCB2KScsXG4gICAgc2FtcGxlckN1YmU6ICAgICdnbC51bmlmb3JtMWkobG9jYXRpb24sIHYpJyxcbiAgICBzYW1wbGVyMkRBcnJheTogJ2dsLnVuaWZvcm0xaShsb2NhdGlvbiwgdiknLFxufTtcblxudmFyIEdMU0xfVE9fQVJSQVlfU0VUVEVSUyA9IHtcblxuICAgIGZsb2F0OiAgICBcImdsLnVuaWZvcm0xZnYobG9jYXRpb24sIHYpXCIsXG5cbiAgICB2ZWMyOiAgICAgXCJnbC51bmlmb3JtMmZ2KGxvY2F0aW9uLCB2KVwiLFxuICAgIHZlYzM6ICAgICBcImdsLnVuaWZvcm0zZnYobG9jYXRpb24sIHYpXCIsXG4gICAgdmVjNDogICAgICdnbC51bmlmb3JtNGZ2KGxvY2F0aW9uLCB2KScsXG5cbiAgICBtYXQ0OiAgICAgJ2dsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2KScsXG4gICAgbWF0MzogICAgICdnbC51bmlmb3JtTWF0cml4M2Z2KGxvY2F0aW9uLCBmYWxzZSwgdiknLFxuICAgIG1hdDI6ICAgICAnZ2wudW5pZm9ybU1hdHJpeDJmdihsb2NhdGlvbiwgZmFsc2UsIHYpJyxcblxuICAgIGludDogICAgICAnZ2wudW5pZm9ybTFpdihsb2NhdGlvbiwgdiknLFxuICAgIGl2ZWMyOiAgICAnZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdiknLFxuICAgIGl2ZWMzOiAgICAnZ2wudW5pZm9ybTNpdihsb2NhdGlvbiwgdiknLFxuICAgIGl2ZWM0OiAgICAnZ2wudW5pZm9ybTRpdihsb2NhdGlvbiwgdiknLFxuXG4gICAgYm9vbDogICAgICdnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2KScsXG4gICAgYnZlYzI6ICAgICdnbC51bmlmb3JtMml2KGxvY2F0aW9uLCB2KScsXG4gICAgYnZlYzM6ICAgICdnbC51bmlmb3JtM2l2KGxvY2F0aW9uLCB2KScsXG4gICAgYnZlYzQ6ICAgICdnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2KScsXG5cbiAgICBzYW1wbGVyMkQ6ICAgICAgJ2dsLnVuaWZvcm0xaXYobG9jYXRpb24sIHYpJyxcbiAgICBzYW1wbGVyQ3ViZTogICAgJ2dsLnVuaWZvcm0xaXYobG9jYXRpb24sIHYpJyxcbiAgICBzYW1wbGVyMkRBcnJheTogJ2dsLnVuaWZvcm0xaXYobG9jYXRpb24sIHYpJyxcbn07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVW5pZm9ybXNTeW5jKGdyb3VwLCB1bmlmb3JtRGF0YSlcbntcbiAgICB2YXIgdGV4dHVyZUNvdW50ID0gMDtcbiAgICB2YXIgZnVuYyA9IFwidmFyIHYgPSBudWxsO1xcbiAgICB2YXIgY3YgPSBudWxsXFxuICAgIHZhciBnbCA9IHJlbmRlcmVyLmdsXCI7XG5cbiAgICBmb3IgKHZhciBpIGluIGdyb3VwLnVuaWZvcm1zKVxuICAgIHtcbiAgICAgICAgdmFyIGRhdGEgPSB1bmlmb3JtRGF0YVtpXTtcblxuICAgICAgICBpZiAoIWRhdGEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChncm91cC51bmlmb3Jtc1tpXS5ncm91cClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmdW5jICs9IFwiXFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5zaGFkZXIuc3luY1VuaWZvcm1Hcm91cCh1di5cIiArIGkgKyBcIik7XFxuICAgICAgICAgICAgICAgIFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE8gJiYgdW5pZm9ybURhdGFbaV0udmFsdWUgIT09IDAgPC0tIGRvIHdlIHN0aWxsIG5lZWQgdGhpcz9cbiAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gJ2Zsb2F0JyAmJiBkYXRhLnNpemUgPT09IDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZ1bmMgKz0gXCJcXG4gICAgICAgICAgICBpZih1di5cIiArIGkgKyBcIiAhPT0gdWQuXCIgKyBpICsgXCIudmFsdWUpXFxuICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICB1ZC5cIiArIGkgKyBcIi52YWx1ZSA9IHV2LlwiICsgaSArIFwiXFxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih1ZC5cIiArIGkgKyBcIi5sb2NhdGlvbiwgdXYuXCIgKyBpICsgXCIpXFxuICAgICAgICAgICAgfVxcblwiO1xuICAgICAgICB9XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICAgICAgZWxzZSBpZiAoKGRhdGEudHlwZSA9PT0gJ3NhbXBsZXIyRCcgfHwgZGF0YS50eXBlID09PSAnc2FtcGxlckN1YmUnIHx8IGRhdGEudHlwZSA9PT0gJ3NhbXBsZXIyREFycmF5JykgJiYgZGF0YS5zaXplID09PSAxICYmICFkYXRhLmlzQXJyYXkpXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICAgICAge1xuICAgICAgICAgICAgZnVuYyArPSBcIlxcbiAgICAgICAgICAgIHJlbmRlcmVyLnRleHR1cmUuYmluZCh1di5cIiArIGkgKyBcIiwgXCIgKyB0ZXh0dXJlQ291bnQgKyBcIik7XFxuXFxuICAgICAgICAgICAgaWYodWQuXCIgKyBpICsgXCIudmFsdWUgIT09IFwiICsgdGV4dHVyZUNvdW50ICsgXCIpXFxuICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICB1ZC5cIiArIGkgKyBcIi52YWx1ZSA9IFwiICsgdGV4dHVyZUNvdW50ICsgXCI7XFxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaSh1ZC5cIiArIGkgKyBcIi5sb2NhdGlvbiwgXCIgKyB0ZXh0dXJlQ291bnQgKyBcIik7XFxuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1sZW5cXG4gICAgICAgICAgICB9XFxuXCI7XG5cbiAgICAgICAgICAgIHRleHR1cmVDb3VudCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gJ21hdDMnICYmIGRhdGEuc2l6ZSA9PT0gMSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKGdyb3VwLnVuaWZvcm1zW2ldLmEgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPIGFuZCBzb21lIHNtYXJ0IGNhY2hpbmcgZGlydHkgaWRzIGhlcmUhXG4gICAgICAgICAgICAgICAgZnVuYyArPSBcIlxcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4M2Z2KHVkLlwiICsgaSArIFwiLmxvY2F0aW9uLCBmYWxzZSwgdXYuXCIgKyBpICsgXCIudG9BcnJheSh0cnVlKSk7XFxuICAgICAgICAgICAgICAgIFxcblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZ1bmMgKz0gXCJcXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdih1ZC5cIiArIGkgKyBcIi5sb2NhdGlvbiwgZmFsc2UsIHV2LlwiICsgaSArIFwiKTtcXG4gICAgICAgICAgICAgICAgXFxuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09PSAndmVjMicgJiYgZGF0YS5zaXplID09PSAxKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBUT0RPIC0gZG8gd2UgbmVlZCBib3RoIGhlcmU/XG4gICAgICAgICAgICAvLyBtYXliZSB3ZSBjYW4gZ2V0IGF3YXkgd2l0aCBvbmx5IHVzaW5nIHBvaW50cz9cbiAgICAgICAgICAgIGlmIChncm91cC51bmlmb3Jtc1tpXS54ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnVuYyArPSBcIlxcbiAgICAgICAgICAgICAgICBjdiA9IHVkLlwiICsgaSArIFwiLnZhbHVlO1xcbiAgICAgICAgICAgICAgICB2ID0gdXYuXCIgKyBpICsgXCI7XFxuXFxuICAgICAgICAgICAgICAgIGlmKGN2WzBdICE9PSB2LnggfHwgY3ZbMV0gIT09IHYueSlcXG4gICAgICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgY3ZbMF0gPSB2Lng7XFxuICAgICAgICAgICAgICAgICAgICBjdlsxXSA9IHYueTtcXG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0yZih1ZC5cIiArIGkgKyBcIi5sb2NhdGlvbiwgdi54LCB2LnkpO1xcbiAgICAgICAgICAgICAgICB9XFxuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnVuYyArPSBcIlxcbiAgICAgICAgICAgICAgICBjdiA9IHVkLlwiICsgaSArIFwiLnZhbHVlO1xcbiAgICAgICAgICAgICAgICB2ID0gdXYuXCIgKyBpICsgXCI7XFxuXFxuICAgICAgICAgICAgICAgIGlmKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdKVxcbiAgICAgICAgICAgICAgICB7XFxuICAgICAgICAgICAgICAgICAgICBjdlswXSA9IHZbMF07XFxuICAgICAgICAgICAgICAgICAgICBjdlsxXSA9IHZbMV07XFxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMmYodWQuXCIgKyBpICsgXCIubG9jYXRpb24sIHZbMF0sIHZbMV0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIFxcblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gJ3ZlYzQnICYmIGRhdGEuc2l6ZSA9PT0gMSlcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVE9ETyAtIGRvIHdlIG5lZWQgYm90aCBoZXJlP1xuICAgICAgICAgICAgLy8gbWF5YmUgd2UgY2FuIGdldCBhd2F5IHdpdGggb25seSB1c2luZyBwb2ludHM/XG4gICAgICAgICAgICBpZiAoZ3JvdXAudW5pZm9ybXNbaV0ud2lkdGggIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmdW5jICs9IFwiXFxuICAgICAgICAgICAgICAgIGN2ID0gdWQuXCIgKyBpICsgXCIudmFsdWU7XFxuICAgICAgICAgICAgICAgIHYgPSB1di5cIiArIGkgKyBcIjtcXG5cXG4gICAgICAgICAgICAgICAgaWYoY3ZbMF0gIT09IHYueCB8fCBjdlsxXSAhPT0gdi55IHx8IGN2WzJdICE9PSB2LndpZHRoIHx8IGN2WzNdICE9PSB2LmhlaWdodClcXG4gICAgICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgY3ZbMF0gPSB2Lng7XFxuICAgICAgICAgICAgICAgICAgICBjdlsxXSA9IHYueTtcXG4gICAgICAgICAgICAgICAgICAgIGN2WzJdID0gdi53aWR0aDtcXG4gICAgICAgICAgICAgICAgICAgIGN2WzNdID0gdi5oZWlnaHQ7XFxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGYodWQuXCIgKyBpICsgXCIubG9jYXRpb24sIHYueCwgdi55LCB2LndpZHRoLCB2LmhlaWdodClcXG4gICAgICAgICAgICAgICAgfVxcblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZ1bmMgKz0gXCJcXG4gICAgICAgICAgICAgICAgY3YgPSB1ZC5cIiArIGkgKyBcIi52YWx1ZTtcXG4gICAgICAgICAgICAgICAgdiA9IHV2LlwiICsgaSArIFwiO1xcblxcbiAgICAgICAgICAgICAgICBpZihjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSB8fCBjdlsyXSAhPT0gdlsyXSB8fCBjdlszXSAhPT0gdlszXSlcXG4gICAgICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xcbiAgICAgICAgICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xcbiAgICAgICAgICAgICAgICAgICAgY3ZbMl0gPSB2WzJdO1xcbiAgICAgICAgICAgICAgICAgICAgY3ZbM10gPSB2WzNdO1xcblxcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmKHVkLlwiICsgaSArIFwiLmxvY2F0aW9uLCB2WzBdLCB2WzFdLCB2WzJdLCB2WzNdKVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIFxcblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlVHlwZSA9IChkYXRhLnNpemUgPT09IDEpID8gR0xTTF9UT19TSU5HTEVfU0VUVEVSU19DQUNIRUQgOiBHTFNMX1RPX0FSUkFZX1NFVFRFUlM7XG5cbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICB0ZW1wbGF0ZVR5cGVbZGF0YS50eXBlXS5yZXBsYWNlKCdsb2NhdGlvbicsIChcInVkLlwiICsgaSArIFwiLmxvY2F0aW9uXCIpKTtcblxuICAgICAgICAgICAgZnVuYyArPSBcIlxcbiAgICAgICAgICAgIGN2ID0gdWQuXCIgKyBpICsgXCIudmFsdWU7XFxuICAgICAgICAgICAgdiA9IHV2LlwiICsgaSArIFwiO1xcbiAgICAgICAgICAgIFwiICsgdGVtcGxhdGUgKyBcIjtcXG5cIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oJ3VkJywgJ3V2JywgJ3JlbmRlcmVyJywgZnVuYyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LWZ1bmNcbn1cblxudmFyIGZyYWdUZW1wbGF0ZSA9IFtcbiAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyxcbiAgICAndm9pZCBtYWluKHZvaWQpeycsXG4gICAgJ2Zsb2F0IHRlc3QgPSAwLjE7JyxcbiAgICAnJWZvcmxvb3AlJyxcbiAgICAnZ2xfRnJhZ0NvbG9yID0gdmVjNCgwLjApOycsXG4gICAgJ30nIF0uam9pbignXFxuJyk7XG5cbmZ1bmN0aW9uIGNoZWNrTWF4SWZTdGF0ZW1lbnRzSW5TaGFkZXIobWF4SWZzLCBnbClcbntcbiAgICBpZiAobWF4SWZzID09PSAwKVxuICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIG9mIGAwYCBwYXNzZWQgdG8gYGNoZWNrTWF4SWZTdGF0ZW1lbnRzSW5TaGFkZXJgJyk7XG4gICAgfVxuXG4gICAgdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xuXG4gICAgd2hpbGUgKHRydWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAge1xuICAgICAgICB2YXIgZnJhZ21lbnRTcmMgPSBmcmFnVGVtcGxhdGUucmVwbGFjZSgvJWZvcmxvb3AlL2dpLCBnZW5lcmF0ZUlmVGVzdFNyYyhtYXhJZnMpKTtcblxuICAgICAgICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBmcmFnbWVudFNyYyk7XG4gICAgICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuICAgICAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSlcbiAgICAgICAge1xuICAgICAgICAgICAgbWF4SWZzID0gKG1heElmcyAvIDIpIHwgMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIHZhbGlkIVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF4SWZzO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUlmVGVzdFNyYyhtYXhJZnMpXG57XG4gICAgdmFyIHNyYyA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhJZnM7ICsraSlcbiAgICB7XG4gICAgICAgIGlmIChpID4gMClcbiAgICAgICAge1xuICAgICAgICAgICAgc3JjICs9ICdcXG5lbHNlICc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaSA8IG1heElmcyAtIDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNyYyArPSBcImlmKHRlc3QgPT0gXCIgKyBpICsgXCIuMCl7fVwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNyYztcbn1cblxuLy8gQ2FjaGUgdGhlIHJlc3VsdCB0byBwcmV2ZW50IHJ1bm5pbmcgdGhpcyBvdmVyIGFuZCBvdmVyXG52YXIgdW5zYWZlRXZhbDtcblxuLyoqXG4gKiBOb3QgYWxsIHBsYXRmb3JtcyBhbGxvdyB0byBnZW5lcmF0ZSBmdW5jdGlvbiBjb2RlIChlLmcuLCBgbmV3IEZ1bmN0aW9uYCkuXG4gKiB0aGlzIHByb3ZpZGVzIHRoZSBwbGF0Zm9ybS1sZXZlbCBkZXRlY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiB1bnNhZmVFdmFsU3VwcG9ydGVkKClcbntcbiAgICBpZiAodHlwZW9mIHVuc2FmZUV2YWwgPT09ICdib29sZWFuJylcbiAgICB7XG4gICAgICAgIHJldHVybiB1bnNhZmVFdmFsO1xuICAgIH1cblxuICAgIHRyeVxuICAgIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tbmV3LWZ1bmMgKi9cbiAgICAgICAgdmFyIGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ3BhcmFtMScsICdwYXJhbTInLCAncGFyYW0zJywgJ3JldHVybiBwYXJhbTFbcGFyYW0yXSA9PT0gcGFyYW0zOycpO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLW5ldy1mdW5jICovXG5cbiAgICAgICAgdW5zYWZlRXZhbCA9IGZ1bmMoeyBhOiAnYicgfSwgJ2EnLCAnYicpID09PSB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSlcbiAgICB7XG4gICAgICAgIHVuc2FmZUV2YWwgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5zYWZlRXZhbDtcbn1cblxudmFyIGRlZmF1bHRGcmFnbWVudCA9IFwidmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXI7XFxuXFxudm9pZCBtYWluKHZvaWQpe1xcbiAgIGdsX0ZyYWdDb2xvciAqPSB0ZXh0dXJlMkQodVNhbXBsZXIsIHZUZXh0dXJlQ29vcmQpO1xcbn1cIjtcblxudmFyIGRlZmF1bHRWZXJ0ZXggPSBcImF0dHJpYnV0ZSB2ZWMyIGFWZXJ0ZXhQb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiBhVGV4dHVyZUNvb3JkO1xcblxcbnVuaWZvcm0gbWF0MyBwcm9qZWN0aW9uTWF0cml4O1xcblxcbnZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xcblxcbnZvaWQgbWFpbih2b2lkKXtcXG4gICBnbF9Qb3NpdGlvbiA9IHZlYzQoKHByb2plY3Rpb25NYXRyaXggKiB2ZWMzKGFWZXJ0ZXhQb3NpdGlvbiwgMS4wKSkueHksIDAuMCwgMS4wKTtcXG4gICB2VGV4dHVyZUNvb3JkID0gYVRleHR1cmVDb29yZDtcXG59XFxuXCI7XG5cbi8vIGltcG9ydCAqIGFzIGZyb20gJy4uL3N5c3RlbXMvc2hhZGVyL3NoYWRlcic7XG5cbnZhciBVSUQkMyA9IDA7XG5cbnZhciBuYW1lQ2FjaGUgPSB7fTtcblxuLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gY3JlYXRlIGEgc2hhZGVyIHByb2dyYW0uXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgUHJvZ3JhbSA9IGZ1bmN0aW9uIFByb2dyYW0odmVydGV4U3JjLCBmcmFnbWVudFNyYywgbmFtZSlcbntcbiAgICBpZiAoIG5hbWUgPT09IHZvaWQgMCApIG5hbWUgPSAncGl4aS1zaGFkZXInO1xuXG4gICAgdGhpcy5pZCA9IFVJRCQzKys7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmVydGV4IHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRleFNyYyA9IHZlcnRleFNyYyB8fCBQcm9ncmFtLmRlZmF1bHRWZXJ0ZXhTcmM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnJhZ21lbnQgc2hhZGVyLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZnJhZ21lbnRTcmMgPSBmcmFnbWVudFNyYyB8fCBQcm9ncmFtLmRlZmF1bHRGcmFnbWVudFNyYztcblxuICAgIHRoaXMudmVydGV4U3JjID0gdGhpcy52ZXJ0ZXhTcmMudHJpbSgpO1xuICAgIHRoaXMuZnJhZ21lbnRTcmMgPSB0aGlzLmZyYWdtZW50U3JjLnRyaW0oKTtcblxuICAgIGlmICh0aGlzLnZlcnRleFNyYy5zdWJzdHJpbmcoMCwgOCkgIT09ICcjdmVyc2lvbicpXG4gICAge1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9cXHMrL2csICctJyk7XG5cbiAgICAgICAgaWYgKG5hbWVDYWNoZVtuYW1lXSlcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZUNhY2hlW25hbWVdKys7XG4gICAgICAgICAgICBuYW1lICs9IFwiLVwiICsgKG5hbWVDYWNoZVtuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lQ2FjaGVbbmFtZV0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52ZXJ0ZXhTcmMgPSBcIiNkZWZpbmUgU0hBREVSX05BTUUgXCIgKyBuYW1lICsgXCJcXG5cIiArICh0aGlzLnZlcnRleFNyYyk7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRTcmMgPSBcIiNkZWZpbmUgU0hBREVSX05BTUUgXCIgKyBuYW1lICsgXCJcXG5cIiArICh0aGlzLmZyYWdtZW50U3JjKTtcblxuICAgICAgICB0aGlzLnZlcnRleFNyYyA9IHNldFByZWNpc2lvbih0aGlzLnZlcnRleFNyYywgc2V0dGluZ3MuUFJFQ0lTSU9OX1ZFUlRFWCwgUFJFQ0lTSU9OLkhJR0gpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U3JjID0gc2V0UHJlY2lzaW9uKHRoaXMuZnJhZ21lbnRTcmMsIHNldHRpbmdzLlBSRUNJU0lPTl9GUkFHTUVOVCwgZ2V0TWF4RnJhZ21lbnRQcmVjaXNpb24oKSk7XG4gICAgfVxuXG4gICAgLy8gY3VycmVudGx5IHRoaXMgZG9lcyBub3QgZXh0cmFjdCBzdHJ1Y3RzIG9ubHkgZGVmYXVsdCB0eXBlc1xuICAgIHRoaXMuZXh0cmFjdERhdGEodGhpcy52ZXJ0ZXhTcmMsIHRoaXMuZnJhZ21lbnRTcmMpO1xuXG4gICAgLy8gdGhpcyBpcyB3aGVyZSB3ZSBzdG9yZSBzaGFkZXIgcmVmZXJlbmNlcy4uXG4gICAgdGhpcy5nbFByb2dyYW1zID0ge307XG5cbiAgICB0aGlzLnN5bmNVbmlmb3JtcyA9IG51bGw7XG59O1xuXG52YXIgc3RhdGljQWNjZXNzb3JzID0geyBkZWZhdWx0VmVydGV4U3JjOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGRlZmF1bHRGcmFnbWVudFNyYzogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBkYXRhIGZvciBhIGJ1eSBjcmVhdGluZyBhIHNtYWxsIHRlc3QgcHJvZ3JhbVxuICogb3IgcmVhZGluZyB0aGUgc3JjIGRpcmVjdGx5LlxuICogQHByb3RlY3RlZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdmVydGV4U3JjXSAtIFRoZSBzb3VyY2Ugb2YgdGhlIHZlcnRleCBzaGFkZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2ZyYWdtZW50U3JjXSAtIFRoZSBzb3VyY2Ugb2YgdGhlIGZyYWdtZW50IHNoYWRlci5cbiAqL1xuUHJvZ3JhbS5wcm90b3R5cGUuZXh0cmFjdERhdGEgPSBmdW5jdGlvbiBleHRyYWN0RGF0YSAodmVydGV4U3JjLCBmcmFnbWVudFNyYylcbntcbiAgICB2YXIgZ2wgPSBnZXRUZXN0Q29udGV4dCgpO1xuXG4gICAgaWYgKGdsKVxuICAgIHtcbiAgICAgICAgdmFyIHByb2dyYW0gPSBjb21waWxlUHJvZ3JhbShnbCwgdmVydGV4U3JjLCBmcmFnbWVudFNyYyk7XG5cbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVEYXRhID0gdGhpcy5nZXRBdHRyaWJ1dGVEYXRhKHByb2dyYW0sIGdsKTtcbiAgICAgICAgdGhpcy51bmlmb3JtRGF0YSA9IHRoaXMuZ2V0VW5pZm9ybURhdGEocHJvZ3JhbSwgZ2wpO1xuXG4gICAgICAgIGdsLmRlbGV0ZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIHRoaXMudW5pZm9ybURhdGEgPSB7fTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVEYXRhID0ge307XG4gICAgfVxufTtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSBhdHRyaWJ1dGUgZGF0YSBmcm9tIHRoZSBwcm9ncmFtXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7V2ViR0xQcm9ncmFtfSBbcHJvZ3JhbV0gLSB0aGUgV2ViR0wgcHJvZ3JhbVxuICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IFtnbF0gLSB0aGUgV2ViR0wgY29udGV4dFxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBhdHRyaWJ1dGUgZGF0YSBmb3IgdGhpcyBwcm9ncmFtXG4gKi9cblByb2dyYW0ucHJvdG90eXBlLmdldEF0dHJpYnV0ZURhdGEgPSBmdW5jdGlvbiBnZXRBdHRyaWJ1dGVEYXRhIChwcm9ncmFtLCBnbClcbntcbiAgICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVzQXJyYXkgPSBbXTtcblxuICAgIHZhciB0b3RhbEF0dHJpYnV0ZXMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkFDVElWRV9BVFRSSUJVVEVTKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWxBdHRyaWJ1dGVzOyBpKyspXG4gICAge1xuICAgICAgICB2YXIgYXR0cmliRGF0YSA9IGdsLmdldEFjdGl2ZUF0dHJpYihwcm9ncmFtLCBpKTtcbiAgICAgICAgdmFyIHR5cGUgPSBtYXBUeXBlKGdsLCBhdHRyaWJEYXRhLnR5cGUpO1xuXG4gICAgICAgIC8qZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgbmFtZTogYXR0cmliRGF0YS5uYW1lLFxuICAgICAgICAgICAgc2l6ZTogbWFwU2l6ZSh0eXBlKSxcbiAgICAgICAgICAgIGxvY2F0aW9uOiAwLFxuICAgICAgICB9O1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG5cbiAgICAgICAgYXR0cmlidXRlc1thdHRyaWJEYXRhLm5hbWVdID0gZGF0YTtcbiAgICAgICAgYXR0cmlidXRlc0FycmF5LnB1c2goZGF0YSk7XG4gICAgfVxuXG4gICAgYXR0cmlidXRlc0FycmF5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIChhLm5hbWUgPiBiLm5hbWUpID8gMSA6IC0xOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25mdXNpbmctYXJyb3dcblxuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGF0dHJpYnV0ZXNBcnJheS5sZW5ndGg7IGkkMSsrKVxuICAgIHtcbiAgICAgICAgYXR0cmlidXRlc0FycmF5W2kkMV0ubG9jYXRpb24gPSBpJDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG59O1xuXG4vKipcbiAqIHJldHVybnMgdGhlIHVuaWZvcm0gZGF0YSBmcm9tIHRoZSBwcm9ncmFtXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7d2ViR0wtcHJvZ3JhbX0gW3Byb2dyYW1dIC0gdGhlIHdlYmdsIHByb2dyYW1cbiAqIEBwYXJhbSB7Y29udGV4dH0gW2dsXSAtIHRoZSBXZWJHTCBjb250ZXh0XG4gKlxuICogQHJldHVybnMge29iamVjdH0gdGhlIHVuaWZvcm0gZGF0YSBmb3IgdGhpcyBwcm9ncmFtXG4gKi9cblByb2dyYW0ucHJvdG90eXBlLmdldFVuaWZvcm1EYXRhID0gZnVuY3Rpb24gZ2V0VW5pZm9ybURhdGEgKHByb2dyYW0sIGdsKVxue1xuICAgIHZhciB1bmlmb3JtcyA9IHt9O1xuXG4gICAgdmFyIHRvdGFsVW5pZm9ybXMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkFDVElWRV9VTklGT1JNUyk7XG5cbiAgICAvLyBUT0RPIGV4cG9zZSB0aGlzIGFzIGEgcHJvcD9cbiAgICAvLyBjb25zdCBtYXNrUmVnZXggPSBuZXcgUmVnRXhwKCdeKHByb2plY3Rpb25NYXRyaXh8dVNhbXBsZXJ8dHJhbnNsYXRpb25NYXRyaXgpJCcpO1xuICAgIC8vIGNvbnN0IG1hc2tSZWdleCA9IG5ldyBSZWdFeHAoJ14ocHJvamVjdGlvbk1hdHJpeHx1U2FtcGxlcnx0cmFuc2xhdGlvbk1hdHJpeCkkJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsVW5pZm9ybXM7IGkrKylcbiAgICB7XG4gICAgICAgIHZhciB1bmlmb3JtRGF0YSA9IGdsLmdldEFjdGl2ZVVuaWZvcm0ocHJvZ3JhbSwgaSk7XG4gICAgICAgIHZhciBuYW1lID0gdW5pZm9ybURhdGEubmFtZS5yZXBsYWNlKC9cXFsuKj9cXF0vLCAnJyk7XG5cbiAgICAgICAgdmFyIGlzQXJyYXkgPSB1bmlmb3JtRGF0YS5uYW1lLm1hdGNoKC9cXFsuKj9cXF0vLCAnJyk7XG4gICAgICAgIHZhciB0eXBlID0gbWFwVHlwZShnbCwgdW5pZm9ybURhdGEudHlwZSk7XG5cbiAgICAgICAgLyplc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgICB1bmlmb3Jtc1tuYW1lXSA9IHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBzaXplOiB1bmlmb3JtRGF0YS5zaXplLFxuICAgICAgICAgICAgaXNBcnJheTppc0FycmF5LFxuICAgICAgICAgICAgdmFsdWU6IGRlZmF1bHRWYWx1ZSh0eXBlLCB1bmlmb3JtRGF0YS5zaXplKSxcbiAgICAgICAgfTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH1cblxuICAgIHJldHVybiB1bmlmb3Jtcztcbn07XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgdmVydGV4IHNoYWRlciBzb3VyY2VcbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RhbnRcbiAqIEBtZW1iZXIge3N0cmluZ31cbiAqL1xuc3RhdGljQWNjZXNzb3JzLmRlZmF1bHRWZXJ0ZXhTcmMuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gZGVmYXVsdFZlcnRleDtcbn07XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgZnJhZ21lbnQgc2hhZGVyIHNvdXJjZVxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudFxuICogQG1lbWJlciB7c3RyaW5nfVxuICovXG5zdGF0aWNBY2Nlc3NvcnMuZGVmYXVsdEZyYWdtZW50U3JjLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIGRlZmF1bHRGcmFnbWVudDtcbn07XG5cbi8qKlxuICogQSBzaG9ydCBoYW5kIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHByb2dyYW0gYmFzZWQgb2YgYSB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlclxuICogdGhpcyBtZXRob2Qgd2lsbCBhbHNvIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBpcyBhIGNhY2hlZCBwcm9ncmFtLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdmVydGV4U3JjXSAtIFRoZSBzb3VyY2Ugb2YgdGhlIHZlcnRleCBzaGFkZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2ZyYWdtZW50U3JjXSAtIFRoZSBzb3VyY2Ugb2YgdGhlIGZyYWdtZW50IHNoYWRlci5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbdW5pZm9ybXNdIC0gQ3VzdG9tIHVuaWZvcm1zIHRvIHVzZSB0byBhdWdtZW50IHRoZSBidWlsdC1pbiBvbmVzLlxuICpcbiAqIEByZXR1cm5zIHtQSVhJLlByb2dyYW19IGFuIHNoaW55IG5ldyBQaXhpIHNoYWRlciFcbiAqL1xuUHJvZ3JhbS5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmVydGV4U3JjLCBmcmFnbWVudFNyYywgbmFtZSlcbntcbiAgICB2YXIga2V5ID0gdmVydGV4U3JjICsgZnJhZ21lbnRTcmM7XG5cbiAgICB2YXIgcHJvZ3JhbSA9IFByb2dyYW1DYWNoZVtrZXldO1xuXG4gICAgaWYgKCFwcm9ncmFtKVxuICAgIHtcbiAgICAgICAgUHJvZ3JhbUNhY2hlW2tleV0gPSBwcm9ncmFtID0gbmV3IFByb2dyYW0odmVydGV4U3JjLCBmcmFnbWVudFNyYywgbmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2dyYW07XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggUHJvZ3JhbSwgc3RhdGljQWNjZXNzb3JzICk7XG5cbi8qKlxuICogQSBoZWxwZXIgY2xhc3MgZm9yIHNoYWRlcnNcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBTaGFkZXIgPSBmdW5jdGlvbiBTaGFkZXIocHJvZ3JhbSwgdW5pZm9ybXMpXG57XG4gICAgLyoqXG4gICAgICogUHJvZ3JhbSB0aGF0IHRoZSBzaGFkZXIgdXNlc1xuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5Qcm9ncmFtfVxuICAgICAqL1xuICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG5cbiAgICAvLyBsZXRzIHNlZSB3aGF0cyBiZWVuIHBhc3NlZCBpblxuICAgIC8vIHVuaWZvcm1zIHNob3VsZCBiZSBjb252ZXJ0ZWQgdG8gYSB1bmlmb3JtIGdyb3VwXG4gICAgaWYgKHVuaWZvcm1zKVxuICAgIHtcbiAgICAgICAgaWYgKHVuaWZvcm1zIGluc3RhbmNlb2YgVW5pZm9ybUdyb3VwKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1Hcm91cCA9IHVuaWZvcm1zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy51bmlmb3JtR3JvdXAgPSBuZXcgVW5pZm9ybUdyb3VwKHVuaWZvcm1zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICB0aGlzLnVuaWZvcm1Hcm91cCA9IG5ldyBVbmlmb3JtR3JvdXAoe30pO1xuICAgIH1cblxuICAgIC8vIHRpbWUgdG8gYnVpbGQgc29tZSBnZXR0ZXJzIGFuZCBzZXR0ZXJzIVxuICAgIC8vIEkgZ3Vlc3MgZG93biB0aGUgbGluZSB0aGlzIGNvdWxkIHNvcnQgb2YgZ2VuZXJhdGUgYW4gaW5zdHJ1Y3Rpb24gbGlzdCByYXRoZXIgdGhhbiB1c2UgZGlydHkgaWRzP1xuICAgIC8vIGRvZXMgdGhlIHRyaWNrIGZvciBub3cgdGhvdWdoIVxuICAgIGZvciAodmFyIGkgaW4gcHJvZ3JhbS51bmlmb3JtRGF0YSlcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnVuaWZvcm1Hcm91cC51bmlmb3Jtc1tpXSBpbnN0YW5jZW9mIEFycmF5KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1Hcm91cC51bmlmb3Jtc1tpXSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy51bmlmb3JtR3JvdXAudW5pZm9ybXNbaV0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQyID0geyB1bmlmb3JtczogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBUT0RPIG1vdmUgdG8gc2hhZGVyIHN5c3RlbS4uXG5TaGFkZXIucHJvdG90eXBlLmNoZWNrVW5pZm9ybUV4aXN0cyA9IGZ1bmN0aW9uIGNoZWNrVW5pZm9ybUV4aXN0cyAobmFtZSwgZ3JvdXApXG57XG4gICAgaWYgKGdyb3VwLnVuaWZvcm1zW25hbWVdKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSBpbiBncm91cC51bmlmb3JtcylcbiAgICB7XG4gICAgICAgIHZhciB1bmlmb3JtID0gZ3JvdXAudW5pZm9ybXNbaV07XG5cbiAgICAgICAgaWYgKHVuaWZvcm0uZ3JvdXApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrVW5pZm9ybUV4aXN0cyhuYW1lLCB1bmlmb3JtKSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cblNoYWRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKClcbntcbiAgICAvLyB1c2FnZSBjb3VudCBvbiBwcm9ncmFtcz9cbiAgICAvLyByZW1vdmUgaWYgbm90IHVzZWQhXG4gICAgdGhpcy51bmlmb3JtR3JvdXAgPSBudWxsO1xufTtcblxuLyoqXG4gKiBTaGFkZXIgdW5pZm9ybSB2YWx1ZXMsIHNob3J0Y3V0IGZvciBgdW5pZm9ybUdyb3VwLnVuaWZvcm1zYFxuICogQHJlYWRvbmx5XG4gKiBAbWVtYmVyIHtvYmplY3R9XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycyQyLnVuaWZvcm1zLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuIHRoaXMudW5pZm9ybUdyb3VwLnVuaWZvcm1zO1xufTtcblxuLyoqXG4gKiBBIHNob3J0IGhhbmQgZnVuY3Rpb24gdG8gY3JlYXRlIGEgc2hhZGVyIGJhc2VkIG9mIGEgdmVydGV4IGFuZCBmcmFnbWVudCBzaGFkZXJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3ZlcnRleFNyY10gLSBUaGUgc291cmNlIG9mIHRoZSB2ZXJ0ZXggc2hhZGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IFtmcmFnbWVudFNyY10gLSBUaGUgc291cmNlIG9mIHRoZSBmcmFnbWVudCBzaGFkZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gW3VuaWZvcm1zXSAtIEN1c3RvbSB1bmlmb3JtcyB0byB1c2UgdG8gYXVnbWVudCB0aGUgYnVpbHQtaW4gb25lcy5cbiAqXG4gKiBAcmV0dXJucyB7UElYSS5TaGFkZXJ9IGFuIHNoaW55IG5ldyBQaXhpIHNoYWRlciFcbiAqL1xuU2hhZGVyLmZyb20gPSBmdW5jdGlvbiBmcm9tICh2ZXJ0ZXhTcmMsIGZyYWdtZW50U3JjLCB1bmlmb3JtcylcbntcbiAgICB2YXIgcHJvZ3JhbSA9IFByb2dyYW0uZnJvbSh2ZXJ0ZXhTcmMsIGZyYWdtZW50U3JjKTtcblxuICAgIHJldHVybiBuZXcgU2hhZGVyKHByb2dyYW0sIHVuaWZvcm1zKTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTaGFkZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMiApO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbnZhciBCTEVORCA9IDA7XG52YXIgT0ZGU0VUID0gMTtcbnZhciBDVUxMSU5HID0gMjtcbnZhciBERVBUSF9URVNUID0gMztcbnZhciBXSU5ESU5HID0gNDtcblxuLyoqXG4gKiBUaGlzIGlzIGEgV2ViR0wgc3RhdGUsIGFuZCBpcyBpcyBwYXNzZWQgVGhlIFdlYkdMIFN0YXRlTWFuYWdlci5cbiAqXG4gKiBFYWNoIG1lc2ggcmVuZGVyZWQgbWF5IHJlcXVpcmUgV2ViR0wgdG8gYmUgaW4gYSBkaWZmZXJlbnQgc3RhdGUuXG4gKiBGb3IgZXhhbXBsZSB5b3UgbWF5IHdhbnQgZGlmZmVyZW50IGJsZW5kIG1vZGUgb3IgdG8gZW5hYmxlIHBvbHlnb24gb2Zmc2V0c1xuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFN0YXRlID0gZnVuY3Rpb24gU3RhdGUoKVxue1xuICAgIHRoaXMuZGF0YSA9IDA7XG5cbiAgICB0aGlzLmJsZW5kTW9kZSA9IEJMRU5EX01PREVTLk5PUk1BTDtcbiAgICB0aGlzLnBvbHlnb25PZmZzZXQgPSAwO1xuXG4gICAgdGhpcy5ibGVuZCA9IHRydWU7XG4gICAgLy8gIHRoaXMuZGVwdGhUZXN0ID0gdHJ1ZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMyA9IHsgYmxlbmQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sb2Zmc2V0czogeyBjb25maWd1cmFibGU6IHRydWUgfSxjdWxsaW5nOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGRlcHRoVGVzdDogeyBjb25maWd1cmFibGU6IHRydWUgfSxjbG9ja3dpc2VGcm9udEZhY2U6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sYmxlbmRNb2RlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHBvbHlnb25PZmZzZXQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLyoqXG4gKiBBY3RpdmF0ZXMgYmxlbmRpbmcgb2YgdGhlIGNvbXB1dGVkIGZyYWdtZW50IGNvbG9yIHZhbHVlc1xuICpcbiAqIEBtZW1iZXIge2Jvb2xlYW59XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycyQzLmJsZW5kLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmICgxIDw8IEJMRU5EKSk7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5ibGVuZC5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xue1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAoMSA8PCBCTEVORCkpICE9PSB2YWx1ZSlcbiAgICB7XG4gICAgICAgIHRoaXMuZGF0YSBePSAoMSA8PCBCTEVORCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBBY3RpdmF0ZXMgYWRkaW5nIGFuIG9mZnNldCB0byBkZXB0aCB2YWx1ZXMgb2YgcG9seWdvbidzIGZyYWdtZW50c1xuICpcbiAqIEBtZW1iZXIge2Jvb2xlYW59XG4gKiBAZGVmYXVsdCBmYWxzZVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5vZmZzZXRzLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmICgxIDw8IE9GRlNFVCkpO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDMub2Zmc2V0cy5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xue1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAoMSA8PCBPRkZTRVQpKSAhPT0gdmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLmRhdGEgXj0gKDEgPDwgT0ZGU0VUKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIEFjdGl2YXRlcyBjdWxsaW5nIG9mIHBvbHlnb25zLlxuICpcbiAqIEBtZW1iZXIge2Jvb2xlYW59XG4gKiBAZGVmYXVsdCBmYWxzZVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5jdWxsaW5nLmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmICgxIDw8IENVTExJTkcpKTtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQzLmN1bGxpbmcuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICBpZiAoISEodGhpcy5kYXRhICYgKDEgPDwgQ1VMTElORykpICE9PSB2YWx1ZSlcbiAgICB7XG4gICAgICAgIHRoaXMuZGF0YSBePSAoMSA8PCBDVUxMSU5HKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIEFjdGl2YXRlcyBkZXB0aCBjb21wYXJpc29ucyBhbmQgdXBkYXRlcyB0byB0aGUgZGVwdGggYnVmZmVyLlxuICpcbiAqIEBtZW1iZXIge2Jvb2xlYW59XG4gKiBAZGVmYXVsdCBmYWxzZVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5kZXB0aFRlc3QuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gISEodGhpcy5kYXRhICYgKDEgPDwgREVQVEhfVEVTVCkpO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDMuZGVwdGhUZXN0LnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG57XG4gICAgaWYgKCEhKHRoaXMuZGF0YSAmICgxIDw8IERFUFRIX1RFU1QpKSAhPT0gdmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLmRhdGEgXj0gKDEgPDwgREVQVEhfVEVTVCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgZnJvbnQgb3IgYmFjay1mYWNpbmcgcG9seWdvbnMgY2FuIGJlIGN1bGxlZC5cbiAqIEBtZW1iZXIge2Jvb2xlYW59XG4gKiBAZGVmYXVsdCBmYWxzZVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5jbG9ja3dpc2VGcm9udEZhY2UuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gISEodGhpcy5kYXRhICYgKDEgPDwgV0lORElORykpO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDMuY2xvY2t3aXNlRnJvbnRGYWNlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWpzZG9jXG57XG4gICAgaWYgKCEhKHRoaXMuZGF0YSAmICgxIDw8IFdJTkRJTkcpKSAhPT0gdmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLmRhdGEgXj0gKDEgPDwgV0lORElORyk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBUaGUgYmxlbmQgbW9kZSB0byBiZSBhcHBsaWVkIHdoZW4gdGhpcyBzdGF0ZSBpcyBzZXQuIEFwcGx5IGEgdmFsdWUgb2YgYFBJWEkuQkxFTkRfTU9ERVMuTk9STUFMYCB0byByZXNldCB0aGUgYmxlbmQgbW9kZS5cbiAqIFNldHRpbmcgdGhpcyBtb2RlIHRvIGFueXRoaW5nIG90aGVyIHRoYW4gTk9fQkxFTkQgd2lsbCBhdXRvbWF0aWNhbGx5IHN3aXRjaCBibGVuZGluZyBvbi5cbiAqXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKiBAZGVmYXVsdCBQSVhJLkJMRU5EX01PREVTLk5PUk1BTFxuICogQHNlZSBQSVhJLkJMRU5EX01PREVTXG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycyQzLmJsZW5kTW9kZS5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiB0aGlzLl9ibGVuZE1vZGU7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5ibGVuZE1vZGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICB0aGlzLmJsZW5kID0gKHZhbHVlICE9PSBCTEVORF9NT0RFUy5OT05FKTtcbiAgICB0aGlzLl9ibGVuZE1vZGUgPSB2YWx1ZTtcbn07XG5cbi8qKlxuICogVGhlIHBvbHlnb24gb2Zmc2V0LiBTZXR0aW5nIHRoaXMgcHJvcGVydHkgdG8gYW55dGhpbmcgb3RoZXIgdGhhbiAwIHdpbGwgYXV0b21hdGljYWxseSBlbmFibGUgcG9seWdvbiBvZmZzZXQgZmlsbC5cbiAqXG4gKiBAbWVtYmVyIHtudW1iZXJ9XG4gKiBAZGVmYXVsdCAwXG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycyQzLnBvbHlnb25PZmZzZXQuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy5fcG9seWdvbk9mZnNldDtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQzLnBvbHlnb25PZmZzZXQuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICB0aGlzLm9mZnNldHMgPSAhIXZhbHVlO1xuICAgIHRoaXMuX3BvbHlnb25PZmZzZXQgPSB2YWx1ZTtcbn07XG5cblN0YXRlLmZvcjJkID0gZnVuY3Rpb24gZm9yMmQgKClcbntcbiAgICB2YXIgc3RhdGUgPSBuZXcgU3RhdGUoKTtcblxuICAgIHN0YXRlLmRlcHRoVGVzdCA9IGZhbHNlO1xuICAgIHN0YXRlLmJsZW5kID0gdHJ1ZTtcblxuICAgIHJldHVybiBzdGF0ZTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTdGF0ZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQzICk7XG5cbnZhciBkZWZhdWx0VmVydGV4JDEgPSBcImF0dHJpYnV0ZSB2ZWMyIGFWZXJ0ZXhQb3NpdGlvbjtcXG5cXG51bmlmb3JtIG1hdDMgcHJvamVjdGlvbk1hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG51bmlmb3JtIHZlYzQgaW5wdXRTaXplO1xcbnVuaWZvcm0gdmVjNCBvdXRwdXRGcmFtZTtcXG5cXG52ZWM0IGZpbHRlclZlcnRleFBvc2l0aW9uKCB2b2lkIClcXG57XFxuICAgIHZlYzIgcG9zaXRpb24gPSBhVmVydGV4UG9zaXRpb24gKiBtYXgob3V0cHV0RnJhbWUuencsIHZlYzIoMC4pKSArIG91dHB1dEZyYW1lLnh5O1xcblxcbiAgICByZXR1cm4gdmVjNCgocHJvamVjdGlvbk1hdHJpeCAqIHZlYzMocG9zaXRpb24sIDEuMCkpLnh5LCAwLjAsIDEuMCk7XFxufVxcblxcbnZlYzIgZmlsdGVyVGV4dHVyZUNvb3JkKCB2b2lkIClcXG57XFxuICAgIHJldHVybiBhVmVydGV4UG9zaXRpb24gKiAob3V0cHV0RnJhbWUuencgKiBpbnB1dFNpemUuencpO1xcbn1cXG5cXG52b2lkIG1haW4odm9pZClcXG57XFxuICAgIGdsX1Bvc2l0aW9uID0gZmlsdGVyVmVydGV4UG9zaXRpb24oKTtcXG4gICAgdlRleHR1cmVDb29yZCA9IGZpbHRlclRleHR1cmVDb29yZCgpO1xcbn1cXG5cIjtcblxudmFyIGRlZmF1bHRGcmFnbWVudCQxID0gXCJ2YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcXG5cXG52b2lkIG1haW4odm9pZCl7XFxuICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyLCB2VGV4dHVyZUNvb3JkKTtcXG59XFxuXCI7XG5cbi8qKlxuICogRmlsdGVyIGlzIGEgc3BlY2lhbCB0eXBlIG9mIFdlYkdMIHNoYWRlciB0aGF0IGlzIGFwcGxpZWQgdG8gdGhlIHNjcmVlbi5cbiAqXG4gKiB7QGxpbmsgaHR0cDovL3BpeGlqcy5pby9leGFtcGxlcy8jL2ZpbHRlcnMvYmx1ci1maWx0ZXIuanMgRXhhbXBsZX0gb2YgdGhlXG4gKiB7QGxpbmsgUElYSS5maWx0ZXJzLkJsdXJGaWx0ZXIgQmx1ckZpbHRlcn0uXG4gKlxuICogIyMjIFVzYWdlXG4gKiBGaWx0ZXJzIGNhbiBiZSBhcHBsaWVkIHRvIGFueSBEaXNwbGF5T2JqZWN0IG9yIENvbnRhaW5lci5cbiAqIFBpeGlKUycgYEZpbHRlclN5c3RlbWAgcmVuZGVycyB0aGUgY29udGFpbmVyIGludG8gdGVtcG9yYXJ5IEZyYW1lYnVmZmVyLFxuICogdGhlbiBmaWx0ZXIgcmVuZGVycyBpdCB0byB0aGUgc2NyZWVuLlxuICogTXVsdGlwbGUgZmlsdGVycyBjYW4gYmUgYWRkZWQgdG8gdGhlIGBmaWx0ZXJzYCBhcnJheSBwcm9wZXJ0eSBhbmQgc3RhY2tlZCBvbiBlYWNoIG90aGVyLlxuICpcbiAqIGBgYFxuICogY29uc3QgZmlsdGVyID0gbmV3IFBJWEkuRmlsdGVyKG15U2hhZGVyVmVydCwgbXlTaGFkZXJGcmFnLCB7IG15VW5pZm9ybTogMC41IH0pO1xuICogY29uc3QgY29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XG4gKiBjb250YWluZXIuZmlsdGVycyA9IFtmaWx0ZXJdO1xuICogYGBgXG4gKlxuICogIyMjIFByZXZpb3VzIFZlcnNpb24gRGlmZmVyZW5jZXNcbiAqXG4gKiBJbiBQaXhpSlMgKip2MyoqLCBhIGZpbHRlciB3YXMgYWx3YXlzIGFwcGxpZWQgdG8gX3dob2xlIHNjcmVlbl8uXG4gKlxuICogSW4gUGl4aUpTICoqdjQqKiwgYSBmaWx0ZXIgY2FuIGJlIGFwcGxpZWQgX29ubHkgcGFydCBvZiB0aGUgc2NyZWVuXy5cbiAqIERldmVsb3BlcnMgaGFkIHRvIGNyZWF0ZSBhIHNldCBvZiB1bmlmb3JtcyB0byBkZWFsIHdpdGggY29vcmRpbmF0ZXMuXG4gKlxuICogSW4gUGl4aUpTICoqdjUqKiBjb21iaW5lcyBfYm90aCBhcHByb2FjaGVzXy5cbiAqIERldmVsb3BlcnMgY2FuIHVzZSBub3JtYWwgY29vcmRpbmF0ZXMgb2YgdjMgYW5kIHRoZW4gYWxsb3cgZmlsdGVyIHRvIHVzZSBwYXJ0aWFsIEZyYW1lYnVmZmVycyxcbiAqIGJyaW5naW5nIHRob3NlIGV4dHJhIHVuaWZvcm1zIGludG8gYWNjb3VudC5cbiAqXG4gKiBBbHNvIGJlIGF3YXJlIHRoYXQgd2UgaGF2ZSBjaGFuZ2VkIGRlZmF1bHQgdmVydGV4IHNoYWRlciwgcGxlYXNlIGNvbnN1bHRcbiAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vcGl4aWpzL3BpeGkuanMvd2lraS92NS1DcmVhdGluZy1maWx0ZXJzIFdpa2l9LlxuICpcbiAqICMjIyBCdWlsdC1pbiBVbmlmb3Jtc1xuICpcbiAqIFBpeGlKUyB2aWV3cG9ydCB1c2VzIHNjcmVlbiAoQ1NTKSBjb29yZGluYXRlcywgYCgwLCAwLCByZW5kZXJlci5zY3JlZW4ud2lkdGgsIHJlbmRlcmVyLnNjcmVlbi5oZWlnaHQpYCxcbiAqIGFuZCBgcHJvamVjdGlvbk1hdHJpeGAgdW5pZm9ybSBtYXBzIGl0IHRvIHRoZSBnbCB2aWV3cG9ydC5cbiAqXG4gKiAqKnVTYW1wbGVyKipcbiAqXG4gKiBUaGUgbW9zdCBpbXBvcnRhbnQgdW5pZm9ybSBpcyB0aGUgaW5wdXQgdGV4dHVyZSB0aGF0IGNvbnRhaW5lciB3YXMgcmVuZGVyZWQgaW50by5cbiAqIF9JbXBvcnRhbnQgbm90ZTogYXMgd2l0aCBhbGwgRnJhbWVidWZmZXJzIGluIFBpeGlKUywgYm90aCBpbnB1dCBhbmQgb3V0cHV0IGFyZVxuICogcHJlbXVsdGlwbGllZCBieSBhbHBoYS5fXG4gKlxuICogQnkgZGVmYXVsdCwgaW5wdXQgbm9ybWFsaXplZCBjb29yZGluYXRlcyBhcmUgcGFzc2VkIHRvIGZyYWdtZW50IHNoYWRlciB3aXRoIGB2VGV4dHVyZUNvb3JkYC5cbiAqIFVzZSBpdCB0byBzYW1wbGUgdGhlIGlucHV0LlxuICpcbiAqIGBgYFxuICogY29uc3QgZnJhZ21lbnQgPSBgXG4gKiB2YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcbiAqIHVuaWZvcm0gc2FtcGxlcjJEIHVTYW1wbGVyO1xuICogdm9pZCBtYWluKHZvaWQpXG4gKiB7XG4gKiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXIsIHZUZXh0dXJlQ29vcmQpO1xuICogfVxuICogYDtcbiAqXG4gKiBjb25zdCBteUZpbHRlciA9IG5ldyBQSVhJLkZpbHRlcihudWxsLCBmcmFnbWVudCk7XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGZpbHRlciBpcyBqdXN0IG9uZSB1bmlmb3JtIGxlc3MgdGhhbiB7QGxpbmsgUElYSS5maWx0ZXJzLkFscGhhRmlsdGVyIEFscGhhRmlsdGVyfS5cbiAqXG4gKiAqKm91dHB1dEZyYW1lKipcbiAqXG4gKiBUaGUgYG91dHB1dEZyYW1lYCBob2xkcyB0aGUgcmVjdGFuZ2xlIHdoZXJlIGZpbHRlciBpcyBhcHBsaWVkIGluIHNjcmVlbiAoQ1NTKSBjb29yZGluYXRlcy5cbiAqIEl0J3MgdGhlIHNhbWUgYXMgYHJlbmRlcmVyLnNjcmVlbmAgZm9yIGEgZnVsbHNjcmVlbiBmaWx0ZXIuXG4gKiBPbmx5IGEgcGFydCBvZiAgYG91dHB1dEZyYW1lLnp3YCBzaXplIG9mIHRlbXBvcmFyeSBGcmFtZWJ1ZmZlciBpcyB1c2VkLFxuICogYCgwLCAwLCBvdXRwdXRGcmFtZS53aWR0aCwgb3V0cHV0RnJhbWUuaGVpZ2h0KWAsXG4gKlxuICogRmlsdGVycyB1c2VzIHRoaXMgcXVhZCB0byBub3JtYWxpemVkICgwLTEpIHNwYWNlLCBpdHMgcGFzc2VkIGludG8gYGFWZXJ0ZXhQb3NpdGlvbmAgYXR0cmlidXRlLlxuICogVG8gY2FsY3VsYXRlIHZlcnRleCBwb3NpdGlvbiBpbiBzY3JlZW4gc3BhY2UgdXNpbmcgbm9ybWFsaXplZCAoMC0xKSBzcGFjZTpcbiAqXG4gKiBgYGBcbiAqIHZlYzQgZmlsdGVyVmVydGV4UG9zaXRpb24oIHZvaWQgKVxuICoge1xuICogICAgIHZlYzIgcG9zaXRpb24gPSBhVmVydGV4UG9zaXRpb24gKiBtYXgob3V0cHV0RnJhbWUuencsIHZlYzIoMC4pKSArIG91dHB1dEZyYW1lLnh5O1xuICogICAgIHJldHVybiB2ZWM0KChwcm9qZWN0aW9uTWF0cml4ICogdmVjMyhwb3NpdGlvbiwgMS4wKSkueHksIDAuMCwgMS4wKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICoqaW5wdXRTaXplKipcbiAqXG4gKiBUZW1wb3JhcnkgZnJhbWVidWZmZXIgaXMgZGlmZmVyZW50LCBpdCBjYW4gYmUgZWl0aGVyIHRoZSBzaXplIG9mIHNjcmVlbiwgZWl0aGVyIHBvd2VyLW9mLXR3by5cbiAqIFRoZSBgaW5wdXRTaXplLnh5YCBhcmUgc2l6ZSBvZiB0ZW1wb3JhcnkgZnJhbWVidWZmZXIgdGhhdCBob2xkcyBpbnB1dC5cbiAqIFRoZSBgaW5wdXRTaXplLnp3YCBpcyBpbnZlcnRlZCwgaXQncyBhIHNob3J0Y3V0IHRvIGV2YWRlIGRpdmlzaW9uIGluc2lkZSB0aGUgc2hhZGVyLlxuICpcbiAqIFNldCBgaW5wdXRTaXplLnh5ID0gb3V0cHV0RnJhbWUuendgIGZvciBhIGZ1bGxzY3JlZW4gZmlsdGVyLlxuICpcbiAqIFRvIGNhbGN1bGF0ZSBpbnB1dCBub3JtYWxpemVkIGNvb3JkaW5hdGUsIHlvdSBoYXZlIHRvIG1hcCBpdCB0byBmaWx0ZXIgbm9ybWFsaXplZCBzcGFjZS5cbiAqIE11bHRpcGx5IGJ5IGBvdXRwdXRGcmFtZS56d2AgdG8gZ2V0IGlucHV0IGNvb3JkaW5hdGUuXG4gKiBEaXZpZGUgYnkgYGlucHV0U2l6ZS54eWAgdG8gZ2V0IGlucHV0IG5vcm1hbGl6ZWQgY29vcmRpbmF0ZS5cbiAqXG4gKiBgYGBcbiAqIHZlYzIgZmlsdGVyVGV4dHVyZUNvb3JkKCB2b2lkIClcbiAqIHtcbiAqICAgICByZXR1cm4gYVZlcnRleFBvc2l0aW9uICogKG91dHB1dEZyYW1lLnp3ICogaW5wdXRTaXplLnp3KTsgLy8gc2FtZSBhcyAvaW5wdXRTaXplLnh5XG4gKiB9XG4gKiBgYGBcbiAqICoqcmVzb2x1dGlvbioqXG4gKlxuICogVGhlIGByZXNvbHV0aW9uYCBpcyB0aGUgcmF0aW8gb2Ygc2NyZWVuIChDU1MpIHBpeGVscyB0byByZWFsIHBpeGVscy5cbiAqXG4gKiAqKmlucHV0UGl4ZWwqKlxuICpcbiAqIGBpbnB1dFBpeGVsLnh5YCBpcyB0aGUgc2l6ZSBvZiBmcmFtZWJ1ZmZlciBpbiByZWFsIHBpeGVscywgc2FtZSBhcyBgaW5wdXRTaXplLnh5ICogcmVzb2x1dGlvbmBcbiAqIGBpbnB1dFBpeGVsLnp3YCBpcyBpbnZlcnRlZCBgaW5wdXRQaXhlbC54eWAuXG4gKlxuICogSXQncyBoYW5keSBmb3IgZmlsdGVycyB0aGF0IHVzZSBuZWlnaGJvdXIgcGl4ZWxzLCBsaWtlIHtAbGluayBQSVhJLmZpbHRlcnMuRlhBQUZpbHRlciBGWEFBRmlsdGVyfS5cbiAqXG4gKiAqKmlucHV0Q2xhbXAqKlxuICpcbiAqIElmIHlvdSB0cnkgdG8gZ2V0IGluZm8gZnJvbSBvdXRzaWRlIG9mIHVzZWQgcGFydCBvZiBGcmFtZWJ1ZmZlciAtIHlvdSdsbCBnZXQgdW5kZWZpbmVkIGJlaGF2aW91ci5cbiAqIEZvciBkaXNwbGFjZW1lbnRzLCBjb29yZGluYXRlcyBoYXMgdG8gYmUgY2xhbXBlZC5cbiAqXG4gKiBUaGUgYGlucHV0Q2xhbXAueHlgIGlzIGxlZnQtdG9wIHBpeGVsIGNlbnRlciwgeW91IG1heSBpZ25vcmUgaXQsIGJlY2F1c2Ugd2UgdXNlIGxlZnQtdG9wIHBhcnQgb2YgRnJhbWVidWZmZXJcbiAqIGBpbnB1dENsYW1wLnp3YCBpcyBib3R0b20tcmlnaHQgcGl4ZWwgY2VudGVyLlxuICpcbiAqIGBgYFxuICogdmVjNCBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlciwgY2xhbXAobW9kaWZpZ2VkVGV4dHVyZUNvb3JkLCBpbnB1dENsYW1wLnh5LCBpbnB1dENsYW1wLnp3KSlcbiAqIGBgYFxuICogT1JcbiAqIGBgYFxuICogdmVjNCBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlciwgbWluKG1vZGlmaWdlZFRleHR1cmVDb29yZCwgaW5wdXRDbGFtcC56dykpXG4gKiBgYGBcbiAqXG4gKiAjIyMgQWRkaXRpb25hbCBJbmZvcm1hdGlvblxuICpcbiAqIENvbXBsZXRlIGRvY3VtZW50YXRpb24gb24gRmlsdGVyIHVzYWdlIGlzIGxvY2F0ZWQgaW4gdGhlXG4gKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3BpeGlqcy9waXhpLmpzL3dpa2kvdjUtQ3JlYXRpbmctZmlsdGVycyBXaWtpfS5cbiAqXG4gKiBTaW5jZSBQaXhpSlMgb25seSBoYWQgYSBoYW5kZnVsIG9mIGJ1aWx0LWluIGZpbHRlcnMsIGFkZGl0aW9uYWwgZmlsdGVycyBjYW4gYmUgZG93bmxvYWRlZFxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpanMvcGl4aS1maWx0ZXJzIGhlcmV9IGZyb20gdGhlIFBpeGlKUyBGaWx0ZXJzIHJlcG9zaXRvcnkuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICogQGV4dGVuZHMgUElYSS5TaGFkZXJcbiAqL1xudmFyIEZpbHRlciA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFNoYWRlcikge1xuICAgIGZ1bmN0aW9uIEZpbHRlcih2ZXJ0ZXhTcmMsIGZyYWdtZW50U3JjLCB1bmlmb3JtcylcbiAgICB7XG4gICAgICAgIHZhciBwcm9ncmFtID0gUHJvZ3JhbS5mcm9tKHZlcnRleFNyYyB8fCBGaWx0ZXIuZGVmYXVsdFZlcnRleFNyYyxcbiAgICAgICAgICAgIGZyYWdtZW50U3JjIHx8IEZpbHRlci5kZWZhdWx0RnJhZ21lbnRTcmMpO1xuXG4gICAgICAgIFNoYWRlci5jYWxsKHRoaXMsIHByb2dyYW0sIHVuaWZvcm1zKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBhZGRpbmcgb2YgdGhlIGZpbHRlci4gU29tZSBmaWx0ZXJzIHJlcXVpcmUgZXh0cmEgc3BhY2UgdG8gYnJlYXRoIHN1Y2ggYXMgYSBibHVyLlxuICAgICAgICAgKiBJbmNyZWFzaW5nIHRoaXMgd2lsbCBhZGQgZXh0cmEgd2lkdGggYW5kIGhlaWdodCB0byB0aGUgYm91bmRzIG9mIHRoZSBvYmplY3QgdGhhdCB0aGVcbiAgICAgICAgICogZmlsdGVyIGlzIGFwcGxpZWQgdG8uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucGFkZGluZyA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByZXNvbHV0aW9uIG9mIHRoZSBmaWx0ZXIuIFNldHRpbmcgdGhpcyB0byBiZSBsb3dlciB3aWxsIGxvd2VyIHRoZSBxdWFsaXR5IGJ1dFxuICAgICAgICAgKiBpbmNyZWFzZSB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGZpbHRlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXNvbHV0aW9uID0gc2V0dGluZ3MuRklMVEVSX1JFU09MVVRJT047XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGVuYWJsZWQgaXMgdHJ1ZSB0aGUgZmlsdGVyIGlzIGFwcGxpZWQsIGlmIGZhbHNlIGl0IHdpbGwgbm90LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgZW5hYmxlZCwgUGl4aUpTIHdpbGwgZml0IHRoZSBmaWx0ZXIgYXJlYSBpbnRvIGJvdW5kYXJpZXMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbiAgICAgICAgICogU3dpdGNoIGl0IG9mZiBpZiBpdCBkb2VzIG5vdCB3b3JrIGZvciBzcGVjaWZpYyBzaGFkZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmF1dG9GaXQgPSB0cnVlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMZWdhY3kgZmlsdGVycyB1c2UgcG9zaXRpb24gYW5kIHV2cyBmcm9tIGF0dHJpYnV0ZXNcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxlZ2FjeSA9ICEhdGhpcy5wcm9ncmFtLmF0dHJpYnV0ZURhdGEuYVRleHR1cmVDb29yZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIFdlYkdMIHN0YXRlIHRoZSBmaWx0ZXIgcmVxdWlyZXMgdG8gcmVuZGVyXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuU3RhdGV9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXRlID0gbmV3IFN0YXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKCBTaGFkZXIgKSBGaWx0ZXIuX19wcm90b19fID0gU2hhZGVyO1xuICAgIEZpbHRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTaGFkZXIgJiYgU2hhZGVyLnByb3RvdHlwZSApO1xuICAgIEZpbHRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGaWx0ZXI7XG5cbiAgICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBibGVuZE1vZGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcbiAgICB2YXIgc3RhdGljQWNjZXNzb3JzID0geyBkZWZhdWx0VmVydGV4U3JjOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGRlZmF1bHRGcmFnbWVudFNyYzogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgZmlsdGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuc3lzdGVtcy5GaWx0ZXJTeXN0ZW19IGZpbHRlck1hbmFnZXIgLSBUaGUgcmVuZGVyZXIgdG8gcmV0cmlldmUgdGhlIGZpbHRlciBmcm9tXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IGlucHV0IC0gVGhlIGlucHV0IHJlbmRlciB0YXJnZXQuXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IG91dHB1dCAtIFRoZSB0YXJnZXQgdG8gb3V0cHV0IHRvLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xlYXIgLSBTaG91bGQgdGhlIG91dHB1dCBiZSBjbGVhcmVkIGJlZm9yZSByZW5kZXJpbmcgdG8gaXRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2N1cnJlbnRTdGF0ZV0gLSBJdCdzIGN1cnJlbnQgc3RhdGUgb2YgZmlsdGVyLlxuICAgICAqICAgICAgICBUaGVyZSBhcmUgc29tZSB1c2VmdWwgcHJvcGVydGllcyBpbiB0aGUgY3VycmVudFN0YXRlIDpcbiAgICAgKiAgICAgICAgdGFyZ2V0LCBmaWx0ZXJzLCBzb3VyY2VGcmFtZSwgZGVzdGluYXRpb25GcmFtZSwgcmVuZGVyVGFyZ2V0LCByZXNvbHV0aW9uXG4gICAgICovXG4gICAgRmlsdGVyLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIGFwcGx5IChmaWx0ZXJNYW5hZ2VyLCBpbnB1dCwgb3V0cHV0LCBjbGVhciwgY3VycmVudFN0YXRlKVxuICAgIHtcbiAgICAgICAgLy8gZG8gYXMgeW91IHBsZWFzZSFcblxuICAgICAgICBmaWx0ZXJNYW5hZ2VyLmFwcGx5RmlsdGVyKHRoaXMsIGlucHV0LCBvdXRwdXQsIGNsZWFyLCBjdXJyZW50U3RhdGUpO1xuXG4gICAgICAgIC8vIG9yIGp1c3QgZG8gYSByZWd1bGFyIHJlbmRlci4uXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGJsZW5kbW9kZSBvZiB0aGUgZmlsdGVyXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgUElYSS5CTEVORF9NT0RFUy5OT1JNQUxcbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuYmxlbmRNb2RlLmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5ibGVuZE1vZGU7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5ibGVuZE1vZGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbiAgICB7XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRNb2RlID0gdmFsdWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IHZlcnRleCBzaGFkZXIgc291cmNlXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBzdGF0aWNBY2Nlc3NvcnMuZGVmYXVsdFZlcnRleFNyYy5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWZXJ0ZXgkMTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgZnJhZ21lbnQgc2hhZGVyIHNvdXJjZVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgc3RhdGljQWNjZXNzb3JzLmRlZmF1bHRGcmFnbWVudFNyYy5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRGcmFnbWVudCQxO1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggRmlsdGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEZpbHRlciwgc3RhdGljQWNjZXNzb3JzICk7XG5cbiAgICByZXR1cm4gRmlsdGVyO1xufShTaGFkZXIpKTtcblxuLyoqXG4gKiBVc2VkIGZvciBjYWNoaW5nIHNoYWRlciBJRHNcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7b2JqZWN0fVxuICogQHByb3RlY3RlZFxuICovXG5GaWx0ZXIuU09VUkNFX0tFWV9NQVAgPSB7fTtcblxudmFyIHZlcnRleCA9IFwiYXR0cmlidXRlIHZlYzIgYVZlcnRleFBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIGFUZXh0dXJlQ29vcmQ7XFxuXFxudW5pZm9ybSBtYXQzIHByb2plY3Rpb25NYXRyaXg7XFxudW5pZm9ybSBtYXQzIG90aGVyTWF0cml4O1xcblxcbnZhcnlpbmcgdmVjMiB2TWFza0Nvb3JkO1xcbnZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xcblxcbnZvaWQgbWFpbih2b2lkKVxcbntcXG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KChwcm9qZWN0aW9uTWF0cml4ICogdmVjMyhhVmVydGV4UG9zaXRpb24sIDEuMCkpLnh5LCAwLjAsIDEuMCk7XFxuXFxuICAgIHZUZXh0dXJlQ29vcmQgPSBhVGV4dHVyZUNvb3JkO1xcbiAgICB2TWFza0Nvb3JkID0gKCBvdGhlck1hdHJpeCAqIHZlYzMoIGFUZXh0dXJlQ29vcmQsIDEuMCkgICkueHk7XFxufVxcblwiO1xuXG52YXIgZnJhZ21lbnQgPSBcInZhcnlpbmcgdmVjMiB2TWFza0Nvb3JkO1xcbnZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xcblxcbnVuaWZvcm0gc2FtcGxlcjJEIHVTYW1wbGVyO1xcbnVuaWZvcm0gc2FtcGxlcjJEIG1hc2s7XFxudW5pZm9ybSBmbG9hdCBhbHBoYTtcXG51bmlmb3JtIGZsb2F0IG5wbUFscGhhO1xcbnVuaWZvcm0gdmVjNCBtYXNrQ2xhbXA7XFxuXFxudm9pZCBtYWluKHZvaWQpXFxue1xcbiAgICBmbG9hdCBjbGlwID0gc3RlcCgzLjUsXFxuICAgICAgICBzdGVwKG1hc2tDbGFtcC54LCB2TWFza0Nvb3JkLngpICtcXG4gICAgICAgIHN0ZXAobWFza0NsYW1wLnksIHZNYXNrQ29vcmQueSkgK1xcbiAgICAgICAgc3RlcCh2TWFza0Nvb3JkLngsIG1hc2tDbGFtcC56KSArXFxuICAgICAgICBzdGVwKHZNYXNrQ29vcmQueSwgbWFza0NsYW1wLncpKTtcXG5cXG4gICAgdmVjNCBvcmlnaW5hbCA9IHRleHR1cmUyRCh1U2FtcGxlciwgdlRleHR1cmVDb29yZCk7XFxuICAgIHZlYzQgbWFza3kgPSB0ZXh0dXJlMkQobWFzaywgdk1hc2tDb29yZCk7XFxuICAgIGZsb2F0IGFscGhhTXVsID0gMS4wIC0gbnBtQWxwaGEgKiAoMS4wIC0gbWFza3kuYSk7XFxuXFxuICAgIG9yaWdpbmFsICo9IChhbHBoYU11bCAqIG1hc2t5LnIgKiBhbHBoYSAqIGNsaXApO1xcblxcbiAgICBnbF9GcmFnQ29sb3IgPSBvcmlnaW5hbDtcXG59XFxuXCI7XG5cbnZhciB0ZW1wTWF0ID0gbmV3IE1hdHJpeCgpO1xuXG4vKipcbiAqIENsYXNzIGNvbnRyb2xzIHV2IG1hcHBpbmcgZnJvbSBUZXh0dXJlIG5vcm1hbCBzcGFjZSB0byBCYXNlVGV4dHVyZSBub3JtYWwgc3BhY2UuXG4gKlxuICogVGFrZXMgYHRyaW1gIGFuZCBgcm90YXRlYCBpbnRvIGFjY291bnQuIE1heSBjb250YWluIGNsYW1wIHNldHRpbmdzIGZvciBNZXNoZXMgYW5kIFRpbGluZ1Nwcml0ZS5cbiAqXG4gKiBDYW4gYmUgdXNlZCBpbiBUZXh0dXJlIGB1dk1hdHJpeGAgZmllbGQsIG9yIHNlcGFyYXRlbHksIHlvdSBjYW4gdXNlIGRpZmZlcmVudCBjbGFtcCBzZXR0aW5ncyBvbiB0aGUgc2FtZSB0ZXh0dXJlLlxuICogSWYgeW91IHdhbnQgdG8gYWRkIHN1cHBvcnQgZm9yIHRleHR1cmUgcmVnaW9uIG9mIGNlcnRhaW4gZmVhdHVyZSBvciBmaWx0ZXIsIHRoYXQncyB3aGF0IHlvdSdyZSBsb29raW5nIGZvci5cbiAqXG4gKiBUYWtlcyB0cmFjayBvZiBUZXh0dXJlIGNoYW5nZXMgdGhyb3VnaCBgX2xhc3RUZXh0dXJlSURgIHByaXZhdGUgZmllbGQuXG4gKiBVc2UgYHVwZGF0ZSgpYCBtZXRob2QgY2FsbCB0byB0cmFjayBpdCBmcm9tIG91dHNpZGUuXG4gKlxuICogQHNlZSBQSVhJLlRleHR1cmVcbiAqIEBzZWUgUElYSS5NZXNoXG4gKiBAc2VlIFBJWEkuVGlsaW5nU3ByaXRlXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBUZXh0dXJlTWF0cml4ID0gZnVuY3Rpb24gVGV4dHVyZU1hdHJpeCh0ZXh0dXJlLCBjbGFtcE1hcmdpbilcbntcbiAgICB0aGlzLl90ZXh0dXJlID0gdGV4dHVyZTtcblxuICAgIC8qKlxuICAgICAqIE1hdHJpeCBvcGVyYXRpb24gdGhhdCBjb252ZXJ0cyB0ZXh0dXJlIHJlZ2lvbiBjb29yZHMgdG8gdGV4dHVyZSBjb29yZHNcbiAgICAgKiBAbWVtYmVyIHtQSVhJLk1hdHJpeH1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICB0aGlzLm1hcENvb3JkID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXAgcmVnaW9uIGZvciBub3JtYWxpemVkIGNvb3JkcywgbGVmdC10b3AgcGl4ZWwgY2VudGVyIGluIHh5ICwgYm90dG9tLXJpZ2h0IGluIHp3LlxuICAgICAqIENhbGN1bGF0ZWQgYmFzZWQgb24gY2xhbXBPZmZzZXQuXG4gICAgICogQG1lbWJlciB7RmxvYXQzMkFycmF5fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHRoaXMudUNsYW1wRnJhbWUgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuXG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplZCBjbGFtcCBvZmZzZXQuXG4gICAgICogQ2FsY3VsYXRlZCBiYXNlZCBvbiBjbGFtcE9mZnNldC5cbiAgICAgKiBAbWVtYmVyIHtGbG9hdDMyQXJyYXl9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgdGhpcy51Q2xhbXBPZmZzZXQgPSBuZXcgRmxvYXQzMkFycmF5KDIpO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2tzIFRleHR1cmUgZnJhbWUgY2hhbmdlc1xuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdGhpcy5fdXBkYXRlSUQgPSAtMTtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgZnJhbWUgY2xhbXBpbmdcbiAgICAgKiBXb3JrcyB3aXRoIFRpbGluZ1Nwcml0ZSBhbmQgTWVzaFxuICAgICAqIENoYW5nZSB0byAxLjUgaWYgeW91IHRleHR1cmUgaGFzIHJlcGVhdGVkIHJpZ2h0IGFuZCBib3R0b20gbGluZXMsIHRoYXQgbGVhZHMgdG8gc21vb3RoZXIgYm9yZGVyc1xuICAgICAqXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmNsYW1wT2Zmc2V0ID0gMDtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgZnJhbWUgY2xhbXBpbmdcbiAgICAgKiBXb3JrcyB3aXRoIFRpbGluZ1Nwcml0ZSBhbmQgTWVzaFxuICAgICAqIENoYW5nZSB0byAtMC41IHRvIGFkZCBhIHBpeGVsIHRvIHRoZSBlZGdlLCByZWNvbW1lbmRlZCBmb3IgdHJhbnNwYXJlbnQgdHJpbW1lZCB0ZXh0dXJlcyBpbiBhdGxhc1xuICAgICAqXG4gICAgICogQGRlZmF1bHQgMC41XG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY2xhbXBNYXJnaW4gPSAodHlwZW9mIGNsYW1wTWFyZ2luID09PSAndW5kZWZpbmVkJykgPyAwLjUgOiBjbGFtcE1hcmdpbjtcblxuICAgIC8qKlxuICAgICAqIElmIHRleHR1cmUgc2l6ZSBpcyB0aGUgc2FtZSBhcyBiYXNlVGV4dHVyZVxuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICB0aGlzLmlzU2ltcGxlID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDQgPSB7IHRleHR1cmU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLyoqXG4gKiB0ZXh0dXJlIHByb3BlcnR5XG4gKiBAbWVtYmVyIHtQSVhJLlRleHR1cmV9XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycyQ0LnRleHR1cmUuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gdGhpcy5fdGV4dHVyZTtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQ0LnRleHR1cmUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcbntcbiAgICB0aGlzLl90ZXh0dXJlID0gdmFsdWU7XG4gICAgdGhpcy5fdXBkYXRlSUQgPSAtMTtcbn07XG5cbi8qKlxuICogTXVsdGlwbGllcyB1dnMgYXJyYXkgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gdXZzIG1lc2ggdXZzXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gW291dD11dnNdIG91dHB1dFxuICogQHJldHVybnMge0Zsb2F0MzJBcnJheX0gb3V0cHV0XG4gKi9cblRleHR1cmVNYXRyaXgucHJvdG90eXBlLm11bHRpcGx5VXZzID0gZnVuY3Rpb24gbXVsdGlwbHlVdnMgKHV2cywgb3V0KVxue1xuICAgIGlmIChvdXQgPT09IHVuZGVmaW5lZClcbiAgICB7XG4gICAgICAgIG91dCA9IHV2cztcbiAgICB9XG5cbiAgICB2YXIgbWF0ID0gdGhpcy5tYXBDb29yZDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXZzLmxlbmd0aDsgaSArPSAyKVxuICAgIHtcbiAgICAgICAgdmFyIHggPSB1dnNbaV07XG4gICAgICAgIHZhciB5ID0gdXZzW2kgKyAxXTtcblxuICAgICAgICBvdXRbaV0gPSAoeCAqIG1hdC5hKSArICh5ICogbWF0LmMpICsgbWF0LnR4O1xuICAgICAgICBvdXRbaSArIDFdID0gKHggKiBtYXQuYikgKyAoeSAqIG1hdC5kKSArIG1hdC50eTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiB1cGRhdGVzIG1hdHJpY2VzIGlmIHRleHR1cmUgd2FzIGNoYW5nZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ZvcmNlVXBkYXRlPWZhbHNlXSBpZiB0cnVlLCBtYXRyaWNlcyB3aWxsIGJlIHVwZGF0ZWQgYW55IGNhc2VcbiAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIG9yIG5vdCBpdCB3YXMgdXBkYXRlZFxuICovXG5UZXh0dXJlTWF0cml4LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGZvcmNlVXBkYXRlKVxue1xuICAgIHZhciB0ZXggPSB0aGlzLl90ZXh0dXJlO1xuXG4gICAgaWYgKCF0ZXggfHwgIXRleC52YWxpZClcbiAgICB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWZvcmNlVXBkYXRlXG4gICAgICAgICYmIHRoaXMuX3VwZGF0ZUlEID09PSB0ZXguX3VwZGF0ZUlEKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZUlEID0gdGV4Ll91cGRhdGVJRDtcblxuICAgIHZhciB1dnMgPSB0ZXguX3V2cztcblxuICAgIHRoaXMubWFwQ29vcmQuc2V0KHV2cy54MSAtIHV2cy54MCwgdXZzLnkxIC0gdXZzLnkwLCB1dnMueDMgLSB1dnMueDAsIHV2cy55MyAtIHV2cy55MCwgdXZzLngwLCB1dnMueTApO1xuXG4gICAgdmFyIG9yaWcgPSB0ZXgub3JpZztcbiAgICB2YXIgdHJpbSA9IHRleC50cmltO1xuXG4gICAgaWYgKHRyaW0pXG4gICAge1xuICAgICAgICB0ZW1wTWF0LnNldChvcmlnLndpZHRoIC8gdHJpbS53aWR0aCwgMCwgMCwgb3JpZy5oZWlnaHQgLyB0cmltLmhlaWdodCxcbiAgICAgICAgICAgIC10cmltLnggLyB0cmltLndpZHRoLCAtdHJpbS55IC8gdHJpbS5oZWlnaHQpO1xuICAgICAgICB0aGlzLm1hcENvb3JkLmFwcGVuZCh0ZW1wTWF0KTtcbiAgICB9XG5cbiAgICB2YXIgdGV4QmFzZSA9IHRleC5iYXNlVGV4dHVyZTtcbiAgICB2YXIgZnJhbWUgPSB0aGlzLnVDbGFtcEZyYW1lO1xuICAgIHZhciBtYXJnaW4gPSB0aGlzLmNsYW1wTWFyZ2luIC8gdGV4QmFzZS5yZXNvbHV0aW9uO1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLmNsYW1wT2Zmc2V0O1xuXG4gICAgZnJhbWVbMF0gPSAodGV4Ll9mcmFtZS54ICsgbWFyZ2luICsgb2Zmc2V0KSAvIHRleEJhc2Uud2lkdGg7XG4gICAgZnJhbWVbMV0gPSAodGV4Ll9mcmFtZS55ICsgbWFyZ2luICsgb2Zmc2V0KSAvIHRleEJhc2UuaGVpZ2h0O1xuICAgIGZyYW1lWzJdID0gKHRleC5fZnJhbWUueCArIHRleC5fZnJhbWUud2lkdGggLSBtYXJnaW4gKyBvZmZzZXQpIC8gdGV4QmFzZS53aWR0aDtcbiAgICBmcmFtZVszXSA9ICh0ZXguX2ZyYW1lLnkgKyB0ZXguX2ZyYW1lLmhlaWdodCAtIG1hcmdpbiArIG9mZnNldCkgLyB0ZXhCYXNlLmhlaWdodDtcbiAgICB0aGlzLnVDbGFtcE9mZnNldFswXSA9IG9mZnNldCAvIHRleEJhc2UucmVhbFdpZHRoO1xuICAgIHRoaXMudUNsYW1wT2Zmc2V0WzFdID0gb2Zmc2V0IC8gdGV4QmFzZS5yZWFsSGVpZ2h0O1xuXG4gICAgdGhpcy5pc1NpbXBsZSA9IHRleC5fZnJhbWUud2lkdGggPT09IHRleEJhc2Uud2lkdGhcbiAgICAgICAgJiYgdGV4Ll9mcmFtZS5oZWlnaHQgPT09IHRleEJhc2UuaGVpZ2h0XG4gICAgICAgICYmIHRleC5yb3RhdGUgPT09IDA7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBUZXh0dXJlTWF0cml4LnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDQgKTtcblxuLyoqXG4gKiBUaGlzIGhhbmRsZXMgYSBTcHJpdGUgYWN0aW5nIGFzIGEgbWFzaywgYXMgb3Bwb3NlZCB0byBhIEdyYXBoaWMuXG4gKlxuICogV2ViR0wgb25seS5cbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuRmlsdGVyXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgU3ByaXRlTWFza0ZpbHRlciA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEZpbHRlcikge1xuICAgIGZ1bmN0aW9uIFNwcml0ZU1hc2tGaWx0ZXIoc3ByaXRlKVxuICAgIHtcbiAgICAgICAgdmFyIG1hc2tNYXRyaXggPSBuZXcgTWF0cml4KCk7XG5cbiAgICAgICAgRmlsdGVyLmNhbGwodGhpcywgdmVydGV4LCBmcmFnbWVudCk7XG5cbiAgICAgICAgc3ByaXRlLnJlbmRlcmFibGUgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3ByaXRlIG1hc2tcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5TcHJpdGV9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1hc2tTcHJpdGUgPSBzcHJpdGU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hc2sgbWF0cml4XG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuTWF0cml4fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXNrTWF0cml4ID0gbWFza01hdHJpeDtcbiAgICB9XG5cbiAgICBpZiAoIEZpbHRlciApIFNwcml0ZU1hc2tGaWx0ZXIuX19wcm90b19fID0gRmlsdGVyO1xuICAgIFNwcml0ZU1hc2tGaWx0ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRmlsdGVyICYmIEZpbHRlci5wcm90b3R5cGUgKTtcbiAgICBTcHJpdGVNYXNrRmlsdGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwcml0ZU1hc2tGaWx0ZXI7XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBmaWx0ZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5zeXN0ZW1zLkZpbHRlclN5c3RlbX0gZmlsdGVyTWFuYWdlciAtIFRoZSByZW5kZXJlciB0byByZXRyaWV2ZSB0aGUgZmlsdGVyIGZyb21cbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gaW5wdXQgLSBUaGUgaW5wdXQgcmVuZGVyIHRhcmdldC5cbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gb3V0cHV0IC0gVGhlIHRhcmdldCB0byBvdXRwdXQgdG8uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBjbGVhciAtIFNob3VsZCB0aGUgb3V0cHV0IGJlIGNsZWFyZWQgYmVmb3JlIHJlbmRlcmluZyB0byBpdC5cbiAgICAgKi9cbiAgICBTcHJpdGVNYXNrRmlsdGVyLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIGFwcGx5IChmaWx0ZXJNYW5hZ2VyLCBpbnB1dCwgb3V0cHV0LCBjbGVhcilcbiAgICB7XG4gICAgICAgIHZhciBtYXNrU3ByaXRlID0gdGhpcy5tYXNrU3ByaXRlO1xuICAgICAgICB2YXIgdGV4ID0gdGhpcy5tYXNrU3ByaXRlLnRleHR1cmU7XG5cbiAgICAgICAgaWYgKCF0ZXgudmFsaWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRleC50cmFuc2Zvcm0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIG1hcmdpbiA9IDAuMCwgbGV0IGl0IGJsZWVkIGEgYml0LCBzaGFkZXIgY29kZSBiZWNvbWVzIGVhc2llclxuICAgICAgICAgICAgLy8gYXNzdW1pbmcgdGhhdCBhdGxhcyB0ZXh0dXJlcyB3ZXJlIG1hZGUgd2l0aCAxLXBpeGVsIHBhZGRpbmdcbiAgICAgICAgICAgIHRleC50cmFuc2Zvcm0gPSBuZXcgVGV4dHVyZU1hdHJpeCh0ZXgsIDAuMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4LnRyYW5zZm9ybS51cGRhdGUoKTtcblxuICAgICAgICB0aGlzLnVuaWZvcm1zLm5wbUFscGhhID0gdGV4LmJhc2VUZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgPyAwLjAgOiAxLjA7XG4gICAgICAgIHRoaXMudW5pZm9ybXMubWFzayA9IHRleDtcbiAgICAgICAgLy8gZ2V0IF9ub3JtYWxpemVkIHNwcml0ZSB0ZXh0dXJlIGNvb3Jkc18gYW5kIGNvbnZlcnQgdGhlbSB0byBfbm9ybWFsaXplZCBhdGxhcyB0ZXh0dXJlIGNvb3Jkc18gd2l0aCBgcHJlcGVuZGBcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5vdGhlck1hdHJpeCA9IGZpbHRlck1hbmFnZXIuY2FsY3VsYXRlU3ByaXRlTWF0cml4KHRoaXMubWFza01hdHJpeCwgbWFza1Nwcml0ZSlcbiAgICAgICAgICAgIC5wcmVwZW5kKHRleC50cmFuc2Zvcm0ubWFwQ29vcmQpO1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmFscGhhID0gbWFza1Nwcml0ZS53b3JsZEFscGhhO1xuICAgICAgICB0aGlzLnVuaWZvcm1zLm1hc2tDbGFtcCA9IHRleC50cmFuc2Zvcm0udUNsYW1wRnJhbWU7XG5cbiAgICAgICAgZmlsdGVyTWFuYWdlci5hcHBseUZpbHRlcih0aGlzLCBpbnB1dCwgb3V0cHV0LCBjbGVhcik7XG4gICAgfTtcblxuICAgIHJldHVybiBTcHJpdGVNYXNrRmlsdGVyO1xufShGaWx0ZXIpKTtcblxuLyoqXG4gKiBTeXN0ZW0gcGx1Z2luIHRvIHRoZSByZW5kZXJlciB0byBtYW5hZ2UgbWFza3MuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICovXG52YXIgTWFza1N5c3RlbSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN5c3RlbSkge1xuICAgIGZ1bmN0aW9uIE1hc2tTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgLy8gVE9ETyAtIHdlIGRvbid0IG5lZWQgYm90aCFcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGB0cnVlYCBpZiBjdXJyZW50IHB1c2hlZCBtYXNrZWQgaXMgc2Npc3NvclxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2Npc3NvciA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXNrIGRhdGFcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5HcmFwaGljc31cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjaXNzb3JEYXRhID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGFyZ2V0IHRvIG1hc2tcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5EaXNwbGF5T2JqZWN0fVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2Npc3NvclJlbmRlclRhcmdldCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSBzY2lzc29yXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbmFibGVTY2lzc29yID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBvb2wgb2YgdXNlZCBzcHJpdGUgbWFzayBmaWx0ZXJzXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuU3ByaXRlTWFza0ZpbHRlcltdfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWxwaGFNYXNrUG9vbCA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50IGluZGV4IG9mIGFscGhhIG1hc2sgcG9vbFxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFscGhhTWFza0luZGV4ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoIFN5c3RlbSApIE1hc2tTeXN0ZW0uX19wcm90b19fID0gU3lzdGVtO1xuICAgIE1hc2tTeXN0ZW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3lzdGVtICYmIFN5c3RlbS5wcm90b3R5cGUgKTtcbiAgICBNYXNrU3lzdGVtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1hc2tTeXN0ZW07XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBNYXNrIGFuZCBhZGRzIGl0IHRvIHRoZSBjdXJyZW50IGZpbHRlciBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSB0YXJnZXQgLSBEaXNwbGF5IE9iamVjdCB0byBwdXNoIHRoZSBtYXNrIHRvXG4gICAgICogQHBhcmFtIHtQSVhJLlNwcml0ZXxQSVhJLkdyYXBoaWNzfSBtYXNrRGF0YSAtIFRoZSBtYXNraW5nIGRhdGEuXG4gICAgICovXG4gICAgTWFza1N5c3RlbS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKHRhcmdldCwgbWFza0RhdGEpXG4gICAge1xuICAgICAgICAvLyBUT0RPIHRoZSByb290IGNoZWNrIG1lYW5zIHNjaXNzb3IgcmVjdCB3aWxsIG5vdFxuICAgICAgICAvLyBiZSB1c2VkIG9uIHJlbmRlciB0ZXh0dXJlcyBtb3JlIGluZm8gaGVyZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BpeGlqcy9waXhpLmpzL3B1bGwvMzU0NVxuXG4gICAgICAgIGlmIChtYXNrRGF0YS5pc1Nwcml0ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wdXNoU3ByaXRlTWFzayh0YXJnZXQsIG1hc2tEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmVuYWJsZVNjaXNzb3JcbiAgICAgICAgICAgICYmICF0aGlzLnNjaXNzb3JcbiAgICAgICAgICAgICYmIHRoaXMucmVuZGVyZXIuX2FjdGl2ZVJlbmRlclRhcmdldC5yb290XG4gICAgICAgICAgICAmJiAhdGhpcy5yZW5kZXJlci5zdGVuY2lsLnN0ZW5jaWxNYXNrU3RhY2subGVuZ3RoXG4gICAgICAgICAgICAmJiBtYXNrRGF0YS5pc0Zhc3RSZWN0KCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBtYXRyaXggPSBtYXNrRGF0YS53b3JsZFRyYW5zZm9ybTtcblxuICAgICAgICAgICAgdmFyIHJvdCA9IE1hdGguYXRhbjIobWF0cml4LmIsIG1hdHJpeC5hKTtcblxuICAgICAgICAgICAgLy8gdXNlIHRoZSBuZWFyZXN0IGRlZ3JlZSFcbiAgICAgICAgICAgIHJvdCA9IE1hdGgucm91bmQocm90ICogKDE4MCAvIE1hdGguUEkpKTtcblxuICAgICAgICAgICAgaWYgKHJvdCAlIDkwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaFN0ZW5jaWxNYXNrKG1hc2tEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2hTY2lzc29yTWFzayh0YXJnZXQsIG1hc2tEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucHVzaFN0ZW5jaWxNYXNrKG1hc2tEYXRhKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBsYXN0IG1hc2sgZnJvbSB0aGUgbWFzayBzdGFjayBhbmQgZG9lc24ndCByZXR1cm4gaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gdGFyZ2V0IC0gRGlzcGxheSBPYmplY3QgdG8gcG9wIHRoZSBtYXNrIGZyb21cbiAgICAgKiBAcGFyYW0ge1BJWEkuU3ByaXRlfFBJWEkuR3JhcGhpY3N9IG1hc2tEYXRhIC0gVGhlIG1hc2tpbmcgZGF0YS5cbiAgICAgKi9cbiAgICBNYXNrU3lzdGVtLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiBwb3AgKHRhcmdldCwgbWFza0RhdGEpXG4gICAge1xuICAgICAgICBpZiAobWFza0RhdGEuaXNTcHJpdGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucG9wU3ByaXRlTWFzayh0YXJnZXQsIG1hc2tEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmVuYWJsZVNjaXNzb3IgJiYgIXRoaXMucmVuZGVyZXIuc3RlbmNpbC5zdGVuY2lsTWFza1N0YWNrLmxlbmd0aClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wb3BTY2lzc29yTWFzayh0YXJnZXQsIG1hc2tEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucG9wU3RlbmNpbE1hc2sodGFyZ2V0LCBtYXNrRGF0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgTWFzayBhbmQgYWRkcyBpdCB0byB0aGUgY3VycmVudCBmaWx0ZXIgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gdGFyZ2V0IC0gRGlzcGxheSBPYmplY3QgdG8gcHVzaCB0aGUgc3ByaXRlIG1hc2sgdG9cbiAgICAgKiBAcGFyYW0ge1BJWEkuU3ByaXRlfSBtYXNrRGF0YSAtIFNwcml0ZSB0byBiZSB1c2VkIGFzIHRoZSBtYXNrXG4gICAgICovXG4gICAgTWFza1N5c3RlbS5wcm90b3R5cGUucHVzaFNwcml0ZU1hc2sgPSBmdW5jdGlvbiBwdXNoU3ByaXRlTWFzayAodGFyZ2V0LCBtYXNrRGF0YSlcbiAgICB7XG4gICAgICAgIHZhciBhbHBoYU1hc2tGaWx0ZXIgPSB0aGlzLmFscGhhTWFza1Bvb2xbdGhpcy5hbHBoYU1hc2tJbmRleF07XG5cbiAgICAgICAgaWYgKCFhbHBoYU1hc2tGaWx0ZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFscGhhTWFza0ZpbHRlciA9IHRoaXMuYWxwaGFNYXNrUG9vbFt0aGlzLmFscGhhTWFza0luZGV4XSA9IFtuZXcgU3ByaXRlTWFza0ZpbHRlcihtYXNrRGF0YSldO1xuICAgICAgICB9XG5cbiAgICAgICAgYWxwaGFNYXNrRmlsdGVyWzBdLnJlc29sdXRpb24gPSB0aGlzLnJlbmRlcmVyLnJlc29sdXRpb247XG4gICAgICAgIGFscGhhTWFza0ZpbHRlclswXS5tYXNrU3ByaXRlID0gbWFza0RhdGE7XG5cbiAgICAgICAgdmFyIHN0YXNoRmlsdGVyQXJlYSA9IHRhcmdldC5maWx0ZXJBcmVhO1xuXG4gICAgICAgIHRhcmdldC5maWx0ZXJBcmVhID0gbWFza0RhdGEuZ2V0Qm91bmRzKHRydWUpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmZpbHRlci5wdXNoKHRhcmdldCwgYWxwaGFNYXNrRmlsdGVyKTtcbiAgICAgICAgdGFyZ2V0LmZpbHRlckFyZWEgPSBzdGFzaEZpbHRlckFyZWE7XG5cbiAgICAgICAgdGhpcy5hbHBoYU1hc2tJbmRleCsrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBsYXN0IGZpbHRlciBmcm9tIHRoZSBmaWx0ZXIgc3RhY2sgYW5kIGRvZXNuJ3QgcmV0dXJuIGl0LlxuICAgICAqXG4gICAgICovXG4gICAgTWFza1N5c3RlbS5wcm90b3R5cGUucG9wU3ByaXRlTWFzayA9IGZ1bmN0aW9uIHBvcFNwcml0ZU1hc2sgKClcbiAgICB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuZmlsdGVyLnBvcCgpO1xuICAgICAgICB0aGlzLmFscGhhTWFza0luZGV4LS07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIE1hc2sgYW5kIGFkZHMgaXQgdG8gdGhlIGN1cnJlbnQgZmlsdGVyIHN0YWNrLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlNwcml0ZXxQSVhJLkdyYXBoaWNzfSBtYXNrRGF0YSAtIFRoZSBtYXNraW5nIGRhdGEuXG4gICAgICovXG4gICAgTWFza1N5c3RlbS5wcm90b3R5cGUucHVzaFN0ZW5jaWxNYXNrID0gZnVuY3Rpb24gcHVzaFN0ZW5jaWxNYXNrIChtYXNrRGF0YSlcbiAgICB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYmF0Y2guZmx1c2goKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zdGVuY2lsLnB1c2hTdGVuY2lsKG1hc2tEYXRhKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgbGFzdCBmaWx0ZXIgZnJvbSB0aGUgZmlsdGVyIHN0YWNrIGFuZCBkb2Vzbid0IHJldHVybiBpdC5cbiAgICAgKlxuICAgICAqL1xuICAgIE1hc2tTeXN0ZW0ucHJvdG90eXBlLnBvcFN0ZW5jaWxNYXNrID0gZnVuY3Rpb24gcG9wU3RlbmNpbE1hc2sgKClcbiAgICB7XG4gICAgICAgIC8vIHRoaXMucmVuZGVyZXIuY3VycmVudFJlbmRlcmVyLnN0b3AoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zdGVuY2lsLnBvcFN0ZW5jaWwoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gdGFyZ2V0IC0gRGlzcGxheSBPYmplY3QgdG8gcHVzaCB0aGUgbWFzayB0b1xuICAgICAqIEBwYXJhbSB7UElYSS5HcmFwaGljc30gbWFza0RhdGEgLSBUaGUgbWFza2luZyBkYXRhLlxuICAgICAqL1xuICAgIE1hc2tTeXN0ZW0ucHJvdG90eXBlLnB1c2hTY2lzc29yTWFzayA9IGZ1bmN0aW9uIHB1c2hTY2lzc29yTWFzayAodGFyZ2V0LCBtYXNrRGF0YSlcbiAgICB7XG4gICAgICAgIG1hc2tEYXRhLnJlbmRlcmFibGUgPSB0cnVlO1xuXG4gICAgICAgIHZhciByZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlcmVyLl9hY3RpdmVSZW5kZXJUYXJnZXQ7XG5cbiAgICAgICAgdmFyIGJvdW5kcyA9IG1hc2tEYXRhLmdldEJvdW5kcygpO1xuXG4gICAgICAgIGJvdW5kcy5maXQocmVuZGVyVGFyZ2V0LnNpemUpO1xuICAgICAgICBtYXNrRGF0YS5yZW5kZXJhYmxlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5nbC5lbmFibGUodGhpcy5yZW5kZXJlci5nbC5TQ0lTU09SX1RFU1QpO1xuXG4gICAgICAgIHZhciByZXNvbHV0aW9uID0gdGhpcy5yZW5kZXJlci5yZXNvbHV0aW9uO1xuXG4gICAgICAgIHRoaXMucmVuZGVyZXIuZ2wuc2Npc3NvcihcbiAgICAgICAgICAgIGJvdW5kcy54ICogcmVzb2x1dGlvbixcbiAgICAgICAgICAgIChyZW5kZXJUYXJnZXQucm9vdCA/IHJlbmRlclRhcmdldC5zaXplLmhlaWdodCAtIGJvdW5kcy55IC0gYm91bmRzLmhlaWdodCA6IGJvdW5kcy55KSAqIHJlc29sdXRpb24sXG4gICAgICAgICAgICBib3VuZHMud2lkdGggKiByZXNvbHV0aW9uLFxuICAgICAgICAgICAgYm91bmRzLmhlaWdodCAqIHJlc29sdXRpb25cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnNjaXNzb3JSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG4gICAgICAgIHRoaXMuc2Npc3NvckRhdGEgPSBtYXNrRGF0YTtcbiAgICAgICAgdGhpcy5zY2lzc29yID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUG9wIHNjaXNzb3IgbWFza1xuICAgICAqXG4gICAgICovXG4gICAgTWFza1N5c3RlbS5wcm90b3R5cGUucG9wU2Npc3Nvck1hc2sgPSBmdW5jdGlvbiBwb3BTY2lzc29yTWFzayAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5zY2lzc29yUmVuZGVyVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zY2lzc29yRGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2Npc3NvciA9IGZhbHNlO1xuXG4gICAgICAgIC8vIG11c3QgYmUgc2Npc3NvciFcbiAgICAgICAgdmFyIHJlZiA9IHRoaXMucmVuZGVyZXI7XG4gICAgICAgIHZhciBnbCA9IHJlZi5nbDtcblxuICAgICAgICBnbC5kaXNhYmxlKGdsLlNDSVNTT1JfVEVTVCk7XG4gICAgfTtcblxuICAgIHJldHVybiBNYXNrU3lzdGVtO1xufShTeXN0ZW0pKTtcblxuLyoqXG4gKiBTeXN0ZW0gcGx1Z2luIHRvIHRoZSByZW5kZXJlciB0byBtYW5hZ2Ugc3RlbmNpbHMgKHVzZWQgZm9yIG1hc2tzKS5cbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuU3lzdGVtXG4gKiBAbWVtYmVyb2YgUElYSS5zeXN0ZW1zXG4gKi9cbnZhciBTdGVuY2lsU3lzdGVtID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU3lzdGVtKSB7XG4gICAgZnVuY3Rpb24gU3RlbmNpbFN5c3RlbShyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIFN5c3RlbS5jYWxsKHRoaXMsIHJlbmRlcmVyKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1hc2sgc3RhY2tcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5HcmFwaGljc1tdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGVuY2lsTWFza1N0YWNrID0gW107XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBTdGVuY2lsU3lzdGVtLl9fcHJvdG9fXyA9IFN5c3RlbTtcbiAgICBTdGVuY2lsU3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgU3RlbmNpbFN5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdGVuY2lsU3lzdGVtO1xuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgbWFzayBzdGFjayB0aGF0IGlzIHVzZWQgYnkgdGhpcyBTeXN0ZW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuR3JhcGhpY3NbXX0gc3RlbmNpbE1hc2tTdGFjayAtIFRoZSBtYXNrIHN0YWNrXG4gICAgICovXG4gICAgU3RlbmNpbFN5c3RlbS5wcm90b3R5cGUuc2V0TWFza1N0YWNrID0gZnVuY3Rpb24gc2V0TWFza1N0YWNrIChzdGVuY2lsTWFza1N0YWNrKVxuICAgIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5yZW5kZXJlci5nbDtcbiAgICAgICAgdmFyIGN1clN0YWNrTGVuID0gdGhpcy5zdGVuY2lsTWFza1N0YWNrLmxlbmd0aDtcblxuICAgICAgICB0aGlzLnN0ZW5jaWxNYXNrU3RhY2sgPSBzdGVuY2lsTWFza1N0YWNrO1xuICAgICAgICBpZiAoc3RlbmNpbE1hc2tTdGFjay5sZW5ndGggIT09IGN1clN0YWNrTGVuKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoc3RlbmNpbE1hc2tTdGFjay5sZW5ndGggPT09IDApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ2wuZGlzYWJsZShnbC5TVEVOQ0lMX1RFU1QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5TVEVOQ0lMX1RFU1QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VzZUN1cnJlbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBNYXNrIGFuZCBhZGRzIGl0IHRvIHRoZSBjdXJyZW50IHN0ZW5jaWwgc3RhY2suIEBhbHZpblxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkdyYXBoaWNzfSBncmFwaGljcyAtIFRoZSBtYXNrXG4gICAgICovXG4gICAgU3RlbmNpbFN5c3RlbS5wcm90b3R5cGUucHVzaFN0ZW5jaWwgPSBmdW5jdGlvbiBwdXNoU3RlbmNpbCAoZ3JhcGhpY3MpXG4gICAge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLnJlbmRlcmVyLmdsO1xuICAgICAgICB2YXIgcHJldk1hc2tDb3VudCA9IHRoaXMuc3RlbmNpbE1hc2tTdGFjay5sZW5ndGg7XG5cbiAgICAgICAgaWYgKHByZXZNYXNrQ291bnQgPT09IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGZvcmNlIHVzZSBzdGVuY2lsIHRleHR1cmUgaW4gY3VycmVudCBmcmFtZWJ1ZmZlclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5mcmFtZWJ1ZmZlci5mb3JjZVN0ZW5jaWwoKTtcbiAgICAgICAgICAgIGdsLmVuYWJsZShnbC5TVEVOQ0lMX1RFU1QpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGVuY2lsTWFza1N0YWNrLnB1c2goZ3JhcGhpY3MpO1xuXG4gICAgICAgIC8vIEluY3JlbWVudCB0aGUgcmVmZXJlbmNlIHN0ZW5jaWwgdmFsdWUgd2hlcmUgdGhlIG5ldyBtYXNrIG92ZXJsYXBzIHdpdGggdGhlIG9sZCBvbmVzLlxuICAgICAgICBnbC5jb2xvck1hc2soZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBnbC5zdGVuY2lsRnVuYyhnbC5FUVVBTCwgcHJldk1hc2tDb3VudCwgdGhpcy5fZ2V0Qml0d2lzZU1hc2soKSk7XG4gICAgICAgIGdsLnN0ZW5jaWxPcChnbC5LRUVQLCBnbC5LRUVQLCBnbC5JTkNSKTtcblxuICAgICAgICBncmFwaGljcy5yZW5kZXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgZ3JhcGhpY3MucmVuZGVyKHRoaXMucmVuZGVyZXIpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmJhdGNoLmZsdXNoKCk7XG4gICAgICAgIGdyYXBoaWNzLnJlbmRlcmFibGUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl91c2VDdXJyZW50KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGxhc3QgbWFzayBmcm9tIHRoZSBzdGVuY2lsIHN0YWNrLiBAYWx2aW5cbiAgICAgKi9cbiAgICBTdGVuY2lsU3lzdGVtLnByb3RvdHlwZS5wb3BTdGVuY2lsID0gZnVuY3Rpb24gcG9wU3RlbmNpbCAoKVxuICAgIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5yZW5kZXJlci5nbDtcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gdGhpcy5zdGVuY2lsTWFza1N0YWNrLnBvcCgpO1xuXG4gICAgICAgIGlmICh0aGlzLnN0ZW5jaWxNYXNrU3RhY2subGVuZ3RoID09PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyB0aGUgc3RhY2sgaXMgZW1wdHkhXG4gICAgICAgICAgICBnbC5kaXNhYmxlKGdsLlNURU5DSUxfVEVTVCk7XG4gICAgICAgICAgICBnbC5jbGVhcihnbC5TVEVOQ0lMX0JVRkZFUl9CSVQpO1xuICAgICAgICAgICAgZ2wuY2xlYXJTdGVuY2lsKDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gRGVjcmVtZW50IHRoZSByZWZlcmVuY2Ugc3RlbmNpbCB2YWx1ZSB3aGVyZSB0aGUgcG9wcGVkIG1hc2sgb3ZlcmxhcHMgd2l0aCB0aGUgb3RoZXIgb25lc1xuICAgICAgICAgICAgZ2wuY29sb3JNYXNrKGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgIGdsLnN0ZW5jaWxPcChnbC5LRUVQLCBnbC5LRUVQLCBnbC5ERUNSKTtcblxuICAgICAgICAgICAgZ3JhcGhpY3MucmVuZGVyYWJsZSA9IHRydWU7XG4gICAgICAgICAgICBncmFwaGljcy5yZW5kZXIodGhpcy5yZW5kZXJlcik7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmJhdGNoLmZsdXNoKCk7XG4gICAgICAgICAgICBncmFwaGljcy5yZW5kZXJhYmxlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRoaXMuX3VzZUN1cnJlbnQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXR1cCByZW5kZXJlciB0byB1c2UgdGhlIGN1cnJlbnQgc3RlbmNpbCBkYXRhLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgU3RlbmNpbFN5c3RlbS5wcm90b3R5cGUuX3VzZUN1cnJlbnQgPSBmdW5jdGlvbiBfdXNlQ3VycmVudCAoKVxuICAgIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5yZW5kZXJlci5nbDtcblxuICAgICAgICBnbC5jb2xvck1hc2sodHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIGdsLnN0ZW5jaWxGdW5jKGdsLkVRVUFMLCB0aGlzLnN0ZW5jaWxNYXNrU3RhY2subGVuZ3RoLCB0aGlzLl9nZXRCaXR3aXNlTWFzaygpKTtcbiAgICAgICAgZ2wuc3RlbmNpbE9wKGdsLktFRVAsIGdsLktFRVAsIGdsLktFRVApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGaWxsIDFzIGVxdWFsIHRvIHRoZSBudW1iZXIgb2YgYWNpdHZlIHN0ZW5jaWwgbWFza3MuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBiaXR3aXNlIG1hc2suXG4gICAgICovXG4gICAgU3RlbmNpbFN5c3RlbS5wcm90b3R5cGUuX2dldEJpdHdpc2VNYXNrID0gZnVuY3Rpb24gX2dldEJpdHdpc2VNYXNrICgpXG4gICAge1xuICAgICAgICByZXR1cm4gKDEgPDwgdGhpcy5zdGVuY2lsTWFza1N0YWNrLmxlbmd0aCkgLSAxO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgbWFzayBzdGFjay5cbiAgICAgKlxuICAgICAqL1xuICAgIFN0ZW5jaWxTeXN0ZW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG4gICAge1xuICAgICAgICBTeXN0ZW0ucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzLCB0aGlzKTtcblxuICAgICAgICB0aGlzLnN0ZW5jaWxNYXNrU3RhY2sgPSBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3RlbmNpbFN5c3RlbTtcbn0oU3lzdGVtKSk7XG5cbi8qKlxuICogU3lzdGVtIHBsdWdpbiB0byB0aGUgcmVuZGVyZXIgdG8gbWFuYWdlIHRoZSBwcm9qZWN0aW9uIG1hdHJpeC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuU3lzdGVtXG4gKiBAbWVtYmVyb2YgUElYSS5zeXN0ZW1zXG4gKi9cblxudmFyIFByb2plY3Rpb25TeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBQcm9qZWN0aW9uU3lzdGVtKHJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgU3lzdGVtLmNhbGwodGhpcywgcmVuZGVyZXIpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXN0aW5hdGlvbiBmcmFtZVxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlJlY3RhbmdsZX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uRnJhbWUgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTb3VyY2UgZnJhbWVcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5SZWN0YW5nbGV9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zb3VyY2VGcmFtZSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmF1bHQgZGVzdGluYXRpb24gZnJhbWVcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5SZWN0YW5nbGV9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZWZhdWx0RnJhbWUgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9qZWN0IG1hdHJpeFxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLk1hdHJpeH1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXggPSBuZXcgTWF0cml4KCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgdHJhbnNmb3JtIHRoYXQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgICAgICogaWYgbnVsbCwgbm90aGluZyB3aWxsIGJlIGFwcGxpZWRcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5NYXRyaXh9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBQcm9qZWN0aW9uU3lzdGVtLl9fcHJvdG9fXyA9IFN5c3RlbTtcbiAgICBQcm9qZWN0aW9uU3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgUHJvamVjdGlvblN5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQcm9qZWN0aW9uU3lzdGVtO1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcHJvamVjdGlvbiBtYXRyaXggYmFzZWQgb24gYSBwcm9qZWN0aW9uIGZyYW1lICh3aGljaCBpcyBhIHJlY3RhbmdsZSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IGRlc3RpbmF0aW9uRnJhbWUgLSBUaGUgZGVzdGluYXRpb24gZnJhbWUuXG4gICAgICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gc291cmNlRnJhbWUgLSBUaGUgc291cmNlIGZyYW1lLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByZXNvbHV0aW9uIC0gUmVzb2x1dGlvblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcm9vdCAtIElmIGlzIHJvb3RcbiAgICAgKi9cbiAgICBQcm9qZWN0aW9uU3lzdGVtLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRlc3RpbmF0aW9uRnJhbWUsIHNvdXJjZUZyYW1lLCByZXNvbHV0aW9uLCByb290KVxuICAgIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkZyYW1lID0gZGVzdGluYXRpb25GcmFtZSB8fCB0aGlzLmRlc3RpbmF0aW9uRnJhbWUgfHwgdGhpcy5kZWZhdWx0RnJhbWU7XG4gICAgICAgIHRoaXMuc291cmNlRnJhbWUgPSBzb3VyY2VGcmFtZSB8fCB0aGlzLnNvdXJjZUZyYW1lIHx8IGRlc3RpbmF0aW9uRnJhbWU7XG5cbiAgICAgICAgdGhpcy5jYWxjdWxhdGVQcm9qZWN0aW9uKHRoaXMuZGVzdGluYXRpb25GcmFtZSwgdGhpcy5zb3VyY2VGcmFtZSwgcmVzb2x1dGlvbiwgcm9vdCk7XG5cbiAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXguYXBwZW5kKHRoaXMudHJhbnNmb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZW5kZXJlciA9ICB0aGlzLnJlbmRlcmVyO1xuXG4gICAgICAgIHJlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLnVuaWZvcm1zLnByb2plY3Rpb25NYXRyaXggPSB0aGlzLnByb2plY3Rpb25NYXRyaXg7XG4gICAgICAgIHJlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLnVwZGF0ZSgpO1xuXG4gICAgICAgIC8vIHRoaXMgd2lsbCB3b3JrIGZvciBub3dcbiAgICAgICAgLy8gYnV0IHdvdWxkIGJlIHN3ZWV0IHRvIHN0aWNrIGFuZCBldmVuIG9uIHRoZSBnbG9iYWwgdW5pZm9ybXMuLlxuICAgICAgICBpZiAocmVuZGVyZXIuc2hhZGVyLnNoYWRlcilcbiAgICAgICAge1xuICAgICAgICAgICAgcmVuZGVyZXIuc2hhZGVyLnN5bmNVbmlmb3JtR3JvdXAocmVuZGVyZXIuc2hhZGVyLnNoYWRlci51bmlmb3Jtcy5nbG9iYWxzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBwcm9qZWN0aW9uIG1hdHJpeCBiYXNlZCBvbiBhIHByb2plY3Rpb24gZnJhbWUgKHdoaWNoIGlzIGEgcmVjdGFuZ2xlKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gZGVzdGluYXRpb25GcmFtZSAtIFRoZSBkZXN0aW5hdGlvbiBmcmFtZS5cbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBzb3VyY2VGcmFtZSAtIFRoZSBzb3VyY2UgZnJhbWUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJlc29sdXRpb24gLSBSZXNvbHV0aW9uXG4gICAgICogQHBhcmFtIHtib29sZWFufSByb290IC0gSWYgaXMgcm9vdFxuICAgICAqL1xuICAgIFByb2plY3Rpb25TeXN0ZW0ucHJvdG90eXBlLmNhbGN1bGF0ZVByb2plY3Rpb24gPSBmdW5jdGlvbiBjYWxjdWxhdGVQcm9qZWN0aW9uIChkZXN0aW5hdGlvbkZyYW1lLCBzb3VyY2VGcmFtZSwgcmVzb2x1dGlvbiwgcm9vdClcbiAgICB7XG4gICAgICAgIHZhciBwbSA9IHRoaXMucHJvamVjdGlvbk1hdHJpeDtcblxuICAgICAgICAvLyBJIGRvbid0IHRoaW5rIHdlIHdpbGwgbmVlZCB0aGlzIGxpbmUuLlxuICAgICAgICAvLyBwbS5pZGVudGl0eSgpO1xuXG4gICAgICAgIGlmICghcm9vdClcbiAgICAgICAge1xuICAgICAgICAgICAgcG0uYSA9ICgxIC8gZGVzdGluYXRpb25GcmFtZS53aWR0aCAqIDIpICogcmVzb2x1dGlvbjtcbiAgICAgICAgICAgIHBtLmQgPSAoMSAvIGRlc3RpbmF0aW9uRnJhbWUuaGVpZ2h0ICogMikgKiByZXNvbHV0aW9uO1xuXG4gICAgICAgICAgICBwbS50eCA9IC0xIC0gKHNvdXJjZUZyYW1lLnggKiBwbS5hKTtcbiAgICAgICAgICAgIHBtLnR5ID0gLTEgLSAoc291cmNlRnJhbWUueSAqIHBtLmQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgcG0uYSA9ICgxIC8gZGVzdGluYXRpb25GcmFtZS53aWR0aCAqIDIpICogcmVzb2x1dGlvbjtcbiAgICAgICAgICAgIHBtLmQgPSAoLTEgLyBkZXN0aW5hdGlvbkZyYW1lLmhlaWdodCAqIDIpICogcmVzb2x1dGlvbjtcblxuICAgICAgICAgICAgcG0udHggPSAtMSAtIChzb3VyY2VGcmFtZS54ICogcG0uYSk7XG4gICAgICAgICAgICBwbS50eSA9IDEgLSAoc291cmNlRnJhbWUueSAqIHBtLmQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRyYW5zZm9ybSBvZiB0aGUgYWN0aXZlIHJlbmRlciB0YXJnZXQgdG8gdGhlIGdpdmVuIG1hdHJpeFxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gbWF0cml4IC0gVGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIFByb2plY3Rpb25TeXN0ZW0ucHJvdG90eXBlLnNldFRyYW5zZm9ybSA9IGZ1bmN0aW9uIHNldFRyYW5zZm9ybSAoKS8vIG1hdHJpeClcbiAgICB7XG4gICAgICAgIC8vIHRoaXMuX2FjdGl2ZVJlbmRlclRhcmdldC50cmFuc2Zvcm0gPSBtYXRyaXg7XG4gICAgfTtcblxuICAgIHJldHVybiBQcm9qZWN0aW9uU3lzdGVtO1xufShTeXN0ZW0pKTtcblxudmFyIHRlbXBSZWN0ID0gbmV3IFJlY3RhbmdsZSgpO1xuXG4vKipcbiAqIFN5c3RlbSBwbHVnaW4gdG8gdGhlIHJlbmRlcmVyIHRvIG1hbmFnZSByZW5kZXIgdGV4dHVyZXMuXG4gKlxuICogU2hvdWxkIGJlIGFkZGVkIGFmdGVyIEZyYW1lYnVmZmVyU3lzdGVtXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICovXG5cbnZhciBSZW5kZXJUZXh0dXJlU3lzdGVtID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU3lzdGVtKSB7XG4gICAgZnVuY3Rpb24gUmVuZGVyVGV4dHVyZVN5c3RlbShyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIFN5c3RlbS5jYWxsKHRoaXMsIHJlbmRlcmVyKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNsZWFyIGJhY2tncm91bmQgY29sb3IgYXMgcmdiYVxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xlYXJDb2xvciA9IHJlbmRlcmVyLl9iYWNrZ3JvdW5kQ29sb3JSZ2JhO1xuXG4gICAgICAgIC8vIFRPRE8gbW92ZSB0aGlzIHByb3BlcnR5IHNvbWV3aGVyZSBlbHNlIVxuICAgICAgICAvKipcbiAgICAgICAgICogTGlzdCBvZiBtYXNrcyBmb3IgdGhlIFN0ZW5jaWxTeXN0ZW1cbiAgICAgICAgICogQG1lbWJlciB7UElYSS5HcmFwaGljc1tdfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVmYXVsdE1hc2tTdGFjayA9IFtdO1xuXG4gICAgICAgIC8vIGVtcHR5IHJlbmRlciB0ZXh0dXJlP1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVuZGVyIHRleHR1cmVcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5SZW5kZXJUZXh0dXJlfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNvdXJjZSBmcmFtZVxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlJlY3RhbmdsZX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNvdXJjZUZyYW1lID0gbmV3IFJlY3RhbmdsZSgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXN0aW5hdGlvbiBmcmFtZVxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlJlY3RhbmdsZX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uRnJhbWUgPSBuZXcgUmVjdGFuZ2xlKCk7XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBSZW5kZXJUZXh0dXJlU3lzdGVtLl9fcHJvdG9fXyA9IFN5c3RlbTtcbiAgICBSZW5kZXJUZXh0dXJlU3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgUmVuZGVyVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZW5kZXJUZXh0dXJlU3lzdGVtO1xuXG4gICAgLyoqXG4gICAgICogQmluZCB0aGUgY3VycmVudCByZW5kZXIgdGV4dHVyZVxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSBbcmVuZGVyVGV4dHVyZV0gLSBSZW5kZXJUZXh0dXJlIHRvIGJpbmQsIGJ5IGRlZmF1bHQgaXRzIGBudWxsYCwgdGhlIHNjcmVlblxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IFtzb3VyY2VGcmFtZV0gLSBwYXJ0IG9mIHNjcmVlbiB0aGF0IGlzIG1hcHBlZCB0byB0aGUgcmVuZGVyVGV4dHVyZVxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IFtkZXN0aW5hdGlvbkZyYW1lXSAtIHBhcnQgb2YgcmVuZGVyVGV4dHVyZSwgYnkgZGVmYXVsdCBpdCBoYXMgdGhlIHNhbWUgc2l6ZSBhcyBzb3VyY2VGcmFtZVxuICAgICAqL1xuICAgIFJlbmRlclRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kIChyZW5kZXJUZXh0dXJlLCBzb3VyY2VGcmFtZSwgZGVzdGluYXRpb25GcmFtZSlcbiAgICB7XG4gICAgICAgIGlmICggcmVuZGVyVGV4dHVyZSA9PT0gdm9pZCAwICkgcmVuZGVyVGV4dHVyZSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gcmVuZGVyVGV4dHVyZTtcblxuICAgICAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXG4gICAgICAgIHZhciByZXNvbHV0aW9uO1xuXG4gICAgICAgIGlmIChyZW5kZXJUZXh0dXJlKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYmFzZVRleHR1cmUgPSByZW5kZXJUZXh0dXJlLmJhc2VUZXh0dXJlO1xuXG4gICAgICAgICAgICByZXNvbHV0aW9uID0gYmFzZVRleHR1cmUucmVzb2x1dGlvbjtcblxuICAgICAgICAgICAgaWYgKCFkZXN0aW5hdGlvbkZyYW1lKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRlbXBSZWN0LndpZHRoID0gYmFzZVRleHR1cmUucmVhbFdpZHRoO1xuICAgICAgICAgICAgICAgIHRlbXBSZWN0LmhlaWdodCA9IGJhc2VUZXh0dXJlLnJlYWxIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbkZyYW1lID0gdGVtcFJlY3Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghc291cmNlRnJhbWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlRnJhbWUgPSBkZXN0aW5hdGlvbkZyYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmZyYW1lYnVmZmVyLmJpbmQoYmFzZVRleHR1cmUuZnJhbWVidWZmZXIsIGRlc3RpbmF0aW9uRnJhbWUpO1xuXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnByb2plY3Rpb24udXBkYXRlKGRlc3RpbmF0aW9uRnJhbWUsIHNvdXJjZUZyYW1lLCByZXNvbHV0aW9uLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnN0ZW5jaWwuc2V0TWFza1N0YWNrKGJhc2VUZXh0dXJlLnN0ZW5jaWxNYXNrU3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgcmVzb2x1dGlvbiA9IHRoaXMucmVuZGVyZXIucmVzb2x1dGlvbjtcblxuICAgICAgICAgICAgLy8gVE9ETyB0aGVzZSB2YWxpZGF0aW9uIGNoZWNrcyBoYXBwZW4gZGVlcGVyIGRvd24uLlxuICAgICAgICAgICAgLy8gdGhpbmcgdGhleSBjYW4gYmUgYXZvaWRlZC4uXG4gICAgICAgICAgICBpZiAoIWRlc3RpbmF0aW9uRnJhbWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGVtcFJlY3Qud2lkdGggPSByZW5kZXJlci53aWR0aDtcbiAgICAgICAgICAgICAgICB0ZW1wUmVjdC5oZWlnaHQgPSByZW5kZXJlci5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbkZyYW1lID0gdGVtcFJlY3Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghc291cmNlRnJhbWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlRnJhbWUgPSBkZXN0aW5hdGlvbkZyYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZW5kZXJlci5mcmFtZWJ1ZmZlci5iaW5kKG51bGwsIGRlc3RpbmF0aW9uRnJhbWUpO1xuXG4gICAgICAgICAgICAvLyBUT0RPIHN0b3JlIHRoaXMuLlxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5wcm9qZWN0aW9uLnVwZGF0ZShkZXN0aW5hdGlvbkZyYW1lLCBzb3VyY2VGcmFtZSwgcmVzb2x1dGlvbiwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnN0ZW5jaWwuc2V0TWFza1N0YWNrKHRoaXMuZGVmYXVsdE1hc2tTdGFjayk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNvdXJjZUZyYW1lLmNvcHlGcm9tKHNvdXJjZUZyYW1lKTtcblxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uRnJhbWUueCA9IGRlc3RpbmF0aW9uRnJhbWUueCAvIHJlc29sdXRpb247XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25GcmFtZS55ID0gZGVzdGluYXRpb25GcmFtZS55IC8gcmVzb2x1dGlvbjtcblxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uRnJhbWUud2lkdGggPSBkZXN0aW5hdGlvbkZyYW1lLndpZHRoIC8gcmVzb2x1dGlvbjtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkZyYW1lLmhlaWdodCA9IGRlc3RpbmF0aW9uRnJhbWUuaGVpZ2h0IC8gcmVzb2x1dGlvbjtcblxuICAgICAgICBpZiAoc291cmNlRnJhbWUgPT09IGRlc3RpbmF0aW9uRnJhbWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc291cmNlRnJhbWUuY29weUZyb20odGhpcy5kZXN0aW5hdGlvbkZyYW1lKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFcmFzZXMgdGhlIHJlbmRlciB0ZXh0dXJlIGFuZCBmaWxscyB0aGUgZHJhd2luZyBhcmVhIHdpdGggYSBjb2xvdXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IFtjbGVhckNvbG9yXSAtIFRoZSBjb2xvciBhcyByZ2JhLCBkZWZhdWx0IHRvIHVzZSB0aGUgcmVuZGVyZXIgYmFja2dyb3VuZENvbG9yXG4gICAgICogQHJldHVybiB7UElYSS5SZW5kZXJlcn0gUmV0dXJucyBpdHNlbGYuXG4gICAgICovXG4gICAgUmVuZGVyVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoY2xlYXJDb2xvcilcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNsZWFyQ29sb3IgPSBjbGVhckNvbG9yIHx8IHRoaXMuY3VycmVudC5iYXNlVGV4dHVyZS5jbGVhckNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgY2xlYXJDb2xvciA9IGNsZWFyQ29sb3IgfHwgdGhpcy5jbGVhckNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5mcmFtZWJ1ZmZlci5jbGVhcihjbGVhckNvbG9yWzBdLCBjbGVhckNvbG9yWzFdLCBjbGVhckNvbG9yWzJdLCBjbGVhckNvbG9yWzNdKTtcbiAgICB9O1xuXG4gICAgUmVuZGVyVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gcmVzaXplICgpLy8gc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodClcbiAgICB7XG4gICAgICAgIC8vIHJlc2l6ZSB0aGUgcm9vdCBvbmx5IVxuICAgICAgICB0aGlzLmJpbmQobnVsbCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyByZW5kZXJUZXh0dXJlIHN0YXRlXG4gICAgICovXG4gICAgUmVuZGVyVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5iaW5kKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVuZGVyVGV4dHVyZVN5c3RlbTtcbn0oU3lzdGVtKSk7XG5cbi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGNyZWF0ZSBhIFdlYkdMIFByb2dyYW1cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBHTFByb2dyYW0gPSBmdW5jdGlvbiBHTFByb2dyYW0ocHJvZ3JhbSwgdW5pZm9ybURhdGEpXG57XG4gICAgLyoqXG4gICAgICogVGhlIHNoYWRlciBwcm9ncmFtXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtXZWJHTFByb2dyYW19XG4gICAgICovXG4gICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcblxuICAgIC8qKlxuICAgICAqIGhvbGRzIHRoZSB1bmlmb3JtIGRhdGEgd2hpY2ggY29udGFpbnMgdW5pZm9ybSBsb2NhdGlvbnNcbiAgICAgKiBhbmQgY3VycmVudCB1bmlmb3JtIHZhbHVlcyB1c2VkIGZvciBjYWNoaW5nIGFuZCBwcmV2ZW50aW5nIHVubmVlZGVkIEdQVSBjb21tYW5kc1xuICAgICAqIEBtZW1iZXIge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLnVuaWZvcm1EYXRhID0gdW5pZm9ybURhdGE7XG5cbiAgICAvKipcbiAgICAgKiB1bmlmb3JtR3JvdXBzIGhvbGRzIHRoZSB2YXJpb3VzIHVwbG9hZCBmdW5jdGlvbnMgZm9yIHRoZSBzaGFkZXIuIEVhY2ggdW5pZm9ybSBncm91cFxuICAgICAqIGFuZCBwcm9ncmFtIGhhdmUgYSB1bmlxdWUgdXBsb2FkIGZ1bmN0aW9uIGdlbmVyYXRlZC5cbiAgICAgKiBAbWVtYmVyIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy51bmlmb3JtR3JvdXBzID0ge307XG59O1xuXG4vKipcbiAqIERlc3Ryb3lzIHRoaXMgcHJvZ3JhbVxuICovXG5HTFByb2dyYW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG57XG4gICAgdGhpcy51bmlmb3JtRGF0YSA9IG51bGw7XG4gICAgdGhpcy51bmlmb3JtR3JvdXBzID0gbnVsbDtcbiAgICB0aGlzLnByb2dyYW0gPSBudWxsO1xufTtcblxudmFyIFVJRCQ0ID0gMDtcblxuLyoqXG4gKiBTeXN0ZW0gcGx1Z2luIHRvIHRoZSByZW5kZXJlciB0byBtYW5hZ2Ugc2hhZGVycy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJLnN5c3RlbXNcbiAqIEBleHRlbmRzIFBJWEkuU3lzdGVtXG4gKi9cbnZhciBTaGFkZXJTeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBTaGFkZXJTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgLy8gVmFsaWRhdGlvbiBjaGVjayB0aGF0IHRoaXMgZW52aXJvbm1lbnQgc3VwcG9ydCBgbmV3IEZ1bmN0aW9uYFxuICAgICAgICB0aGlzLnN5c3RlbUNoZWNrKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjdXJyZW50IFdlYkdMIHJlbmRlcmluZyBjb250ZXh0XG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1dlYkdMUmVuZGVyaW5nQ29udGV4dH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2wgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuc2hhZGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FjaGUgdG8gaG9sZHMgdGhlIGdlbmVyYXRlZCBmdW5jdGlvbnMuIFN0b3JlZCBhZ2FpbnN0IFVuaWZvcm1PYmplY3RzIHVuaXF1ZSBzaWduYXR1cmVcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2FjaGUgPSB7fTtcblxuICAgICAgICB0aGlzLmlkID0gVUlEJDQrKztcbiAgICB9XG5cbiAgICBpZiAoIFN5c3RlbSApIFNoYWRlclN5c3RlbS5fX3Byb3RvX18gPSBTeXN0ZW07XG4gICAgU2hhZGVyU3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgU2hhZGVyU3lzdGVtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNoYWRlclN5c3RlbTtcblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlYWJsZSBmdW5jdGlvbiBieSBgQHBpeGkvdW5zYWZlLWV2YWxgIHRvIHNpbGVuY2VcbiAgICAgKiB0aHJvd2luZyBhbiBlcnJvciBpZiBwbGF0Zm9ybSBkb2Vzbid0IHN1cHBvcnQgdW5zYWZlLWV2YWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBTaGFkZXJTeXN0ZW0ucHJvdG90eXBlLnN5c3RlbUNoZWNrID0gZnVuY3Rpb24gc3lzdGVtQ2hlY2sgKClcbiAgICB7XG4gICAgICAgIGlmICghdW5zYWZlRXZhbFN1cHBvcnRlZCgpKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0N1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3QgYWxsb3cgdW5zYWZlLWV2YWwsICdcbiAgICAgICAgICAgICAgICArICdwbGVhc2UgdXNlIEBwaXhpL3Vuc2FmZS1ldmFsIG1vZHVsZSB0byBlbmFibGUgc3VwcG9ydC4nKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTaGFkZXJTeXN0ZW0ucHJvdG90eXBlLmNvbnRleHRDaGFuZ2UgPSBmdW5jdGlvbiBjb250ZXh0Q2hhbmdlIChnbClcbiAgICB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBjdXJyZW50IHNoYWRlciB0byB0aGUgb25lIGdpdmVuIGluIHBhcmFtZXRlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlNoYWRlcn0gc2hhZGVyIC0gdGhlIG5ldyBzaGFkZXJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvbnRTeW5jIC0gZmFsc2UgaWYgdGhlIHNoYWRlciBzaG91bGQgYXV0b21hdGljYWxseSBzeW5jIGl0cyB1bmlmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7UElYSS5HTFByb2dyYW19IHRoZSBnbFByb2dyYW0gdGhhdCBiZWxvbmdzIHRvIHRoZSBzaGFkZXIuXG4gICAgICovXG4gICAgU2hhZGVyU3lzdGVtLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCAoc2hhZGVyLCBkb250U3luYylcbiAgICB7XG4gICAgICAgIHNoYWRlci51bmlmb3Jtcy5nbG9iYWxzID0gdGhpcy5yZW5kZXJlci5nbG9iYWxVbmlmb3JtcztcblxuICAgICAgICB2YXIgcHJvZ3JhbSA9IHNoYWRlci5wcm9ncmFtO1xuICAgICAgICB2YXIgZ2xQcm9ncmFtID0gcHJvZ3JhbS5nbFByb2dyYW1zW3RoaXMucmVuZGVyZXIuQ09OVEVYVF9VSURdIHx8IHRoaXMuZ2VuZXJhdGVTaGFkZXIoc2hhZGVyKTtcblxuICAgICAgICB0aGlzLnNoYWRlciA9IHNoYWRlcjtcblxuICAgICAgICAvLyBUT0RPIC0gc29tZSBjdXJyZW50IFBpeGkgcGx1Z2lucyBieXBhc3MgdGhpcy4uIHNvIGl0IG5vdCBzYWZlIHRvIHVzZSB5ZXQuLlxuICAgICAgICBpZiAodGhpcy5wcm9ncmFtICE9PSBwcm9ncmFtKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKGdsUHJvZ3JhbS5wcm9ncmFtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZG9udFN5bmMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc3luY1VuaWZvcm1Hcm91cChzaGFkZXIudW5pZm9ybUdyb3VwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbFByb2dyYW07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwbG9hZHMgdGhlIHVuaWZvcm1zIHZhbHVlcyB0byB0aGUgY3VycmVudGx5IGJvdW5kIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB1bmlmb3JtcyAtIHRoZSB1bmlmb3JtcyB2YWx1ZXMgdGhhdCBiZSBhcHBsaWVkIHRvIHRoZSBjdXJyZW50IHNoYWRlclxuICAgICAqL1xuICAgIFNoYWRlclN5c3RlbS5wcm90b3R5cGUuc2V0VW5pZm9ybXMgPSBmdW5jdGlvbiBzZXRVbmlmb3JtcyAodW5pZm9ybXMpXG4gICAge1xuICAgICAgICB2YXIgc2hhZGVyID0gdGhpcy5zaGFkZXIucHJvZ3JhbTtcbiAgICAgICAgdmFyIGdsUHJvZ3JhbSA9IHNoYWRlci5nbFByb2dyYW1zW3RoaXMucmVuZGVyZXIuQ09OVEVYVF9VSURdO1xuXG4gICAgICAgIHNoYWRlci5zeW5jVW5pZm9ybXMoZ2xQcm9ncmFtLnVuaWZvcm1EYXRhLCB1bmlmb3JtcywgdGhpcy5yZW5kZXJlcik7XG4gICAgfTtcblxuICAgIFNoYWRlclN5c3RlbS5wcm90b3R5cGUuc3luY1VuaWZvcm1Hcm91cCA9IGZ1bmN0aW9uIHN5bmNVbmlmb3JtR3JvdXAgKGdyb3VwKVxuICAgIHtcbiAgICAgICAgdmFyIGdsUHJvZ3JhbSA9IHRoaXMuZ2V0Z2xQcm9ncmFtKCk7XG5cbiAgICAgICAgaWYgKCFncm91cC5zdGF0aWMgfHwgZ3JvdXAuZGlydHlJZCAhPT0gZ2xQcm9ncmFtLnVuaWZvcm1Hcm91cHNbZ3JvdXAuaWRdKVxuICAgICAgICB7XG4gICAgICAgICAgICBnbFByb2dyYW0udW5pZm9ybUdyb3Vwc1tncm91cC5pZF0gPSBncm91cC5kaXJ0eUlkO1xuXG4gICAgICAgICAgICB0aGlzLnN5bmNVbmlmb3Jtcyhncm91cCwgZ2xQcm9ncmFtKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZWFibGUgYnkgdGhlIEBwaXhpL3Vuc2FmZS1ldmFsIHBhY2thZ2UgdG8gdXNlIHN0YXRpY1xuICAgICAqIHN5bmNVbmZvcm1zIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFNoYWRlclN5c3RlbS5wcm90b3R5cGUuc3luY1VuaWZvcm1zID0gZnVuY3Rpb24gc3luY1VuaWZvcm1zIChncm91cCwgZ2xQcm9ncmFtKVxuICAgIHtcbiAgICAgICAgdmFyIHN5bmNGdW5jID0gZ3JvdXAuc3luY1VuaWZvcm1zW3RoaXMuc2hhZGVyLnByb2dyYW0uaWRdIHx8IHRoaXMuY3JlYXRlU3luY0dyb3Vwcyhncm91cCk7XG5cbiAgICAgICAgc3luY0Z1bmMoZ2xQcm9ncmFtLnVuaWZvcm1EYXRhLCBncm91cC51bmlmb3JtcywgdGhpcy5yZW5kZXJlcik7XG4gICAgfTtcblxuICAgIFNoYWRlclN5c3RlbS5wcm90b3R5cGUuY3JlYXRlU3luY0dyb3VwcyA9IGZ1bmN0aW9uIGNyZWF0ZVN5bmNHcm91cHMgKGdyb3VwKVxuICAgIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5nZXRTaWduYXR1cmUoZ3JvdXAsIHRoaXMuc2hhZGVyLnByb2dyYW0udW5pZm9ybURhdGEpO1xuXG4gICAgICAgIGlmICghdGhpcy5jYWNoZVtpZF0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVbaWRdID0gZ2VuZXJhdGVVbmlmb3Jtc1N5bmMoZ3JvdXAsIHRoaXMuc2hhZGVyLnByb2dyYW0udW5pZm9ybURhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ3JvdXAuc3luY1VuaWZvcm1zW3RoaXMuc2hhZGVyLnByb2dyYW0uaWRdID0gdGhpcy5jYWNoZVtpZF07XG5cbiAgICAgICAgcmV0dXJuIGdyb3VwLnN5bmNVbmlmb3Jtc1t0aGlzLnNoYWRlci5wcm9ncmFtLmlkXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSB1bmlmb3JtIGdyb3VwIGFuZCBkYXRhIGFuZCBnZW5lcmF0ZXMgYSB1bmlxdWUgc2lnbmF0dXJlIGZvciB0aGVtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlVuaWZvcm1Hcm91cH0gZ3JvdXAgdGhlIHVuaWZvcm0gZ3JvdXAgdG8gZ2V0IHNpZ25hdHVyZSBvZlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtRGF0YSB1bmlmb3JtIGluZm9ybWF0aW9uIGdlbmVyYXRlZCBieSB0aGUgc2hhZGVyXG4gICAgICogQHJldHVybnMge1N0cmluZ30gVW5pcXVlIHNpZ25hdHVyZSBvZiB0aGUgdW5pZm9ybSBncm91cFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgU2hhZGVyU3lzdGVtLnByb3RvdHlwZS5nZXRTaWduYXR1cmUgPSBmdW5jdGlvbiBnZXRTaWduYXR1cmUgKGdyb3VwLCB1bmlmb3JtRGF0YSlcbiAgICB7XG4gICAgICAgIHZhciB1bmlmb3JtcyA9IGdyb3VwLnVuaWZvcm1zO1xuXG4gICAgICAgIHZhciBzdHJpbmdzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSBpbiB1bmlmb3JtcylcbiAgICAgICAge1xuICAgICAgICAgICAgc3RyaW5ncy5wdXNoKGkpO1xuXG4gICAgICAgICAgICBpZiAodW5pZm9ybURhdGFbaV0pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5ncy5wdXNoKHVuaWZvcm1EYXRhW2ldLnR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cmluZ3Muam9pbignLScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmRlcmx5aW5nIEdMU2hhZGUgcm9mIHRoZSBjdXJyZW50bHkgYm91bmQgc2hhZGVyLlxuICAgICAqIFRoaXMgY2FuIGJlIGhhbmR5IGZvciB3aGVuIHlvdSB0byBoYXZlIGEgbGl0dGxlIG1vcmUgY29udHJvbCBvdmVyIHRoZSBzZXR0aW5nIG9mIHlvdXIgdW5pZm9ybXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQSVhJLkdMUHJvZ3JhbX0gdGhlIGdsUHJvZ3JhbSBmb3IgdGhlIGN1cnJlbnRseSBib3VuZCBTaGFkZXIgZm9yIHRoaXMgY29udGV4dFxuICAgICAqL1xuICAgIFNoYWRlclN5c3RlbS5wcm90b3R5cGUuZ2V0Z2xQcm9ncmFtID0gZnVuY3Rpb24gZ2V0Z2xQcm9ncmFtICgpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5zaGFkZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNoYWRlci5wcm9ncmFtLmdsUHJvZ3JhbXNbdGhpcy5yZW5kZXJlci5DT05URVhUX1VJRF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgZ2xQcm9ncmFtIHZlcnNpb24gb2YgdGhlIFNoYWRlciBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtQSVhJLlNoYWRlcn0gc2hhZGVyIHRoZSBzaGFkZXIgdGhhdCB0aGUgZ2xQcm9ncmFtIHdpbGwgYmUgYmFzZWQgb24uXG4gICAgICogQHJldHVybiB7UElYSS5HTFByb2dyYW19IEEgc2hpbnkgbmV3IGdsUHJvZ3JhbSFcbiAgICAgKi9cbiAgICBTaGFkZXJTeXN0ZW0ucHJvdG90eXBlLmdlbmVyYXRlU2hhZGVyID0gZnVuY3Rpb24gZ2VuZXJhdGVTaGFkZXIgKHNoYWRlcilcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgICAgICAgdmFyIHByb2dyYW0gPSBzaGFkZXIucHJvZ3JhbTtcblxuICAgICAgICB2YXIgYXR0cmliTWFwID0ge307XG5cbiAgICAgICAgZm9yICh2YXIgaSBpbiBwcm9ncmFtLmF0dHJpYnV0ZURhdGEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYk1hcFtpXSA9IHByb2dyYW0uYXR0cmlidXRlRGF0YVtpXS5sb2NhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaGFkZXJQcm9ncmFtID0gY29tcGlsZVByb2dyYW0oZ2wsIHByb2dyYW0udmVydGV4U3JjLCBwcm9ncmFtLmZyYWdtZW50U3JjLCBhdHRyaWJNYXApO1xuICAgICAgICB2YXIgdW5pZm9ybURhdGEgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBpJDEgaW4gcHJvZ3JhbS51bmlmb3JtRGF0YSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBwcm9ncmFtLnVuaWZvcm1EYXRhW2kkMV07XG5cbiAgICAgICAgICAgIHVuaWZvcm1EYXRhW2kkMV0gPSB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb246IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLCBpJDEpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBkZWZhdWx0VmFsdWUoZGF0YS50eXBlLCBkYXRhLnNpemUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnbFByb2dyYW0gPSBuZXcgR0xQcm9ncmFtKHNoYWRlclByb2dyYW0sIHVuaWZvcm1EYXRhKTtcblxuICAgICAgICBwcm9ncmFtLmdsUHJvZ3JhbXNbdGhpcy5yZW5kZXJlci5DT05URVhUX1VJRF0gPSBnbFByb2dyYW07XG5cbiAgICAgICAgcmV0dXJuIGdsUHJvZ3JhbTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIFNoYWRlclN5c3RlbSBzdGF0ZSwgZG9lcyBub3QgYWZmZWN0IFdlYkdMIHN0YXRlXG4gICAgICovXG4gICAgU2hhZGVyU3lzdGVtLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0ICgpXG4gICAge1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBudWxsO1xuICAgICAgICB0aGlzLnNoYWRlciA9IG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgU3lzdGVtIGFuZCByZW1vdmVzIGFsbCBpdHMgdGV4dHVyZXNcbiAgICAgKi9cbiAgICBTaGFkZXJTeXN0ZW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG4gICAge1xuICAgICAgICAvLyBUT0RPIGltcGxlbWVudCBkZXN0cm95IG1ldGhvZCBmb3IgU2hhZGVyU3lzdGVtXG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNoYWRlclN5c3RlbTtcbn0oU3lzdGVtKSk7XG5cbi8qKlxuICogTWFwcyBnbCBibGVuZCBjb21iaW5hdGlvbnMgdG8gV2ViR0wuXG4gKlxuICogQG1lbWJlcm9mIFBJWElcbiAqIEBmdW5jdGlvbiBtYXBXZWJHTEJsZW5kTW9kZXNUb1BpeGlcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgLSBUaGUgcmVuZGVyaW5nIGNvbnRleHQuXG4gKiBAcGFyYW0ge251bWJlcltdW119IFthcnJheT1bXV0gLSBUaGUgYXJyYXkgdG8gb3V0cHV0IGludG8uXG4gKiBAcmV0dXJuIHtudW1iZXJbXVtdfSBNYXBwZWQgbW9kZXMuXG4gKi9cbmZ1bmN0aW9uIG1hcFdlYkdMQmxlbmRNb2Rlc1RvUGl4aShnbCwgYXJyYXkpXG57XG4gICAgaWYgKCBhcnJheSA9PT0gdm9pZCAwICkgYXJyYXkgPSBbXTtcblxuICAgIC8vIFRPRE8gLSBwcmVtdWx0aXBseSBhbHBoYSB3b3VsZCBiZSBkaWZmZXJlbnQuXG4gICAgLy8gYWRkIGEgYm9vbGVhbiBmb3IgdGhhdCFcbiAgICBhcnJheVtCTEVORF9NT0RFUy5OT1JNQUxdID0gW2dsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuQUREXSA9IFtnbC5PTkUsIGdsLk9ORV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuTVVMVElQTFldID0gW2dsLkRTVF9DT0xPUiwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5TQ1JFRU5dID0gW2dsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19DT0xPUiwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5PVkVSTEFZXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkRBUktFTl0gPSBbZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5MSUdIVEVOXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkNPTE9SX0RPREdFXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkNPTE9SX0JVUk5dID0gW2dsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuSEFSRF9MSUdIVF0gPSBbZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5TT0ZUX0xJR0hUXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkRJRkZFUkVOQ0VdID0gW2dsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuRVhDTFVTSU9OXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkhVRV0gPSBbZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5TQVRVUkFUSU9OXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkNPTE9SXSA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkxVTUlOT1NJVFldID0gW2dsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuTk9ORV0gPSBbMCwgMF07XG5cbiAgICAvLyBub3QtcHJlbXVsdGlwbGllZCBibGVuZCBtb2Rlc1xuICAgIGFycmF5W0JMRU5EX01PREVTLk5PUk1BTF9OUE1dID0gW2dsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5BRERfTlBNXSA9IFtnbC5TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FLCBnbC5PTkVdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLlNDUkVFTl9OUE1dID0gW2dsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19DT0xPUiwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcblxuICAgIC8vIGNvbXBvc2l0ZSBvcGVyYXRpb25zXG4gICAgYXJyYXlbQkxFTkRfTU9ERVMuU1JDX0lOXSA9IFtnbC5EU1RfQUxQSEEsIGdsLlpFUk9dO1xuICAgIGFycmF5W0JMRU5EX01PREVTLlNSQ19PVVRdID0gW2dsLk9ORV9NSU5VU19EU1RfQUxQSEEsIGdsLlpFUk9dO1xuICAgIGFycmF5W0JMRU5EX01PREVTLlNSQ19BVE9QXSA9IFtnbC5EU1RfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkRTVF9PVkVSXSA9IFtnbC5PTkVfTUlOVVNfRFNUX0FMUEhBLCBnbC5PTkVdO1xuICAgIGFycmF5W0JMRU5EX01PREVTLkRTVF9JTl0gPSBbZ2wuWkVSTywgZ2wuU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5EU1RfT1VUXSA9IFtnbC5aRVJPLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgICBhcnJheVtCTEVORF9NT0RFUy5EU1RfQVRPUF0gPSBbZ2wuT05FX01JTlVTX0RTVF9BTFBIQSwgZ2wuU1JDX0FMUEhBXTtcblxuICAgIC8vIFNVQlRSQUNUIGZyb20gZmxhc2hcbiAgICBhcnJheVtCTEVORF9NT0RFUy5TVUJUUkFDVF0gPSBbZ2wuT05FLCBnbC5PTkUsIGdsLk9ORSwgZ2wuT05FLCBnbC5GVU5DX1JFVkVSU0VfU1VCVFJBQ1QsIGdsLkZVTkNfQUREXTtcblxuICAgIHJldHVybiBhcnJheTtcbn1cblxudmFyIEJMRU5EJDEgPSAwO1xudmFyIE9GRlNFVCQxID0gMTtcbnZhciBDVUxMSU5HJDEgPSAyO1xudmFyIERFUFRIX1RFU1QkMSA9IDM7XG52YXIgV0lORElORyQxID0gNDtcblxuLyoqXG4gKiBTeXN0ZW0gcGx1Z2luIHRvIHRoZSByZW5kZXJlciB0byBtYW5hZ2UgV2ViR0wgc3RhdGUgbWFjaGluZXMuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICovXG52YXIgU3RhdGVTeXN0ZW0gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTeXN0ZW0pIHtcbiAgICBmdW5jdGlvbiBTdGF0ZVN5c3RlbShyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIFN5c3RlbS5jYWxsKHRoaXMsIHJlbmRlcmVyKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR0wgY29udGV4dFxuICAgICAgICAgKiBAbWVtYmVyIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nbCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0YXRlIElEXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXRlSWQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQb2x5Z29uIG9mZnNldFxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wb2x5Z29uT2Zmc2V0ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQmxlbmQgbW9kZVxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuQkxFTkRfTU9ERVMuTk9ORVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYmxlbmRNb2RlID0gQkxFTkRfTU9ERVMuTk9ORTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciBjdXJyZW50IGJsZW5kIGVxdWF0aW9uIGlzIGRpZmZlcmVudFxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9ibGVuZEVxID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbGxlY3Rpb24gb2YgY2FsbHNcbiAgICAgICAgICogQG1lbWJlciB7ZnVuY3Rpb25bXX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1hcCA9IFtdO1xuXG4gICAgICAgIC8vIG1hcCBmdW5jdGlvbnMgZm9yIHdoZW4gd2Ugc2V0IHN0YXRlLi5cbiAgICAgICAgdGhpcy5tYXBbQkxFTkQkMV0gPSB0aGlzLnNldEJsZW5kO1xuICAgICAgICB0aGlzLm1hcFtPRkZTRVQkMV0gPSB0aGlzLnNldE9mZnNldDtcbiAgICAgICAgdGhpcy5tYXBbQ1VMTElORyQxXSA9IHRoaXMuc2V0Q3VsbEZhY2U7XG4gICAgICAgIHRoaXMubWFwW0RFUFRIX1RFU1QkMV0gPSB0aGlzLnNldERlcHRoVGVzdDtcbiAgICAgICAgdGhpcy5tYXBbV0lORElORyQxXSA9IHRoaXMuc2V0RnJvbnRGYWNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2xsZWN0aW9uIG9mIGNoZWNrIGNhbGxzXG4gICAgICAgICAqIEBtZW1iZXIge2Z1bmN0aW9uW119XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jaGVja3MgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmYXVsdCBXZWJHTCBTdGF0ZVxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlN0YXRlfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVmYXVsdFN0YXRlID0gbmV3IFN0YXRlKCk7XG4gICAgICAgIHRoaXMuZGVmYXVsdFN0YXRlLmJsZW5kID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWZhdWx0U3RhdGUuZGVwdGggPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICggU3lzdGVtICkgU3RhdGVTeXN0ZW0uX19wcm90b19fID0gU3lzdGVtO1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3RhdGVTeXN0ZW07XG5cbiAgICBTdGF0ZVN5c3RlbS5wcm90b3R5cGUuY29udGV4dENoYW5nZSA9IGZ1bmN0aW9uIGNvbnRleHRDaGFuZ2UgKGdsKVxuICAgIHtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuXG4gICAgICAgIHRoaXMuYmxlbmRNb2RlcyA9IG1hcFdlYkdMQmxlbmRNb2Rlc1RvUGl4aShnbCk7XG5cbiAgICAgICAgdGhpcy5zZXQodGhpcy5kZWZhdWx0U3RhdGUpO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCBzdGF0ZVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBzdGF0ZSAtIFRoZSBzdGF0ZSB0byBzZXQuXG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIHNldCAoc3RhdGUpXG4gICAge1xuICAgICAgICBzdGF0ZSA9IHN0YXRlIHx8IHRoaXMuZGVmYXVsdFN0YXRlO1xuXG4gICAgICAgIC8vIFRPRE8gbWF5YmUgdG8gYW4gb2JqZWN0IGNoZWNrPyAoIHRoaXMuc3RhdGUgPT09IHN0YXRlICk/XG4gICAgICAgIGlmICh0aGlzLnN0YXRlSWQgIT09IHN0YXRlLmRhdGEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBkaWZmID0gdGhpcy5zdGF0ZUlkIF4gc3RhdGUuZGF0YTtcbiAgICAgICAgICAgIHZhciBpID0gMDtcblxuICAgICAgICAgICAgLy8gb3JkZXIgZnJvbSBsZWFzdCB0byBtb3N0IGNvbW1vblxuICAgICAgICAgICAgd2hpbGUgKGRpZmYpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKGRpZmYgJiAxKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RhdGUgY2hhbmdlIVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcFtpXS5jYWxsKHRoaXMsICEhKHN0YXRlLmRhdGEgJiAoMSA8PCBpKSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRpZmYgPSBkaWZmID4+IDE7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN0YXRlSWQgPSBzdGF0ZS5kYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmFzZWQgb24gdGhlIGFib3ZlIHNldHRpbmdzIHdlIGNoZWNrIGZvciBzcGVjaWZpYyBtb2Rlcy4uXG4gICAgICAgIC8vIGZvciBleGFtcGxlIGlmIGJsZW5kIGlzIGFjdGl2ZSB3ZSBjaGVjayBhbmQgc2V0IHRoZSBibGVuZCBtb2Rlc1xuICAgICAgICAvLyBvciBvZiBwb2x5Z29uIG9mZnNldCBpcyBhY3RpdmUgd2UgY2hlY2sgdGhlIHBvbHkgZGVwdGguXG4gICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHRoaXMuY2hlY2tzLmxlbmd0aDsgaSQxKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tzW2kkMV0odGhpcywgc3RhdGUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YXRlLCB3aGVuIHByZXZpb3VzIHN0YXRlIGlzIHVua25vd25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gc3RhdGUgLSBUaGUgc3RhdGUgdG8gc2V0XG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLmZvcmNlU3RhdGUgPSBmdW5jdGlvbiBmb3JjZVN0YXRlIChzdGF0ZSlcbiAgICB7XG4gICAgICAgIHN0YXRlID0gc3RhdGUgfHwgdGhpcy5kZWZhdWx0U3RhdGU7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tYXAubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMubWFwW2ldLmNhbGwodGhpcywgISEoc3RhdGUuZGF0YSAmICgxIDw8IGkpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgdGhpcy5jaGVja3MubGVuZ3RoOyBpJDErKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5jaGVja3NbaSQxXSh0aGlzLCBzdGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0YXRlSWQgPSBzdGF0ZS5kYXRhO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIG9yIGRpc2FibGVkIGJsZW5kaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIGJsZW5kaW5nLlxuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLnByb3RvdHlwZS5zZXRCbGVuZCA9IGZ1bmN0aW9uIHNldEJsZW5kICh2YWx1ZSlcbiAgICB7XG4gICAgICAgIHRoaXMudXBkYXRlQ2hlY2soU3RhdGVTeXN0ZW0uY2hlY2tCbGVuZE1vZGUsIHZhbHVlKTtcblxuICAgICAgICB0aGlzLmdsW3ZhbHVlID8gJ2VuYWJsZScgOiAnZGlzYWJsZSddKHRoaXMuZ2wuQkxFTkQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIG9yIGRpc2FibGUgcG9seWdvbiBvZmZzZXQgZmlsbFxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIHBvbHlnb24gb2Zmc2V0IHRlc3RpbmcuXG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLnNldE9mZnNldCA9IGZ1bmN0aW9uIHNldE9mZnNldCAodmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLnVwZGF0ZUNoZWNrKFN0YXRlU3lzdGVtLmNoZWNrUG9seWdvbk9mZnNldCwgdmFsdWUpO1xuXG4gICAgICAgIHRoaXMuZ2xbdmFsdWUgPyAnZW5hYmxlJyA6ICdkaXNhYmxlJ10odGhpcy5nbC5QT0xZR09OX09GRlNFVF9GSUxMKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIGRlcHRoIHRlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIC0gVHVybiBvbiBvciBvZmYgd2ViZ2wgZGVwdGggdGVzdGluZy5cbiAgICAgKi9cbiAgICBTdGF0ZVN5c3RlbS5wcm90b3R5cGUuc2V0RGVwdGhUZXN0ID0gZnVuY3Rpb24gc2V0RGVwdGhUZXN0ICh2YWx1ZSlcbiAgICB7XG4gICAgICAgIHRoaXMuZ2xbdmFsdWUgPyAnZW5hYmxlJyA6ICdkaXNhYmxlJ10odGhpcy5nbC5ERVBUSF9URVNUKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIGN1bGwgZmFjZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSBUdXJuIG9uIG9yIG9mZiB3ZWJnbCBjdWxsIGZhY2UuXG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLnNldEN1bGxGYWNlID0gZnVuY3Rpb24gc2V0Q3VsbEZhY2UgKHZhbHVlKVxuICAgIHtcbiAgICAgICAgdGhpcy5nbFt2YWx1ZSA/ICdlbmFibGUnIDogJ2Rpc2FibGUnXSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdsIGZyb250IGZhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIC0gdHJ1ZSBpcyBjbG9ja3dpc2UgYW5kIGZhbHNlIGlzIGNvdW50ZXItY2xvY2t3aXNlXG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLnNldEZyb250RmFjZSA9IGZ1bmN0aW9uIHNldEZyb250RmFjZSAodmFsdWUpXG4gICAge1xuICAgICAgICB0aGlzLmdsLmZyb250RmFjZSh0aGlzLmdsW3ZhbHVlID8gJ0NXJyA6ICdDQ1cnXSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGJsZW5kIG1vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgYmxlbmQgbW9kZSB0byBzZXQgdG8uXG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLnNldEJsZW5kTW9kZSA9IGZ1bmN0aW9uIHNldEJsZW5kTW9kZSAodmFsdWUpXG4gICAge1xuICAgICAgICBpZiAodmFsdWUgPT09IHRoaXMuYmxlbmRNb2RlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJsZW5kTW9kZSA9IHZhbHVlO1xuXG4gICAgICAgIHZhciBtb2RlID0gdGhpcy5ibGVuZE1vZGVzW3ZhbHVlXTtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcblxuICAgICAgICBpZiAobW9kZS5sZW5ndGggPT09IDIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLmJsZW5kRnVuYyhtb2RlWzBdLCBtb2RlWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLmJsZW5kRnVuY1NlcGFyYXRlKG1vZGVbMF0sIG1vZGVbMV0sIG1vZGVbMl0sIG1vZGVbM10pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlLmxlbmd0aCA9PT0gNilcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fYmxlbmRFcSA9IHRydWU7XG4gICAgICAgICAgICBnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUobW9kZVs0XSwgbW9kZVs1XSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fYmxlbmRFcSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fYmxlbmRFcSA9IGZhbHNlO1xuICAgICAgICAgICAgZ2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKGdsLkZVTkNfQURELCBnbC5GVU5DX0FERCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9seWdvbiBvZmZzZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB0aGUgcG9seWdvbiBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGUgLSB0aGUgcG9seWdvbiBvZmZzZXQgc2NhbGVcbiAgICAgKi9cbiAgICBTdGF0ZVN5c3RlbS5wcm90b3R5cGUuc2V0UG9seWdvbk9mZnNldCA9IGZ1bmN0aW9uIHNldFBvbHlnb25PZmZzZXQgKHZhbHVlLCBzY2FsZSlcbiAgICB7XG4gICAgICAgIHRoaXMuZ2wucG9seWdvbk9mZnNldCh2YWx1ZSwgc2NhbGUpO1xuICAgIH07XG5cbiAgICAvLyB1c2VkXG4gICAgLyoqXG4gICAgICogUmVzZXRzIGFsbCB0aGUgbG9naWMgYW5kIGRpc2FibGVzIHRoZSB2YW9zXG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZ2wucGl4ZWxTdG9yZWkodGhpcy5nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5mb3JjZVN0YXRlKDApO1xuXG4gICAgICAgIHRoaXMuX2JsZW5kRXEgPSB0cnVlO1xuICAgICAgICB0aGlzLmJsZW5kTW9kZSA9IC0xO1xuICAgICAgICB0aGlzLnNldEJsZW5kTW9kZSgwKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogY2hlY2tzIHRvIHNlZSB3aGljaCB1cGRhdGVzIHNob3VsZCBiZSBjaGVja2VkIGJhc2VkIG9uIHdoaWNoIHNldHRpbmdzIGhhdmUgYmVlbiBhY3RpdmF0ZWQuXG4gICAgICogRm9yIGV4YW1wbGUsIGlmIGJsZW5kIGlzIGVuYWJsZWQgdGhlbiB3ZSBzaG91bGQgY2hlY2sgdGhlIGJsZW5kIG1vZGVzIGVhY2ggdGltZSB0aGUgc3RhdGUgaXMgY2hhbmdlZFxuICAgICAqIG9yIGlmIHBvbHlnb24gZmlsbCBpcyBhY3RpdmF0ZWQgdGhlbiB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSBwb2x5Z29uIG9mZnNldCBjaGFuZ2VzLlxuICAgICAqIFRoZSBpZGVhIGlzIHRoYXQgd2Ugb25seSBjaGVjayB3aGF0IHdlIGhhdmUgdG9vLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAgdGhlIGNoZWNraW5nIGZ1bmN0aW9uIHRvIGFkZCBvciByZW1vdmVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlICBzaG91bGQgdGhlIGNoZWNrIGZ1bmN0aW9uIGJlIGFkZGVkIG9yIHJlbW92ZWQuXG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0ucHJvdG90eXBlLnVwZGF0ZUNoZWNrID0gZnVuY3Rpb24gdXBkYXRlQ2hlY2sgKGZ1bmMsIHZhbHVlKVxuICAgIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5jaGVja3MuaW5kZXhPZihmdW5jKTtcblxuICAgICAgICBpZiAodmFsdWUgJiYgaW5kZXggPT09IC0xKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrcy5wdXNoKGZ1bmMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF2YWx1ZSAmJiBpbmRleCAhPT0gLTEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQSBwcml2YXRlIGxpdHRsZSB3cmFwcGVyIGZ1bmN0aW9uIHRoYXQgd2UgY2FsbCB0byBjaGVjayB0aGUgYmxlbmQgbW9kZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7UElYSS5TdGF0ZVN5c3RlbX0gU3lzdGVtICB0aGUgU3lzdGVtIHRvIHBlcmZvcm0gdGhlIHN0YXRlIGNoZWNrIG9uXG4gICAgICogQHBhcmFtIHtQSVhJLlN0YXRlfSBzdGF0ZSAgdGhlIHN0YXRlIHRoYXQgdGhlIGJsZW5kTW9kZSB3aWxsIHB1bGxlZCBmcm9tXG4gICAgICovXG4gICAgU3RhdGVTeXN0ZW0uY2hlY2tCbGVuZE1vZGUgPSBmdW5jdGlvbiBjaGVja0JsZW5kTW9kZSAoc3lzdGVtLCBzdGF0ZSlcbiAgICB7XG4gICAgICAgIHN5c3RlbS5zZXRCbGVuZE1vZGUoc3RhdGUuYmxlbmRNb2RlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQSBwcml2YXRlIGxpdHRsZSB3cmFwcGVyIGZ1bmN0aW9uIHRoYXQgd2UgY2FsbCB0byBjaGVjayB0aGUgcG9seWdvbiBvZmZzZXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1BJWEkuU3RhdGVTeXN0ZW19IFN5c3RlbSAgdGhlIFN5c3RlbSB0byBwZXJmb3JtIHRoZSBzdGF0ZSBjaGVjayBvblxuICAgICAqIEBwYXJhbSB7UElYSS5TdGF0ZX0gc3RhdGUgIHRoZSBzdGF0ZSB0aGF0IHRoZSBibGVuZE1vZGUgd2lsbCBwdWxsZWQgZnJvbVxuICAgICAqL1xuICAgIFN0YXRlU3lzdGVtLmNoZWNrUG9seWdvbk9mZnNldCA9IGZ1bmN0aW9uIGNoZWNrUG9seWdvbk9mZnNldCAoc3lzdGVtLCBzdGF0ZSlcbiAgICB7XG4gICAgICAgIHN5c3RlbS5zZXRQb2x5Z29uT2Zmc2V0KHN0YXRlLnBvbHlnb25PZmZzZXQsIDApO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3RhdGVTeXN0ZW07XG59KFN5c3RlbSkpO1xuXG4vKipcbiAqIFN5c3RlbSBwbHVnaW4gdG8gdGhlIHJlbmRlcmVyIHRvIG1hbmFnZSB0ZXh0dXJlIGdhcmJhZ2UgY29sbGVjdGlvbiBvbiB0aGUgR1BVLFxuICogZW5zdXJpbmcgdGhhdCBpdCBkb2VzIG5vdCBnZXQgY2xvZ2dlZCB1cCB3aXRoIHRleHR1cmVzIHRoYXQgYXJlIG5vIGxvbmdlciBiZWluZyB1c2VkLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICogQGV4dGVuZHMgUElYSS5TeXN0ZW1cbiAqL1xudmFyIFRleHR1cmVHQ1N5c3RlbSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN5c3RlbSkge1xuICAgIGZ1bmN0aW9uIFRleHR1cmVHQ1N5c3RlbShyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIFN5c3RlbS5jYWxsKHRoaXMsIHJlbmRlcmVyKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ291bnRcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBjb3VudFxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jaGVja0NvdW50ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWF4aW11bSBpZGxlIHRpbWUsIGluIHNlY29uZHNcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAc2VlIFBJWEkuc2V0dGluZ3MuR0NfTUFYX0lETEVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWF4SWRsZSA9IHNldHRpbmdzLkdDX01BWF9JRExFO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXhpbXVtIG51bWJlciBvZiBpdGVtIHRvIGNoZWNrXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHNlZSBQSVhJLnNldHRpbmdzLkdDX01BWF9DSEVDS19DT1VOVFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jaGVja0NvdW50TWF4ID0gc2V0dGluZ3MuR0NfTUFYX0NIRUNLX0NPVU5UO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50IGdhcmFiYWdlIGNvbGxlY3Rpb24gbW9kZVxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkdDX01PREVTfVxuICAgICAgICAgKiBAc2VlIFBJWEkuc2V0dGluZ3MuR0NfTU9ERVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tb2RlID0gc2V0dGluZ3MuR0NfTU9ERTtcbiAgICB9XG5cbiAgICBpZiAoIFN5c3RlbSApIFRleHR1cmVHQ1N5c3RlbS5fX3Byb3RvX18gPSBTeXN0ZW07XG4gICAgVGV4dHVyZUdDU3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgVGV4dHVyZUdDU3lzdGVtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHR1cmVHQ1N5c3RlbTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0byBzZWUgd2hlbiB0aGUgbGFzdCB0aW1lIGEgdGV4dHVyZSB3YXMgdXNlZFxuICAgICAqIGlmIHRoZSB0ZXh0dXJlIGhhcyBub3QgYmVlbiB1c2VkIGZvciBhIHNwZWNpZmllZCBhbW91bnQgb2YgdGltZSBpdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgR1BVXG4gICAgICovXG4gICAgVGV4dHVyZUdDU3lzdGVtLnByb3RvdHlwZS5wb3N0cmVuZGVyID0gZnVuY3Rpb24gcG9zdHJlbmRlciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5jb3VudCsrO1xuXG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IEdDX01PREVTLk1BTlVBTClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGVja0NvdW50Kys7XG5cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDb3VudCA+IHRoaXMuY2hlY2tDb3VudE1heClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5jaGVja0NvdW50ID0gMDtcblxuICAgICAgICAgICAgdGhpcy5ydW4oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdG8gc2VlIHdoZW4gdGhlIGxhc3QgdGltZSBhIHRleHR1cmUgd2FzIHVzZWRcbiAgICAgKiBpZiB0aGUgdGV4dHVyZSBoYXMgbm90IGJlZW4gdXNlZCBmb3IgYSBzcGVjaWZpZWQgYW1vdW50IG9mIHRpbWUgaXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIEdQVVxuICAgICAqL1xuICAgIFRleHR1cmVHQ1N5c3RlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpXG4gICAge1xuICAgICAgICB2YXIgdG0gPSB0aGlzLnJlbmRlcmVyLnRleHR1cmU7XG4gICAgICAgIHZhciBtYW5hZ2VkVGV4dHVyZXMgPSAgdG0ubWFuYWdlZFRleHR1cmVzO1xuICAgICAgICB2YXIgd2FzUmVtb3ZlZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFuYWdlZFRleHR1cmVzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgdGV4dHVyZSA9IG1hbmFnZWRUZXh0dXJlc1tpXTtcblxuICAgICAgICAgICAgLy8gb25seSBzdXBwb3J0cyBub24gZ2VuZXJhdGVkIHRleHR1cmVzIGF0IHRoZSBtb21lbnQhXG4gICAgICAgICAgICBpZiAoIXRleHR1cmUuZnJhbWVidWZmZXIgJiYgdGhpcy5jb3VudCAtIHRleHR1cmUudG91Y2hlZCA+IHRoaXMubWF4SWRsZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0bS5kZXN0cm95VGV4dHVyZSh0ZXh0dXJlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBtYW5hZ2VkVGV4dHVyZXNbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIHdhc1JlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdhc1JlbW92ZWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBqID0gMDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgbWFuYWdlZFRleHR1cmVzLmxlbmd0aDsgaSQxKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKG1hbmFnZWRUZXh0dXJlc1tpJDFdICE9PSBudWxsKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlZFRleHR1cmVzW2orK10gPSBtYW5hZ2VkVGV4dHVyZXNbaSQxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hbmFnZWRUZXh0dXJlcy5sZW5ndGggPSBqO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIHRoZSB0ZXh0dXJlcyB3aXRoaW4gdGhlIHNwZWNpZmllZCBkaXNwbGF5T2JqZWN0IGFuZCBpdHMgY2hpbGRyZW4gZnJvbSB0aGUgR1BVXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gZGlzcGxheU9iamVjdCAtIHRoZSBkaXNwbGF5T2JqZWN0IHRvIHJlbW92ZSB0aGUgdGV4dHVyZXMgZnJvbS5cbiAgICAgKi9cbiAgICBUZXh0dXJlR0NTeXN0ZW0ucHJvdG90eXBlLnVubG9hZCA9IGZ1bmN0aW9uIHVubG9hZCAoZGlzcGxheU9iamVjdClcbiAgICB7XG4gICAgICAgIHZhciB0bSA9IHRoaXMucmVuZGVyZXIudGV4dHVyZVN5c3RlbTtcblxuICAgICAgICAvLyBvbmx5IGRlc3Ryb3kgbm9uIGdlbmVyYXRlZCB0ZXh0dXJlc1xuICAgICAgICBpZiAoZGlzcGxheU9iamVjdC5fdGV4dHVyZSAmJiBkaXNwbGF5T2JqZWN0Ll90ZXh0dXJlLl9nbFJlbmRlclRhcmdldHMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRtLmRlc3Ryb3lUZXh0dXJlKGRpc3BsYXlPYmplY3QuX3RleHR1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IGRpc3BsYXlPYmplY3QuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudW5sb2FkKGRpc3BsYXlPYmplY3QuY2hpbGRyZW5baV0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBUZXh0dXJlR0NTeXN0ZW07XG59KFN5c3RlbSkpO1xuXG4vKipcbiAqIEludGVybmFsIHRleHR1cmUgZm9yIFdlYkdMIGNvbnRleHRcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEdMVGV4dHVyZSA9IGZ1bmN0aW9uIEdMVGV4dHVyZSh0ZXh0dXJlKVxue1xuICAgIC8qKlxuICAgICAqIFRoZSBXZWJHTCB0ZXh0dXJlXG4gICAgICogQG1lbWJlciB7V2ViR0xUZXh0dXJlfVxuICAgICAqL1xuICAgIHRoaXMudGV4dHVyZSA9IHRleHR1cmU7XG5cbiAgICAvKipcbiAgICAgKiBXaWR0aCBvZiB0ZXh0dXJlIHRoYXQgd2FzIHVzZWQgaW4gdGV4SW1hZ2UyRFxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLndpZHRoID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBIZWlnaHQgb2YgdGV4dHVyZSB0aGF0IHdhcyB1c2VkIGluIHRleEltYWdlMkRcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5oZWlnaHQgPSAtMTtcblxuICAgIC8qKlxuICAgICAqIFRleHR1cmUgY29udGVudHMgZGlydHkgZmxhZ1xuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmRpcnR5SWQgPSAtMTtcblxuICAgIC8qKlxuICAgICAqIFRleHR1cmUgc3R5bGUgZGlydHkgZmxhZ1xuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmRpcnR5U3R5bGVJZCA9IC0xO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBtaXAgbGV2ZWxzIGhhcyB0byBiZSBnZW5lcmF0ZWRcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMubWlwbWFwID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBXcmFwTW9kZSBjb3BpZWQgZnJvbSBiYXNlVGV4dHVyZVxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLndyYXBNb2RlID0gMzMwNzE7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIGNvcGllZCBmcm9tIGJhc2VUZXh0dXJlXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IDY0MDg7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIGNvcGllZCBmcm9tIGJhc2VUZXh0dXJlXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuaW50ZXJuYWxGb3JtYXQgPSA1MTIxO1xufTtcblxuLyoqXG4gKiBTeXN0ZW0gcGx1Z2luIHRvIHRoZSByZW5kZXJlciB0byBtYW5hZ2UgdGV4dHVyZXMuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLlN5c3RlbVxuICogQG1lbWJlcm9mIFBJWEkuc3lzdGVtc1xuICovXG52YXIgVGV4dHVyZVN5c3RlbSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN5c3RlbSkge1xuICAgIGZ1bmN0aW9uIFRleHR1cmVTeXN0ZW0ocmVuZGVyZXIpXG4gICAge1xuICAgICAgICBTeXN0ZW0uY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgLy8gVE9ETyBzZXQgdG8gbWF4IHRleHR1cmVzLi4uXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCb3VuZCB0ZXh0dXJlc1xuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkJhc2VUZXh0dXJlW119XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ib3VuZFRleHR1cmVzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50IGxvY2F0aW9uXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IC0xO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaXN0IG9mIG1hbmFnZWQgdGV4dHVyZXNcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5CYXNlVGV4dHVyZVtdfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWFuYWdlZFRleHR1cmVzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpZCBzb21lb25lIHRlbXBlciB3aXRoIHRleHR1cmVzIHN0YXRlPyBXZSdsbCBvdmVyd3JpdGUgdGhlbSB3aGVuIHdlIG5lZWQgdG8gdW5iaW5kIHNvbWV0aGluZy5cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3Vua25vd25Cb3VuZFRleHR1cmVzID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJhc2VUZXh0dXJlIHZhbHVlIHRoYXQgc2hvd3MgdGhhdCB3ZSBkb24ndCBrbm93IHdoYXQgaXMgYm91bmRcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5CYXNlVGV4dHVyZX1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVua25vd25UZXh0dXJlID0gbmV3IEJhc2VUZXh0dXJlKCk7XG4gICAgfVxuXG4gICAgaWYgKCBTeXN0ZW0gKSBUZXh0dXJlU3lzdGVtLl9fcHJvdG9fXyA9IFN5c3RlbTtcbiAgICBUZXh0dXJlU3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN5c3RlbSAmJiBTeXN0ZW0ucHJvdG90eXBlICk7XG4gICAgVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXh0dXJlU3lzdGVtO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB1cCB0aGUgcmVuZGVyZXIgY29udGV4dCBhbmQgbmVjZXNzYXJ5IGJ1ZmZlcnMuXG4gICAgICovXG4gICAgVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUuY29udGV4dENoYW5nZSA9IGZ1bmN0aW9uIGNvbnRleHRDaGFuZ2UgKClcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2wgPSB0aGlzLnJlbmRlcmVyLmdsO1xuXG4gICAgICAgIHRoaXMuQ09OVEVYVF9VSUQgPSB0aGlzLnJlbmRlcmVyLkNPTlRFWFRfVUlEO1xuXG4gICAgICAgIHRoaXMud2ViR0xWZXJzaW9uID0gdGhpcy5yZW5kZXJlci5jb250ZXh0LndlYkdMVmVyc2lvbjtcblxuICAgICAgICB2YXIgbWF4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpO1xuXG4gICAgICAgIHRoaXMuYm91bmRUZXh0dXJlcy5sZW5ndGggPSBtYXhUZXh0dXJlcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heFRleHR1cmVzOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuYm91bmRUZXh0dXJlc1tpXSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPIG1vdmUgdGhpcy4uIHRvIGEgbmljZSBtYWtlIGVtcHR5IHRleHR1cmVzIGNsYXNzLi5cbiAgICAgICAgdGhpcy5lbXB0eVRleHR1cmVzID0ge307XG5cbiAgICAgICAgdmFyIGVtcHR5VGV4dHVyZTJEID0gbmV3IEdMVGV4dHVyZShnbC5jcmVhdGVUZXh0dXJlKCkpO1xuXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGVtcHR5VGV4dHVyZTJELnRleHR1cmUpO1xuICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIDEsIDEsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIG5ldyBVaW50OEFycmF5KDQpKTtcblxuICAgICAgICB0aGlzLmVtcHR5VGV4dHVyZXNbZ2wuVEVYVFVSRV8yRF0gPSBlbXB0eVRleHR1cmUyRDtcbiAgICAgICAgdGhpcy5lbXB0eVRleHR1cmVzW2dsLlRFWFRVUkVfQ1VCRV9NQVBdID0gbmV3IEdMVGV4dHVyZShnbC5jcmVhdGVUZXh0dXJlKCkpO1xuXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfQ1VCRV9NQVAsIHRoaXMuZW1wdHlUZXh0dXJlc1tnbC5URVhUVVJFX0NVQkVfTUFQXS50ZXh0dXJlKTtcblxuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCA2OyBpJDErKylcbiAgICAgICAge1xuICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpJDEsIDAsIGdsLlJHQkEsIDEsIDEsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFX0NVQkVfTUFQLCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV9DVUJFX01BUCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuXG4gICAgICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IHRoaXMuYm91bmRUZXh0dXJlcy5sZW5ndGg7IGkkMisrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmJpbmQobnVsbCwgaSQyKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIGEgdGV4dHVyZSB0byBhIHNwZWNpZmljIGxvY2F0aW9uXG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd2FudCB0byB1bmJpbmQgc29tZXRoaW5nLCBwbGVhc2UgdXNlIGB1bmJpbmQodGV4dHVyZSlgIGluc3RlYWQgb2YgYGJpbmQobnVsbCwgdGV4dHVyZUxvY2F0aW9uKWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5UZXh0dXJlfFBJWEkuQmFzZVRleHR1cmV9IHRleHR1cmUgLSBUZXh0dXJlIHRvIGJpbmRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvY2F0aW9uPTBdIC0gTG9jYXRpb24gdG8gYmluZCBhdFxuICAgICAqL1xuICAgIFRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kICh0ZXh0dXJlLCBsb2NhdGlvbilcbiAgICB7XG4gICAgICAgIGlmICggbG9jYXRpb24gPT09IHZvaWQgMCApIGxvY2F0aW9uID0gMDtcblxuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGdsID0gcmVmLmdsO1xuXG4gICAgICAgIGlmICh0ZXh0dXJlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0dXJlID0gdGV4dHVyZS5iYXNlVGV4dHVyZSB8fCB0ZXh0dXJlO1xuXG4gICAgICAgICAgICBpZiAodGV4dHVyZS52YWxpZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLnRvdWNoZWQgPSB0aGlzLnJlbmRlcmVyLnRleHR1cmVHQy5jb3VudDtcblxuICAgICAgICAgICAgICAgIHZhciBnbFRleHR1cmUgPSB0ZXh0dXJlLl9nbFRleHR1cmVzW3RoaXMuQ09OVEVYVF9VSURdIHx8IHRoaXMuaW5pdFRleHR1cmUodGV4dHVyZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TG9jYXRpb24gIT09IGxvY2F0aW9uKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIGxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ib3VuZFRleHR1cmVzW2xvY2F0aW9uXSAhPT0gdGV4dHVyZSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKHRleHR1cmUudGFyZ2V0LCBnbFRleHR1cmUudGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGdsVGV4dHVyZS5kaXJ0eUlkICE9PSB0ZXh0dXJlLmRpcnR5SWQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRleHR1cmUodGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5ib3VuZFRleHR1cmVzW2xvY2F0aW9uXSA9IHRleHR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TG9jYXRpb24gIT09IGxvY2F0aW9uKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgICAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5lbXB0eVRleHR1cmVzW2dsLlRFWFRVUkVfMkRdLnRleHR1cmUpO1xuICAgICAgICAgICAgdGhpcy5ib3VuZFRleHR1cmVzW2xvY2F0aW9uXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRleHR1cmUgbG9jYXRpb24gYW5kIGJvdW5kIHRleHR1cmVzXG4gICAgICpcbiAgICAgKiBBY3R1YWwgYGJpbmQobnVsbCwgaSlgIGNhbGxzIHdpbGwgYmUgcGVyZm9ybWVkIGF0IG5leHQgYHVuYmluZCgpYCBjYWxsXG4gICAgICovXG4gICAgVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5fdW5rbm93bkJvdW5kVGV4dHVyZXMgPSB0cnVlO1xuICAgICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ib3VuZFRleHR1cmVzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmJvdW5kVGV4dHVyZXNbaV0gPSB0aGlzLnVua25vd25UZXh0dXJlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVuYmluZCBhIHRleHR1cmVcbiAgICAgKiBAcGFyYW0ge1BJWEkuVGV4dHVyZXxQSVhJLkJhc2VUZXh0dXJlfSB0ZXh0dXJlIC0gVGV4dHVyZSB0byBiaW5kXG4gICAgICovXG4gICAgVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kICh0ZXh0dXJlKVxuICAgIHtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBnbCA9IHJlZi5nbDtcbiAgICAgICAgdmFyIGJvdW5kVGV4dHVyZXMgPSByZWYuYm91bmRUZXh0dXJlcztcblxuICAgICAgICBpZiAodGhpcy5fdW5rbm93bkJvdW5kVGV4dHVyZXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3Vua25vd25Cb3VuZFRleHR1cmVzID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBzb21lb25lIGNoYW5nZWQgd2ViR0wgc3RhdGUsXG4gICAgICAgICAgICAvLyB3ZSBoYXZlIHRvIGJlIHN1cmUgdGhhdCBvdXIgdGV4dHVyZSBkb2VzIG5vdCBhcHBlYXIgaW4gbXVsdGktdGV4dHVyZSByZW5kZXJlciBzYW1wbGVyc1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZFRleHR1cmVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChib3VuZFRleHR1cmVzW2ldID09PSB0aGlzLnVua25vd25UZXh0dXJlKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5kKG51bGwsIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGJvdW5kVGV4dHVyZXMubGVuZ3RoOyBpJDErKylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKGJvdW5kVGV4dHVyZXNbaSQxXSA9PT0gdGV4dHVyZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TG9jYXRpb24gIT09IGkkMSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyBpJDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGkkMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLmVtcHR5VGV4dHVyZXNbdGV4dHVyZS50YXJnZXRdLnRleHR1cmUpO1xuICAgICAgICAgICAgICAgIGJvdW5kVGV4dHVyZXNbaSQxXSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBhIHRleHR1cmVcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSB0ZXh0dXJlIC0gVGV4dHVyZSB0byBpbml0aWFsaXplXG4gICAgICovXG4gICAgVGV4dHVyZVN5c3RlbS5wcm90b3R5cGUuaW5pdFRleHR1cmUgPSBmdW5jdGlvbiBpbml0VGV4dHVyZSAodGV4dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciBnbFRleHR1cmUgPSBuZXcgR0xUZXh0dXJlKHRoaXMuZ2wuY3JlYXRlVGV4dHVyZSgpKTtcblxuICAgICAgICAvLyBndWFyYW50ZWUgYW4gdXBkYXRlLi5cbiAgICAgICAgZ2xUZXh0dXJlLmRpcnR5SWQgPSAtMTtcblxuICAgICAgICB0ZXh0dXJlLl9nbFRleHR1cmVzW3RoaXMuQ09OVEVYVF9VSURdID0gZ2xUZXh0dXJlO1xuXG4gICAgICAgIHRoaXMubWFuYWdlZFRleHR1cmVzLnB1c2godGV4dHVyZSk7XG4gICAgICAgIHRleHR1cmUub24oJ2Rpc3Bvc2UnLCB0aGlzLmRlc3Ryb3lUZXh0dXJlLCB0aGlzKTtcblxuICAgICAgICByZXR1cm4gZ2xUZXh0dXJlO1xuICAgIH07XG5cbiAgICBUZXh0dXJlU3lzdGVtLnByb3RvdHlwZS5pbml0VGV4dHVyZVR5cGUgPSBmdW5jdGlvbiBpbml0VGV4dHVyZVR5cGUgKHRleHR1cmUsIGdsVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCA9IHRleHR1cmUuZm9ybWF0O1xuICAgICAgICBnbFRleHR1cmUudHlwZSA9IHRleHR1cmUudHlwZTtcbiAgICAgICAgaWYgKHRoaXMud2ViR0xWZXJzaW9uICE9PSAyKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGdsID0gdGhpcy5yZW5kZXJlci5nbDtcblxuICAgICAgICBpZiAodGV4dHVyZS50eXBlID09PSBnbC5GTE9BVFxuICAgICAgICAgICAgJiYgdGV4dHVyZS5mb3JtYXQgPT09IGdsLlJHQkEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkEzMkY7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhhdCdzIFdlYkdMMSBIQUxGX0ZMT0FUX09FU1xuICAgICAgICAvLyB3ZSBoYXZlIHRvIGNvbnZlcnQgaXQgdG8gV2ViR0wgSEFMRl9GTE9BVFxuICAgICAgICBpZiAodGV4dHVyZS50eXBlID09PSBUWVBFUy5IQUxGX0ZMT0FUKVxuICAgICAgICB7XG4gICAgICAgICAgICBnbFRleHR1cmUudHlwZSA9IGdsLkhBTEZfRkxPQVQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdsVGV4dHVyZS50eXBlID09PSBnbC5IQUxGX0ZMT0FUXG4gICAgICAgICAgICAmJiB0ZXh0dXJlLmZvcm1hdCA9PT0gZ2wuUkdCQSlcbiAgICAgICAge1xuICAgICAgICAgICAgZ2xUZXh0dXJlLmludGVybmFsRm9ybWF0ID0gZ2wuUkdCQTE2RjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYSB0ZXh0dXJlXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7UElYSS5CYXNlVGV4dHVyZX0gdGV4dHVyZSAtIFRleHR1cmUgdG8gaW5pdGlhbGl6ZVxuICAgICAqL1xuICAgIFRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLnVwZGF0ZVRleHR1cmUgPSBmdW5jdGlvbiB1cGRhdGVUZXh0dXJlICh0ZXh0dXJlKVxuICAgIHtcbiAgICAgICAgdmFyIGdsVGV4dHVyZSA9IHRleHR1cmUuX2dsVGV4dHVyZXNbdGhpcy5DT05URVhUX1VJRF07XG5cbiAgICAgICAgaWYgKCFnbFRleHR1cmUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICAgICAgdGhpcy5pbml0VGV4dHVyZVR5cGUodGV4dHVyZSwgZ2xUZXh0dXJlKTtcblxuICAgICAgICBpZiAodGV4dHVyZS5yZXNvdXJjZSAmJiB0ZXh0dXJlLnJlc291cmNlLnVwbG9hZChyZW5kZXJlciwgdGV4dHVyZSwgZ2xUZXh0dXJlKSlcbiAgICAgICAgO1xuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGRlZmF1bHQsIHJlbmRlclRleHR1cmUtbGlrZSBsb2dpY1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gdGV4dHVyZS5yZWFsV2lkdGg7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGV4dHVyZS5yZWFsSGVpZ2h0O1xuICAgICAgICAgICAgdmFyIGdsID0gcmVuZGVyZXIuZ2w7XG5cbiAgICAgICAgICAgIGlmIChnbFRleHR1cmUud2lkdGggIT09IHdpZHRoXG4gICAgICAgICAgICAgICAgfHwgZ2xUZXh0dXJlLmhlaWdodCAhPT0gaGVpZ2h0XG4gICAgICAgICAgICAgICAgfHwgZ2xUZXh0dXJlLmRpcnR5SWQgPCAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGdsVGV4dHVyZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgICAgIGdsVGV4dHVyZS5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBnbC50ZXhJbWFnZTJEKHRleHR1cmUudGFyZ2V0LCAwLFxuICAgICAgICAgICAgICAgICAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZXRzIG9ubHkgdXBkYXRlIHdoYXQgY2hhbmdlcy4uXG4gICAgICAgIGlmICh0ZXh0dXJlLmRpcnR5U3R5bGVJZCAhPT0gZ2xUZXh0dXJlLmRpcnR5U3R5bGVJZClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVUZXh0dXJlU3R5bGUodGV4dHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2xUZXh0dXJlLmRpcnR5SWQgPSB0ZXh0dXJlLmRpcnR5SWQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgdGhlIHRleHR1cmUgZnJvbSBXZWJHTFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV8UElYSS5UZXh0dXJlfSB0ZXh0dXJlIC0gdGhlIHRleHR1cmUgdG8gZGVzdHJveVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBSZW1vdmU9ZmFsc2VdIC0gV2hldGhlciB0byBza2lwIHJlbW92aW5nIHRoZSB0ZXh0dXJlIGZyb20gdGhlIFRleHR1cmVNYW5hZ2VyLlxuICAgICAqL1xuICAgIFRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLmRlc3Ryb3lUZXh0dXJlID0gZnVuY3Rpb24gZGVzdHJveVRleHR1cmUgKHRleHR1cmUsIHNraXBSZW1vdmUpXG4gICAge1xuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGdsID0gcmVmLmdsO1xuXG4gICAgICAgIHRleHR1cmUgPSB0ZXh0dXJlLmJhc2VUZXh0dXJlIHx8IHRleHR1cmU7XG5cbiAgICAgICAgaWYgKHRleHR1cmUuX2dsVGV4dHVyZXNbdGhpcy5DT05URVhUX1VJRF0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kKHRleHR1cmUpO1xuXG4gICAgICAgICAgICBnbC5kZWxldGVUZXh0dXJlKHRleHR1cmUuX2dsVGV4dHVyZXNbdGhpcy5DT05URVhUX1VJRF0udGV4dHVyZSk7XG4gICAgICAgICAgICB0ZXh0dXJlLm9mZignZGlzcG9zZScsIHRoaXMuZGVzdHJveVRleHR1cmUsIHRoaXMpO1xuXG4gICAgICAgICAgICBkZWxldGUgdGV4dHVyZS5fZ2xUZXh0dXJlc1t0aGlzLkNPTlRFWFRfVUlEXTtcblxuICAgICAgICAgICAgaWYgKCFza2lwUmVtb3ZlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcy5tYW5hZ2VkVGV4dHVyZXMuaW5kZXhPZih0ZXh0dXJlKTtcblxuICAgICAgICAgICAgICAgIGlmIChpICE9PSAtMSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUl0ZW1zKHRoaXMubWFuYWdlZFRleHR1cmVzLCBpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRleHR1cmUgc3R5bGUgc3VjaCBhcyBtaXBtYXAgZmxhZ1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IHRleHR1cmUgLSBUZXh0dXJlIHRvIHVwZGF0ZVxuICAgICAqL1xuICAgIFRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLnVwZGF0ZVRleHR1cmVTdHlsZSA9IGZ1bmN0aW9uIHVwZGF0ZVRleHR1cmVTdHlsZSAodGV4dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciBnbFRleHR1cmUgPSB0ZXh0dXJlLl9nbFRleHR1cmVzW3RoaXMuQ09OVEVYVF9VSURdO1xuXG4gICAgICAgIGlmICghZ2xUZXh0dXJlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHRleHR1cmUubWlwbWFwID09PSBNSVBNQVBfTU9ERVMuUE9XMiB8fCB0aGlzLndlYkdMVmVyc2lvbiAhPT0gMikgJiYgIXRleHR1cmUuaXNQb3dlck9mVHdvKVxuICAgICAgICB7XG4gICAgICAgICAgICBnbFRleHR1cmUubWlwbWFwID0gMDtcbiAgICAgICAgICAgIGdsVGV4dHVyZS53cmFwTW9kZSA9IFdSQVBfTU9ERVMuQ0xBTVA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBnbFRleHR1cmUubWlwbWFwID0gdGV4dHVyZS5taXBtYXAgPj0gMTtcbiAgICAgICAgICAgIGdsVGV4dHVyZS53cmFwTW9kZSA9IHRleHR1cmUud3JhcE1vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGV4dHVyZS5yZXNvdXJjZSAmJiB0ZXh0dXJlLnJlc291cmNlLnN0eWxlKHRoaXMucmVuZGVyZXIsIHRleHR1cmUsIGdsVGV4dHVyZSkpXG4gICAgICAgIDtcbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnNldFN0eWxlKHRleHR1cmUsIGdsVGV4dHVyZSk7XG4gICAgICAgIH1cblxuICAgICAgICBnbFRleHR1cmUuZGlydHlTdHlsZUlkID0gdGV4dHVyZS5kaXJ0eVN0eWxlSWQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldCBzdHlsZSBmb3IgdGV4dHVyZVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1BJWEkuQmFzZVRleHR1cmV9IHRleHR1cmUgLSBUZXh0dXJlIHRvIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7UElYSS5HTFRleHR1cmV9IGdsVGV4dHVyZVxuICAgICAqL1xuICAgIFRleHR1cmVTeXN0ZW0ucHJvdG90eXBlLnNldFN0eWxlID0gZnVuY3Rpb24gc2V0U3R5bGUgKHRleHR1cmUsIGdsVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgICAgICAgaWYgKGdsVGV4dHVyZS5taXBtYXApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKHRleHR1cmUudGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGV4dHVyZS50YXJnZXQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbFRleHR1cmUud3JhcE1vZGUpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKHRleHR1cmUudGFyZ2V0LCBnbC5URVhUVVJFX1dSQVBfVCwgZ2xUZXh0dXJlLndyYXBNb2RlKTtcblxuICAgICAgICBpZiAoZ2xUZXh0dXJlLm1pcG1hcClcbiAgICAgICAge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaSh0ZXh0dXJlLnRhcmdldCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCB0ZXh0dXJlLnNjYWxlTW9kZSA/IGdsLkxJTkVBUl9NSVBNQVBfTElORUFSIDogZ2wuTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCk7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbiAgICAgICAgICAgIHZhciBhbmlzb3Ryb3BpY0V4dCA9IHRoaXMucmVuZGVyZXIuY29udGV4dC5leHRlbnNpb25zLmFuaXNvdHJvcGljRmlsdGVyaW5nO1xuXG4gICAgICAgICAgICBpZiAoYW5pc290cm9waWNFeHQgJiYgdGV4dHVyZS5hbmlzb3Ryb3BpY0xldmVsID4gMCAmJiB0ZXh0dXJlLnNjYWxlTW9kZSA9PT0gU0NBTEVfTU9ERVMuTElORUFSKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBsZXZlbCA9IE1hdGgubWluKHRleHR1cmUuYW5pc290cm9waWNMZXZlbCwgZ2wuZ2V0UGFyYW1ldGVyKGFuaXNvdHJvcGljRXh0Lk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCkpO1xuXG4gICAgICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyZih0ZXh0dXJlLnRhcmdldCwgYW5pc290cm9waWNFeHQuVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIGxldmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGV4dHVyZS50YXJnZXQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgdGV4dHVyZS5zY2FsZU1vZGUgPyBnbC5MSU5FQVIgOiBnbC5ORUFSRVNUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGV4dHVyZS50YXJnZXQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgdGV4dHVyZS5zY2FsZU1vZGUgPyBnbC5MSU5FQVIgOiBnbC5ORUFSRVNUKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRleHR1cmVTeXN0ZW07XG59KFN5c3RlbSkpO1xuXG4vKipcbiAqIFN5c3RlbXMgYXJlIGluZGl2aWR1YWwgY29tcG9uZW50cyB0byB0aGUgUmVuZGVyZXIgcGlwZWxpbmUuXG4gKiBAbmFtZXNwYWNlIFBJWEkuc3lzdGVtc1xuICovXG5cbnZhciBzeXN0ZW1zID0gKHtcbiAgICBGaWx0ZXJTeXN0ZW06IEZpbHRlclN5c3RlbSxcbiAgICBCYXRjaFN5c3RlbTogQmF0Y2hTeXN0ZW0sXG4gICAgQ29udGV4dFN5c3RlbTogQ29udGV4dFN5c3RlbSxcbiAgICBGcmFtZWJ1ZmZlclN5c3RlbTogRnJhbWVidWZmZXJTeXN0ZW0sXG4gICAgR2VvbWV0cnlTeXN0ZW06IEdlb21ldHJ5U3lzdGVtLFxuICAgIE1hc2tTeXN0ZW06IE1hc2tTeXN0ZW0sXG4gICAgU3RlbmNpbFN5c3RlbTogU3RlbmNpbFN5c3RlbSxcbiAgICBQcm9qZWN0aW9uU3lzdGVtOiBQcm9qZWN0aW9uU3lzdGVtLFxuICAgIFJlbmRlclRleHR1cmVTeXN0ZW06IFJlbmRlclRleHR1cmVTeXN0ZW0sXG4gICAgU2hhZGVyU3lzdGVtOiBTaGFkZXJTeXN0ZW0sXG4gICAgU3RhdGVTeXN0ZW06IFN0YXRlU3lzdGVtLFxuICAgIFRleHR1cmVHQ1N5c3RlbTogVGV4dHVyZUdDU3lzdGVtLFxuICAgIFRleHR1cmVTeXN0ZW06IFRleHR1cmVTeXN0ZW1cbn0pO1xuXG52YXIgdGVtcE1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcblxuLyoqXG4gKiBUaGUgQWJzdHJhY3RSZW5kZXJlciBpcyB0aGUgYmFzZSBmb3IgYSBQaXhpSlMgUmVuZGVyZXIuIEl0IGlzIGV4dGVuZGVkIGJ5IHRoZSB7QGxpbmsgUElYSS5DYW52YXNSZW5kZXJlcn1cbiAqIGFuZCB7QGxpbmsgUElYSS5SZW5kZXJlcn0gd2hpY2ggY2FuIGJlIHVzZWQgZm9yIHJlbmRlcmluZyBhIFBpeGlKUyBzY2VuZS5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS51dGlscy5FdmVudEVtaXR0ZXJcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBBYnN0cmFjdFJlbmRlcmVyID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoRXZlbnRFbWl0dGVyKSB7XG4gICAgZnVuY3Rpb24gQWJzdHJhY3RSZW5kZXJlcihzeXN0ZW0sIG9wdGlvbnMpXG4gICAge1xuICAgICAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICAvLyBBZGQgdGhlIGRlZmF1bHQgcmVuZGVyIG9wdGlvbnNcbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHNldHRpbmdzLlJFTkRFUl9PUFRJT05TLCBvcHRpb25zKTtcblxuICAgICAgICAvLyBEZXByZWNhdGlvbiBub3RpY2UgZm9yIHJlbmRlcmVyIHJvdW5kUGl4ZWxzIG9wdGlvblxuICAgICAgICBpZiAob3B0aW9ucy5yb3VuZFBpeGVscylcbiAgICAgICAge1xuICAgICAgICAgICAgc2V0dGluZ3MuUk9VTkRfUElYRUxTID0gb3B0aW9ucy5yb3VuZFBpeGVscztcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uKCc1LjAuMCcsICdSZW5kZXJlciByb3VuZFBpeGVscyBvcHRpb24gaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBQSVhJLnNldHRpbmdzLlJPVU5EX1BJWEVMUycsIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzdXBwbGllZCBjb25zdHJ1Y3RvciBvcHRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9XG4gICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIHJlbmRlcmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuUkVOREVSRVJfVFlQRS5VTktOT1dOXG4gICAgICAgICAqIEBzZWUgUElYSS5SRU5ERVJFUl9UWVBFXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBSRU5ERVJFUl9UWVBFLlVOS05PV047XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lYXN1cmVtZW50cyBvZiB0aGUgc2NyZWVuLiAoMCwgMCwgc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodCkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEl0cyBzYWZlIHRvIHVzZSBhcyBmaWx0ZXJBcmVhIG9yIGhpdEFyZWEgZm9yIHRoZSB3aG9sZSBzdGFnZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5SZWN0YW5nbGV9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjcmVlbiA9IG5ldyBSZWN0YW5nbGUoMCwgMCwgb3B0aW9ucy53aWR0aCwgb3B0aW9ucy5oZWlnaHQpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY2FudmFzIGVsZW1lbnQgdGhhdCBldmVyeXRoaW5nIGlzIGRyYXduIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtIVE1MQ2FudmFzRWxlbWVudH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmlldyA9IG9wdGlvbnMudmlldyB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJlc29sdXRpb24gLyBkZXZpY2UgcGl4ZWwgcmF0aW8gb2YgdGhlIHJlbmRlcmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDFcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzb2x1dGlvbiA9IG9wdGlvbnMucmVzb2x1dGlvbiB8fCBzZXR0aW5ncy5SRVNPTFVUSU9OO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoZSByZW5kZXIgdmlldyBpcyB0cmFuc3BhcmVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHJhbnNwYXJlbnQgPSBvcHRpb25zLnRyYW5zcGFyZW50O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIENTUyBkaW1lbnNpb25zIG9mIGNhbnZhcyB2aWV3IHNob3VsZCBiZSByZXNpemVkIHRvIHNjcmVlbiBkaW1lbnNpb25zIGF1dG9tYXRpY2FsbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmF1dG9EZW5zaXR5ID0gb3B0aW9ucy5hdXRvRGVuc2l0eSB8fCBvcHRpb25zLmF1dG9SZXNpemUgfHwgZmFsc2U7XG4gICAgICAgIC8vIGF1dG9SZXNpemUgaXMgZGVwcmVjYXRlZCwgcHJvdmlkZXMgZmFsbGJhY2sgc3VwcG9ydFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIHByZXNlcnZlRHJhd2luZ0J1ZmZlciBmbGFnIGFmZmVjdHMgd2hldGhlciBvciBub3QgdGhlIGNvbnRlbnRzIG9mXG4gICAgICAgICAqIHRoZSBzdGVuY2lsIGJ1ZmZlciBpcyByZXRhaW5lZCBhZnRlciByZW5kZXJpbmcuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnByZXNlcnZlRHJhd2luZ0J1ZmZlciA9IG9wdGlvbnMucHJlc2VydmVEcmF3aW5nQnVmZmVyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHNldHMgaWYgdGhlIENhbnZhc1JlbmRlcmVyIHdpbGwgY2xlYXIgdGhlIGNhbnZhcyBvciBub3QgYmVmb3JlIHRoZSBuZXcgcmVuZGVyIHBhc3MuXG4gICAgICAgICAqIElmIHRoZSBzY2VuZSBpcyBOT1QgdHJhbnNwYXJlbnQgUGl4aUpTIHdpbGwgdXNlIGEgY2FudmFzIHNpemVkIGZpbGxSZWN0IG9wZXJhdGlvbiBldmVyeVxuICAgICAgICAgKiBmcmFtZSB0byBzZXQgdGhlIGNhbnZhcyBiYWNrZ3JvdW5kIGNvbG9yLiBJZiB0aGUgc2NlbmUgaXMgdHJhbnNwYXJlbnQgUGl4aUpTIHdpbGwgdXNlIGNsZWFyUmVjdFxuICAgICAgICAgKiB0byBjbGVhciB0aGUgY2FudmFzIGV2ZXJ5IGZyYW1lLiBEaXNhYmxlIHRoaXMgYnkgc2V0dGluZyB0aGlzIHRvIGZhbHNlLiBGb3IgZXhhbXBsZSwgaWZcbiAgICAgICAgICogeW91ciBnYW1lIGhhcyBhIGNhbnZhcyBmaWxsaW5nIGJhY2tncm91bmQgaW1hZ2UgeW91IG9mdGVuIGRvbid0IG5lZWQgdGhpcyBzZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEBkZWZhdWx0XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsZWFyQmVmb3JlUmVuZGVyID0gb3B0aW9ucy5jbGVhckJlZm9yZVJlbmRlcjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGJhY2tncm91bmQgY29sb3IgYXMgYSBudW1iZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYmFja2dyb3VuZENvbG9yID0gMHgwMDAwMDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIGFzIGFuIFtSLCBHLCBCXSBhcnJheS5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyW119XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRDb2xvclJnYmEgPSBbMCwgMCwgMCwgMF07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIGFzIGEgc3RyaW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRDb2xvclN0cmluZyA9ICcjMDAwMDAwJztcblxuICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yIHx8IHRoaXMuX2JhY2tncm91bmRDb2xvcjsgLy8gcnVuIGJnIGNvbG9yIHNldHRlclxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHRlbXBvcmFyeSBkaXNwbGF5IG9iamVjdCB1c2VkIGFzIHRoZSBwYXJlbnQgb2YgdGhlIGN1cnJlbnRseSBiZWluZyByZW5kZXJlZCBpdGVtLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkRpc3BsYXlPYmplY3R9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50ID0gbmV3IENvbnRhaW5lcigpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGFzdCByb290IG9iamVjdCB0aGF0IHRoZSByZW5kZXJlciB0cmllZCB0byByZW5kZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuRGlzcGxheU9iamVjdH1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbGFzdE9iamVjdFJlbmRlcmVkID0gdGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbGxlY3Rpb24gb2YgcGx1Z2lucy5cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucGx1Z2lucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICggRXZlbnRFbWl0dGVyICkgQWJzdHJhY3RSZW5kZXJlci5fX3Byb3RvX18gPSBFdmVudEVtaXR0ZXI7XG4gICAgQWJzdHJhY3RSZW5kZXJlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdmVudEVtaXR0ZXIgJiYgRXZlbnRFbWl0dGVyLnByb3RvdHlwZSApO1xuICAgIEFic3RyYWN0UmVuZGVyZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQWJzdHJhY3RSZW5kZXJlcjtcblxuICAgIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHdpZHRoOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGhlaWdodDogeyBjb25maWd1cmFibGU6IHRydWUgfSxiYWNrZ3JvdW5kQ29sb3I6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHN0YXRpY01hcCAtIFRoZSBkaWN0aW9uYXJ5IG9mIHN0YXRpY2FsbHkgc2F2ZWQgcGx1Z2lucy5cbiAgICAgKi9cbiAgICBBYnN0cmFjdFJlbmRlcmVyLnByb3RvdHlwZS5pbml0UGx1Z2lucyA9IGZ1bmN0aW9uIGluaXRQbHVnaW5zIChzdGF0aWNNYXApXG4gICAge1xuICAgICAgICBmb3IgKHZhciBvIGluIHN0YXRpY01hcClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW5zW29dID0gbmV3IChzdGF0aWNNYXBbb10pKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNhbWUgYXMgdmlldy53aWR0aCwgYWN0dWFsIG51bWJlciBvZiBwaXhlbHMgaW4gdGhlIGNhbnZhcyBieSBob3Jpem9udGFsLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqIEBkZWZhdWx0IDgwMFxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy53aWR0aC5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy53aWR0aDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2FtZSBhcyB2aWV3LmhlaWdodCwgYWN0dWFsIG51bWJlciBvZiBwaXhlbHMgaW4gdGhlIGNhbnZhcyBieSB2ZXJ0aWNhbC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAZGVmYXVsdCA2MDBcbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMuaGVpZ2h0LmdldCA9IGZ1bmN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmhlaWdodDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzaXplcyB0aGUgc2NyZWVuIGFuZCBjYW52YXMgdG8gdGhlIHNwZWNpZmllZCB3aWR0aCBhbmQgaGVpZ2h0LlxuICAgICAqIENhbnZhcyBkaW1lbnNpb25zIGFyZSBtdWx0aXBsaWVkIGJ5IHJlc29sdXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NyZWVuV2lkdGggLSBUaGUgbmV3IHdpZHRoIG9mIHRoZSBzY3JlZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjcmVlbkhlaWdodCAtIFRoZSBuZXcgaGVpZ2h0IG9mIHRoZSBzY3JlZW4uXG4gICAgICovXG4gICAgQWJzdHJhY3RSZW5kZXJlci5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gcmVzaXplIChzY3JlZW5XaWR0aCwgc2NyZWVuSGVpZ2h0KVxuICAgIHtcbiAgICAgICAgdGhpcy5zY3JlZW4ud2lkdGggPSBzY3JlZW5XaWR0aDtcbiAgICAgICAgdGhpcy5zY3JlZW4uaGVpZ2h0ID0gc2NyZWVuSGVpZ2h0O1xuXG4gICAgICAgIHRoaXMudmlldy53aWR0aCA9IHNjcmVlbldpZHRoICogdGhpcy5yZXNvbHV0aW9uO1xuICAgICAgICB0aGlzLnZpZXcuaGVpZ2h0ID0gc2NyZWVuSGVpZ2h0ICogdGhpcy5yZXNvbHV0aW9uO1xuXG4gICAgICAgIGlmICh0aGlzLmF1dG9EZW5zaXR5KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnZpZXcuc3R5bGUud2lkdGggPSBzY3JlZW5XaWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgIHRoaXMudmlldy5zdHlsZS5oZWlnaHQgPSBzY3JlZW5IZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZnVsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHRleHR1cmUgb2YgdGhlIGRpc3BsYXkgb2JqZWN0IHRoYXQgY2FuIHRoZW4gYmUgdXNlZCB0byBjcmVhdGUgc3ByaXRlc1xuICAgICAqIFRoaXMgY2FuIGJlIHF1aXRlIHVzZWZ1bCBpZiB5b3VyIGRpc3BsYXlPYmplY3QgaXMgY29tcGxpY2F0ZWQgYW5kIG5lZWRzIHRvIGJlIHJldXNlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBkaXNwbGF5T2JqZWN0IC0gVGhlIGRpc3BsYXlPYmplY3QgdGhlIG9iamVjdCB3aWxsIGJlIGdlbmVyYXRlZCBmcm9tLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZU1vZGUgLSBTaG91bGQgYmUgb25lIG9mIHRoZSBzY2FsZU1vZGUgY29uc3RzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByZXNvbHV0aW9uIC0gVGhlIHJlc29sdXRpb24gLyBkZXZpY2UgcGl4ZWwgcmF0aW8gb2YgdGhlIHRleHR1cmUgYmVpbmcgZ2VuZXJhdGVkLlxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IFtyZWdpb25dIC0gVGhlIHJlZ2lvbiBvZiB0aGUgZGlzcGxheU9iamVjdCwgdGhhdCBzaGFsbCBiZSByZW5kZXJlZCxcbiAgICAgKiAgICAgICAgaWYgbm8gcmVnaW9uIGlzIHNwZWNpZmllZCwgZGVmYXVsdHMgdG8gdGhlIGxvY2FsIGJvdW5kcyBvZiB0aGUgZGlzcGxheU9iamVjdC5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLlJlbmRlclRleHR1cmV9IEEgdGV4dHVyZSBvZiB0aGUgZ3JhcGhpY3Mgb2JqZWN0LlxuICAgICAqL1xuICAgIEFic3RyYWN0UmVuZGVyZXIucHJvdG90eXBlLmdlbmVyYXRlVGV4dHVyZSA9IGZ1bmN0aW9uIGdlbmVyYXRlVGV4dHVyZSAoZGlzcGxheU9iamVjdCwgc2NhbGVNb2RlLCByZXNvbHV0aW9uLCByZWdpb24pXG4gICAge1xuICAgICAgICByZWdpb24gPSByZWdpb24gfHwgZGlzcGxheU9iamVjdC5nZXRMb2NhbEJvdW5kcygpO1xuXG4gICAgICAgIC8vIG1pbmltdW0gdGV4dHVyZSBzaXplIGlzIDF4MSwgMHgwIHdpbGwgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgaWYgKHJlZ2lvbi53aWR0aCA9PT0gMCkgeyByZWdpb24ud2lkdGggPSAxOyB9XG4gICAgICAgIGlmIChyZWdpb24uaGVpZ2h0ID09PSAwKSB7IHJlZ2lvbi5oZWlnaHQgPSAxOyB9XG5cbiAgICAgICAgdmFyIHJlbmRlclRleHR1cmUgPSBSZW5kZXJUZXh0dXJlLmNyZWF0ZShyZWdpb24ud2lkdGggfCAwLCByZWdpb24uaGVpZ2h0IHwgMCwgc2NhbGVNb2RlLCByZXNvbHV0aW9uKTtcblxuICAgICAgICB0ZW1wTWF0cml4LnR4ID0gLXJlZ2lvbi54O1xuICAgICAgICB0ZW1wTWF0cml4LnR5ID0gLXJlZ2lvbi55O1xuXG4gICAgICAgIHRoaXMucmVuZGVyKGRpc3BsYXlPYmplY3QsIHJlbmRlclRleHR1cmUsIGZhbHNlLCB0ZW1wTWF0cml4LCAhIWRpc3BsYXlPYmplY3QucGFyZW50KTtcblxuICAgICAgICByZXR1cm4gcmVuZGVyVGV4dHVyZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBldmVyeXRoaW5nIGZyb20gdGhlIHJlbmRlcmVyIGFuZCBvcHRpb25hbGx5IHJlbW92ZXMgdGhlIENhbnZhcyBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlbW92ZVZpZXc9ZmFsc2VdIC0gUmVtb3ZlcyB0aGUgQ2FudmFzIGVsZW1lbnQgZnJvbSB0aGUgRE9NLlxuICAgICAqL1xuICAgIEFic3RyYWN0UmVuZGVyZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95IChyZW1vdmVWaWV3KVxuICAgIHtcbiAgICAgICAgZm9yICh2YXIgbyBpbiB0aGlzLnBsdWdpbnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luc1tvXS5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbnNbb10gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbW92ZVZpZXcgJiYgdGhpcy52aWV3LnBhcmVudE5vZGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMudmlldyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBsdWdpbnMgPSBudWxsO1xuXG4gICAgICAgIHRoaXMudHlwZSA9IFJFTkRFUkVSX1RZUEUuVU5LTk9XTjtcblxuICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuc2NyZWVuID0gbnVsbDtcblxuICAgICAgICB0aGlzLnJlc29sdXRpb24gPSAwO1xuXG4gICAgICAgIHRoaXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmF1dG9EZW5zaXR5ID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5ibGVuZE1vZGVzID0gbnVsbDtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBudWxsO1xuXG4gICAgICAgIHRoaXMucHJlc2VydmVEcmF3aW5nQnVmZmVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2xlYXJCZWZvcmVSZW5kZXIgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kQ29sb3IgPSAwO1xuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kQ29sb3JSZ2JhID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYmFja2dyb3VuZENvbG9yU3RyaW5nID0gbnVsbDtcblxuICAgICAgICB0aGlzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xhc3RPYmplY3RSZW5kZXJlZCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIHRvIGZpbGwgaWYgbm90IHRyYW5zcGFyZW50XG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmJhY2tncm91bmRDb2xvci5nZXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhY2tncm91bmRDb2xvcjtcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLmJhY2tncm91bmRDb2xvci5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHtcbiAgICAgICAgdGhpcy5fYmFja2dyb3VuZENvbG9yID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRDb2xvclN0cmluZyA9IGhleDJzdHJpbmcodmFsdWUpO1xuICAgICAgICBoZXgycmdiKHZhbHVlLCB0aGlzLl9iYWNrZ3JvdW5kQ29sb3JSZ2JhKTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEFic3RyYWN0UmVuZGVyZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICAgIHJldHVybiBBYnN0cmFjdFJlbmRlcmVyO1xufShFdmVudEVtaXR0ZXIpKTtcblxuLyoqXG4gKiBUaGUgUmVuZGVyZXIgZHJhd3MgdGhlIHNjZW5lIGFuZCBhbGwgaXRzIGNvbnRlbnQgb250byBhIFdlYkdMIGVuYWJsZWQgY2FudmFzLlxuICpcbiAqIFRoaXMgcmVuZGVyZXIgc2hvdWxkIGJlIHVzZWQgZm9yIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBXZWJHTC5cbiAqXG4gKiBUaGlzIHJlbmRlcmVyIHdvcmtzIGJ5IGF1dG9tYXRpY2FsbHkgbWFuYWdpbmcgV2ViR0xCYXRjaGVzbSwgc28gbm8gbmVlZCBmb3IgU3ByaXRlIEJhdGNoZXMgb3IgU3ByaXRlIENsb3Vkcy5cbiAqIERvbid0IGZvcmdldCB0byBhZGQgdGhlIHZpZXcgdG8geW91ciBET00gb3IgeW91IHdpbGwgbm90IHNlZSBhbnl0aGluZyFcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAZXh0ZW5kcyBQSVhJLkFic3RyYWN0UmVuZGVyZXJcbiAqL1xudmFyIFJlbmRlcmVyID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQWJzdHJhY3RSZW5kZXJlcikge1xuICAgIGZ1bmN0aW9uIFJlbmRlcmVyKG9wdGlvbnMpXG4gICAge1xuICAgICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAgICAgICBBYnN0cmFjdFJlbmRlcmVyLmNhbGwodGhpcywgJ1dlYkdMJywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gdGhlIG9wdGlvbnMgd2lsbCBoYXZlIGJlZW4gbW9kaWZpZWQgaGVyZSBpbiB0aGUgc3VwZXIgY29uc3RydWN0b3Igd2l0aCBwaXhpJ3MgZGVmYXVsdCBzZXR0aW5ncy4uXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0eXBlIG9mIHRoaXMgcmVuZGVyZXIgYXMgYSBzdGFuZGFyZGl6ZWQgY29uc3RcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAc2VlIFBJWEkuUkVOREVSRVJfVFlQRVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50eXBlID0gUkVOREVSRVJfVFlQRS5XRUJHTDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2ViR0wgY29udGV4dCwgc2V0IGJ5IHRoZSBjb250ZXh0U3lzdGVtICh0aGlzLmNvbnRleHQpXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAbWVtYmVyIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdsID0gbnVsbDtcblxuICAgICAgICB0aGlzLkNPTlRFWFRfVUlEID0gMDtcblxuICAgICAgICAvLyBUT0RPIGxlZ2FjeSFcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW50ZXJuYWwgc2lnbmFsIGluc3RhbmNlcyBvZiAqKnJ1bm5lcioqLCB0aGVzZVxuICAgICAgICAgKiBhcmUgYXNzaWduZWQgdG8gZWFjaCBzeXN0ZW0gY3JlYXRlZC5cbiAgICAgICAgICogQHNlZSBQSVhJLlJ1bm5lclxuICAgICAgICAgKiBAbmFtZSBQSVhJLlJlbmRlcmVyI3J1bm5lcnNcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7UElYSS5SdW5uZXJ9IGRlc3Ryb3kgLSBEZXN0cm95IHJ1bm5lclxuICAgICAgICAgKiBAcHJvcGVydHkge1BJWEkuUnVubmVyfSBjb250ZXh0Q2hhbmdlIC0gQ29udGV4dCBjaGFuZ2UgcnVubmVyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7UElYSS5SdW5uZXJ9IHJlc2V0IC0gUmVzZXQgcnVubmVyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7UElYSS5SdW5uZXJ9IHVwZGF0ZSAtIFVwZGF0ZSBydW5uZXJcbiAgICAgICAgICogQHByb3BlcnR5IHtQSVhJLlJ1bm5lcn0gcG9zdHJlbmRlciAtIFBvc3QtcmVuZGVyIHJ1bm5lclxuICAgICAgICAgKiBAcHJvcGVydHkge1BJWEkuUnVubmVyfSBwcmVyZW5kZXIgLSBQcmUtcmVuZGVyIHJ1bm5lclxuICAgICAgICAgKiBAcHJvcGVydHkge1BJWEkuUnVubmVyfSByZXNpemUgLSBSZXNpemUgcnVubmVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJ1bm5lcnMgPSB7XG4gICAgICAgICAgICBkZXN0cm95OiBuZXcgUnVubmVyKCdkZXN0cm95JyksXG4gICAgICAgICAgICBjb250ZXh0Q2hhbmdlOiBuZXcgUnVubmVyKCdjb250ZXh0Q2hhbmdlJywgMSksXG4gICAgICAgICAgICByZXNldDogbmV3IFJ1bm5lcigncmVzZXQnKSxcbiAgICAgICAgICAgIHVwZGF0ZTogbmV3IFJ1bm5lcigndXBkYXRlJyksXG4gICAgICAgICAgICBwb3N0cmVuZGVyOiBuZXcgUnVubmVyKCdwb3N0cmVuZGVyJyksXG4gICAgICAgICAgICBwcmVyZW5kZXI6IG5ldyBSdW5uZXIoJ3ByZXJlbmRlcicpLFxuICAgICAgICAgICAgcmVzaXplOiBuZXcgUnVubmVyKCdyZXNpemUnLCAyKSxcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2xvYmFsIHVuaWZvcm1zXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuVW5pZm9ybUdyb3VwfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nbG9iYWxVbmlmb3JtcyA9IG5ldyBVbmlmb3JtR3JvdXAoe1xuICAgICAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogbmV3IE1hdHJpeCgpLFxuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFzayBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5zeXN0ZW1zLk1hc2tTeXN0ZW19IG1hc2tcbiAgICAgICAgICogQG1lbWJlcm9mIFBJWEkuUmVuZGVyZXIjXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hZGRTeXN0ZW0oTWFza1N5c3RlbSwgJ21hc2snKVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb250ZXh0IHN5c3RlbSBpbnN0YW5jZVxuICAgICAgICAgICAgICogQG1lbWJlciB7UElYSS5zeXN0ZW1zLkNvbnRleHRTeXN0ZW19IGNvbnRleHRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBQSVhJLlJlbmRlcmVyI1xuICAgICAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC5hZGRTeXN0ZW0oQ29udGV4dFN5c3RlbSwgJ2NvbnRleHQnKVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTdGF0ZSBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5TdGF0ZVN5c3RlbX0gc3RhdGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBQSVhJLlJlbmRlcmVyI1xuICAgICAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC5hZGRTeXN0ZW0oU3RhdGVTeXN0ZW0sICdzdGF0ZScpXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNoYWRlciBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5TaGFkZXJTeXN0ZW19IHNoYWRlclxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFBJWEkuUmVuZGVyZXIjXG4gICAgICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLmFkZFN5c3RlbShTaGFkZXJTeXN0ZW0sICdzaGFkZXInKVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUZXh0dXJlIHN5c3RlbSBpbnN0YW5jZVxuICAgICAgICAgICAgICogQG1lbWJlciB7UElYSS5zeXN0ZW1zLlRleHR1cmVTeXN0ZW19IHRleHR1cmVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBQSVhJLlJlbmRlcmVyI1xuICAgICAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC5hZGRTeXN0ZW0oVGV4dHVyZVN5c3RlbSwgJ3RleHR1cmUnKVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZW9tZXRyeSBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5HZW9tZXRyeVN5c3RlbX0gZ2VvbWV0cnlcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBQSVhJLlJlbmRlcmVyI1xuICAgICAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC5hZGRTeXN0ZW0oR2VvbWV0cnlTeXN0ZW0sICdnZW9tZXRyeScpXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZyYW1lYnVmZmVyIHN5c3RlbSBpbnN0YW5jZVxuICAgICAgICAgICAgICogQG1lbWJlciB7UElYSS5zeXN0ZW1zLkZyYW1lYnVmZmVyU3lzdGVtfSBmcmFtZWJ1ZmZlclxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFBJWEkuUmVuZGVyZXIjXG4gICAgICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLmFkZFN5c3RlbShGcmFtZWJ1ZmZlclN5c3RlbSwgJ2ZyYW1lYnVmZmVyJylcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3RlbmNpbCBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5TdGVuY2lsU3lzdGVtfSBzdGVuY2lsXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgUElYSS5SZW5kZXJlciNcbiAgICAgICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAuYWRkU3lzdGVtKFN0ZW5jaWxTeXN0ZW0sICdzdGVuY2lsJylcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvamVjdGlvbiBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5Qcm9qZWN0aW9uU3lzdGVtfSBwcm9qZWN0aW9uXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgUElYSS5SZW5kZXJlciNcbiAgICAgICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAuYWRkU3lzdGVtKFByb2plY3Rpb25TeXN0ZW0sICdwcm9qZWN0aW9uJylcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGV4dHVyZSBnYXJiYWdlIGNvbGxlY3RvciBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5UZXh0dXJlR0NTeXN0ZW19IHRleHR1cmVHQ1xuICAgICAgICAgICAgICogQG1lbWJlcm9mIFBJWEkuUmVuZGVyZXIjXG4gICAgICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLmFkZFN5c3RlbShUZXh0dXJlR0NTeXN0ZW0sICd0ZXh0dXJlR0MnKVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGaWx0ZXIgc3lzdGVtIGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLnN5c3RlbXMuRmlsdGVyU3lzdGVtfSBmaWx0ZXJcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBQSVhJLlJlbmRlcmVyI1xuICAgICAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC5hZGRTeXN0ZW0oRmlsdGVyU3lzdGVtLCAnZmlsdGVyJylcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVuZGVyVGV4dHVyZSBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5SZW5kZXJUZXh0dXJlU3lzdGVtfSByZW5kZXJUZXh0dXJlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgUElYSS5SZW5kZXJlciNcbiAgICAgICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAuYWRkU3lzdGVtKFJlbmRlclRleHR1cmVTeXN0ZW0sICdyZW5kZXJUZXh0dXJlJylcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBCYXRjaCBzeXN0ZW0gaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEBtZW1iZXIge1BJWEkuc3lzdGVtcy5CYXRjaFN5c3RlbX0gYmF0Y2hcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBQSVhJLlJlbmRlcmVyI1xuICAgICAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC5hZGRTeXN0ZW0oQmF0Y2hTeXN0ZW0sICdiYXRjaCcpO1xuXG4gICAgICAgIHRoaXMuaW5pdFBsdWdpbnMoUmVuZGVyZXIuX19wbHVnaW5zKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9wdGlvbnMgcGFzc2VkIGluIHRvIGNyZWF0ZSBhIG5ldyBXZWJHTCBjb250ZXh0LlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKG9wdGlvbnMuY29udGV4dClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmluaXRGcm9tQ29udGV4dChvcHRpb25zLmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmluaXRGcm9tT3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgYWxwaGE6IHRoaXMudHJhbnNwYXJlbnQsXG4gICAgICAgICAgICAgICAgYW50aWFsaWFzOiBvcHRpb25zLmFudGlhbGlhcyxcbiAgICAgICAgICAgICAgICBwcmVtdWx0aXBsaWVkQWxwaGE6IHRoaXMudHJhbnNwYXJlbnQgJiYgdGhpcy50cmFuc3BhcmVudCAhPT0gJ25vdE11bHRpcGxpZWQnLFxuICAgICAgICAgICAgICAgIHN0ZW5jaWw6IHRydWUsXG4gICAgICAgICAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBvcHRpb25zLnByZXNlcnZlRHJhd2luZ0J1ZmZlcixcbiAgICAgICAgICAgICAgICBwb3dlclByZWZlcmVuY2U6IHRoaXMub3B0aW9ucy5wb3dlclByZWZlcmVuY2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGbGFnIGlmIHdlIGFyZSByZW5kZXJpbmcgdG8gdGhlIHNjcmVlbiB2cyByZW5kZXJUZXh0dXJlXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbmRlcmluZ1RvU2NyZWVuID0gdHJ1ZTtcblxuICAgICAgICBzYXlIZWxsbyh0aGlzLmNvbnRleHQud2ViR0xWZXJzaW9uID09PSAyID8gJ1dlYkdMIDInIDogJ1dlYkdMIDEnKTtcblxuICAgICAgICB0aGlzLnJlc2l6ZSh0aGlzLm9wdGlvbnMud2lkdGgsIHRoaXMub3B0aW9ucy5oZWlnaHQpO1xuICAgIH1cblxuICAgIGlmICggQWJzdHJhY3RSZW5kZXJlciApIFJlbmRlcmVyLl9fcHJvdG9fXyA9IEFic3RyYWN0UmVuZGVyZXI7XG4gICAgUmVuZGVyZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQWJzdHJhY3RSZW5kZXJlciAmJiBBYnN0cmFjdFJlbmRlcmVyLnByb3RvdHlwZSApO1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlbmRlcmVyO1xuXG4gICAgLyoqXG4gICAgICogQWRkIGEgbmV3IHN5c3RlbSB0byB0aGUgcmVuZGVyZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ2xhc3NSZWYgLSBDbGFzcyByZWZlcmVuY2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWVdIC0gUHJvcGVydHkgbmFtZSBmb3Igc3lzdGVtLCBpZiBub3Qgc3BlY2lmaWVkXG4gICAgICogICAgICAgIHdpbGwgdXNlIGEgc3RhdGljIGBuYW1lYCBwcm9wZXJ0eSBvbiB0aGUgY2xhc3MgaXRzZWxmLiBUaGlzXG4gICAgICogICAgICAgIG5hbWUgd2lsbCBiZSBhc3NpZ25lZCBhcyBzIHByb3BlcnR5IG9uIHRoZSBSZW5kZXJlciBzbyBtYWtlXG4gICAgICogICAgICAgIHN1cmUgaXQgZG9lc24ndCBjb2xsaWRlIHdpdGggcHJvcGVydGllcyBvbiBSZW5kZXJlci5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLlJlbmRlcmVyfSBSZXR1cm4gaW5zdGFuY2Ugb2YgcmVuZGVyZXJcbiAgICAgKi9cbiAgICBSZW5kZXJlci5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUgKG9wdGlvbnMpXG4gICAge1xuICAgICAgICBpZiAoaXNXZWJHTFN1cHBvcnRlZCgpKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlbmRlcmVyKG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJHTCB1bnN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXIsIHVzZSBcInBpeGkuanMtbGVnYWN5XCIgZm9yIGZhbGxiYWNrIGNhbnZhczJkIHN1cHBvcnQuJyk7XG4gICAgfTtcblxuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5hZGRTeXN0ZW0gPSBmdW5jdGlvbiBhZGRTeXN0ZW0gKENsYXNzUmVmLCBuYW1lKVxuICAgIHtcbiAgICAgICAgaWYgKCFuYW1lKVxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lID0gQ2xhc3NSZWYubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzeXN0ZW0gPSBuZXcgQ2xhc3NSZWYodGhpcyk7XG5cbiAgICAgICAgaWYgKHRoaXNbbmFtZV0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoXCJXaG9vcHMhIFRoZSBuYW1lIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgaXMgYWxyZWFkeSBpbiB1c2VcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpc1tuYW1lXSA9IHN5c3RlbTtcblxuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMucnVubmVycylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5ydW5uZXJzW2ldLmFkZChzeXN0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIGFmdGVyIHJlbmRlcmluZyBmaW5pc2hlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV2ZW50IFBJWEkuUmVuZGVyZXIjcG9zdHJlbmRlclxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgYmVmb3JlIHJlbmRlcmluZyBzdGFydHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBQSVhJLlJlbmRlcmVyI3ByZXJlbmRlclxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgd2hlbiB0aGUgV2ViR0wgY29udGV4dCBpcyBzZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBQSVhJLlJlbmRlcmVyI2NvbnRleHRcbiAgICAgICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gV2ViR0wgY29udGV4dC5cbiAgICAgICAgICovXG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgdGhlIG9iamVjdCB0byBpdHMgV2ViR0wgdmlld1xuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IGRpc3BsYXlPYmplY3QgLSBUaGUgb2JqZWN0IHRvIGJlIHJlbmRlcmVkLlxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSBbcmVuZGVyVGV4dHVyZV0gLSBUaGUgcmVuZGVyIHRleHR1cmUgdG8gcmVuZGVyIHRvLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NsZWFyPXRydWVdIC0gU2hvdWxkIHRoZSBjYW52YXMgYmUgY2xlYXJlZCBiZWZvcmUgdGhlIG5ldyByZW5kZXIuXG4gICAgICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gW3RyYW5zZm9ybV0gLSBBIHRyYW5zZm9ybSB0byBhcHBseSB0byB0aGUgcmVuZGVyIHRleHR1cmUgYmVmb3JlIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwVXBkYXRlVHJhbnNmb3JtPWZhbHNlXSAtIFNob3VsZCB3ZSBza2lwIHRoZSB1cGRhdGUgdHJhbnNmb3JtIHBhc3M/XG4gICAgICovXG4gICAgUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAoZGlzcGxheU9iamVjdCwgcmVuZGVyVGV4dHVyZSwgY2xlYXIsIHRyYW5zZm9ybSwgc2tpcFVwZGF0ZVRyYW5zZm9ybSlcbiAgICB7XG4gICAgICAgIC8vIGNhbiBiZSBoYW5keSB0byBrbm93IVxuICAgICAgICB0aGlzLnJlbmRlcmluZ1RvU2NyZWVuID0gIXJlbmRlclRleHR1cmU7XG5cbiAgICAgICAgdGhpcy5ydW5uZXJzLnByZXJlbmRlci5ydW4oKTtcbiAgICAgICAgdGhpcy5lbWl0KCdwcmVyZW5kZXInKTtcblxuICAgICAgICAvLyBhcHBseSBhIHRyYW5zZm9ybSBhdCBhIEdQVSBsZXZlbFxuICAgICAgICB0aGlzLnByb2plY3Rpb24udHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuXG4gICAgICAgIC8vIG5vIHBvaW50IHJlbmRlcmluZyBpZiBvdXIgY29udGV4dCBoYXMgYmVlbiBibG93biB1cCFcbiAgICAgICAgaWYgKHRoaXMuY29udGV4dC5pc0xvc3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVuZGVyVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fbGFzdE9iamVjdFJlbmRlcmVkID0gZGlzcGxheU9iamVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2tpcFVwZGF0ZVRyYW5zZm9ybSlcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBzY2VuZSBncmFwaFxuICAgICAgICAgICAgdmFyIGNhY2hlUGFyZW50ID0gZGlzcGxheU9iamVjdC5wYXJlbnQ7XG5cbiAgICAgICAgICAgIGRpc3BsYXlPYmplY3QucGFyZW50ID0gdGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQ7XG4gICAgICAgICAgICBkaXNwbGF5T2JqZWN0LnVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgZGlzcGxheU9iamVjdC5wYXJlbnQgPSBjYWNoZVBhcmVudDtcbiAgICAgICAgICAgIC8vIGRpc3BsYXlPYmplY3QuaGl0QXJlYSA9IC8vVE9ETyBhZGQgYSB0ZW1wIGhpdCBhcmVhXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbmRlclRleHR1cmUuYmluZChyZW5kZXJUZXh0dXJlKTtcbiAgICAgICAgdGhpcy5iYXRjaC5jdXJyZW50UmVuZGVyZXIuc3RhcnQoKTtcblxuICAgICAgICBpZiAoY2xlYXIgIT09IHVuZGVmaW5lZCA/IGNsZWFyIDogdGhpcy5jbGVhckJlZm9yZVJlbmRlcilcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUZXh0dXJlLmNsZWFyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkaXNwbGF5T2JqZWN0LnJlbmRlcih0aGlzKTtcblxuICAgICAgICAvLyBhcHBseSB0cmFuc2Zvcm0uLlxuICAgICAgICB0aGlzLmJhdGNoLmN1cnJlbnRSZW5kZXJlci5mbHVzaCgpO1xuXG4gICAgICAgIGlmIChyZW5kZXJUZXh0dXJlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZW5kZXJUZXh0dXJlLmJhc2VUZXh0dXJlLnVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ydW5uZXJzLnBvc3RyZW5kZXIucnVuKCk7XG5cbiAgICAgICAgLy8gcmVzZXQgdHJhbnNmb3JtIGFmdGVyIHJlbmRlclxuICAgICAgICB0aGlzLnByb2plY3Rpb24udHJhbnNmb3JtID0gbnVsbDtcblxuICAgICAgICB0aGlzLmVtaXQoJ3Bvc3RyZW5kZXInKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzaXplcyB0aGUgV2ViR0wgdmlldyB0byB0aGUgc3BlY2lmaWVkIHdpZHRoIGFuZCBoZWlnaHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NyZWVuV2lkdGggLSBUaGUgbmV3IHdpZHRoIG9mIHRoZSBzY3JlZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjcmVlbkhlaWdodCAtIFRoZSBuZXcgaGVpZ2h0IG9mIHRoZSBzY3JlZW4uXG4gICAgICovXG4gICAgUmVuZGVyZXIucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIHJlc2l6ZSAoc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodClcbiAgICB7XG4gICAgICAgIEFic3RyYWN0UmVuZGVyZXIucHJvdG90eXBlLnJlc2l6ZS5jYWxsKHRoaXMsIHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpO1xuXG4gICAgICAgIHRoaXMucnVubmVycy5yZXNpemUucnVuKHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIFdlYkdMIHN0YXRlIHNvIHlvdSBjYW4gcmVuZGVyIHRoaW5ncyBob3dldmVyIHlvdSBmYW5jeSFcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1BJWEkuUmVuZGVyZXJ9IFJldHVybnMgaXRzZWxmLlxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0ICgpXG4gICAge1xuICAgICAgICB0aGlzLnJ1bm5lcnMucmVzZXQucnVuKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBmcmFtZSBidWZmZXJcbiAgICAgKi9cbiAgICBSZW5kZXJlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5mcmFtZWJ1ZmZlci5iaW5kKCk7XG4gICAgICAgIHRoaXMuZnJhbWVidWZmZXIuY2xlYXIoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBldmVyeXRoaW5nIGZyb20gdGhlIHJlbmRlcmVyIChldmVudCBsaXN0ZW5lcnMsIHNwcml0ZWJhdGNoLCBldGMuLi4pXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZW1vdmVWaWV3PWZhbHNlXSAtIFJlbW92ZXMgdGhlIENhbnZhcyBlbGVtZW50IGZyb20gdGhlIERPTS5cbiAgICAgKiAgU2VlOiBodHRwczovL2dpdGh1Yi5jb20vcGl4aWpzL3BpeGkuanMvaXNzdWVzLzIyMzNcbiAgICAgKi9cbiAgICBSZW5kZXJlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKHJlbW92ZVZpZXcpXG4gICAge1xuICAgICAgICB0aGlzLnJ1bm5lcnMuZGVzdHJveS5ydW4oKTtcblxuICAgICAgICBmb3IgKHZhciByIGluIHRoaXMucnVubmVycylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5ydW5uZXJzW3JdLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGwgYmFzZSBkZXN0cm95XG4gICAgICAgIEFic3RyYWN0UmVuZGVyZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzLCByZW1vdmVWaWV3KTtcblxuICAgICAgICAvLyBUT0RPIG51bGxpZnkgYWxsIHRoZSBtYW5hZ2Vycy4uXG4gICAgICAgIHRoaXMuZ2wgPSBudWxsO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIGluc3RhbGxlZCBwbHVnaW5zLiBUaGVzZSBhcmUgaW5jbHVkZWQgYnkgZGVmYXVsdCBpbiBQSVhJLCBidXQgY2FuIGJlIGV4Y2x1ZGVkXG4gICAgICogYnkgY3JlYXRpbmcgYSBjdXN0b20gYnVpbGQuIENvbnN1bHQgdGhlIFJFQURNRSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBjcmVhdGluZyBjdXN0b21cbiAgICAgKiBidWlsZHMgYW5kIGV4Y2x1ZGluZyBwbHVnaW5zLlxuICAgICAqIEBuYW1lIFBJWEkuUmVuZGVyZXIjcGx1Z2luc1xuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHByb3BlcnR5IHtQSVhJLmFjY2Vzc2liaWxpdHkuQWNjZXNzaWJpbGl0eU1hbmFnZXJ9IGFjY2Vzc2liaWxpdHkgU3VwcG9ydCB0YWJiaW5nIGludGVyYWN0aXZlIGVsZW1lbnRzLlxuICAgICAqIEBwcm9wZXJ0eSB7UElYSS5leHRyYWN0LkV4dHJhY3R9IGV4dHJhY3QgRXh0cmFjdCBpbWFnZSBkYXRhIGZyb20gcmVuZGVyZXIuXG4gICAgICogQHByb3BlcnR5IHtQSVhJLmludGVyYWN0aW9uLkludGVyYWN0aW9uTWFuYWdlcn0gaW50ZXJhY3Rpb24gSGFuZGxlcyBtb3VzZSwgdG91Y2ggYW5kIHBvaW50ZXIgZXZlbnRzLlxuICAgICAqIEBwcm9wZXJ0eSB7UElYSS5wcmVwYXJlLlByZXBhcmV9IHByZXBhcmUgUHJlLXJlbmRlciBkaXNwbGF5IG9iamVjdHMuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcGx1Z2luIHRvIHRoZSByZW5kZXJlci5cbiAgICAgKlxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGx1Z2luTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW4uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3RvciAtIFRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBvciBjbGFzcyBmb3IgdGhlIHBsdWdpbi5cbiAgICAgKi9cbiAgICBSZW5kZXJlci5yZWdpc3RlclBsdWdpbiA9IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luIChwbHVnaW5OYW1lLCBjdG9yKVxuICAgIHtcbiAgICAgICAgUmVuZGVyZXIuX19wbHVnaW5zID0gUmVuZGVyZXIuX19wbHVnaW5zIHx8IHt9O1xuICAgICAgICBSZW5kZXJlci5fX3BsdWdpbnNbcGx1Z2luTmFtZV0gPSBjdG9yO1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVuZGVyZXI7XG59KEFic3RyYWN0UmVuZGVyZXIpKTtcblxuLyoqXG4gKiBUaGlzIGhlbHBlciBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IHdoaWNoIHJlbmRlcmVyIHlvdSBzaG91bGQgYmUgdXNpbmcuXG4gKiBXZWJHTCBpcyB0aGUgcHJlZmVycmVkIHJlbmRlcmVyIGFzIGl0IGlzIGEgbG90IGZhc3Rlci4gSWYgV2ViR0wgaXMgbm90IHN1cHBvcnRlZCBieVxuICogdGhlIGJyb3dzZXIgdGhlbiB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGEgY2FudmFzIHJlbmRlcmVyXG4gKlxuICogQG1lbWJlcm9mIFBJWElcbiAqIEBmdW5jdGlvbiBhdXRvRGV0ZWN0UmVuZGVyZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBUaGUgb3B0aW9uYWwgcmVuZGVyZXIgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndpZHRoPTgwMF0gLSB0aGUgd2lkdGggb2YgdGhlIHJlbmRlcmVycyB2aWV3XG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaGVpZ2h0PTYwMF0gLSB0aGUgaGVpZ2h0IG9mIHRoZSByZW5kZXJlcnMgdmlld1xuICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gW29wdGlvbnMudmlld10gLSB0aGUgY2FudmFzIHRvIHVzZSBhcyBhIHZpZXcsIG9wdGlvbmFsXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYW5zcGFyZW50PWZhbHNlXSAtIElmIHRoZSByZW5kZXIgdmlldyBpcyB0cmFuc3BhcmVudCwgZGVmYXVsdCBmYWxzZVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hdXRvRGVuc2l0eT1mYWxzZV0gLSBSZXNpemVzIHJlbmRlcmVyIHZpZXcgaW4gQ1NTIHBpeGVscyB0byBhbGxvdyBmb3JcbiAqICAgcmVzb2x1dGlvbnMgb3RoZXIgdGhhbiAxXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFudGlhbGlhcz1mYWxzZV0gLSBzZXRzIGFudGlhbGlhc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wcmVzZXJ2ZURyYXdpbmdCdWZmZXI9ZmFsc2VdIC0gZW5hYmxlcyBkcmF3aW5nIGJ1ZmZlciBwcmVzZXJ2YXRpb24sIGVuYWJsZSB0aGlzIGlmIHlvdVxuICogIG5lZWQgdG8gY2FsbCB0b0RhdGFVcmwgb24gdGhlIHdlYmdsIGNvbnRleHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I9MHgwMDAwMDBdIC0gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgdGhlIHJlbmRlcmVkIGFyZWFcbiAqICAoc2hvd24gaWYgbm90IHRyYW5zcGFyZW50KS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2xlYXJCZWZvcmVSZW5kZXI9dHJ1ZV0gLSBUaGlzIHNldHMgaWYgdGhlIHJlbmRlcmVyIHdpbGwgY2xlYXIgdGhlIGNhbnZhcyBvclxuICogICBub3QgYmVmb3JlIHRoZSBuZXcgcmVuZGVyIHBhc3MuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucmVzb2x1dGlvbj0xXSAtIFRoZSByZXNvbHV0aW9uIC8gZGV2aWNlIHBpeGVsIHJhdGlvIG9mIHRoZSByZW5kZXJlciwgcmV0aW5hIHdvdWxkIGJlIDJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZm9yY2VDYW52YXM9ZmFsc2VdIC0gcHJldmVudHMgc2VsZWN0aW9uIG9mIFdlYkdMIHJlbmRlcmVyLCBldmVuIGlmIHN1Y2ggaXMgcHJlc2VudCwgdGhpc1xuICogICBvcHRpb24gb25seSBpcyBhdmFpbGFibGUgd2hlbiB1c2luZyAqKnBpeGkuanMtbGVnYWN5Kiogb3IgKipAcGl4aS9jYW52YXMtcmVuZGVyZXIqKiBtb2R1bGVzLCBvdGhlcndpc2VcbiAqICAgaXQgaXMgaWdub3JlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZm9yY2VGWEFBPWZhbHNlXSAtIGZvcmNlcyBGWEFBIGFudGlhbGlhc2luZyB0byBiZSB1c2VkIG92ZXIgbmF0aXZlLlxuICogIEZYQUEgaXMgZmFzdGVyLCBidXQgbWF5IG5vdCBhbHdheXMgbG9vayBhcyBncmVhdCAqKndlYmdsIG9ubHkqKlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnBvd2VyUHJlZmVyZW5jZV0gLSBQYXJhbWV0ZXIgcGFzc2VkIHRvIHdlYmdsIGNvbnRleHQsIHNldCB0byBcImhpZ2gtcGVyZm9ybWFuY2VcIlxuICogIGZvciBkZXZpY2VzIHdpdGggZHVhbCBncmFwaGljcyBjYXJkICoqd2ViZ2wgb25seSoqXG4gKiBAcmV0dXJuIHtQSVhJLlJlbmRlcmVyfFBJWEkuQ2FudmFzUmVuZGVyZXJ9IFJldHVybnMgV2ViR0wgcmVuZGVyZXIgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2UgQ2FudmFzUmVuZGVyZXJcbiAqL1xuZnVuY3Rpb24gYXV0b0RldGVjdFJlbmRlcmVyKG9wdGlvbnMpXG57XG4gICAgcmV0dXJuIFJlbmRlcmVyLmNyZWF0ZShvcHRpb25zKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gXCJhdHRyaWJ1dGUgdmVjMiBhVmVydGV4UG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgYVRleHR1cmVDb29yZDtcXG5cXG51bmlmb3JtIG1hdDMgcHJvamVjdGlvbk1hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG52b2lkIG1haW4odm9pZClcXG57XFxuICAgIGdsX1Bvc2l0aW9uID0gdmVjNCgocHJvamVjdGlvbk1hdHJpeCAqIHZlYzMoYVZlcnRleFBvc2l0aW9uLCAxLjApKS54eSwgMC4wLCAxLjApO1xcbiAgICB2VGV4dHVyZUNvb3JkID0gYVRleHR1cmVDb29yZDtcXG59XCI7XG5cbnZhciBkZWZhdWx0RmlsdGVyID0gXCJhdHRyaWJ1dGUgdmVjMiBhVmVydGV4UG9zaXRpb247XFxuXFxudW5pZm9ybSBtYXQzIHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxudW5pZm9ybSB2ZWM0IGlucHV0U2l6ZTtcXG51bmlmb3JtIHZlYzQgb3V0cHV0RnJhbWU7XFxuXFxudmVjNCBmaWx0ZXJWZXJ0ZXhQb3NpdGlvbiggdm9pZCApXFxue1xcbiAgICB2ZWMyIHBvc2l0aW9uID0gYVZlcnRleFBvc2l0aW9uICogbWF4KG91dHB1dEZyYW1lLnp3LCB2ZWMyKDAuKSkgKyBvdXRwdXRGcmFtZS54eTtcXG5cXG4gICAgcmV0dXJuIHZlYzQoKHByb2plY3Rpb25NYXRyaXggKiB2ZWMzKHBvc2l0aW9uLCAxLjApKS54eSwgMC4wLCAxLjApO1xcbn1cXG5cXG52ZWMyIGZpbHRlclRleHR1cmVDb29yZCggdm9pZCApXFxue1xcbiAgICByZXR1cm4gYVZlcnRleFBvc2l0aW9uICogKG91dHB1dEZyYW1lLnp3ICogaW5wdXRTaXplLnp3KTtcXG59XFxuXFxudm9pZCBtYWluKHZvaWQpXFxue1xcbiAgICBnbF9Qb3NpdGlvbiA9IGZpbHRlclZlcnRleFBvc2l0aW9uKCk7XFxuICAgIHZUZXh0dXJlQ29vcmQgPSBmaWx0ZXJUZXh0dXJlQ29vcmQoKTtcXG59XFxuXCI7XG5cbi8qKlxuICogQSBUZXh0dXJlIHRoYXQgZGVwZW5kcyBvbiBzaXggb3RoZXIgcmVzb3VyY2VzLlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5CYXNlVGV4dHVyZVxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEN1YmVUZXh0dXJlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQmFzZVRleHR1cmUpIHtcbiAgICBmdW5jdGlvbiBDdWJlVGV4dHVyZSAoKSB7XG4gICAgICAgIEJhc2VUZXh0dXJlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgaWYgKCBCYXNlVGV4dHVyZSApIEN1YmVUZXh0dXJlLl9fcHJvdG9fXyA9IEJhc2VUZXh0dXJlO1xuICAgIEN1YmVUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJhc2VUZXh0dXJlICYmIEJhc2VUZXh0dXJlLnByb3RvdHlwZSApO1xuICAgIEN1YmVUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmVUZXh0dXJlO1xuXG4gICAgQ3ViZVRleHR1cmUuZnJvbSA9IGZ1bmN0aW9uIGZyb20gKHJlc291cmNlcywgb3B0aW9ucylcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgQ3ViZVRleHR1cmUobmV3IEN1YmVSZXNvdXJjZShyZXNvdXJjZXMsIG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEN1YmVUZXh0dXJlO1xufShCYXNlVGV4dHVyZSkpO1xuXG4vKipcbiAqIFVzZWQgYnkgdGhlIGJhdGNoZXIgdG8gZHJhdyBiYXRjaGVzLlxuICogRWFjaCBvbmUgb2YgdGhlc2UgY29udGFpbnMgYWxsIGluZm9ybWF0aW9uIHJlcXVpcmVkIHRvIGRyYXcgYSBib3VuZCBnZW9tZXRyeS5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBCYXRjaERyYXdDYWxsID0gZnVuY3Rpb24gQmF0Y2hEcmF3Q2FsbCgpXG57XG4gICAgdGhpcy50ZXh0dXJlcyA9IFtdO1xuICAgIHRoaXMuaWRzID0gW107XG4gICAgdGhpcy5ibGVuZCA9IDA7XG4gICAgdGhpcy50ZXh0dXJlQ291bnQgPSAwO1xuICAgIHRoaXMuc3RhcnQgPSAwO1xuICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgdGhpcy50eXBlID0gNDtcbn07XG5cbi8qKlxuICogRmxleGlibGUgd3JhcHBlciBhcm91bmQgYEFycmF5QnVmZmVyYCB0aGF0IGFsc28gcHJvdmlkZXNcbiAqIHR5cGVkIGFycmF5IHZpZXdzIG9uIGRlbWFuZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBWaWV3YWJsZUJ1ZmZlciA9IGZ1bmN0aW9uIFZpZXdhYmxlQnVmZmVyKHNpemUpXG57XG4gICAgLyoqXG4gICAgICogVW5kZXJseWluZyBgQXJyYXlCdWZmZXJgIHRoYXQgaG9sZHMgYWxsIHRoZSBkYXRhXG4gICAgICogYW5kIGlzIG9mIGNhcGFjaXR5IGBzaXplYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge0FycmF5QnVmZmVyfVxuICAgICAqL1xuICAgIHRoaXMucmF3QmluYXJ5RGF0YSA9IG5ldyBBcnJheUJ1ZmZlcihzaXplKTtcblxuICAgIC8qKlxuICAgICAqIFZpZXcgb24gdGhlIHJhdyBiaW5hcnkgZGF0YSBhcyBhIGBVaW50MzJBcnJheWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtVaW50MzJBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLnVpbnQzMlZpZXcgPSBuZXcgVWludDMyQXJyYXkodGhpcy5yYXdCaW5hcnlEYXRhKTtcblxuICAgIC8qKlxuICAgICAqIFZpZXcgb24gdGhlIHJhdyBiaW5hcnkgZGF0YSBhcyBhIGBGbG9hdDMyQXJyYXlgLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7RmxvYXQzMkFycmF5fVxuICAgICAqL1xuICAgIHRoaXMuZmxvYXQzMlZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMucmF3QmluYXJ5RGF0YSk7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDUgPSB7IGludDhWaWV3OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHVpbnQ4VmlldzogeyBjb25maWd1cmFibGU6IHRydWUgfSxpbnQxNlZpZXc6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sdWludDE2VmlldzogeyBjb25maWd1cmFibGU6IHRydWUgfSxpbnQzMlZpZXc6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLyoqXG4gKiBWaWV3IG9uIHRoZSByYXcgYmluYXJ5IGRhdGEgYXMgYSBgSW50OEFycmF5YC5cbiAqXG4gKiBAbWVtYmVyIHtJbnQ4QXJyYXl9XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycyQ1LmludDhWaWV3LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgaWYgKCF0aGlzLl9pbnQ4VmlldylcbiAgICB7XG4gICAgICAgIHRoaXMuX2ludDhWaWV3ID0gbmV3IEludDhBcnJheSh0aGlzLnJhd0JpbmFyeURhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9pbnQ4Vmlldztcbn07XG5cbi8qKlxuICogVmlldyBvbiB0aGUgcmF3IGJpbmFyeSBkYXRhIGFzIGEgYFVpbnQ4QXJyYXlgLlxuICpcbiAqIEBtZW1iZXIge1VpbnQ4QXJyYXl9XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycyQ1LnVpbnQ4Vmlldy5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIGlmICghdGhpcy5fdWludDhWaWV3KVxuICAgIHtcbiAgICAgICAgdGhpcy5fdWludDhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5yYXdCaW5hcnlEYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fdWludDhWaWV3O1xufTtcblxuLyoqXG4gKiBWaWV3IG9uIHRoZSByYXcgYmluYXJ5IGRhdGEgYXMgYSBgSW50MTZBcnJheWAuXG4gKlxuICogQG1lbWJlciB7SW50MTZBcnJheX1cbiAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDUuaW50MTZWaWV3LmdldCA9IGZ1bmN0aW9uICgpXG57XG4gICAgaWYgKCF0aGlzLl9pbnQxNlZpZXcpXG4gICAge1xuICAgICAgICB0aGlzLl9pbnQxNlZpZXcgPSBuZXcgSW50MTZBcnJheSh0aGlzLnJhd0JpbmFyeURhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9pbnQxNlZpZXc7XG59O1xuXG4vKipcbiAqIFZpZXcgb24gdGhlIHJhdyBiaW5hcnkgZGF0YSBhcyBhIGBVaW50MTZBcnJheWAuXG4gKlxuICogQG1lbWJlciB7VWludDE2QXJyYXl9XG4gKi9cbnByb3RvdHlwZUFjY2Vzc29ycyQ1LnVpbnQxNlZpZXcuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICBpZiAoIXRoaXMuX3VpbnQxNlZpZXcpXG4gICAge1xuICAgICAgICB0aGlzLl91aW50MTZWaWV3ID0gbmV3IFVpbnQxNkFycmF5KHRoaXMucmF3QmluYXJ5RGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3VpbnQxNlZpZXc7XG59O1xuXG4vKipcbiAqIFZpZXcgb24gdGhlIHJhdyBiaW5hcnkgZGF0YSBhcyBhIGBJbnQzMkFycmF5YC5cbiAqXG4gKiBAbWVtYmVyIHtJbnQzMkFycmF5fVxuICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkNS5pbnQzMlZpZXcuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICBpZiAoIXRoaXMuX2ludDMyVmlldylcbiAgICB7XG4gICAgICAgIHRoaXMuX2ludDMyVmlldyA9IG5ldyBJbnQzMkFycmF5KHRoaXMucmF3QmluYXJ5RGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2ludDMyVmlldztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmlldyBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIE9uZSBvZiBgaW50OGAsIGB1aW50OGAsIGBpbnQxNmAsXG4gKmB1aW50MTZgLCBgaW50MzJgLCBgdWludDMyYCwgYW5kIGBmbG9hdDMyYC5cbiAqIEByZXR1cm4ge29iamVjdH0gdHlwZWQgYXJyYXkgb2YgZ2l2ZW4gdHlwZVxuICovXG5WaWV3YWJsZUJ1ZmZlci5wcm90b3R5cGUudmlldyA9IGZ1bmN0aW9uIHZpZXcgKHR5cGUpXG57XG4gICAgcmV0dXJuIHRoaXNbKHR5cGUgKyBcIlZpZXdcIildO1xufTtcblxuLyoqXG4gKiBEZXN0cm95cyBhbGwgYnVmZmVyIHJlZmVyZW5jZXMuIERvIG5vdCB1c2UgYWZ0ZXIgY2FsbGluZ1xuICogdGhpcy5cbiAqL1xuVmlld2FibGVCdWZmZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpXG57XG4gICAgdGhpcy5yYXdCaW5hcnlEYXRhID0gbnVsbDtcbiAgICB0aGlzLl9pbnQ4VmlldyA9IG51bGw7XG4gICAgdGhpcy5fdWludDhWaWV3ID0gbnVsbDtcbiAgICB0aGlzLl9pbnQxNlZpZXcgPSBudWxsO1xuICAgIHRoaXMuX3VpbnQxNlZpZXcgPSBudWxsO1xuICAgIHRoaXMuX2ludDMyVmlldyA9IG51bGw7XG4gICAgdGhpcy51aW50MzJWaWV3ID0gbnVsbDtcbiAgICB0aGlzLmZsb2F0MzJWaWV3ID0gbnVsbDtcbn07XG5cblZpZXdhYmxlQnVmZmVyLnNpemVPZiA9IGZ1bmN0aW9uIHNpemVPZiAodHlwZSlcbntcbiAgICBzd2l0Y2ggKHR5cGUpXG4gICAge1xuICAgICAgICBjYXNlICdpbnQ4JzpcbiAgICAgICAgY2FzZSAndWludDgnOlxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIGNhc2UgJ2ludDE2JzpcbiAgICAgICAgY2FzZSAndWludDE2JzpcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICBjYXNlICdpbnQzMic6XG4gICAgICAgIGNhc2UgJ3VpbnQzMic6XG4gICAgICAgIGNhc2UgJ2Zsb2F0MzInOlxuICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKHR5cGUgKyBcIiBpc24ndCBhIHZhbGlkIHZpZXcgdHlwZVwiKSk7XG4gICAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZpZXdhYmxlQnVmZmVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDUgKTtcblxuLyoqXG4gKiBSZW5kZXJlciBkZWRpY2F0ZWQgdG8gZHJhd2luZyBhbmQgYmF0Y2hpbmcgc3ByaXRlcy5cbiAqXG4gKiBUaGlzIGlzIHRoZSBkZWZhdWx0IGJhdGNoIHJlbmRlcmVyLiBJdCBidWZmZXJzIG9iamVjdHNcbiAqIHdpdGggdGV4dHVyZS1iYXNlZCBnZW9tZXRyaWVzIGFuZCByZW5kZXJzIHRoZW0gaW5cbiAqIGJhdGNoZXMuIEl0IHVwbG9hZHMgbXVsdGlwbGUgdGV4dHVyZXMgdG8gdGhlIEdQVSB0b1xuICogcmVkdWNlIHRvIHRoZSBudW1iZXIgb2YgZHJhdyBjYWxscy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwcm90ZWN0ZWRcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAZXh0ZW5kcyBQSVhJLk9iamVjdFJlbmRlcmVyXG4gKi9cbnZhciBBYnN0cmFjdEJhdGNoUmVuZGVyZXIgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChPYmplY3RSZW5kZXJlcikge1xuICAgIGZ1bmN0aW9uIEFic3RyYWN0QmF0Y2hSZW5kZXJlcihyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIE9iamVjdFJlbmRlcmVyLmNhbGwodGhpcywgcmVuZGVyZXIpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgYSBzaGFkZXIgdGhhdCBjYW5cbiAgICAgICAgICogY29sb3IgZWFjaCB2ZXJ0ZXggYmFzZWQgb24gYSBgYVRleHR1cmVJZGBcbiAgICAgICAgICogYXR0cmlidXRlIHRoYXQgcG9pbnRzIHRvIGFuIHRleHR1cmUgaW4gYHVTYW1wbGVyYC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBlbmFibGVzIHRoZSBvYmplY3RzIHdpdGggZGlmZmVyZW50IHRleHR1cmVzXG4gICAgICAgICAqIHRvIGJlIGRyYXduIGluIHRoZSBzYW1lIGRyYXcgY2FsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogWW91IGNhbiBjdXN0b21pemUgeW91ciBzaGFkZXIgYnkgY3JlYXRpbmcgeW91clxuICAgICAgICAgKiBjdXN0b20gc2hhZGVyIGdlbmVyYXRvci5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5CYXRjaFNoYWRlckdlbmVyYXRvcn1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zaGFkZXJHZW5lcmF0b3IgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY2xhc3MgdGhhdCByZXByZXNlbnRzIHRoZSBnZW9tZXRyeSBvZiBvYmplY3RzXG4gICAgICAgICAqIHRoYXQgYXJlIGdvaW5nIHRvIGJlIGJhdGNoZWQgd2l0aCB0aGlzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuQmF0Y2hHZW9tZXRyeVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdlb21ldHJ5Q2xhc3MgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaXplIG9mIGRhdGEgYmVpbmcgYnVmZmVyZWQgcGVyIHZlcnRleCBpbiB0aGVcbiAgICAgICAgICogYXR0cmlidXRlIGJ1ZmZlcnMgKGluIGZsb2F0cykuIEJ5IGRlZmF1bHQsIHRoZVxuICAgICAgICAgKiBiYXRjaC1yZW5kZXJlciBwbHVnaW4gdXNlcyA2OlxuICAgICAgICAgKlxuICAgICAgICAgKiB8IGFWZXJ0ZXhQb3NpdGlvbiB8IDIgfFxuICAgICAgICAgKiB8LS0tLS0tLS0tLS0tLS0tLS18LS0tfFxuICAgICAgICAgKiB8IGFUZXh0dXJlQ29vcmRzICB8IDIgfFxuICAgICAgICAgKiB8IGFDb2xvciAgICAgICAgICB8IDEgfFxuICAgICAgICAgKiB8IGFUZXh0dXJlSWQgICAgICB8IDEgfFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ZXJ0ZXhTaXplID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIFdlYkdMIHN0YXRlIGluIHdoaWNoIHRoaXMgcmVuZGVyZXIgd2lsbCB3b3JrLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlN0YXRlfVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5mb3IyZCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIGJ1ZmZlcmFibGUgb2JqZWN0cyBiZWZvcmUgYSBmbHVzaFxuICAgICAgICAgKiBvY2N1cnMgYXV0b21hdGljYWxseS5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCBzZXR0aW5ncy5TUFJJVEVfTUFYX1RFWFRVUkVTXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNpemUgPSAyMDAwICogNDsvLyBzZXR0aW5ncy5TUFJJVEVfQkFUQ0hfU0laRSwgMjAwMCBpcyBhIG5pY2UgYmFsYW5jZSBiZXR3ZWVuIG1vYmlsZS9kZXNrdG9wXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRvdGFsIGNvdW50IG9mIGFsbCB2ZXJ0aWNlcyB1c2VkIGJ5IHRoZSBjdXJyZW50bHlcbiAgICAgICAgICogYnVmZmVyZWQgb2JqZWN0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fdmVydGV4Q291bnQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUb3RhbCBjb3VudCBvZiBhbGwgaW5kaWNlcyB1c2VkIGJ5IHRoZSBjdXJyZW50bHlcbiAgICAgICAgICogYnVmZmVyZWQgb2JqZWN0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faW5kZXhDb3VudCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJ1ZmZlciBvZiBvYmplY3RzIHRoYXQgYXJlIHlldCB0byBiZSByZW5kZXJlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5EaXNwbGF5T2JqZWN0W119XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9idWZmZXJlZEVsZW1lbnRzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE51bWJlciBvZiBlbGVtZW50cyB0aGF0IGFyZSBidWZmZXJlZCBhbmQgYXJlXG4gICAgICAgICAqIHdhaXRpbmcgdG8gYmUgZmx1c2hlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYnVmZmVyU2l6ZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgc2hhZGVyIGlzIGdlbmVyYXRlZCBieSBgdGhpcy5zaGFkZXJHZW5lcmF0b3JgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJdCBpcyBnZW5lcmF0ZWQgc3BlY2lmaWNhbGx5IHRvIGhhbmRsZSB0aGUgcmVxdWlyZWRcbiAgICAgICAgICogbnVtYmVyIG9mIHRleHR1cmVzIGJlaW5nIGJhdGNoZWQgdG9nZXRoZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuU2hhZGVyfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9zaGFkZXIgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQb29sIG9mIGB0aGlzLmdlb21ldHJ5Q2xhc3NgIGdlb21ldHJ5IG9iamVjdHNcbiAgICAgICAgICogdGhhdCBzdG9yZSBidWZmZXJzLiBUaGV5IGFyZSB1c2VkIHRvIHBhc3MgZGF0YVxuICAgICAgICAgKiB0byB0aGUgc2hhZGVyIG9uIGVhY2ggZHJhdyBjYWxsLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGVzZSBhcmUgbmV2ZXIgcmUtYWxsb2NhdGVkIGFnYWluLCB1bmxlc3MgYVxuICAgICAgICAgKiBjb250ZXh0IGNoYW5nZSBvY2N1cnM7IGhvd2V2ZXIsIHRoZSBwb29sIG1heVxuICAgICAgICAgKiBiZSBleHBhbmRlZCBpZiByZXF1aXJlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5HZW9tZXRyeVtdfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAc2VlIFBJWEkuQWJzdHJhY3RCYXRjaFJlbmRlcmVyLmNvbnRleHRDaGFuZ2VcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3BhY2tlZEdlb21ldHJpZXMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2l6ZSBvZiBgdGhpcy5fcGFja2VkR2VvbWV0cmllc2AuIEl0IGNhbiBiZSBleHBhbmRlZFxuICAgICAgICAgKiBpZiBtb3JlIHRoYW4gYHRoaXMuX3BhY2tlZEdlb21ldHJ5UG9vbFNpemVgIGZsdXNoZXNcbiAgICAgICAgICogb2NjdXIgaW4gYSBzaW5nbGUgZnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3BhY2tlZEdlb21ldHJ5UG9vbFNpemUgPSAyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGZsdXNoIG1heSBvY2N1ciBtdWx0aXBsZSB0aW1lcyBpbiBhIHNpbmdsZVxuICAgICAgICAgKiBmcmFtZS4gT24gaU9TIGRldmljZXMgb3Igd2hlblxuICAgICAgICAgKiBgc2V0dGluZ3MuQ0FOX1VQTE9BRF9TQU1FX0JVRkZFUmAgaXMgZmFsc2UsIHRoZVxuICAgICAgICAgKiBiYXRjaCByZW5kZXJlciBkb2VzIG5vdCB1cGxvYWQgZGF0YSB0byB0aGUgc2FtZVxuICAgICAgICAgKiBgV2ViR0xCdWZmZXJgIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIHRoZSBpbmRleCBpbnRvIGBwYWNrZWRHZW9tZXRyaWVzYCB0aGF0IHBvaW50cyB0b1xuICAgICAgICAgKiBnZW9tZXRyeSBob2xkaW5nIHRoZSBtb3N0IHJlY2VudCBidWZmZXJzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9mbHVzaElkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUG9vbCBvZiBgQmF0Y2hEcmF3Q2FsbGAgb2JqZWN0cyB0aGF0IGBmbHVzaGAgdXNlZFxuICAgICAgICAgKiB0byBjcmVhdGUgXCJiYXRjaGVzXCIgb2YgdGhlIG9iamVjdHMgYmVpbmcgcmVuZGVyZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZXNlIGFyZSBuZXZlciByZS1hbGxvY2F0ZWQgYWdhaW4uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIgQmF0Y2hEcmF3Q2FsbFtdXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9kcmF3Q2FsbHMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMuc2l6ZSAvIDQ7IGsrKylcbiAgICAgICAgeyAvLyBpbml0aWFsaXplIHRoZSBkcmF3LWNhbGxzIHBvb2wgdG8gbWF4IHNpemUuXG4gICAgICAgICAgICB0aGlzLl9kcmF3Q2FsbHNba10gPSBuZXcgQmF0Y2hEcmF3Q2FsbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBvb2wgb2YgYFZpZXdhYmxlQnVmZmVyYCBvYmplY3RzIHRoYXQgYXJlIHNvcnRlZCBpblxuICAgICAgICAgKiBvcmRlciBvZiBpbmNyZWFzaW5nIHNpemUuIFRoZSBmbHVzaCBtZXRob2QgdXNlc1xuICAgICAgICAgKiB0aGUgYnVmZmVyIHdpdGggdGhlIGxlYXN0IHNpemUgYWJvdmUgdGhlIGFtb3VudFxuICAgICAgICAgKiBpdCByZXF1aXJlcy4gVGhlc2UgYXJlIHVzZWQgZm9yIHBhc3NpbmcgYXR0cmlidXRlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGZpcnN0IGJ1ZmZlciBoYXMgYSBzaXplIG9mIDg7IGVhY2ggc3Vic2VxdWVudFxuICAgICAgICAgKiBidWZmZXIgaGFzIGRvdWJsZSBjYXBhY2l0eSBvZiBpdHMgcHJldmlvdXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuVmlld2FibGVCdWZmZXJ9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBzZWUgUElYSS5BYnN0cmFjdEJhdGNoUmVuZGVyZXIjZ2V0QXR0cmlidXRlQnVmZmVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9hQnVmZmVycyA9IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQb29sIG9mIGBVaW50MTZBcnJheWAgb2JqZWN0cyB0aGF0IGFyZSBzb3J0ZWQgaW5cbiAgICAgICAgICogb3JkZXIgb2YgaW5jcmVhc2luZyBzaXplLiBUaGUgZmx1c2ggbWV0aG9kIHVzZXNcbiAgICAgICAgICogdGhlIGJ1ZmZlciB3aXRoIHRoZSBsZWFzdCBzaXplIGFib3ZlIHRoZSBhbW91bnRcbiAgICAgICAgICogaXQgcmVxdWlyZXMuIFRoZXNlIGFyZSB1c2VkIGZvciBwYXNzaW5nIGluZGljZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBmaXJzdCBidWZmZXIgaGFzIGEgc2l6ZSBvZiAxMjsgZWFjaCBzdWJzZXF1ZW50XG4gICAgICAgICAqIGJ1ZmZlciBoYXMgZG91YmxlIGNhcGFjaXR5IG9mIGl0cyBwcmV2aW91cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7VWludDE2QXJyYXlbXX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHNlZSBQSVhJLkFic3RyYWN0QmF0Y2hSZW5kZXJlciNnZXRJbmRleEJ1ZmZlclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faUJ1ZmZlcnMgPSB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWF4aW11bSBudW1iZXIgb2YgdGV4dHVyZXMgdGhhdCBjYW4gYmUgdXBsb2FkZWQgdG9cbiAgICAgICAgICogdGhlIEdQVSB1bmRlciB0aGUgY3VycmVudCBjb250ZXh0LiBJdCBpcyBpbml0aWFsaXplZFxuICAgICAgICAgKiBwcm9wZXJseSBpbiBgdGhpcy5jb250ZXh0Q2hhbmdlYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAc2VlIFBJWEkuQWJzdHJhY3RCYXRjaFJlbmRlcmVyI2NvbnRleHRDaGFuZ2VcbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLk1BWF9URVhUVVJFUyA9IDE7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5vbigncHJlcmVuZGVyJywgdGhpcy5vblByZXJlbmRlciwgdGhpcyk7XG4gICAgICAgIHJlbmRlcmVyLnJ1bm5lcnMuY29udGV4dENoYW5nZS5hZGQodGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKCBPYmplY3RSZW5kZXJlciApIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5fX3Byb3RvX18gPSBPYmplY3RSZW5kZXJlcjtcbiAgICBBYnN0cmFjdEJhdGNoUmVuZGVyZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0UmVuZGVyZXIgJiYgT2JqZWN0UmVuZGVyZXIucHJvdG90eXBlICk7XG4gICAgQWJzdHJhY3RCYXRjaFJlbmRlcmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFic3RyYWN0QmF0Y2hSZW5kZXJlcjtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdGhlIGBjb250ZXh0Q2hhbmdlYCBzaWduYWwuXG4gICAgICpcbiAgICAgKiBJdCBjYWxjdWxhdGVzIGB0aGlzLk1BWF9URVhUVVJFU2AgYW5kIGFsbG9jYXRpbmcgdGhlXG4gICAgICogcGFja2VkLWdlb21ldHJ5IG9iamVjdCBwb29sLlxuICAgICAqL1xuICAgIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5wcm90b3R5cGUuY29udGV4dENoYW5nZSA9IGZ1bmN0aW9uIGNvbnRleHRDaGFuZ2UgKClcbiAgICB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMucmVuZGVyZXIuZ2w7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLlBSRUZFUl9FTlYgPT09IEVOVi5XRUJHTF9MRUdBQ1kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuTUFYX1RFWFRVUkVTID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIHN0ZXAgMTogZmlyc3QgY2hlY2sgbWF4IHRleHR1cmVzIHRoZSBHUFUgY2FuIGhhbmRsZS5cbiAgICAgICAgICAgIHRoaXMuTUFYX1RFWFRVUkVTID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTKSxcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5TUFJJVEVfTUFYX1RFWFRVUkVTKTtcblxuICAgICAgICAgICAgLy8gc3RlcCAyOiBjaGVjayB0aGUgbWF4aW11bSBudW1iZXIgb2YgaWYgc3RhdGVtZW50cyB0aGUgc2hhZGVyIGNhbiBoYXZlIHRvby4uXG4gICAgICAgICAgICB0aGlzLk1BWF9URVhUVVJFUyA9IGNoZWNrTWF4SWZTdGF0ZW1lbnRzSW5TaGFkZXIoXG4gICAgICAgICAgICAgICAgdGhpcy5NQVhfVEVYVFVSRVMsIGdsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NoYWRlciA9IHRoaXMuc2hhZGVyR2VuZXJhdG9yLmdlbmVyYXRlU2hhZGVyKHRoaXMuTUFYX1RFWFRVUkVTKTtcblxuICAgICAgICAvLyB3ZSB1c2UgdGhlIHNlY29uZCBzaGFkZXIgYXMgdGhlIGZpcnN0IG9uZSBkZXBlbmRpbmcgb24geW91ciBicm93c2VyXG4gICAgICAgIC8vIG1heSBvbWl0IGFUZXh0dXJlSWQgYXMgaXQgaXMgbm90IHVzZWQgYnkgdGhlIHNoYWRlciBzbyBpcyBvcHRpbWl6ZWQgb3V0LlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3BhY2tlZEdlb21ldHJ5UG9vbFNpemU7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgICAgICAgICAgdGhpcy5fcGFja2VkR2VvbWV0cmllc1tpXSA9IG5ldyAodGhpcy5nZW9tZXRyeUNsYXNzKSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdGhlIGBwcmVyZW5kZXJgIHNpZ25hbC5cbiAgICAgKlxuICAgICAqIEl0IGVuc3VyZXMgdGhhdCBmbHVzaGVzIHN0YXJ0IGZyb20gdGhlIGZpcnN0IGdlb21ldHJ5XG4gICAgICogb2JqZWN0IGFnYWluLlxuICAgICAqL1xuICAgIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5wcm90b3R5cGUub25QcmVyZW5kZXIgPSBmdW5jdGlvbiBvblByZXJlbmRlciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5fZmx1c2hJZCA9IDA7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEJ1ZmZlcnMgdGhlIFwiYmF0Y2hhYmxlXCIgb2JqZWN0LiBJdCBuZWVkIG5vdCBiZSByZW5kZXJlZFxuICAgICAqIGltbWVkaWF0ZWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlNwcml0ZX0gc3ByaXRlIC0gdGhlIHNwcml0ZSB0byByZW5kZXIgd2hlblxuICAgICAqICAgIHVzaW5nIHRoaXMgc3ByaXRlYmF0Y2hcbiAgICAgKi9cbiAgICBBYnN0cmFjdEJhdGNoUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAoZWxlbWVudClcbiAgICB7XG4gICAgICAgIGlmICghZWxlbWVudC5fdGV4dHVyZS52YWxpZClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3ZlcnRleENvdW50ICsgKGVsZW1lbnQudmVydGV4RGF0YS5sZW5ndGggLyAyKSA+IHRoaXMuc2l6ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmVydGV4Q291bnQgKz0gZWxlbWVudC52ZXJ0ZXhEYXRhLmxlbmd0aCAvIDI7XG4gICAgICAgIHRoaXMuX2luZGV4Q291bnQgKz0gZWxlbWVudC5pbmRpY2VzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fYnVmZmVyZWRFbGVtZW50c1t0aGlzLl9idWZmZXJTaXplKytdID0gZWxlbWVudDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgY29udGVudCBfbm93XyBhbmQgZW1wdGllcyB0aGUgY3VycmVudCBiYXRjaC5cbiAgICAgKi9cbiAgICBBYnN0cmFjdEJhdGNoUmVuZGVyZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gZmx1c2ggKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLl92ZXJ0ZXhDb3VudCA9PT0gMClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGF0dHJpYnV0ZUJ1ZmZlciA9IHRoaXMuZ2V0QXR0cmlidXRlQnVmZmVyKHRoaXMuX3ZlcnRleENvdW50KTtcbiAgICAgICAgdmFyIGluZGV4QnVmZmVyID0gdGhpcy5nZXRJbmRleEJ1ZmZlcih0aGlzLl9pbmRleENvdW50KTtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5yZW5kZXJlci5nbDtcblxuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gcmVmLl9idWZmZXJlZEVsZW1lbnRzO1xuICAgICAgICB2YXIgZHJhd0NhbGxzID0gcmVmLl9kcmF3Q2FsbHM7XG4gICAgICAgIHZhciBNQVhfVEVYVFVSRVMgPSByZWYuTUFYX1RFWFRVUkVTO1xuICAgICAgICB2YXIgcGFja2VkR2VvbWV0cmllcyA9IHJlZi5fcGFja2VkR2VvbWV0cmllcztcbiAgICAgICAgdmFyIHZlcnRleFNpemUgPSByZWYudmVydGV4U2l6ZTtcblxuICAgICAgICB2YXIgdG91Y2ggPSB0aGlzLnJlbmRlcmVyLnRleHR1cmVHQy5jb3VudDtcblxuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgX2luZGV4Q291bnQgPSAwO1xuXG4gICAgICAgIHZhciBuZXh0VGV4dHVyZTtcbiAgICAgICAgdmFyIGN1cnJlbnRUZXh0dXJlO1xuICAgICAgICB2YXIgdGV4dHVyZUNvdW50ID0gMDtcblxuICAgICAgICB2YXIgY3VycmVudEdyb3VwID0gZHJhd0NhbGxzWzBdO1xuICAgICAgICB2YXIgZ3JvdXBDb3VudCA9IDA7XG5cbiAgICAgICAgdmFyIGJsZW5kTW9kZSA9IC0xOy8vIGJsZW5kLW1vZGUgb2YgcHJldmlvdXMgZWxlbWVudC9zcHJpdGUvb2JqZWN0IVxuXG4gICAgICAgIGN1cnJlbnRHcm91cC50ZXh0dXJlQ291bnQgPSAwO1xuICAgICAgICBjdXJyZW50R3JvdXAuc3RhcnQgPSAwO1xuICAgICAgICBjdXJyZW50R3JvdXAuYmxlbmQgPSBibGVuZE1vZGU7XG5cbiAgICAgICAgdmFyIFRJQ0sgPSArK0Jhc2VUZXh0dXJlLl9nbG9iYWxCYXRjaDtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuX2J1ZmZlclNpemU7ICsraSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHNwcml0ZSA9IGVsZW1lbnRzW2ldO1xuXG4gICAgICAgICAgICBlbGVtZW50c1tpXSA9IG51bGw7XG4gICAgICAgICAgICBuZXh0VGV4dHVyZSA9IHNwcml0ZS5fdGV4dHVyZS5iYXNlVGV4dHVyZTtcblxuICAgICAgICAgICAgdmFyIHNwcml0ZUJsZW5kTW9kZSA9IHByZW11bHRpcGx5QmxlbmRNb2RlW1xuICAgICAgICAgICAgICAgIG5leHRUZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgPyAxIDogMF1bc3ByaXRlLmJsZW5kTW9kZV07XG5cbiAgICAgICAgICAgIGlmIChibGVuZE1vZGUgIT09IHNwcml0ZUJsZW5kTW9kZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBibGVuZE1vZGUgPSBzcHJpdGVCbGVuZE1vZGU7XG5cbiAgICAgICAgICAgICAgICAvLyBmb3JjZSB0aGUgYmF0Y2ggdG8gYnJlYWshXG4gICAgICAgICAgICAgICAgY3VycmVudFRleHR1cmUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRleHR1cmVDb3VudCA9IE1BWF9URVhUVVJFUztcbiAgICAgICAgICAgICAgICBUSUNLKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50VGV4dHVyZSAhPT0gbmV4dFRleHR1cmUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3VycmVudFRleHR1cmUgPSBuZXh0VGV4dHVyZTtcblxuICAgICAgICAgICAgICAgIGlmIChuZXh0VGV4dHVyZS5fYmF0Y2hFbmFibGVkICE9PSBUSUNLKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVDb3VudCA9PT0gTUFYX1RFWFRVUkVTKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBUSUNLKys7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmVDb3VudCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRHcm91cC5zaXplID0gX2luZGV4Q291bnQgLSBjdXJyZW50R3JvdXAuc3RhcnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRHcm91cCA9IGRyYXdDYWxsc1tncm91cENvdW50KytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwLnRleHR1cmVDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50R3JvdXAuYmxlbmQgPSBibGVuZE1vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50R3JvdXAuc3RhcnQgPSBfaW5kZXhDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG5leHRUZXh0dXJlLnRvdWNoZWQgPSB0b3VjaDtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFRleHR1cmUuX2JhdGNoRW5hYmxlZCA9IFRJQ0s7XG4gICAgICAgICAgICAgICAgICAgIG5leHRUZXh0dXJlLl9pZCA9IHRleHR1cmVDb3VudDtcblxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50R3JvdXAudGV4dHVyZXNbY3VycmVudEdyb3VwLnRleHR1cmVDb3VudCsrXSA9IG5leHRUZXh0dXJlO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlQ291bnQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGFja0ludGVybGVhdmVkR2VvbWV0cnkoc3ByaXRlLCBhdHRyaWJ1dGVCdWZmZXIsXG4gICAgICAgICAgICAgICAgaW5kZXhCdWZmZXIsIGluZGV4LCBfaW5kZXhDb3VudCk7XG5cbiAgICAgICAgICAgIC8vIHB1c2ggYSBncmFwaGljcy4uXG4gICAgICAgICAgICBpbmRleCArPSAoc3ByaXRlLnZlcnRleERhdGEubGVuZ3RoIC8gMikgKiB2ZXJ0ZXhTaXplO1xuICAgICAgICAgICAgX2luZGV4Q291bnQgKz0gc3ByaXRlLmluZGljZXMubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgQmFzZVRleHR1cmUuX2dsb2JhbEJhdGNoID0gVElDSztcbiAgICAgICAgY3VycmVudEdyb3VwLnNpemUgPSBfaW5kZXhDb3VudCAtIGN1cnJlbnRHcm91cC5zdGFydDtcblxuICAgICAgICBpZiAoIXNldHRpbmdzLkNBTl9VUExPQURfU0FNRV9CVUZGRVIpXG4gICAgICAgIHsgLyogVXN1YWxseSBvbiBpT1MgZGV2aWNlcywgd2hlcmUgdGhlIGJyb3dzZXIgZG9lc24ndFxuICAgICAgICAgICAgbGlrZSB1cGxvYWRzIHRvIHRoZSBzYW1lIGJ1ZmZlciBpbiBhIHNpbmdsZSBmcmFtZS4gKi9cbiAgICAgICAgICAgIGlmICh0aGlzLl9wYWNrZWRHZW9tZXRyeVBvb2xTaXplIDw9IHRoaXMuX2ZsdXNoSWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFja2VkR2VvbWV0cnlQb29sU2l6ZSsrO1xuICAgICAgICAgICAgICAgIHBhY2tlZEdlb21ldHJpZXNbdGhpcy5fZmx1c2hJZF0gPSBuZXcgKHRoaXMuZ2VvbWV0cnlDbGFzcykoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFja2VkR2VvbWV0cmllc1t0aGlzLl9mbHVzaElkXS5fYnVmZmVyLnVwZGF0ZShhdHRyaWJ1dGVCdWZmZXIucmF3QmluYXJ5RGF0YSwgMCk7XG4gICAgICAgICAgICBwYWNrZWRHZW9tZXRyaWVzW3RoaXMuX2ZsdXNoSWRdLl9pbmRleEJ1ZmZlci51cGRhdGUoaW5kZXhCdWZmZXIsIDApO1xuXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmdlb21ldHJ5LmJpbmQocGFja2VkR2VvbWV0cmllc1t0aGlzLl9mbHVzaElkXSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmdlb21ldHJ5LnVwZGF0ZUJ1ZmZlcnMoKTtcbiAgICAgICAgICAgIHRoaXMuX2ZsdXNoSWQrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGxldHMgdXNlIHRoZSBmYXN0ZXIgb3B0aW9uLCBhbHdheXMgdXNlIGJ1ZmZlciBudW1iZXIgMFxuICAgICAgICAgICAgcGFja2VkR2VvbWV0cmllc1t0aGlzLl9mbHVzaElkXS5fYnVmZmVyLnVwZGF0ZShhdHRyaWJ1dGVCdWZmZXIucmF3QmluYXJ5RGF0YSwgMCk7XG4gICAgICAgICAgICBwYWNrZWRHZW9tZXRyaWVzW3RoaXMuX2ZsdXNoSWRdLl9pbmRleEJ1ZmZlci51cGRhdGUoaW5kZXhCdWZmZXIsIDApO1xuXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmdlb21ldHJ5LnVwZGF0ZUJ1ZmZlcnMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ZXh0dXJlU3lzdGVtID0gdGhpcy5yZW5kZXJlci50ZXh0dXJlO1xuICAgICAgICB2YXIgc3RhdGVTeXN0ZW0gPSB0aGlzLnJlbmRlcmVyLnN0YXRlO1xuXG4gICAgICAgIC8vIFVwbG9hZCB0ZXh0dXJlcyBhbmQgZG8gdGhlIGRyYXcgY2FsbHNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGdyb3VwQ291bnQ7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGdyb3VwID0gZHJhd0NhbGxzW2ldO1xuICAgICAgICAgICAgdmFyIGdyb3VwVGV4dHVyZUNvdW50ID0gZ3JvdXAudGV4dHVyZUNvdW50O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGdyb3VwVGV4dHVyZUNvdW50OyBqKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGV4dHVyZVN5c3RlbS5iaW5kKGdyb3VwLnRleHR1cmVzW2pdLCBqKTtcbiAgICAgICAgICAgICAgICBncm91cC50ZXh0dXJlc1tqXSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0YXRlU3lzdGVtLnNldEJsZW5kTW9kZShncm91cC5ibGVuZCk7XG4gICAgICAgICAgICBnbC5kcmF3RWxlbWVudHMoZ3JvdXAudHlwZSwgZ3JvdXAuc2l6ZSwgZ2wuVU5TSUdORURfU0hPUlQsIGdyb3VwLnN0YXJ0ICogMik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXNldCBlbGVtZW50cyBmb3IgdGhlIG5leHQgZmx1c2hcbiAgICAgICAgdGhpcy5fYnVmZmVyU2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX3ZlcnRleENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5faW5kZXhDb3VudCA9IDA7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBhIG5ldyBzcHJpdGUgYmF0Y2guXG4gICAgICovXG4gICAgQWJzdHJhY3RCYXRjaFJlbmRlcmVyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIHN0YXJ0ICgpXG4gICAge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnN0YXRlLnNldCh0aGlzLnN0YXRlKTtcblxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNoYWRlci5iaW5kKHRoaXMuX3NoYWRlcik7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLkNBTl9VUExPQURfU0FNRV9CVUZGRVIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGJpbmQgYnVmZmVyICMwLCB3ZSBkb24ndCBuZWVkIG90aGVyc1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5nZW9tZXRyeS5iaW5kKHRoaXMuX3BhY2tlZEdlb21ldHJpZXNbdGhpcy5fZmx1c2hJZF0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGFuZCBmbHVzaGVzIHRoZSBjdXJyZW50IGJhdGNoLlxuICAgICAqL1xuICAgIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIHN0b3AgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhpcyBgQWJzdHJhY3RCYXRjaFJlbmRlcmVyYC4gSXQgY2Fubm90IGJlIHVzZWQgYWdhaW4uXG4gICAgICovXG4gICAgQWJzdHJhY3RCYXRjaFJlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKVxuICAgIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9wYWNrZWRHZW9tZXRyeVBvb2xTaXplOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wYWNrZWRHZW9tZXRyaWVzW2ldKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhY2tlZEdlb21ldHJpZXNbaV0uZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5vZmYoJ3ByZXJlbmRlcicsIHRoaXMub25QcmVyZW5kZXIsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX2FCdWZmZXJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5faUJ1ZmZlcnMgPSBudWxsO1xuICAgICAgICB0aGlzLl9wYWNrZWRHZW9tZXRyaWVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZHJhd0NhbGxzID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5fc2hhZGVyKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9zaGFkZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5fc2hhZGVyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdFJlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgYW4gYXR0cmlidXRlIGJ1ZmZlciBmcm9tIGB0aGlzLl9hQnVmZmVyc2AgdGhhdFxuICAgICAqIGNhbiBob2xkIGF0bGVhc3QgYHNpemVgIGZsb2F0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIC0gbWluaW11bSBjYXBhY2l0eSByZXF1aXJlZFxuICAgICAqIEByZXR1cm4ge1ZpZXdhYmxlQnVmZmVyfSAtIGJ1ZmZlciB0aGFuIGNhbiBob2xkIGF0bGVhc3QgYHNpemVgIGZsb2F0c1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgQWJzdHJhY3RCYXRjaFJlbmRlcmVyLnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVCdWZmZXIgPSBmdW5jdGlvbiBnZXRBdHRyaWJ1dGVCdWZmZXIgKHNpemUpXG4gICAge1xuICAgICAgICAvLyA4IHZlcnRpY2VzIGlzIGVub3VnaCBmb3IgMiBxdWFkc1xuICAgICAgICB2YXIgcm91bmRlZFAyID0gbmV4dFBvdzIoTWF0aC5jZWlsKHNpemUgLyA4KSk7XG4gICAgICAgIHZhciByb3VuZGVkU2l6ZUluZGV4ID0gbG9nMihyb3VuZGVkUDIpO1xuICAgICAgICB2YXIgcm91bmRlZFNpemUgPSByb3VuZGVkUDIgKiA4O1xuXG4gICAgICAgIGlmICh0aGlzLl9hQnVmZmVycy5sZW5ndGggPD0gcm91bmRlZFNpemVJbmRleClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5faUJ1ZmZlcnMubGVuZ3RoID0gcm91bmRlZFNpemVJbmRleCArIDE7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fYUJ1ZmZlcnNbcm91bmRlZFNpemVdO1xuXG4gICAgICAgIGlmICghYnVmZmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9hQnVmZmVyc1tyb3VuZGVkU2l6ZV0gPSBidWZmZXIgPSBuZXcgVmlld2FibGVCdWZmZXIocm91bmRlZFNpemUgKiB0aGlzLnZlcnRleFNpemUgKiA0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgYW4gaW5kZXggYnVmZmVyIGZyb20gYHRoaXMuX2lCdWZmZXJzYCB0aGF0IGNhblxuICAgICAqIGhhcyBhdGxlYXN0IGBzaXplYCBjYXBhY2l0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIC0gbWluaW11bSByZXF1aXJlZCBjYXBhY2l0eVxuICAgICAqIEByZXR1cm4ge1VpbnQxNkFycmF5fSAtIGJ1ZmZlciB0aGF0IGNhbiBmaXQgYHNpemVgXG4gICAgICogICAgaW5kaWNlcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEFic3RyYWN0QmF0Y2hSZW5kZXJlci5wcm90b3R5cGUuZ2V0SW5kZXhCdWZmZXIgPSBmdW5jdGlvbiBnZXRJbmRleEJ1ZmZlciAoc2l6ZSlcbiAgICB7XG4gICAgICAgIC8vIDEyIGluZGljZXMgaXMgZW5vdWdoIGZvciAyIHF1YWRzXG4gICAgICAgIHZhciByb3VuZGVkUDIgPSBuZXh0UG93MihNYXRoLmNlaWwoc2l6ZSAvIDEyKSk7XG4gICAgICAgIHZhciByb3VuZGVkU2l6ZUluZGV4ID0gbG9nMihyb3VuZGVkUDIpO1xuICAgICAgICB2YXIgcm91bmRlZFNpemUgPSByb3VuZGVkUDIgKiAxMjtcblxuICAgICAgICBpZiAodGhpcy5faUJ1ZmZlcnMubGVuZ3RoIDw9IHJvdW5kZWRTaXplSW5kZXgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2lCdWZmZXJzLmxlbmd0aCA9IHJvdW5kZWRTaXplSW5kZXggKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuX2lCdWZmZXJzW3JvdW5kZWRTaXplSW5kZXhdO1xuXG4gICAgICAgIGlmICghYnVmZmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9pQnVmZmVyc1tyb3VuZGVkU2l6ZUluZGV4XSA9IGJ1ZmZlciA9IG5ldyBVaW50MTZBcnJheShyb3VuZGVkU2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyB0aGUgZm91ciBiYXRjaGluZyBwYXJhbWV0ZXJzIG9mIGBlbGVtZW50YCwgaW50ZXJsZWF2ZXNcbiAgICAgKiBhbmQgcHVzaGVzIHRoZW0gaW50byB0aGUgYmF0Y2hpbmcgYXR0cmlidXRlL2luZGV4IGJ1ZmZlcnMgZ2l2ZW4uXG4gICAgICpcbiAgICAgKiBJdCB1c2VzIHRoZXNlIHByb3BlcnRpZXM6IGB2ZXJ0ZXhEYXRhYCBgdXZzYCwgYHRleHR1cmVJZGAgYW5kXG4gICAgICogYGluZGljaWVzYC4gSXQgYWxzbyB1c2VzIHRoZSBcInRpbnRcIiBvZiB0aGUgYmFzZS10ZXh0dXJlLCBpZlxuICAgICAqIHByZXNlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuU3ByaXRlfSBlbGVtZW50IC0gZWxlbWVudCBiZWluZyByZW5kZXJlZFxuICAgICAqIEBwYXJhbSB7UElYSS5WaWV3YWJsZUJ1ZmZlcn0gYXR0cmlidXRlQnVmZmVyIC0gYXR0cmlidXRlIGJ1ZmZlci5cbiAgICAgKiBAcGFyYW0ge1VpbnQxNkFycmF5fSBpbmRleEJ1ZmZlciAtIGluZGV4IGJ1ZmZlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhSW5kZXggLSBudW1iZXIgb2YgZmxvYXRzIGFscmVhZHkgaW4gdGhlIGF0dHJpYnV0ZSBidWZmZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaUluZGV4IC0gbnVtYmVyIG9mIGluZGljZXMgYWxyZWFkeSBpbiBgaW5kZXhCdWZmZXJgXG4gICAgICovXG4gICAgQWJzdHJhY3RCYXRjaFJlbmRlcmVyLnByb3RvdHlwZS5wYWNrSW50ZXJsZWF2ZWRHZW9tZXRyeSA9IGZ1bmN0aW9uIHBhY2tJbnRlcmxlYXZlZEdlb21ldHJ5IChlbGVtZW50LCBhdHRyaWJ1dGVCdWZmZXIsIGluZGV4QnVmZmVyLCBhSW5kZXgsIGlJbmRleClcbiAgICB7XG4gICAgICAgIHZhciB1aW50MzJWaWV3ID0gYXR0cmlidXRlQnVmZmVyLnVpbnQzMlZpZXc7XG4gICAgICAgIHZhciBmbG9hdDMyVmlldyA9IGF0dHJpYnV0ZUJ1ZmZlci5mbG9hdDMyVmlldztcblxuICAgICAgICB2YXIgcGFja2VkVmVydGljZXMgPSBhSW5kZXggLyB0aGlzLnZlcnRleFNpemU7XG4gICAgICAgIHZhciB1dnMgPSBlbGVtZW50LnV2cztcbiAgICAgICAgdmFyIGluZGljaWVzID0gZWxlbWVudC5pbmRpY2VzO1xuICAgICAgICB2YXIgdmVydGV4RGF0YSA9IGVsZW1lbnQudmVydGV4RGF0YTtcbiAgICAgICAgdmFyIHRleHR1cmVJZCA9IGVsZW1lbnQuX3RleHR1cmUuYmFzZVRleHR1cmUuX2lkO1xuXG4gICAgICAgIHZhciBhbHBoYSA9IE1hdGgubWluKGVsZW1lbnQud29ybGRBbHBoYSwgMS4wKTtcbiAgICAgICAgdmFyIGFyZ2IgPSAoYWxwaGEgPCAxLjBcbiAgICAgICAgICAmJiBlbGVtZW50Ll90ZXh0dXJlLmJhc2VUZXh0dXJlLnByZW11bHRpcGx5QWxwaGEpXG4gICAgICAgICAgICA/IHByZW11bHRpcGx5VGludChlbGVtZW50Ll90aW50UkdCLCBhbHBoYSlcbiAgICAgICAgICAgIDogZWxlbWVudC5fdGludFJHQiArIChhbHBoYSAqIDI1NSA8PCAyNCk7XG5cbiAgICAgICAgLy8gbGV0cyBub3Qgd29ycnkgYWJvdXQgdGludCEgZm9yIG5vdy4uXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGV4RGF0YS5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAge1xuICAgICAgICAgICAgZmxvYXQzMlZpZXdbYUluZGV4KytdID0gdmVydGV4RGF0YVtpXTtcbiAgICAgICAgICAgIGZsb2F0MzJWaWV3W2FJbmRleCsrXSA9IHZlcnRleERhdGFbaSArIDFdO1xuICAgICAgICAgICAgZmxvYXQzMlZpZXdbYUluZGV4KytdID0gdXZzW2ldO1xuICAgICAgICAgICAgZmxvYXQzMlZpZXdbYUluZGV4KytdID0gdXZzW2kgKyAxXTtcbiAgICAgICAgICAgIHVpbnQzMlZpZXdbYUluZGV4KytdID0gYXJnYjtcbiAgICAgICAgICAgIGZsb2F0MzJWaWV3W2FJbmRleCsrXSA9IHRleHR1cmVJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGluZGljaWVzLmxlbmd0aDsgaSQxKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIGluZGV4QnVmZmVyW2lJbmRleCsrXSA9IHBhY2tlZFZlcnRpY2VzICsgaW5kaWNpZXNbaSQxXTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gQWJzdHJhY3RCYXRjaFJlbmRlcmVyO1xufShPYmplY3RSZW5kZXJlcikpO1xuXG4vKipcbiAqIEhlbHBlciB0aGF0IGdlbmVyYXRlcyBiYXRjaGluZyBtdWx0aS10ZXh0dXJlIHNoYWRlci4gVXNlIGl0IHdpdGggeW91ciBuZXcgQmF0Y2hSZW5kZXJlclxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEJhdGNoU2hhZGVyR2VuZXJhdG9yID0gZnVuY3Rpb24gQmF0Y2hTaGFkZXJHZW5lcmF0b3IodmVydGV4U3JjLCBmcmFnVGVtcGxhdGUpXG57XG4gICAgLyoqXG4gICAgICogUmVmZXJlbmNlIHRvIHRoZSB2ZXJ0ZXggc2hhZGVyIHNvdXJjZS5cbiAgICAgKlxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRleFNyYyA9IHZlcnRleFNyYztcblxuICAgIC8qKlxuICAgICAqIFJlZmVyZW5jZSB0byB0aGUgZnJhZ2VtZW50IHNoYWRlciB0ZW1wbGF0ZS4gTXVzdCBjb250YWluIFwiJWNvdW50JVwiIGFuZCBcIiVmb3Jsb29wJVwiLlxuICAgICAqXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZnJhZ1RlbXBsYXRlID0gZnJhZ1RlbXBsYXRlO1xuXG4gICAgdGhpcy5wcm9ncmFtQ2FjaGUgPSB7fTtcbiAgICB0aGlzLmRlZmF1bHRHcm91cENhY2hlID0ge307XG5cbiAgICBpZiAoZnJhZ1RlbXBsYXRlLmluZGV4T2YoJyVjb3VudCUnKSA8IDApXG4gICAge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZyYWdtZW50IHRlbXBsYXRlIG11c3QgY29udGFpbiBcIiVjb3VudCVcIi4nKTtcbiAgICB9XG5cbiAgICBpZiAoZnJhZ1RlbXBsYXRlLmluZGV4T2YoJyVmb3Jsb29wJScpIDwgMClcbiAgICB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRnJhZ21lbnQgdGVtcGxhdGUgbXVzdCBjb250YWluIFwiJWZvcmxvb3AlXCIuJyk7XG4gICAgfVxufTtcblxuQmF0Y2hTaGFkZXJHZW5lcmF0b3IucHJvdG90eXBlLmdlbmVyYXRlU2hhZGVyID0gZnVuY3Rpb24gZ2VuZXJhdGVTaGFkZXIgKG1heFRleHR1cmVzKVxue1xuICAgIGlmICghdGhpcy5wcm9ncmFtQ2FjaGVbbWF4VGV4dHVyZXNdKVxuICAgIHtcbiAgICAgICAgdmFyIHNhbXBsZVZhbHVlcyA9IG5ldyBJbnQzMkFycmF5KG1heFRleHR1cmVzKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heFRleHR1cmVzOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNhbXBsZVZhbHVlc1tpXSA9IGk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlZmF1bHRHcm91cENhY2hlW21heFRleHR1cmVzXSA9IFVuaWZvcm1Hcm91cC5mcm9tKHsgdVNhbXBsZXJzOiBzYW1wbGVWYWx1ZXMgfSwgdHJ1ZSk7XG5cbiAgICAgICAgdmFyIGZyYWdtZW50U3JjID0gdGhpcy5mcmFnVGVtcGxhdGU7XG5cbiAgICAgICAgZnJhZ21lbnRTcmMgPSBmcmFnbWVudFNyYy5yZXBsYWNlKC8lY291bnQlL2dpLCAoXCJcIiArIG1heFRleHR1cmVzKSk7XG4gICAgICAgIGZyYWdtZW50U3JjID0gZnJhZ21lbnRTcmMucmVwbGFjZSgvJWZvcmxvb3AlL2dpLCB0aGlzLmdlbmVyYXRlU2FtcGxlU3JjKG1heFRleHR1cmVzKSk7XG5cbiAgICAgICAgdGhpcy5wcm9ncmFtQ2FjaGVbbWF4VGV4dHVyZXNdID0gbmV3IFByb2dyYW0odGhpcy52ZXJ0ZXhTcmMsIGZyYWdtZW50U3JjKTtcbiAgICB9XG5cbiAgICB2YXIgdW5pZm9ybXMgPSB7XG4gICAgICAgIHRpbnQ6IG5ldyBGbG9hdDMyQXJyYXkoWzEsIDEsIDEsIDFdKSxcbiAgICAgICAgdHJhbnNsYXRpb25NYXRyaXg6IG5ldyBNYXRyaXgoKSxcbiAgICAgICAgZGVmYXVsdDogdGhpcy5kZWZhdWx0R3JvdXBDYWNoZVttYXhUZXh0dXJlc10sXG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgU2hhZGVyKHRoaXMucHJvZ3JhbUNhY2hlW21heFRleHR1cmVzXSwgdW5pZm9ybXMpO1xufTtcblxuQmF0Y2hTaGFkZXJHZW5lcmF0b3IucHJvdG90eXBlLmdlbmVyYXRlU2FtcGxlU3JjID0gZnVuY3Rpb24gZ2VuZXJhdGVTYW1wbGVTcmMgKG1heFRleHR1cmVzKVxue1xuICAgIHZhciBzcmMgPSAnJztcblxuICAgIHNyYyArPSAnXFxuJztcbiAgICBzcmMgKz0gJ1xcbic7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heFRleHR1cmVzOyBpKyspXG4gICAge1xuICAgICAgICBpZiAoaSA+IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNyYyArPSAnXFxuZWxzZSAnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGkgPCBtYXhUZXh0dXJlcyAtIDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNyYyArPSBcImlmKHZUZXh0dXJlSWQgPCBcIiArIGkgKyBcIi41KVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgc3JjICs9ICdcXG57JztcbiAgICAgICAgc3JjICs9IFwiXFxuXFx0Y29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXJzW1wiICsgaSArIFwiXSwgdlRleHR1cmVDb29yZCk7XCI7XG4gICAgICAgIHNyYyArPSAnXFxufSc7XG4gICAgfVxuXG4gICAgc3JjICs9ICdcXG4nO1xuICAgIHNyYyArPSAnXFxuJztcblxuICAgIHJldHVybiBzcmM7XG59O1xuXG4vKipcbiAqIEdlb21ldHJ5IHVzZWQgdG8gYmF0Y2ggc3RhbmRhcmQgUElYSSBjb250ZW50IChlLmcuIE1lc2gsIFNwcml0ZSwgR3JhcGhpY3Mgb2JqZWN0cykuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG52YXIgQmF0Y2hHZW9tZXRyeSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEdlb21ldHJ5KSB7XG4gICAgZnVuY3Rpb24gQmF0Y2hHZW9tZXRyeShfc3RhdGljKVxuICAgIHtcbiAgICAgICAgaWYgKCBfc3RhdGljID09PSB2b2lkIDAgKSBfc3RhdGljID0gZmFsc2U7XG5cbiAgICAgICAgR2VvbWV0cnkuY2FsbCh0aGlzKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQnVmZmVyIHVzZWQgZm9yIHBvc2l0aW9uLCBjb2xvciwgdGV4dHVyZSBJRHNcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5CdWZmZXJ9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBCdWZmZXIobnVsbCwgX3N0YXRpYywgZmFsc2UpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRleCBidWZmZXIgZGF0YVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkJ1ZmZlcn1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faW5kZXhCdWZmZXIgPSBuZXcgQnVmZmVyKG51bGwsIF9zdGF0aWMsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKCdhVmVydGV4UG9zaXRpb24nLCB0aGlzLl9idWZmZXIsIDIsIGZhbHNlLCBUWVBFUy5GTE9BVClcbiAgICAgICAgICAgIC5hZGRBdHRyaWJ1dGUoJ2FUZXh0dXJlQ29vcmQnLCB0aGlzLl9idWZmZXIsIDIsIGZhbHNlLCBUWVBFUy5GTE9BVClcbiAgICAgICAgICAgIC5hZGRBdHRyaWJ1dGUoJ2FDb2xvcicsIHRoaXMuX2J1ZmZlciwgNCwgdHJ1ZSwgVFlQRVMuVU5TSUdORURfQllURSlcbiAgICAgICAgICAgIC5hZGRBdHRyaWJ1dGUoJ2FUZXh0dXJlSWQnLCB0aGlzLl9idWZmZXIsIDEsIHRydWUsIFRZUEVTLkZMT0FUKVxuICAgICAgICAgICAgLmFkZEluZGV4KHRoaXMuX2luZGV4QnVmZmVyKTtcbiAgICB9XG5cbiAgICBpZiAoIEdlb21ldHJ5ICkgQmF0Y2hHZW9tZXRyeS5fX3Byb3RvX18gPSBHZW9tZXRyeTtcbiAgICBCYXRjaEdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5ICYmIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuICAgIEJhdGNoR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQmF0Y2hHZW9tZXRyeTtcblxuICAgIHJldHVybiBCYXRjaEdlb21ldHJ5O1xufShHZW9tZXRyeSkpO1xuXG52YXIgZGVmYXVsdFZlcnRleCQyID0gXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuYXR0cmlidXRlIHZlYzIgYVZlcnRleFBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIGFUZXh0dXJlQ29vcmQ7XFxuYXR0cmlidXRlIHZlYzQgYUNvbG9yO1xcbmF0dHJpYnV0ZSBmbG9hdCBhVGV4dHVyZUlkO1xcblxcbnVuaWZvcm0gbWF0MyBwcm9qZWN0aW9uTWF0cml4O1xcbnVuaWZvcm0gbWF0MyB0cmFuc2xhdGlvbk1hdHJpeDtcXG51bmlmb3JtIHZlYzQgdGludDtcXG5cXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG52YXJ5aW5nIHZlYzQgdkNvbG9yO1xcbnZhcnlpbmcgZmxvYXQgdlRleHR1cmVJZDtcXG5cXG52b2lkIG1haW4odm9pZCl7XFxuICAgIGdsX1Bvc2l0aW9uID0gdmVjNCgocHJvamVjdGlvbk1hdHJpeCAqIHRyYW5zbGF0aW9uTWF0cml4ICogdmVjMyhhVmVydGV4UG9zaXRpb24sIDEuMCkpLnh5LCAwLjAsIDEuMCk7XFxuXFxuICAgIHZUZXh0dXJlQ29vcmQgPSBhVGV4dHVyZUNvb3JkO1xcbiAgICB2VGV4dHVyZUlkID0gYVRleHR1cmVJZDtcXG4gICAgdkNvbG9yID0gYUNvbG9yICogdGludDtcXG59XFxuXCI7XG5cbnZhciBkZWZhdWx0RnJhZ21lbnQkMiA9IFwidmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxudmFyeWluZyB2ZWM0IHZDb2xvcjtcXG52YXJ5aW5nIGZsb2F0IHZUZXh0dXJlSWQ7XFxudW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXJzWyVjb3VudCVdO1xcblxcbnZvaWQgbWFpbih2b2lkKXtcXG4gICAgdmVjNCBjb2xvcjtcXG4gICAgJWZvcmxvb3AlXFxuICAgIGdsX0ZyYWdDb2xvciA9IGNvbG9yICogdkNvbG9yO1xcbn1cXG5cIjtcblxuLyoqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKiBAaGlkZWNvbnN0cnVjdG9yXG4gKi9cbnZhciBCYXRjaFBsdWdpbkZhY3RvcnkgPSBmdW5jdGlvbiBCYXRjaFBsdWdpbkZhY3RvcnkgKCkge307XG5cbnZhciBzdGF0aWNBY2Nlc3NvcnMkMSA9IHsgZGVmYXVsdFZlcnRleFNyYzogeyBjb25maWd1cmFibGU6IHRydWUgfSxkZWZhdWx0RnJhZ21lbnRUZW1wbGF0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5CYXRjaFBsdWdpbkZhY3RvcnkuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlIChvcHRpb25zKVxue1xuICAgIHZhciByZWYgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgdmVydGV4OiBkZWZhdWx0VmVydGV4JDIsXG4gICAgICAgIGZyYWdtZW50OiBkZWZhdWx0RnJhZ21lbnQkMixcbiAgICAgICAgZ2VvbWV0cnlDbGFzczogQmF0Y2hHZW9tZXRyeSxcbiAgICAgICAgdmVydGV4U2l6ZTogNixcbiAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgdmFyIHZlcnRleCA9IHJlZi52ZXJ0ZXg7XG4gICAgICAgIHZhciBmcmFnbWVudCA9IHJlZi5mcmFnbWVudDtcbiAgICAgICAgdmFyIHZlcnRleFNpemUgPSByZWYudmVydGV4U2l6ZTtcbiAgICAgICAgdmFyIGdlb21ldHJ5Q2xhc3MgPSByZWYuZ2VvbWV0cnlDbGFzcztcblxuICAgIHJldHVybiAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChBYnN0cmFjdEJhdGNoUmVuZGVyZXIpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEJhdGNoUGx1Z2luKHJlbmRlcmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICBBYnN0cmFjdEJhdGNoUmVuZGVyZXIuY2FsbCh0aGlzLCByZW5kZXJlcik7XG5cbiAgICAgICAgICAgIHRoaXMuc2hhZGVyR2VuZXJhdG9yID0gbmV3IEJhdGNoU2hhZGVyR2VuZXJhdG9yKHZlcnRleCwgZnJhZ21lbnQpO1xuICAgICAgICAgICAgdGhpcy5nZW9tZXRyeUNsYXNzID0gZ2VvbWV0cnlDbGFzcztcbiAgICAgICAgICAgIHRoaXMudmVydGV4U2l6ZSA9IHZlcnRleFNpemU7XG4gICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCBBYnN0cmFjdEJhdGNoUmVuZGVyZXIgKSBCYXRjaFBsdWdpbi5fX3Byb3RvX18gPSBBYnN0cmFjdEJhdGNoUmVuZGVyZXI7XG4gICAgICAgICAgICBCYXRjaFBsdWdpbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBBYnN0cmFjdEJhdGNoUmVuZGVyZXIgJiYgQWJzdHJhY3RCYXRjaFJlbmRlcmVyLnByb3RvdHlwZSApO1xuICAgICAgICAgICAgQmF0Y2hQbHVnaW4ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQmF0Y2hQbHVnaW47XG5cbiAgICAgICAgICAgIHJldHVybiBCYXRjaFBsdWdpbjtcbiAgICAgICAgfShBYnN0cmFjdEJhdGNoUmVuZGVyZXIpKTtcbn07XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgdmVydGV4IHNoYWRlciBzb3VyY2VcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGNvbnN0YW50XG4gKi9cbnN0YXRpY0FjY2Vzc29ycyQxLmRlZmF1bHRWZXJ0ZXhTcmMuZ2V0ID0gZnVuY3Rpb24gKClcbntcbiAgICByZXR1cm4gZGVmYXVsdFZlcnRleCQyO1xufTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBmcmFnbWVudCBzaGFkZXIgc291cmNlXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdGFudFxuICovXG5zdGF0aWNBY2Nlc3NvcnMkMS5kZWZhdWx0RnJhZ21lbnRUZW1wbGF0ZS5nZXQgPSBmdW5jdGlvbiAoKVxue1xuICAgIHJldHVybiBkZWZhdWx0RnJhZ21lbnQkMjtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCYXRjaFBsdWdpbkZhY3RvcnksIHN0YXRpY0FjY2Vzc29ycyQxICk7XG5cbi8vIFNldHVwIHRoZSBkZWZhdWx0IEJhdGNoUmVuZGVyZXIgcGx1Z2luLCB0aGlzIGlzIHdoYXRcbi8vIHdlJ2xsIGFjdHVhbGx5IGV4cG9ydCBhdCB0aGUgcm9vdCBsZXZlbFxudmFyIEJhdGNoUmVuZGVyZXIgPSBCYXRjaFBsdWdpbkZhY3RvcnkuY3JlYXRlKCk7XG5cbmV4cG9ydCB7IEFic3RyYWN0QmF0Y2hSZW5kZXJlciwgQWJzdHJhY3RSZW5kZXJlciwgQXR0cmlidXRlLCBCYXNlUmVuZGVyVGV4dHVyZSwgQmFzZVRleHR1cmUsIEJhdGNoRHJhd0NhbGwsIEJhdGNoR2VvbWV0cnksIEJhdGNoUGx1Z2luRmFjdG9yeSwgQmF0Y2hSZW5kZXJlciwgQmF0Y2hTaGFkZXJHZW5lcmF0b3IsIEJ1ZmZlciwgQ3ViZVRleHR1cmUsIEZpbHRlciwgRnJhbWVidWZmZXIsIEdMUHJvZ3JhbSwgQmFzZVRleHR1cmUgYXMgR0xUZXh0dXJlLCBHZW9tZXRyeSwgT2JqZWN0UmVuZGVyZXIsIFByb2dyYW0sIFF1YWQsIFF1YWRVdiwgUmVuZGVyVGV4dHVyZSwgUmVuZGVyVGV4dHVyZVBvb2wsIFJlbmRlcmVyLCBTaGFkZXIsIFNwcml0ZU1hc2tGaWx0ZXIsIFN0YXRlLCBTeXN0ZW0sIFRleHR1cmUsIFRleHR1cmVNYXRyaXgsIFRleHR1cmVVdnMsIFVuaWZvcm1Hcm91cCwgVmlld2FibGVCdWZmZXIsIGF1dG9EZXRlY3RSZW5kZXJlciwgY2hlY2tNYXhJZlN0YXRlbWVudHNJblNoYWRlciwgZGVmYXVsdEZpbHRlciBhcyBkZWZhdWx0RmlsdGVyVmVydGV4LCBfZGVmYXVsdCBhcyBkZWZhdWx0VmVydGV4LCBpbmRleCBhcyByZXNvdXJjZXMsIHN5c3RlbXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvcmUuZXMuanMubWFwXG4iLCIvKiFcbiAqIEBwaXhpL2ZpbHRlci1waXhlbGF0ZSAtIHYzLjAuM1xuICogQ29tcGlsZWQgV2VkLCAyOSBNYXkgMjAxOSAwMzowNDowNSBVVENcbiAqXG4gKiBAcGl4aS9maWx0ZXItcGl4ZWxhdGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovXG5pbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICdAcGl4aS9jb3JlJztcblxudmFyIHZlcnRleCA9IFwiYXR0cmlidXRlIHZlYzIgYVZlcnRleFBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIGFUZXh0dXJlQ29vcmQ7XFxuXFxudW5pZm9ybSBtYXQzIHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxudm9pZCBtYWluKHZvaWQpXFxue1xcbiAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoKHByb2plY3Rpb25NYXRyaXggKiB2ZWMzKGFWZXJ0ZXhQb3NpdGlvbiwgMS4wKSkueHksIDAuMCwgMS4wKTtcXG4gICAgdlRleHR1cmVDb29yZCA9IGFUZXh0dXJlQ29vcmQ7XFxufVwiO1xuXG52YXIgZnJhZ21lbnQgPSBcInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcblxcbnZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xcblxcbnVuaWZvcm0gdmVjMiBzaXplO1xcbnVuaWZvcm0gc2FtcGxlcjJEIHVTYW1wbGVyO1xcblxcbnVuaWZvcm0gdmVjNCBmaWx0ZXJBcmVhO1xcblxcbnZlYzIgbWFwQ29vcmQoIHZlYzIgY29vcmQgKVxcbntcXG4gICAgY29vcmQgKj0gZmlsdGVyQXJlYS54eTtcXG4gICAgY29vcmQgKz0gZmlsdGVyQXJlYS56dztcXG5cXG4gICAgcmV0dXJuIGNvb3JkO1xcbn1cXG5cXG52ZWMyIHVubWFwQ29vcmQoIHZlYzIgY29vcmQgKVxcbntcXG4gICAgY29vcmQgLT0gZmlsdGVyQXJlYS56dztcXG4gICAgY29vcmQgLz0gZmlsdGVyQXJlYS54eTtcXG5cXG4gICAgcmV0dXJuIGNvb3JkO1xcbn1cXG5cXG52ZWMyIHBpeGVsYXRlKHZlYzIgY29vcmQsIHZlYzIgc2l6ZSlcXG57XFxuXFx0cmV0dXJuIGZsb29yKCBjb29yZCAvIHNpemUgKSAqIHNpemU7XFxufVxcblxcbnZvaWQgbWFpbih2b2lkKVxcbntcXG4gICAgdmVjMiBjb29yZCA9IG1hcENvb3JkKHZUZXh0dXJlQ29vcmQpO1xcblxcbiAgICBjb29yZCA9IHBpeGVsYXRlKGNvb3JkLCBzaXplKTtcXG5cXG4gICAgY29vcmQgPSB1bm1hcENvb3JkKGNvb3JkKTtcXG5cXG4gICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyLCBjb29yZCk7XFxufVxcblwiO1xuXG4vKipcbiAqIFRoaXMgZmlsdGVyIGFwcGxpZXMgYSBwaXhlbGF0ZSBlZmZlY3QgbWFraW5nIGRpc3BsYXkgb2JqZWN0cyBhcHBlYXIgJ2Jsb2NreScuPGJyPlxuICogIVtvcmlnaW5hbF0oLi4vdG9vbHMvc2NyZWVuc2hvdHMvZGlzdC9vcmlnaW5hbC5wbmcpIVtmaWx0ZXJdKC4uL3Rvb2xzL3NjcmVlbnNob3RzL2Rpc3QvcGl4ZWxhdGUucG5nKVxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5GaWx0ZXJcbiAqIEBtZW1iZXJvZiBQSVhJLmZpbHRlcnNcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0BwaXhpL2ZpbHRlci1waXhlbGF0ZXxAcGl4aS9maWx0ZXItcGl4ZWxhdGV9XG4gKiBAc2VlIHtAbGluayBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9waXhpLWZpbHRlcnN8cGl4aS1maWx0ZXJzfVxuICogQHBhcmFtIHtQSVhJLlBvaW50fEFycmF5PG51bWJlcj58bnVtYmVyfSBbc2l6ZT0xMF0gRWl0aGVyIHRoZSB3aWR0aC9oZWlnaHQgb2YgdGhlIHNpemUgb2YgdGhlIHBpeGVscywgb3Igc3F1YXJlIHNpemVcbiAqL1xudmFyIFBpeGVsYXRlRmlsdGVyID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoRmlsdGVyKSB7XG4gICAgZnVuY3Rpb24gUGl4ZWxhdGVGaWx0ZXIoc2l6ZSkge1xuICAgICAgICBpZiAoIHNpemUgPT09IHZvaWQgMCApIHNpemUgPSAxMDtcblxuICAgICAgICBGaWx0ZXIuY2FsbCh0aGlzLCB2ZXJ0ZXgsIGZyYWdtZW50KTtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB9XG5cbiAgICBpZiAoIEZpbHRlciApIFBpeGVsYXRlRmlsdGVyLl9fcHJvdG9fXyA9IEZpbHRlcjtcbiAgICBQaXhlbGF0ZUZpbHRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBGaWx0ZXIgJiYgRmlsdGVyLnByb3RvdHlwZSApO1xuICAgIFBpeGVsYXRlRmlsdGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBpeGVsYXRlRmlsdGVyO1xuXG4gICAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgc2l6ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBhIHBvaW50IHRoYXQgZGVzY3JpYmVzIHRoZSBzaXplIG9mIHRoZSBibG9ja3MuXG4gICAgICogeCBpcyB0aGUgd2lkdGggb2YgdGhlIGJsb2NrIGFuZCB5IGlzIHRoZSBoZWlnaHQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtQSVhJLlBvaW50fEFycmF5PG51bWJlcj58bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDEwXG4gICAgICovXG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnNpemUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5zaXplO1xuICAgIH07XG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLnNpemUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5pZm9ybXMuc2l6ZSA9IHZhbHVlO1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggUGl4ZWxhdGVGaWx0ZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICAgIHJldHVybiBQaXhlbGF0ZUZpbHRlcjtcbn0oRmlsdGVyKSk7XG5cbmV4cG9ydCB7IFBpeGVsYXRlRmlsdGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXItcGl4ZWxhdGUuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IE1hdHRlciBmcm9tICdtYXR0ZXItanMvYnVpbGQvbWF0dGVyLm1pbi5qcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgVGlsZUNvbGxpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHgseSxyLGxlZnRMZWRnZSwgcmlnaHRMZWRnZSwgaGFzV2Fsa0JveCl7XHJcblxyXG4gICAgICAgIHRoaXMueCA9IHggKiByO1xyXG4gICAgICAgIHRoaXMueSA9IHkgKiByO1xyXG4gICAgICAgIHRoaXMudyA9IHI7XHJcbiAgICAgICAgdGhpcy5oID0gcjtcclxuXHJcbiAgICAgICAgLy8gcGh5c2ljcyBjb2xsaWRlclxyXG4gICAgICAgIHRoaXMuQ29sbGlkZXIgPSBuZXcgTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUodGhpcy54LHRoaXMueSxyLHIseyBpc1N0YXRpYyA6IHRydWUgfSk7XHJcbiAgICAgICAgdGhpcy5lZGdlQm94ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmVkZ2VCb3hXaWR0aCA9IDE7XHJcbiAgICAgICAgdGhpcy5lZGdlQm94SGVpZ2h0ID0gMjtcclxuICAgICAgICBjb25zdCBlZGdlQm94T2Zmc2V0ID0gMjA7XHJcbiAgICAgICAgY29uc3QgeG9mZnNldCA9IC0xO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMud2Fsa0JveEhlaWdodCA9IDIwO1xyXG5cclxuICAgICAgICBpZiAoIHJpZ2h0TGVkZ2UgKXtcclxuXHJcbiAgICAgICAgICAgIGxldCB0cmlnZ2VyY29sbGlkZXIgPSBuZXcgTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUoIHRoaXMueCArIHIvMiAtIHRoaXMuZWRnZUJveFdpZHRoLzIgLCBcclxuICAgICAgICAgICAgICAgIHRoaXMueSAtIHIvMiArIGVkZ2VCb3hPZmZzZXQsIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGdlQm94V2lkdGgsXHJcbiAgICAgICAgICAgICAgICB0aGlzLndhbGtCb3hIZWlnaHQsIFxyXG4gICAgICAgICAgICAgICAgIHsgXHJcbiAgICAgICAgICAgICAgICAgICBpc1N0YXRpYyA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICBpc1NlbnNvciA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgdHJpZ2dlcmNvbGxpZGVyLmlzRWRnZUJveCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgdHJpZ2dlcmNvbGxpZGVyLmlzUmlnaHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgdGhpcy5lZGdlQm94ZXMucHVzaCh0cmlnZ2VyY29sbGlkZXIpO1xyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggbGVmdExlZGdlICl7XHJcbiAgICAgICAgICAgIGxldCB0cmlnZ2VyY29sbGlkZXIgPSBuZXcgTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUoIHRoaXMueCAtIHIvMiArIHRoaXMuZWRnZUJveFdpZHRoLzIgLFxyXG4gICAgICAgICAgICAgICAgdGhpcy55IC0gci8yICsgZWRnZUJveE9mZnNldCwgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkZ2VCb3hXaWR0aCwgXHJcbiAgICAgICAgICAgICAgICB0aGlzLndhbGtCb3hIZWlnaHQsIFxyXG4gICAgICAgICAgICAgICAgIHsgXHJcbiAgICAgICAgICAgICAgICAgICBpc1N0YXRpYyA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICBpc1NlbnNvciA6IHRydWUgXHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgdHJpZ2dlcmNvbGxpZGVyLmlzRWRnZUJveCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgdHJpZ2dlcmNvbGxpZGVyLmlzUmlnaHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICB0aGlzLmVkZ2VCb3hlcy5wdXNoKHRyaWdnZXJjb2xsaWRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggaGFzV2Fsa0JveCApe1xyXG4gICAgICAgICAgICB0aGlzLndhbGtCb3ggPSBuZXcgTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUodGhpcy54LCB0aGlzLnkgLSAoci8yKSAtICh0aGlzLndhbGtCb3hIZWlnaHQvMiksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciwgdGhpcy53YWxrQm94SGVpZ2h0LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGlzU3RhdGljIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NlbnNvciA6IHRydWUgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLndhbGtCb3guaXNFZGdlQm94ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gZHJhdyByZWN0IGdpdmVuIGlucHV0IFBJWEkgR3JhcGhpY3Mgb2JqZWN0XHJcbiAgICBkcmF3UmVjdChncmFwaGljcywgZGVidWdHcmFwaGljcykge1xyXG4gICAgICAgIC8vIGRyYXcgY29sbGlzaW9uIGJveCByZWN0YW5nbGVcclxuICAgICAgICBncmFwaGljcy5iZWdpbkZpbGwoMHg2MDMyYTgpO1xyXG4gICAgICAgIC8vZ3JhcGhpY3MuZHJhd1JlY3QoIHRoaXMueCAtICh0aGlzLncvMikgLCB0aGlzLnkgLSAodGhpcy5oLzIpIC0xLCB0aGlzLncgLCB0aGlzLmggKTtcclxuICAgICAgICBncmFwaGljcy5kcmF3UmVjdCggdGhpcy5Db2xsaWRlci52ZXJ0aWNlc1swXS54LCB0aGlzLkNvbGxpZGVyLnZlcnRpY2VzWzBdLnksIHRoaXMudyAsIHRoaXMuaCApO1xyXG4gICAgICAgIGdyYXBoaWNzLmVuZEZpbGwoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBkcmF3IHNlbnNvciB3YWxrQm94IGZvciBkZWJ1Z1xyXG4gICAgICAgIGlmICggdGhpcy53YWxrQm94ICl7XHJcbiAgICAgICAgICAgIGRlYnVnR3JhcGhpY3MuYmVnaW5GaWxsKDB4MzJhODQyLCAwLjUpO1xyXG4gICAgICAgICAgICBkZWJ1Z0dyYXBoaWNzLmRyYXdSZWN0KHRoaXMueCAtICh0aGlzLncvMikgLCB0aGlzLndhbGtCb3gucG9zaXRpb24ueSAtICh0aGlzLndhbGtCb3hIZWlnaHQvMiksIHRoaXMudywgdGhpcy53YWxrQm94SGVpZ2h0KTtcclxuICAgICAgICAgICAgZGVidWdHcmFwaGljcy5lbmRGaWxsKCk7XHJcbiAgICAgICAgfSBcclxuXHJcblxyXG4gICAgICAgIC8vIGRyYXcgc2Vuc29yIGVkZ2Vib3hlc1xyXG4gICAgICAgIGlmICh0aGlzLmVkZ2VCb3hlcy5sZW5ndGggIT0gMCApe1xyXG4gICAgICAgICAgICBmb3IgKCBsZXQgYm94IG9mIHRoaXMuZWRnZUJveGVzKSB7XHJcbiAgICAgICAgICAgICAgICBkZWJ1Z0dyYXBoaWNzLmJlZ2luRmlsbCgweGZjMDMwMywgMC44KTtcclxuICAgICAgICAgICAgICAgIGRlYnVnR3JhcGhpY3MuZHJhd1JlY3QoIGJveC5wb3NpdGlvbi54IC0gKHRoaXMuZWRnZUJveFdpZHRoLzIpICwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LnBvc2l0aW9uLnkgLSAodGhpcy5lZGdlQm94V2lkdGgvMiksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZUJveFdpZHRoLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVkZ2VCb3hIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgZGVidWdHcmFwaGljcy5lbmRGaWxsKCk7XHJcbiAgICAgICAgICAgIH0gIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgVGlsZUJsb2Ige1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3Rvcih4LHksdyxoLCB0aWxlc2V0KXtcclxuICAgICAgICAgICAgdGhpcy50aWxlcyA9IFtdO1xyXG4gICAgICAgICAgICBsZXQgZWRnZUxlbmd0aCA9IDEwMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoLCBpKys7ICl7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0wOyBqIDwgdywgaisrOyApe1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggbmV3IFRpbGUgdG8gdGhlIHN0YWNrIFxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG59IiwiLypcclxuICAgIFNldHMgb2YgQ29sbGlkZXJzIGZvciBwaHlzaWNzIGNvbGxpc2lvbnMgYW5kIFBsYXllciBhY3Rpb24gdHJpZ2dlcnNcclxuKi9cclxuaW1wb3J0IE1hdHRlciBmcm9tICdtYXR0ZXItanMvYnVpbGQvbWF0dGVyLm1pbi5qcyc7XHJcbmltcG9ydCB7Q29ybmVyfSBmcm9tICcuLi9saWdodGluZy9nZW9tZXRyeS5qcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQm91bmRhcnkgIHtcclxuICAgIGNvbnN0cnVjdG9yKHgxLHkxLHgyLHkyLCBpc0VkZ2UgPSBmYWxzZSl7XHJcbiAgICAgICAgdGhpcy5hID0gbmV3IE1hdHRlci5WZWN0b3IuY3JlYXRlKHgxLHkxKTtcclxuICAgICAgICB0aGlzLmIgPSBuZXcgTWF0dGVyLlZlY3Rvci5jcmVhdGUoeDIseTIpO1xyXG4gICAgICAgIHRoaXMuaXNFZGdlID0gaXNFZGdlO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlY3RTZWdtZW50c3tcclxuICAgIGNvbnN0cnVjdG9yKHgseSx3LGgpe1xyXG4gICAgICAgIHZhciBBID0gbmV3IE1hdHRlci5WZWN0b3IuY3JlYXRlKHggLSAody8yKSwgeSAtIChoLzIpKTtcclxuICAgICAgICB2YXIgQiA9IG5ldyBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh4ICsgKHcvMiksIHkgLSAoaC8yKSk7XHJcbiAgICAgICAgdmFyIEMgPSBuZXcgTWF0dGVyLlZlY3Rvci5jcmVhdGUoeCAtICh3LzIpLCB5ICsgKGgvMikpO1xyXG4gICAgICAgIHZhciBEID0gbmV3IE1hdHRlci5WZWN0b3IuY3JlYXRlKHggKyAody8yKSwgeSArIChoLzIpKTtcclxuICAgIFxyXG4gICAgICAgIHRoaXMuYm91bmRzID0gW25ldyBCb3VuZGFyeShBLngsQS55LCBCLngsQi55KSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJvdW5kYXJ5KEEueCxBLnksIEMueCxDLnkpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICBuZXcgQm91bmRhcnkoQy54LEMueSwgRC54LEQueSksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIG5ldyBCb3VuZGFyeShCLngsQi55LCBELngsRC55KV1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUZXJyYWlue1xyXG4gICAgY29uc3RydWN0b3IoeCx5LHcsaCl7XHJcbiAgICAgICAgICAgIC8vIGNvbGxpc2lvbiByZWN0YW5nbGUgXHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHRoaXMudyA9IHc7XHJcbiAgICAgICAgdGhpcy5oID0gaDtcclxuXHJcbiAgICAgICAgdGhpcy5BID0gTWF0dGVyLlZlY3Rvci5jcmVhdGUoeCAtICh3LzIpLCB5IC0gKGgvMikpO1xyXG4gICAgICAgIHRoaXMuQiA9IE1hdHRlci5WZWN0b3IuY3JlYXRlKHggKyAody8yKSwgeSAtIChoLzIpKTtcclxuICAgICAgICB0aGlzLkMgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh4IC0gKHcvMiksIHkgKyAoaC8yKSk7XHJcbiAgICAgICAgdGhpcy5EID0gTWF0dGVyLlZlY3Rvci5jcmVhdGUoeCArICh3LzIpLCB5ICsgKGgvMikpO1xyXG5cclxuICAgICAgICB0aGlzLmJvdW5kcyA9IFsobmV3IEJvdW5kYXJ5KHRoaXMuQS54LCB0aGlzLkEueSwgdGhpcy5CLngsIHRoaXMuQi55KSksIFxyXG4gICAgICAgICAgICAgICAgICAgIChuZXcgQm91bmRhcnkodGhpcy5BLngsIHRoaXMuQS55LCB0aGlzLkMueCwgdGhpcy5DLnkpKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgKG5ldyBCb3VuZGFyeSh0aGlzLkMueCwgdGhpcy5DLnksIHRoaXMuRC54LCB0aGlzLkQueSkpLCBcclxuICAgICAgICAgICAgICAgICAgICAobmV3IEJvdW5kYXJ5KHRoaXMuQi54LCB0aGlzLkIueSwgdGhpcy5ELngsIHRoaXMuRC55KSldO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEZvciBlZGdlIHJheWNhc3RpbmcgZ2VvbWV0cnlcclxuICAgICAgICB0aGlzLmNvcm5lcnMgPSBbbmV3IENvcm5lcih0aGlzLkEsIHRoaXMuQiwgdGhpcy5DKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvcm5lcih0aGlzLkIsIHRoaXMuQSwgdGhpcy5EKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvcm5lcih0aGlzLkMsIHRoaXMuQSwgdGhpcy5EKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvcm5lcih0aGlzLkQsIHRoaXMuQiwgdGhpcy5DKV07XHJcblxyXG4gICAgICAgIC8vdGhpcy5zZWdtZW50cyA9IG5ldyBSZWN0U2VnbWVudHMoeCx5LHcsaCk7XHJcblxyXG4gICAgICAgIC8vIHBoeXNpY3MgY29sbGlkZXJcclxuICAgICAgICB0aGlzLkNvbGxpZGVyID0gbmV3IE1hdHRlci5Cb2RpZXMucmVjdGFuZ2xlKHgseSx3LGgseyBpc1N0YXRpYyA6IHRydWUgfSk7XHJcbiAgICAgICAgdGhpcy53YWxrQm94SGVpZ2h0ID0gMjA7XHJcblxyXG4gICAgICAgIC8vIGFjdGlvbiB0cmlnZ2VyIGNvbGxpZGVyc1xyXG4gICAgICAgIHRoaXMud2Fsa0JveCA9IG5ldyBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZSh4LCB5IC0gKGgvMikgLSAodGhpcy53YWxrQm94SGVpZ2h0LzIpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdywgdGhpcy53YWxrQm94SGVpZ2h0LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaXNTdGF0aWMgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NlbnNvciA6IHRydWUgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53YWxrQm94LmlzRWRnZUJveCA9IGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZWRnZUJveFdpZHRoID0gMTA7XHJcbiAgICAgICAgdGhpcy5lZGdlQm94SGVpZ2h0ID0gMTA7XHJcbiAgICAgICAgY29uc3QgZWRnZUJveE9mZnNldCA9IDIwO1xyXG4gICAgICAgIHRoaXMuZWRnZUJveGVzID0gW25ldyBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZSggeCArIHcvMiArIHRoaXMuZWRnZUJveFdpZHRoLzIsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSAtIGgvMiArIGVkZ2VCb3hPZmZzZXQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGdlQm94V2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndhbGtCb3hIZWlnaHQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1N0YXRpYyA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NlbnNvciA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1hdHRlci5Cb2RpZXMucmVjdGFuZ2xlKCB4IC0gdy8yIC0gdGhpcy5lZGdlQm94V2lkdGgvMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgLSBoLzIgKyBlZGdlQm94T2Zmc2V0LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZUJveFdpZHRoLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2Fsa0JveEhlaWdodCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU3RhdGljIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2Vuc29yIDogdHJ1ZSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMuZWRnZUJveGVzWzBdLmlzRWRnZUJveCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5lZGdlQm94ZXNbMV0uaXNFZGdlQm94ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmVkZ2VCb3hlc1swXS5pc1JpZ2h0ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmVkZ2VCb3hlc1sxXS5pc1JpZ2h0ID0gZmFsc2VcclxuXHJcblxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgIC8vIGRyYXcgcmVjdCBnaXZlbiBpbnB1dCBQSVhJIEdyYXBoaWNzIG9iamVjdFxyXG4gICAgZHJhd1JlY3QoZ3JhcGhpY3MpIHtcclxuICAgICAgICAvLyBkcmF3IGNvbGxpc2lvbiBib3ggcmVjdGFuZ2xlXHJcbiAgICAgICAgZ3JhcGhpY3MuYmVnaW5GaWxsKDB4NjAzMmE4KTtcclxuICAgICAgICBncmFwaGljcy5kcmF3UmVjdCggdGhpcy54IC0gKHRoaXMudy8yKSAsIHRoaXMueSAtICh0aGlzLmgvMikgLTEsIHRoaXMudyAsIHRoaXMuaCApO1xyXG4gICAgICAgIGdyYXBoaWNzLmVuZEZpbGwoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBkcmF3IHNlbnNvciB3YWxrQm94IGZvciBkZWJ1Z1xyXG4gICAgICAgIGdyYXBoaWNzLmJlZ2luRmlsbCgweDMyYTg0MiwgMC41KTtcclxuICAgICAgICBncmFwaGljcy5kcmF3UmVjdCh0aGlzLnggLSAodGhpcy53LzIpICwgdGhpcy53YWxrQm94LnBvc2l0aW9uLnkgLSAodGhpcy53YWxrQm94SGVpZ2h0LzIpLCB0aGlzLncsIHRoaXMud2Fsa0JveEhlaWdodCk7XHJcbiAgICAgICAgZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG5cclxuICAgICAgICAvLyBkcmF3IHNlbnNvciBlZGdlYm94ZXNcclxuICAgICAgICBmb3IgKCBsZXQgYm94IG9mIHRoaXMuZWRnZUJveGVzKSB7XHJcbiAgICAgICAgICAgIGdyYXBoaWNzLmJlZ2luRmlsbCgweGZjMDMwMywgMC44KTtcclxuICAgICAgICAgICAgZ3JhcGhpY3MuZHJhd1JlY3QoIGJveC5wb3NpdGlvbi54IC0gKHRoaXMuZWRnZUJveFdpZHRoLzIpICwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gucG9zaXRpb24ueSAtICh0aGlzLmVkZ2VCb3hXaWR0aC8yKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVkZ2VCb3hXaWR0aCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVkZ2VCb3hIZWlnaHQpO1xyXG4gICAgICAgICAgICBncmFwaGljcy5lbmRGaWxsKCk7XHJcbiAgICAgICAgfSAgICBcclxuICAgIH1cclxufVxyXG5cclxuLy8gZHJhdyB3YWxrQm94IGZvciBkZWJ1Z1xyXG5mdW5jdGlvbiBkcmF3Q29tcG9uZW50KGdyYXBoaWNzLCBjb2xvciwgcmVjdGFuZ2xlICkgeyBcclxuICAgIGdyYXBoaWNzLmJlZ2luRmlsbChjb2xvcik7XHJcbiAgICBncmFwaGljcy5kcmF3UmVjdCggcmVjdGFuZ2xlLnBvc2l0aW9uLnggLSAocmVjdGFuZ2xlLndpZHRoLzIpICwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgcmVjdGFuZ2xlLnkgLSAocmVjdGFuZ2xlLmhlaWdodC8yKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgcmVjdGFuZ2xlLndpZHRoLCBcclxuICAgICAgICAgICAgICAgICAgICAgICByZWN0YW5nbGUuaGVpZ2h0KTtcclxuICAgIGdyYXBoaWNzLmVuZEZpbGwoKTtcclxufVxyXG5leHBvcnQge2RyYXdDb21wb25lbnR9IiwiaW1wb3J0IE1hdHRlciBmcm9tICdtYXR0ZXItanMvYnVpbGQvbWF0dGVyLm1pbi5qcyc7XHJcbmV4cG9ydCBjbGFzcyBSYXkge1xyXG4gICAgY29uc3RydWN0b3IocG9zLCBhbmdsZSwgZW5kcG9pbnQpIHtcclxuICAgICAgICB0aGlzLnBvcyA9IHBvcztcclxuICAgICAgICAvL3RoaXMuZGlyID0gcDUuVmVjdG9yLmZyb21BbmdsZShhbmdsZSk7XHJcbiAgICAgICAgdGhpcy5kaXIgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSgxLDApO1xyXG4gICAgICAgIHRoaXMuZGlyID0gTWF0dGVyLlZlY3Rvci5yb3RhdGVBYm91dCh0aGlzLmRpciwgYW5nbGUsIE1hdHRlci5WZWN0b3IuY3JlYXRlKDAsMCkpO1xyXG5cclxuICAgICAgICB0aGlzLmFuZ2xlID0gYW5nbGU7XHJcblxyXG4gICAgICAgIHRoaXMuZW5kcG9pbnQgPSBlbmRwb2ludDtcclxuICAgICAgICB0aGlzLmNsb3Nlc3RQb2ludCA9IGVuZHBvaW50O1xyXG4gICAgfVxyXG5cclxuICAgIHNldERpcihkaXJWZWN0b3IpIHtcclxuICAgICAgICB0aGlzLmRpciA9IGRpclZlY3RvcjtcclxuICAgICAgICB0aGlzLmFuZ2xlID0gTWF0dGVyLlZlY3Rvci5hbmdsZSh0aGlzLmRpciwgTWF0dGVyLlZlY3Rvci5jcmVhdGUoMCwwKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGxvb2tBdCh4LHkpIHtcclxuICAgICAgICB0aGlzLmRpci54ID0geCAtIHRoaXMucG9zLng7XHJcbiAgICAgICAgdGhpcy5kaXIueSA9IHkgLSB0aGlzLnBvcy55O1xyXG4gICAgICAgIHRoaXMuZGlyID0gTWF0dGVyLlZlY3Rvci5ub3JtYWxpc2UodGhpcy5kaXIpXHJcbiAgICB9XHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICBzdHJva2UoMTI3KTtcclxuICAgICAgICBwdXNoKCk7XHJcbiAgICAgICAgdHJhbnNsYXRlKHRoaXMucG9zLngsIHRoaXMucG9zLnkpO1xyXG4gICAgICAgIGxpbmUoMCwgMCwgdGhpcy5kaXIueCAqIDEwLCB0aGlzLmRpci55ICogMTApO1xyXG4gICAgICAgIHBvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhc3Qod2FsbCkge1xyXG4gICAgICAgIGNvbnN0IHgxID0gd2FsbC5hLngsXHJcbiAgICAgICAgICAgICAgeTEgPSB3YWxsLmEueSwgIFxyXG4gICAgICAgICAgICAgIHgyID0gd2FsbC5iLngsICBcclxuICAgICAgICAgICAgICB5MiA9IHdhbGwuYi55LCAgXHJcblxyXG4gICAgICAgICAgICAgIHgzID0gdGhpcy5wb3MueCxcclxuICAgICAgICAgICAgICB5MyA9IHRoaXMucG9zLnksXHJcbiAgICAgICAgICAgICAgeDQgPSB0aGlzLnBvcy54ICsgdGhpcy5kaXIueCxcclxuICAgICAgICAgICAgICB5NCA9IHRoaXMucG9zLnkgKyB0aGlzLmRpci55O1xyXG5cclxuICAgICAgICBjb25zdCBkZW4gPSAoeDEgLSB4MikgKiAoeTMgLSB5NCkgLSAoeTEgLSB5MikgKiAoeDMteDQpO1xyXG4gICAgICAgIGlmICggZGVuID09IDAgKSBcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCB0ID0gKCh4MSAtIHgzKSAqICh5MyAtIHk0KSAtICh5MSAtIHkzKSAqICh4MyAtIHg0KSkgLyBkZW47XHJcbiAgICAgICAgY29uc3QgdSA9IC0oKHgxIC0geDIpICogKHkxIC0geTMpIC0gKHkxIC0geTIpICogKHgxIC0geDMpKSAvIGRlbjtcclxuXHJcbiAgICAgICAgaWYgKCB0ID4gMCAmJiB0IDwgMSAmJiB1ID4gMCApIHtcclxuICAgICAgICAgICAgY29uc3QgcHQgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICBwdC54ID0geDEgKyB0ICogKCB4MiAtIHgxKTtcclxuICAgICAgICAgICAgcHQueSA9IHkxICsgdCAqICggeTIgLSB5MSk7XHJcbiAgICAgICAgICAgIHJldHVybiBwdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07IiwiaW1wb3J0IE1hdHRlciBmcm9tICdtYXR0ZXItanMvYnVpbGQvbWF0dGVyLm1pbi5qcyc7XHJcbmltcG9ydCB7UmF5fSBmcm9tIFwiLi9yYXkuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBSYXlTb3VyY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHgsIHksIHNlZ21lbnRzLCBlbmRwb2ludHMsIHNoYWRlclByb2dyYW0pe1xyXG4gICAgICAgIHRoaXMucG9zID0gTWF0dGVyLlZlY3Rvci5jcmVhdGUoeCwgeSk7ICAvLyByYXkgc291cmNlIHBvaW50XHJcbiAgICAgICAgdGhpcy5yYXlzID0gW107IC8vIGFsbCB0aGUgcmF5c1xyXG4gICAgICAgIHRoaXMuY29ybmVyUmF5cyA9IFtdOyAvLyBhdXhpbGFyeSByYXlzXHJcbiAgICAgICAgdGhpcy5oYW5nUmF5ID0gbmV3IFJheSh0aGlzLnBvcywwLE1hdHRlci5WZWN0b3IuY3JlYXRlKDAsMCkpOyAvLyBmb3IgdmlzdWFsIG9mIGhhbmdpbmcgZnJvbSB0aGUgY2VpbGluZ1xyXG4gICAgICAgIHRoaXMuaGFuZ1JheS5zZXREaXIoTWF0dGVyLlZlY3Rvci5jcmVhdGUoMCwtMSkpOyAvLyBwb2ludCB1cHdhcmRzXHJcbiAgICAgICAgdGhpcy5lbmRwb2ludHMgPSBlbmRwb2ludHM7IC8vIGFsbCB0ZXJyYWluIHZlcnRpY2VzXHJcbiAgICAgICAgdGhpcy5zZWdtZW50cyA9IHNlZ21lbnRzOyAvLyBhbGwgdGVycmFpbiBsaW5lIHNlZ21lbnRzXHJcbiAgICAgICAgdGhpcy50cmlzID0gW107XHJcbiAgICAgICAgdGhpcy5zaGFkZXJQcm9ncmFtID0gc2hhZGVyUHJvZ3JhbTtcclxuICAgICAgICB0aGlzLmNvbG9yID0gWzEsIDAuODMxLCAwLjMyMixcclxuICAgICAgICAgICAgICAgICAgICAgIDEsIDAuODMxLCAwLjMyMixcclxuICAgICAgICAgICAgICAgICAgICAgIDEsIDAuODMxLCAwLjMyMixdXHJcblxyXG4gICAgICAgIC8vIGluaXQgYWxsIG1haW4gcmF5c1xyXG4gICAgICAgIGZvciAoIGxldCBlbmRwb2ludCBvZiBlbmRwb2ludHMgKSB7XHJcbiAgICAgICAgICAgIGxldCByYXlEaXIgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZShlbmRwb2ludC54IC0gdGhpcy5wb3MueCwgZW5kcG9pbnQueSAtIHRoaXMucG9zLnkpO1xyXG4gICAgICAgICAgICBNYXR0ZXIuVmVjdG9yLm5vcm1hbGlzZShyYXlEaXIpO1xyXG4gICAgICAgICAgICBsZXQgbmV3UmF5ID0gbmV3IFJheSh0aGlzLnBvcywgMCwgZW5kcG9pbnQpO1xyXG4gICAgICAgICAgICBuZXdSYXkuc2V0RGlyKHJheURpcik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLnJheXMucHVzaChuZXdSYXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlbmRlcmVyID0gUElYSS5hdXRvRGV0ZWN0UmVuZGVyZXIoKTtcclxuICAgICAgICB0aGlzLnVuaWZvcm1zID0ge1xyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiAgICBbd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodF0sXHJcbiAgICAgICAgICAgIC8vIGRpbWVuc2lvbnM6IFt0aGlzLnJlbmRlcmVyLndpZHRoLCB0aGlzLnJlbmRlcmVyLmhlaWdodF0sXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBbdGhpcy5wb3MueCwgdGhpcy5wb3MueV0gLFxyXG4gICAgICAgICAgICB0aW1lIDogTWF0aC5yYW5kb20oKVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2hhZGVyID0gbmV3IFBJWEkuU2hhZGVyLmZyb20oc2hhZGVyUHJvZ3JhbS52ZXJ0LCBzaGFkZXJQcm9ncmFtLmZyYWcsIHRoaXMudW5pZm9ybXMpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBjb21wYXJlIDIgcmF5cyBieSBhbmdsZVxyXG4gICAgY29tcGFyZShhLGIpIHtcclxuICAgICAgICBjb25zdCBhbmdsZUEgPSBhLmFuZ2xlO1xyXG4gICAgICAgIGNvbnN0IGFuZ2xlQiA9IGIuYW5nbGU7XHJcbiAgICBcclxuICAgICAgICByZXR1cm4gYW5nbGVBIC0gYW5nbGVCO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGZvciBtb3ZpbmcgbGlnaHRcclxuICAgIHVwZGF0ZSh4LHkpIHtcclxuICAgICAgICB0aGlzLnBvcy54ID0geDtcclxuICAgICAgICB0aGlzLnBvcy55ID0geTtcclxuXHJcbiAgICAgICAgdGhpcy5yYXlzID0gW107IFxyXG4gICAgICAgIFxyXG4gICAgIFxyXG5cclxuICAgICAgICB0aGlzLnVuaWZvcm1zID0ge1xyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiAgICBbd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodF0sXHJcbiAgICAgICAgICAgIC8vIGRpbWVuc2lvbnM6IFt0aGlzLnJlbmRlcmVyLndpZHRoLCB0aGlzLnJlbmRlcmVyLmhlaWdodF0sXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBbeCwgeV0sXHJcbiAgICAgICAgICAgIHRpbWU6IE1hdGgucmFuZG9tKClcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuc2hhZGVyID0gbmV3IFBJWEkuU2hhZGVyLmZyb20odGhpcy5zaGFkZXJQcm9ncmFtLnZlcnQsIHRoaXMuc2hhZGVyUHJvZ3JhbS5mcmFnLCB0aGlzLnVuaWZvcm1zKTtcclxuICAgICAgICB0aGlzLmNvcm5lclJheXMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yICggbGV0IGVuZHBvaW50IG9mIHRoaXMuZW5kcG9pbnRzKSB7XHJcbiAgICAgICAgICAgIGxldCByYXlEaXIgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZShlbmRwb2ludC54IC0gdGhpcy5wb3MueCwgZW5kcG9pbnQueSAtIHRoaXMucG9zLnkpO1xyXG4gICAgICAgICAgICBNYXR0ZXIuVmVjdG9yLm5vcm1hbGlzZShyYXlEaXIpO1xyXG4gICAgICAgICAgICBsZXQgbmV3UmF5ID0gbmV3IFJheSh0aGlzLnBvcywgMCwgZW5kcG9pbnQpO1xyXG4gICAgICAgICAgICBuZXdSYXkuc2V0RGlyKHJheURpcik7IFxyXG4gICAgICAgICAgICB0aGlzLnJheXMucHVzaChuZXdSYXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5sb29rKCk7XHJcbiAgICAgICAgdGhpcy5hdXhMb29rKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9vaygpIHtcclxuICAgICAgICBmb3IgKCBsZXQgcmF5IG9mIHRoaXMucmF5cykge1xyXG4gICAgICAgICAgICB0aGlzLmNhc3QocmF5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2FzdChyYXkpIHtcclxuICAgICAgICBsZXQgY2xvc2VzdCA9IHJheS5lbmRwb2ludDtcclxuICAgICAgICBsZXQgcmVjb3JkID0gTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMucG9zLnggLSBjbG9zZXN0LngsMikgKyBNYXRoLnBvdyh0aGlzLnBvcy55IC0gY2xvc2VzdC55LDIpKTtcclxuICAgICAgICBmb3IgKCBsZXQgd2FsbCBvZiB0aGlzLnNlZ21lbnRzKSB7ICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgcHQgPSByYXkuY2FzdCh3YWxsKTtcclxuICAgICAgICAgICAgaWYgKHB0KSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnN0IGQgPSBwNS5WZWN0b3IuZGlzdCh0aGlzLnBvcywgcHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IE1hdGguc3FydChNYXRoLnBvdyh0aGlzLnBvcy54IC0gcHQueCwyKSArIE1hdGgucG93KHRoaXMucG9zLnkgLSBwdC55LDIpKTtcclxuICAgICAgICAgICAgICAgIGlmICggZCA8IHJlY29yZCApIHtcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmQgPSBkO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb3Nlc3QgPSBwdDtcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggY2xvc2VzdCApIHtcclxuICAgICAgICAgICAgcmF5LmNsb3Nlc3RQb2ludCA9IGNsb3Nlc3Q7XHJcbiAgICAgICAgICAgIGlmICggY2xvc2VzdCA9PSByYXkuZW5kcG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIGxldCByYXkxID0gbmV3IFJheSh0aGlzLnBvcywgMCwgTWF0dGVyLlZlY3Rvci5jcmVhdGUoLTUwMDAsMCkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJheTIgPSBuZXcgUmF5KHRoaXMucG9zLCAwLCBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSgtNTAwMCwwKSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJheTEuc2V0RGlyKE1hdHRlci5WZWN0b3Iucm90YXRlKHJheS5kaXIsLTAuMDA1KSk7XHJcbiAgICAgICAgICAgICAgICByYXkyLnNldERpcihNYXR0ZXIuVmVjdG9yLnJvdGF0ZShyYXkuZGlyLDAuMDA1KSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3JuZXJSYXlzLnB1c2gocmF5MSwgcmF5Mik7XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGF1eExvb2soKSB7XHJcbiAgICAgICAgZm9yICggbGV0IHJheSBvZiB0aGlzLmNvcm5lclJheXMpIHtcclxuICAgICAgICAgICByYXkgPSB0aGlzLmF1eENhc3QocmF5KTtcclxuICAgICAgICAgICB0aGlzLnJheXMucHVzaChyYXkpO1xyXG4gICAgICAgIH0gICAgIFxyXG4gICAgICAgIHRoaXMucmF5cy5zb3J0KHRoaXMuY29tcGFyZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXV4Q2FzdChyYXkpIHtcclxuICAgICAgICBsZXQgY2xvc2VzdCA9IG51bGxcclxuICAgICAgICBsZXQgcmVjb3JkID0gSW5maW5pdHk7XHJcbiAgICAgICAgZm9yICggbGV0IHdhbGwgb2YgdGhpcy5zZWdtZW50cykgeyAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHB0ID0gcmF5LmNhc3Qod2FsbCk7XHJcbiAgICAgICAgICAgIGlmIChwdCkge1xyXG4gICAgICAgICAgICAgICAgLy9jb25zdCBkID0gcDUuVmVjdG9yLmRpc3QodGhpcy5wb3MsIHB0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy5wb3MueCAtIHB0LngsMikgKyBNYXRoLnBvdyh0aGlzLnBvcy55IC0gcHQueSwyKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIGQgPCByZWNvcmQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkID0gZDtcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZXN0ID0gcHQ7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIGNsb3Nlc3QgKSB7XHJcbiAgICAgICAgICAgIHJheS5jbG9zZXN0UG9pbnQgPSBjbG9zZXN0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmF5O1xyXG4gICAgfVxyXG5cclxuICAgIHNob3coZ3JhcGhpY3MpIHtcclxuICAgICAgICAvLyBDaXJjbGVcclxuICAgICAgICBncmFwaGljcy5saW5lU3R5bGUoMSwgMHhERTMyNDkpOyAvLyBkcmF3IGEgY2lyY2xlLCBzZXQgdGhlIGxpbmVTdHlsZSB0byB6ZXJvIHNvIHRoZSBjaXJjbGUgZG9lc24ndCBoYXZlIGFuIG91dGxpbmVcclxuICAgICAgICBncmFwaGljcy5iZWdpbkZpbGwoMHhGRUVCNzcsIDEpO1xyXG4gICAgICAgIGdyYXBoaWNzLmRyYXdDaXJjbGUodGhpcy5wb3MueCwgdGhpcy5wb3MueSwgMTApO1xyXG4gICAgICAgIGdyYXBoaWNzLmVuZEZpbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3TGlnaHQoZ3JhcGhpY3Mpe1xyXG4gICAgICAgIGdyYXBoaWNzLmxpbmVTdHlsZSgwKTtcclxuICAgICAgICBncmFwaGljcy5iZWdpbkZpbGwoMHhGRUVCNzcsIDAuNSk7XHJcblxyXG4gICAgICAgIGdyYXBoaWNzLmRyYXdQb2x5Z29uKFt0aGlzLnBvcy54LCB0aGlzLnBvcy55LFxyXG4gICAgICAgICAgICB0aGlzLnJheXNbMF0uY2xvc2VzdFBvaW50LngsIHRoaXMucmF5c1swXS5jbG9zZXN0UG9pbnQueSxcclxuICAgICAgICAgICAgdGhpcy5yYXlzW3RoaXMucmF5cy5sZW5ndGgtMV0uY2xvc2VzdFBvaW50LngsIFxyXG4gICAgICAgICAgICB0aGlzLnJheXNbdGhpcy5yYXlzLmxlbmd0aC0xXS5jbG9zZXN0UG9pbnQueV0pO1xyXG4gICAgICAgICAgICBncmFwaGljcy5lbmRGaWxsKCk7XHJcblxyXG4gICAgICAgIGZvciAoIGxldCBpID0gMTsgaSA8IHRoaXMucmF5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBncmFwaGljcy5iZWdpbkZpbGwoMHhGRUVCNzcsIDAuNSk7XHJcbiAgICAgICAgICAgIGdyYXBoaWNzLmRyYXdQb2x5Z29uKFt0aGlzLnBvcy54LCB0aGlzLnBvcy55LFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmF5c1tpLTFdLmNsb3Nlc3RQb2ludC54LCB0aGlzLnJheXNbaS0xXS5jbG9zZXN0UG9pbnQueSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJheXNbaV0uY2xvc2VzdFBvaW50LngsIHRoaXMucmF5c1tpXS5jbG9zZXN0UG9pbnQueV0pO1xyXG4gICAgICAgICAgICBncmFwaGljcy5lbmRGaWxsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIG1ha2Ugd2ViZ2wgbWVzaGVzIHRvIGRyYXcgbGlnaHQsIHBhc3Mgc2hhZGVyIGZyb20gY29uc3RydWN0b3JcclxuICAgIGRyYXdNZXNoKGZpbHRlcnMpIHtcclxuICAgICAgICB0aGlzLnRyaXMgPSBbXTtcclxuICAgICAgICAvLyBkcmF3IGEgdHJpYW5nbGUgYmV3ZWVuIHRoZSBlbmRwb2ludHMgJiBzb3VyY2Ugb2YgZXZlcnkgcmF5XHJcbiAgICAgICAgZm9yICggbGV0IGkgPSAxOyBpIDwgdGhpcy5yYXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyaWFuZ2xlID0gbmV3IFBJWEkuR2VvbWV0cnkoKVxyXG4gICAgICAgICAgICAgICAgLmFkZEF0dHJpYnV0ZSgnYVZlcnRleFBvc2l0aW9uJywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsgdGhpcy5wb3MueCwgIHRoaXMucG9zLnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYXlzW2ktMV0uY2xvc2VzdFBvaW50LngsIHRoaXMucmF5c1tpLTFdLmNsb3Nlc3RQb2ludC55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmF5c1tpXS5jbG9zZXN0UG9pbnQueCwgdGhpcy5yYXlzW2ldLmNsb3Nlc3RQb2ludC55XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgMilcclxuICAgICAgICAgICAgICAgIC5hZGRBdHRyaWJ1dGUoJ2FDb2xvcicsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgMyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyaU1lc2ggPSBuZXcgUElYSS5NZXNoKHRyaWFuZ2xlLCB0aGlzLnNoYWRlcik7XHJcbiAgICAgICAgICAgIHRyaU1lc2guZmlsdGVycyA9IGZpbHRlcnM7XHJcbiAgICAgICAgICAgIHRoaXMudHJpcy5wdXNoKHRyaU1lc2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBkcmF3IGFuIGV4dHJhIHRyaWFuZ2xlIHRvIGNvbm5lY3QgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIHRoZSBhcnJheVxyXG4gICAgICAgIGNvbnN0IGZpcnN0VHJpID0gbmV3IFBJWEkuR2VvbWV0cnkoKVxyXG4gICAgICAgIC5hZGRBdHRyaWJ1dGUoJ2FWZXJ0ZXhQb3NpdGlvbicsIFxyXG4gICAgICAgIFt0aGlzLnBvcy54LCAgdGhpcy5wb3MueSxcclxuICAgICAgICAgICAgdGhpcy5yYXlzWzBdLmNsb3Nlc3RQb2ludC54LCB0aGlzLnJheXNbMF0uY2xvc2VzdFBvaW50LnksXHJcbiAgICAgICAgICAgIHRoaXMucmF5c1t0aGlzLnJheXMubGVuZ3RoLTFdLmNsb3Nlc3RQb2ludC54LCBcclxuICAgICAgICAgICAgdGhpcy5yYXlzW3RoaXMucmF5cy5sZW5ndGgtMV0uY2xvc2VzdFBvaW50LnldLFxyXG4gICAgICAgICAgICAyKVxyXG4gICAgICAgIC5hZGRBdHRyaWJ1dGUoJ2FDb2xvcicsIFxyXG4gICAgICAgICAgICB0aGlzLmNvbG9yLCBcclxuICAgICAgICAgICAgMyk7XHJcbiAgICAgICAgY29uc3QgZmlyc3RUcmlNZXNoID0gbmV3IFBJWEkuTWVzaChmaXJzdFRyaSwgdGhpcy5zaGFkZXIpO1xyXG4gICAgICAgIGZpcnN0VHJpTWVzaC5maWx0ZXJzID0gZmlsdGVycztcclxuICAgICAgICB0aGlzLnRyaXMucHVzaChmaXJzdFRyaU1lc2gpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IE1hdHRlciBmcm9tICdtYXR0ZXItanMvYnVpbGQvbWF0dGVyLm1pbi5qcyc7XHJcbmltcG9ydCB7UmF5U291cmNlfSBmcm9tICcuL3JheVNvdXJjZS5qcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9pbnRMaWdodCB7XHJcbiAgY29uc3RydWN0b3IoeCx5LCBjYXN0U2VnbWVudHMsIGVuZHBvaW50cywgc2hhZGVyUHJvZ3JhbSwgdG9yY2hGcmFtZXMpIHtcclxuICAgIHRoaXMucG9zID0gTWF0dGVyLlZlY3Rvci5jcmVhdGUoeCx5KTtcclxuICAgIHRoaXMuY2FzdFNlZ21lbnRzID0gY2FzdFNlZ21lbnRzO1xyXG5cclxuICAgIHRoaXMudmlzaW9uU291cmNlID0gbmV3IFJheVNvdXJjZSggeCwgeSwgY2FzdFNlZ21lbnRzLCBlbmRwb2ludHMsIHNoYWRlclByb2dyYW0gKTtcclxuICAgIHRoaXMubnVtU3RhdGljUmF5cyA9IHRoaXMudmlzaW9uU291cmNlLnJheXMubGVuZ3RoO1xyXG4gICAgdGhpcy52ZWwgPSAtMS41O1xyXG4gICAgdGhpcy52aXNpb25Tb3VyY2UubG9vaygpO1xyXG4gICAgdGhpcy52aXNpb25Tb3VyY2UuYXV4TG9vaygpO1xyXG4gICAgdGhpcy5saWdodENvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xyXG5cclxuICAgIHRoaXMudG9yY2ggPSBuZXcgVG9yY2hBbmltYXRpb24oeCx5LHRvcmNoRnJhbWVzKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSh0aW1lc2NhbGUpIHtcclxuICAgIHRoaXMubGlnaHRDb250YWluZXIuZGVzdHJveSh7IFwiY2hpbGRyZW5cIiA6IHRydWUgfSk7XHJcbiAgICB0aGlzLmxpZ2h0Q29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XHJcbiAgICB0aGlzLnBvcy54ICs9IHRoaXMudmVsKnRpbWVzY2FsZTtcclxuICAgIHRoaXMudmlzaW9uU291cmNlLnVwZGF0ZSh0aGlzLnBvcy54LCB0aGlzLnBvcy55KTtcclxuICAgIHRoaXMudmlzaW9uU291cmNlLmRyYXdNZXNoKCk7XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnZpc2lvblNvdXJjZS50cmlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRoaXMubGlnaHRDb250YWluZXIuYWRkQ2hpbGQodGhpcy52aXNpb25Tb3VyY2UudHJpc1tpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBUb3JjaEFuaW1hdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeCx5LCBmcmFtZXMpe1xyXG4gICAgdGhpcy5hbmltYXRpb24gPSBuZXcgUElYSS5BbmltYXRlZFNwcml0ZShmcmFtZXMpO1xyXG4gICAgdGhpcy5hbmltYXRpb24ucG9zaXRpb24uc2V0KHgseSk7XHJcbiAgICB0aGlzLmFuaW1hdGlvbi5hbmNob3Iuc2V0KDAuNSk7XHJcbiAgICB0aGlzLmFuaW1hdGlvbi5zY2FsZS5zZXQoMS41LDEuNSk7XHJcbiAgICB0aGlzLmFuaW1hdGlvbi5hbmltYXRpb25TcGVlZCA9IDAuMjtcclxuICAgIHRoaXMuYW5pbWF0aW9uLmdvdG9BbmRQbGF5KE1hdGgucmFuZG9tKCkgKiA5KTtcclxuICB9XHJcbn0iLCJpbXBvcnQgTWF0dGVyIGZyb20gJ21hdHRlci1qcy9idWlsZC9tYXR0ZXIubWluLmpzJztcclxuLyoqXHJcbiAqIEludGVyYWN0YWJsZSBvYmplY3QgdGhhdCBhcHBsaWVzIGEgRGlzcGxhY2VtZW50IGZpbHRlciB0byB0aGUgc2NyZWVuIHdoZW4gdGhlIHBsYXllciBjb2xsaWRlcyB3aXRoIGl0LlxyXG4gKiBcclxuICogLSBDb250cm9sbGVkIGJ5IHRoZSBjYXRUcmlwU3RhdGUgY2xhc3NcclxuICogLSBNYWtlIGl0IGZsb2F0IHVwIGFuZCBkb3duIGJ5IHBhc3NpbmcgYW4gb2Zmc2V0IHZhbHVlIGludG8gdGhlIHVwZGF0ZSBmdW5jdGlvbiBcclxuICogQGNsYXNzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUG93ZXJ1cHtcclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCAtIHggcG9zaXRpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0geSBwb3NpdGlvblxyXG4gICAgICogQHBhcmFtIHtQSVhJLlRleHR1cmV9IHRleHR1cmUgLSBTcHJpdGUgdGV4dHVyZSBmb3IgdGhlIHBvd2VydXBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoeCx5LHRleHR1cmUpe1xyXG4gICAgICAgIHRoaXMuc3ByaXRlID0gbmV3IFBJWEkuU3ByaXRlLmZyb20odGV4dHVyZSk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUucG9zaXRpb24uc2V0KHgseSk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnNldCgwLjUpO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLnNjYWxlLnNldCgyLjUpO1xyXG5cclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcblxyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnNwcml0ZS53aWR0aC8vKiB0aGlzLnNwcml0ZS5zY2FsZS54O1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5zcHJpdGUuaGVpZ2h0Ly8qIHRoaXMuc3ByaXRlLnNjYWxlLnk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLkRpc3NvbHZlVmFsdWUgPSAwLjg7XHJcblxyXG4gICAgICAgIHRoaXMuY29sbGlkZXIgPSBuZXcgTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUoIFxyXG4gICAgICAgICAgICB4LCBcclxuICAgICAgICAgICAgeSwgXHJcbiAgICAgICAgICAgIHRoaXMud2lkdGgsXHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0LCBcclxuICAgICAgICAgICAgIHsgXHJcbiAgICAgICAgICAgICAgIGlzU3RhdGljIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgaXNTZW5zb3IgOiB0cnVlLFxyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5jb2xsaWRlci5pc0NhdG5pcCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jb2xsaWRlci5zcHJpdGVSZWZlcmVuY2UgPSB0aGlzLnNwcml0ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogIENhbGN1bGF0ZSB0aGUgb2Zmc2V0IGZyb20gdGhlIHBhcmVudCBvYmplY3QgdG8gYXZvaWQgcmVkdW5kYW50IGNhbGxzIHRvIE1hdGguc2luIG9uIGR1cGxpY2F0ZSBwb3dlcnVwcyAqL1xyXG4gICAgdXBkYXRlKG9mZnNldCl7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUueSA9IHRoaXMueSArIG9mZnNldDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogdXBkYXRlIHRoZSBkaXNzb2x2ZSBmaWx0ZXIgdW50aWwgdGhlIHNwcml0ZSBkaXNhcHBlYXJzICovIFxyXG4gICAgRml4ZWRVcGRhdGUoKXtcclxuICAgICAgICBpZiAoIHRoaXMuc3ByaXRlLmZpbHRlcnMpe1xyXG4gICAgICAgICAgICB0aGlzLkRpc3NvbHZlVmFsdWUgLT0gMC4wMTtcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGUuZmlsdGVyc1swXS51bmlmb3Jtcy5EaXNzb2x2ZVZhbCA9IHRoaXMuRGlzc29sdmVWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICggdGhpcy5EaXNzb2x2ZVZhbHVlIDw9IDApeyAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlLnJlbmRlcmFibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlLmZpbHRlcnNbMF0udW5pZm9ybXMuRGlzc29sdmVWYWwgPSAwLjc1O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGUuZmlsdGVycyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge1RpbGVDb2xsaWRlcn0gZnJvbSAnLi90aWxlcy5qcydcclxuaW1wb3J0IHtCb3VuZGFyeX0gZnJvbSAnLi90ZXJyYWluLmpzJ1xyXG5pbXBvcnQge1BvaW50TGlnaHR9IGZyb20gJy4uL2xpZ2h0aW5nL1BvaW50TGlnaHQuanMnXHJcbmltcG9ydCB7UG93ZXJ1cH0gZnJvbSAnLi9wb3dlcnVwcy5qcydcclxuXHJcblxyXG4vLyBwYXJlbnQgb2YgYWxsIG90aGVyIHByb2NlZHVyYWwgZ2VuZXJhdGlvbiBtYXAgY2xhc3Nlc1xyXG5jbGFzcyBBYnN0cmFjdE1hcHtcclxuICAgIGNvbnN0cnVjdG9yKHcsaCx0aWxlU2l6ZSwgbnVtTGlnaHRzLCBzaGFkZXJQcm9ncmFtLCB0aWxlc2V0LCB0b3JjaEZyYW1lcykge1xyXG4gICAgICAgIHRoaXMudyA9IHc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aWR0aCBvZiBtYXAgaW4gdGlsZXNcclxuICAgICAgICB0aGlzLmggPSBoOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGVpZ2h0IG9mIG1hcCBpbiB0aWxlc1xyXG4gICAgICAgIHRoaXMudGlsZVNpemUgPSB0aWxlU2l6ZTsgICAgICAgICAgICAgICAvLyBlZGdlIGxlbmd0aCBvZiB0aWxlcyBpbiBwaXhlbHNcclxuXHJcbiAgICAgICAgdGhpcy50aWxlTWFwID0ge30gICAgICAgICAgICAgICAgICAgICAgIC8vIGhhc2htYXAgb2YgY2hhcmFjdGVycyByZXByZXNlbnRpbmcgbWFwIGZlYXR1cmVzXHJcbiAgICAgICAgdGhpcy50aWxlc2V0ID0gdGlsZXNldDsgICAgICAgICAgICAgICAgIC8vIGhhc2htYXAgb2YgdGV4dHVyZXNcclxuICAgICAgICB0aGlzLm51bUxpZ2h0cyA9IG51bUxpZ2h0czsgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIGxpZ2h0cyB0byByYW5kb21seSBwbGFjZSBpbiBtYXBcclxuICAgICAgICB0aGlzLmZyZWVDZWxscyA9IFtdOyAgICAgICAgICAgICAgICAgICAgLy8ga2V5cyBmb3IgZW1wdHkgbWFwIHRpbGVzXHJcbiAgICAgICAgdGhpcy5ncm91bmRUaWxlcyA9IFtdOyAgICAgICAgICAgICAgICAgIC8vIGtleXMgZm9yIHRpbGVzIHdpdGggd2Fsa2JveGVzXHJcblxyXG4gICAgICAgIHRoaXMudGVycmFpbiA9IFtdOyAgICAgICAgICAgICAgICAgICAgICAvLyBib3ggY29sbGlkZXJzIGZvciB3YWxsc1xyXG4gICAgICAgIHRoaXMubGlnaHRzID0gW107ICAgICAgICAgICAgICAgICAgICAgICAvLyBsaWdodCBzaGFkaW5nIG1lc2hlcyBcclxuICAgICAgICB0aGlzLnRvcmNoRnJhbWVzID0gdG9yY2hGcmFtZXM7ICAgICAgICAgLy8gdG9yY2ggYW5pbWF0aW9uIHRleHR1cmVzXHJcbiAgICAgICAgdGhpcy50b3JjaFNwcml0ZXMgPSBbXTsgICAgICAgICAgICAgICAgIC8vIHRvcmNoIGFuaW1hdGVkIHNwcml0ZXNcclxuICAgICAgICB0aGlzLnNoYWRlclByb2dyYW0gPSBzaGFkZXJQcm9ncmFtOyAgICAgLy8gbGlnaHQgbWVzaCB3ZWJnbCBzaGFkZXIgXHJcblxyXG4gICAgICAgIC8vIGNvbnRhaW5lcnMgZm9yIGRpc3BsYXkgb2JqZWN0c1xyXG4gICAgICAgIHRoaXMudGlsZUNvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xyXG4gICAgICAgIHRoaXMudG9yY2hDb250YWluZXIgPSBuZXcgUElYSS5Db250YWluZXIoKTtcclxuXHJcbiAgICAgICAgLy8gdXNpbmcgc2V0cyBoZXJlIHRvIGZpbHRlciBvdXQgZHVwbGljYXRlIGVkZ2VzL3ZlcnRpY2VzXHJcbiAgICAgICAgLy8gZmVlZCB0aGVzZSBpbnRvIHJheWNhc3RpbmcgZnVuY3Rpb25zXHJcbiAgICAgICAgdGhpcy5lZGdlcyA9IG5ldyBTZXQoKTtcclxuICAgICAgICB0aGlzLnZlcnRpY2VzID0gbmV3IFNldCgpO1xyXG5cclxuICAgICAgICB0aGlzLnBvd2VydXBzID0gW107XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlcGxhY2UgcmFuZG9tIG9wZW4gY2VsbHMgd2l0aCBsaWdodHMgaW4gdGhlIGZlYXR1cmUgaGFzaG1hcFxyXG4gICAgZ2VuZXJhdGVMaWdodHMoZnJlZUNlbGxzLCBudW1MaWdodHMpe1xyXG4gICAgICAgIGZvciAobGV0IGk9MDtpPG51bUxpZ2h0cztpKyspIHtcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihST1QuUk5HLmdldFVuaWZvcm0oKSAqIGZyZWVDZWxscy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBsZXQga2V5ID0gZnJlZUNlbGxzLnNwbGljZShpbmRleCwgMSlbMF07XHJcbiAgICAgICAgICAgIHRoaXMudGlsZU1hcFtrZXldID0gXCIqXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE1ha2Ugd2ViZ2wgbWVzaGVzIGZyb20gdGhlIGxpZ2h0IHNoYWRlciAmIHJheWNhc3RpbmcgZGF0YVxyXG4gICAgYWRkTGlnaHRzKHNoYWRlclByb2dyYW0pe1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLnRpbGVNYXApe1xyXG4gICAgICAgICAgICBpZiAodGhpcy50aWxlTWFwW2tleV0gPT0gJyonKXtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJ0cyA9IGtleS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHBhcnNlSW50KHBhcnRzWzBdKTtcclxuICAgICAgICAgICAgICAgIGxldCB5ID0gcGFyc2VJbnQocGFydHNbMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGlnaHRzLnB1c2gobmV3IFBvaW50TGlnaHQoeCp0aGlzLnRpbGVTaXplLCB5KnRoaXMudGlsZVNpemUsIHRoaXMuZWRnZXMsIHRoaXMudmVydGljZXMsIHNoYWRlclByb2dyYW0sIHRoaXMudG9yY2hGcmFtZXMpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpZ2h0cy5mb3JFYWNoKCAobGlnaHQpID0+e1xyXG4gICAgICAgICAgICB0aGlzLnRvcmNoU3ByaXRlcy5wdXNoKGxpZ2h0LnRvcmNoLmFuaW1hdGlvbik7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwYXJhbGxheFNjcm9sbChjYW1lcmFDZW50ZXIsIHhTcGVlZCwgeVNwZWVkKXtcclxuICAgICAgICAvLyB0aGlzLmJhY2tncm91bmRDb250YWluZXIucGl2b3QuY29weUZyb20oY2FtZXJhQ2VudGVyKTtcclxuICAgICAgICB0aGlzLmJhY2tncm91bmRDb250YWluZXIueCA9IGNhbWVyYUNlbnRlci54IC8geFNwZWVkOyAvLy0gKHRoaXMudyAqIHRoaXMudGlsZVNpemUgKSAvIDI7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29udGFpbmVyLnkgPSBjYW1lcmFDZW50ZXIueSAvIHlTcGVlZDsgLy8tICh0aGlzLmggKiB0aGlzLnRpbGVTaXplICkgLyAyO1xyXG4gICAgfVxyXG5cclxuICAgIHRpbGVTcHJpdGVJbml0KHgseSx0ZXh0dXJlLCBzY2FsZSA9IDApe1xyXG4gICAgICAgIGxldCBzcHJpdGUgPSBuZXcgUElYSS5TcHJpdGUuZnJvbSh0ZXh0dXJlKTtcclxuXHJcbiAgICAgICAgc3ByaXRlLndpZHRoID0gdGhpcy50aWxlU2l6ZSAtNjtcclxuICAgICAgICBzcHJpdGUuaGVpZ2h0ID0gdGhpcy50aWxlU2l6ZTtcclxuXHJcbiAgICAgICAgaWYgKHNjYWxlICE9IDAgKVxyXG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0KHNjYWxlKTtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgc3ByaXRlLmFuY2hvci5zZXQoMC41KTtcclxuICAgICAgICBzcHJpdGUucG9zaXRpb24ueCA9IHgqdGhpcy50aWxlU2l6ZTtcclxuICAgICAgICBzcHJpdGUucG9zaXRpb24ueSA9IHkqdGhpcy50aWxlU2l6ZTsgIFxyXG5cclxuICAgICAgICB0aGlzLnRpbGVDb250YWluZXIuYWRkQ2hpbGQoc3ByaXRlKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gZWxsZXIgbWF6ZSBtYXBcclxuLy8gY3VycmVudGx5IHRoaXMgc3RpbGwgZHJhd3MgdGlsZXMgYXMgcmVjdGFuZ2xlIGdyYXBoaWNzIHByaW1pdGl2ZXNcclxuY2xhc3MgTWF6ZU1hcCBleHRlbmRzIEFic3RyYWN0TWFwIHtcclxuICAgIGNvbnN0cnVjdG9yKHcsaCx0aWxlU2l6ZSwgbnVtTGlnaHRzLCBzaGFkZXJQcm9ncmFtLCB0aWxlc2V0LCB0b3JjaEZyYW1lcyl7XHJcbiAgICAgICAgc3VwZXIodyxoLHRpbGVTaXplLCBudW1MaWdodHMsIHNoYWRlclByb2dyYW0sIHRpbGVzZXQsIHRvcmNoRnJhbWVzKVxyXG5cclxuICAgICAgICB0aGlzLmVsbGVyTWF6ZSA9IG5ldyBST1QuTWFwLkVsbGVyTWF6ZSh3LCBoKTtcclxuICAgICAgICB0aGlzLmRlYnVnR3JhcGhpY3MgPSBuZXcgUElYSS5HcmFwaGljcygpO1xyXG4gICAgICAgIHRoaXMudGlsZUNvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmRlYnVnR3JhcGhpY3MpO1xyXG5cclxuICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvbiBmb3IgbWF6ZSBjcmVhdGlvblxyXG4gICAgICAgIHRoaXMuZWxsZXJNYXplLmNyZWF0ZSggKHgsIHksIHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBrZXkgPSB4K1wiLFwiK3k7XHJcbiAgICAgICAgICAgIHRoaXMudGlsZU1hcFtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZnJlZUNlbGxzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyByYW5kb21seSBwbGFjZSBsaWdodHMgaW4gZW1wdHkgY2VsbHNcclxuICAgICAgICB0aGlzLmdlbmVyYXRlTGlnaHRzKHRoaXMuZnJlZUNlbGxzLCBudW1MaWdodHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIG1ha2Ugd2FsbCBjZWxsc1xyXG4gICAgICAgIHRoaXMuYWRkV2FsbHMoKTtcclxuXHJcbiAgICAgICAgLy8gbWFrZSBQb2ludExpZ2h0IG9iamVjdHMgXHJcbiAgICAgICAgdGhpcy5hZGRMaWdodHMoc2hhZGVyUHJvZ3JhbSk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoUk9ULlJORy5nZXRVbmlmb3JtKCkgKiB0aGlzLmZyZWVDZWxscy5sZW5ndGgpO1xyXG4gICAgICAgIGxldCBrZXkgPSB0aGlzLmZyZWVDZWxscy5zcGxpY2UoaW5kZXgsIDEpWzBdO1xyXG4gICAgICAgIGxldCBwYXJ0cyA9IGtleS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJTcGF3biA9IG5ldyBQSVhJLlBvaW50KHBhcnNlSW50KHBhcnRzWzBdKSp0aGlzLnRpbGVTaXplLCBwYXJzZUludChwYXJ0c1sxXSkqdGhpcy50aWxlU2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkV2FsbHMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGlsZU1hcCl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbGVNYXBba2V5XSA9PSAxKXsgICAgXHJcbiAgICAgICAgICAgICAgICBsZXQgcGFydHMgPSBrZXkuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHggPSBwYXJzZUludChwYXJ0c1swXSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgeSA9IHBhcnNlSW50KHBhcnRzWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgbmVpZ2hib3Igd2FsbHNcclxuICAgICAgICAgICAgICAgIGxldCBsZWZ0TmVpZ2hib3IsIHJpZ2h0TmVpZ2hib3IsIHRvcE5laWdoYm9yLCBib3ROZWlnaGJvcjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbGVNYXBbICh4LTEpICsnLCcrICB5IF0gPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0TmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGlsZU1hcFsgKHgrMSkgKycsJysgIHkgXSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0TmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGlsZU1hcFsgeCAgICAgKycsJysgKHktMSldID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wTmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGlsZU1hcFsgeCAgICAgKycsJysgKHkrMSldID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgYm90TmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGlsZSwgYm9vbGVhbiBsb2dpYyBkZXRlcm1pbmVzIGlmIGNsaW1iL3dhbGsgdHJpZ2dlciBjb2xsaWRlcnMgbmVlZCB0byBiZSBtYWRlXHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3VGlsZSA9IG5ldyBUaWxlQ29sbGlkZXIoeCx5LCB0aGlzLnRpbGVTaXplLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICghbGVmdE5laWdoYm9yICAmJiAhdG9wTmVpZ2hib3IpLCAvLyBsZWZ0IGxlZGdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIXJpZ2h0TmVpZ2hib3IgJiYgIXRvcE5laWdoYm9yKSwgLy8gcmlnaHQgbGVkZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdG9wTmVpZ2hib3IpICAgICAgICAgICAgICAgICAgICAvLyB3YWxrYm94XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVidWdHcmFwaGljcy5iZWdpbkZpbGwoMHg2NjAwNjYpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlYnVnR3JhcGhpY3MuZHJhd1JlY3QoeCp0aGlzLnRpbGVTaXplIC0gdGhpcy50aWxlU2l6ZS8yLCB5KnRoaXMudGlsZVNpemUgLSB0aGlzLnRpbGVTaXplLzIsIHRoaXMudGlsZVNpemUsIHRoaXMudGlsZVNpemUpXHJcbiAgICAgICAgICAgICAgICAvLyBwdXNoIHRpbGUgdG8gbGluZWFyIGFycmF5IG9mIHRpbGVzXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRlcnJhaW4ucHVzaChuZXdUaWxlKTsgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBwdXNoIHZlcnRpY2VzIHRvIHNldCBvZiB2ZXJ0aWNlc1xyXG4gICAgICAgICAgICAgICAgbGV0IHZlcnRzID0gbmV3VGlsZS5Db2xsaWRlci52ZXJ0aWNlcztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmVydHMuZm9yRWFjaCggKHZlcnRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmVydGljZXMuYWRkKHZlcnRleCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBwdXNoIGxpbmUgc2VnbWVudHMgdG8gc2V0IG9mIGVkZ2VzXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkZ2VzLmFkZChuZXcgQm91bmRhcnkodmVydHNbMF0ueCwgdmVydHNbMF0ueSwgdmVydHNbMV0ueCwgdmVydHNbMV0ueSkpOyAgIC8vIHRvcCBlZGdlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkZ2VzLmFkZChuZXcgQm91bmRhcnkodmVydHNbMV0ueCwgdmVydHNbMV0ueSwgdmVydHNbMl0ueCwgdmVydHNbMl0ueSkpOyAgIC8vIHJpZ2h0IGVkZ2VcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMuYWRkKG5ldyBCb3VuZGFyeSh2ZXJ0c1szXS54LCB2ZXJ0c1szXS55LCB2ZXJ0c1syXS54LCB2ZXJ0c1syXS55KSk7ICAgLy8gYm90IGVkZ2VcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMuYWRkKG5ldyBCb3VuZGFyeSh2ZXJ0c1swXS54LCB2ZXJ0c1swXS55LCB2ZXJ0c1szXS54LCB2ZXJ0c1szXS55KSk7ICAgLy8gbGVmdCBlZGdlXHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyB0ZXh0dXJlZCBjYXZlIG1hcCBmcm9tIGNlbGx1bGFyIGF1dG9tYXRhXHJcbmNsYXNzIENlbGx1bGFyTWFwIGV4dGVuZHMgQWJzdHJhY3RNYXB7XHJcbiAgICBjb25zdHJ1Y3Rvcih3LGgsdGlsZVNpemUsIG51bUxpZ2h0cywgc2hhZGVyUHJvZ3JhbSwgIHRpbGVzZXQsIHRvcmNoRnJhbWVzKXtcclxuICAgICAgICBzdXBlcih3LGgsdGlsZVNpemUsbnVtTGlnaHRzLHNoYWRlclByb2dyYW0sIHRpbGVzZXQsdG9yY2hGcmFtZXMpO1xyXG5cclxuICAgICAgICB0aGlzLmNlbGxNYXAgPSBuZXcgUk9ULk1hcC5DZWxsdWxhcih3LCBoLCB7XHJcbiAgICAgICAgICAgIGJvcm46IFs0LCA1LCA2LCA3LCA4XSxcclxuICAgICAgICAgICAgc3Vydml2ZTogWzIsIDMsIDQsIDVdXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2VsbE1hcC5yYW5kb21pemUoMC41KTsgLy8gcmFuZG9tIHNlZWQgd2l0aCA1MC81MCBkZWFkL2FsaXZlIGNlbGxzXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gZ2VuZXJhdGUgZmlyc3QgaXRlcmF0aW9uc1xyXG4gICAgICAgIGZvciAodmFyIGk9ODsgaT49MDsgaS0tKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2VsbE1hcC5jcmVhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29ubmVjdCB3YWxscywgdGhlbiBjb25uZWN0IGVtcHR5IGNlbGxzXHJcbiAgICAgICAgdGhpcy5jZWxsTWFwLmNvbm5lY3QobnVsbCwgMSk7XHJcbiAgICAgICAgdGhpcy5jZWxsTWFwLmNvbm5lY3QoKHgsIHksIHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBrZXkgPSB4K1wiLFwiK3k7XHJcbiAgICAgICAgICAgIHRoaXMudGlsZU1hcFtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gZG8gbGFzdCBtaW51dGUgdHdlYWtzIHRvIHRoZSBjZWxsIG1hcCBiZWZvcmUgZ2VuZXJhdGluZyB0aWxpbmdcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy50aWxlTWFwKXtcclxuICAgICAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgbGV0IHggPSBwYXJzZUludChwYXJ0c1swXSk7XHJcbiAgICAgICAgICAgIGxldCB5ID0gcGFyc2VJbnQocGFydHNbMV0pO1xyXG5cclxuICAgICAgICAgICAgLy8gY2xvc2Ugb2ZmIGVkZ2VzXHJcbiAgICAgICAgICAgIGlmICh4ID09IDAgfHwgeSA9PSAwIHx8IHggPT0gKHctMSkgfHwgeSA9PSAoaC0xKSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVNYXBba2V5XSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3JlIGFsbCBlbXB0eSBjZWxscyBmb3IgcGxhY2luZyByYW5kb20gb2JqZWN0c1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudGlsZU1hcFtrZXldKVxyXG4gICAgICAgICAgICAgICB0aGlzLmZyZWVDZWxscy5wdXNoKGtleSk7XHJcbiAgICAgICAgfSAgICAgICBcclxuXHJcbiAgICAgICAgLy8gcmFuZG9tbHkgcGxhY2UgbGlnaHRzIGluIGVtcHR5IGNlbGxzXHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUxpZ2h0cyh0aGlzLmZyZWVDZWxscywgbnVtTGlnaHRzKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBtYWtlIHdhbGwgY2VsbHNcclxuICAgICAgICB0aGlzLmNhdmVXYWxscyh0aGlzLnRpbGVNYXAsIHRydWUsIHRoaXMudGlsZUNvbnRhaW5lciwgdGhpcy50aWxlU2l6ZSk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHJhbmRvbWx5IHBsYWNlIGNhdG5pcCBvbiBncm91bmQgY2VsbHNcclxuICAgICAgICB0aGlzLmdlbmVyYXRlQ2F0bmlwKDEwKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIGJhY2tncm91ZG4gdGlsZXNcclxuICAgICAgICB0aGlzLmJhY2tncm91bmRUaWxpbmcoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBhZGQgZ3Jhc3MgYW5kIHNwaWtlcyB0byByYW5kb20gZWRnZSB0aWxlc1NcclxuICAgICAgICB0aGlzLmFkZEZlYXR1cmVzKHRoaXMuZnJlZUNlbGxzLCB0aGlzLnRpbGVNYXApICBcclxuICAgICAgICAvLyBhZGQgY2F0bmlwIHNwcml0ZXMgdG8gdGhlIG1hcFxyXG4gICAgICAgIHRoaXMuYWRkQ2F0bmlwKCk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwicmF5IGNhc3QgdmVydGljZXM6IFwiLCB0aGlzLnZlcnRpY2VzLnNpemUpO1xyXG5cclxuICAgICAgICAvLyBtYWtlIFBvaW50TGlnaHQgb2JqZWN0cyBcclxuICAgICAgICB0aGlzLmFkZExpZ2h0cyhzaGFkZXJQcm9ncmFtKTtcclxuXHJcbiAgICAgICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihST1QuUk5HLmdldFVuaWZvcm0oKSAqIHRoaXMuZnJlZUNlbGxzLmxlbmd0aCk7XHJcbiAgICAgICAgbGV0IGtleSA9IHRoaXMuZnJlZUNlbGxzLnNwbGljZShpbmRleCwgMSlbMF07XHJcbiAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICB0aGlzLnBsYXllclNwYXduID0gbmV3IFBJWEkuUG9pbnQocGFyc2VJbnQocGFydHNbMF0pKnRoaXMudGlsZVNpemUsIHBhcnNlSW50KHBhcnRzWzFdKSp0aGlzLnRpbGVTaXplKTtcclxuICAgIH1cclxuXHJcbiAgICBjYXZlV2FsbHModGlsZU1hcCwgZG9lc0NvbGxpc2lvbnMsIHRpbGVDb250YWluZXIsIHRpbGVTaXplKXtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGlsZU1hcCl7XHJcbiAgICAgICAgICAgIGlmICh0aWxlTWFwW2tleV0gPT0gMSl7ICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgICAgIGxldCB4ID0gcGFyc2VJbnQocGFydHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IHkgPSBwYXJzZUludChwYXJ0c1sxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIG5laWdoYm9yIHdhbGxzXHJcbiAgICAgICAgICAgICAgICBsZXQgbGVmdE5laWdoYm9yPSBmYWxzZSwgcmlnaHROZWlnaGJvcj0gZmFsc2UsIHRvcE5laWdoYm9yPSBmYWxzZSwgYm90TmVpZ2hib3I9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIFRMTmVpZ2hib3I9IGZhbHNlLCBUUk5laWdoYm9yPSBmYWxzZSwgQlJOZWlnaGJvcj0gZmFsc2UsIEJMTmVpZ2hib3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aWxlTWFwWyAoeC0xKSArJywnKyAgeSBdID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdE5laWdoYm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aWxlTWFwWyAoeCsxKSArJywnKyAgeSBdID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHROZWlnaGJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGlsZU1hcFsgeCAgICAgKycsJysgKHktMSldID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wTmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbGVNYXBbIHggICAgICsnLCcrICh5KzEpXSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIGJvdE5laWdoYm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aWxlTWFwWyAoeC0xKSAgICsnLCcrICh5LTEpXSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIFRMTmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbGVNYXBbICh4KzEpICAgKycsJysgKHktMSldID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgVFJOZWlnaGJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGlsZU1hcFsgKHgrMSkgICsnLCcrICh5KzEpXSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIEJSTmVpZ2hib3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbGVNYXBbICh4IC0xKSAgKycsJysgKHkrMSldID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgQkxOZWlnaGJvciA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0b3BOZWlnaGJvciAmJiB5ID4gMClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyb3VuZFRpbGVzLnB1c2goa2V5KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGRvZXNDb2xsaXNpb25zKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGlsZSwgYm9vbGVhbiBsb2dpYyBkZXRlcm1pbmVzIGlmIGNsaW1iL3dhbGsgdHJpZ2dlciBjb2xsaWRlcnMgbmVlZCB0byBiZSBtYWRlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1RpbGUgPSBuZXcgVGlsZUNvbGxpZGVyKHgseSwgdGhpcy50aWxlU2l6ZSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICghbGVmdE5laWdoYm9yICAmJiAhdG9wTmVpZ2hib3IpLCAvLyBsZWZ0IGxlZGdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICghcmlnaHROZWlnaGJvciAmJiAhdG9wTmVpZ2hib3IpLCAvLyByaWdodCBsZWRnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAhdG9wTmVpZ2hib3IpICAgICAgICAgICAgICAgICAgICAvLyB3YWxrYm94XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggdGlsZSB0byBsaW5lYXIgYXJyYXkgb2YgdGlsZXNcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlcnJhaW4ucHVzaChuZXdUaWxlKTsgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBwdXNoIHZlcnRpY2VzIHRvIHNldCBvZiB2ZXJ0aWNlc1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2ZXJ0cyA9IG5ld1RpbGUuQ29sbGlkZXIudmVydGljZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmVydHMuZm9yRWFjaCggKHZlcnRleCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmVydGV4ID0gTWF0dGVyLlZlY3Rvci5hZGQodmVydGV4LCBuZXdUaWxlLkNvbGxpZGVyLnBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGluZGV4KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoIWxlZnROZWlnaGJvciAmJiAhdG9wTmVpZ2hib3IpIHx8ICghdG9wTmVpZ2hib3IgJiYgVExOZWlnaGJvcikgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmVydGljZXMuYWRkKHZlcnRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoIXJpZ2h0TmVpZ2hib3IgJiYgIXRvcE5laWdoYm9yKSB8fCAoIXRvcE5laWdoYm9yICYmIFRSTmVpZ2hib3IpIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZlcnRpY2VzLmFkZCh2ZXJ0ZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCFyaWdodE5laWdoYm9yICYmICFib3ROZWlnaGJvcikgfHwgKCFib3ROZWlnaGJvciAmJiBCUk5laWdoYm9yKSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcy5hZGQodmVydGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghbGVmdE5laWdoYm9yICYmICFib3ROZWlnaGJvcikgfHwgKCFib3ROZWlnaGJvciAmJiBCTE5laWdoYm9yKSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcy5hZGQodmVydGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHVzaCBsaW5lIHNlZ21lbnRzIHRvIHNldCBvZiBlZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdG9wTmVpZ2hib3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMuYWRkKG5ldyBCb3VuZGFyeSh2ZXJ0c1swXS54LCB2ZXJ0c1swXS55LCB2ZXJ0c1sxXS54LCB2ZXJ0c1sxXS55KSk7ICAgLy8gdG9wIGVkZ2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJpZ2h0TmVpZ2hib3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMuYWRkKG5ldyBCb3VuZGFyeSh2ZXJ0c1sxXS54LCB2ZXJ0c1sxXS55LCB2ZXJ0c1syXS54LCB2ZXJ0c1syXS55KSk7ICAgLy8gcmlnaHQgZWRnZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYm90TmVpZ2hib3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMuYWRkKG5ldyBCb3VuZGFyeSh2ZXJ0c1szXS54LCB2ZXJ0c1szXS55LCB2ZXJ0c1syXS54LCB2ZXJ0c1syXS55KSk7ICAgLy8gYm90IGVkZ2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxlZnROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGdlcy5hZGQobmV3IEJvdW5kYXJ5KHZlcnRzWzBdLngsIHZlcnRzWzBdLnksIHZlcnRzWzNdLngsIHZlcnRzWzNdLnkpKTsgICAvLyBsZWZ0IGVkZ2VcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gZGVjaWRlIHdoaWNoIHNwcml0ZSB0byB1c2VcclxuICAgICAgICAgICAgICAgIC8vIGludGVyaW9yIHRpbGVcclxuICAgICAgICAgICAgICAgIGxldCB0aWxlVHlwZTtcclxuICAgICAgICAgICAgICAgIGlmICggdG9wTmVpZ2hib3IgJiYgYm90TmVpZ2hib3IgJiYgcmlnaHROZWlnaGJvciAmJiBsZWZ0TmVpZ2hib3IgKVxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVUeXBlID0gXCJJbnRlcmlvclwiOyAgIFxyXG4gICAgICAgICAgICAgICAgLy8gdG9wIGVkZ2VcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0b3BOZWlnaGJvciAmJiBsZWZ0TmVpZ2hib3IgJiYgcmlnaHROZWlnaGJvciAmJiBib3ROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICB0aWxlVHlwZSA9IFwiVG9wRWRnZVwiO1xyXG4gICAgICAgICAgICAgICAgLy8gYm90IGVkZ2VcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRvcE5laWdoYm9yICYmIGxlZnROZWlnaGJvciAmJiByaWdodE5laWdoYm9yICYmICFib3ROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICB0aWxlVHlwZSA9IFwiQm90dG9tRWRnZVwiO1xyXG4gICAgICAgICAgICAgICAgLy8gcmlnaHQgZWRnZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9wTmVpZ2hib3IgJiYgbGVmdE5laWdoYm9yICYmICFyaWdodE5laWdoYm9yICYmIGJvdE5laWdoYm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVUeXBlID0gXCJSaWdodEVkZ2VcIjtcclxuICAgICAgICAgICAgICAgIC8vIGxlZnQgZWRnZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9wTmVpZ2hib3IgJiYgIWxlZnROZWlnaGJvciAmJiByaWdodE5laWdoYm9yICYmIGJvdE5laWdoYm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVUeXBlID0gXCJMZWZ0RWRnZVwiO1xyXG4gICAgICAgICAgICAgICAgLy8gdG9wIGxlZnQgY29ybmVyXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdG9wTmVpZ2hib3IgJiYgIWxlZnROZWlnaGJvciAmJiByaWdodE5laWdoYm9yICYmIGJvdE5laWdoYm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVUeXBlID0gXCJUTENvcm5lclwiO1xyXG4gICAgICAgICAgICAgICAgLy8gdG9wIHJpZ2h0IGNvcm5lclxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXRvcE5laWdoYm9yICYmIGxlZnROZWlnaGJvciAmJiAhcmlnaHROZWlnaGJvciAmJiBib3ROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICB0aWxlVHlwZSA9IFwiVFJDb3JuZXJcIjtcclxuICAgICAgICAgICAgICAgIC8vIGJvdHRvbSBsZWZ0IGNvcm5lclxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9wTmVpZ2hib3IgJiYgIWxlZnROZWlnaGJvciAmJiByaWdodE5laWdoYm9yICYmICFib3ROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICB0aWxlVHlwZSA9IFwiQkxDb3JuZXJcIjtcclxuICAgICAgICAgICAgICAgIC8vIGJvdHRvbSByaWdodCBjb3JuZXJcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRvcE5laWdoYm9yICYmIGxlZnROZWlnaGJvciAmJiAhcmlnaHROZWlnaGJvciAmJiAhYm90TmVpZ2hib3IpXHJcbiAgICAgICAgICAgICAgICAgICAgdGlsZVR5cGUgPSBcIkJSQ29ybmVyXCI7XHJcbiAgICAgICAgICAgICAgICAvLyB3YW5nXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgodG9wTmVpZ2hib3IgKyBsZWZ0TmVpZ2hib3IgKyByaWdodE5laWdoYm9yICsgYm90TmVpZ2hib3IpID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgdGlsZVR5cGUgPSBcIldhbmdcIjtcclxuICAgICAgICAgICAgICAgIC8vIHNoYWZ0XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoKHRvcE5laWdoYm9yICsgYm90TmVpZ2hib3IpID09IDIpIHx8ICgobGVmdE5laWdoYm9yICsgcmlnaHROZWlnaGJvcikgPT0gMikpXHJcbiAgICAgICAgICAgICAgICAgICAgdGlsZVR5cGUgPSBcIlNoYWZ0XCI7XHJcbiAgICAgICAgICAgICAgICAvLyBsb25lIHRpbGVcclxuICAgICAgICAgICAgICAgIGVsc2UgXHJcbiAgICAgICAgICAgICAgICAgICAgdGlsZVR5cGUgPSBcIkxvbmVyXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYWRqdXN0IGRpbWVuc2lvbnMgYW5kIGFkZCB0byBjb250YWluZXJcclxuICAgICAgICAgICAgICAgIGlmICggdGlsZVR5cGUgKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3ByaXRlID0gbmV3IFBJWEkuU3ByaXRlLmZyb20odGhpcy50aWxlc2V0LmdldCh0aWxlVHlwZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZS53aWR0aCA9IHRpbGVTaXplICsyO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZS5oZWlnaHQgPSB0aWxlU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5jaG9yLnNldCgwLjUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZS5wb3NpdGlvbi54ID0geCp0aWxlU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUucG9zaXRpb24ueSA9IHkqdGlsZVNpemU7ICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aWxlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiV2FuZ1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlZnROZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5nbGUgPSA5MDsgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0b3BOZWlnaGJvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5nbGUgPSAxODA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyaWdodE5laWdoYm9yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5hbmdsZSA9IDI3MDsgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlNoYWZ0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVmdE5laWdoYm9yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5hbmdsZSA9IDkwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVDb250YWluZXIuYWRkQ2hpbGQoc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYmFja2dyb3VuZFRpbGluZygpe1xyXG4gICAgICAgIHRoaXMuYmdTY2FsZSA9IDI7XHJcbiAgICAgICAgbGV0IGJnU3ByaXRlID0gbmV3IFBJWEkuVGlsaW5nU3ByaXRlKHRoaXMudGlsZXNldC5nZXQoXCJCYWNrZ3JvdW5kXCIpLCB0aGlzLnRpbGVTaXplKiB0aGlzLncqIHRoaXMuYmdTY2FsZSwgdGhpcy50aWxlU2l6ZSogdGhpcy5oICogdGhpcy5iZ1NjYWxlKTtcclxuICAgICAgICBiZ1Nwcml0ZS54IC09ICh0aGlzLncgKiB0aGlzLnRpbGVTaXplICp0aGlzLmJnU2NhbGUpLzI7XHJcbiAgICAgICAgYmdTcHJpdGUueSAtPSAodGhpcy5oICogdGhpcy50aWxlU2l6ZSp0aGlzLmJnU2NhbGUpLzI7XHJcbiAgICAgICAgYmdTcHJpdGUudGlsZVNjYWxlLnggPSAodGhpcy50aWxlU2l6ZSAvIHRoaXMudGlsZXNldC5nZXQoXCJCYWNrZ3JvdW5kXCIpLndpZHRoKSouNzU7XHJcbiAgICAgICAgYmdTcHJpdGUudGlsZVNjYWxlLnkgPSAodGhpcy50aWxlU2l6ZSAvIHRoaXMudGlsZXNldC5nZXQoXCJCYWNrZ3JvdW5kXCIpLmhlaWdodCkqLjc1O1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbnRhaW5lci5hZGRDaGlsZChiZ1Nwcml0ZSk7XHJcbiAgICAgICAgdGhpcy5iZ1Nwcml0ZSA9IGJnU3ByaXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEZlYXR1cmVzKGZyZWVDZWxscywgdGlsZU1hcCl7XHJcbiAgICAgICAgZm9yICggbGV0IGtleSBvZiBmcmVlQ2VsbHMpe1xyXG4gICAgICAgICAgICBsZXQgcGFydHMgPSBrZXkuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICBsZXQgeCA9IHBhcnNlSW50KHBhcnRzWzBdKTtcclxuICAgICAgICAgICAgbGV0IHkgPSBwYXJzZUludChwYXJ0c1sxXSk7XHJcbiAgICAgICAgICAgIC8vIDEgaW4geCB0ZXN0XHJcbiAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKFJPVC5STkcuZ2V0VW5pZm9ybSgpICogMykgPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0b3AgbmVpZ2hib3IgdGlsZSBpcyBhIHdhbGxcclxuICAgICAgICAgICAgICAgIGlmICh0aWxlTWFwWyB4ICsnLCcrICh5LTEpXSA9PSAxIClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbGVTcHJpdGVJbml0KHgseSwgdGhpcy50aWxlc2V0LmdldChcIlNwaWtlc1wiKSk7XHJcbiAgICAgICAgICAgICAgICAgLy8gaWYgYm90dG9tIG5laWdoYm9yIHRpbGUgaXMgYSB3YWxsXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aWxlTWFwWyB4ICsnLCcrICh5KzEpXSA9PSAxKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyByYW5kb21seSBwaWNrIGJldHdlZW4gZ3Jhc3Mgc3ByaXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoTWF0aC5mbG9vcihST1QuUk5HLmdldFVuaWZvcm0oKSAqIDIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aWxlU3ByaXRlSW5pdCh4LHksIHRoaXMudGlsZXNldC5nZXQoXCJHcmFzcy0xXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbGVTcHJpdGVJbml0KHgseSwgdGhpcy50aWxlc2V0LmdldChcIkdyYXNzLTJcIiksKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQ2F0bmlwKG51bVNwYXducyl7XHJcbiAgICAgICAgZm9yIChsZXQgaT0wO2k8bnVtU3Bhd25zO2krKykge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSBNYXRoLmZsb29yKFJPVC5STkcuZ2V0VW5pZm9ybSgpICogdGhpcy5ncm91bmRUaWxlcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBsZXQga2V5ID0gdGhpcy5ncm91bmRUaWxlcy5zcGxpY2UoaW5kZXgsIDEpWzBdO1xyXG5cclxuICAgICAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgbGV0IHggPSBwYXJzZUludChwYXJ0c1swXSk7XHJcbiAgICAgICAgICAgIGxldCB5ID0gcGFyc2VJbnQocGFydHNbMV0pO1xyXG5cclxuICAgICAgICAgICAgeS09MTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGlsZU1hcFtrZXldID0gXCJOXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGFkZCBjYXRuaXAgc3ByaXRlcyB0byBmb3JlZ3JvdW5kIGNvbnRhaW5lclxyXG4gICAgYWRkQ2F0bmlwKCl7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGlsZU1hcCl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbGVNYXBba2V5XSA9PSAnTicpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KFwiLFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHBhcnNlSW50KHBhcnRzWzBdKTtcclxuICAgICAgICAgICAgICAgIGxldCB5ID0gcGFyc2VJbnQocGFydHNbMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgLy8gdGhpcy50aWxlU3ByaXRlSW5pdCh4LC0teSwgdGhpcy50aWxlc2V0LmdldChcImNhdG5pcFwiKSwgMy4wKTtcclxuICAgICAgICAgICAgICAgbGV0IGNhdG5pcCA9IG5ldyBQb3dlcnVwKHgqdGhpcy50aWxlU2l6ZSwgLS15KiB0aGlzLnRpbGVTaXplLCB0aGlzLnRpbGVzZXQuZ2V0KFwiY2F0bmlwXCIpKTtcclxuICAgICAgICAgICAgICAgdGhpcy5wb3dlcnVwcy5wdXNoKGNhdG5pcCk7XHJcblxyXG4gICAgICAgICAgICAgICB0aGlzLnRpbGVDb250YWluZXIuYWRkQ2hpbGQoY2F0bmlwLnNwcml0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge01hemVNYXAsIENlbGx1bGFyTWFwfSIsImV4cG9ydCBjbGFzcyBNeVRpbWVye1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVuZFRpbWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSBudWxsO1xyXG4gICAgICAgIC8vIHNhdmUgdGhlIGluaXQgdGltZSBvZiB0aGUgdGltZXIgY3V6IHdoeSBub3RcclxuICAgICAgICBsZXQgY2xvY2sgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuaW5pdFRpbWUgPSBjbG9jay5nZXRUaW1lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKXtcclxuICAgICAgIC8vIGlmICggISB0aGlzLmlzUnVubmluZyl7XHJcbiAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV0IGNsb2NrID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBjbG9jay5nZXRUaW1lKCk7XHJcbiAgICAgIC8vICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcCgpe1xyXG4gICAgICAgIGlmICggdGhpcy5pc1J1bm5pbmcgKSAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNoZWNrIGVsYXBzZWQgdGltZSB3aXRob3V0IHN0b3BwaW5nIHRoZSB0aW1lclxyXG4gICAgZ2V0RWxhcHNlZFRpbWUoKXtcclxuICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmcpe1xyXG4gICAgICAgICAgICBsZXQgY2xvY2sgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gKGNsb2NrLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcblxyXG59IiwiaW1wb3J0IE1hdHRlciBmcm9tICdtYXR0ZXItanMvYnVpbGQvbWF0dGVyLm1pbi5qcyc7XHJcbmltcG9ydCB7Qm91bmRhcnl9IGZyb20gXCIuL3RlcnJhaW4uanNcIjtcclxuaW1wb3J0IHtNeVRpbWVyfSBmcm9tIFwiLi9teVRpbWVyLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUGxheWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvc2l0aW9uLCBhbmltYXRpb25NYXApIHtcclxuICAgICAgICAvLyBzdG9yZSBtb3N0IHJlY2VudCBpbnB1dCBmb3IgbGVkZ2UgY2xpbWJpbmcgbG9naWNcclxuICAgICAgICB0aGlzLmxhc3RJbnB1dCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wcmV2VGltZVNjYWxlID0gMS4wO1xyXG4gICAgICAgIHRoaXMucHJldlZlbCA9IDAuMFxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uQ29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XHJcblxyXG4gICAgICAgIC8vIHBoeXNpY3MgdmFyaWFibGVzXHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBQSVhJLlBvaW50KHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xyXG4gICAgICAgIHRoaXMuc2NhbGUgPSAzLjU7XHJcbiAgICAgICAgdGhpcy5tYXhWZWwgPSA1O1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdE1heFZlbCA9IDU7XHJcbiAgICAgICAgdGhpcy50cmlwTWF4VmVsID0gNi41XHJcbiAgICAgICAgdGhpcy5qdW1wVmVsID0gLTI1O1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdEp1bXBWZWwgPSAtMjU7XHJcbiAgICAgICAgdGhpcy50cmlwSnVtcFZlbCA9IC0zMDtcclxuICAgICAgICB0aGlzLnVuU2NhbGVkSnVtcFZlbCA9IC0yNTtcclxuICAgICAgICB0aGlzLnhWZWwgPSAwO1xyXG5cclxuICAgICAgICAvLyBhY3Rpb24gZmxhZ3NcclxuICAgICAgICB0aGlzLmlzR3JvdW5kZWQgPSBmYWxzZSxcclxuICAgICAgICB0aGlzLmluU2xpZGUgPSBmYWxzZSxcclxuICAgICAgICB0aGlzLmluU2xvd0Rvd24gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmp1bXBJbnB1dCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNIYW5naW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jYW1lcmFTbmFwcGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmJvdW5jeUJ1ZyA9IDA7XHJcblxyXG4gICAgICAgIC8vIGNvbGxpc2lvbiBldmVudCB0aW1lclxyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uVGltZXIgPSBuZXcgTXlUaW1lcigpO1xyXG4gICAgICAgIHRoaXMud2FsbEp1bXBUaW1lciA9IG5ldyBNeVRpbWVyKCk7XHJcbiAgICAgICAgdGhpcy5sYXRlSnVtcER1cmF0aW9uID0gMjI1OyAvLyBob3cgbWFueSBtcyB0byBnaXZlIHRoZSBwbGF5ZXIgZm9yIGEgbGF0ZSBqdW1wIHdoZW4gZmFsbGluZyBvZmYgYSBsZWRnZVxyXG4gICAgICAgIHRoaXMuZmFsbERhbWFnZU1TID0gMTUwMDtcclxuICAgICAgICB0aGlzLmdyYXBwbGVNUyA9IDEyNTtcclxuXHJcbiAgICAgICAgLy8gYWNjZWxlcmF0aW9uIGxpbmVhcmx5IGluY3JlYXNlcyBmcm9tIDEuMCB0byAyLjUgb3ZlciB0aGUgZmlyc3QgNzUgdXBkYXRlcyBvZiBmYWxsaW5nXHJcbiAgICAgICAgdGhpcy5mYWxsRGFtYWdlVmVsID0gMTA7IFxyXG4gICAgICAgIHRoaXMuaWRsZUZyYW1lQ291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMubWF4SWRsZUZyYW1lcyA9IDYwO1xyXG5cclxuICAgICAgICAvLyBoZWxwIHdpdGggbGVkZ2UgY2xpbWJpbmdcclxuICAgICAgICB0aGlzLmNsaW1iVHJhbnNsYXRpb24gPSBuZXcgUElYSS5Qb2ludCgwLDApO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhTW92ZW1lbnQgPSBuZXcgUElYSS5Qb2ludCgwLDApO1xyXG5cclxuICAgICAgICAvLyB0byBjaGVjayBzcHJpdGUgZmxpcCBjb252ZW5pZW50bHlcclxuICAgICAgICB0aGlzLmZsaXAgPSBcImxlZnRcIjtcclxuXHJcbiAgICAgICAgLy8gS2V5LXZhbHVlIHBhaXJzIG9mIHN0cmluZ3MgYW5kIGFuaW1hdGlvbnNcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBhbmltYXRpb25NYXA7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uID0gXCJub25lXCI7XHJcblxyXG4gICAgICAgIC8vIGNvbGxpZGVyIGRpbWVuc2lvbnMsIHNldCB0byB0aGUgZGltZW5zaW9ucyBvZiB0aGUgd2FsayBhbmltYXRpb24gZm9yIG5vd1xyXG4gICAgICAgIHRoaXMuY29sbGlkZXJXaWR0aCA9IHRoaXMuYW5pbWF0aW9ucy5nZXQoXCJ3YWxrXCIpLndpZHRoO1xyXG4gICAgICAgIHRoaXMuY29sbGlkZXJIZWlnaHQgPSB0aGlzLmFuaW1hdGlvbnMuZ2V0KFwid2Fsa1wiKS5oZWlnaHQ7IFxyXG5cclxuICAgICAgICAvLyBjb2xsaXNpb24gYm94IGxpbmUgc2VnbWVudHNcclxuICAgICAgICB0aGlzLkEgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh0aGlzLnBvc2l0aW9uLnggLSAodGhpcy5jb2xsaWRlcldpZHRoLzIpLCB0aGlzLnBvc2l0aW9uLnkgLSAodGhpcy5jb2xsaWRlckhlaWdodC8yKSk7XHJcbiAgICAgICAgdGhpcy5CID0gTWF0dGVyLlZlY3Rvci5jcmVhdGUodGhpcy5wb3NpdGlvbi54ICsgKHRoaXMuY29sbGlkZXJXaWR0aC8yKSwgdGhpcy5wb3NpdGlvbi55IC0gKHRoaXMuY29sbGlkZXJIZWlnaHQvMikpO1xyXG4gICAgICAgIHRoaXMuQyA9IE1hdHRlci5WZWN0b3IuY3JlYXRlKHRoaXMucG9zaXRpb24ueCAtICh0aGlzLmNvbGxpZGVyV2lkdGgvMiksIHRoaXMucG9zaXRpb24ueSArICh0aGlzLmNvbGxpZGVySGVpZ2h0LzIpKTtcclxuICAgICAgICB0aGlzLkQgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh0aGlzLnBvc2l0aW9uLnggKyAodGhpcy5jb2xsaWRlcldpZHRoLzIpLCB0aGlzLnBvc2l0aW9uLnkgKyAodGhpcy5jb2xsaWRlckhlaWdodC8yKSk7XHJcbiAgICAgICAgLy8gYXJyYXkgb2YgdGhlIDQgY29sbGlzaW9uIGJveCBzZWdtZW50c1xyXG4gICAgICAgIHRoaXMuYm91bmRzID0gWyhuZXcgQm91bmRhcnkodGhpcy5BLngsIHRoaXMuQS55LCB0aGlzLkIueCwgdGhpcy5CLnkpKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgKG5ldyBCb3VuZGFyeSh0aGlzLkEueCwgdGhpcy5BLnksIHRoaXMuQy54LCB0aGlzLkMueSkpLCBcclxuICAgICAgICAgICAgICAgICAgICAobmV3IEJvdW5kYXJ5KHRoaXMuQy54LCB0aGlzLkMueSwgdGhpcy5ELngsIHRoaXMuRC55KSksIFxyXG4gICAgICAgICAgICAgICAgICAgIChuZXcgQm91bmRhcnkodGhpcy5CLngsIHRoaXMuQi55LCB0aGlzLkQueCwgdGhpcy5ELnkpKV07XHJcblxyXG4gICAgICAgIHRoaXMuYm9keSA9IG5ldyBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZSh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgdGhpcy5jb2xsaWRlcldpZHRoLCB0aGlzLmNvbGxpZGVySGVpZ2h0LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVuc2l0eTogMC4wMDA1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyaWN0aW9uQWlyOiAwLjA2LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RpdHV0aW9uOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyaWN0aW9uOiAwLjAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZXJ0aWE6IEluZmluaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7IFxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5mb3JFYWNoKCBhbmltYXRpb24gPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRhaW5lci5hZGRDaGlsZChhbmltYXRpb24pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUodGltZXNjYWxlKXsgIFxyXG4gICAgICAgIGlmICggIXRoaXMuaXNHcm91bmRlZCAmJiB0aGlzLmJvZHkudmVsb2NpdHkueSA+IDEgKXtcclxuICAgICAgICAgICAgdGhpcy5wcmV2VmVsID0gdGhpcy5ib2R5LnZlbG9jaXR5Lnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggdGhpcy53YWxsSnVtcFRpbWVyLmlzUnVubmluZyAmJiB0aGlzLndhbGxKdW1wVGltZXIuZ2V0RWxhcHNlZFRpbWUoKSA+IHRoaXMuZ3JhcHBsZU1TICkgIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIHRoaXMubGFzdElucHV0KTtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFdmVudCh7IHR5cGU6IFwiaW5wdXREb3duXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IHRoaXMubGFzdElucHV0IH0pO1xyXG4gICAgICAgICAgICB0aGlzLndhbGxKdW1wVGltZXIuc3RvcCgpO1xyXG4gICAgICAgIH0gICAgIFxyXG5cclxuICAgICAgICBpZiAoIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9PSBcInN0b3BcIiAmJiAhdGhpcy5hbmltYXRpb25zLmdldChcInN0b3BcIikucGxheWluZyl7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwiaWRsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9PSAnaWRsZScgJiYgIXRoaXMuYW5pbWF0aW9ucy5nZXQoXCJpZGxlXCIpLnBsYXlpbmcpe1xyXG4gICAgICAgICAgICB0aGlzLmlkbGVGcmFtZUNvdW50Kys7XHJcbiAgICAgICAgICAgIGlmICggdGhpcy5pZGxlRnJhbWVDb3VudCA+IHRoaXMubWF4SWRsZUZyYW1lcyApe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pZGxlRnJhbWVDb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcImlkbGVcIiwgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heElkbGVGcmFtZXMgPSBNYXRoLnJhbmRvbSgpICogMjAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAgICBcclxuICAgIFxyXG4gICAgICAgIC8vIHRyYW5zaXRpb24gZnJvbSBlbmQgb2YgY2xpbWJcclxuICAgICAgICBpZiAoIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9PSBcImNsaW1iXCIpe1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sYXN0SW5wdXQgIT0gXCJlbmRcIiAmJiB0aGlzLmxhc3RJbnB1dCAhPSB0aGlzLmZsaXAgJiYgdGhpcy5hbmltYXRpb25zLmdldChcImNsaW1iXCIpLmN1cnJlbnRGcmFtZSA8IDQgKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2xpbWIgY2FuY2VsXCIsIHRoaXMubGFzdElucHV0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwianVtcFwiLCA1KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxpcCh0aGlzLmxhc3RJbnB1dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzR3JvdW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5qdW1wSW5wdXQgPSBmYWxzZTsgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmFTbmFwcGVkID0gdHJ1ZTsgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBNYXR0ZXIuQm9keS5zZXRTdGF0aWModGhpcy5ib2R5LCBmYWxzZSk7ICBcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNIYW5naW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbHNlIGlmICghdGhpcy5hbmltYXRpb25zLmdldChcImNsaW1iXCIpLnBsYXlpbmcpIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIE1hdHRlci5Cb2R5LnNldFBvc2l0aW9uKHRoaXMuYm9keSwgbmV3IE1hdHRlci5WZWN0b3IuY3JlYXRlKHRoaXMuY2xpbWJUcmFuc2xhdGlvbi54LCB0aGlzLmNsaW1iVHJhbnNsYXRpb24ueSkpO1xyXG4gICAgICAgICAgICAgICAgTWF0dGVyLkJvZHkuc2V0VmVsb2NpdHkodGhpcy5ib2R5LCBuZXcgTWF0dGVyLlZlY3Rvci5jcmVhdGUoMCwwKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXN0SW5wdXQgIT0gdGhpcy5mbGlwKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnB1dCA9IFwiZW5kXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmxhc3RJbnB1dCl7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJpZ2h0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwid2Fsa1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy54VmVsID0gdGhpcy5tYXhWZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5TbG93RG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcIndhbGtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFZlbCA9IC10aGlzLm1heFZlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pblNsb3dEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwic3RvcFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pblNsb3dEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NrQ2FtZXJhKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmJvdW5jeUJ1ZylcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvdW5jeUJ1ZyA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0dyb3VuZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5qdW1wSW5wdXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNIYW5naW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBNYXR0ZXIuQm9keS5zZXRTdGF0aWModGhpcy5ib2R5LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgLy8gYXBwbHkgdmVsb2NpdHkgZnJvbSBpbnB1dFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTWF0dGVyLkJvZHkuc2V0VmVsb2NpdHkodGhpcy5ib2R5LCBuZXcgTWF0dGVyLlZlY3Rvci5jcmVhdGUodGhpcy54VmVsLCB0aGlzLmJvZHkudmVsb2NpdHkueSkgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE1vdmUgdGhlIHNwcml0ZXMgdG8gZm9sbG93IHRoZWlyIHBoeXNpY2lzIGJvZHlcclxuICAgICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMuYm9keS5wb3NpdGlvbi54LCB0aGlzLmJvZHkucG9zaXRpb24ueSk7XHJcblxyXG4gICAgICAgIC8vIGFwcGx5IGZyaWN0aW9uIGlmIG5lZWRlZFxyXG4gICAgICAgIGlmICggdGhpcy5pblNsb3dEb3duKXtcclxuICAgICAgICAgICAgdGhpcy5zbG93VmVsb2NpdHkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gY2hhbmdlIGFuaW1hdGlvbiBzcGVlZCB3aXRoIHRpbWVzY2FsZVxyXG4gICAgICAgIGlmICh0aW1lc2NhbGUgIT0gdGhpcy5wcmV2VGltZVNjYWxlKXtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHNwcml0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVzY2FsZSA9PSAwLjUpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvblNwZWVkICo9IDAuNTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5pbWF0aW9uU3BlZWQgKj0gMjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdGhpcy5wcmV2VGltZVNjYWxlID0gdGltZXNjYWxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGF0ZSBqdW1tcCBzeXN0ZW1cclxuICAgICAgICBsZXQgZmFsbEFuaW1hdGlvblRpbWUgPSAodGhpcy5sYXRlSnVtcER1cmF0aW9uLzUpIC8gdGltZXNjYWxlO1xyXG4gICAgICAgIGxldCB3YWl0VGltZTtcclxuICAgICAgICBpZiAodGhpcy5pblNsaWRlKXtcclxuICAgICAgICAgICAgZmFsbEFuaW1hdGlvblRpbWUgPSBmYWxsQW5pbWF0aW9uVGltZSAvIDI7XHJcbiAgICAgICAgICAgIHdhaXRUaW1lID0gZmFsbEFuaW1hdGlvblRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgd2FpdFRpbWUgPSB0aGlzLmxhdGVKdW1wRHVyYXRpb24gLyB0aW1lc2NhbGU7XHJcblxyXG4gICAgICAgIGlmICggIXRoaXMuaXNIYW5naW5nICYmIHRoaXMuY29sbGlzaW9uVGltZXIuaXNSdW5uaW5nICYmIHRoaXMuY29sbGlzaW9uVGltZXIuZ2V0RWxhcHNlZFRpbWUoKSAgPiBmYWxsQW5pbWF0aW9uVGltZSApe1xyXG4gICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcImp1bXBcIiwgNSk7XHJcbiAgICAgICAgfSAgICAgXHJcbiAgICAgICAgaWYgKCAhdGhpcy5pc0hhbmdpbmcgJiYgdGhpcy5jb2xsaXNpb25UaW1lci5pc1J1bm5pbmcgJiYgdGhpcy5jb2xsaXNpb25UaW1lci5nZXRFbGFwc2VkVGltZSgpICA+IHdhaXRUaW1lICl7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uVGltZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICB0aGlzLmlzR3JvdW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5pblNsaWRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuanVtcElucHV0ID0gZmFsc2U7ICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBNb3ZlIGFsbCBzcHJpdGVzXHJcbiAgICBzZXRQb3NpdGlvbihpeCxpeSkge1xyXG4gICAgICAgIC8vIG1vdmUgb3JpZ2luIHBvaW50XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi54ID0gaXg7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0gaXk7XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgY29sbGlzaW9uIGJvdW5kYXJpZXNcclxuICAgICAgICB0aGlzLkEgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh0aGlzLnBvc2l0aW9uLnggLSAodGhpcy5jb2xsaWRlcldpZHRoLzIpLCB0aGlzLnBvc2l0aW9uLnkgLSAodGhpcy5jb2xsaWRlckhlaWdodC8yKSk7XHJcbiAgICAgICAgdGhpcy5CID0gTWF0dGVyLlZlY3Rvci5jcmVhdGUodGhpcy5wb3NpdGlvbi54ICsgKHRoaXMuY29sbGlkZXJXaWR0aC8yKSwgdGhpcy5wb3NpdGlvbi55IC0gKHRoaXMuY29sbGlkZXJIZWlnaHQvMikpO1xyXG4gICAgICAgIHRoaXMuQyA9IE1hdHRlci5WZWN0b3IuY3JlYXRlKHRoaXMucG9zaXRpb24ueCAtICh0aGlzLmNvbGxpZGVyV2lkdGgvMiksIHRoaXMucG9zaXRpb24ueSArICh0aGlzLmNvbGxpZGVySGVpZ2h0LzIpKTtcclxuICAgICAgICB0aGlzLkQgPSBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh0aGlzLnBvc2l0aW9uLnggKyAodGhpcy5jb2xsaWRlcldpZHRoLzIpLCB0aGlzLnBvc2l0aW9uLnkgKyAodGhpcy5jb2xsaWRlckhlaWdodC8yKSk7XHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBbKG5ldyBCb3VuZGFyeSh0aGlzLkEueCwgdGhpcy5BLnksIHRoaXMuQi54LCB0aGlzLkIueSkpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAobmV3IEJvdW5kYXJ5KHRoaXMuQS54LCB0aGlzLkEueSwgdGhpcy5DLngsIHRoaXMuQy55KSksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIChuZXcgQm91bmRhcnkodGhpcy5DLngsIHRoaXMuQy55LCB0aGlzLkQueCwgdGhpcy5ELnkpKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgKG5ldyBCb3VuZGFyeSh0aGlzLkIueCwgdGhpcy5CLnksIHRoaXMuRC54LCB0aGlzLkQueSkpXTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBtb3ZlIGFuaW1hdGlvbiBzcHJpdGVzICAgICAgICAgICAgICBcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3ByaXRlKSB7XHJcbiAgICAgICAgICAgIHNwcml0ZS54ID0gaXg7XHJcbiAgICAgICAgICAgIHNwcml0ZS55ID0gaXk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBjaGFuZ2UgYWN0aXZlIGFuaW1hdGlvbiwgcGxheSBhdCBnaXZlbiBmcmFtZVxyXG4gICAgc2V0QW5pbWF0aW9uKGtleSwgZnJhbWUgPSAwLCBvdmVycmlkZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgLy8gY2xlYXIgYWxsIHByZXZpb3VzIGFuaW1hdGlvbnNcclxuICAgICAgICBpZiAoIGtleSAhPSB0aGlzLmN1cnJlbnRBbmltYXRpb24gfHwgb3ZlcnJpZGUgKXtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uID0ga2V5O1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdmFyIGFjdGl2ZUFuaW0gPSB0aGlzLmFuaW1hdGlvbnMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIGFjdGl2ZUFuaW0udmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGFjdGl2ZUFuaW0uZ290b0FuZFBsYXkoZnJhbWUpO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMuc2V0KGtleSwgYWN0aXZlQW5pbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBcclxuICAgIFxyXG4gICAgLy8gZmxpcCBzcHJpdGVzIGFyb3VuZCB5IGF4aXMgXHJcbiAgICBzZXRGbGlwKGRpcikge1xyXG4gICAgICAgIHZhciBsb2NhbFNjYWxlO1xyXG4gICAgICAgIGlmICh0aGlzLmNhbWVyYVNuYXBwZWQpe1xyXG4gICAgICAgICAgICBpZiAoIGRpciA9PSBcInJpZ2h0XCIgKSB7XHJcbiAgICAgICAgICAgICAgICBsb2NhbFNjYWxlID0gLU1hdGguYWJzKHRoaXMuc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IC1NYXRoLmFicyh0aGlzLnNjYWxlKTs7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZsaXAgPSBcInJpZ2h0XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIGRpciA9PSBcImxlZnRcIikge1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTY2FsZSA9IE1hdGguYWJzKHRoaXMuc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IE1hdGguYWJzKHRoaXMuc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mbGlwID0gXCJsZWZ0XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5zY2FsZS54ID0gbG9jYWxTY2FsZTtcclxuICAgICAgICAgICAgfSkgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyBBaXIgZnJpY3Rpb24gZm9yIGR1bW1pZXNcclxuICAgIHNsb3dWZWxvY2l0eSgpIHtcclxuICAgICAgICBpZiAoIHRoaXMueFZlbCA+IDAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMueFZlbCAtPSAwLjE7XHJcbiAgICAgICAgICBpZiAoIHRoaXMueFZlbCA8PSAwICkge1xyXG4gICAgICAgICAgICB0aGlzLnhWZWwgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmluU2xvd0Rvd24gPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIHRoaXMueFZlbCA8IDAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMueFZlbCArPSAwLjFcclxuICAgICAgICAgIGlmICggdGhpcy54VmVsID49IDAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMueFZlbCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuaW5TbG93RG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkcmF3Q29sbGlkZXIocmVuZGVyZXIpe1xyXG4gICAgICAgIHJlbmRlcmVyLmNsZWFyKCk7XHJcbiAgICAgICAgcmVuZGVyZXIuYmVnaW5GaWxsKDB4ZmM4ODAzLCAwLjUpO1xyXG4gICAgICAgIHJlbmRlcmVyLmRyYXdSZWN0KCB0aGlzLnBvc2l0aW9uLnggLSAodGhpcy5jb2xsaWRlcldpZHRoLzIpICwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueSAtICh0aGlzLmNvbGxpZGVySGVpZ2h0LzIpIC0xLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsaWRlcldpZHRoICwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGlkZXJIZWlnaHQgKTtcclxuICAgICAgICByZW5kZXJlci5lbmRGaWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIGNhbWVyYSBtb3ZlbWVudCBkdXJpbmcgY2xpbWIgYW5pbWF0aW9uXHJcbiAgICBnZXRDbGltYkRpc3RhbmNlKHgseSl7XHJcbiAgICAgICAgY29uc3QgZnJhbWVzID0gdGhpcy5hbmltYXRpb25zLmdldChcImNsaW1iXCIpLnRvdGFsRnJhbWVzO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhTW92ZW1lbnQueCA9ICh4IC0gdGhpcy5wb3NpdGlvbi54KSAvICg5KjUpO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhTW92ZW1lbnQueSA9ICh5IC0gdGhpcy5wb3NpdGlvbi55KSAvICg5KjUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0TGVkZ2VDbGltYihsZWRnZVBvc2l0aW9uLCBpc1JpZ2h0TGVkZ2Upe1xyXG4gICAgICAgIGxldCBWZWN0b3IgPSBNYXR0ZXIuVmVjdG9yO1xyXG4gICAgICAgIHRoaXMuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNHcm91bmRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNIYW5naW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcImNsaW1iXCIpOyBcclxuICAgICAgICBsZXQgeE9mZnNldCA9IDQwLCAgIC8vIGhvdyBmYXIgYXdheSBmcm9tIHRoZSBsZWRnZSB3ZSB3aWxsIGFuY2hvciB0aGUgY2F0XHJcbiAgICAgICAgICAgIHlPZmZzZXQgPSAwLFxyXG4gICAgICAgICAgICB4Q2xpbWJPZmZzZXQgPSAtNjAsXHJcbiAgICAgICAgICAgIHlDbGltYk9mZnNldCA9IC01MjtcclxuICAgICAgICBpZiAoIGlzUmlnaHRMZWRnZSl7XHJcbiAgICAgICAgICB0aGlzLnNldEZsaXAoXCJsZWZ0XCIpO1xyXG4gICAgICAgIH0gIFxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICB4T2Zmc2V0ICo9IC0xO1xyXG4gICAgICAgICAgeENsaW1iT2Zmc2V0ICo9IC0xO1xyXG4gICAgICAgICAgdGhpcy5zZXRGbGlwKFwicmlnaHRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgLy8gbW92ZSB0aGUgcGxheWVyIHRvIGdyYWIgdGhlIGxlZGdlXHJcbiAgICAgICAgbGV0IGhhbmdQb3NpdGlvbiA9IG5ldyBWZWN0b3IuY3JlYXRlKGxlZGdlUG9zaXRpb24ueCArIHhPZmZzZXQsIGxlZGdlUG9zaXRpb24ueSArIHlPZmZzZXQpO1xyXG4gICAgICAgIE1hdHRlci5Cb2R5LnNldFN0YXRpYyh0aGlzLmJvZHksIHRydWUpO1xyXG4gICAgICAgIE1hdHRlci5Cb2R5LnNldFZlbG9jaXR5KHRoaXMuYm9keSwgbmV3IFZlY3Rvci5jcmVhdGUoMCwgMCkgKTtcclxuICAgICAgICBNYXR0ZXIuQm9keS5zZXRQb3NpdGlvbih0aGlzLmJvZHksIGhhbmdQb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5jbGltYlRyYW5zbGF0aW9uLnNldChoYW5nUG9zaXRpb24ueCArIHhDbGltYk9mZnNldCwgaGFuZ1Bvc2l0aW9uLnkgKyB5Q2xpbWJPZmZzZXQpO1xyXG4gICAgICAgIHRoaXMuZ2V0Q2xpbWJEaXN0YW5jZSh0aGlzLmNsaW1iVHJhbnNsYXRpb24ueCwgdGhpcy5jbGltYlRyYW5zbGF0aW9uLnkpO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhU25hcHBlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGxvY2tDYW1lcmEoKXtcclxuICAgICAgICB0aGlzLmNhbWVyYVNuYXBwZWQgPSB0cnVlOyBcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVFdmVudChldmVudCl7XHJcbiAgICAgICAgc3dpdGNoKGV2ZW50LnR5cGUpe1xyXG4gICAgICAgICAgICBjYXNlIFwiaW5wdXREb3duXCI6XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhldmVudC50eXBlLCBldmVudC5kaXJlY3Rpb24pXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goZXZlbnQuZGlyZWN0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXBcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8ganVtcCBmcm9tIGdyb3VuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMuaXNHcm91bmRlZCAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXR0ZXIuQm9keS5zZXRWZWxvY2l0eSh0aGlzLmJvZHksIE1hdHRlci5WZWN0b3IuY3JlYXRlKHRoaXMueFZlbCwgdGhpcy5qdW1wVmVsKSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9NYXR0ZXIuQm9keS5hcHBseUZvcmNlKHRoaXMuYm9keSwge3g6IHRoaXMucG9zaXRpb24ueCwgeTogdGhpcy5wb3NpdGlvbi55fSwge3g6IDAuMCwgeTogLTAuMX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcImp1bXBcIiwgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzR3JvdW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuanVtcElucHV0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGp1bXAgZnJvbSB3YWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCB0aGlzLmluU2xpZGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndhbGxKdW1wVGltZXIuc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJpZ2h0IHNpZGUgb2YgY2F0IGlzIGluIGNvbnRhY3Qgd2l0aCB3YWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMuZmxpcCA9PSBcInJpZ2h0XCIgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGbGlwKFwibGVmdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnhWZWwgPSAtdGhpcy5tYXhWZWwgKiAxLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0dGVyLkJvZHkuc2V0VmVsb2NpdHkodGhpcy5ib2R5LCBNYXR0ZXIuVmVjdG9yLmNyZWF0ZSh0aGlzLnhWZWwsIC44NSp0aGlzLmp1bXBWZWwpICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oXCJqdW1wXCIsIDAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuanVtcElucHV0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGxlZnQgc2lkZSBvZiBjYXQgaXMgaW4gY29udGFjdCB3aXRoIHdhbGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZmxpcCA9PSBcImxlZnRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxpcChcInJpZ2h0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFZlbCA9IHRoaXMubWF4VmVsICogMS41O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdHRlci5Cb2R5LnNldFZlbG9jaXR5KHRoaXMuYm9keSwgTWF0dGVyLlZlY3Rvci5jcmVhdGUodGhpcy54VmVsLCAuODUqdGhpcy5qdW1wVmVsKSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwianVtcFwiLCAwLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluU2xpZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmp1bXBJbnB1dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkb3duXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0dyb3VuZGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oXCJ3YWxrXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZsaXAoXCJyaWdodFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pblNsb3dEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFZlbCA9IHRoaXMubWF4VmVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnB1dCA9IFwicmlnaHRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNHcm91bmRlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwid2Fsa1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGbGlwKFwibGVmdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pblNsb3dEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFZlbCA9IC10aGlzLm1heFZlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0SW5wdXQgPSBcImxlZnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiaW5wdXRVcFwiOlxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZXZlbnQudHlwZSwgZXZlbnQuZGlyZWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKGV2ZW50LmRpcmVjdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVwXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkb3duXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnB1dCA9IFwiZW5kXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLmlzR3JvdW5kZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihcInN0b3BcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnhWZWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pblNsb3dEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnB1dCA9IFwiZW5kXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5pc0dyb3VuZGVkICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oXCJzdG9wXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy54VmVsID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5TbG93RG93biA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07IiwiLy8gaW1wb3J0IG5pcHBsZWpzIGZyb20gJ25pcHBsZWpzL2Rpc3QvbmlwcGxlanMuanMnO1xyXG4vLyBpbXBvcnQgTWF0dGVyIGZyb20gJ21hdHRlci1qcy9idWlsZC9tYXR0ZXIubWluLmpzJztcclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBDb250cm9sbGVye1xyXG4vLyAgICAgLy8gcGFzcyBieSByZWZlcmVuY2UgZm9yIGR1bW1pZXNcclxuLy8gICAgIGNvbnN0cnVjdG9yKGNhdFBsYXllciwgY2F0Qm9keSkge1xyXG4vLyAgICAgICAgIC8vIGluaXQgam95c3RpY2tcclxuLy8gICAgICAgICB2YXIgb3B0aW9ucyA9IHsgbW9kZSA6ICdzdGF0aWMnLFxyXG4vLyAgICAgICAgIHBvc2l0aW9uOiB7IGxlZnQ6ICcyNSUnLCB0b3A6ICc4MCUnfSxcclxuLy8gICAgICAgICB6b25lIDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215Q2FudmFzJylcclxuLy8gICAgICAgfTtcclxuLy8gICAgICAgICB0aGlzLm1hbmFnZXIgPSBuaXBwbGVqcy5jcmVhdGUob3B0aW9ucyk7XHJcblxyXG4vLyAgICAgICAgIC8vIGJpbmQgam95c3RpY2sgZXZlbnRzIHRvIGdhbWUgYWN0aW9uc1xyXG4vLyAgICAgICAgIHRoaXMubWFuYWdlci5vbignc3RhcnQnLCBmdW5jdGlvbiAoZXZ0LCBuaXBwbGUpIHtcclxuLy8gICAgICAgICAgIC8vIG1vb253YWxrXHJcbi8vICAgICAgICAgICBpZiAoY2F0UGxheWVyLmlzR3JvdW5kZWQpIHtcclxuLy8gICAgICAgICAgICAgY2F0UGxheWVyLnNldEFuaW1hdGlvbihcIndhbGtcIik7XHJcbi8vICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAvLyB3YWxrIHJpZ2h0XHJcbi8vICAgICAgICAgICBuaXBwbGUub24oJ2RpcjpyaWdodCcsIGZ1bmN0aW9uIChldnQpIHtcclxuLy8gICAgICAgICAgICAgaWYgKCFjYXRQbGF5ZXIuaXNIYW5naW5nKXtcclxuLy8gICAgICAgICAgICAgICBpZiAoY2F0UGxheWVyLmlzR3JvdW5kZWQpXHJcbi8vICAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuc2V0QW5pbWF0aW9uKFwid2Fsa1wiKTtcclxuLy8gICAgICAgICAgICAgICBjYXRQbGF5ZXIuc2V0RmxpcChcInJpZ2h0XCIpO1xyXG4vLyAgICAgICAgICAgICAgIGNhdFBsYXllci5pblNsb3dEb3duID0gZmFsc2U7XHJcbi8vICAgICAgICAgICAgICAgY2F0UGxheWVyLnhWZWwgPSBjYXRQbGF5ZXIubWF4VmVsO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGNhdFBsYXllci5sYXN0SW5wdXQgPSBcInJpZ2h0XCI7XHJcbi8vICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICAgIC8vIHdhbGsgbGVmdFxyXG4vLyAgICAgICAgICAgbmlwcGxlLm9uKCdkaXI6bGVmdCcsIGZ1bmN0aW9uIChldnQpIHsgXHJcbi8vICAgICAgICAgICAgIGlmICghY2F0UGxheWVyLmlzSGFuZ2luZyl7IFxyXG4vLyAgICAgICAgICAgICAgIGlmIChjYXRQbGF5ZXIuaXNHcm91bmRlZClcclxuLy8gICAgICAgICAgICAgICAgIGNhdFBsYXllci5zZXRBbmltYXRpb24oXCJ3YWxrXCIpO1xyXG4vLyAgICAgICAgICAgICAgIGNhdFBsYXllci5zZXRGbGlwKFwibGVmdFwiKTtcclxuLy8gICAgICAgICAgICAgICBjYXRQbGF5ZXIuaW5TbG93RG93biA9IGZhbHNlO1xyXG4vLyAgICAgICAgICAgICAgIGNhdFBsYXllci54VmVsID0gLWNhdFBsYXllci5tYXhWZWw7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgY2F0UGxheWVyLmxhc3RJbnB1dCA9IFwibGVmdFwiO1xyXG4vLyAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICAvLyBqdW1wIFxyXG4vLyAgICAgICAgICAgbmlwcGxlLm9uKCdkaXI6dXAnLCBmdW5jdGlvbihldnQpIHtcclxuLy8gICAgICAgICAgICAgLy8ganVtcCBmcm9tIGdyb3VuZFxyXG4vLyAgICAgICAgICAgICBpZiAoIWNhdFBsYXllci5pc0hhbmdpbmcpeyBcclxuLy8gICAgICAgICAgICAgICBpZiAoIGNhdFBsYXllci5pc0dyb3VuZGVkICYmIGNhdFBsYXllci5jYW1lcmFTbmFwcGVkICkge1xyXG4vLyAgICAgICAgICAgICAgICAgTWF0dGVyLkJvZHkuc2V0VmVsb2NpdHkoY2F0Qm9keSwgTWF0dGVyLlZlY3Rvci5jcmVhdGUoY2F0UGxheWVyLnhWZWwsIGNhdFBsYXllci5qdW1wVmVsKSApO1xyXG4vLyAgICAgICAgICAgICAgICAgY2F0UGxheWVyLnNldEFuaW1hdGlvbihcImp1bXBcIiwgMCwgdHJ1ZSk7XHJcbi8vICAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuaXNHcm91bmRlZCA9IGZhbHNlO1xyXG4vLyAgICAgICAgICAgICAgICAgY2F0UGxheWVyLmp1bXBJbnB1dCA9IHRydWU7XHJcbi8vICAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuaW5TbGlkZSA9IGZhbHNlO1xyXG4vLyAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAvLyBqdW1wIGZyb20gd2FsbFxyXG4vLyAgICAgICAgICAgICAgIGVsc2UgaWYgKCBjYXRQbGF5ZXIuaW5TbGlkZSAmJiBjYXRQbGF5ZXIuY2FtZXJhU25hcHBlZCApIHtcclxuLy8gICAgICAgICAgICAgICAgIC8vIGlmIHJpZ2h0IHNpZGUgb2YgY2F0IGlzIGluIGNvbnRhY3Qgd2l0aCB3YWxsXHJcbi8vICAgICAgICAgICAgICAgICBjYXRQbGF5ZXIud2FsbEp1bXBUaW1lci5zdGFydCgpO1xyXG4vLyAgICAgICAgICAgICAgICAgaWYgKCBjYXRQbGF5ZXIuZmxpcCA9PSBcInJpZ2h0XCIgKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgIGNhdFBsYXllci5zZXRGbGlwKFwibGVmdFwiKTtcclxuLy8gICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLnhWZWwgPSAtY2F0UGxheWVyLm1heFZlbCAqIDEuNTtcclxuLy8gICAgICAgICAgICAgICAgICAgTWF0dGVyLkJvZHkuc2V0VmVsb2NpdHkoY2F0Qm9keSwgTWF0dGVyLlZlY3Rvci5jcmVhdGUoY2F0UGxheWVyLnhWZWwsIC44NSpjYXRQbGF5ZXIuanVtcFZlbCkgKTtcclxuLy8gICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLnNldEFuaW1hdGlvbihcImp1bXBcIiwgMCwgdHJ1ZSk7XHJcbi8vICAgICAgICAgICAgICAgICAgIGNhdFBsYXllci5pblNsaWRlID0gZmFsc2U7XHJcbi8vICAgICAgICAgICAgICAgICAgIGNhdFBsYXllci5qdW1wSW5wdXQgPSB0cnVlO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgLy8gaWYgbGVmdCBzaWRlIG9mIGNhdCBpcyBpbiBjb250YWN0IHdpdGggd2FsbFxyXG4vLyAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2F0UGxheWVyLmZsaXAgPT0gXCJsZWZ0XCIpIHtcclxuLy8gICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLnNldEZsaXAoXCJyaWdodFwiKTtcclxuLy8gICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLnhWZWwgPSBjYXRQbGF5ZXIubWF4VmVsICogMS41O1xyXG4vLyAgICAgICAgICAgICAgICAgICBNYXR0ZXIuQm9keS5zZXRWZWxvY2l0eShjYXRCb2R5LCBNYXR0ZXIuVmVjdG9yLmNyZWF0ZShjYXRQbGF5ZXIueFZlbCwgLjg1KmNhdFBsYXllci5qdW1wVmVsKSApO1xyXG4vLyAgICAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuc2V0QW5pbWF0aW9uKFwianVtcFwiLCAwLCB0cnVlKTtcclxuLy8gICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLmluU2xpZGUgPSBmYWxzZTtcclxuLy8gICAgICAgICAgICAgICAgICAgY2F0UGxheWVyLmp1bXBJbnB1dCA9IHRydWU7XHJcbi8vICAgICAgICAgICAgICAgICB9ICAgIFxyXG4vLyAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICBuaXBwbGUub24oJ2VuZCcsIGZ1bmN0aW9uKGV2dCkge1xyXG4vLyAgICAgICAgICAgICAgIGNhdFBsYXllci5sYXN0SW5wdXQgPSBcImVuZFwiO1xyXG4vLyAgICAgICAgICAgICAgIGlmICggY2F0UGxheWVyLmlzR3JvdW5kZWQgKSB7XHJcbi8vICAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuc2V0QW5pbWF0aW9uKFwic3RvcFwiKTtcclxuLy8gICAgICAgICAgICAgICAgIGNhdFBsYXllci54VmVsID0gMDtcclxuLy8gICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgZWxzZSB7XHJcbi8vICAgICAgICAgICAgICAgICBjYXRQbGF5ZXIuaW5TbG93RG93biA9IHRydWU7XHJcbi8vICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuLy8gICAgICAgICAgIH0pO1xyXG4vLyAgICAgICAgIH0pXHJcbi8vICAgICB9XHJcbi8vIH0gXHJcblxyXG4vLyB1c2luZyBvbGQgc3ludGF4IGZvciBub3dcclxudmFyIEtCQ29udHJvbGxlciA9IGZ1bmN0aW9uKGNhdFBsYXllciwgY2F0Qm9keSwgZ2FtZVRpY2tlciwgY2FtZXJhLCBwYXVzZU1lbnUpIHtcclxuICAgIC8vIGtleWJvYXJkIGNvbnRyb2xzXHJcbiAgICB0aGlzLnJpZ2h0RG93biA9IGZhbHNlO1xyXG4gICAgdGhpcy5sZWZ0RG93biA9IGZhbHNlO1xyXG4gICAgZG9jdW1lbnQub25rZXlkb3duID0gY2hlY2tLZXlEb3duO1xyXG4gICAgZG9jdW1lbnQub25rZXl1cCA9IGNoZWNrS2V5VXA7XHJcbiAgICBmdW5jdGlvbiBjaGVja0tleURvd24oZSkge1xyXG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICBsZXQgbXlFdmVudCA9IHtcclxuICAgICAgICAgIHR5cGU6IFwiaW5wdXREb3duXCJ9O1xyXG5cclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09ICczOCcpIFxyXG4gICAgICAgICAgbXlFdmVudC5kaXJlY3Rpb24gPSBcInVwXCJcclxuXHJcbiAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09ICc0MCcpIFxyXG4gICAgICAgICAgbXlFdmVudC5kaXJlY3Rpb24gPSBcImRvd25cIjsgXHJcblxyXG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAnMzcnICYmICF0aGlzLmxlZnREb3duICkge1xyXG4gICAgICAgICAgbXlFdmVudC5kaXJlY3Rpb24gPSBcImxlZnRcIjtcclxuICAgICAgICAgIHRoaXMucmlnaHREb3duID0gZmFsc2U7XHJcbiAgICAgICAgICB0aGlzLmxlZnREb3duID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAnMzknICYmICF0aGlzLnJpZ2h0RG93biApIHtcclxuICAgICAgICAgIG15RXZlbnQuZGlyZWN0aW9uID0gXCJyaWdodFwiO1xyXG4gICAgICAgICAgdGhpcy5sZWZ0RG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgdGhpcy5yaWdodERvd24gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzcGFjZWJhclxyXG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAnMzInKXtcclxuICAgICAgICAgIGlmIChwYXVzZU1lbnUuaXNPcGVuKVxyXG4gICAgICAgICAgICBteUV2ZW50LmRpcmVjdGlvbiA9IFwiZW50ZXJcIlxyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgIGdhbWVUaWNrZXIuc3BlZWQgPSAwLjU7XHJcbiAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gJ3gnIGtleVxyXG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAnODgnKSB7XHJcbiAgICAgICAgICBjYXRQbGF5ZXIuc2hvd0RlYnVnICBePSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAnZicga2V5XHJcbiAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09ICc3MCcpIHtcclxuICAgICAgICAgIGNhbWVyYS5hZGRUcmF1bWEoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVzYyBrZXlcclxuICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gJzI3Jyl7XHJcbiAgICAgICAgICBwYXVzZU1lbnUub25DbGljayhnYW1lVGlja2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdXNlTWVudS5pc09wZW4pe1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAobXlFdmVudC5kaXJlY3Rpb24gPT0gXCJ1cFwiKVxyXG4gICAgICAgICAgICBteUV2ZW50LmRpcmVjdGlvbiA9IFwibGVmdFwiO1xyXG4gICAgICAgICAgZWxzZSBpZiAobXlFdmVudC5kaXJlY3Rpb24gPT0gXCJkb3duXCIpXHJcbiAgICAgICAgICAgIG15RXZlbnQuZGlyZWN0aW9uID0gXCJyaWdodFwiO1xyXG4gICAgICAgICAgcGF1c2VNZW51LmhhbmRsZUV2ZW50KG15RXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBjYXRQbGF5ZXIuaGFuZGxlRXZlbnQobXlFdmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrS2V5VXAoZSkge1xyXG5cclxuICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgbGV0IG15RXZlbnQgPSB7XHJcbiAgICAgICAgICB0eXBlOiBcImlucHV0VXBcIn07XHJcblxyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT0gJzM4Jykge1xyXG4gICAgICAgICAgICAvLyB1cCBhcnJvd1xyXG4gICAgICAgICAgICBteUV2ZW50LmRpcmVjdGlvbiA9IFwidXBcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gJzQwJykge1xyXG4gICAgICAgICAgICAvLyBkb3duIGFycm93XHJcbiAgICAgICAgICAgIG15RXZlbnQuZGlyZWN0aW9uID0gXCJkb3duXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09ICczNycgJiYgdGhpcy5sZWZ0RG93bikge1xyXG4gICAgICAgICAgbXlFdmVudC5kaXJlY3Rpb24gPSBcImxlZnRcIlxyXG4gICAgICAgICAgICB0aGlzLmxlZnREb3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gJzM5JyAmJiB0aGlzLnJpZ2h0RG93bikge1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0RG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBteUV2ZW50LmRpcmVjdGlvbiA9IFwicmlnaHRcIlxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09ICczMicpe1xyXG4gICAgICAgICAgaWYgKCFwYXVzZU1lbnUuaXNPcGVuKVxyXG4gICAgICAgICAgICBnYW1lVGlja2VyLnNwZWVkID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0UGxheWVyLmhhbmRsZUV2ZW50KG15RXZlbnQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5LQkNvbnRyb2xsZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gS0JDb250cm9sbGVyXHJcbmV4cG9ydCB7S0JDb250cm9sbGVyfTsiLCJleHBvcnQgY2xhc3MgU2hhZG93TWFwIHtcclxuICAgIGNvbnN0cnVjdG9yKGxpZ2h0cywgdGlsZU1hcCwgcmVuZGVyZXIpIHtcclxuICAgICAgICBsZXQgc2hhcGVyID0gbmV3IFBJWEkuR3JhcGhpY3MoKTtcclxuICAgICAgICB0aGlzLm1lc2ggPSBuZXcgUElYSS5HcmFwaGljcygpO1xyXG4gICAgICAgIGxldCBibHVyU2l6ZSA9IDMyO1xyXG5cclxuICAgICAgICBsZXQgdGlsZVNpemUgPSB0aWxlTWFwLnRpbGVTaXplXHJcbiAgICAgICAgbGV0IHcgPSB0aWxlTWFwLnc7XHJcbiAgICAgICAgbGV0IGggPSB0aWxlTWFwLmg7XHJcbiAgICAgICAgY29uc3QgYm91bmRzID0gbmV3IFBJWEkuUmVjdGFuZ2xlKC10aWxlU2l6ZS8yLCAtdGlsZVNpemUvMiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcqdGlsZVNpemUgLCBoKnRpbGVTaXplICk7XHJcblxyXG4gICAgICAgIC8vY29uc3QgYm91bmRzID0gbmV3IFBJWEkuUmVjdGFuZ2xlKC10aWxlU2l6ZS8yLCAtdGlsZVNpemUvMiwgNDAwMCw0MDAwKTtcclxuXHJcbiAgICAgICAgc2hhcGVyLmJlZ2luRmlsbCgweEZGRkZGRiwxKTtcclxuICAgICAgICBzaGFwZXIuZHJhd1JlY3QoLXRpbGVTaXplLzIsIC10aWxlU2l6ZS8yLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdyp0aWxlU2l6ZSAsIGgqdGlsZVNpemUgKTtcclxuICAgICAgICBzaGFwZXIuZW5kRmlsbCgpO1xyXG5cclxuXHJcbiAgICAgICAgbGlnaHRzLmZvckVhY2goIChsaWdodCkgPT4ge1xyXG4gICAgICAgICAgICBsaWdodC5saWdodENvbnRhaW5lci5jaGlsZHJlbi5mb3JFYWNoKCAobWVzaCkgPT57XHJcbiAgICAgICAgICAgICAgICBsZXQgZ2VvbWV0cnkgPSBtZXNoLmdlb21ldHJ5O1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB2ZXJ0aWNlcyA9IGdlb21ldHJ5LmdldEJ1ZmZlcihcImFWZXJ0ZXhQb3NpdGlvblwiKS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzaGFwZXIuYmVnaW5GaWxsKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgc2hhcGVyLm1vdmVUbyh2ZXJ0aWNlc1swXSwgdmVydGljZXNbMV0pO1xyXG4gICAgICAgICAgICAgICAgc2hhcGVyLmxpbmVUbyh2ZXJ0aWNlc1syXSwgdmVydGljZXNbM10pO1xyXG4gICAgICAgICAgICAgICAgc2hhcGVyLmxpbmVUbyh2ZXJ0aWNlc1s0XSwgdmVydGljZXNbNV0pO1xyXG4gICAgICAgICAgICAgICAgc2hhcGVyLmxpbmVUbyh2ZXJ0aWNlc1swXSwgdmVydGljZXNbMV0pO1xyXG4gICAgICAgICAgICAgICAgc2hhcGVyLmVuZEZpbGwoKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHNoYXBlci5maWx0ZXJzID0gW25ldyBQSVhJLmZpbHRlcnMuQmx1ckZpbHRlcihibHVyU2l6ZSldXHJcblxyXG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSByZW5kZXJlci5nZW5lcmF0ZVRleHR1cmUoc2hhcGVyLCBQSVhJLlNDQUxFX01PREVTLk5FQVJFU1QsIDEsIGJvdW5kcyk7XHJcbiAgICAgICAgdGhpcy5mb2N1cyA9IG5ldyBQSVhJLlNwcml0ZSh0ZXh0dXJlKTtcclxuICAgICAgICB0aGlzLmZvY3VzLnggPSAtdGlsZVNpemUvMjtcclxuICAgICAgICB0aGlzLmZvY3VzLnkgPSAtdGlsZVNpemUvMjtcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLmJlZ2luRmlsbCgweDAwMDAwMCwgMC40KTtcclxuICAgICAgICB0aGlzLm1lc2guZHJhd1JlY3QoLXRpbGVTaXplLzIsIC10aWxlU2l6ZS8yLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcqdGlsZVNpemUgLCBoKnRpbGVTaXplKTtcclxuICAgICAgICB0aGlzLm1lc2guZW5kRmlsbCgpO1xyXG5cclxuICAgICAgICB0aGlzLm1lc2gubWFzayA9IHRoaXMuZm9jdXM7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBtYWtlTm9pc2UyRCB9IGZyb20gXCJvcGVuLXNpbXBsZXgtbm9pc2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBNeUNhbWVyYSB7XHJcbiAgICBjb25zdHJ1Y3RvcihwbGF5ZXJQb3NpdGlvbil7XHJcbiAgICAgICAgdGhpcy50YXJnZXRQb3MgPSBwbGF5ZXJQb3NpdGlvbjtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcGxheWVyUG9zaXRpb247XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBuZXcgUElYSS5Qb2ludCgwLjAsMC4wKTtcclxuICAgICAgICB0aGlzLmFuZ2xlT2Zmc2V0ID0gMC4wO1xyXG4gICAgICAgIHRoaXMubWF4T2Zmc2V0ID0gMjUwO1xyXG4gICAgICAgIHRoaXMubWF4QW5nbGVPZmZzZXQgPSAxMDtcclxuICAgICAgICB0aGlzLmZsaXBPZmZzZXQgPSA3NTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNoYWtlID0gMC4wO1xyXG4gICAgICAgIHRoaXMudHJhdW1hID0gMC4wO1xyXG5cclxuICAgICAgICB0aGlzLmJhc2VTZWVkID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICAgICAgdGhpcy54Tm9pc2UgPSBtYWtlTm9pc2UyRCh0aGlzLmJhc2VTZWVkKTtcclxuICAgICAgICB0aGlzLnlOb2lzZSA9IG1ha2VOb2lzZTJEKHRoaXMuYmFzZVNlZWQrMSk7XHJcbiAgICAgICAgdGhpcy5yTm9pc2UgPSBtYWtlTm9pc2UyRCh0aGlzLmJhc2VTZWVkKzIpO1xyXG5cclxuICAgICAgICB0aGlzLm5vaXNlSW5jcmVtZW50ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUocGxheWVyUG9zaXRpb24sIGZsaXAsIHRpbWVzY2FsZSl7XHJcbiAgICAgICAgdGhpcy5ub2lzZUluY3JlbWVudCArPSB0aW1lc2NhbGU7XHJcbiAgICAgICAgdGhpcy50cmF1bWEgLT0gMC4wMTUgKiB0aW1lc2NhbGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCB0aGlzLnRyYXVtYSA8IDApXHJcbiAgICAgICAgICAgIHRoaXMudHJhdW1hID0gMDtcclxuICAgICAgICB0aGlzLnNoYWtlID0gTWF0aC5wb3codGhpcy50cmF1bWEsIDIpO1xyXG5cclxuICAgICAgICB0aGlzLnNpbXBsZXhTaGFrZSgpO1xyXG4gICAgICAgIGxldCB0YXJnZXRQb3NpdGlvbiA9IG5ldyBQSVhJLlBvaW50KCk7XHJcbiAgICAgICAgdGFyZ2V0UG9zaXRpb24uY29weUZyb20ocGxheWVyUG9zaXRpb24pO1xyXG4gICAgICAgIGlmICggZmxpcCA9PSBcInJpZ2h0XCIpXHJcbiAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uLnggKz0gdGhpcy5mbGlwT2Zmc2V0O1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGFyZ2V0UG9zaXRpb24ueCAtPSB0aGlzLmZsaXBPZmZzZXQ7XHJcblxyXG4gICAgICAgIC8vIHRoaXMucG9zaXRpb24uY29weUZyb20ocGxheWVyUG9zaXRpb24pO1xyXG5cclxuICAgICAgICB0aGlzLmFzeW1wdG90aWNBdmVyYWdlKHRhcmdldFBvc2l0aW9uLCAwLjA1KTtcclxuXHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi54ICs9IHRoaXMub2Zmc2V0Lng7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ICs9IHRoaXMub2Zmc2V0Lnk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkVHJhdW1hKHRyYXVtYSl7XHJcbiAgICAgICAgdGhpcy50cmF1bWEgKz0gdHJhdW1hO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidHJhdW1hICs9IFwiLCB0cmF1bWEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJhbmRvbVNoYWtlKCl7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQueCA9IHRoaXMubWF4T2Zmc2V0ICogdGhpcy5zaGFrZSAqIChNYXRoLnJhbmRvbSgpKjIgLTEpO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0LnkgPSB0aGlzLm1heE9mZnNldCAqIHRoaXMuc2hha2UgKiAoTWF0aC5yYW5kb20oKSoyIC0xKTtcclxuICAgICAgICB0aGlzLmFuZ2xlT2Zmc2V0ID0gdGhpcy5tYXhBbmdsZU9mZnNldCAqIHRoaXMuc2hha2UgKiAoTWF0aC5yYW5kb20oKSoyIC0xKTtcclxuICAgIH1cclxuXHJcbiAgICBzaW1wbGV4U2hha2UoKXtcclxuICAgICAgICB0aGlzLm9mZnNldC54ID0gdGhpcy5tYXhPZmZzZXQgKiB0aGlzLnNoYWtlICogdGhpcy54Tm9pc2UodGhpcy5ub2lzZUluY3JlbWVudCwgMCk7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQueSA9IHRoaXMubWF4T2Zmc2V0ICogdGhpcy5zaGFrZSAqIHRoaXMueU5vaXNlKHRoaXMubm9pc2VJbmNyZW1lbnQsIDApO1xyXG4gICAgICAgIHRoaXMuYW5nbGVPZmZzZXQgPSB0aGlzLm1heEFuZ2xlT2Zmc2V0ICogdGhpcy5zaGFrZSAqIHRoaXMuck5vaXNlKHRoaXMubm9pc2VJbmNyZW1lbnQsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW1wdG90aWNBdmVyYWdlKHRhcmdldCwgd2VpZ2h0KXtcclxuICAgICAgICBjb25zdCBpbnZlcnNlV2VpZ2h0ID0gMS4wIC0gd2VpZ2h0O1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCA9IGludmVyc2VXZWlnaHQgKiB0aGlzLnBvc2l0aW9uLnggKyB3ZWlnaHQqdGFyZ2V0Lng7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0gaW52ZXJzZVdlaWdodCAqIHRoaXMucG9zaXRpb24ueSArIHdlaWdodCp0YXJnZXQueTtcclxuICAgIH1cclxuXHJcbn0iLCJjbGFzcyBNeUJ1dHRvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0dXJlcyl7XHJcbiAgICAgICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVzID0gbmV3IE1hcChbW1widW5wcmVzc2VkXCIsbmV3IFBJWEkuU3ByaXRlLmZyb20odGV4dHVyZXNbMF0pXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJwcmVzc2VkXCIsIG5ldyBQSVhJLlNwcml0ZS5mcm9tKHRleHR1cmVzWzFdKV1dKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNwcml0ZXMuZm9yRWFjaCggKHNwcml0ZSkgPT4ge1xyXG4gICAgICAgICAgICBzcHJpdGUuaW50ZXJhY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICBzcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0KDcpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5zcHJpdGVzLmdldChcInVucHJlc3NlZFwiKS52aXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvblJlY3RhbmdsZSA9IG5ldyBQSVhJLlJlY3RhbmdsZSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiaGVsbG9cIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFBsYXllckJ1dHRvbiBleHRlbmRzIE15QnV0dG9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHRleHR1cmVzLCB0eXBlLCBwb3NpdGlvbiwgZXZlbnRDYWxsYmFjaywgcGF1c2VDYWxsYmFjayl7XHJcbiAgICAgICAgc3VwZXIodGV4dHVyZXMpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5ldmVudENhbGxiYWNrID0gZXZlbnRDYWxsYmFjaztcclxuICAgICAgICB0aGlzLnBhdXNlQ2FsbGJhY2sgPSBwYXVzZUNhbGxiYWNrO1xyXG5cclxuICAgICAgICB0aGlzLmluUGF1c2UgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goIChzcHJpdGUpID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLnBvc2l0aW9uLmNvcHlGcm9tKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgc3ByaXRlLmFscGhhID0gMC41O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuc3ByaXRlcy5nZXQoXCJ1bnByZXNzZWRcIikuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnNwcml0ZXMuZ2V0KFwidW5wcmVzc2VkXCIpLndpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUHJlc3MoKXtcclxuICAgICAgICB0aGlzLnN3YXBCdXR0b25zKCk7XHJcbiAgICAgICAgY29uc3QgZXZlbnQgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiaW5wdXREb3duXCIsXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogdGhpcy50eXBlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmluUGF1c2Upe1xyXG4gICAgICAgICAgICBpZiAoIGV2ZW50LmRpcmVjdGlvbiA9PSBcInVwXCIgKXtcclxuICAgICAgICAgICAgICAgIGV2ZW50LmRpcmVjdGlvbiA9IFwiZW50ZXJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnBhdXNlQ2FsbGJhY2soZXZlbnQpO1xyXG4gICAgICAgIH0gICAgICAgXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLmV2ZW50Q2FsbGJhY2soZXZlbnQpO1xyXG4gICAgICAgIHRoaXMucHJlc3NlZCA9IHRydWU7ICAgIFxyXG4gICAgfVxyXG5cclxuICAgIG9uRW5kKCl7XHJcbiAgICAgICAgdGhpcy5zd2FwQnV0dG9ucygpO1xyXG4gICAgICAgIGNvbnN0IGV2ZW50ID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBcImlucHV0VXBcIixcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiB0aGlzLnR5cGVcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaW5QYXVzZSlcclxuICAgICAgICAgICAgdGhpcy5wYXVzZUNhbGxiYWNrKGV2ZW50KTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRDYWxsYmFjayhldmVudCk7XHJcbiAgICAgICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3ZlKGV2ZW50KXtcclxuICAgICAgICBsZXQgcG9zaXRpb24gPSBldmVudC5kYXRhLmdsb2JhbDtcclxuICAgICAgICBpZiAoIHRoaXMucHJlc3NlZCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc3ByaXRlcy5nZXQoXCJwcmVzc2VkXCIpLmdldEJvdW5kcygpLmNvbnRhaW5zKHBvc2l0aW9uLngscG9zaXRpb24ueSkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIHRoaXMuc3ByaXRlcy5nZXQoXCJ1bnByZXNzZWRcIikuZ2V0Qm91bmRzKCkuY29udGFpbnMocG9zaXRpb24ueCxwb3NpdGlvbi55KSlcclxuICAgICAgICAgICAgICAgIHRoaXMub25QcmVzcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwb3NpdGlvbi54LCBwb3Npc3Rpb24ueSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3dhcEJ1dHRvbnMoKXtcclxuICAgICAgICBpZiAodGhpcy5zcHJpdGVzLmdldChcInVucHJlc3NlZFwiKS52aXNpYmxlKXtcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGVzLmdldChcInVucHJlc3NlZFwiKS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5nZXQoXCJwcmVzc2VkXCIpLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZXMuZ2V0KFwidW5wcmVzc2VkXCIpLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZXMuZ2V0KFwicHJlc3NlZFwiKS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldFBvc2l0aW9uKHBvc2l0aW9uLCBvZmZzZXQpe1xyXG4gICAgICAgIGxldCBuZXdQb3NpdGlvbiA9IG5ldyBQSVhJLlBvaW50KCk7XHJcbiAgICAgICAgbmV3UG9zaXRpb24uY29weUZyb20ocG9zaXRpb24pO1xyXG4gICAgICAgIG5ld1Bvc2l0aW9uLnggKz0gb2Zmc2V0Lng7XHJcbiAgICAgICAgbmV3UG9zaXRpb24ueSArPSBvZmZzZXQueTtcclxuICAgICAgICB0aGlzLnNwcml0ZXMuZm9yRWFjaCgoc3ByaXRlKSA9PiB7XHJcbiAgICAgICAgICAgIHNwcml0ZS5wb3NpdGlvbi5jb3B5RnJvbShuZXdQb3NpdGlvbik7XHJcbiAgICAgICAgfSApXHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEJ1dHRvbkNvbnRyb2xsZXJ7XHJcbiAgICBjb25zdHJ1Y3RvciggYnV0dG9uRnJhbWVzLCBwbGF5ZXJQb3MsIGV2ZW50Q2FsbGJhY2ssIHBhdXNlQ2FsbGJhY2ssIGNhbnZhc0NvbnRleHQsIHBhdXNlTWVudSl7XHJcbiAgICAgICAgdGhpcy5jbGllbnRUb3BMZWZ0ID0gbmV3IFBJWEkuUG9pbnQocGxheWVyUG9zLnggLSB3aW5kb3cuaW5uZXJXaWR0aCwgcGxheWVyUG9zLnkgLSB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jbGllbnRUb3BMZWZ0KVxyXG5cclxuICAgICAgICAvLyBhZGQgYnV0dG9uIGV2ZW50IGxpc3RlbmVycyB0byBjYW52YXNcclxuICAgICAgICBjYW52YXNDb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMuaGFuZGxlVG91Y2hlcy5iaW5kKHRoaXMpKTtcclxuICAgICAgICBjYW52YXNDb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLmhhbmRsZVRvdWNoZXMuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgY2FudmFzQ29udGV4dC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuaGFuZGxlVG91Y2hlcy5iaW5kKHRoaXMpKTtcclxuICAgICAgICBjYW52YXNDb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjbGljazogeDogXCIsIGV2ZW50LmNsaWVudFgsIFwieTogXCIsIGV2ZW50LmNsaWVudFkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gbWFrZSBidXR0b24gZGlzcGxheSBvYmplY3RzXHJcbiAgICAgICAgdGhpcy5idXR0b25Db250YWluZXIgPSBuZXcgUElYSS5Db250YWluZXIoKTtcclxuICAgICAgICB0aGlzLmJ1dHRvbnMgPSBuZXcgTWFwKFtbXCJsZWZ0XCIsIG5ldyBQbGF5ZXJCdXR0b24oYnV0dG9uRnJhbWVzLmdldChcImxlZnRcIiksIFwibGVmdFwiLHBsYXllclBvcywgZXZlbnRDYWxsYmFjaywgcGF1c2VDYWxsYmFjayldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInJpZ2h0XCIsIG5ldyBQbGF5ZXJCdXR0b24oYnV0dG9uRnJhbWVzLmdldChcInJpZ2h0XCIpLCBcInJpZ2h0XCIscGxheWVyUG9zLCBldmVudENhbGxiYWNrLCBwYXVzZUNhbGxiYWNrKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1widXBcIiwgbmV3IFBsYXllckJ1dHRvbihidXR0b25GcmFtZXMuZ2V0KFwidXBcIiksIFwidXBcIixwbGF5ZXJQb3MsIGV2ZW50Q2FsbGJhY2ssIHBhdXNlQ2FsbGJhY2spXV0pXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIC8vIGFkZCB0byBvbmUgcGFyZW50IGNvbnRhaW5lclxyXG4gICAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKCAoYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zcHJpdGVzLmZvckVhY2goIChzcHJpdGUgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbkNvbnRhaW5lci5hZGRDaGlsZCggc3ByaXRlICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyB3aW5kb3cgb2Zmc2V0cyBmb3IgYnV0dG9uc1xyXG4gICAgICAgIHRoaXMubGVmdEJ1dHRvbk9mZnNldCA9IG5ldyBQSVhJLlBvaW50KC13aW5kb3cuaW5uZXJXaWR0aCArIDEwLCB3aW5kb3cuaW5uZXJIZWlnaHQtICh0aGlzLmJ1dHRvbnMuZ2V0KFwibGVmdFwiKS5oZWlnaHQgKyAxMCkpO1xyXG4gICAgICAgIHRoaXMucmlnaHRCdXR0b25PZmZzZXQgPSBuZXcgUElYSS5Qb2ludCh0aGlzLmxlZnRCdXR0b25PZmZzZXQueCArIHRoaXMuYnV0dG9ucy5nZXQoXCJsZWZ0XCIpLndpZHRoICsgNSwgdGhpcy5sZWZ0QnV0dG9uT2Zmc2V0LnkpO1xyXG4gICAgICAgIHRoaXMudXBCdXR0b25PZmZzZXQgPSBuZXcgUElYSS5Qb2ludCh3aW5kb3cuaW5uZXJXaWR0aCAtIHRoaXMuYnV0dG9ucy5nZXQoXCJsZWZ0XCIpLndpZHRoIC0gIDUsIHRoaXMubGVmdEJ1dHRvbk9mZnNldC55KTtcclxuXHJcbiAgICAgICAgLy8gdGVzdCBidXR0b24gYm91bmRzXHJcbiAgICAgICAgbGV0IGxlZnRCdXR0b24gPSB0aGlzLmJ1dHRvbnMuZ2V0KFwibGVmdFwiKS5zcHJpdGVzLmdldChcInVucHJlc3NlZFwiKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhsZWZ0QnV0dG9uLmdldEJvdW5kcygpKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVUb3VjaGVzKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJ0b3VjaGVzOiBcIiwgZXZlbnQudG91Y2hlcy5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKCAoYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB0b3VjaEluQnV0dG9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGV2ZW50LnRvdWNoZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHRvdWNoID0gZXZlbnQudG91Y2hlcy5pdGVtKGkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCBidXR0b24uaW50ZXJhY3Rpb25SZWN0YW5nbGUuY29udGFpbnModG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WSkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hJbkJ1dHRvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCB0b3VjaEluQnV0dG9uICE9IGJ1dHRvbi5wcmVzc2VkICl7XHJcbiAgICAgICAgICAgICAgICBidXR0b24ucHJlc3NlZCA9IHRvdWNoSW5CdXR0b247XHJcbiAgICAgICAgICAgICAgICBpZiAoIGJ1dHRvbi5wcmVzc2VkIClcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24ub25QcmVzcygpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24ub25FbmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3ZlKGV2ZW50KXtcclxuICAgICAgICBsZXQgcG9zaXRpb24gPSBldmVudC5kYXRhLmdsb2JhbDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCggKGJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIGJ1dHRvbi5wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWJ1dHRvbi5zcHJpdGVzLmdldChcInByZXNzZWRcIikuZ2V0Qm91bmRzKCkuY29udGFpbnMocG9zaXRpb24ueCxwb3NpdGlvbi55KSlcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24ub25FbmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICggYnV0dG9uLnNwcml0ZXMuZ2V0KFwidW5wcmVzc2VkXCIpLmdldEJvdW5kcygpLmNvbnRhaW5zKHBvc2l0aW9uLngscG9zaXRpb24ueSkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLm9uUHJlc3MoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgbW92ZUJ1dHRvbnMoY2FtZXJhUG9zKXtcclxuICAgICAgICB0aGlzLmJ1dHRvbnMuZ2V0KFwibGVmdFwiKS5pbnRlcmFjdGlvblJlY3RhbmdsZSA9IHRoaXMuYnV0dG9ucy5nZXQoXCJsZWZ0XCIpLnNwcml0ZXMuZ2V0KFwidW5wcmVzc2VkXCIpLmdldEJvdW5kcygpO1xyXG4gICAgICAgIHRoaXMuYnV0dG9ucy5nZXQoXCJyaWdodFwiKS5pbnRlcmFjdGlvblJlY3RhbmdsZSA9IHRoaXMuYnV0dG9ucy5nZXQoXCJyaWdodFwiKS5zcHJpdGVzLmdldChcInVucHJlc3NlZFwiKS5nZXRCb3VuZHMoKTtcclxuICAgICAgICB0aGlzLmJ1dHRvbnMuZ2V0KFwidXBcIikuaW50ZXJhY3Rpb25SZWN0YW5nbGUgPSB0aGlzLmJ1dHRvbnMuZ2V0KFwidXBcIikuc3ByaXRlcy5nZXQoXCJ1bnByZXNzZWRcIikuZ2V0Qm91bmRzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuYnV0dG9ucy5nZXQoXCJsZWZ0XCIpLnNldFBvc2l0aW9uKGNhbWVyYVBvcywgdGhpcy5sZWZ0QnV0dG9uT2Zmc2V0KTtcclxuICAgICAgICB0aGlzLmJ1dHRvbnMuZ2V0KFwicmlnaHRcIikuc2V0UG9zaXRpb24oY2FtZXJhUG9zLCB0aGlzLnJpZ2h0QnV0dG9uT2Zmc2V0KTtcclxuICAgICAgICB0aGlzLmJ1dHRvbnMuZ2V0KFwidXBcIikuc2V0UG9zaXRpb24oY2FtZXJhUG9zLCB0aGlzLnVwQnV0dG9uT2Zmc2V0KTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uUmVzaXplKCl7XHJcbiAgICAgICAgdGhpcy5sZWZ0QnV0dG9uT2Zmc2V0ID0gbmV3IFBJWEkuUG9pbnQoLXdpbmRvdy5pbm5lcldpZHRoICsgMTAsIHdpbmRvdy5pbm5lckhlaWdodC0gKHRoaXMuYnV0dG9ucy5nZXQoXCJsZWZ0XCIpLmhlaWdodCArIDEwKSk7XHJcbiAgICAgICAgdGhpcy5yaWdodEJ1dHRvbk9mZnNldCA9IG5ldyBQSVhJLlBvaW50KHRoaXMubGVmdEJ1dHRvbk9mZnNldC54ICsgdGhpcy5idXR0b25zLmdldChcImxlZnRcIikud2lkdGggKyA1LCB0aGlzLmxlZnRCdXR0b25PZmZzZXQueSk7XHJcbiAgICAgICAgdGhpcy51cEJ1dHRvbk9mZnNldCA9IG5ldyBQSVhJLlBvaW50KHdpbmRvdy5pbm5lcldpZHRoIC0gdGhpcy5idXR0b25zLmdldChcImxlZnRcIikud2lkdGggLSAgNSwgdGhpcy5sZWZ0QnV0dG9uT2Zmc2V0LnkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge1BsYXllckJ1dHRvbiAsIE15QnV0dG9uLCBCdXR0b25Db250cm9sbGVyfTsiLCIvKiFcbiAqIEBwaXhpL2ZpbHRlci1jb2xvci1yZXBsYWNlIC0gdjMuMC4zXG4gKiBDb21waWxlZCBXZWQsIDI5IE1heSAyMDE5IDAzOjA0OjA1IFVUQ1xuICpcbiAqIEBwaXhpL2ZpbHRlci1jb2xvci1yZXBsYWNlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSAnQHBpeGkvY29yZSc7XG5pbXBvcnQgeyBoZXgycmdiLCByZ2IyaGV4IH0gZnJvbSAnQHBpeGkvdXRpbHMnO1xuXG52YXIgdmVydGV4ID0gXCJhdHRyaWJ1dGUgdmVjMiBhVmVydGV4UG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgYVRleHR1cmVDb29yZDtcXG5cXG51bmlmb3JtIG1hdDMgcHJvamVjdGlvbk1hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG52b2lkIG1haW4odm9pZClcXG57XFxuICAgIGdsX1Bvc2l0aW9uID0gdmVjNCgocHJvamVjdGlvbk1hdHJpeCAqIHZlYzMoYVZlcnRleFBvc2l0aW9uLCAxLjApKS54eSwgMC4wLCAxLjApO1xcbiAgICB2VGV4dHVyZUNvb3JkID0gYVRleHR1cmVDb29yZDtcXG59XCI7XG5cbnZhciBmcmFnbWVudCA9IFwidmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxudW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXI7XFxudW5pZm9ybSB2ZWMzIG9yaWdpbmFsQ29sb3I7XFxudW5pZm9ybSB2ZWMzIG5ld0NvbG9yO1xcbnVuaWZvcm0gZmxvYXQgZXBzaWxvbjtcXG52b2lkIG1haW4odm9pZCkge1xcbiAgICB2ZWM0IGN1cnJlbnRDb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlciwgdlRleHR1cmVDb29yZCk7XFxuICAgIHZlYzMgY29sb3JEaWZmID0gb3JpZ2luYWxDb2xvciAtIChjdXJyZW50Q29sb3IucmdiIC8gbWF4KGN1cnJlbnRDb2xvci5hLCAwLjAwMDAwMDAwMDEpKTtcXG4gICAgZmxvYXQgY29sb3JEaXN0YW5jZSA9IGxlbmd0aChjb2xvckRpZmYpO1xcbiAgICBmbG9hdCBkb1JlcGxhY2UgPSBzdGVwKGNvbG9yRGlzdGFuY2UsIGVwc2lsb24pO1xcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KG1peChjdXJyZW50Q29sb3IucmdiLCAobmV3Q29sb3IgKyBjb2xvckRpZmYpICogY3VycmVudENvbG9yLmEsIGRvUmVwbGFjZSksIGN1cnJlbnRDb2xvci5hKTtcXG59XFxuXCI7XG5cbi8qKlxuICogQ29sb3JSZXBsYWNlRmlsdGVyLCBvcmlnaW5hbGx5IGJ5IG1pc2hhYSwgdXBkYXRlZCBieSB0aW1ldG9jb2RlXG4gKiBodHRwOi8vd3d3Lmh0bWw1Z2FtZWRldnMuY29tL3RvcGljLzEwNjQwLW91dGxpbmUtYS1zcHJpdGUtY2hhbmdlLWNlcnRhaW4tY29sb3JzLz9wPTY5OTY2PGJyPlxuICogIVtvcmlnaW5hbF0oLi4vdG9vbHMvc2NyZWVuc2hvdHMvZGlzdC9vcmlnaW5hbC5wbmcpIVtmaWx0ZXJdKC4uL3Rvb2xzL3NjcmVlbnNob3RzL2Rpc3QvY29sb3ItcmVwbGFjZS5wbmcpXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLkZpbHRlclxuICogQG1lbWJlcm9mIFBJWEkuZmlsdGVyc1xuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHBpeGkvZmlsdGVyLWNvbG9yLXJlcGxhY2V8QHBpeGkvZmlsdGVyLWNvbG9yLXJlcGxhY2V9XG4gKiBAc2VlIHtAbGluayBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9waXhpLWZpbHRlcnN8cGl4aS1maWx0ZXJzfVxuICogQHBhcmFtIHtudW1iZXJ8QXJyYXk8bnVtYmVyPn0gW29yaWdpbmFsQ29sb3I9MHhGRjAwMDBdIFRoZSBjb2xvciB0aGF0IHdpbGwgYmUgY2hhbmdlZCwgYXMgYSAzIGNvbXBvbmVudCBSR0IgZS5nLiBbMS4wLCAxLjAsIDEuMF1cbiAqIEBwYXJhbSB7bnVtYmVyfEFycmF5PG51bWJlcj59IFtuZXdDb2xvcj0weDAwMDAwMF0gVGhlIHJlc3VsdGluZyBjb2xvciwgYXMgYSAzIGNvbXBvbmVudCBSR0IgZS5nLiBbMS4wLCAwLjUsIDEuMF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZXBzaWxvbj0wLjRdIFRvbGVyYW5jZS9zZW5zaXRpdml0eSBvZiB0aGUgZmxvYXRpbmctcG9pbnQgY29tcGFyaXNvbiBiZXR3ZWVuIGNvbG9ycyAobG93ZXIgPSBtb3JlIGV4YWN0LCBoaWdoZXIgPSBtb3JlIGluY2x1c2l2ZSlcbiAqXG4gKiBAZXhhbXBsZVxuICogIC8vIHJlcGxhY2VzIHRydWUgcmVkIHdpdGggdHJ1ZSBibHVlXG4gKiAgc29tZVNwcml0ZS5maWx0ZXJzID0gW25ldyBDb2xvclJlcGxhY2VGaWx0ZXIoXG4gKiAgIFsxLCAwLCAwXSxcbiAqICAgWzAsIDAsIDFdLFxuICogICAwLjAwMVxuICogICApXTtcbiAqICAvLyByZXBsYWNlcyB0aGUgUkdCIGNvbG9yIDIyMCwgMjIwLCAyMjAgd2l0aCB0aGUgUkdCIGNvbG9yIDIyNSwgMjAwLCAyMTVcbiAqICBzb21lT3RoZXJTcHJpdGUuZmlsdGVycyA9IFtuZXcgQ29sb3JSZXBsYWNlRmlsdGVyKFxuICogICBbMjIwLzI1NS4wLCAyMjAvMjU1LjAsIDIyMC8yNTUuMF0sXG4gKiAgIFsyMjUvMjU1LjAsIDIwMC8yNTUuMCwgMjE1LzI1NS4wXSxcbiAqICAgMC4wMDFcbiAqICAgKV07XG4gKiAgLy8gcmVwbGFjZXMgdGhlIFJHQiBjb2xvciAyMjAsIDIyMCwgMjIwIHdpdGggdGhlIFJHQiBjb2xvciAyMjUsIDIwMCwgMjE1XG4gKiAgc29tZU90aGVyU3ByaXRlLmZpbHRlcnMgPSBbbmV3IENvbG9yUmVwbGFjZUZpbHRlcigweGRjZGNkYywgMHhlMWM4ZDcsIDAuMDAxKV07XG4gKlxuICovXG52YXIgQ29sb3JSZXBsYWNlRmlsdGVyID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoRmlsdGVyKSB7XG4gICAgZnVuY3Rpb24gQ29sb3JSZXBsYWNlRmlsdGVyKG9yaWdpbmFsQ29sb3IsIG5ld0NvbG9yLCBlcHNpbG9uKSB7XG4gICAgICAgIGlmICggb3JpZ2luYWxDb2xvciA9PT0gdm9pZCAwICkgb3JpZ2luYWxDb2xvciA9IDB4RkYwMDAwO1xuICAgICAgICBpZiAoIG5ld0NvbG9yID09PSB2b2lkIDAgKSBuZXdDb2xvciA9IDB4MDAwMDAwO1xuICAgICAgICBpZiAoIGVwc2lsb24gPT09IHZvaWQgMCApIGVwc2lsb24gPSAwLjQ7XG5cbiAgICAgICAgRmlsdGVyLmNhbGwodGhpcywgdmVydGV4LCBmcmFnbWVudCk7XG4gICAgICAgIHRoaXMudW5pZm9ybXMub3JpZ2luYWxDb2xvciA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIHRoaXMudW5pZm9ybXMubmV3Q29sb3IgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgICAgICB0aGlzLm9yaWdpbmFsQ29sb3IgPSBvcmlnaW5hbENvbG9yO1xuICAgICAgICB0aGlzLm5ld0NvbG9yID0gbmV3Q29sb3I7XG4gICAgICAgIHRoaXMuZXBzaWxvbiA9IGVwc2lsb247XG4gICAgfVxuXG4gICAgaWYgKCBGaWx0ZXIgKSBDb2xvclJlcGxhY2VGaWx0ZXIuX19wcm90b19fID0gRmlsdGVyO1xuICAgIENvbG9yUmVwbGFjZUZpbHRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBGaWx0ZXIgJiYgRmlsdGVyLnByb3RvdHlwZSApO1xuICAgIENvbG9yUmVwbGFjZUZpbHRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb2xvclJlcGxhY2VGaWx0ZXI7XG5cbiAgICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBvcmlnaW5hbENvbG9yOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG5ld0NvbG9yOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGVwc2lsb246IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb2xvciB0aGF0IHdpbGwgYmUgY2hhbmdlZCwgYXMgYSAzIGNvbXBvbmVudCBSR0IgZS5nLiBbMS4wLCAxLjAsIDEuMF1cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ8QXJyYXk8bnVtYmVyPn1cbiAgICAgKiBAZGVmYXVsdCAweEZGMDAwMFxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5vcmlnaW5hbENvbG9yLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgYXJyID0gdGhpcy51bmlmb3Jtcy5vcmlnaW5hbENvbG9yO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaGV4MnJnYih2YWx1ZSwgYXJyKTtcbiAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsQ29sb3IgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFyclswXSA9IHZhbHVlWzBdO1xuICAgICAgICAgICAgYXJyWzFdID0gdmFsdWVbMV07XG4gICAgICAgICAgICBhcnJbMl0gPSB2YWx1ZVsyXTtcbiAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsQ29sb3IgPSByZ2IyaGV4KGFycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5vcmlnaW5hbENvbG9yLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yaWdpbmFsQ29sb3I7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHRpbmcgY29sb3IsIGFzIGEgMyBjb21wb25lbnQgUkdCIGUuZy4gWzEuMCwgMC41LCAxLjBdXG4gICAgICogQG1lbWJlciB7bnVtYmVyfEFycmF5PG51bWJlcj59XG4gICAgICogQGRlZmF1bHQgMHgwMDAwMDBcbiAgICAgKi9cbiAgICBwcm90b3R5cGVBY2Nlc3NvcnMubmV3Q29sb3Iuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBhcnIgPSB0aGlzLnVuaWZvcm1zLm5ld0NvbG9yO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaGV4MnJnYih2YWx1ZSwgYXJyKTtcbiAgICAgICAgICAgIHRoaXMuX25ld0NvbG9yID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhcnJbMF0gPSB2YWx1ZVswXTtcbiAgICAgICAgICAgIGFyclsxXSA9IHZhbHVlWzFdO1xuICAgICAgICAgICAgYXJyWzJdID0gdmFsdWVbMl07XG4gICAgICAgICAgICB0aGlzLl9uZXdDb2xvciA9IHJnYjJoZXgoYXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcHJvdG90eXBlQWNjZXNzb3JzLm5ld0NvbG9yLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25ld0NvbG9yO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUb2xlcmFuY2Uvc2Vuc2l0aXZpdHkgb2YgdGhlIGZsb2F0aW5nLXBvaW50IGNvbXBhcmlzb24gYmV0d2VlbiBjb2xvcnMgKGxvd2VyID0gbW9yZSBleGFjdCwgaGlnaGVyID0gbW9yZSBpbmNsdXNpdmUpXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDAuNFxuICAgICAqL1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5lcHNpbG9uLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmVwc2lsb24gPSB2YWx1ZTtcbiAgICB9O1xuICAgIHByb3RvdHlwZUFjY2Vzc29ycy5lcHNpbG9uLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZXBzaWxvbjtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIENvbG9yUmVwbGFjZUZpbHRlci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gICAgcmV0dXJuIENvbG9yUmVwbGFjZUZpbHRlcjtcbn0oRmlsdGVyKSk7XG5cbmV4cG9ydCB7IENvbG9yUmVwbGFjZUZpbHRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLWNvbG9yLXJlcGxhY2UuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHtDb2xvclJlcGxhY2VGaWx0ZXJ9IGZyb20gJ0BwaXhpL2ZpbHRlci1jb2xvci1yZXBsYWNlJztcclxuLyoqXHJcbiAqIFJldHJvIHN0eWxlIHBhdXNlIG1lbnUsIGNvbnRhaW5zIG9wdGlvbnMgZm9yOlxyXG4gKiAtIFBhbGV0dGUgc3dhcHBpbmcgXHJcbiAqIC0gUmVmcmVzaGluZyB0aGUgcGFnZVxyXG4gKiAtIEhpZGluZyBDb250cm9sbGVyIGJ1dHRvbnNcclxuICogLSBEaXNhYmxpbmcgc2NyZWVuIHNoYWtlXHJcbiAqIEBjbGFzc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBhdXNlTWVudXtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtNYXA8c3RyaW5nLCBQSVhJLlRleHR1cmU+fSBidXR0b25UZXh0dXJlcyAtIGJ1dHRvbiBzcHJpdGVzXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuVGV4dHVyZVtdfSBjb2xvck1hcHMgLSBhcnJheSBvZiBjb2xvciBtYXAgdGV4dHVyZXMgZm9yIHBhbGV0dGUgc3dhcHBpbmdcclxuICAgICAqIEBwYXJhbSB7UElYSS5Qb2ludH0gcGxheWVyUG9zIC0gc3RhcnRpbmcgcG9zaXRpb25cclxuICAgICAqIEBwYXJhbSB7UElYSS5Db250YWluZXJ9IGFuaW1hdGlvbkNvbnRhaW5lciAtIGFsbCBhbmltYXRpb25zIHRvIGJlIHBhdXNlZCBcclxuICAgICAqIEBwYXJhbSB7UElYSS5GaWx0ZXJ9IHBhbGV0dGVGaWx0ZXIgLSBwYWxldHRlIHN3YXAgcG9zdCBwcm9jZXNzaW5nIGZpbHRlclxyXG4gICAgICogQHBhcmFtIHtQSVhJLkNvbnRhaW5lcn0gcGxheWVyQW5pbWF0aW9ucyAtIGxhenkgZml4IGZvciBwbGF5ZXIgYW5pbWF0aW9ucyBiZWluZyBpbiB0aGVpciBvd24gY29udGFpbmVyIFxyXG4gICAgICogQHBhcmFtIHtQSVhJLlRpY2tlcn0gdGlja2VyIC0gZ2FtZSB1cGRhdGUgdGlja2VyXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuVGlja2VyfSBjYXRuaXBUaWNrZXIgLSB0aWNrZXIgZm9yIHRoZSBjYXRuaXAgdHJpcCBlZmZlY3RcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoYnV0dG9uVGV4dHVyZXMsIGNvbG9yTWFwcywgIHBsYXllclBvcywgYW5pbWF0aW9uQ29udGFpbmVyLCBwYWxldHRlRmlsdGVyLCBwbGF5ZXJBbmltYXRpb25zLCB0aWNrZXIsIGNhdG5pcFRpY2tlcikgICAgICAgICAgICAgICBcclxuICAgICAgICB7XHJcbiAgICAgICAgdGhpcy50aWNrZXIgPSB0aWNrZXI7XHJcbiAgICAgICAgdGhpcy5jYXRuaXBUaWNrZXIgPSBjYXRuaXBUaWNrZXI7XHJcbiAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmluUGFsZXR0ZU1lbnUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmluT3B0aW9uc01lbnUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbiA9IG5ldyBQYXVzZVRvZ2dsZUJ1dHRvbihbYnV0dG9uVGV4dHVyZXMuZ2V0KFwicGF1c2VcIiksIGJ1dHRvblRleHR1cmVzLmdldChcImV4aXRcIildKTtcclxuICAgICAgICB0aGlzLnBhbGV0dGVGaWx0ZXIgPSBwYWxldHRlRmlsdGVyO1xyXG4gICAgICAgIHRoaXMuY29sb3JNYXBzID0gY29sb3JNYXBzO1xyXG4gICAgICAgIHRoaXMucGxheWVyQW5pbWF0aW9ucyA9IHBsYXllckFuaW1hdGlvbnM7XHJcbiAgICAgICAgdGhpcy5jYW1lcmFTaGFrZSA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIG1lbnUgdGhlbWUgY29sb3JzIGNvcnJlc3BvbmRpbmcgdG8gZGlmZmVyZW50IGNvbG9yIHBhbGV0dGVzXHJcbiAgICAgICAgdGhpcy5tZW51Q29sb3JzID0gWzB4ZmZhMjUyLCAweDM5Mzg2MywgMHhiNWQzZGUsIDB4OTQ4YWJkIF1cclxuICAgICAgICBcclxuICAgICAgICAvLyB0aGlzLmF1ZGlvQ3R4ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xyXG4gICAgICAgIC8vIHRoaXMubXVzaWMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImF1ZGlvXCIpO1xyXG4gICAgICAgIC8vIHRoaXMubXVzaWMubG9vcCA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIHN1YnNjcmliZSBwYXVzZSBidXR0b24gdG8gY2xpY2sgYW5kIHRhcCBldmVudHNcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbi5zcHJpdGVzLmZvckVhY2goIChzcHJpdGUpID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLm9uKFwiY2xpY2tcIiwgdGhpcy5vbkNsaWNrLmJpbmQodGhpcywgdGlja2VyKSk7XHJcbiAgICAgICAgICAgIHNwcml0ZS5vbihcInRhcFwiLCB0aGlzLm9uQ2xpY2suYmluZCh0aGlzLCB0aWNrZXIpKTtcclxuICAgICAgICAgICAgc3ByaXRlLnBvc2l0aW9uLnNldChwbGF5ZXJQb3MueCwgcGxheWVyUG9zLnkpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vIGJsaW5raW5nIHBhdXNlZCB0ZXh0XHJcbiAgICAgICAgdGhpcy5wYXVzZWRUZXh0ID0gdGhpcy5zdGF0aWNUZXh0KGJ1dHRvblRleHR1cmVzKTtcclxuICAgICAgICB0aGlzLnBhdXNlVGlja2VyID0gbmV3IFBJWEkuVGlja2VyKCk7XHJcbiAgICAgICAgdGhpcy5wYXVzZVRpY2tlci5hZGQodGhpcy5wYXVzZUJsaW5rZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5QQVVTRV9CTElOS0VSX0lOVEVSVkFMID0gNTAwO1xyXG4gICAgICAgIHRoaXMucGF1c2VCbGlua2VyTGFnID0gMDtcclxuXHJcbiAgICAgICAgLy8gdG91Y2ggY29udHJvbHNcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbk9mZnNldCA9IG5ldyBQSVhJLlBvaW50KHdpbmRvdy5pbm5lcldpZHRoIC0gdGhpcy50b2dnbGVCdXR0b24ud2lkdGggLSAxNiwgLXdpbmRvdy5pbm5lckhlaWdodCArIDMyKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBhZGQgYWxsIGludGVyYWN0aXZlIGJ1dHRvbnMgdG8gb25lIGNvbnRhaW5lclxyXG4gICAgICAgIHRoaXMuYnV0dG9uQ29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgdGhpcy5idXR0b25Db250YWluZXIuYWRkQ2hpbGQoIHRoaXMudG9nZ2xlQnV0dG9uLmJ1dHRvbkNvbnRhaW5lciwgdGhpcy5wYXVzZWRUZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25Db250YWluZXIgPSBhbmltYXRpb25Db250YWluZXI7XHJcblxyXG4gICAgICAgIC8vIG1ha2UgbWVudSBsaXN0IG9iamVjdFxyXG4gICAgICAgIHRoaXMubWFpbk1lbnUgPSBuZXcgTWVudUxpc3QocGxheWVyUG9zKTtcclxuICAgICAgICB0aGlzLnBhbGV0dGVNZW51ID0gbmV3IFBhbGV0dGVNZW51TGlzdChwbGF5ZXJQb3MpO1xyXG4gICAgICAgIHRoaXMub3B0aW9uc01lbnUgPSBuZXcgT3B0aW9uc01lbnUocGxheWVyUG9zKTtcclxuXHJcbiAgICAgICAgdGhpcy5hY3RpdmVNZW51ID0gdGhpcy5tYWluTWVudTtcclxuICAgICAgICB0aGlzLnN1Yk1lbnVzID0gW3RoaXMubWFpbk1lbnUsIHRoaXMucGFsZXR0ZU1lbnUsIHRoaXMub3B0aW9uc01lbnVdO1xyXG5cclxuICAgICAgICB0aGlzLnN1Yk1lbnVzLmZvckVhY2goIHN1Yk1lbnUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmJ1dHRvbkNvbnRhaW5lci5hZGRDaGlsZChzdWJNZW51LmRpc3BsYXlDb250YWluZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBjb2xvclN3YXBwZXIgPSBuZXcgQ29sb3JSZXBsYWNlRmlsdGVyKDB4MTgxMDAwLCAweGZmYTI1MiwgMC4wMDEpO1xyXG4gICAgICAgIHRoaXMucGxheWVyQW5pbWF0aW9ucy5maWx0ZXJzID0gW2NvbG9yU3dhcHBlcl07XHJcblxyXG4gICAgICAgIHRoaXMuY2hhbmdlUGFsZXR0ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLnN1Yk1lbnVzLmZvckVhY2goIHN1Yk1lbnUgPT4ge1xyXG4gICAgICAgICAgICBzdWJNZW51LmRpc3BsYXlDb250YWluZXIuY2hpbGRyZW4uZm9yRWFjaCggaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBvbkNsaWNrKHRpY2tlcil7XHJcbiAgICAgICAgLy8gdG9nZ2xlIGJvb2xzXHJcbiAgICAgICAgdGhpcy5pc09wZW4gXj0gMTtcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbi5zcHJpdGVzLmZvckVhY2goIChzcHJpdGUpID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLnZpc2libGUgXj0gMTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuKXtcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmVNZW51Lm9uVG9nZ2xlKHRoaXMuaXNPcGVuKTtcclxuICAgICAgICAgICAgdGhpcy5pblBhbGV0dGVNZW51ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZU1lbnUub25Ub2dnbGUodGhpcy5pc09wZW4pO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZU1lbnUgPSB0aGlzLm1haW5NZW51O1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZU1lbnUub25Ub2dnbGUodGhpcy5pc09wZW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCB0aGlzLmNvbnRyb2xsZXIgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlci5idXR0b25zLmZvckVhY2goIGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uaW5QYXVzZSA9IHRoaXMuaXNPcGVuO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcGF1c2UgdGhlIGdhbWVcclxuICAgICAgICBpZiAodGhpcy5pc09wZW4pe1xyXG4gICAgICAgICAgIC8vIHRoaXMubXVzaWMucGxheSgpOyAgXHJcbiAgICAgICAgICAgLy8gdGhpcy5tdXNpYy5sb29wID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZVRpY2tlci5zdGFydCgpO1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlZFRleHQudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMucGF1c2VCbGlua2VyTGFnID0gMDtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZUJsaW5rZXIoKTtcclxuICAgICAgICAgICAgdGlja2VyLnNwZWVkID0gMDtcclxuICAgICAgICAgICAgdGhpcy5jYXRuaXBUaWNrZXIuc3BlZWQgPSAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250cm9sbGVyKXsgLy8gZGlzYWJsZSB0b3VjaCBjb250cm9scyBpZiBhcHBsaWNhYmxlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuYnV0dG9uQ29udGFpbmVyLmNoaWxkcmVuLmZvckVhY2goIChidXR0b24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24uaW50ZXJhY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcGF1c2UgYWxsIGFuaW1hdGlvbnNcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Db250YWluZXIuY2hpbGRyZW4uZm9yRWFjaCggKCBhbmltYXRpb24gKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uLnN0b3ApXHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnN0b3AoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJBbmltYXRpb25zLmNoaWxkcmVuLmZvckVhY2goIGFuaW1hdGlvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uc3RvcCgpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyByZXN1bWUgdGhlIGdhbWVcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5tdXNpYy5wYXVzZSgpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLm11c2ljLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRpY2tlci5zcGVlZCA9IDE7XHJcbiAgICAgICAgICAgIHRoaXMuY2F0bmlwVGlja2VyLnNwZWVkID0gMTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZWRUZXh0LnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZVRpY2tlci5zdG9wKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXIpeyAvLyBlbmFibGUgdG91Y2ggY29udHJvbHMgaWYgYXBwbGljYWJsZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyLmJ1dHRvbkNvbnRhaW5lci5jaGlsZHJlbi5mb3JFYWNoKCAoYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmludGVyYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcmVzdW1lIGFsbCBhbmltYXRpb25zXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uQ29udGFpbmVyLmNoaWxkcmVuLmZvckVhY2goICggYW5pbWF0aW9uICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5wbGF5KVxyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5KCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyQW5pbWF0aW9ucy5jaGlsZHJlbi5mb3JFYWNoKCBhbmltYXRpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnBsYXkoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlRXZlbnQoZXZlbnQpe1xyXG4gICAgICAgIGxldCBub1VwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSl7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpbnB1dERvd25cIjpcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJpZ2h0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5hY3RpdmVNZW51LmN1cnJlbnRJbmRleCA+PSB0aGlzLmFjdGl2ZU1lbnUub3B0aW9ucy5sZW5ndGggLSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVNZW51LmN1cnJlbnRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlTWVudS5jdXJyZW50SW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmFjdGl2ZU1lbnUuY3VycmVudEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZU1lbnUuY3VycmVudEtleSA9IHRoaXMuYWN0aXZlTWVudS5vcHRpb25zW2ldLmxhYmVsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLmluUGFsZXR0ZU1lbnUgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlUGFsZXR0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJsZWZ0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZU1lbnUuY3VycmVudEluZGV4ID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZU1lbnUuY3VycmVudEluZGV4ID0gdGhpcy5hY3RpdmVNZW51Lm9wdGlvbnMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVNZW51LmN1cnJlbnRJbmRleC0tO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaiA9IHRoaXMuYWN0aXZlTWVudS5jdXJyZW50SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlTWVudS5jdXJyZW50S2V5ID0gdGhpcy5hY3RpdmVNZW51Lm9wdGlvbnNbal0ubGFiZWw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMuaW5QYWxldHRlTWVudSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VQYWxldHRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVudGVyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVwXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggdGhpcy5hY3RpdmVNZW51LmN1cnJlbnRLZXkgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJSRVNVTUVcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ2xpY2sodGhpcy50aWNrZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlJFUk9MTFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25SZXJvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQQUxFVFRFXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9VcGRhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVBhbGxldGVNZW51KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vVXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiT1BUSU9OU1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vVXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVPcHRpb25zTWVudSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJCQUNLXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9VcGRhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZU9wdGlvbnNNZW51KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJISURFICAgQlVUVE9OUzogICBPTlwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkhJREUgICBCVVRUT05TOiAgIE9GRlwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5jb250cm9sbGVyICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlci5idXR0b25Db250YWluZXIudmlzaWJsZSBePSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2aXNpYmxlID0gdGhpcy5jb250cm9sbGVyLmJ1dHRvbkNvbnRhaW5lci52aXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbi5idXR0b25Db250YWluZXIuY2hpbGRyZW4uZm9yRWFjaCggc3ByaXRlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5hbHBoYSA9IDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5hbHBoYSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdmlzaWJsZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc01lbnUub3B0aW9uc1sxXS5pbmFjdGl2ZVNwcml0ZS50ZXh0ID0gXCJISURFICAgQlVUVE9OUzogICBPRkZcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc01lbnUub3B0aW9uc1sxXS5hY3RpdmVTcHJpdGUudGV4dCA9IFwiSElERSAgIEJVVFRPTlM6ICAgT0ZGXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNNZW51Lm9wdGlvbnNbMV0uaW5hY3RpdmVTcHJpdGUudGV4dCA9IFwiSElERSAgIEJVVFRPTlM6ICAgT05cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zTWVudS5vcHRpb25zWzFdLmFjdGl2ZVNwcml0ZS50ZXh0ID0gXCJISURFICAgQlVUVE9OUzogICBPTlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9VcGRhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJDQU1FUkEgICBTSEFLRTogICBPRkZcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJDQU1FUkEgICBTSEFLRTogICBPTlwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhU2hha2UgXj0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICB0aGlzLmNhbWVyYVNoYWtlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNNZW51Lm9wdGlvbnNbMl0uaW5hY3RpdmVTcHJpdGUudGV4dCA9IFwiQ0FNRVJBICAgU0hBS0U6ICAgT05cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zTWVudS5vcHRpb25zWzJdLmFjdGl2ZVNwcml0ZS50ZXh0ID0gXCJDQU1FUkEgICBTSEFLRTogICBPTlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zTWVudS5vcHRpb25zWzJdLmluYWN0aXZlU3ByaXRlLnRleHQgPSBcIkNBTUVSQSAgIFNIQUtFOiAgIE9GRlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc01lbnUub3B0aW9uc1syXS5hY3RpdmVTcHJpdGUudGV4dCA9IFwiQ0FNRVJBICAgU0hBS0U6ICAgT0ZGXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9VcGRhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vVXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVQYWxsZXRlTWVudShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFub1VwZGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZU1lbnUudXBkYXRlT3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlZnJlc2ggdGhlIHBhZ2UgdG8gZ2VuZXJhdGUgYSBuZXcgbWFwXHJcbiAgICBvblJlcm9sbCgpe1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2VQYWxldHRlKCl7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJBbmltYXRpb25zLmZpbHRlcnMubGVuZ3RoID0xO1xyXG4gICAgICAgIHN3aXRjaCAoIHRoaXMucGFsZXR0ZU1lbnUuY3VycmVudEtleSApe1xyXG4gICAgICAgICAgICBjYXNlIFwiU0lNQkFcIjogICAvLyBqdXN0IHVzZSB0aGUgZGVmYXVsdCBzcHJpdGVcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OiAgICAgICAvLyBhcHBseSBhIG5ldyBjb2xvciByZXBsYWNlbWVudCBmaWx0ZXJcclxuICAgICAgICAgICAgICAgIC8vIGNvbG9yIG1hcCBpbmRleCBpcyBvZmYgYnkgMSBjdXogdGhlIHNpbWJhIHBhbGV0dGUgZG9lc24ndCBoYXZlIGEgZmlsdGVyXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucGFsZXR0ZU1lbnUuY3VycmVudEluZGV4LTE7IFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWxldHRlRmlsdGVyLnVuaWZvcm1zLlBhbGV0dGUgPSB0aGlzLmNvbG9yTWFwc1tpbmRleF07IFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXJBbmltYXRpb25zLmZpbHRlcnMucHVzaCh0aGlzLnBhbGV0dGVGaWx0ZXIpOyAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gY2hhbmdlIHRoZSBmb250IGNvbG9yXHJcbiAgICAgICAgbGV0IG5ld1N0eWxlID0ge1xyXG4gICAgICAgICAgICBmaWxsOiB0aGlzLm1lbnVDb2xvcnNbdGhpcy5wYWxldHRlTWVudS5jdXJyZW50SW5kZXhdLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogNTIsXHJcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdBUkNBREVDTEFTU0lDJ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gZHJhdyBuZXcgbWVudSB0ZXh0IGZvciB0aGUgcGFsZXR0ZVxyXG4gICAgICAgIHRoaXMuc3ViTWVudXMuZm9yRWFjaCggc3ViTWVudSA9PiB7XHJcbiAgICAgICAgICAgIHN1Yk1lbnUuZGlzcGxheUNvbnRhaW5lci5yZW1vdmVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICBzdWJNZW51Lm9wdGlvbnMuZm9yRWFjaCggb3B0aW9uID0+IHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb24uaW5hY3RpdmVTcHJpdGU7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24uaW5hY3RpdmVTcHJpdGUgPSBuZXcgUElYSS5UZXh0KG9wdGlvbi5sYWJlbCwgbmV3U3R5bGUpO1xyXG4gICAgICAgICAgICAgICAgc3ViTWVudS5kaXNwbGF5Q29udGFpbmVyLmFkZENoaWxkKG9wdGlvbi5pbmFjdGl2ZVNwcml0ZSk7XHJcbiAgICAgICAgICAgICAgICBzdWJNZW51LmRpc3BsYXlDb250YWluZXIuYWRkQ2hpbGQob3B0aW9uLmFjdGl2ZVNwcml0ZSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTsgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZVBhbGxldGVNZW51KGlzT3Blbikge1xyXG4gICAgICAgIGlmIChpc09wZW4pe1xyXG4gICAgICAgICAgICB0aGlzLmluUGFsZXR0ZU1lbnUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm1haW5NZW51LmRpc3BsYXlDb250YWluZXIudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNNZW51LmRpc3BsYXlDb250YWluZXIudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnBhbGV0dGVNZW51Lm9uVG9nZ2xlKHRydWUsIHRydWUpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlTWVudSA9IHRoaXMucGFsZXR0ZU1lbnU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmluUGFsZXR0ZU1lbnUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5wYWxldHRlTWVudS5kaXNwbGF5Q29udGFpbmVyLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5tYWluTWVudS5kaXNwbGF5Q29udGFpbmVyLnZpc2libGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tYWluTWVudS5jdXJyZW50SW5kZXggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLm1haW5NZW51LmN1cnJlbnRLZXkgPSBcIlJFU1VNRVwiO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hY3RpdmVNZW51ID0gdGhpcy5tYWluTWVudTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlT3B0aW9uc01lbnUoaXNPcGVuKSB7XHJcbiAgICAgICAgaWYgKGlzT3Blbil7XHJcbiAgICAgICAgICAgIHRoaXMuaW5PcHRpb25zTWVudSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMubWFpbk1lbnUuZGlzcGxheUNvbnRhaW5lci52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMucGFsZXR0ZU1lbnUuZGlzcGxheUNvbnRhaW5lci52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc01lbnUuZGlzcGxheUNvbnRhaW5lci52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zTWVudS5vblRvZ2dsZSh0cnVlLCBmYWxzZSk7XHJcbiAgICBcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmVNZW51ID0gdGhpcy5vcHRpb25zTWVudTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5PcHRpb25zTWVudSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnBhbGV0dGVNZW51LmRpc3BsYXlDb250YWluZXIudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNNZW51LmRpc3BsYXlDb250YWluZXIudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm1haW5NZW51LmRpc3BsYXlDb250YWluZXIudmlzaWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1haW5NZW51LmN1cnJlbnRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubWFpbk1lbnUuY3VycmVudEtleSA9IFwiUkVTVU1FXCI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZU1lbnUgPSB0aGlzLm1haW5NZW51O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhdHRhY2hDb250cm9sbGVyKGNvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uQ29udGFpbmVyLmFkZENoaWxkKHRoaXMuY29udHJvbGxlci5idXR0b25Db250YWluZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpY1RleHQoYnV0dG9uVGV4dHVyZXMpIHtcclxuICAgICAgICBjb25zdCBzdHlsZSA9IHtcclxuICAgICAgICAgICAgZmlsbDogMHhmZmZmZmYsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiA1MixcclxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0FSQ0FERUNMQVNTSUMnXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgcGF1c2VUZXh0ID0gbmV3IFBJWEkuVGV4dChcIlBBVVNFRFwiLCBzdHlsZSlcclxuICAgICAgICBwYXVzZVRleHQudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIC8vcGF1c2VUZXh0LnNjYWxlLnNldCgxNCk7XHJcbiAgICAgICAgcGF1c2VUZXh0LmFuY2hvci5zZXQoMC41KTtcclxuICAgICAgICAvL3BhdXNlVGV4dC5hbHBoYSA9IDAuNTtcclxuICAgICAgICByZXR1cm4gcGF1c2VUZXh0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwYXVzZUJsaW5rZXIoKXtcclxuICAgICAgICB0aGlzLnBhdXNlQmxpbmtlckxhZyArPSB0aGlzLnBhdXNlVGlja2VyLmRlbHRhTVM7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhdXNlQmxpbmtlckxhZyA+IHRoaXMuUEFVU0VfQkxJTktFUl9JTlRFUlZBTCl7XHJcbiAgICAgICAgICAgIHRoaXMucGF1c2VCbGlua2VyTGFnIC09IHRoaXMuUEFVU0VfQkxJTktFUl9JTlRFUlZBTDtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZWRUZXh0LnZpc2libGUgXj0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBtb3ZlQnV0dG9ucyhwb3NpdGlvbil7XHJcbiAgICAgICAgaWYgKCB0aGlzLmNvbnRyb2xsZXIgKVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIubW92ZUJ1dHRvbnMocG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uLnNldFBvc2l0aW9uKHBvc2l0aW9uLCB0aGlzLnRvZ2dsZUJ1dHRvbk9mZnNldCk7XHJcbiAgICAgICAgdGhpcy5wYXVzZWRUZXh0LnBvc2l0aW9uLmNvcHlGcm9tKHBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLnBhdXNlZFRleHQueSAtPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAodGhpcy5wYXVzZWRUZXh0LmhlaWdodC8yICsgNik7XHJcbiAgICAgICAgdGhpcy5tYWluTWVudS5tb3ZlRWxlbWVudHModGhpcy5wYXVzZWRUZXh0LnBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLnBhbGV0dGVNZW51Lm1vdmVFbGVtZW50cyh0aGlzLnBhdXNlZFRleHQucG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMub3B0aW9uc01lbnUubW92ZUVsZW1lbnRzKHRoaXMucGF1c2VkVGV4dC5wb3NpdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBvblJlc2l6ZSgpe1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uT2Zmc2V0ID0gbmV3IFBJWEkuUG9pbnQod2luZG93LmlubmVyV2lkdGggLSB0aGlzLnRvZ2dsZUJ1dHRvbi53aWR0aCAtIDE2LCAtd2luZG93LmlubmVySGVpZ2h0ICsgMzIpO1xyXG4gICAgICAgIGlmICggdGhpcy5jb250cm9sbGVyKVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIub25SZXNpemUoKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRvdWNoIGJ1dHRvbiBmb3IgdG9nZ2xpbmcgdGhlIHBhdXNlIG1lbnVcclxuICogQGNsYXNzXHJcbiAqL1xyXG5jbGFzcyBQYXVzZVRvZ2dsZUJ1dHRvbntcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtNYXA8c3RyaW5nLCBQSVhJLlRleHR1cmU+fSB0ZXh0dXJlcyBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGV4dHVyZXMpe1xyXG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IG5ldyBNYXAoW1sncGF1c2UnLCBQSVhJLlNwcml0ZS5mcm9tKHRleHR1cmVzWzBdKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydleGl0JywgUElYSS5TcHJpdGUuZnJvbSh0ZXh0dXJlc1sxXSldIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIHRoaXMuYnV0dG9uQ29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc3ByaXRlcy5mb3JFYWNoKCAoc3ByaXRlKSA9PiB7XHJcbiAgICAgICAgICAgIHNwcml0ZS5pbnRlcmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHNwcml0ZS5hbHBoYSA9IDAuNTtcclxuICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnNldCgzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uQ29udGFpbmVyLmFkZENoaWxkKHNwcml0ZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnNwcml0ZXMuZ2V0KFwiZXhpdFwiKS53aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuc3ByaXRlcy5nZXQoXCJleGl0XCIpLmhlaWdodDtcclxuXHJcbiAgICAgICAgdGhpcy5zcHJpdGVzLmdldChcImV4aXRcIikudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFBvc2l0aW9uKHBvc2l0aW9uLCBvZmZzZXQpe1xyXG4gICAgICAgIGxldCBuZXdQb3NpdGlvbiA9IG5ldyBQSVhJLlBvaW50KCk7XHJcbiAgICAgICAgbmV3UG9zaXRpb24uY29weUZyb20ocG9zaXRpb24pO1xyXG4gICAgICAgIG5ld1Bvc2l0aW9uLnggKz0gb2Zmc2V0Lng7XHJcbiAgICAgICAgbmV3UG9zaXRpb24ueSArPSBvZmZzZXQueTtcclxuICAgICAgICB0aGlzLmJ1dHRvbkNvbnRhaW5lci5jaGlsZHJlbi5mb3JFYWNoKCAoc3ByaXRlKSA9PiB7XHJcbiAgICAgICAgICAgIHNwcml0ZS5wb3NpdGlvbi5jb3B5RnJvbShuZXdQb3NpdGlvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYXNjYWRpbmcgbGlzdCBvZiBNZW51IFVJIGVsZW1lbnRzXHJcbiAqL1xyXG5jbGFzcyBNZW51TGlzdCB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7UElYSS5Qb2ludH0gcG9zaXRpb24gXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5Q29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSAwO1xyXG5cclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBbIG5ldyBNZW51TGlzdEVsZW1lbnQoXCJSRVNVTUVcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWVudUxpc3RFbGVtZW50KFwiUkVST0xMXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1lbnVMaXN0RWxlbWVudChcIlBBTEVUVEVcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWVudUxpc3RFbGVtZW50KFwiT1BUSU9OU1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmZvckVhY2gob3B0aW9uID0+IHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5Q29udGFpbmVyLmFkZENoaWxkKG9wdGlvbi5pbmFjdGl2ZVNwcml0ZSk7ICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlDb250YWluZXIuYWRkQ2hpbGQob3B0aW9uLmFjdGl2ZVNwcml0ZSk7XHJcbiAgICAgICAgfSk7ICBcclxuICAgICAgICAgIFxyXG4gICAgICAgIHRoaXMuY3VycmVudEtleSA9IHRoaXMub3B0aW9uc1swXS5sYWJlbDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm1vdmVFbGVtZW50cyhwb3NpdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBwYXJhbSB7UElYSS5Qb2ludH0gcG9zaXRpb24gLSB3b3JsZCBwb3NpdGlvbiBvZiB0aGUgY2FtZXJhIG9iamVjdCAqL1xyXG4gICAgbW92ZUVsZW1lbnRzKHBvc2l0aW9uKXtcclxuICAgICAgICBjb25zdCBpbmRlbnQgPSA0MDtcclxuICAgICAgICBjb25zdCBvZmZzZXQgPSAxMDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmZvckVhY2goICggZWxlbWVudCwgaW5kZXggKSA9PiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWN0aXZlU3ByaXRlLnBvc2l0aW9uLmNvcHlGcm9tKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgZWxlbWVudC5pbmFjdGl2ZVNwcml0ZS5wb3NpdGlvbi5jb3B5RnJvbShwb3NpdGlvbik7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LmFjdGl2ZVNwcml0ZS55ICs9IG9mZnNldDtcclxuICAgICAgICAgICAgZWxlbWVudC5pbmFjdGl2ZVNwcml0ZS55ICs9IG9mZnNldDtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuaW5hY3RpdmVTcHJpdGUueCAtPSAoMjAwKTtcclxuICAgICAgICAgICAgZWxlbWVudC5hY3RpdmVTcHJpdGUueCAtPSAoMjAwKTtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWN0aXZlU3ByaXRlLnggKz0gaW5kZW50ICogaW5kZXg7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWN0aXZlU3ByaXRlLnkgKz0gZWxlbWVudC5hY3RpdmVTcHJpdGUuaGVpZ2h0ICogaW5kZXg7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LmluYWN0aXZlU3ByaXRlLnggKz0gaW5kZW50ICogaW5kZXg7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuaW5hY3RpdmVTcHJpdGUueSArPSBlbGVtZW50LmFjdGl2ZVNwcml0ZS5oZWlnaHQgKiBpbmRleDsgICAgICAgXHJcblxyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVPZmZzZXQgPSA1O1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5hY3RpdmVTcHJpdGUueCArPSBhY3RpdmVPZmZzZXQ7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWN0aXZlU3ByaXRlLnkgLT0gYWN0aXZlT2Zmc2V0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBvblRvZ2dsZShpc1BhdXNlTWVudU9wZW4sIGtlZXBJbmRleCl7XHJcbiAgICAgICAgaWYgKCBpc1BhdXNlTWVudU9wZW4gKXtcclxuICAgICAgICAgICAgaWYgKCFrZWVwSW5kZXgpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIGVsc2UgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRLZXkgPSB0aGlzLm9wdGlvbnNbdGhpcy5jdXJyZW50SW5kZXhdLmxhYmVsO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlDb250YWluZXIudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoICggKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmluYWN0aXZlU3ByaXRlLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5hY3RpdmVTcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWN0aXZlU3ByaXRlLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoICggZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmluYWN0aXZlU3ByaXRlLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWN0aXZlU3ByaXRlLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZU9wdGlvbnMoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJzdWNjZXNzZnVsIHBhdXNlIG1lbnUgZXZlbnRcIik7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmZvckVhY2ggKCAoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgZWxlbWVudC5hY3RpdmVTcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoIGluZGV4ID09IHRoaXMuY3VycmVudEluZGV4ICl7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFjdGl2ZVNwcml0ZS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFBhbGV0dGUgc3dhcCBzdWJtZW51LCBhY3RpdmF0ZXMgZGlmZmVyZW50IGNvbG9yIHJlcGxhY2VtZW50IGZpbHRlcnMsIGNoYW5nZXMgbWVudSB0ZXh0IGNvbG9yXHJcbiAqIEBjbGFzcyBcclxuICogQGV4dGVuZHMgTWVudUxpc3RcclxuICovXHJcbmNsYXNzIFBhbGV0dGVNZW51TGlzdCBleHRlbmRzIE1lbnVMaXN0e1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuUG9pbnR9IHBvc2l0aW9uIFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwb3NpdGlvbil7XHJcbiAgICAgICAgc3VwZXIocG9zaXRpb24pO1xyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQpO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheUNvbnRhaW5lci5yZW1vdmVDaGlsZHJlbigpO1xyXG5cclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBbIG5ldyBNZW51TGlzdEVsZW1lbnQoXCJTSU1CQVwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNZW51TGlzdEVsZW1lbnQoXCJWQU5UQVwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNZW51TGlzdEVsZW1lbnQoXCJDT0NPXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1lbnVMaXN0RWxlbWVudChcIlBVUlBcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlDb250YWluZXIuYWRkQ2hpbGQob3B0aW9uLmluYWN0aXZlU3ByaXRlKTsgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheUNvbnRhaW5lci5hZGRDaGlsZChvcHRpb24uYWN0aXZlU3ByaXRlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5tb3ZlRWxlbWVudHMocG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEtleSA9IHRoaXMub3B0aW9uc1t0aGlzLmN1cnJlbnRJbmRleF0ubGFiZWw7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPcHRpb25zIHN1Ym1lbnUsIGNvbnRhaW5zIHRvZ2dsZSBzd2l0Y2hlcyBmb3IgOlxyXG4gKiAtIEhpZGluZyB0b3VjaCBidXR0b25zXHJcbiAqIC0gZGlzYWJsaW5nIHNjcmVlbiBzaGFrZVxyXG4gKiBAY2xhc3MgXHJcbiAqIEBleHRlbmRzIE1lbnVMaXN0XHJcbiAqL1xyXG5jbGFzcyBPcHRpb25zTWVudSBleHRlbmRzIE1lbnVMaXN0e1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuUG9pbnR9IHBvc2l0aW9uIFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwb3NpdGlvbil7XHJcbiAgICAgICAgc3VwZXIocG9zaXRpb24pO1xyXG5cclxuICAgICAgICB0aGlzLmRpc3BsYXlDb250YWluZXIucmVtb3ZlQ2hpbGRyZW4oKTtcclxuXHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gWyBuZXcgTWVudUxpc3RFbGVtZW50KFwiQkFDS1wiKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWVudUxpc3RFbGVtZW50KFwiSElERSAgIEJVVFRPTlM6ICAgT0ZGXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1lbnVMaXN0RWxlbWVudChcIkNBTUVSQSAgIFNIQUtFOiAgIE9OXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlDb250YWluZXIuYWRkQ2hpbGQob3B0aW9uLmluYWN0aXZlU3ByaXRlKTsgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheUNvbnRhaW5lci5hZGRDaGlsZChvcHRpb24uYWN0aXZlU3ByaXRlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5tb3ZlRWxlbWVudHMocG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEtleSA9IHRoaXMub3B0aW9uc1t0aGlzLmN1cnJlbnRJbmRleF0ubGFiZWw7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCYXNpYyB0ZXh0IFVJIGVsZW1lbnQsIGxpZ2h0cyB1cCB3aGVuIHNlbGVjdGVkXHJcbiAqIEBjbGFzc1xyXG4gKi9cclxuY2xhc3MgTWVudUxpc3RFbGVtZW50IHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpe1xyXG4gICAgICAgIHRoaXMubGFiZWwgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuc3R5bGUxID0ge1xyXG4gICAgICAgICAgICBmaWxsOiAweGZmYTI1MixcclxuICAgICAgICAgICAgZm9udFNpemU6IDUyLFxyXG4gICAgICAgICAgICBmb250RmFtaWx5OiAnQVJDQURFQ0xBU1NJQydcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHN0eWxlMiA9IHtcclxuICAgICAgICAgICAgZmlsbDogMHhmZmZmZmYsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiA1MixcclxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0FSQ0FERUNMQVNTSUMnXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5hY3RpdmVTcHJpdGUgPSBuZXcgUElYSS5UZXh0KG5hbWUsIHRoaXMuc3R5bGUxKTtcclxuICAgICAgICB0aGlzLmFjdGl2ZVNwcml0ZSA9IG5ldyBQSVhJLlRleHQobmFtZSwgc3R5bGUyKTtcclxuXHJcbiAgICAgICAgdGhpcy5hY3RpdmVTcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW5hY3RpdmVTcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgfSAgIFxyXG59IiwiZXhwb3J0IGNsYXNzIERpc3NvbHZlRmlsdGVyIGV4dGVuZHMgUElYSS5GaWx0ZXJcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuU3ByaXRlfSBzcHJpdGUgLSBub2lzZSB0ZXh0dXJlIGZvciB0aGUgZGlzc29sdmUgZWZmZWN0XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3NoYWRlcl0gLSBwYXJlbnQgb2JqZWN0IGZvciBzaGFkZXIgcHJvZ3JhbSwgbXVzdCBoYXZlIHZlcnQgYW5kIGZyYWcgbWVtYmVyc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzcHJpdGUsIHNoYWRlciwgc2NhbGUpIHtcclxuICAgICAgICBjb25zdCBtYXNrTWF0cml4ID0gbmV3IFBJWEkuTWF0cml4KCk7XHJcblxyXG4gICAgICAgIHNwcml0ZS5yZW5kZXJhYmxlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGxldCB1bmlmb3JtcyA9IHtcclxuICAgICAgICAgICAgbWFwU2FtcGxlcjogc3ByaXRlLl90ZXh0dXJlLFxyXG4gICAgICAgICAgICBmaWx0ZXJNYXRyaXg6IG1hc2tNYXRyaXgsXHJcbiAgICAgICAgICAgIHNjYWxlOiB7IHg6IDEsIHk6IDEgfSxcclxuICAgICAgICAgICAgRGlzc29sdmVWYWw6IDEuMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VwZXIoc2hhZGVyLnZlcnQsIHNoYWRlci5mcmFnLCB1bmlmb3Jtcyk7XHJcblxyXG4gICAgICAgIHRoaXMubWFza1Nwcml0ZSA9IHNwcml0ZTtcclxuICAgICAgICB0aGlzLm1hc2tNYXRyaXggPSBtYXNrTWF0cml4O1xyXG5cclxuICAgICAgICBpZiAoc2NhbGUgPT09IG51bGwgfHwgc2NhbGUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjYWxlID0gMjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBzY2FsZVgsIHNjYWxlWSBmb3IgZGlzcGxhY2VtZW50c1xyXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUG9pbnR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5zY2FsZSA9IG5ldyBQSVhJLlBvaW50KHNjYWxlLCBzY2FsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaWVzIHRoZSBmaWx0ZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtQSVhJLnN5c3RlbXMuRmlsdGVyU3lzdGVtfSBmaWx0ZXJNYW5hZ2VyIC0gVGhlIG1hbmFnZXIuXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gaW5wdXQgLSBUaGUgaW5wdXQgdGFyZ2V0LlxyXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlclRleHR1cmV9IG91dHB1dCAtIFRoZSBvdXRwdXQgdGFyZ2V0LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBjbGVhciAtIFNob3VsZCB0aGUgb3V0cHV0IGJlIGNsZWFyZWQgYmVmb3JlIHJlbmRlcmluZyB0byBpdC5cclxuICAgICAqL1xyXG4gICAgYXBwbHkoZmlsdGVyTWFuYWdlciwgaW5wdXQsIG91dHB1dCwgY2xlYXIpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gZmlsbCBtYXNrTWF0cml4IHdpdGggX25vcm1hbGl6ZWQgc3ByaXRlIHRleHR1cmUgY29vcmRzX1xyXG4gICAgICAgIHRoaXMudW5pZm9ybXMuZmlsdGVyTWF0cml4ID0gZmlsdGVyTWFuYWdlci5jYWxjdWxhdGVTcHJpdGVNYXRyaXgodGhpcy5tYXNrTWF0cml4LCB0aGlzLm1hc2tTcHJpdGUpO1xyXG4gICAgICAgIHRoaXMudW5pZm9ybXMuc2NhbGUueCA9IHRoaXMuc2NhbGUueDtcclxuICAgICAgICB0aGlzLnVuaWZvcm1zLnNjYWxlLnkgPSB0aGlzLnNjYWxlLnk7XHJcblxyXG4gICAgICAgIC8vIGRyYXcgdGhlIGZpbHRlci4uLlxyXG4gICAgICAgIGZpbHRlck1hbmFnZXIuYXBwbHlGaWx0ZXIodGhpcywgaW5wdXQsIG91dHB1dCwgY2xlYXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRleHR1cmUgdXNlZCBmb3IgdGhlIGRpc3BsYWNlbWVudCBtYXAuIE11c3QgYmUgcG93ZXIgb2YgMiBzaXplZCB0ZXh0dXJlLlxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXIge1BJWEkuVGV4dHVyZX1cclxuICAgICAqL1xyXG4gICAgZ2V0IG1hcCgpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMubWFwU2FtcGxlcjtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbWFwKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcclxuICAgIHtcclxuICAgICAgICB0aGlzLnVuaWZvcm1zLm1hcFNhbXBsZXIgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbn0iLCIvKipcclxuICogVGhlIERpc3BsYWNlbWVudEZpbHRlciBjbGFzcyB1c2VzIHRoZSBwaXhlbCB2YWx1ZXMgZnJvbSB0aGUgc3BlY2lmaWVkIHRleHR1cmVcclxuICogKGNhbGxlZCB0aGUgZGlzcGxhY2VtZW50IG1hcCkgdG8gcGVyZm9ybSBhIGRpc3BsYWNlbWVudCBvZiBhbiBvYmplY3QuXHJcbiAqXHJcbiAqIFlvdSBjYW4gdXNlIHRoaXMgZmlsdGVyIHRvIGFwcGx5IGFsbCBtYW5vciBvZiBjcmF6eSB3YXJwaW5nIGVmZmVjdHMuXHJcbiAqIEN1cnJlbnRseSB0aGUgYHJgIHByb3BlcnR5IG9mIHRoZSB0ZXh0dXJlIGlzIHVzZWQgdG8gb2Zmc2V0IHRoZSBgeGBcclxuICogYW5kIHRoZSBgZ2AgcHJvcGVydHkgb2YgdGhlIHRleHR1cmUgaXMgdXNlZCB0byBvZmZzZXQgdGhlIGB5YC5cclxuICpcclxuICogVGhlIHdheSBpdCB3b3JrcyBpcyBpdCB1c2VzIHRoZSB2YWx1ZXMgb2YgdGhlIGRpc3BsYWNlbWVudCBtYXAgdG8gbG9vayB1cCB0aGVcclxuICogY29ycmVjdCBwaXhlbHMgdG8gb3V0cHV0LiBUaGlzIG1lYW5zIGl0J3Mgbm90IHRlY2huaWNhbGx5IG1vdmluZyB0aGUgb3JpZ2luYWwuXHJcbiAqIEluc3RlYWQsIGl0J3Mgc3RhcnRpbmcgYXQgdGhlIG91dHB1dCBhbmQgYXNraW5nIFwid2hpY2ggcGl4ZWwgZnJvbSB0aGUgb3JpZ2luYWwgZ29lcyBoZXJlXCIuXHJcbiAqIEZvciBleGFtcGxlLCBpZiBhIGRpc3BsYWNlbWVudCBtYXAgcGl4ZWwgaGFzIGByZWQgPSAxYCBhbmQgdGhlIGZpbHRlciBzY2FsZSBpcyBgMjBgLFxyXG4gKiB0aGlzIGZpbHRlciB3aWxsIG91dHB1dCB0aGUgcGl4ZWwgYXBwcm94aW1hdGVseSAyMCBwaXhlbHMgdG8gdGhlIHJpZ2h0IG9mIHRoZSBvcmlnaW5hbC5cclxuICpcclxuICogQGNsYXNzXHJcbiAqIEBleHRlbmRzIFBJWEkuRmlsdGVyXHJcbiAqIEBtZW1iZXJvZiBQSVhJLmZpbHRlcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCZXppZXJEaXNwbGFjZW1lbnRGaWx0ZXIgZXh0ZW5kcyBQSVhJLkZpbHRlclxyXG57XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7UElYSS5TcHJpdGV9IHNwcml0ZSAtIFRoZSBzcHJpdGUgdXNlZCBmb3IgdGhlIGRpc3BsYWNlbWVudCBtYXAuIChtYWtlIHN1cmUgaXRzIGFkZGVkIHRvIHRoZSBzY2VuZSEpXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGUgLSBUaGUgc2NhbGUgb2YgdGhlIGRpc3BsYWNlbWVudFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzcHJpdGUsIHNoYWRlciwgc2NhbGUpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgbWFza01hdHJpeCA9IG5ldyBQSVhJLk1hdHJpeCgpO1xyXG5cclxuICAgICAgICBzcHJpdGUucmVuZGVyYWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBzdXBlcihzaGFkZXIudmVydCwgc2hhZGVyLmZyYWcsIHtcclxuICAgICAgICAgICAgbWFwU2FtcGxlcjogc3ByaXRlLl90ZXh0dXJlLFxyXG4gICAgICAgICAgICBmaWx0ZXJNYXRyaXg6IG1hc2tNYXRyaXgsXHJcbiAgICAgICAgICAgIHNjYWxlOiB7IHg6IDEsIHk6IDEgfSxcclxuICAgICAgICAgICAgcm90YXRpb246IG5ldyBGbG9hdDMyQXJyYXkoWzEsIDAsIDAsIDFdKSxcclxuICAgICAgICAgICAgYmV6aWVyVmFsOiAwLjBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXNrU3ByaXRlID0gc3ByaXRlO1xyXG4gICAgICAgIHRoaXMubWFza01hdHJpeCA9IG1hc2tNYXRyaXg7XHJcblxyXG4gICAgICAgIGlmIChzY2FsZSA9PT0gbnVsbCB8fCBzY2FsZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2NhbGUgPSAyMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHNjYWxlWCwgc2NhbGVZIGZvciBkaXNwbGFjZW1lbnRzXHJcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5Qb2ludH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNjYWxlID0gbmV3IFBJWEkuUG9pbnQoc2NhbGUsIHNjYWxlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGxpZXMgdGhlIGZpbHRlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuc3lzdGVtcy5GaWx0ZXJTeXN0ZW19IGZpbHRlck1hbmFnZXIgLSBUaGUgbWFuYWdlci5cclxuICAgICAqIEBwYXJhbSB7UElYSS5SZW5kZXJUZXh0dXJlfSBpbnB1dCAtIFRoZSBpbnB1dCB0YXJnZXQuXHJcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGV4dHVyZX0gb3V0cHV0IC0gVGhlIG91dHB1dCB0YXJnZXQuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsZWFyIC0gU2hvdWxkIHRoZSBvdXRwdXQgYmUgY2xlYXJlZCBiZWZvcmUgcmVuZGVyaW5nIHRvIGl0LlxyXG4gICAgICovXHJcbiAgICBhcHBseShmaWx0ZXJNYW5hZ2VyLCBpbnB1dCwgb3V0cHV0LCBjbGVhcilcclxuICAgIHtcclxuICAgICAgICAvLyBmaWxsIG1hc2tNYXRyaXggd2l0aCBfbm9ybWFsaXplZCBzcHJpdGUgdGV4dHVyZSBjb29yZHNfXHJcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5maWx0ZXJNYXRyaXggPSBmaWx0ZXJNYW5hZ2VyLmNhbGN1bGF0ZVNwcml0ZU1hdHJpeCh0aGlzLm1hc2tNYXRyaXgsIHRoaXMubWFza1Nwcml0ZSk7XHJcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5zY2FsZS54ID0gdGhpcy5zY2FsZS54O1xyXG4gICAgICAgIHRoaXMudW5pZm9ybXMuc2NhbGUueSA9IHRoaXMuc2NhbGUueTtcclxuXHJcbiAgICAgICAgLy8gRXh0cmFjdCByb3RhdGlvbiBmcm9tIHdvcmxkIHRyYW5zZm9ybVxyXG4gICAgICAgIGNvbnN0IHd0ID0gdGhpcy5tYXNrU3ByaXRlLnRyYW5zZm9ybS53b3JsZFRyYW5zZm9ybTtcclxuICAgICAgICBjb25zdCBsZW5YID0gTWF0aC5zcXJ0KCh3dC5hICogd3QuYSkgKyAod3QuYiAqIHd0LmIpKTtcclxuICAgICAgICBjb25zdCBsZW5ZID0gTWF0aC5zcXJ0KCh3dC5jICogd3QuYykgKyAod3QuZCAqIHd0LmQpKTtcclxuXHJcbiAgICAgICAgaWYgKGxlblggIT09IDAgJiYgbGVuWSAhPT0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMucm90YXRpb25bMF0gPSB3dC5hIC8gbGVuWDtcclxuICAgICAgICAgICAgdGhpcy51bmlmb3Jtcy5yb3RhdGlvblsxXSA9IHd0LmIgLyBsZW5YO1xyXG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1zLnJvdGF0aW9uWzJdID0gd3QuYyAvIGxlblk7XHJcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMucm90YXRpb25bM10gPSB3dC5kIC8gbGVuWTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRyYXcgdGhlIGZpbHRlci4uLlxyXG4gICAgICAgIGZpbHRlck1hbmFnZXIuYXBwbHlGaWx0ZXIodGhpcywgaW5wdXQsIG91dHB1dCwgY2xlYXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRleHR1cmUgdXNlZCBmb3IgdGhlIGRpc3BsYWNlbWVudCBtYXAuIE11c3QgYmUgcG93ZXIgb2YgMiBzaXplZCB0ZXh0dXJlLlxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXIge1BJWEkuVGV4dHVyZX1cclxuICAgICAqL1xyXG4gICAgZ2V0IG1hcCgpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMubWFwU2FtcGxlcjtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbWFwKHZhbHVlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtanNkb2NcclxuICAgIHtcclxuICAgICAgICB0aGlzLnVuaWZvcm1zLm1hcFNhbXBsZXIgPSB2YWx1ZTtcclxuICAgIH1cclxufSIsIi8qKlxyXG4gKiA0IHBvaW50IGJlemllciBjdXJ2ZSBmb3IgYW5pbWF0aW9uL3NoYWRlciB0cmFuc2l0aW9uc1xyXG4gKiBAY2xhc3NcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCZXppZXJDdXJ2ZXtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtQSVhJLlBvaW50W119IHBvaW50cyAtIEFycmF5IG9mIDQgY29udHJvbCBwb2ludHMsIGRlZmF1bHQgWygwLDApLCAoMC41LCAwKSwgKDAuNSwgMSksICgxLDEpXVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvciggcG9pbnRzID0gWyBuZXcgUElYSS5Qb2ludCgwLjAsMC4wKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQSVhJLlBvaW50KDAuNSwwLjApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBJWEkuUG9pbnQoMC41LDEuMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUElYSS5Qb2ludCgxLjAsMS4wKSBdIClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnBvaW50cyA9IHBvaW50c1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXRZKHQpe1xyXG4gICAgICAgIGxldCB5ID0gTWF0aC5wb3coKDEuMCAtIHQpLDMpICogdGhpcy5wb2ludHNbMF0ueTtcclxuICAgICAgICB5ICs9IDMgKiBNYXRoLnBvdygoMS4wLXQpLDIpICogdCAqIHRoaXMucG9pbnRzWzFdLnk7XHJcbiAgICAgICAgeSArPSAzICogKDEuMCAtIHQgKSAqIE1hdGgucG93KHQsMikgKiB0aGlzLnBvaW50c1syXS55O1xyXG4gICAgICAgIHkgKz0gTWF0aC5wb3codCwzKSAqIHRoaXMucG9pbnRzWzNdLnk7XHJcblxyXG4gICAgICAgIHJldHVybiB5O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtCZXppZXJEaXNwbGFjZW1lbnRGaWx0ZXJ9IGZyb20gJy4vQmV6aWVyRGlzcGxhY2VtZW50LmpzJ1xyXG5pbXBvcnQge0JlemllckN1cnZlfSBmcm9tICcuL0JlemllckN1cnZlLmpzJ1xyXG5pbXBvcnQge015VGltZXJ9IGZyb20gJy4uL2VudGl0aWVzL215VGltZXIuanMnXHJcblxyXG5leHBvcnQgY2xhc3MgQ2F0bmlwVHJpcHtcclxuICAgIGNvbnN0cnVjdG9yKHNoYWRlciwgcGxheWVyLCBwb3dlcnVwcyl7XHJcbiAgICAgICAgLy8gcGh5c2ljcyB2YWx1ZXMgdGhhdCB3aWxsIGJlIHRvZ2dsZWQgZHVyaW5nIHRoZSBlZmZlY3RcclxuICAgICAgICB0aGlzLnBsYXllckRlZmF1bHRWZWwgPSBwbGF5ZXIubWF4VmVsO1xyXG4gICAgICAgIHRoaXMucGxheWVyVHJpcFZlbCA9IHBsYXllci5tYXhWZWwgKiAxLjM7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJEZWZhdWx0SnVtcCA9IHBsYXllci5qdW1wVmVsO1xyXG4gICAgICAgIHRoaXMucGxheWVyVHJpcEp1bXAgPSBwbGF5ZXIuanVtcFZlbCAqIDEuMjtcclxuICAgICAgICB0aGlzLmNhbWVyYVJvdGF0aW9uID0gMDtcclxuXHJcbiAgICAgICAgLy8gdGltaW5nXHJcbiAgICAgICAgdGhpcy5iZXppZXJUaW1lID0gMDsgICAgLy8gdCBpbnB1dCBmb3IgYSA0IHBvaW50IGJlemllciBjdXJ2ZVxyXG4gICAgICAgIHRoaXMuZmlsdGVyVGltZSA9IDA7ICAgIC8vIHRpbWUgc3BlbnQgaW4gdHJpcCBlZmZlY3RcclxuICAgICAgICB0aGlzLmZpbHRlclRyYW5zaXRpb25NUyA9IDMwMDAuMDsgICAvLyBkdXJhdGlvbiBpbiBtaWxpc2Vjb25kcyBvZiB0aGUgYmV6aWUgY3VydmUgdHJhbnNpdGlvbiBpbnRvIHRyaXBwaW5nXHJcbiAgICAgICAgdGhpcy5maWx0ZXJTdGF0aWNNUyA9IDEwMDAwLjA7ICAgICAgLy8gZHVyYXRpb24gb2YgdGhlIHRyaXAgd2hlcmUgdGhlIGJlemllciB2YWx1ZSB3aWxsIHJlbWFpbiBhdCAxIFxyXG4gICAgICAgIHRoaXMuZGlzcGxhY2VtZW50SW5jcmVtZW50ID0gMC41OyAgIC8vIGhvdyBtdWNoIHRoZSBub2lzZSB0ZXh0dXJlIHdpbGwgYmUgbW92ZWQgZWFjaCBmcmFtZVxyXG4gICAgICAgIHRoaXMuYmV6aWVySW5jcmVtZW50ID0gMS4wIC8gKHRoaXMuZmlsdGVyVHJhbnNpdGlvbk1TIC8gMTYuNjY2KTsgICAgLy8gaG93IG11Y2ggdG8gc3RlcCBmb3J3YXJkIHRoZSBiZXppZXIgdCB2YWxsdWUgZWFjaCB1cGRhdGVcclxuXHJcbiAgICAgICAgdGhpcy50aWNrZXIgPSBuZXcgUElYSS5UaWNrZXIoKTsgICAgLy8gdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24gcGhhc2VzXHJcbiAgICAgICAgdGhpcy50aWNrZXJNUyA9IDA7XHJcbiAgICAgICAgdGhpcy50aWNrZXIuYWRkKCB0aGlzLm9uVGljay5iaW5kKHRoaXMpICk7XHJcblxyXG4gICAgICAgIC8vIFRyYW5zaXRpb24gY3VydmUsIDQgcG9pbnQgYmV6aWVyIDogWygwLDApLCAoMC41LCAwKSwgKDAuNSwgMSksICgxLDEpXVxyXG4gICAgICAgIHRoaXMuYmV6aWVyQ3VydmUgPSBuZXcgQmV6aWVyQ3VydmUoKTtcclxuICAgICAgICB0aGlzLnBvd2VydXBUaW1lciA9IG5ldyBNeVRpbWVyO1xyXG4gICAgICAgIHRoaXMucG93ZXJ1cFRpbWVyLnN0YXJ0KCk7XHJcblxyXG4gICAgICAgIC8vIG5vaXNlIHRleHR1cmVzIGZvciB0aGUgZGlzcGxhY2VtZW50IGZpbHRlcnNcclxuICAgICAgICB0aGlzLmZvcmVncm91bmROb2lzZSA9IFBJWEkuU3ByaXRlLmZyb20oJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2R2eGlreWJ5aS9pbWFnZS91cGxvYWQvdjE0ODY2MzQxMTMvMnlZYXlaa192cXN5engucG5nJyk7XHJcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kTm9pc2UudGV4dHVyZS5iYXNlVGV4dHVyZS53cmFwTW9kZSA9IFBJWEkuV1JBUF9NT0RFUy5SRVBFQVQ7XHJcbiAgICAgICAgLy8gcGFyYWxsYXggc2NyZXdzIHVwIHRoZSBlZmZlY3QgZm9yIHRoZSBiYWNrZ3JvdW5kIGJ5IGRlZmF1bHQsIFxyXG4gICAgICAgIC8vICB1c2luZyBhIDJuZCB0ZXh0dXJlL2ZpbHRlciB0aGF0IHdpbGwgYmUgbW92ZWQgaW4gc3luYyB3aXRoIHRoZSBiYWNrZ3JvdW5kXHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kTm9pc2UgPSBQSVhJLlNwcml0ZS5mcm9tKCdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kdnhpa3lieWkvaW1hZ2UvdXBsb2FkL3YxNDg2NjM0MTEzLzJ5WWF5WmtfdnFzeXp4LnBuZycpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZE5vaXNlLnRleHR1cmUuYmFzZVRleHR1cmUud3JhcE1vZGUgPSBQSVhJLldSQVBfTU9ERVMuUkVQRUFUO1xyXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZE5vaXNlLnNjYWxlLnNldCgwLjYpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZE5vaXNlLnNjYWxlLnNldCgwLjYpO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICAvLyBhY3R1YWwgcG9zdCBwcm9jZXNzaW5nIGZpbHRlcnMgZm9yIHRoZSBlZmZlY3RcclxuICAgICAgICB0aGlzLmZvcmVncm91bmRGaWx0ZXIgPSBuZXcgQmV6aWVyRGlzcGxhY2VtZW50RmlsdGVyKHRoaXMuZm9yZWdyb3VuZE5vaXNlLCBzaGFkZXIpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZEZpbHRlciA9IG5ldyBCZXppZXJEaXNwbGFjZW1lbnRGaWx0ZXIodGhpcy5iYWNrZ3JvdW5kTm9pc2UsIHNoYWRlcik7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCAnY3Jhc2ggdGVzdCcgKTtcclxuXHJcbiAgICAgICAgLy8gZ2lhbnQgaW52aXNpYmxlIHJlY3RhbmdsZSB0aGF0IHNvbWVob3cgZml4ZXMgYSBsaWdodGluZyBidWdcclxuICAgICAgICB0aGlzLmJhZEZpbHRlclNvbHV0aW9uID0gbmV3IFBJWEkuR3JhcGhpY3MoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYmVnaW5GaWxsKDAsMC4wKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZHJhd1JlY3QoLTIwMDAsLTIwMDAsIDgwMDAsIDgwMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbmRGaWxsKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gdXNlZCB0byBtb3ZlIHRoZSBjYXRuaXAgbGVhdmVzIHVwIGFuZCBkb3duIGZvciB0aGUgZmxvYXRpbmcgZWZmZWN0XHJcbiAgICAgICAgdGhpcy5wb3dlcnVwcyA9IHBvd2VydXBzO1xyXG4gICAgICAgIHRoaXMubWF4Q2F0bmlwRmxvYXRPZmZzZXQgPSAxMDtcclxuICAgICAgICB0aGlzLmZsb2F0VGltZXNjYWxlID0gMC4wNTtcclxuICAgICAgICB0aGlzLmZsb2F0VGltZSA9IDA7ICAgIFxyXG4gICAgfVxyXG5cclxuICAgIG9uVGljaygpe1xyXG4gICAgICAgIHRoaXMudGlja2VyTVMgKz0gdGhpcy50aWNrZXIuZGVsdGFNUztcclxuICAgIH1cclxuXHJcbiAgICAvLyBjYWxsZWQgd2hlbmV2ZXIgYSBuZXcgZnJhbWUgaXMgZHJhd25cclxuICAgIHVwZGF0ZShkZWx0YU1TKXtcclxuICAgICAgICB0aGlzLmZvcmVncm91bmROb2lzZS5wb3NpdGlvbi5zZXQodGhpcy5maWx0ZXJUaW1lLCB0aGlzLmZpbHRlclRpbWUpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZE5vaXNlLnBvc2l0aW9uLnNldCh0aGlzLmZpbHRlclRpbWUsIHRoaXMuZmlsdGVyVGltZSk7XHJcblxyXG4gICAgICAgIHRoaXMuZmxvYXRUaW1lICs9IGRlbHRhTVMgKiB0aGlzLmZsb2F0VGltZXNjYWxlO1xyXG4gICAgICAgIGNvbnN0IGNhdE5pcE9mZnNldCA9IHRoaXMubWF4Q2F0bmlwRmxvYXRPZmZzZXQgKiBNYXRoLnNpbih0aGlzLmZsb2F0VGltZSk7XHJcbiAgICAgICAgdGhpcy5wb3dlcnVwcy5mb3JFYWNoKCAocG93ZXJ1cCkgPT4ge1xyXG4gICAgICAgICAgICBwb3dlcnVwLnVwZGF0ZShjYXROaXBPZmZzZXQpO1xyXG4gICAgICAgIH0gKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHVwZGF0ZWQgYXQgY29uc3RhbnQgNjAgaHpcclxuICAgIEZpeGVkVXBkYXRlKHBsYXllciwgZm9yZWdyb3VuZEZpbHRlcnMsIGJhY2tncm91bmRGaWx0ZXJzICl7XHJcbiAgICAgICAgaWYgKHRoaXMudGlja2VyLnN0YXJ0ZWQpe1xyXG4gICAgICAgICAgICBwbGF5ZXIubWF4VmVsID0gdGhpcy5wbGF5ZXJUcmlwVmVsO1xyXG4gICAgICAgICAgICBwbGF5ZXIuanVtcFZlbCA9IHRoaXMucGxheWVyVHJpcEp1bXA7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclRpbWUgKz0gdGhpcy5kaXNwbGFjZW1lbnRJbmNyZW1lbnQ7XHJcbiAgICAgICAgICAgIGxldCBiZXppZXJZO1xyXG4gICAgICAgICAgICBpZiAoIHRoaXMuYmV6aWVyVGltZSA+IDEpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iZXppZXJUaW1lID0gMTtcclxuICAgICAgICAgICAgICAgIGJlemllclkgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYmV6aWVyWSA9IHRoaXMuYmV6aWVyQ3VydmUuZ2V0WSh0aGlzLmJlemllclRpbWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZvcmVncm91bmRGaWx0ZXIudW5pZm9ybXMuYmV6aWVyVmFsID0gYmV6aWVyWTtcclxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kRmlsdGVyLnVuaWZvcm1zLmJlemllclZhbCA9IGJlemllclk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhbWVyYVJvdGF0aW9uID0gMC4wMTUgKiBiZXppZXJZKiAgTWF0aC5zaW4odGhpcy5maWx0ZXJUaW1lICogMC4wMik7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHRoaXMudGlja2VyTVMgPCB0aGlzLmZpbHRlclRyYW5zaXRpb25NUyl7ICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJlemllclRpbWUgKz0gdGhpcy5iZXppZXJJbmNyZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy50aWNrZXJNUyA+ICh0aGlzLmZpbHRlclRyYW5zaXRpb25NUyArIHRoaXMuZmlsdGVyU3RhdGljTVMpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJlemllclRpbWUgLT0gdGhpcy5iZXppZXJJbmNyZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCB0aGlzLnRpY2tlck1TID4gKDIqdGhpcy5maWx0ZXJUcmFuc2l0aW9uTVMgKyB0aGlzLmZpbHRlclN0YXRpY01TKSApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmV6aWVyVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlja2VyLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIGZvcmVncm91bmRGaWx0ZXJzID0gW107XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kRmlsdGVycyA9IFtdOyAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIuanVtcFZlbCA9IHRoaXMucGxheWVyRGVmYXVsdEp1bXA7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIubWF4VmVsID0gdGhpcy5wbGF5ZXJEZWZhdWx0VmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB1cGRhdGUgdGhlIGRpc3NvbHZlIGVmZmVjdCBvbiByZWNlbnRseSB0b3VjaGVkIGNhdG5pcCBwb3dlcnVwc1xyXG4gICAgICAgIHRoaXMucG93ZXJ1cHMuZm9yRWFjaChwb3dlcnVwID0+IHtcclxuICAgICAgICAgICAgcG93ZXJ1cC5GaXhlZFVwZGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFRvU3RhZ2UoZm9yZWdyb3VuZENvbnRhaW5lciwgYmFja2dyb3VuZENvbnRhaW5lcil7XHJcbiAgICAgICAgZm9yZWdyb3VuZENvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmZvcmVncm91bmROb2lzZSk7XHJcbiAgICAgICAgYmFja2dyb3VuZENvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmJhY2tncm91bmROb2lzZSk7XHJcblxyXG4gICAgICAgIGZvcmVncm91bmRDb250YWluZXIuYWRkQ2hpbGQodGhpcy5iYWRGaWx0ZXJTb2x1dGlvbik7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMudGlja2VyTVMgPSAwO1xyXG4gICAgICAgIHRoaXMudGlja2VyLnN0YXJ0KCk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgUGFsZXR0ZVN3YXBGaWx0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoZnJhZywgdGV4dHVyZSl7XHJcbiAgICAgICAgLy90ZXh0dXJlLm1pcG1hcCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyID0gbmV3IFBJWEkuRmlsdGVyKG51bGwsIGZyYWcsIHtQYWxldHRlOiB0ZXh0dXJlIH0pO1xyXG5cclxuICAgIH1cclxufSIsImltcG9ydCBNYXR0ZXIgZnJvbSAnbWF0dGVyLWpzL2J1aWxkL21hdHRlci5taW4uanMnO1xyXG5pbXBvcnQge1BpeGVsYXRlRmlsdGVyfSBmcm9tICdAcGl4aS9maWx0ZXItcGl4ZWxhdGUnO1xyXG4vL2ltcG9ydCB7Q29sb3JSZXBsYWNlRmlsdGVyfSBmcm9tICdAcGl4aS9maWx0ZXItY29sb3ItcmVwbGFjZSc7XHJcblxyXG5pbXBvcnQgeyBDZWxsdWxhck1hcCB9IGZyb20gXCIuLi9lbnRpdGllcy9tYXBHZW4uanNcIjtcclxuaW1wb3J0IHtQbGF5ZXJ9IGZyb20gJy4uL2VudGl0aWVzL3BsYXllci5qcyc7XHJcbmltcG9ydCB7IEtCQ29udHJvbGxlcn0gZnJvbSAnLi4vZW50aXRpZXMvY29udHJvbGxlci5qcyc7XHJcbmltcG9ydCB7U2hhZG93TWFwfSBmcm9tICcuLi9saWdodGluZy9zaGFkb3dNYXAuanMnO1xyXG5pbXBvcnQge015Q2FtZXJhfSBmcm9tICcuLi9lbnRpdGllcy9teUNhbWVyYS5qcyc7XHJcbmltcG9ydCB7QnV0dG9uQ29udHJvbGxlcn0gZnJvbSAnLi4vZW50aXRpZXMvYnV0dG9ucy5qcyc7XHJcbmltcG9ydCB7UGF1c2VNZW51fSBmcm9tICcuLi9lbnRpdGllcy9teU1lbnUuanMnO1xyXG5pbXBvcnQge0Rpc3NvbHZlRmlsdGVyfSBmcm9tICcuLi9maWx0ZXJzL0Rpc3NvbHZlRmlsdGVyLmpzJztcclxuaW1wb3J0IHtDYXRuaXBUcmlwfSBmcm9tICcuLi9maWx0ZXJzL2NhdFRyaXBTdGF0ZS5qcydcclxuaW1wb3J0IHtQYWxldHRlU3dhcEZpbHRlcn0gZnJvbSAnLi4vZmlsdGVycy9wYWxldHRlU3dhcC5qcyc7XHJcbmltcG9ydCB7TXlMb2FkZXJ9IGZyb20gJy4vbXlMb2FkZXIuanMnXHJcblxyXG4vLyBBbGlhc2VzXHJcbmxldCBFbmdpbmUgPSBNYXR0ZXIuRW5naW5lLFxyXG5Xb3JsZCA9IE1hdHRlci5Xb3JsZCxcclxuRXZlbnRzID0gTWF0dGVyLkV2ZW50cztcclxuXHJcbi8qKlxyXG4gKiBQYXJlbnQgb2JqZWN0IGZvciBldmVyeXRoaW5nIGluIHRoZSBnYW1lXHJcbiAqIEBjbGFzc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEdhbWUgeyAgXHJcbiAgICAvKipcclxuICAgICAgKiBAcGFyYW0ge015TG9hZGVyfSBsb2FkZXIgLSBjdXN0b20gbG9hZGVyIG9iamVjdFxyXG4gICAgICAqIEBwYXJhbSB7UElYSS5BcHBsaWNhdGlvbn0gYXBwIC0gcGl4aSBhcHBsaWNhdGlvblxyXG4gICAgKiovXHJcbiAgICBjb25zdHJ1Y3Rvcihsb2FkZXIsIGFwcCl7XHJcblxyXG4gICAgICAgIFBJWEkuU0NBTEVfTU9ERVMuREVGQVVMVCA9IFBJWEkuU0NBTEVfTU9ERVMuTkVBUkVTVDtcclxuICAgICAgICBQSVhJLnNldHRpbmdzLlNDQUxFX01PREUgPSBQSVhJLlNDQUxFX01PREVTLk5FQVJFU1Q7IFxyXG5cclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICAvLyBkaXNwbGF5IG9iamVjdCBjb250YWluZXJzICAgICAgICBcclxuICAgICAgICB0aGlzLndvcmxkQ29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7ICAgICAgLy8gZXZlcnkgZGlzcGxheSBvYmplY3QgaW4gdGhlIGdhbWUgd29ybGRcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpOyAgLy8gZXZlcnkgYW5pbWF0ZWQgc3ByaXRlIGluIHRoZSBnYW1lXHJcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kQ29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7IC8vIG9iamVjdHMgd2l0aCBubyBwYXJhbGxheCBzY3JvbGxcclxuICAgICAgICB0aGlzLmJhY2tncm91bmRDb250YWluZXIgPSBuZXcgUElYSS5Db250YWluZXIoKTsgLy8gb2JqZWN0cyBhZmZlY3RlZCBieSBwYXJhbGxheFxyXG4gICAgICAgIHRoaXMucGF1c2VNdXNpYyA9IGxvYWRlci5wYXVzZU11c2ljO1xyXG5cclxuICAgICAgICB0aGlzLnBhbGV0dGVJbmRleCA9IDI7XHJcbiAgICAgICAgdGhpcy5wYWxldHRlU3dhcCA9IG5ldyBQYWxldHRlU3dhcEZpbHRlcihsb2FkZXIucGFsZXR0ZUZyYWcsIGxvYWRlci5wYWxldHRlVGV4dHVyZXNbdGhpcy5wYWxldHRlSW5kZXhdICk7XHJcblxyXG4gICAgICAgIC8vIGRpc3NvbHZlIGVmZmVjdCBzaGFkZXJcclxuICAgICAgICB0aGlzLmRpc3NvbHZlU3ByaXRlID0gbmV3IFBJWEkuU3ByaXRlLmZyb20oJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2R2eGlreWJ5aS9pbWFnZS91cGxvYWQvdjE0ODY2MzQxMTMvMnlZYXlaa192cXN5engucG5nJyk7ICAgXHJcbiAgICAgICAgdGhpcy5kaXNzb2x2ZVNwcml0ZS50ZXh0dXJlLmJhc2VUZXh0dXJlLndyYXBNb2RlID0gUElYSS5XUkFQX01PREVTLlJFUEVBVDtcclxuXHJcbiAgICAgICAgdGhpcy5kaXNzb2x2ZVNwcml0ZS5zY2FsZS5zZXQoMC4yKTtcclxuICAgICAgICB0aGlzLmRpc3NvbHZlU2hhZGVyID0gbG9hZGVyLmRpc3NvbHZlU2hhZGVyO1xyXG4gICAgICAgIHRoaXMuYmV6aWVyRGlzcGxhY2VtZW50U2hhZGVyID0gbG9hZGVyLmRpc3BsYWNlbWVudFNoYWRlcjtcclxuICBcclxuICAgICAgICB0aGlzLndvcmxkQ29udGFpbmVyLmFkZENoaWxkKHRoaXMuZGlzc29sdmVTcHJpdGUpO1xyXG4gICAgICAgIC8vdGhpcy5kaXNzb2x2ZUVmZmVjdCA9IG5ldyBEaXNzb2x2ZUZpbHRlcih0aGlzLmRpc3NvbHZlU3ByaXRlLCBsb2FkZXIuZGlzc29sdmVTaGFkZXIsIDEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHBoeXNpY3MgRW5naW5lXHJcbiAgICAgICAgdGhpcy5lbmdpbmUgPSBFbmdpbmUuY3JlYXRlKCk7XHJcbiAgICAgICAgdGhpcy53b3JsZCA9IHRoaXMuZW5naW5lLndvcmxkO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTGFnID0gMDtcclxuXHJcbiAgICAgICAgLy8gcHJvY2VkdXJhbCBjYXZlIGdlbmVyYXRvclxyXG4gICAgICAgIHRoaXMudGlsZU1hcCA9IG5ldyBDZWxsdWxhck1hcCgyNSwyNSwxNTAsNiwgbG9hZGVyLmxpZ2h0U2hhZGVyLCBsb2FkZXIudGlsZXNldCwgbG9hZGVyLnRvcmNoRnJhbWVzKTtcclxuICAgICAgICAvLyB0aGlzLnRpbGVNYXAgPSBuZXcgTWF6ZU1hcCgyNSwyNSwxNTAsNiwgbG9hZGVyLmxpZ2h0U2hhZGVyLCBsb2FkZXIudGlsZXNldCwgbG9hZGVyLnRvcmNoRnJhbWVzKTtcclxuICAgICAgICB0aGlzLmFsbExpZ2h0cyA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xyXG5cclxuICAgICAgICAvLyBDb250YWlucyBwbGF5ZXIgYW5pbWF0aW9ucywgcGh5c2ljcyBib2RpZXMsIGZsYWdzLCBiZWhhdmlvciBmdW5jdGlvbnN4Y1xyXG4gICAgICAgIGxldCBwbGF5ZXJQb3MgPSB0aGlzLnRpbGVNYXAucGxheWVyU3Bhd247XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKHBsYXllclBvcywgbG9hZGVyLmNhdEFuaW1hdGlvbnMpO1xyXG4gICAgICAgIC8vIGhpZGUgdGhlIGNhdCdzIGV5ZXMsIEkgdGhpbmsgdGhleSBhcmUgdG9vIHNtYWxsIGZvciB0aGUgcGl4ZWxhdGlvbiBmaWx0ZXJcclxuICAgICAgICAvL2xldCBjb2xvclN3YXBwZXIgPSBuZXcgQ29sb3JSZXBsYWNlRmlsdGVyKDB4MTgxMDAwLCAweGZmYTI1MiwgMC4wMDEpO1xyXG4gICAgICAgIC8vdGhpcy5wbGF5ZXIuYW5pbWF0aW9uQ29udGFpbmVyLmZpbHRlcnMgPSBbIGNvbG9yU3dhcHBlci8qLCB0aGlzLnBhbGV0dGVTd2FwLmZpbHRlciAqL107XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGxheWVyKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ2I0IGNhdG5pcCB0cmlwJyk7XHJcblxyXG4gICAgICAgIHRoaXMuY2F0bmlwVHJpcCA9IG5ldyBDYXRuaXBUcmlwKHRoaXMuYmV6aWVyRGlzcGxhY2VtZW50U2hhZGVyLCB0aGlzLnBsYXllciwgdGhpcy50aWxlTWFwLnBvd2VydXBzKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJwYXN0IGNhdG5pcCB0cmlwXCIpXHJcblxyXG4gICAgICAgIC8vIGZpbGwgdGhlIGFuaW1hdGlvbiBjb250YWluZXJcclxuICAgICAgICB0aGlzLnRpbGVNYXAudG9yY2hTcHJpdGVzLmZvckVhY2goIChhbmltYXRpb24pID0+IHtcclxuICAgICAgICAgIHRoaXMuYW5pbWF0aW9uQ29udGFpbmVyLmFkZENoaWxkKGFuaW1hdGlvbik7IC8vIGFkZCB0b3JjaGVzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gdGhpcy5hbmltYXRpb25Db250YWluZXIuYWRkQ2hpbGQodGhpcy50aWxlTWFwLnRvcmNoQ29udGFpbmVyKTtcclxuICAgICAgICAvLyB0aGlzLnBsYXllci5hbmltYXRpb25zLmZvckVhY2goKGFuaW1hdGlvbikgPT4ge1xyXG4gICAgICAgIC8vICAgdGhpcy5hbmltYXRpb25Db250YWluZXIuYWRkQ2hpbGQoYW5pbWF0aW9uKTsgIC8vIGFkZCBwbGF5ZXIgYW5pbWF0aW9ucyBcclxuICAgICAgICAvLyB9KTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRhaW5lci5hZGRDaGlsZCh0aGlzLnBsYXllci5hbmltYXRpb25Db250YWluZXIpO1xyXG5cclxuICAgICAgICAvLyBBZGQgcGxheWVyJ3MgcmlnaWRib2R5IHRvIG1hdHRlcmpzIHdvcmxkXHJcbiAgICAgICAgV29ybGQuYWRkKHRoaXMud29ybGQsIHRoaXMucGxheWVyLmJvZHkpO1xyXG5cclxuICAgICAgICAvLyBBZGQgdGlsZSBjb2xsaWRlcnMgdG8gbWF0dGVyanMgZW5naW5lXHJcbiAgICAgICAgdGhpcy50aWxlTWFwLnRlcnJhaW4uZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBXb3JsZC5hZGQodGhpcy53b3JsZCwgZWxlbWVudC5Db2xsaWRlcik7XHJcbiAgICAgICAgICAgIGlmICggZWxlbWVudC53YWxrQm94KVxyXG4gICAgICAgICAgICAgICAgV29ybGQuYWRkKHRoaXMud29ybGQsIGVsZW1lbnQud2Fsa0JveCk7XHJcblxyXG4gICAgICAgICAgICBXb3JsZC5hZGQodGhpcy53b3JsZCwgZWxlbWVudC5lZGdlQm94ZXMpXHJcbiAgICAgICAgfSk7IFxyXG5cclxuICAgICAgICB0aGlzLnRpbGVNYXAucG93ZXJ1cHMuZm9yRWFjaCggKHBvd2VydXApID0+IHtcclxuICAgICAgICAgIFdvcmxkLmFkZCh0aGlzLndvcmxkLCBwb3dlcnVwLmNvbGxpZGVyKTtcclxuICAgICAgICAgIC8vY29uc29sZS5sb2cocG93ZXJ1cC5jb2xsaWRlcik7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAvLyBJbnB1dCBoYW5kbGVyc1xyXG4gICAgICAgIC8vIGNhbWVyYSBtb3ZlbWVudCBjb250cm9sXHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgTXlDYW1lcmEocGxheWVyUG9zKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZygnYmVmb3JlIHBhdXNlbWVudScpXHJcblxyXG4gICAgICAgIC8vIHBhc3MgdGhlIHRpY2tlciBhbmQgYW5pbWF0aW9uIGNvbnRhaW5lciB0byBwYXVzZSB0aGUgZ2FtZSBsb29wXHJcbiAgICAgICAgdGhpcy5wYXVzZU1lbnUgPSBuZXcgUGF1c2VNZW51KCBsb2FkZXIubWVudUJ1dHRvbnMsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyLnBhbGV0dGVUZXh0dXJlcywgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclBvcywgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvbnRhaW5lciwgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWxldHRlU3dhcC5maWx0ZXIsICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmFuaW1hdGlvbkNvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLnRpY2tlciwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhdG5pcFRyaXAudGlja2VyKTsgIFxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnYWZ0ZXIgcGF1c2VtZW51JylcclxuICAgICAgICB0aGlzLmJ1dHRvbkNvbnRyb2xsZXIgPSBudWxsO1xyXG4gICAgICAgIGlmICggXCJvbnRvdWNoc3RhcnRcIiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgKXtcclxuICAgICAgICAgIHRoaXMuYnV0dG9uQ29udHJvbGxlciA9IG5ldyBCdXR0b25Db250cm9sbGVyKGxvYWRlci5idXR0b25GcmFtZXMsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnBvc2l0aW9uLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5oYW5kbGVFdmVudC5iaW5kKHRoaXMucGxheWVyKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXVzZU1lbnUuaGFuZGxlRXZlbnQuYmluZCh0aGlzLnBhdXNlTWVudSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAucmVuZGVyZXIudmlld1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB0aGlzLnBhdXNlTWVudS5hdHRhY2hDb250cm9sbGVyKHRoaXMuYnV0dG9uQ29udHJvbGxlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdmlydHVhbCBqb3lzdGlja1xyXG4gICAgICAgIC8vIGlmIChcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmN1c3RvbUpveXN0aWNrID0gbmV3IENvbnRyb2xsZXIodGhpcy5wbGF5ZXIsIHRoaXMucGxheWVyLmJvZHkpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAgICAgLy8ga2V5Ym9hcmRcclxuICAgICAgICB0aGlzLktCSW5wdXQgPSBuZXcgS0JDb250cm9sbGVyKHRoaXMucGxheWVyLCB0aGlzLnBsYXllci5ib2R5LCB0aGlzLmFwcC50aWNrZXIsIHRoaXMuY2FtZXJhLCB0aGlzLnBhdXNlTWVudSk7XHJcblxyXG4gICAgICAgIC8vIHJlc2l6ZSBjYW52YXMgb24gd2luZG93IHJlc2l6ZVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZS5iaW5kKHRoaXMpLCBmYWxzZSApO1xyXG5cclxuICAgICAgICAvLyBnYW1lIHN0YXRlIGNoYW5naW5nIGNvbGxpc2lvbiBldmVudHNcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbkV2ZW50U2V0dXAoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuc3RhZ2UucG9zaXRpb24uc2V0KHRoaXMuYXBwLnNjcmVlbi53aWR0aC8yLCB0aGlzLmFwcC5zY3JlZW4uaGVpZ2h0LzIpO1xyXG5cclxuICAgICAgICAvLyBkcmF3IHRoZSBzdGF0aWMgbGlnaHRcclxuICAgICAgICB0aGlzLnRpbGVNYXAubGlnaHRzLmZvckVhY2goIChsaWdodCkgPT4ge1xyXG4gICAgICAgICAgbGlnaHQudXBkYXRlKHRoaXMuYXBwLnRpY2tlci5zcGVlZCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBvYmplY3RzIHRvIHBpeGkgc3RhZ2VcclxuICAgICAgICB0aGlzLmluaXRMYXllcnMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuc3RhZ2Uuc2NhbGUuc2V0KDAuNSk7XHJcblxyXG4gICAgICAgIC8vIFN0YXJ0IHRoZSBnYW1lIGxvb3AgXHJcbiAgICAgICAgdGhpcy5hcHAudGlja2VyLmFkZChkZWx0YSA9PiB0aGlzLmxvb3AoZGVsdGEpKTsgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyBtYWluIGdhbWUgbG9vcCwgZG9lcyBub3QgdXBkYXRlIGF0IGEgY29uc3RhbnQgcmF0ZVxyXG4gICAgbG9vcChkZWx0YSl7XHJcbiAgICAgICAgLy8gdXBkYXRlIHBoeXNpY3MgYm9kaWVzIGF0IDYwIGh6IGNvbnN0YW50XHJcbiAgICAgICAgdGhpcy5GaXhlZFVwZGF0ZSgpO1xyXG4gICAgICAgIGlmICggdGhpcy5jYXRuaXBUcmlwLnRpY2tlci5zdGFydGVkKVxyXG4gICAgICAgICAgdGhpcy53b3JsZENvbnRhaW5lci5yb3RhdGlvbiA9IHRoaXMuY2F0bmlwVHJpcC5jYW1lcmFSb3RhdGlvbjtcclxuXHJcbiAgICAgICAgdGhpcy5wYXVzZU1lbnUubW92ZUJ1dHRvbnModGhpcy5jYW1lcmEucG9zaXRpb24pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAvLyBhZGp1c3Qgc3RhZ2UgZm9yIGNhbWVyYSBtb3ZlbWVudFxyXG4gICAgICAgIHRoaXMuYXBwLnN0YWdlLnBpdm90LmNvcHlGcm9tKHRoaXMuY2FtZXJhLnBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLmFwcC5zdGFnZS5hbmdsZSA9IHRoaXMuY2FtZXJhLmFuZ2xlT2Zmc2V0O1xyXG5cclxuICAgICAgICB0aGlzLnRpbGVNYXAucGFyYWxsYXhTY3JvbGwodGhpcy5hcHAuc3RhZ2UucGl2b3QsIDEuMiwgMS4yKTtcclxuXHJcbiAgICAgICAgdGhpcy5jYXRuaXBUcmlwLnVwZGF0ZShkZWx0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgRml4ZWRVcGRhdGUoKXtcclxuICAgICAgdGhpcy51cGRhdGVMYWcgKz0gdGhpcy5hcHAudGlja2VyLmRlbHRhTVM7XHJcbiAgICAgIHdoaWxlICggdGhpcy51cGRhdGVMYWcgPj0gMTYuNjY2ICl7XHJcbiAgICAgICAgICAvLyBhcHBseSBwbGF5ZXIgaW5wdXQgdG8gcGh5c2ljcyBib2RpZXNcclxuICAgICAgICAgIHRoaXMucGxheWVyLnVwZGF0ZSh0aGlzLmFwcC50aWNrZXIuc3BlZWQpO1xyXG4gICAgICAgICAgRW5naW5lLnVwZGF0ZSh0aGlzLmVuZ2luZSk7XHJcbiAgICAgICAgICBpZiAoIHRoaXMucGxheWVyLmNhbWVyYVNuYXBwZWQpXHJcbiAgICAgICAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlKHRoaXMucGxheWVyLnBvc2l0aW9uLCB0aGlzLnBsYXllci5mbGlwLCB0aGlzLmFwcC50aWNrZXIuc3BlZWQpO1xyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS51cGRhdGUodGhpcy5wbGF5ZXIuY2xpbWJUcmFuc2xhdGlvbiwgdGhpcy5wbGF5ZXIuZmxpcCwgdGhpcy5hcHAudGlja2VyLnNwZWVkKTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBpbmNyZWFzZSBncmF2aXR5IGlmIHBsYXllciBpcyBmYWxsaW5nXHJcbiAgICAgICAgICBpZiAoIXRoaXMucGxheWVyLmlzR3JvdW5kZWQgJiYgIXRoaXMucGxheWVyLmluU2xpZGUgJiYgIXRoaXMucGxheWVyLmlzSGFuZ2luZyAmJiB0aGlzLnBsYXllci5ib2R5LnZlbG9jaXR5LnkgPiAwKXtcclxuICAgICAgICAgICAgICBpZiAoIHRoaXMud29ybGQuZ3Jhdml0eS55IDwgMy41IClcclxuICAgICAgICAgICAgICAgIHRoaXMud29ybGQuZ3Jhdml0eS55ICs9IDAuMDE1O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy53b3JsZC5ncmF2aXR5LnkgPSAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gbW92ZSBmb3J3YXJkIG9uZSB0aW1lIHN0ZXBcclxuICAgICAgICAgIHRoaXMudXBkYXRlTGFnIC09IDE2LjY2NlxyXG4gICAgICAgICAgdGhpcy50aWxlTWFwLmxpZ2h0cy5mb3JFYWNoKCAobGlnaHQpID0+IHtcclxuICAgICAgICAgICAgbGlnaHQubGlnaHRDb250YWluZXIuY2hpbGRyZW4uZm9yRWFjaCggKCBtZXNoICkgPT4ge1xyXG4gICAgICAgICAgICBtZXNoLnNoYWRlci51bmlmb3Jtcy50aW1lICs9IDAuMDAwMDM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHVwZGF0ZSBjYXRuaXAgdHJpcCBlZmZlY3RcclxuICAgICAgICB0aGlzLmNhdG5pcFRyaXAuRml4ZWRVcGRhdGUodGhpcy5wbGF5ZXIsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5maWx0ZXJzLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhY2tncm91bmRDb250YWluZXIuZmlsdGVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYWRkIHBpeGkgb2JqZWN0cyB0byBnbG9iYWwgcmVuZGVyZXIsIFxyXG4gICAgLy8gd29ya3MgbGlrZSBhIHN0YWNrLCBsYXN0IGVsZW1lbnQgYWRkZWQgPSB0b3AgZ3JhcGhpY3MgbGF5ZXJcclxuICAgIGluaXRMYXllcnMoKSB7XHJcbiAgICAgICAgLy8gYmFja2dyb3VuZCAvIHVuaW50ZXJhY3RhYmxlIHRpbGVzXHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29udGFpbmVyLmFkZENoaWxkKHRoaXMudGlsZU1hcC5iYWNrZ3JvdW5kQ29udGFpbmVyKTtcclxuICAgICAgICB0aGlzLndvcmxkQ29udGFpbmVyLmFkZENoaWxkKHRoaXMuYmFja2dyb3VuZENvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIC8vIGFkZCBhbmltYXRpb25zXHJcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kQ29udGFpbmVyLmFkZENoaWxkKHRoaXMuYW5pbWF0aW9uQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHRlcnJhaW4gdGlsZXNcclxuICAgICAgICB0aGlzLmZvcmVncm91bmRDb250YWluZXIuYWRkQ2hpbGQodGhpcy50aWxlTWFwLnRpbGVDb250YWluZXIpO1xyXG4gICAgICBcclxuICAgICAgICB0aGlzLnRpbGVNYXAubGlnaHRzLmZvckVhY2goIChsaWdodCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5hbGxMaWdodHMuYWRkQ2hpbGQobGlnaHQubGlnaHRDb250YWluZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmFsbExpZ2h0cyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gbWFrZXMgYSBtYXNrIGZvciBzaGFkb3dzXHJcbiAgICAgICAgbGV0IHNoYWRvd01hcCA9IG5ldyBTaGFkb3dNYXAodGhpcy50aWxlTWFwLmxpZ2h0cywgdGhpcy50aWxlTWFwLCB0aGlzLmFwcC5yZW5kZXJlcik7XHJcbiAgICAgIFxyXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5hZGRDaGlsZChzaGFkb3dNYXAuZm9jdXMpO1xyXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5hZGRDaGlsZChzaGFkb3dNYXAubWVzaCk7XHJcblxyXG4gICAgICAgIHRoaXMud29ybGRDb250YWluZXIuYWRkQ2hpbGQodGhpcy5mb3JlZ3JvdW5kQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuc3RhZ2UuYWRkQ2hpbGQodGhpcy53b3JsZENvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIC8vIGFkZCB1aSBidXR0b25zIHRvIHRoZSB0b3AgbGF5ZXJcclxuICAgICAgICB0aGlzLmFwcC5zdGFnZS5hZGRDaGlsZCh0aGlzLnBhdXNlTWVudS5idXR0b25Db250YWluZXIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmNhdG5pcFRyaXAuZm9yZWdyb3VuZE5vaXNlKTtcclxuICAgICAgICB0aGlzLmZvcmVncm91bmRDb250YWluZXIuYWRkQ2hpbGQodGhpcy5jYXRuaXBUcmlwLmJhZEZpbHRlclNvbHV0aW9uKTtcclxuICAgICAgICB0aGlzLnRpbGVNYXAuYmFja2dyb3VuZENvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmNhdG5pcFRyaXAuYmFja2dyb3VuZE5vaXNlKTtcclxuXHJcbiAgICAgICAgLy8gYXBwbHkgZmlsdGVycyB0byBjb250YWluZXJzXHJcbiAgICAgICAgdGhpcy53b3JsZENvbnRhaW5lci5maWx0ZXJzID0gW25ldyBQaXhlbGF0ZUZpbHRlcigzKV07XHJcbiAgICAgIH1cclxuXHJcbiAgICAvLyBOU0ZXIFNwYWdoZXR0aSBjb2RlXHJcbiAgICBjb2xsaXNpb25FdmVudFNldHVwKCkge1xyXG4gICAgICAgIEV2ZW50cy5vbih0aGlzLmVuZ2luZSwgJ2NvbGxpc2lvbkFjdGl2ZScsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgdmFyIGluV2Fsa0JveCA9IGZhbHNlO1xyXG4gICAgICAgICAgdmFyIGNhdENvbGxpc2lvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgdmFyIHBhaXJzID0gZXZlbnQucGFpcnM7XHJcbiAgICAgICAgICB2YXIgcGh5c2ljc0NvbGxpc2lvbnMgPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGNvbGxpc2lvbiBwYWlyc1xyXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBcclxuICAgICAgICAgICAgbGV0IHBhaXIgPSBwYWlyc1tpXTtcclxuICAgICAgICAgICAgbGV0IG90aGVyQm9keTtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGNvbGxpc2lvbiBpbnZvbHZlcyB0aGUgY2F0XHJcbiAgICAgICAgICAgIGlmICggcGFpci5ib2R5QS5pZCA9PSB0aGlzLnBsYXllci5ib2R5LmlkIClcclxuICAgICAgICAgICAgICAgIG90aGVyQm9keSA9IHBhaXIuYm9keUI7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCBwYWlyLmJvZHlCLmlkID09IHRoaXMucGxheWVyLmJvZHkuaWQgKVxyXG4gICAgICAgICAgICAgICAgb3RoZXJCb2R5ID0gcGFpci5ib2R5QTtcclxuICAgICAgXHJcbiAgICAgICAgICAgIC8vIGlnbm9yZSBjb2xsaXNpb24gaWYgcGxheWVyIG5vdCBpbnZvbHZlZFxyXG4gICAgICAgICAgICBlbHNlIGNvbnRpbnVlO1xyXG4gICAgICBcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgY29sbGlzaW9uIHdpdGggc2Vuc29yc1xyXG4gICAgICAgICAgICBpZiAoIG90aGVyQm9keS5pc1NlbnNvciApIHtcclxuICAgICAgICAgICAgICAvLyBpZiBjb2xsZGluZyB3aXRoIGEgbGVkZ2UgY2xpbWIgdHJpZ2dlciBjb2xsaWRlclxyXG4gICAgICAgICAgICAgIGlmICggb3RoZXJCb2R5LmlzRWRnZUJveCApIHtcclxuICAgICAgICAgICAgICAgIGlmICgodGhpcy5wbGF5ZXIubGFzdElucHV0ID09IFwicmlnaHRcIiAmJiAhb3RoZXJCb2R5LmlzUmlnaHQpIHx8IHRoaXMucGxheWVyLmxhc3RJbnB1dCA9PSBcImxlZnRcIiAmJiBvdGhlckJvZHkuaXNSaWdodCl7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMud29ybGQuZ3Jhdml0eS55ID0gMTtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgaW1wYWN0VmVsID0gdGhpcy5wbGF5ZXIucHJldlZlbDtcclxuICAgICAgICAgICAgICAgICAgaWYgKGltcGFjdFZlbCA+IHRoaXMucGxheWVyLmZhbGxEYW1hZ2VWZWwgJiYgdGhpcy5wYXVzZU1lbnUuY2FtZXJhU2hha2UpIFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLmFkZFRyYXVtYShpbXBhY3RWZWwgLyAodGhpcy5wbGF5ZXIuZmFsbERhbWFnZVZlbCAqIDIpKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc3RhcnRMZWRnZUNsaW1iKG90aGVyQm9keS5wb3NpdGlvbiwgb3RoZXJCb2R5LmlzUmlnaHQpXHJcbiAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gc2tpcCB0aGUgcmVzdCBvZiB0aGUgY29sbGlzaW9uIGNoZWNrcyBmb3IgdGhpcyBmcmFtZTsgdGhlIHBsYXllciB3aWxsIGJlIGxvY2tlZCBpbiBwbGFjZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGluV2Fsa0JveCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5pc0dyb3VuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmluU2xpZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvLyBpZiBjb2xsaWRpbmcgd2l0aCBhIGdyb3VuZCB0cmlnZ2VyIGNvbGxpZGVyXHJcbiAgICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMucGxheWVyLmlzSGFuZ2luZylcclxuICAgICAgICAgICAgICAgIGluV2Fsa0JveCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICggb3RoZXJCb2R5LmlzQ2F0bmlwICl7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZm9yZWdyb3VuZENvbnRhaW5lci5maWx0ZXJzID0gW3RoaXMuY2F0bmlwVHJpcC5mb3JlZ3JvdW5kRmlsdGVyXTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy50aWxlTWFwLmJhY2tncm91bmRDb250YWluZXIuZmlsdGVycyA9IFt0aGlzLmNhdG5pcFRyaXAuYmFja2dyb3VuZEZpbHRlcl07XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2F0bmlwVHJpcC5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgICBXb3JsZC5yZW1vdmUodGhpcy53b3JsZCwgb3RoZXJCb2R5KTtcclxuICAgICAgICAgICAgICAgICAgb3RoZXJCb2R5LnNwcml0ZVJlZmVyZW5jZS5maWx0ZXJzID0gW25ldyBEaXNzb2x2ZUZpbHRlcih0aGlzLmRpc3NvbHZlU3ByaXRlLCB0aGlzLmRpc3NvbHZlU2hhZGVyLCAxKV07XHJcbiAgICAgICAgICAgICAgICAgIC8vIHRoaXMudGlsZU1hcC50aWxlQ29udGFpbmVyLnJlbW92ZUNoaWxkKG90aGVyQm9keS5zcHJpdGVSZWZlcmVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhvdGhlckJvZHkuc3ByaXRlUmVmZXJlbmNlKVxyXG4gICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSAgey8vIGlmIHBoeXNpY3MgY29sbGlzaW9uXHJcbiAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuY29sbGlzaW9uVGltZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICAgIGNhdENvbGxpc2lvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgcGh5c2ljc0NvbGxpc2lvbnMrKztcclxuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwaHlzaWNzQ29sbGlzaW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gY2F0IGlzIHNsaWRpbmcgb24gYSB3YWxsIGNhc2VcclxuICAgICAgICAgIGlmICghaW5XYWxrQm94ICYmIGNhdENvbGxpc2lvbiAmJiAhdGhpcy5wbGF5ZXIuaXNHcm91bmRlZCApIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIud2FsbEp1bXBUaW1lci5zdG9wKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyLnhWZWwgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllci5pblNsaWRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKCB0aGlzLnBsYXllci5mbGlwID09IFwicmlnaHRcIil7XHJcbiAgICAgICAgICAgICAgdmFyIHNsaWRlQW5pbWF0aW9uID0gdGhpcy5wbGF5ZXIuYW5pbWF0aW9ucy5nZXQoXCJzbGlkZVwiKTtcclxuICAgICAgICAgICAgICBzbGlkZUFuaW1hdGlvbi5zY2FsZS54ID0gLXRoaXMucGxheWVyLnNjYWxlO1xyXG4gICAgICAgICAgICAgIHNsaWRlQW5pbWF0aW9uLmFuZ2xlID0gLTkwO1xyXG4gICAgICAgICAgICAgIHRoaXMucGxheWVyLmFuaW1hdGlvbnMuc2V0KFwic2xpZGVcIiwgc2xpZGVBbmltYXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCB0aGlzLnBsYXllci5mbGlwID09IFwibGVmdFwiKXtcclxuICAgICAgICAgICAgICB2YXIgc2xpZGVBbmltYXRpb24gPSB0aGlzLnBsYXllci5hbmltYXRpb25zLmdldChcInNsaWRlXCIpO1xyXG4gICAgICAgICAgICAgIHNsaWRlQW5pbWF0aW9uLnNjYWxlLnggPSAtdGhpcy5wbGF5ZXIuc2NhbGU7XHJcbiAgICAgICAgICAgICAgc2xpZGVBbmltYXRpb24uYW5nbGUgPSA5MDtcclxuICAgICAgICAgICAgICB0aGlzLnBsYXllci5hbmltYXRpb25zLnNldChcInNsaWRlXCIsIHNsaWRlQW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnBsYXllci5zZXRBbmltYXRpb24oXCJzbGlkZVwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gaWYgbGFuZGluZyAgIFxyXG4gICAgICAgICAgZWxzZSBpZiAoICF0aGlzLnBsYXllci5pc0dyb3VuZGVkICYmICggKGluV2Fsa0JveCAmJiBjYXRDb2xsaXNpb24gJiYgIXRoaXMucGxheWVyLmluU2xpZGUpIHx8IChwaHlzaWNzQ29sbGlzaW9ucyA+PSAyICYmIGluV2Fsa0JveCApICkgKSAgeyAgXHJcbiAgICAgICAgICAgIHRoaXMud29ybGQuZ3Jhdml0eS55ID0gMTtcclxuICAgICAgICAgICAgY29uc3QgaW1wYWN0VmVsID0gdGhpcy5wbGF5ZXIucHJldlZlbDtcclxuICAgICAgICAgICAgaWYgKGltcGFjdFZlbCA+IHRoaXMucGxheWVyLmZhbGxEYW1hZ2VWZWwgJiYgdGhpcy5wYXVzZU1lbnUuY2FtZXJhU2hha2UpIFxyXG4gICAgICAgICAgICAgIHRoaXMuY2FtZXJhLmFkZFRyYXVtYShpbXBhY3RWZWwgLyAodGhpcy5wbGF5ZXIuZmFsbERhbWFnZVZlbCAqIDIpKTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIucHJldlZlbCA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIuaXNHcm91bmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyLmluU2xpZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCB0aGlzLnBsYXllci54VmVsID09IDAgfHwgdGhpcy5wbGF5ZXIuaW5TbG93RG93biApXHJcbiAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc2V0QW5pbWF0aW9uKFwic3RvcFwiKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoICF0aGlzLnBsYXllci5pblNsb3dEb3duIClcclxuICAgICAgICAgICAgICB0aGlzLnBsYXllci5zZXRBbmltYXRpb24oXCJ3YWxrXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICAgIC8vIHN0YXJ0IGEgdGltZXIgaWYgdGhlIHBsYXllciBlbmRzIGEgY29sbGlzaW9uIHdpdGggYSBwaHlzaWNzIGNvbGxpZGVyXHJcbiAgICAgICAgRXZlbnRzLm9uKHRoaXMuZW5naW5lLCAnY29sbGlzaW9uRW5kJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICBsZXQgcGFpcnMgPSBldmVudC5wYWlycztcclxuICAgICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBjb2xsaXNpb24gcGFpcnNcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHBhaXIgPSBwYWlyc1tpXTtcclxuICAgICAgICAgICAgbGV0IG90aGVyQm9keTtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGNvbGxpc2lvbiBpbnZvbHZlcyB0aGUgY2F0XHJcbiAgICAgICAgICAgIGlmICggcGFpci5ib2R5QS5pZCA9PSB0aGlzLnBsYXllci5ib2R5LmlkIClcclxuICAgICAgICAgICAgICAgIG90aGVyQm9keSA9IHBhaXIuYm9keUI7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCBwYWlyLmJvZHlCLmlkID09IHRoaXMucGxheWVyLmJvZHkuaWQgKVxyXG4gICAgICAgICAgICAgICAgb3RoZXJCb2R5ID0gcGFpci5ib2R5QTtcclxuICAgICAgXHJcbiAgICAgICAgICAgIGlmICghb3RoZXJCb2R5LmlzU2Vuc29yKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuY29sbGlzaW9uVGltZXIuc3RhcnQoKTtcclxuICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5ZXIuYm9keS52ZWxvY2l0eS55IDwgMCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5zZXRBbmltYXRpb24oXCJqdW1wXCIsIDUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuY29sbGlzaW9uVGltZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuaXNHcm91bmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuaW5TbGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuanVtcElucHV0ID0gZmFsc2U7ICAgIFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZXNpemUgYW5kIGNlbnRlciBjYW52YXNcclxuICAgIG9uV2luZG93UmVzaXplKCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcInJlc2l6ZVwiKVxyXG4gICAgICAgIC8vIEdldCBjYW52YXMgcGFyZW50IG5vZGVcclxuICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmFwcC52aWV3LnBhcmVudE5vZGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gUmVzaXplIHRoZSByZW5kZXJlclxyXG4gICAgICAgIHRoaXMuYXBwLnJlbmRlcmVyLnJlc2l6ZShwYXJlbnQuY2xpZW50V2lkdGgsIHBhcmVudC5jbGllbnRIZWlnaHQpO1xyXG4gICAgICAgIC8vdGhpcy5hcHAucmVuZGVyZXIucmVzaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgIC8vIExvY2sgdGhlIGNhbWVyYSB0byB0aGUgY2F0J3MgcG9zaXRpb24gXHJcbiAgICAgICAgdGhpcy5hcHAuc3RhZ2UucG9zaXRpb24uc2V0KHRoaXMuYXBwLnNjcmVlbi53aWR0aC8yLCB0aGlzLmFwcC5zY3JlZW4uaGVpZ2h0LzIpO++7v++7v1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgdGhpcy50aWxlTWFwLmxpZ2h0cy5mb3JFYWNoKCAoIGxpZ2h0ICkgPT4ge1xyXG4gICAgICAgICAgIGxpZ2h0LnVwZGF0ZSh0aGlzLmFwcC50aWNrZXIuc3BlZWQpO1xyXG4gICAgICAgICAgIHRoaXMud29ybGRDb250YWluZXIuYWRkQ2hpbGQobGlnaHQubGlnaHRDb250YWluZXIpO1xyXG4gICAgICAgICB9KTsgICAgICAgXHJcblxyXG4gICAgICAgIHRoaXMucGF1c2VNZW51Lm9uUmVzaXplKCk7XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gIFdyaXR0ZW4gYnkgQXVzdGluIEJvYmNvLCBTZXB0ZW1iZXIgMjAxOVxyXG5cclxuICAgIFRoaXMgcHJvamVjdCBpcyBjYWxsZWQgXCJDYXRhdG9uaWFcIi4gT3JpZ2luYWxseSBkZXNpZ25lZCB0byBiZSBhIDJEIFN0ZWFsdGgvXHJcbiAgUGxhdGZvcm1lciBnYW1lLiBZb3UgcGxheSBhcyBhIGNhdCwgdHJ5aW5nIHRvIGNsaW1iIGZ1cm5pdHVyZSB3aGlsZSBhdm9pZGluZ1xyXG4gIHlvdXIgb3duZXJzJyB2aXNpb24uIFRoaXMgc2hvdWxkIHJ1biBvbiBhbGwgdGhlIG1ham9yIGJyb3dzZXJzICggQ2hyb21lLCBGaXJlZm94LFxyXG4gIFNhZmFyaSwgSUUvRWRnZSwgZXRjLi4gKSBhbmQgc2hvdWxkIHJ1biBjcm9zcyBwbGF0Zm9ybSBvbiBpT1MsIGFuZHJvaWQsIHdpbmRvd3MsIG1hYywgXHJcbiAgYW5kIGxpbnV4LiBVc2VzIHBpeGkuanMgZm9yIHRoZSBXZWJHTC9jYW52YXMgcmVuZGVyaW5nIGJhY2tlbmQuIFxyXG4gIFxyXG4gIERlcGVuZGVuY2llczpcclxuICAgIG5wbTogICAgICAgIHBhY2thZ2UgbWFuYWdlclxyXG4gICAgd2VicGFjazogICAgYXNzZXQgYnVuZGxlclxyXG4gICAgcGl4aS5qczogICAgMkQgV2ViR0wgcmVuZGVyZXJcclxuICAgIG1hdHRlci5qczogIDJEIHBoeXNpY3MgZW5naW5lIFxyXG4gICAgbmlwcGxlanM6ICAgdmlydHVhbCBqb3lzdGlja3NcclxuXHJcbiAgQnVuZGxpbmc6XHJcbiAgICBFeHBvcnQgc2V0dGluZ3MgYXJlIGluIHRoZSBcIndlYnBhY2suY29uZmlnLmpzXCIgZmlsZVxyXG4gICAgQnVpbGQgdGhlIGFwcCBmcm9tIHRoZSB0ZXJtaW5hbCB3aXRoIHRoaXMgY29tbWFuZDpcclxuICAgICAgICBucG0gcnVuIGJ1aWxkXHJcblxyXG4gIEFydDpcclxuICAgICAgQWxsIGFydCBmb3IgdGhpcyBnYW1lIHdhcyByaXBwZWQgZnJvbSBcIkNhc3RsZXZhbmlhOiBPcmRlciBvZiBFY2NsZXNpYVwiLCBhIFxyXG4gICAgTmludGVuZG8gRFMgZXhjbHVzaXZlLCBvcmlnaW5hbGx5IHJlbGVhc2VkIGJ5IEtvbmFtaSBvbiBPY3RvYmVyIDIxLCAyMDA4LiBJZiB5b3UgbGlrZSB0aGVcclxuICAgIGFydCBpbiB0aGlzIGdhbWUsIGdvIHN1cHBvcnQgS29uYW1pIGFuZCBidXkgdGhhdCBnYW1lISBcclxuXHJcbiAgICBJZiB5b3Ugd2FudCB0byBtYWtlIHlvdXIgb3duIHByb2plY3Qgd2l0aCBzcHJpdGVzIGZyb20gdGhpcyBnYW1lLCB5b3UgY2FuIGZpbmQgdGhlbSBoZXJlOlxyXG4gICAgICBodHRwczovL3d3dy5zcHJpdGVycy1yZXNvdXJjZS5jb20vZHNfZHNpL2Nhc3RsZXZhbmlhb3JkZXJvZmVjY2xlc2lhL1xyXG4qL1xyXG5cclxuaW1wb3J0IHtNeUxvYWRlcn0gZnJvbSAnLi9hcHAvbXlMb2FkZXIuanMnO1xyXG5pbXBvcnQge0dhbWV9IGZyb20gJy4vYXBwL2dhbWUuanMnO1xyXG5pbXBvcnQge3dhaXRGb3JXZWJmb250c30gZnJvbSAnLi9hcHAvbG9hZEZvbnRzLmpzJ1xyXG5cclxubGV0IGFwcDtcclxubGV0IG15R2FtZTtcclxuXHJcbi8vIERldGVjdCBMaW51eCBcclxuLy8gaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoXCJMaW51eFwiKSE9LTEpXHJcbiAgXHJcbi8vIENyZWF0ZSBQaXhpIEFwcGxpY2F0aW9uXHJcblxyXG53YWl0Rm9yV2ViZm9udHMoWydBUkNBREVDTEFTU0lDJ10sIEluaXRQaXhpKCkpO1xyXG5cclxuLy8gSW5pdFBpeGkoKTtcclxuXHJcbi8vIGxvYWQgZmlsZXMsIGNhbGwgdGhlIHNldHVwIGZ1bmN0aW9uLCBiaW5kIHRoZSBjYWxsaW5nIGNvbnRleHQgdG8gdGhpcyBmaWxlJ3MgZ2xvYmFsIHNjb3BlXHJcbmxldCBjdXN0b21Mb2FkZXIgPSBuZXcgTXlMb2FkZXIoc2V0dXAuYmluZCh0aGlzKSk7XHJcblxyXG4vLyBTZXQgdXAgdGhlIGdhbWUgYWZ0ZXIgYWxsIGZpbGVzIGxvYWQgXHJcbmZ1bmN0aW9uIHNldHVwKCkge1xyXG4gIG15R2FtZSA9IG5ldyBHYW1lKGN1c3RvbUxvYWRlciwgYXBwLCB0aGlzKTtcclxuXHJcbiAgcHJldmVudFNjcm9sbCgpOyAgLy8gc3RvcHMgam95c3RpY2sgZnJvbSBzY3JvbGxpbmcgcGFnZSBvbiBtb2JpbGVcclxufVxyXG5cclxuLy89PT09PT09PT09PT09PT09PT09PSBIZWxwZXIgRnVuY3Rpb25zID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0vL1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBQaXhpIEFwcGxpY2F0aW9uXHJcbmZ1bmN0aW9uIEluaXRQaXhpKCkge1xyXG4gICAgYXBwID0gbmV3IFBJWEkuQXBwbGljYXRpb24oeyBcclxuICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLCBcclxuICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgYW50aWFsaWFzOiB0cnVlLCBcclxuICAgICAgdHJhbnNwYXJlbnQ6IGZhbHNlLCBcclxuICAgICAgcmVzb2x1dGlvbjogMSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yOiAweDAwMDAwMCAsXHJcbiAgICAgIGF1dG9EZW5zaXR5OiB0cnVlXHJcbiAgICB9XHJcbiAgKTtcclxuICAvLyBGaXQgdGhlIGNhbnZhcyB0byB0aGUgd2luZG93XHJcbiAgYXBwLnJlbmRlcmVyLnZpZXcuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcbiAgYXBwLnJlbmRlcmVyLnZpZXcuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAvLyBBZGQgdGhlIGNhbnZhcyB0byB0aGUgZG9jdW1lbnRcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXlDYW52YXMnKS5hcHBlbmRDaGlsZChhcHAudmlldyk7XHJcbn1cclxuXHJcbi8vIFByZXZlbnQgdG91Y2ggZXZlbnQgc2Nyb2xsaW5nIG9uIG1vYmlsZVxyXG5mdW5jdGlvbiBwcmV2ZW50U2Nyb2xsKCkge1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUNhbnZhcycpLm9udG91Y2hlbmQgPSAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH07XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215Q2FudmFzJykub250b3VjaG1vdmUgPSAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH07XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215Q2FudmFzJykub250b3VjaHN0YXJ0ID0gKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICB9OyBcclxufSIsImZ1bmN0aW9uIHdhaXRGb3JXZWJmb250cyhmb250cywgY2FsbGJhY2spIHtcclxuICAgIHZhciBsb2FkZWRGb250cyA9IDA7XHJcbiAgICBmb3IodmFyIGkgPSAwLCBsID0gZm9udHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgKGZ1bmN0aW9uKGZvbnQpIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgICAgIC8vIENoYXJhY3RlcnMgdGhhdCB2YXJ5IHNpZ25pZmljYW50bHkgYW1vbmcgZGlmZmVyZW50IGZvbnRzXHJcbiAgICAgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gJ2dpSXRUMVdReUAhLS8jJztcclxuICAgICAgICAgICAgLy8gVmlzaWJsZSAtIHNvIHdlIGNhbiBtZWFzdXJlIGl0IC0gYnV0IG5vdCBvbiB0aGUgc2NyZWVuXHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gICAgICA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGUubGVmdCAgICAgICAgICA9ICctMTAwMDBweCc7XHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGUudG9wICAgICAgICAgICA9ICctMTAwMDBweCc7XHJcbiAgICAgICAgICAgIC8vIExhcmdlIGZvbnQgc2l6ZSBtYWtlcyBldmVuIHN1YnRsZSBjaGFuZ2VzIG9idmlvdXNcclxuICAgICAgICAgICAgbm9kZS5zdHlsZS5mb250U2l6ZSAgICAgID0gJzMwMHB4JztcclxuICAgICAgICAgICAgLy8gUmVzZXQgYW55IGZvbnQgcHJvcGVydGllc1xyXG4gICAgICAgICAgICBub2RlLnN0eWxlLmZvbnRGYW1pbHkgICAgPSAnc2Fucy1zZXJpZic7XHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuZm9udFZhcmlhbnQgICA9ICdub3JtYWwnO1xyXG4gICAgICAgICAgICBub2RlLnN0eWxlLmZvbnRTdHlsZSAgICAgPSAnbm9ybWFsJztcclxuICAgICAgICAgICAgbm9kZS5zdHlsZS5mb250V2VpZ2h0ICAgID0gJ25vcm1hbCc7XHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGUubGV0dGVyU3BhY2luZyA9ICcwJztcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub2RlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlbWVtYmVyIHdpZHRoIHdpdGggbm8gYXBwbGllZCB3ZWIgZm9udFxyXG4gICAgICAgICAgICB2YXIgd2lkdGggPSBub2RlLm9mZnNldFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgbm9kZS5zdHlsZS5mb250RmFtaWx5ID0gZm9udDtcclxuXHJcbiAgICAgICAgICAgIHZhciBpbnRlcnZhbDtcclxuICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tGb250KCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQ29tcGFyZSBjdXJyZW50IHdpZHRoIHdpdGggb3JpZ2luYWwgd2lkdGhcclxuICAgICAgICAgICAgICAgIGlmKG5vZGUgJiYgbm9kZS5vZmZzZXRXaWR0aCAhPSB3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICsrbG9hZGVkRm9udHM7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIGFsbCBmb250cyBoYXZlIGJlZW4gbG9hZGVkXHJcbiAgICAgICAgICAgICAgICBpZihsb2FkZWRGb250cyA+PSBmb250cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihpbnRlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobG9hZGVkRm9udHMgPT0gZm9udHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmKCFjaGVja0ZvbnQoKSkge1xyXG4gICAgICAgICAgICAgICAgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjaGVja0ZvbnQsIDUwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKGZvbnRzW2ldKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCB7d2FpdEZvcldlYmZvbnRzfTsiXSwic291cmNlUm9vdCI6IiJ9