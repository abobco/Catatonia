!function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=14)}([function(t,e,i){(function(e){t.exports=function t(e,i,r){function n(o,a){if(!i[o]){if(!e[o]){if(s)return s(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var l=i[o]={exports:{}};e[o][0].call(l.exports,(function(t){return n(e[o][1][t]||t)}),l,l.exports,t,e,i,r)}return i[o].exports}for(var s=!1,o=0;o<r.length;o++)n(r[o]);return n}({1:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),s=t("../geometry/Vector"),o=t("../core/Sleeping"),a=(t("../render/Render"),t("../core/Common")),h=t("../geometry/Bounds"),l=t("../geometry/Axes");!function(){r._inertiaScale=4,r._nextCollidingGroupId=1,r._nextNonCollidingGroupId=-1,r._nextCategory=1,r.create=function(e){var i={id:a.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:n.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0},lineWidth:0}},r=a.extend(i,e);return t(r,e),r},r.nextGroup=function(t){return t?r._nextNonCollidingGroupId--:r._nextCollidingGroupId++},r.nextCategory=function(){return r._nextCategory=r._nextCategory<<1,r._nextCategory};var t=function(t,e){e=e||{},r.set(t,{bounds:t.bounds||h.create(t.vertices),positionPrev:t.positionPrev||s.clone(t.position),anglePrev:t.anglePrev||t.angle,vertices:t.vertices,parts:t.parts||[t],isStatic:t.isStatic,isSleeping:t.isSleeping,parent:t.parent||t}),n.rotate(t.vertices,t.angle,t.position),l.rotate(t.axes,t.angle),h.update(t.bounds,t.vertices,t.velocity),r.set(t,{axes:e.axes||t.axes,area:e.area||t.area,mass:e.mass||t.mass,inertia:e.inertia||t.inertia});var i=t.isStatic?"#2e2b44":a.choose(["#006BA6","#0496FF","#FFBC42","#D81159","#8F2D56"]);t.render.fillStyle=t.render.fillStyle||i,t.render.strokeStyle=t.render.strokeStyle||"#000",t.render.sprite.xOffset+=-(t.bounds.min.x-t.position.x)/(t.bounds.max.x-t.bounds.min.x),t.render.sprite.yOffset+=-(t.bounds.min.y-t.position.y)/(t.bounds.max.y-t.bounds.min.y)};r.set=function(t,e,i){var n;for(n in"string"==typeof e&&(n=e,(e={})[n]=i),e)if(i=e[n],e.hasOwnProperty(n))switch(n){case"isStatic":r.setStatic(t,i);break;case"isSleeping":o.set(t,i);break;case"mass":r.setMass(t,i);break;case"density":r.setDensity(t,i);break;case"inertia":r.setInertia(t,i);break;case"vertices":r.setVertices(t,i);break;case"position":r.setPosition(t,i);break;case"angle":r.setAngle(t,i);break;case"velocity":r.setVelocity(t,i);break;case"angularVelocity":r.setAngularVelocity(t,i);break;case"parts":r.setParts(t,i);break;default:t[n]=i}},r.setStatic=function(t,e){for(var i=0;i<t.parts.length;i++){var r=t.parts[i];r.isStatic=e,e?(r._original={restitution:r.restitution,friction:r.friction,mass:r.mass,inertia:r.inertia,density:r.density,inverseMass:r.inverseMass,inverseInertia:r.inverseInertia},r.restitution=0,r.friction=1,r.mass=r.inertia=r.density=1/0,r.inverseMass=r.inverseInertia=0,r.positionPrev.x=r.position.x,r.positionPrev.y=r.position.y,r.anglePrev=r.angle,r.angularVelocity=0,r.speed=0,r.angularSpeed=0,r.motion=0):r._original&&(r.restitution=r._original.restitution,r.friction=r._original.friction,r.mass=r._original.mass,r.inertia=r._original.inertia,r.density=r._original.density,r.inverseMass=r._original.inverseMass,r.inverseInertia=r._original.inverseInertia,delete r._original)}},r.setMass=function(t,e){var i=t.inertia/(t.mass/6);t.inertia=i*(e/6),t.inverseInertia=1/t.inertia,t.mass=e,t.inverseMass=1/t.mass,t.density=t.mass/t.area},r.setDensity=function(t,e){r.setMass(t,e*t.area),t.density=e},r.setInertia=function(t,e){t.inertia=e,t.inverseInertia=1/t.inertia},r.setVertices=function(t,e){e[0].body===t?t.vertices=e:t.vertices=n.create(e,t),t.axes=l.fromVertices(t.vertices),t.area=n.area(t.vertices),r.setMass(t,t.density*t.area);var i=n.centre(t.vertices);n.translate(t.vertices,i,-1),r.setInertia(t,r._inertiaScale*n.inertia(t.vertices,t.mass)),n.translate(t.vertices,t.position),h.update(t.bounds,t.vertices,t.velocity)},r.setParts=function(t,e,i){var s;for(e=e.slice(0),t.parts.length=0,t.parts.push(t),t.parent=t,s=0;s<e.length;s++){var o=e[s];o!==t&&(o.parent=t,t.parts.push(o))}if(1!==t.parts.length){if(i=void 0===i||i){var a=[];for(s=0;s<e.length;s++)a=a.concat(e[s].vertices);n.clockwiseSort(a);var h=n.hull(a),l=n.centre(h);r.setVertices(t,h),n.translate(t.vertices,l)}var u=r._totalProperties(t);t.area=u.area,t.parent=t,t.position.x=u.centre.x,t.position.y=u.centre.y,t.positionPrev.x=u.centre.x,t.positionPrev.y=u.centre.y,r.setMass(t,u.mass),r.setInertia(t,u.inertia),r.setPosition(t,u.centre)}},r.setPosition=function(t,e){var i=s.sub(e,t.position);t.positionPrev.x+=i.x,t.positionPrev.y+=i.y;for(var r=0;r<t.parts.length;r++){var o=t.parts[r];o.position.x+=i.x,o.position.y+=i.y,n.translate(o.vertices,i),h.update(o.bounds,o.vertices,t.velocity)}},r.setAngle=function(t,e){var i=e-t.angle;t.anglePrev+=i;for(var r=0;r<t.parts.length;r++){var o=t.parts[r];o.angle+=i,n.rotate(o.vertices,i,t.position),l.rotate(o.axes,i),h.update(o.bounds,o.vertices,t.velocity),r>0&&s.rotateAbout(o.position,i,t.position,o.position)}},r.setVelocity=function(t,e){t.positionPrev.x=t.position.x-e.x,t.positionPrev.y=t.position.y-e.y,t.velocity.x=e.x,t.velocity.y=e.y,t.speed=s.magnitude(t.velocity)},r.setAngularVelocity=function(t,e){t.anglePrev=t.angle-e,t.angularVelocity=e,t.angularSpeed=Math.abs(t.angularVelocity)},r.translate=function(t,e){r.setPosition(t,s.add(t.position,e))},r.rotate=function(t,e,i){if(i){var n=Math.cos(e),s=Math.sin(e),o=t.position.x-i.x,a=t.position.y-i.y;r.setPosition(t,{x:i.x+(o*n-a*s),y:i.y+(o*s+a*n)}),r.setAngle(t,t.angle+e)}else r.setAngle(t,t.angle+e)},r.scale=function(t,e,i,s){var o=0,a=0;s=s||t.position;for(var u=0;u<t.parts.length;u++){var c=t.parts[u];n.scale(c.vertices,e,i,s),c.axes=l.fromVertices(c.vertices),c.area=n.area(c.vertices),r.setMass(c,t.density*c.area),n.translate(c.vertices,{x:-c.position.x,y:-c.position.y}),r.setInertia(c,r._inertiaScale*n.inertia(c.vertices,c.mass)),n.translate(c.vertices,{x:c.position.x,y:c.position.y}),u>0&&(o+=c.area,a+=c.inertia),c.position.x=s.x+(c.position.x-s.x)*e,c.position.y=s.y+(c.position.y-s.y)*i,h.update(c.bounds,c.vertices,t.velocity)}t.parts.length>1&&(t.area=o,t.isStatic||(r.setMass(t,t.density*o),r.setInertia(t,a))),t.circleRadius&&(e===i?t.circleRadius*=e:t.circleRadius=null)},r.update=function(t,e,i,r){var o=Math.pow(e*i*t.timeScale,2),a=1-t.frictionAir*i*t.timeScale,u=t.position.x-t.positionPrev.x,c=t.position.y-t.positionPrev.y;t.velocity.x=u*a*r+t.force.x/t.mass*o,t.velocity.y=c*a*r+t.force.y/t.mass*o,t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.position.x+=t.velocity.x,t.position.y+=t.velocity.y,t.angularVelocity=(t.angle-t.anglePrev)*a*r+t.torque/t.inertia*o,t.anglePrev=t.angle,t.angle+=t.angularVelocity,t.speed=s.magnitude(t.velocity),t.angularSpeed=Math.abs(t.angularVelocity);for(var d=0;d<t.parts.length;d++){var p=t.parts[d];n.translate(p.vertices,t.velocity),d>0&&(p.position.x+=t.velocity.x,p.position.y+=t.velocity.y),0!==t.angularVelocity&&(n.rotate(p.vertices,t.angularVelocity,t.position),l.rotate(p.axes,t.angularVelocity),d>0&&s.rotateAbout(p.position,t.angularVelocity,t.position,p.position)),h.update(p.bounds,p.vertices,t.velocity)}},r.applyForce=function(t,e,i){t.force.x+=i.x,t.force.y+=i.y;var r=e.x-t.position.x,n=e.y-t.position.y;t.torque+=r*i.y-n*i.x},r._totalProperties=function(t){for(var e={mass:0,area:0,inertia:0,centre:{x:0,y:0}},i=1===t.parts.length?0:1;i<t.parts.length;i++){var r=t.parts[i],n=r.mass!==1/0?r.mass:1;e.mass+=n,e.area+=r.area,e.inertia+=r.inertia,e.centre=s.add(e.centre,s.mult(r.position,n))}return e.centre=s.div(e.centre,e.mass),e}}()},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31}],2:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Events"),s=t("../core/Common"),o=t("../geometry/Bounds"),a=t("./Body");r.create=function(t){return s.extend({id:s.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{}},t)},r.setModified=function(t,e,i,n){if(t.isModified=e,i&&t.parent&&r.setModified(t.parent,e,i,n),n)for(var s=0;s<t.composites.length;s++){var o=t.composites[s];r.setModified(o,e,i,n)}},r.add=function(t,e){var i=[].concat(e);n.trigger(t,"beforeAdd",{object:e});for(var o=0;o<i.length;o++){var a=i[o];switch(a.type){case"body":if(a.parent!==a){s.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}r.addBody(t,a);break;case"constraint":r.addConstraint(t,a);break;case"composite":r.addComposite(t,a);break;case"mouseConstraint":r.addConstraint(t,a.constraint)}}return n.trigger(t,"afterAdd",{object:e}),t},r.remove=function(t,e,i){var s=[].concat(e);n.trigger(t,"beforeRemove",{object:e});for(var o=0;o<s.length;o++){var a=s[o];switch(a.type){case"body":r.removeBody(t,a,i);break;case"constraint":r.removeConstraint(t,a,i);break;case"composite":r.removeComposite(t,a,i);break;case"mouseConstraint":r.removeConstraint(t,a.constraint)}}return n.trigger(t,"afterRemove",{object:e}),t},r.addComposite=function(t,e){return t.composites.push(e),e.parent=t,r.setModified(t,!0,!0,!1),t},r.removeComposite=function(t,e,i){var n=s.indexOf(t.composites,e);if(-1!==n&&(r.removeCompositeAt(t,n),r.setModified(t,!0,!0,!1)),i)for(var o=0;o<t.composites.length;o++)r.removeComposite(t.composites[o],e,!0);return t},r.removeCompositeAt=function(t,e){return t.composites.splice(e,1),r.setModified(t,!0,!0,!1),t},r.addBody=function(t,e){return t.bodies.push(e),r.setModified(t,!0,!0,!1),t},r.removeBody=function(t,e,i){var n=s.indexOf(t.bodies,e);if(-1!==n&&(r.removeBodyAt(t,n),r.setModified(t,!0,!0,!1)),i)for(var o=0;o<t.composites.length;o++)r.removeBody(t.composites[o],e,!0);return t},r.removeBodyAt=function(t,e){return t.bodies.splice(e,1),r.setModified(t,!0,!0,!1),t},r.addConstraint=function(t,e){return t.constraints.push(e),r.setModified(t,!0,!0,!1),t},r.removeConstraint=function(t,e,i){var n=s.indexOf(t.constraints,e);if(-1!==n&&r.removeConstraintAt(t,n),i)for(var o=0;o<t.composites.length;o++)r.removeConstraint(t.composites[o],e,!0);return t},r.removeConstraintAt=function(t,e){return t.constraints.splice(e,1),r.setModified(t,!0,!0,!1),t},r.clear=function(t,e,i){if(i)for(var n=0;n<t.composites.length;n++)r.clear(t.composites[n],e,!0);return e?t.bodies=t.bodies.filter((function(t){return t.isStatic})):t.bodies.length=0,t.constraints.length=0,t.composites.length=0,r.setModified(t,!0,!0,!1),t},r.allBodies=function(t){for(var e=[].concat(t.bodies),i=0;i<t.composites.length;i++)e=e.concat(r.allBodies(t.composites[i]));return e},r.allConstraints=function(t){for(var e=[].concat(t.constraints),i=0;i<t.composites.length;i++)e=e.concat(r.allConstraints(t.composites[i]));return e},r.allComposites=function(t){for(var e=[].concat(t.composites),i=0;i<t.composites.length;i++)e=e.concat(r.allComposites(t.composites[i]));return e},r.get=function(t,e,i){var n,s;switch(i){case"body":n=r.allBodies(t);break;case"constraint":n=r.allConstraints(t);break;case"composite":n=r.allComposites(t).concat(t)}return n?0===(s=n.filter((function(t){return t.id.toString()===e.toString()}))).length?null:s[0]:null},r.move=function(t,e,i){return r.remove(t,e),r.add(i,e),t},r.rebase=function(t){for(var e=r.allBodies(t).concat(r.allConstraints(t)).concat(r.allComposites(t)),i=0;i<e.length;i++)e[i].id=s.nextId();return r.setModified(t,!0,!0,!1),t},r.translate=function(t,e,i){for(var n=i?r.allBodies(t):t.bodies,s=0;s<n.length;s++)a.translate(n[s],e);return r.setModified(t,!0,!0,!1),t},r.rotate=function(t,e,i,n){for(var s=Math.cos(e),o=Math.sin(e),h=n?r.allBodies(t):t.bodies,l=0;l<h.length;l++){var u=h[l],c=u.position.x-i.x,d=u.position.y-i.y;a.setPosition(u,{x:i.x+(c*s-d*o),y:i.y+(c*o+d*s)}),a.rotate(u,e)}return r.setModified(t,!0,!0,!1),t},r.scale=function(t,e,i,n,s){for(var o=s?r.allBodies(t):t.bodies,h=0;h<o.length;h++){var l=o[h],u=l.position.x-n.x,c=l.position.y-n.y;a.setPosition(l,{x:n.x+u*e,y:n.y+c*i}),a.scale(l,e,i)}return r.setModified(t,!0,!0,!1),t},r.bounds=function(t){for(var e=r.allBodies(t),i=[],n=0;n<e.length;n+=1){var s=e[n];i.push(s.bounds.min,s.bounds.max)}return o.create(i)}},{"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"./Body":1}],3:[function(t,e,i){var r={};e.exports=r;var n=t("./Composite"),s=(t("../constraint/Constraint"),t("../core/Common"));r.create=function(t){var e=n.create();return s.extend(e,{label:"World",gravity:{x:0,y:1,scale:.001},bounds:{min:{x:-1/0,y:-1/0},max:{x:1/0,y:1/0}}},t)}},{"../constraint/Constraint":12,"../core/Common":14,"./Composite":2}],4:[function(t,e,i){var r={};e.exports=r,r.create=function(t){return{id:r.id(t),vertex:t,normalImpulse:0,tangentImpulse:0}},r.id=function(t){return t.body.id+"_"+t.index}},{}],5:[function(t,e,i){var r={};e.exports=r;var n=t("./SAT"),s=t("./Pair"),o=t("../geometry/Bounds");r.collisions=function(t,e){for(var i=[],a=e.pairs.table,h=0;h<t.length;h++){var l=t[h][0],u=t[h][1];if((!l.isStatic&&!l.isSleeping||!u.isStatic&&!u.isSleeping)&&r.canCollide(l.collisionFilter,u.collisionFilter)&&o.overlaps(l.bounds,u.bounds))for(var c=l.parts.length>1?1:0;c<l.parts.length;c++)for(var d=l.parts[c],p=u.parts.length>1?1:0;p<u.parts.length;p++){var f=u.parts[p];if(d===l&&f===u||o.overlaps(d.bounds,f.bounds)){var m,y=a[s.id(d,f)];m=y&&y.isActive?y.collision:null;var v=n.collides(d,f,m);v.collided&&i.push(v)}}}return i},r.canCollide=function(t,e){return t.group===e.group&&0!==t.group?t.group>0:0!=(t.mask&e.category)&&0!=(e.mask&t.category)}},{"../geometry/Bounds":26,"./Pair":7,"./SAT":11}],6:[function(t,e,i){var r={};e.exports=r;var n=t("./Pair"),s=t("./Detector"),o=t("../core/Common");r.create=function(t){var e={controller:r,detector:s.collisions,buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48};return o.extend(e,t)},r.update=function(t,e,i,n){var s,o,a,h,l,u=i.world,c=t.buckets,d=!1;for(s=0;s<e.length;s++){var p=e[s];if((!p.isSleeping||n)&&!(p.bounds.max.x<u.bounds.min.x||p.bounds.min.x>u.bounds.max.x||p.bounds.max.y<u.bounds.min.y||p.bounds.min.y>u.bounds.max.y)){var f=r._getRegion(t,p);if(!p.region||f.id!==p.region.id||n){p.region&&!n||(p.region=f);var m=r._regionUnion(f,p.region);for(o=m.startCol;o<=m.endCol;o++)for(a=m.startRow;a<=m.endRow;a++){h=c[l=r._getBucketId(o,a)];var y=o>=f.startCol&&o<=f.endCol&&a>=f.startRow&&a<=f.endRow,v=o>=p.region.startCol&&o<=p.region.endCol&&a>=p.region.startRow&&a<=p.region.endRow;!y&&v&&v&&h&&r._bucketRemoveBody(t,h,p),(p.region===f||y&&!v||n)&&(h||(h=r._createBucket(c,l)),r._bucketAddBody(t,h,p))}p.region=f,d=!0}}}d&&(t.pairsList=r._createActivePairsList(t))},r.clear=function(t){t.buckets={},t.pairs={},t.pairsList=[]},r._regionUnion=function(t,e){var i=Math.min(t.startCol,e.startCol),n=Math.max(t.endCol,e.endCol),s=Math.min(t.startRow,e.startRow),o=Math.max(t.endRow,e.endRow);return r._createRegion(i,n,s,o)},r._getRegion=function(t,e){var i=e.bounds,n=Math.floor(i.min.x/t.bucketWidth),s=Math.floor(i.max.x/t.bucketWidth),o=Math.floor(i.min.y/t.bucketHeight),a=Math.floor(i.max.y/t.bucketHeight);return r._createRegion(n,s,o,a)},r._createRegion=function(t,e,i,r){return{id:t+","+e+","+i+","+r,startCol:t,endCol:e,startRow:i,endRow:r}},r._getBucketId=function(t,e){return"C"+t+"R"+e},r._createBucket=function(t,e){return t[e]=[]},r._bucketAddBody=function(t,e,i){for(var r=0;r<e.length;r++){var s=e[r];if(!(i.id===s.id||i.isStatic&&s.isStatic)){var o=n.id(i,s),a=t.pairs[o];a?a[2]+=1:t.pairs[o]=[i,s,1]}}e.push(i)},r._bucketRemoveBody=function(t,e,i){e.splice(o.indexOf(e,i),1);for(var r=0;r<e.length;r++){var s=e[r],a=n.id(i,s),h=t.pairs[a];h&&(h[2]-=1)}},r._createActivePairsList=function(t){var e,i,r=[];e=o.keys(t.pairs);for(var n=0;n<e.length;n++)(i=t.pairs[e[n]])[2]>0?r.push(i):delete t.pairs[e[n]];return r}},{"../core/Common":14,"./Detector":5,"./Pair":7}],7:[function(t,e,i){var r={};e.exports=r;var n=t("./Contact");r.create=function(t,e){var i=t.bodyA,n=t.bodyB,s=t.parentA,o=t.parentB,a={id:r.id(i,n),bodyA:i,bodyB:n,contacts:{},activeContacts:[],separation:0,isActive:!0,isSensor:i.isSensor||n.isSensor,timeCreated:e,timeUpdated:e,inverseMass:s.inverseMass+o.inverseMass,friction:Math.min(s.friction,o.friction),frictionStatic:Math.max(s.frictionStatic,o.frictionStatic),restitution:Math.max(s.restitution,o.restitution),slop:Math.max(s.slop,o.slop)};return r.update(a,t,e),a},r.update=function(t,e,i){var s=t.contacts,o=e.supports,a=t.activeContacts,h=e.parentA,l=e.parentB;if(t.collision=e,t.inverseMass=h.inverseMass+l.inverseMass,t.friction=Math.min(h.friction,l.friction),t.frictionStatic=Math.max(h.frictionStatic,l.frictionStatic),t.restitution=Math.max(h.restitution,l.restitution),t.slop=Math.max(h.slop,l.slop),a.length=0,e.collided){for(var u=0;u<o.length;u++){var c=o[u],d=n.id(c),p=s[d];p?a.push(p):a.push(s[d]=n.create(c))}t.separation=e.depth,r.setActive(t,!0,i)}else!0===t.isActive&&r.setActive(t,!1,i)},r.setActive=function(t,e,i){e?(t.isActive=!0,t.timeUpdated=i):(t.isActive=!1,t.activeContacts.length=0)},r.id=function(t,e){return t.id<e.id?"A"+t.id+"B"+e.id:"A"+e.id+"B"+t.id}},{"./Contact":4}],8:[function(t,e,i){var r={};e.exports=r;var n=t("./Pair"),s=t("../core/Common");r._pairMaxIdleLife=1e3,r.create=function(t){return s.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},t)},r.update=function(t,e,i){var r,o,a,h,l=t.list,u=t.table,c=t.collisionStart,d=t.collisionEnd,p=t.collisionActive,f=[];for(c.length=0,d.length=0,p.length=0,h=0;h<e.length;h++)(r=e[h]).collided&&(o=n.id(r.bodyA,r.bodyB),f.push(o),(a=u[o])?(a.isActive?p.push(a):c.push(a),n.update(a,r,i)):(a=n.create(r,i),u[o]=a,c.push(a),l.push(a)));for(h=0;h<l.length;h++)(a=l[h]).isActive&&-1===s.indexOf(f,a.id)&&(n.setActive(a,!1,i),d.push(a))},r.removeOld=function(t,e){var i,n,s,o,a=t.list,h=t.table,l=[];for(o=0;o<a.length;o++)(n=(i=a[o]).collision).bodyA.isSleeping||n.bodyB.isSleeping?i.timeUpdated=e:e-i.timeUpdated>r._pairMaxIdleLife&&l.push(o);for(o=0;o<l.length;o++)delete h[(i=a[s=l[o]-o]).id],a.splice(s,1)},r.clear=function(t){return t.table={},t.list.length=0,t.collisionStart.length=0,t.collisionActive.length=0,t.collisionEnd.length=0,t}},{"../core/Common":14,"./Pair":7}],9:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),s=t("./SAT"),o=t("../geometry/Bounds"),a=t("../factory/Bodies"),h=t("../geometry/Vertices");r.collides=function(t,e){for(var i=[],r=0;r<e.length;r++){var n=e[r];if(o.overlaps(n.bounds,t.bounds))for(var a=1===n.parts.length?0:1;a<n.parts.length;a++){var h=n.parts[a];if(o.overlaps(h.bounds,t.bounds)){var l=s.collides(h,t);if(l.collided){i.push(l);break}}}}return i},r.ray=function(t,e,i,s){s=s||1e-100;for(var o=n.angle(e,i),h=n.magnitude(n.sub(e,i)),l=.5*(i.x+e.x),u=.5*(i.y+e.y),c=a.rectangle(l,u,h,s,{angle:o}),d=r.collides(c,t),p=0;p<d.length;p+=1){var f=d[p];f.body=f.bodyB=f.bodyA}return d},r.region=function(t,e,i){for(var r=[],n=0;n<t.length;n++){var s=t[n],a=o.overlaps(s.bounds,e);(a&&!i||!a&&i)&&r.push(s)}return r},r.point=function(t,e){for(var i=[],r=0;r<t.length;r++){var n=t[r];if(o.contains(n.bounds,e))for(var s=1===n.parts.length?0:1;s<n.parts.length;s++){var a=n.parts[s];if(o.contains(a.bounds,e)&&h.contains(a.vertices,e)){i.push(n);break}}}return i}},{"../factory/Bodies":23,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"./SAT":11}],10:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),s=t("../geometry/Vector"),o=t("../core/Common"),a=t("../geometry/Bounds");r._restingThresh=4,r._restingThreshTangent=6,r._positionDampen=.9,r._positionWarming=.8,r._frictionNormalMultiplier=5,r.preSolvePosition=function(t){var e,i,r;for(e=0;e<t.length;e++)(i=t[e]).isActive&&(r=i.activeContacts.length,i.collision.parentA.totalContacts+=r,i.collision.parentB.totalContacts+=r)},r.solvePosition=function(t,e){var i,n,o,a,h,l,u,c,d,p=s._temp[0],f=s._temp[1],m=s._temp[2],y=s._temp[3];for(i=0;i<t.length;i++)(n=t[i]).isActive&&!n.isSensor&&(a=(o=n.collision).parentA,h=o.parentB,l=o.normal,u=s.sub(s.add(h.positionImpulse,h.position,p),s.add(a.positionImpulse,s.sub(h.position,o.penetration,f),m),y),n.separation=s.dot(l,u));for(i=0;i<t.length;i++)(n=t[i]).isActive&&!n.isSensor&&(a=(o=n.collision).parentA,h=o.parentB,l=o.normal,d=(n.separation-n.slop)*e,(a.isStatic||h.isStatic)&&(d*=2),a.isStatic||a.isSleeping||(c=r._positionDampen/a.totalContacts,a.positionImpulse.x+=l.x*d*c,a.positionImpulse.y+=l.y*d*c),h.isStatic||h.isSleeping||(c=r._positionDampen/h.totalContacts,h.positionImpulse.x-=l.x*d*c,h.positionImpulse.y-=l.y*d*c))},r.postSolvePosition=function(t){for(var e=0;e<t.length;e++){var i=t[e];if(i.totalContacts=0,0!==i.positionImpulse.x||0!==i.positionImpulse.y){for(var o=0;o<i.parts.length;o++){var h=i.parts[o];n.translate(h.vertices,i.positionImpulse),a.update(h.bounds,h.vertices,i.velocity),h.position.x+=i.positionImpulse.x,h.position.y+=i.positionImpulse.y}i.positionPrev.x+=i.positionImpulse.x,i.positionPrev.y+=i.positionImpulse.y,s.dot(i.positionImpulse,i.velocity)<0?(i.positionImpulse.x=0,i.positionImpulse.y=0):(i.positionImpulse.x*=r._positionWarming,i.positionImpulse.y*=r._positionWarming)}}},r.preSolveVelocity=function(t){var e,i,r,n,o,a,h,l,u,c,d,p,f,m,y=s._temp[0],v=s._temp[1];for(e=0;e<t.length;e++)if((r=t[e]).isActive&&!r.isSensor)for(n=r.activeContacts,a=(o=r.collision).parentA,h=o.parentB,l=o.normal,u=o.tangent,i=0;i<n.length;i++)d=(c=n[i]).vertex,p=c.normalImpulse,f=c.tangentImpulse,0===p&&0===f||(y.x=l.x*p+u.x*f,y.y=l.y*p+u.y*f,a.isStatic||a.isSleeping||(m=s.sub(d,a.position,v),a.positionPrev.x+=y.x*a.inverseMass,a.positionPrev.y+=y.y*a.inverseMass,a.anglePrev+=s.cross(m,y)*a.inverseInertia),h.isStatic||h.isSleeping||(m=s.sub(d,h.position,v),h.positionPrev.x-=y.x*h.inverseMass,h.positionPrev.y-=y.y*h.inverseMass,h.anglePrev-=s.cross(m,y)*h.inverseInertia))},r.solveVelocity=function(t,e){for(var i=e*e,n=s._temp[0],a=s._temp[1],h=s._temp[2],l=s._temp[3],u=s._temp[4],c=s._temp[5],d=0;d<t.length;d++){var p=t[d];if(p.isActive&&!p.isSensor){var f=p.collision,m=f.parentA,y=f.parentB,v=f.normal,g=f.tangent,x=p.activeContacts,b=1/x.length;m.velocity.x=m.position.x-m.positionPrev.x,m.velocity.y=m.position.y-m.positionPrev.y,y.velocity.x=y.position.x-y.positionPrev.x,y.velocity.y=y.position.y-y.positionPrev.y,m.angularVelocity=m.angle-m.anglePrev,y.angularVelocity=y.angle-y.anglePrev;for(var w=0;w<x.length;w++){var _=x[w],S=_.vertex,C=s.sub(S,m.position,a),T=s.sub(S,y.position,h),I=s.add(m.velocity,s.mult(s.perp(C),m.angularVelocity),l),E=s.add(y.velocity,s.mult(s.perp(T),y.angularVelocity),u),A=s.sub(I,E,c),M=s.dot(v,A),P=s.dot(g,A),k=Math.abs(P),B=o.sign(P),O=(1+p.restitution)*M,R=o.clamp(p.separation+M,0,1)*r._frictionNormalMultiplier,F=P,D=1/0;k>p.friction*p.frictionStatic*R*i&&(D=k,F=o.clamp(p.friction*B*i,-D,D));var L=s.cross(C,v),U=s.cross(T,v),N=b/(m.inverseMass+y.inverseMass+m.inverseInertia*L*L+y.inverseInertia*U*U);if(O*=N,F*=N,M<0&&M*M>r._restingThresh*i)_.normalImpulse=0;else{var V=_.normalImpulse;_.normalImpulse=Math.min(_.normalImpulse+O,0),O=_.normalImpulse-V}if(P*P>r._restingThreshTangent*i)_.tangentImpulse=0;else{var X=_.tangentImpulse;_.tangentImpulse=o.clamp(_.tangentImpulse+F,-D,D),F=_.tangentImpulse-X}n.x=v.x*O+g.x*F,n.y=v.y*O+g.y*F,m.isStatic||m.isSleeping||(m.positionPrev.x+=n.x*m.inverseMass,m.positionPrev.y+=n.y*m.inverseMass,m.anglePrev+=s.cross(C,n)*m.inverseInertia),y.isStatic||y.isSleeping||(y.positionPrev.x-=n.x*y.inverseMass,y.positionPrev.y-=n.y*y.inverseMass,y.anglePrev-=s.cross(T,n)*y.inverseInertia)}}}}},{"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],11:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),s=t("../geometry/Vector");r.collides=function(t,e,i){var o,a,h,l,u=!1;if(i){var c=t.parent,d=e.parent,p=c.speed*c.speed+c.angularSpeed*c.angularSpeed+d.speed*d.speed+d.angularSpeed*d.angularSpeed;u=i&&i.collided&&p<.2,l=i}else l={collided:!1,bodyA:t,bodyB:e};if(i&&u){var f=l.axisBody,m=f===t?e:t,y=[f.axes[i.axisNumber]];if(h=r._overlapAxes(f.vertices,m.vertices,y),l.reused=!0,h.overlap<=0)return l.collided=!1,l}else{if((o=r._overlapAxes(t.vertices,e.vertices,t.axes)).overlap<=0)return l.collided=!1,l;if((a=r._overlapAxes(e.vertices,t.vertices,e.axes)).overlap<=0)return l.collided=!1,l;o.overlap<a.overlap?(h=o,l.axisBody=t):(h=a,l.axisBody=e),l.axisNumber=h.axisNumber}l.bodyA=t.id<e.id?t:e,l.bodyB=t.id<e.id?e:t,l.collided=!0,l.depth=h.overlap,l.parentA=l.bodyA.parent,l.parentB=l.bodyB.parent,t=l.bodyA,e=l.bodyB,s.dot(h.axis,s.sub(e.position,t.position))<0?l.normal={x:h.axis.x,y:h.axis.y}:l.normal={x:-h.axis.x,y:-h.axis.y},l.tangent=s.perp(l.normal),l.penetration=l.penetration||{},l.penetration.x=l.normal.x*l.depth,l.penetration.y=l.normal.y*l.depth;var v=r._findSupports(t,e,l.normal),g=[];if(n.contains(t.vertices,v[0])&&g.push(v[0]),n.contains(t.vertices,v[1])&&g.push(v[1]),g.length<2){var x=r._findSupports(e,t,s.neg(l.normal));n.contains(e.vertices,x[0])&&g.push(x[0]),g.length<2&&n.contains(e.vertices,x[1])&&g.push(x[1])}return g.length<1&&(g=[v[0]]),l.supports=g,l},r._overlapAxes=function(t,e,i){for(var n,o,a=s._temp[0],h=s._temp[1],l={overlap:Number.MAX_VALUE},u=0;u<i.length;u++){if(o=i[u],r._projectToAxis(a,t,o),r._projectToAxis(h,e,o),(n=Math.min(a.max-h.min,h.max-a.min))<=0)return l.overlap=n,l;n<l.overlap&&(l.overlap=n,l.axis=o,l.axisNumber=u)}return l},r._projectToAxis=function(t,e,i){for(var r=s.dot(e[0],i),n=r,o=1;o<e.length;o+=1){var a=s.dot(e[o],i);a>n?n=a:a<r&&(r=a)}t.min=r,t.max=n},r._findSupports=function(t,e,i){for(var r,n,o,a,h=Number.MAX_VALUE,l=s._temp[0],u=e.vertices,c=t.position,d=0;d<u.length;d++)n=u[d],l.x=n.x-c.x,l.y=n.y-c.y,(r=-s.dot(i,l))<h&&(h=r,o=n);return n=u[o.index-1>=0?o.index-1:u.length-1],l.x=n.x-c.x,l.y=n.y-c.y,h=-s.dot(i,l),a=n,n=u[(o.index+1)%u.length],l.x=n.x-c.x,l.y=n.y-c.y,(r=-s.dot(i,l))<h&&(a=n),[o,a]}},{"../geometry/Vector":28,"../geometry/Vertices":29}],12:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),s=t("../geometry/Vector"),o=t("../core/Sleeping"),a=t("../geometry/Bounds"),h=t("../geometry/Axes"),l=t("../core/Common");r._warming=.4,r._torqueDampen=1,r._minLength=1e-6,r.create=function(t){var e=t;e.bodyA&&!e.pointA&&(e.pointA={x:0,y:0}),e.bodyB&&!e.pointB&&(e.pointB={x:0,y:0});var i=e.bodyA?s.add(e.bodyA.position,e.pointA):e.pointA,r=e.bodyB?s.add(e.bodyB.position,e.pointB):e.pointB,n=s.magnitude(s.sub(i,r));e.length=void 0!==e.length?e.length:n,e.id=e.id||l.nextId(),e.label=e.label||"Constraint",e.type="constraint",e.stiffness=e.stiffness||(e.length>0?1:.7),e.damping=e.damping||0,e.angularStiffness=e.angularStiffness||0,e.angleA=e.bodyA?e.bodyA.angle:e.angleA,e.angleB=e.bodyB?e.bodyB.angle:e.angleB,e.plugin={};var o={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===e.length&&e.stiffness>.1?(o.type="pin",o.anchors=!1):e.stiffness<.9&&(o.type="spring"),e.render=l.extend(o,e.render),e},r.preSolveAll=function(t){for(var e=0;e<t.length;e+=1){var i=t[e],r=i.constraintImpulse;i.isStatic||0===r.x&&0===r.y&&0===r.angle||(i.position.x+=r.x,i.position.y+=r.y,i.angle+=r.angle)}},r.solveAll=function(t,e){for(var i=0;i<t.length;i+=1){var n=t[i],s=!n.bodyA||n.bodyA&&n.bodyA.isStatic,o=!n.bodyB||n.bodyB&&n.bodyB.isStatic;(s||o)&&r.solve(t[i],e)}for(i=0;i<t.length;i+=1)s=!(n=t[i]).bodyA||n.bodyA&&n.bodyA.isStatic,o=!n.bodyB||n.bodyB&&n.bodyB.isStatic,s||o||r.solve(t[i],e)},r.solve=function(t,e){var i=t.bodyA,n=t.bodyB,o=t.pointA,a=t.pointB;if(i||n){i&&!i.isStatic&&(s.rotate(o,i.angle-t.angleA,o),t.angleA=i.angle),n&&!n.isStatic&&(s.rotate(a,n.angle-t.angleB,a),t.angleB=n.angle);var h=o,l=a;if(i&&(h=s.add(i.position,o)),n&&(l=s.add(n.position,a)),h&&l){var u=s.sub(h,l),c=s.magnitude(u);c<r._minLength&&(c=r._minLength);var d,p,f,m,y,v=(c-t.length)/c,g=t.stiffness<1?t.stiffness*e:t.stiffness,x=s.mult(u,v*g),b=(i?i.inverseMass:0)+(n?n.inverseMass:0),w=b+((i?i.inverseInertia:0)+(n?n.inverseInertia:0));if(t.damping){var _=s.create();f=s.div(u,c),y=s.sub(n&&s.sub(n.position,n.positionPrev)||_,i&&s.sub(i.position,i.positionPrev)||_),m=s.dot(f,y)}i&&!i.isStatic&&(p=i.inverseMass/b,i.constraintImpulse.x-=x.x*p,i.constraintImpulse.y-=x.y*p,i.position.x-=x.x*p,i.position.y-=x.y*p,t.damping&&(i.positionPrev.x-=t.damping*f.x*m*p,i.positionPrev.y-=t.damping*f.y*m*p),d=s.cross(o,x)/w*r._torqueDampen*i.inverseInertia*(1-t.angularStiffness),i.constraintImpulse.angle-=d,i.angle-=d),n&&!n.isStatic&&(p=n.inverseMass/b,n.constraintImpulse.x+=x.x*p,n.constraintImpulse.y+=x.y*p,n.position.x+=x.x*p,n.position.y+=x.y*p,t.damping&&(n.positionPrev.x+=t.damping*f.x*m*p,n.positionPrev.y+=t.damping*f.y*m*p),d=s.cross(a,x)/w*r._torqueDampen*n.inverseInertia*(1-t.angularStiffness),n.constraintImpulse.angle+=d,n.angle+=d)}}},r.postSolveAll=function(t){for(var e=0;e<t.length;e++){var i=t[e],l=i.constraintImpulse;if(!(i.isStatic||0===l.x&&0===l.y&&0===l.angle)){o.set(i,!1);for(var u=0;u<i.parts.length;u++){var c=i.parts[u];n.translate(c.vertices,l),u>0&&(c.position.x+=l.x,c.position.y+=l.y),0!==l.angle&&(n.rotate(c.vertices,l.angle,i.position),h.rotate(c.axes,l.angle),u>0&&s.rotateAbout(c.position,l.angle,i.position,c.position)),a.update(c.bounds,c.vertices,i.velocity)}l.angle*=r._warming,l.x*=r._warming,l.y*=r._warming}}}},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],13:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),s=t("../core/Sleeping"),o=t("../core/Mouse"),a=t("../core/Events"),h=t("../collision/Detector"),l=t("./Constraint"),u=t("../body/Composite"),c=t("../core/Common"),d=t("../geometry/Bounds");r.create=function(t,e){var i=(t?t.mouse:null)||(e?e.mouse:null);i||(t&&t.render&&t.render.canvas?i=o.create(t.render.canvas):e&&e.element?i=o.create(e.element):(i=o.create(),c.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var n={type:"mouseConstraint",mouse:i,element:null,body:null,constraint:l.create({label:"Mouse Constraint",pointA:i.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},s=c.extend(n,e);return a.on(t,"beforeUpdate",(function(){var e=u.allBodies(t.world);r.update(s,e),r._triggerEvents(s)})),s},r.update=function(t,e){var i=t.mouse,r=t.constraint,o=t.body;if(0===i.button){if(r.bodyB)s.set(r.bodyB,!1),r.pointA=i.position;else for(var l=0;l<e.length;l++)if(o=e[l],d.contains(o.bounds,i.position)&&h.canCollide(o.collisionFilter,t.collisionFilter))for(var u=o.parts.length>1?1:0;u<o.parts.length;u++){var c=o.parts[u];if(n.contains(c.vertices,i.position)){r.pointA=i.position,r.bodyB=t.body=o,r.pointB={x:i.position.x-o.position.x,y:i.position.y-o.position.y},r.angleB=o.angle,s.set(o,!1),a.trigger(t,"startdrag",{mouse:i,body:o});break}}}else r.bodyB=t.body=null,r.pointB=null,o&&a.trigger(t,"enddrag",{mouse:i,body:o})},r._triggerEvents=function(t){var e=t.mouse,i=e.sourceEvents;i.mousemove&&a.trigger(t,"mousemove",{mouse:e}),i.mousedown&&a.trigger(t,"mousedown",{mouse:e}),i.mouseup&&a.trigger(t,"mouseup",{mouse:e}),o.clearSourceEvents(e)}},{"../body/Composite":2,"../collision/Detector":5,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../core/Sleeping":22,"../geometry/Bounds":26,"../geometry/Vertices":29,"./Constraint":12}],14:[function(t,i,r){(function(e){var r={};i.exports=r,function(){r._nextId=0,r._seed=0,r._nowStartTime=+new Date,r.extend=function(t,e){var i,n;"boolean"==typeof e?(i=2,n=e):(i=1,n=!0);for(var s=i;s<arguments.length;s++){var o=arguments[s];if(o)for(var a in o)n&&o[a]&&o[a].constructor===Object?t[a]&&t[a].constructor!==Object?t[a]=o[a]:(t[a]=t[a]||{},r.extend(t[a],n,o[a])):t[a]=o[a]}return t},r.clone=function(t,e){return r.extend({},e,t)},r.keys=function(t){if(Object.keys)return Object.keys(t);var e=[];for(var i in t)e.push(i);return e},r.values=function(t){var e=[];if(Object.keys){for(var i=Object.keys(t),r=0;r<i.length;r++)e.push(t[i[r]]);return e}for(var n in t)e.push(t[n]);return e},r.get=function(t,e,i,r){e=e.split(".").slice(i,r);for(var n=0;n<e.length;n+=1)t=t[e[n]];return t},r.set=function(t,e,i,n,s){var o=e.split(".").slice(n,s);return r.get(t,e,0,-1)[o[o.length-1]]=i,i},r.shuffle=function(t){for(var e=t.length-1;e>0;e--){var i=Math.floor(r.random()*(e+1)),n=t[e];t[e]=t[i],t[i]=n}return t},r.choose=function(t){return t[Math.floor(r.random()*t.length)]},r.isElement=function(t){return"undefined"!=typeof HTMLElement?t instanceof HTMLElement:!!(t&&t.nodeType&&t.nodeName)},r.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)},r.isFunction=function(t){return"function"==typeof t},r.isPlainObject=function(t){return"object"==typeof t&&t.constructor===Object},r.isString=function(t){return"[object String]"===toString.call(t)},r.clamp=function(t,e,i){return t<e?e:t>i?i:t},r.sign=function(t){return t<0?-1:1},r.now=function(){if(window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return new Date-r._nowStartTime},r.random=function(t,e){return e=void 0!==e?e:1,(t=void 0!==t?t:0)+i()*(e-t)};var i=function(){return r._seed=(9301*r._seed+49297)%233280,r._seed/233280};r.colorToNumber=function(t){return 3==(t=t.replace("#","")).length&&(t=t.charAt(0)+t.charAt(0)+t.charAt(1)+t.charAt(1)+t.charAt(2)+t.charAt(2)),parseInt(t,16)},r.logLevel=1,r.log=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.info=function(){console&&r.logLevel>0&&r.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.warn=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.nextId=function(){return r._nextId++},r.indexOf=function(t,e){if(t.indexOf)return t.indexOf(e);for(var i=0;i<t.length;i++)if(t[i]===e)return i;return-1},r.map=function(t,e){if(t.map)return t.map(e);for(var i=[],r=0;r<t.length;r+=1)i.push(e(t[r]));return i},r.topologicalSort=function(t){var e=[],i=[],n=[];for(var s in t)i[s]||n[s]||r._topologicalSort(s,i,n,t,e);return e},r._topologicalSort=function(t,e,i,n,s){var o=n[t]||[];i[t]=!0;for(var a=0;a<o.length;a+=1){var h=o[a];i[h]||e[h]||r._topologicalSort(h,e,i,n,s)}i[t]=!1,e[t]=!0,s.push(t)},r.chain=function(){for(var t=[],e=0;e<arguments.length;e+=1){var i=arguments[e];i._chained?t.push.apply(t,i._chained):t.push(i)}var r=function(){for(var e,i=new Array(arguments.length),r=0,n=arguments.length;r<n;r++)i[r]=arguments[r];for(r=0;r<t.length;r+=1){var s=t[r].apply(e,i);void 0!==s&&(e=s)}return e};return r._chained=t,r},r.chainPathBefore=function(t,e,i){return r.set(t,e,r.chain(i,r.get(t,e)))},r.chainPathAfter=function(t,e,i){return r.set(t,e,r.chain(r.get(t,e),i))},r._requireGlobal=function(i,r){return("undefined"!=typeof window?window[i]:void 0!==e?e[i]:null)||t(r)}}()}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],15:[function(t,e,i){var r={};e.exports=r;var n=t("../body/World"),s=t("./Sleeping"),o=t("../collision/Resolver"),a=t("../render/Render"),h=t("../collision/Pairs"),l=(t("./Metrics"),t("../collision/Grid")),u=t("./Events"),c=t("../body/Composite"),d=t("../constraint/Constraint"),p=t("./Common"),f=t("../body/Body");r.create=function(t,e){e=(e=p.isElement(t)?e:t)||{},((t=p.isElement(t)?t:null)||e.render)&&p.warn("Engine.create: engine.render is deprecated (see docs)");var i={positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},timing:{timestamp:0,timeScale:1},broadphase:{controller:l}},r=p.extend(i,e);if(t||r.render){var s={element:t,controller:a};r.render=p.extend(s,r.render)}return r.render&&r.render.controller&&(r.render=r.render.controller.create(r.render)),r.render&&(r.render.engine=r),r.world=e.world||n.create(r.world),r.pairs=h.create(),r.broadphase=r.broadphase.controller.create(r.broadphase),r.metrics=r.metrics||{extended:!1},r},r.update=function(t,e,i){e=e||1e3/60,i=i||1;var n,a=t.world,l=t.timing,p=t.broadphase,f=[];l.timestamp+=e*l.timeScale;var m={timestamp:l.timestamp};u.trigger(t,"beforeUpdate",m);var y=c.allBodies(a),v=c.allConstraints(a);for(t.enableSleeping&&s.update(y,l.timeScale),r._bodiesApplyGravity(y,a.gravity),r._bodiesUpdate(y,e,l.timeScale,i,a.bounds),d.preSolveAll(y),n=0;n<t.constraintIterations;n++)d.solveAll(v,l.timeScale);d.postSolveAll(y),p.controller?(a.isModified&&p.controller.clear(p),p.controller.update(p,y,t,a.isModified),f=p.pairsList):f=y,a.isModified&&c.setModified(a,!1,!1,!0);var g=p.detector(f,t),x=t.pairs,b=l.timestamp;for(h.update(x,g,b),h.removeOld(x,b),t.enableSleeping&&s.afterCollisions(x.list,l.timeScale),x.collisionStart.length>0&&u.trigger(t,"collisionStart",{pairs:x.collisionStart}),o.preSolvePosition(x.list),n=0;n<t.positionIterations;n++)o.solvePosition(x.list,l.timeScale);for(o.postSolvePosition(y),d.preSolveAll(y),n=0;n<t.constraintIterations;n++)d.solveAll(v,l.timeScale);for(d.postSolveAll(y),o.preSolveVelocity(x.list),n=0;n<t.velocityIterations;n++)o.solveVelocity(x.list,l.timeScale);return x.collisionActive.length>0&&u.trigger(t,"collisionActive",{pairs:x.collisionActive}),x.collisionEnd.length>0&&u.trigger(t,"collisionEnd",{pairs:x.collisionEnd}),r._bodiesClearForces(y),u.trigger(t,"afterUpdate",m),t},r.merge=function(t,e){if(p.extend(t,e),e.world){t.world=e.world,r.clear(t);for(var i=c.allBodies(t.world),n=0;n<i.length;n++){var o=i[n];s.set(o,!1),o.id=p.nextId()}}},r.clear=function(t){var e=t.world;h.clear(t.pairs);var i=t.broadphase;if(i.controller){var r=c.allBodies(e);i.controller.clear(i),i.controller.update(i,r,t,!0)}},r._bodiesClearForces=function(t){for(var e=0;e<t.length;e++){var i=t[e];i.force.x=0,i.force.y=0,i.torque=0}},r._bodiesApplyGravity=function(t,e){var i=void 0!==e.scale?e.scale:.001;if((0!==e.x||0!==e.y)&&0!==i)for(var r=0;r<t.length;r++){var n=t[r];n.isStatic||n.isSleeping||(n.force.y+=n.mass*e.y*i,n.force.x+=n.mass*e.x*i)}},r._bodiesUpdate=function(t,e,i,r,n){for(var s=0;s<t.length;s++){var o=t[s];o.isStatic||o.isSleeping||f.update(o,e,i,r)}}},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Grid":6,"../collision/Pairs":8,"../collision/Resolver":10,"../constraint/Constraint":12,"../render/Render":31,"./Common":14,"./Events":16,"./Metrics":18,"./Sleeping":22}],16:[function(t,e,i){var r={};e.exports=r;var n=t("./Common");r.on=function(t,e,i){for(var r,n=e.split(" "),s=0;s<n.length;s++)r=n[s],t.events=t.events||{},t.events[r]=t.events[r]||[],t.events[r].push(i);return i},r.off=function(t,e,i){if(e){"function"==typeof e&&(i=e,e=n.keys(t.events).join(" "));for(var r=e.split(" "),s=0;s<r.length;s++){var o=t.events[r[s]],a=[];if(i&&o)for(var h=0;h<o.length;h++)o[h]!==i&&a.push(o[h]);t.events[r[s]]=a}}else t.events={}},r.trigger=function(t,e,i){var r,s,o,a;if(t.events){i||(i={}),r=e.split(" ");for(var h=0;h<r.length;h++)if(s=r[h],o=t.events[s]){(a=n.clone(i,!1)).name=s,a.source=t;for(var l=0;l<o.length;l++)o[l].apply(t,[a])}}}},{"./Common":14}],17:[function(t,e,i){var r={};e.exports=r;var n=t("./Plugin"),s=t("./Common");r.name="matter-js",r.version="0.14.2",r.uses=[],r.used=[],r.use=function(){n.use(r,Array.prototype.slice.call(arguments))},r.before=function(t,e){return t=t.replace(/^Matter./,""),s.chainPathBefore(r,t,e)},r.after=function(t,e){return t=t.replace(/^Matter./,""),s.chainPathAfter(r,t,e)}},{"./Common":14,"./Plugin":20}],18:[function(t,e,i){},{"../body/Composite":2,"./Common":14}],19:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Common");r.create=function(t){var e={};return t||n.log("Mouse.create: element was undefined, defaulting to document.body","warn"),e.element=t||document.body,e.absolute={x:0,y:0},e.position={x:0,y:0},e.mousedownPosition={x:0,y:0},e.mouseupPosition={x:0,y:0},e.offset={x:0,y:0},e.scale={x:1,y:1},e.wheelDelta=0,e.button=-1,e.pixelRatio=e.element.getAttribute("data-pixel-ratio")||1,e.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},e.mousemove=function(t){var i=r._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches&&(e.button=0,t.preventDefault()),e.absolute.x=i.x,e.absolute.y=i.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.sourceEvents.mousemove=t},e.mousedown=function(t){var i=r._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches?(e.button=0,t.preventDefault()):e.button=t.button,e.absolute.x=i.x,e.absolute.y=i.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.mousedownPosition.x=e.position.x,e.mousedownPosition.y=e.position.y,e.sourceEvents.mousedown=t},e.mouseup=function(t){var i=r._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches&&t.preventDefault(),e.button=-1,e.absolute.x=i.x,e.absolute.y=i.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.mouseupPosition.x=e.position.x,e.mouseupPosition.y=e.position.y,e.sourceEvents.mouseup=t},e.mousewheel=function(t){e.wheelDelta=Math.max(-1,Math.min(1,t.wheelDelta||-t.detail)),t.preventDefault()},r.setElement(e,e.element),e},r.setElement=function(t,e){t.element=e,e.addEventListener("mousemove",t.mousemove),e.addEventListener("mousedown",t.mousedown),e.addEventListener("mouseup",t.mouseup),e.addEventListener("mousewheel",t.mousewheel),e.addEventListener("DOMMouseScroll",t.mousewheel),e.addEventListener("touchmove",t.mousemove),e.addEventListener("touchstart",t.mousedown),e.addEventListener("touchend",t.mouseup)},r.clearSourceEvents=function(t){t.sourceEvents.mousemove=null,t.sourceEvents.mousedown=null,t.sourceEvents.mouseup=null,t.sourceEvents.mousewheel=null,t.wheelDelta=0},r.setOffset=function(t,e){t.offset.x=e.x,t.offset.y=e.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y},r.setScale=function(t,e){t.scale.x=e.x,t.scale.y=e.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y},r._getRelativeMousePosition=function(t,e,i){var r,n,s=e.getBoundingClientRect(),o=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:o.scrollLeft,h=void 0!==window.pageYOffset?window.pageYOffset:o.scrollTop,l=t.changedTouches;return l?(r=l[0].pageX-s.left-a,n=l[0].pageY-s.top-h):(r=t.pageX-s.left-a,n=t.pageY-s.top-h),{x:r/(e.clientWidth/(e.width||e.clientWidth)*i),y:n/(e.clientHeight/(e.height||e.clientHeight)*i)}}},{"../core/Common":14}],20:[function(t,e,i){var r={};e.exports=r;var n=t("./Common");r._registry={},r.register=function(t){if(r.isPlugin(t)||n.warn("Plugin.register:",r.toString(t),"does not implement all required fields."),t.name in r._registry){var e=r._registry[t.name],i=r.versionParse(t.version).number,s=r.versionParse(e.version).number;i>s?(n.warn("Plugin.register:",r.toString(e),"was upgraded to",r.toString(t)),r._registry[t.name]=t):i<s?n.warn("Plugin.register:",r.toString(e),"can not be downgraded to",r.toString(t)):t!==e&&n.warn("Plugin.register:",r.toString(t),"is already registered to different plugin object")}else r._registry[t.name]=t;return t},r.resolve=function(t){return r._registry[r.dependencyParse(t).name]},r.toString=function(t){return"string"==typeof t?t:(t.name||"anonymous")+"@"+(t.version||t.range||"0.0.0")},r.isPlugin=function(t){return t&&t.name&&t.version&&t.install},r.isUsed=function(t,e){return t.used.indexOf(e)>-1},r.isFor=function(t,e){var i=t.for&&r.dependencyParse(t.for);return!t.for||e.name===i.name&&r.versionSatisfies(e.version,i.range)},r.use=function(t,e){if(t.uses=(t.uses||[]).concat(e||[]),0!==t.uses.length){for(var i=r.dependencies(t),s=n.topologicalSort(i),o=[],a=0;a<s.length;a+=1)if(s[a]!==t.name){var h=r.resolve(s[a]);h?r.isUsed(t,h.name)||(r.isFor(h,t)||(n.warn("Plugin.use:",r.toString(h),"is for",h.for,"but installed on",r.toString(t)+"."),h._warned=!0),h.install?h.install(t):(n.warn("Plugin.use:",r.toString(h),"does not specify an install function."),h._warned=!0),h._warned?(o.push("🔶 "+r.toString(h)),delete h._warned):o.push("✅ "+r.toString(h)),t.used.push(h.name)):o.push("❌ "+s[a])}o.length>0&&n.info(o.join("  "))}else n.warn("Plugin.use:",r.toString(t),"does not specify any dependencies to install.")},r.dependencies=function(t,e){var i=r.dependencyParse(t),s=i.name;if(!(s in(e=e||{}))){t=r.resolve(t)||t,e[s]=n.map(t.uses||[],(function(e){r.isPlugin(e)&&r.register(e);var s=r.dependencyParse(e),o=r.resolve(e);return o&&!r.versionSatisfies(o.version,s.range)?(n.warn("Plugin.dependencies:",r.toString(o),"does not satisfy",r.toString(s),"used by",r.toString(i)+"."),o._warned=!0,t._warned=!0):o||(n.warn("Plugin.dependencies:",r.toString(e),"used by",r.toString(i),"could not be resolved."),t._warned=!0),s.name}));for(var o=0;o<e[s].length;o+=1)r.dependencies(e[s][o],e);return e}},r.dependencyParse=function(t){return n.isString(t)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?))?$/.test(t)||n.warn("Plugin.dependencyParse:",t,"is not a valid dependency string."),{name:t.split("@")[0],range:t.split("@")[1]||"*"}):{name:t.name,range:t.range||t.version}},r.versionParse=function(t){/^\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?$/.test(t)||n.warn("Plugin.versionParse:",t,"is not a valid version or range.");var e=t.split("-");t=e[0];var i=isNaN(Number(t[0])),r=i?t.substr(1):t,s=n.map(r.split("."),(function(t){return Number(t)}));return{isRange:i,version:r,range:t,operator:i?t[0]:"",parts:s,prerelease:e[1],number:1e8*s[0]+1e4*s[1]+s[2]}},r.versionSatisfies=function(t,e){e=e||"*";var i=r.versionParse(e),n=i.parts,s=r.versionParse(t),o=s.parts;if(i.isRange){if("*"===i.operator||"*"===t)return!0;if("~"===i.operator)return o[0]===n[0]&&o[1]===n[1]&&o[2]>=n[2];if("^"===i.operator)return n[0]>0?o[0]===n[0]&&s.number>=i.number:n[1]>0?o[1]===n[1]&&o[2]>=n[2]:o[2]===n[2]}return t===e||"*"===t}},{"./Common":14}],21:[function(t,e,i){var r={};e.exports=r;var n=t("./Events"),s=t("./Engine"),o=t("./Common");!function(){var t,e,i;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),t||(t=function(t){i=setTimeout((function(){t(o.now())}),1e3/60)},e=function(){clearTimeout(i)}),r.create=function(t){var e=o.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},t);return e.delta=e.delta||1e3/e.fps,e.deltaMin=e.deltaMin||1e3/e.fps,e.deltaMax=e.deltaMax||1e3/(.5*e.fps),e.fps=1e3/e.delta,e},r.run=function(e,i){return void 0!==e.positionIterations&&(i=e,e=r.create()),function n(s){e.frameRequestId=t(n),s&&e.enabled&&r.tick(e,i,s)}(),e},r.tick=function(t,e,i){var r,o=e.timing,a=1,h={timestamp:o.timestamp};n.trigger(t,"beforeTick",h),n.trigger(e,"beforeTick",h),t.isFixed?r=t.delta:(r=i-t.timePrev||t.delta,t.timePrev=i,t.deltaHistory.push(r),t.deltaHistory=t.deltaHistory.slice(-t.deltaSampleSize),a=(r=(r=(r=Math.min.apply(null,t.deltaHistory))<t.deltaMin?t.deltaMin:r)>t.deltaMax?t.deltaMax:r)/t.delta,t.delta=r),0!==t.timeScalePrev&&(a*=o.timeScale/t.timeScalePrev),0===o.timeScale&&(a=0),t.timeScalePrev=o.timeScale,t.correction=a,t.frameCounter+=1,i-t.counterTimestamp>=1e3&&(t.fps=t.frameCounter*((i-t.counterTimestamp)/1e3),t.counterTimestamp=i,t.frameCounter=0),n.trigger(t,"tick",h),n.trigger(e,"tick",h),e.world.isModified&&e.render&&e.render.controller&&e.render.controller.clear&&e.render.controller.clear(e.render),n.trigger(t,"beforeUpdate",h),s.update(e,r,a),n.trigger(t,"afterUpdate",h),e.render&&e.render.controller&&(n.trigger(t,"beforeRender",h),n.trigger(e,"beforeRender",h),e.render.controller.world(e.render),n.trigger(t,"afterRender",h),n.trigger(e,"afterRender",h)),n.trigger(t,"afterTick",h),n.trigger(e,"afterTick",h)},r.stop=function(t){e(t.frameRequestId)},r.start=function(t,e){r.run(t,e)}}()},{"./Common":14,"./Engine":15,"./Events":16}],22:[function(t,e,i){var r={};e.exports=r;var n=t("./Events");r._motionWakeThreshold=.18,r._motionSleepThreshold=.08,r._minBias=.9,r.update=function(t,e){for(var i=e*e*e,n=0;n<t.length;n++){var s=t[n],o=s.speed*s.speed+s.angularSpeed*s.angularSpeed;if(0===s.force.x&&0===s.force.y){var a=Math.min(s.motion,o),h=Math.max(s.motion,o);s.motion=r._minBias*a+(1-r._minBias)*h,s.sleepThreshold>0&&s.motion<r._motionSleepThreshold*i?(s.sleepCounter+=1,s.sleepCounter>=s.sleepThreshold&&r.set(s,!0)):s.sleepCounter>0&&(s.sleepCounter-=1)}else r.set(s,!1)}},r.afterCollisions=function(t,e){for(var i=e*e*e,n=0;n<t.length;n++){var s=t[n];if(s.isActive){var o=s.collision,a=o.bodyA.parent,h=o.bodyB.parent;if(!(a.isSleeping&&h.isSleeping||a.isStatic||h.isStatic)&&(a.isSleeping||h.isSleeping)){var l=a.isSleeping&&!a.isStatic?a:h,u=l===a?h:a;!l.isStatic&&u.motion>r._motionWakeThreshold*i&&r.set(l,!1)}}}},r.set=function(t,e){var i=t.isSleeping;e?(t.isSleeping=!0,t.sleepCounter=t.sleepThreshold,t.positionImpulse.x=0,t.positionImpulse.y=0,t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.anglePrev=t.angle,t.speed=0,t.angularSpeed=0,t.motion=0,i||n.trigger(t,"sleepStart")):(t.isSleeping=!1,t.sleepCounter=0,i&&n.trigger(t,"sleepEnd"))}},{"./Events":16}],23:[function(t,e,i){var r={};e.exports=r;var n,s=t("../geometry/Vertices"),o=t("../core/Common"),a=t("../body/Body"),h=t("../geometry/Bounds"),l=t("../geometry/Vector");r.rectangle=function(t,e,i,r,n){n=n||{};var h={label:"Rectangle Body",position:{x:t,y:e},vertices:s.fromPath("L 0 0 L "+i+" 0 L "+i+" "+r+" L 0 "+r)};if(n.chamfer){var l=n.chamfer;h.vertices=s.chamfer(h.vertices,l.radius,l.quality,l.qualityMin,l.qualityMax),delete n.chamfer}return a.create(o.extend({},h,n))},r.trapezoid=function(t,e,i,r,n,h){h=h||{};var l,u=i*(n*=.5),c=u+(1-2*n)*i,d=c+u;l=n<.5?"L 0 0 L "+u+" "+-r+" L "+c+" "+-r+" L "+d+" 0":"L 0 0 L "+c+" "+-r+" L "+d+" 0";var p={label:"Trapezoid Body",position:{x:t,y:e},vertices:s.fromPath(l)};if(h.chamfer){var f=h.chamfer;p.vertices=s.chamfer(p.vertices,f.radius,f.quality,f.qualityMin,f.qualityMax),delete h.chamfer}return a.create(o.extend({},p,h))},r.circle=function(t,e,i,n,s){n=n||{};var a={label:"Circle Body",circleRadius:i};s=s||25;var h=Math.ceil(Math.max(10,Math.min(s,i)));return h%2==1&&(h+=1),r.polygon(t,e,h,i,o.extend({},a,n))},r.polygon=function(t,e,i,n,h){if(h=h||{},i<3)return r.circle(t,e,n,h);for(var l=2*Math.PI/i,u="",c=.5*l,d=0;d<i;d+=1){var p=c+d*l,f=Math.cos(p)*n,m=Math.sin(p)*n;u+="L "+f.toFixed(3)+" "+m.toFixed(3)+" "}var y={label:"Polygon Body",position:{x:t,y:e},vertices:s.fromPath(u)};if(h.chamfer){var v=h.chamfer;y.vertices=s.chamfer(y.vertices,v.radius,v.quality,v.qualityMin,v.qualityMax),delete h.chamfer}return a.create(o.extend({},y,h))},r.fromVertices=function(t,e,i,r,u,c,d){var p,f,m,y,v,g,x,b,w;for(n||(n=o._requireGlobal("decomp","poly-decomp")),r=r||{},f=[],u=void 0!==u&&u,c=void 0!==c?c:.01,d=void 0!==d?d:10,n||o.warn("Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull."),o.isArray(i[0])||(i=[i]),b=0;b<i.length;b+=1)if(y=i[b],(m=s.isConvex(y))||!n)y=m?s.clockwiseSort(y):s.hull(y),f.push({position:{x:t,y:e},vertices:y});else{var _=y.map((function(t){return[t.x,t.y]}));n.makeCCW(_),!1!==c&&n.removeCollinearPoints(_,c);var S=n.quickDecomp(_);for(v=0;v<S.length;v++){var C=S[v].map((function(t){return{x:t[0],y:t[1]}}));d>0&&s.area(C)<d||f.push({position:s.centre(C),vertices:C})}}for(v=0;v<f.length;v++)f[v]=a.create(o.extend(f[v],r));if(u)for(v=0;v<f.length;v++){var T=f[v];for(g=v+1;g<f.length;g++){var I=f[g];if(h.overlaps(T.bounds,I.bounds)){var E=T.vertices,A=I.vertices;for(x=0;x<T.vertices.length;x++)for(w=0;w<I.vertices.length;w++){var M=l.magnitudeSquared(l.sub(E[(x+1)%E.length],A[w])),P=l.magnitudeSquared(l.sub(E[x],A[(w+1)%A.length]));M<5&&P<5&&(E[x].isInternal=!0,A[w].isInternal=!0)}}}}return f.length>1?(p=a.create(o.extend({parts:f.slice(0)},r)),a.setPosition(p,{x:t,y:e}),p):f[0]}},{"../body/Body":1,"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],24:[function(t,e,i){var r={};e.exports=r;var n=t("../body/Composite"),s=t("../constraint/Constraint"),o=t("../core/Common"),a=t("../body/Body"),h=t("./Bodies");r.stack=function(t,e,i,r,s,o,h){for(var l,u=n.create({label:"Stack"}),c=t,d=e,p=0,f=0;f<r;f++){for(var m=0,y=0;y<i;y++){var v=h(c,d,y,f,l,p);if(v){var g=v.bounds.max.y-v.bounds.min.y,x=v.bounds.max.x-v.bounds.min.x;g>m&&(m=g),a.translate(v,{x:.5*x,y:.5*g}),c=v.bounds.max.x+s,n.addBody(u,v),l=v,p+=1}else c+=s}d+=m+o,c=t}return u},r.chain=function(t,e,i,r,a,h){for(var l=t.bodies,u=1;u<l.length;u++){var c=l[u-1],d=l[u],p=c.bounds.max.y-c.bounds.min.y,f=c.bounds.max.x-c.bounds.min.x,m=d.bounds.max.y-d.bounds.min.y,y={bodyA:c,pointA:{x:f*e,y:p*i},bodyB:d,pointB:{x:(d.bounds.max.x-d.bounds.min.x)*r,y:m*a}},v=o.extend(y,h);n.addConstraint(t,s.create(v))}return t.label+=" Chain",t},r.mesh=function(t,e,i,r,a){var h,l,u,c,d,p=t.bodies;for(h=0;h<i;h++){for(l=1;l<e;l++)u=p[l-1+h*e],c=p[l+h*e],n.addConstraint(t,s.create(o.extend({bodyA:u,bodyB:c},a)));if(h>0)for(l=0;l<e;l++)u=p[l+(h-1)*e],c=p[l+h*e],n.addConstraint(t,s.create(o.extend({bodyA:u,bodyB:c},a))),r&&l>0&&(d=p[l-1+(h-1)*e],n.addConstraint(t,s.create(o.extend({bodyA:d,bodyB:c},a)))),r&&l<e-1&&(d=p[l+1+(h-1)*e],n.addConstraint(t,s.create(o.extend({bodyA:d,bodyB:c},a))))}return t.label+=" Mesh",t},r.pyramid=function(t,e,i,n,s,o,h){return r.stack(t,e,i,n,s,o,(function(e,r,o,l,u,c){var d=Math.min(n,Math.ceil(i/2)),p=u?u.bounds.max.x-u.bounds.min.x:0;if(!(l>d||o<(l=d-l)||o>i-1-l))return 1===c&&a.translate(u,{x:(o+(i%2==1?1:-1))*p,y:0}),h(t+(u?o*p:0)+o*s,r,o,l,u,c)}))},r.newtonsCradle=function(t,e,i,r,o){for(var a=n.create({label:"Newtons Cradle"}),l=0;l<i;l++){var u=h.circle(t+l*(1.9*r),e+o,r,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),c=s.create({pointA:{x:t+l*(1.9*r),y:e},bodyB:u});n.addBody(a,u),n.addConstraint(a,c)}return a},r.car=function(t,e,i,r,o){var l=a.nextGroup(!0),u=.5*-i+20,c=.5*i-20,d=n.create({label:"Car"}),p=h.rectangle(t,e,i,r,{collisionFilter:{group:l},chamfer:{radius:.5*r},density:2e-4}),f=h.circle(t+u,e+0,o,{collisionFilter:{group:l},friction:.8}),m=h.circle(t+c,e+0,o,{collisionFilter:{group:l},friction:.8}),y=s.create({bodyB:p,pointB:{x:u,y:0},bodyA:f,stiffness:1,length:0}),v=s.create({bodyB:p,pointB:{x:c,y:0},bodyA:m,stiffness:1,length:0});return n.addBody(d,p),n.addBody(d,f),n.addBody(d,m),n.addConstraint(d,y),n.addConstraint(d,v),d},r.softBody=function(t,e,i,n,s,a,l,u,c,d){c=o.extend({inertia:1/0},c),d=o.extend({stiffness:.2,render:{type:"line",anchors:!1}},d);var p=r.stack(t,e,i,n,s,a,(function(t,e){return h.circle(t,e,u,c)}));return r.mesh(p,i,n,l,d),p.label="Soft Body",p}},{"../body/Body":1,"../body/Composite":2,"../constraint/Constraint":12,"../core/Common":14,"./Bodies":23}],25:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),s=t("../core/Common");r.fromVertices=function(t){for(var e={},i=0;i<t.length;i++){var r=(i+1)%t.length,o=n.normalise({x:t[r].y-t[i].y,y:t[i].x-t[r].x}),a=0===o.y?1/0:o.x/o.y;e[a=a.toFixed(3).toString()]=o}return s.values(e)},r.rotate=function(t,e){if(0!==e)for(var i=Math.cos(e),r=Math.sin(e),n=0;n<t.length;n++){var s,o=t[n];s=o.x*i-o.y*r,o.y=o.x*r+o.y*i,o.x=s}}},{"../core/Common":14,"../geometry/Vector":28}],26:[function(t,e,i){var r={};e.exports=r,r.create=function(t){var e={min:{x:0,y:0},max:{x:0,y:0}};return t&&r.update(e,t),e},r.update=function(t,e,i){t.min.x=1/0,t.max.x=-1/0,t.min.y=1/0,t.max.y=-1/0;for(var r=0;r<e.length;r++){var n=e[r];n.x>t.max.x&&(t.max.x=n.x),n.x<t.min.x&&(t.min.x=n.x),n.y>t.max.y&&(t.max.y=n.y),n.y<t.min.y&&(t.min.y=n.y)}i&&(i.x>0?t.max.x+=i.x:t.min.x+=i.x,i.y>0?t.max.y+=i.y:t.min.y+=i.y)},r.contains=function(t,e){return e.x>=t.min.x&&e.x<=t.max.x&&e.y>=t.min.y&&e.y<=t.max.y},r.overlaps=function(t,e){return t.min.x<=e.max.x&&t.max.x>=e.min.x&&t.max.y>=e.min.y&&t.min.y<=e.max.y},r.translate=function(t,e){t.min.x+=e.x,t.max.x+=e.x,t.min.y+=e.y,t.max.y+=e.y},r.shift=function(t,e){var i=t.max.x-t.min.x,r=t.max.y-t.min.y;t.min.x=e.x,t.max.x=e.x+i,t.min.y=e.y,t.max.y=e.y+r}},{}],27:[function(t,e,i){var r={};e.exports=r;var n=(t("../geometry/Bounds"),t("../core/Common"));r.pathToVertices=function(t,e){"undefined"==typeof window||"SVGPathSeg"in window||n.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var i,s,o,a,h,l,u,c,d,p,f,m=[],y=0,v=0,g=0;e=e||15;var x=function(t,e,i){var r=i%2==1&&i>1;if(!d||t!=d.x||e!=d.y){d&&r?(p=d.x,f=d.y):(p=0,f=0);var n={x:p+t,y:f+e};!r&&d||(d=n),m.push(n),v=p+t,g=f+e}},b=function(t){var e=t.pathSegTypeAsLetter.toUpperCase();if("Z"!==e){switch(e){case"M":case"L":case"T":case"C":case"S":case"Q":v=t.x,g=t.y;break;case"H":v=t.x;break;case"V":g=t.y}x(v,g,t.pathSegType)}};for(r._svgPathToAbsolute(t),o=t.getTotalLength(),l=[],i=0;i<t.pathSegList.numberOfItems;i+=1)l.push(t.pathSegList.getItem(i));for(u=l.concat();y<o;){if((h=l[t.getPathSegAtLength(y)])!=c){for(;u.length&&u[0]!=h;)b(u.shift());c=h}switch(h.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":a=t.getPointAtLength(y),x(a.x,a.y,0)}y+=e}for(i=0,s=u.length;i<s;++i)b(u[i]);return m},r._svgPathToAbsolute=function(t){for(var e,i,r,n,s,o,a=t.pathSegList,h=0,l=0,u=a.numberOfItems,c=0;c<u;++c){var d=a.getItem(c),p=d.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(p))"x"in d&&(h=d.x),"y"in d&&(l=d.y);else switch("x1"in d&&(r=h+d.x1),"x2"in d&&(s=h+d.x2),"y1"in d&&(n=l+d.y1),"y2"in d&&(o=l+d.y2),"x"in d&&(h+=d.x),"y"in d&&(l+=d.y),p){case"m":a.replaceItem(t.createSVGPathSegMovetoAbs(h,l),c);break;case"l":a.replaceItem(t.createSVGPathSegLinetoAbs(h,l),c);break;case"h":a.replaceItem(t.createSVGPathSegLinetoHorizontalAbs(h),c);break;case"v":a.replaceItem(t.createSVGPathSegLinetoVerticalAbs(l),c);break;case"c":a.replaceItem(t.createSVGPathSegCurvetoCubicAbs(h,l,r,n,s,o),c);break;case"s":a.replaceItem(t.createSVGPathSegCurvetoCubicSmoothAbs(h,l,s,o),c);break;case"q":a.replaceItem(t.createSVGPathSegCurvetoQuadraticAbs(h,l,r,n),c);break;case"t":a.replaceItem(t.createSVGPathSegCurvetoQuadraticSmoothAbs(h,l),c);break;case"a":a.replaceItem(t.createSVGPathSegArcAbs(h,l,d.r1,d.r2,d.angle,d.largeArcFlag,d.sweepFlag),c);break;case"z":case"Z":h=e,l=i}"M"!=p&&"m"!=p||(e=h,i=l)}}},{"../core/Common":14,"../geometry/Bounds":26}],28:[function(t,e,i){var r={};e.exports=r,r.create=function(t,e){return{x:t||0,y:e||0}},r.clone=function(t){return{x:t.x,y:t.y}},r.magnitude=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},r.magnitudeSquared=function(t){return t.x*t.x+t.y*t.y},r.rotate=function(t,e,i){var r=Math.cos(e),n=Math.sin(e);i||(i={});var s=t.x*r-t.y*n;return i.y=t.x*n+t.y*r,i.x=s,i},r.rotateAbout=function(t,e,i,r){var n=Math.cos(e),s=Math.sin(e);r||(r={});var o=i.x+((t.x-i.x)*n-(t.y-i.y)*s);return r.y=i.y+((t.x-i.x)*s+(t.y-i.y)*n),r.x=o,r},r.normalise=function(t){var e=r.magnitude(t);return 0===e?{x:0,y:0}:{x:t.x/e,y:t.y/e}},r.dot=function(t,e){return t.x*e.x+t.y*e.y},r.cross=function(t,e){return t.x*e.y-t.y*e.x},r.cross3=function(t,e,i){return(e.x-t.x)*(i.y-t.y)-(e.y-t.y)*(i.x-t.x)},r.add=function(t,e,i){return i||(i={}),i.x=t.x+e.x,i.y=t.y+e.y,i},r.sub=function(t,e,i){return i||(i={}),i.x=t.x-e.x,i.y=t.y-e.y,i},r.mult=function(t,e){return{x:t.x*e,y:t.y*e}},r.div=function(t,e){return{x:t.x/e,y:t.y/e}},r.perp=function(t,e){return{x:(e=!0===e?-1:1)*-t.y,y:e*t.x}},r.neg=function(t){return{x:-t.x,y:-t.y}},r.angle=function(t,e){return Math.atan2(e.y-t.y,e.x-t.x)},r._temp=[r.create(),r.create(),r.create(),r.create(),r.create(),r.create()]},{}],29:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),s=t("../core/Common");r.create=function(t,e){for(var i=[],r=0;r<t.length;r++){var n=t[r],s={x:n.x,y:n.y,index:r,body:e,isInternal:!1};i.push(s)}return i},r.fromPath=function(t,e){var i=[];return t.replace(/L?\s*([\-\d\.e]+)[\s,]*([\-\d\.e]+)*/gi,(function(t,e,r){i.push({x:parseFloat(e),y:parseFloat(r)})})),r.create(i,e)},r.centre=function(t){for(var e,i,s,o=r.area(t,!0),a={x:0,y:0},h=0;h<t.length;h++)s=(h+1)%t.length,e=n.cross(t[h],t[s]),i=n.mult(n.add(t[h],t[s]),e),a=n.add(a,i);return n.div(a,6*o)},r.mean=function(t){for(var e={x:0,y:0},i=0;i<t.length;i++)e.x+=t[i].x,e.y+=t[i].y;return n.div(e,t.length)},r.area=function(t,e){for(var i=0,r=t.length-1,n=0;n<t.length;n++)i+=(t[r].x-t[n].x)*(t[r].y+t[n].y),r=n;return e?i/2:Math.abs(i)/2},r.inertia=function(t,e){for(var i,r,s=0,o=0,a=t,h=0;h<a.length;h++)r=(h+1)%a.length,s+=(i=Math.abs(n.cross(a[r],a[h])))*(n.dot(a[r],a[r])+n.dot(a[r],a[h])+n.dot(a[h],a[h])),o+=i;return e/6*(s/o)},r.translate=function(t,e,i){var r;if(i)for(r=0;r<t.length;r++)t[r].x+=e.x*i,t[r].y+=e.y*i;else for(r=0;r<t.length;r++)t[r].x+=e.x,t[r].y+=e.y;return t},r.rotate=function(t,e,i){if(0!==e){for(var r=Math.cos(e),n=Math.sin(e),s=0;s<t.length;s++){var o=t[s],a=o.x-i.x,h=o.y-i.y;o.x=i.x+(a*r-h*n),o.y=i.y+(a*n+h*r)}return t}},r.contains=function(t,e){for(var i=0;i<t.length;i++){var r=t[i],n=t[(i+1)%t.length];if((e.x-r.x)*(n.y-r.y)+(e.y-r.y)*(r.x-n.x)>0)return!1}return!0},r.scale=function(t,e,i,s){if(1===e&&1===i)return t;s=s||r.centre(t);for(var o,a,h=0;h<t.length;h++)o=t[h],a=n.sub(o,s),t[h].x=s.x+a.x*e,t[h].y=s.y+a.y*i;return t},r.chamfer=function(t,e,i,r,o){e="number"==typeof e?[e]:e||[8],i=void 0!==i?i:-1,r=r||2,o=o||14;for(var a=[],h=0;h<t.length;h++){var l=t[h-1>=0?h-1:t.length-1],u=t[h],c=t[(h+1)%t.length],d=e[h<e.length?h:e.length-1];if(0!==d){var p=n.normalise({x:u.y-l.y,y:l.x-u.x}),f=n.normalise({x:c.y-u.y,y:u.x-c.x}),m=Math.sqrt(2*Math.pow(d,2)),y=n.mult(s.clone(p),d),v=n.normalise(n.mult(n.add(p,f),.5)),g=n.sub(u,n.mult(v,m)),x=i;-1===i&&(x=1.75*Math.pow(d,.32)),(x=s.clamp(x,r,o))%2==1&&(x+=1);for(var b=Math.acos(n.dot(p,f))/x,w=0;w<x;w++)a.push(n.add(n.rotate(y,b*w),g))}else a.push(u)}return a},r.clockwiseSort=function(t){var e=r.mean(t);return t.sort((function(t,i){return n.angle(e,t)-n.angle(e,i)})),t},r.isConvex=function(t){var e,i,r,n,s=0,o=t.length;if(o<3)return null;for(e=0;e<o;e++)if(r=(e+2)%o,n=(t[i=(e+1)%o].x-t[e].x)*(t[r].y-t[i].y),(n-=(t[i].y-t[e].y)*(t[r].x-t[i].x))<0?s|=1:n>0&&(s|=2),3===s)return!1;return 0!==s||null},r.hull=function(t){var e,i,r=[],s=[];for((t=t.slice(0)).sort((function(t,e){var i=t.x-e.x;return 0!==i?i:t.y-e.y})),i=0;i<t.length;i+=1){for(e=t[i];s.length>=2&&n.cross3(s[s.length-2],s[s.length-1],e)<=0;)s.pop();s.push(e)}for(i=t.length-1;i>=0;i-=1){for(e=t[i];r.length>=2&&n.cross3(r[r.length-2],r[r.length-1],e)<=0;)r.pop();r.push(e)}return r.pop(),s.pop(),r.concat(s)}},{"../core/Common":14,"../geometry/Vector":28}],30:[function(t,e,i){var r=e.exports=t("../core/Matter");r.Body=t("../body/Body"),r.Composite=t("../body/Composite"),r.World=t("../body/World"),r.Contact=t("../collision/Contact"),r.Detector=t("../collision/Detector"),r.Grid=t("../collision/Grid"),r.Pairs=t("../collision/Pairs"),r.Pair=t("../collision/Pair"),r.Query=t("../collision/Query"),r.Resolver=t("../collision/Resolver"),r.SAT=t("../collision/SAT"),r.Constraint=t("../constraint/Constraint"),r.MouseConstraint=t("../constraint/MouseConstraint"),r.Common=t("../core/Common"),r.Engine=t("../core/Engine"),r.Events=t("../core/Events"),r.Mouse=t("../core/Mouse"),r.Runner=t("../core/Runner"),r.Sleeping=t("../core/Sleeping"),r.Plugin=t("../core/Plugin"),r.Bodies=t("../factory/Bodies"),r.Composites=t("../factory/Composites"),r.Axes=t("../geometry/Axes"),r.Bounds=t("../geometry/Bounds"),r.Svg=t("../geometry/Svg"),r.Vector=t("../geometry/Vector"),r.Vertices=t("../geometry/Vertices"),r.Render=t("../render/Render"),r.RenderPixi=t("../render/RenderPixi"),r.World.add=r.Composite.add,r.World.remove=r.Composite.remove,r.World.addComposite=r.Composite.addComposite,r.World.addBody=r.Composite.addBody,r.World.addConstraint=r.Composite.addConstraint,r.World.clear=r.Composite.clear,r.Engine.run=r.Runner.run},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Contact":4,"../collision/Detector":5,"../collision/Grid":6,"../collision/Pair":7,"../collision/Pairs":8,"../collision/Query":9,"../collision/Resolver":10,"../collision/SAT":11,"../constraint/Constraint":12,"../constraint/MouseConstraint":13,"../core/Common":14,"../core/Engine":15,"../core/Events":16,"../core/Matter":17,"../core/Metrics":18,"../core/Mouse":19,"../core/Plugin":20,"../core/Runner":21,"../core/Sleeping":22,"../factory/Bodies":23,"../factory/Composites":24,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Svg":27,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31,"../render/RenderPixi":32}],31:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Common"),s=t("../body/Composite"),o=t("../geometry/Bounds"),a=t("../core/Events"),h=t("../collision/Grid"),l=t("../geometry/Vector"),u=t("../core/Mouse");!function(){var t,e;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout((function(){t(n.now())}),1e3/60)},e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(t){var e={controller:r,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,options:{width:800,height:600,pixelRatio:1,background:"#18181d",wireframeBackground:"#0f0f13",hasBounds:!!t.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},s=n.extend(e,t);return s.canvas&&(s.canvas.width=s.options.width||s.canvas.width,s.canvas.height=s.options.height||s.canvas.height),s.mouse=t.mouse,s.engine=t.engine,s.canvas=s.canvas||i(s.options.width,s.options.height),s.context=s.canvas.getContext("2d"),s.textures={},s.bounds=s.bounds||{min:{x:0,y:0},max:{x:s.canvas.width,y:s.canvas.height}},1!==s.options.pixelRatio&&r.setPixelRatio(s,s.options.pixelRatio),n.isElement(s.element)?s.element.appendChild(s.canvas):s.canvas.parentNode||n.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),s},r.run=function(e){!function i(n){e.frameRequestId=t(i),r.world(e)}()},r.stop=function(t){e(t.frameRequestId)},r.setPixelRatio=function(t,e){var i=t.options,r=t.canvas;"auto"===e&&(e=c(r)),i.pixelRatio=e,r.setAttribute("data-pixel-ratio",e),r.width=i.width*e,r.height=i.height*e,r.style.width=i.width+"px",r.style.height=i.height+"px",t.context.scale(e,e)},r.lookAt=function(t,e,i,r){r=void 0===r||r,e=n.isArray(e)?e:[e],i=i||{x:0,y:0};for(var s={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},o=0;o<e.length;o+=1){var a=e[o],h=a.bounds?a.bounds.min:a.min||a.position||a,l=a.bounds?a.bounds.max:a.max||a.position||a;h&&l&&(h.x<s.min.x&&(s.min.x=h.x),l.x>s.max.x&&(s.max.x=l.x),h.y<s.min.y&&(s.min.y=h.y),l.y>s.max.y&&(s.max.y=l.y))}var c=s.max.x-s.min.x+2*i.x,d=s.max.y-s.min.y+2*i.y,p=t.canvas.height,f=t.canvas.width/p,m=c/d,y=1,v=1;m>f?v=m/f:y=f/m,t.options.hasBounds=!0,t.bounds.min.x=s.min.x,t.bounds.max.x=s.min.x+c*y,t.bounds.min.y=s.min.y,t.bounds.max.y=s.min.y+d*v,r&&(t.bounds.min.x+=.5*c-c*y*.5,t.bounds.max.x+=.5*c-c*y*.5,t.bounds.min.y+=.5*d-d*v*.5,t.bounds.max.y+=.5*d-d*v*.5),t.bounds.min.x-=i.x,t.bounds.max.x-=i.x,t.bounds.min.y-=i.y,t.bounds.max.y-=i.y,t.mouse&&(u.setScale(t.mouse,{x:(t.bounds.max.x-t.bounds.min.x)/t.canvas.width,y:(t.bounds.max.y-t.bounds.min.y)/t.canvas.height}),u.setOffset(t.mouse,t.bounds.min))},r.startViewTransform=function(t){var e=t.bounds.max.x-t.bounds.min.x,i=t.bounds.max.y-t.bounds.min.y,r=e/t.options.width,n=i/t.options.height;t.context.scale(1/r,1/n),t.context.translate(-t.bounds.min.x,-t.bounds.min.y)},r.endViewTransform=function(t){t.context.setTransform(t.options.pixelRatio,0,0,t.options.pixelRatio,0,0)},r.world=function(t){var e,i=t.engine,n=i.world,c=t.canvas,d=t.context,f=t.options,m=s.allBodies(n),y=s.allConstraints(n),v=f.wireframes?f.wireframeBackground:f.background,g=[],x=[],b={timestamp:i.timing.timestamp};if(a.trigger(t,"beforeRender",b),t.currentBackground!==v&&p(t,v),d.globalCompositeOperation="source-in",d.fillStyle="transparent",d.fillRect(0,0,c.width,c.height),d.globalCompositeOperation="source-over",f.hasBounds){for(e=0;e<m.length;e++){var w=m[e];o.overlaps(w.bounds,t.bounds)&&g.push(w)}for(e=0;e<y.length;e++){var _=y[e],S=_.bodyA,C=_.bodyB,T=_.pointA,I=_.pointB;S&&(T=l.add(S.position,_.pointA)),C&&(I=l.add(C.position,_.pointB)),T&&I&&(o.contains(t.bounds,T)||o.contains(t.bounds,I))&&x.push(_)}r.startViewTransform(t),t.mouse&&(u.setScale(t.mouse,{x:(t.bounds.max.x-t.bounds.min.x)/t.canvas.width,y:(t.bounds.max.y-t.bounds.min.y)/t.canvas.height}),u.setOffset(t.mouse,t.bounds.min))}else x=y,g=m;!f.wireframes||i.enableSleeping&&f.showSleeping?r.bodies(t,g,d):(f.showConvexHulls&&r.bodyConvexHulls(t,g,d),r.bodyWireframes(t,g,d)),f.showBounds&&r.bodyBounds(t,g,d),(f.showAxes||f.showAngleIndicator)&&r.bodyAxes(t,g,d),f.showPositions&&r.bodyPositions(t,g,d),f.showVelocity&&r.bodyVelocity(t,g,d),f.showIds&&r.bodyIds(t,g,d),f.showSeparations&&r.separations(t,i.pairs.list,d),f.showCollisions&&r.collisions(t,i.pairs.list,d),f.showVertexNumbers&&r.vertexNumbers(t,g,d),f.showMousePosition&&r.mousePosition(t,t.mouse,d),r.constraints(x,d),f.showBroadphase&&i.broadphase.controller===h&&r.grid(t,i.broadphase,d),f.showDebug&&r.debug(t,d),f.hasBounds&&r.endViewTransform(t),a.trigger(t,"afterRender",b)},r.debug=function(t,e){var i=e,r=t.engine,n=r.world,o=r.metrics,a=t.options;if(s.allBodies(n),r.timing.timestamp-(t.debugTimestamp||0)>=500){var h="";o.timing&&(h+="fps: "+Math.round(o.timing.fps)+"    "),t.debugString=h,t.debugTimestamp=r.timing.timestamp}if(t.debugString){i.font="12px Arial",a.wireframes?i.fillStyle="rgba(255,255,255,0.5)":i.fillStyle="rgba(0,0,0,0.5)";for(var l=t.debugString.split("\n"),u=0;u<l.length;u++)i.fillText(l[u],50,50+18*u)}},r.constraints=function(t,e){for(var i=e,r=0;r<t.length;r++){var s=t[r];if(s.render.visible&&s.pointA&&s.pointB){var o,a,h=s.bodyA,u=s.bodyB;if(o=h?l.add(h.position,s.pointA):s.pointA,"pin"===s.render.type)i.beginPath(),i.arc(o.x,o.y,3,0,2*Math.PI),i.closePath();else{if(a=u?l.add(u.position,s.pointB):s.pointB,i.beginPath(),i.moveTo(o.x,o.y),"spring"===s.render.type)for(var c,d=l.sub(a,o),p=l.perp(l.normalise(d)),f=Math.ceil(n.clamp(s.length/5,12,20)),m=1;m<f;m+=1)c=m%2==0?1:-1,i.lineTo(o.x+d.x*(m/f)+p.x*c*4,o.y+d.y*(m/f)+p.y*c*4);i.lineTo(a.x,a.y)}s.render.lineWidth&&(i.lineWidth=s.render.lineWidth,i.strokeStyle=s.render.strokeStyle,i.stroke()),s.render.anchors&&(i.fillStyle=s.render.strokeStyle,i.beginPath(),i.arc(o.x,o.y,3,0,2*Math.PI),i.arc(a.x,a.y,3,0,2*Math.PI),i.closePath(),i.fill())}}},r.bodyShadows=function(t,e,i){for(var r=i,n=(t.engine,0);n<e.length;n++){var s=e[n];if(s.render.visible){if(s.circleRadius)r.beginPath(),r.arc(s.position.x,s.position.y,s.circleRadius,0,2*Math.PI),r.closePath();else{r.beginPath(),r.moveTo(s.vertices[0].x,s.vertices[0].y);for(var o=1;o<s.vertices.length;o++)r.lineTo(s.vertices[o].x,s.vertices[o].y);r.closePath()}var a=s.position.x-.5*t.options.width,h=s.position.y-.2*t.options.height,l=Math.abs(a)+Math.abs(h);r.shadowColor="rgba(0,0,0,0.15)",r.shadowOffsetX=.05*a,r.shadowOffsetY=.05*h,r.shadowBlur=1+12*Math.min(1,l/1e3),r.fill(),r.shadowColor=null,r.shadowOffsetX=null,r.shadowOffsetY=null,r.shadowBlur=null}}},r.bodies=function(t,e,i){var r,n,s,o,a=i,h=(t.engine,t.options),l=h.showInternalEdges||!h.wireframes;for(s=0;s<e.length;s++)if((r=e[s]).render.visible)for(o=r.parts.length>1?1:0;o<r.parts.length;o++)if((n=r.parts[o]).render.visible){if(h.showSleeping&&r.isSleeping?a.globalAlpha=.5*n.render.opacity:1!==n.render.opacity&&(a.globalAlpha=n.render.opacity),n.render.sprite&&n.render.sprite.texture&&!h.wireframes){var u=n.render.sprite,c=d(t,u.texture);a.translate(n.position.x,n.position.y),a.rotate(n.angle),a.drawImage(c,c.width*-u.xOffset*u.xScale,c.height*-u.yOffset*u.yScale,c.width*u.xScale,c.height*u.yScale),a.rotate(-n.angle),a.translate(-n.position.x,-n.position.y)}else{if(n.circleRadius)a.beginPath(),a.arc(n.position.x,n.position.y,n.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(n.vertices[0].x,n.vertices[0].y);for(var p=1;p<n.vertices.length;p++)!n.vertices[p-1].isInternal||l?a.lineTo(n.vertices[p].x,n.vertices[p].y):a.moveTo(n.vertices[p].x,n.vertices[p].y),n.vertices[p].isInternal&&!l&&a.moveTo(n.vertices[(p+1)%n.vertices.length].x,n.vertices[(p+1)%n.vertices.length].y);a.lineTo(n.vertices[0].x,n.vertices[0].y),a.closePath()}h.wireframes?(a.lineWidth=1,a.strokeStyle="#bbb",a.stroke()):(a.fillStyle=n.render.fillStyle,n.render.lineWidth&&(a.lineWidth=n.render.lineWidth,a.strokeStyle=n.render.strokeStyle,a.stroke()),a.fill())}a.globalAlpha=1}},r.bodyWireframes=function(t,e,i){var r,n,s,o,a,h=i,l=t.options.showInternalEdges;for(h.beginPath(),s=0;s<e.length;s++)if((r=e[s]).render.visible)for(a=r.parts.length>1?1:0;a<r.parts.length;a++){for(n=r.parts[a],h.moveTo(n.vertices[0].x,n.vertices[0].y),o=1;o<n.vertices.length;o++)!n.vertices[o-1].isInternal||l?h.lineTo(n.vertices[o].x,n.vertices[o].y):h.moveTo(n.vertices[o].x,n.vertices[o].y),n.vertices[o].isInternal&&!l&&h.moveTo(n.vertices[(o+1)%n.vertices.length].x,n.vertices[(o+1)%n.vertices.length].y);h.lineTo(n.vertices[0].x,n.vertices[0].y)}h.lineWidth=1,h.strokeStyle="#bbb",h.stroke()},r.bodyConvexHulls=function(t,e,i){var r,n,s,o=i;for(o.beginPath(),n=0;n<e.length;n++)if((r=e[n]).render.visible&&1!==r.parts.length){for(o.moveTo(r.vertices[0].x,r.vertices[0].y),s=1;s<r.vertices.length;s++)o.lineTo(r.vertices[s].x,r.vertices[s].y);o.lineTo(r.vertices[0].x,r.vertices[0].y)}o.lineWidth=1,o.strokeStyle="rgba(255,255,255,0.2)",o.stroke()},r.vertexNumbers=function(t,e,i){var r,n,s,o=i;for(r=0;r<e.length;r++){var a=e[r].parts;for(s=a.length>1?1:0;s<a.length;s++){var h=a[s];for(n=0;n<h.vertices.length;n++)o.fillStyle="rgba(255,255,255,0.2)",o.fillText(r+"_"+n,h.position.x+.8*(h.vertices[n].x-h.position.x),h.position.y+.8*(h.vertices[n].y-h.position.y))}}},r.mousePosition=function(t,e,i){var r=i;r.fillStyle="rgba(255,255,255,0.8)",r.fillText(e.position.x+"  "+e.position.y,e.position.x+5,e.position.y-5)},r.bodyBounds=function(t,e,i){var r=i,n=(t.engine,t.options);r.beginPath();for(var s=0;s<e.length;s++)if(e[s].render.visible)for(var o=e[s].parts,a=o.length>1?1:0;a<o.length;a++){var h=o[a];r.rect(h.bounds.min.x,h.bounds.min.y,h.bounds.max.x-h.bounds.min.x,h.bounds.max.y-h.bounds.min.y)}n.wireframes?r.strokeStyle="rgba(255,255,255,0.08)":r.strokeStyle="rgba(0,0,0,0.1)",r.lineWidth=1,r.stroke()},r.bodyAxes=function(t,e,i){var r,n,s,o,a=i,h=(t.engine,t.options);for(a.beginPath(),n=0;n<e.length;n++){var l=e[n],u=l.parts;if(l.render.visible)if(h.showAxes)for(s=u.length>1?1:0;s<u.length;s++)for(r=u[s],o=0;o<r.axes.length;o++){var c=r.axes[o];a.moveTo(r.position.x,r.position.y),a.lineTo(r.position.x+20*c.x,r.position.y+20*c.y)}else for(s=u.length>1?1:0;s<u.length;s++)for(r=u[s],o=0;o<r.axes.length;o++)a.moveTo(r.position.x,r.position.y),a.lineTo((r.vertices[0].x+r.vertices[r.vertices.length-1].x)/2,(r.vertices[0].y+r.vertices[r.vertices.length-1].y)/2)}h.wireframes?(a.strokeStyle="indianred",a.lineWidth=1):(a.strokeStyle="rgba(255, 255, 255, 0.4)",a.globalCompositeOperation="overlay",a.lineWidth=2),a.stroke(),a.globalCompositeOperation="source-over"},r.bodyPositions=function(t,e,i){var r,n,s,o,a=i,h=(t.engine,t.options);for(a.beginPath(),s=0;s<e.length;s++)if((r=e[s]).render.visible)for(o=0;o<r.parts.length;o++)n=r.parts[o],a.arc(n.position.x,n.position.y,3,0,2*Math.PI,!1),a.closePath();for(h.wireframes?a.fillStyle="indianred":a.fillStyle="rgba(0,0,0,0.5)",a.fill(),a.beginPath(),s=0;s<e.length;s++)(r=e[s]).render.visible&&(a.arc(r.positionPrev.x,r.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle="rgba(255,165,0,0.8)",a.fill()},r.bodyVelocity=function(t,e,i){var r=i;r.beginPath();for(var n=0;n<e.length;n++){var s=e[n];s.render.visible&&(r.moveTo(s.position.x,s.position.y),r.lineTo(s.position.x+2*(s.position.x-s.positionPrev.x),s.position.y+2*(s.position.y-s.positionPrev.y)))}r.lineWidth=3,r.strokeStyle="cornflowerblue",r.stroke()},r.bodyIds=function(t,e,i){var r,n,s=i;for(r=0;r<e.length;r++)if(e[r].render.visible){var o=e[r].parts;for(n=o.length>1?1:0;n<o.length;n++){var a=o[n];s.font="12px Arial",s.fillStyle="rgba(255,255,255,0.5)",s.fillText(a.id,a.position.x+10,a.position.y-10)}}},r.collisions=function(t,e,i){var r,n,s,o,a=i,h=t.options;for(a.beginPath(),s=0;s<e.length;s++)if((r=e[s]).isActive)for(n=r.collision,o=0;o<r.activeContacts.length;o++){var l=r.activeContacts[o].vertex;a.rect(l.x-1.5,l.y-1.5,3.5,3.5)}for(h.wireframes?a.fillStyle="rgba(255,255,255,0.7)":a.fillStyle="orange",a.fill(),a.beginPath(),s=0;s<e.length;s++)if((r=e[s]).isActive&&(n=r.collision,r.activeContacts.length>0)){var u=r.activeContacts[0].vertex.x,c=r.activeContacts[0].vertex.y;2===r.activeContacts.length&&(u=(r.activeContacts[0].vertex.x+r.activeContacts[1].vertex.x)/2,c=(r.activeContacts[0].vertex.y+r.activeContacts[1].vertex.y)/2),n.bodyB===n.supports[0].body||!0===n.bodyA.isStatic?a.moveTo(u-8*n.normal.x,c-8*n.normal.y):a.moveTo(u+8*n.normal.x,c+8*n.normal.y),a.lineTo(u,c)}h.wireframes?a.strokeStyle="rgba(255,165,0,0.7)":a.strokeStyle="orange",a.lineWidth=1,a.stroke()},r.separations=function(t,e,i){var r,n,s,o,a,h=i,l=t.options;for(h.beginPath(),a=0;a<e.length;a++)if((r=e[a]).isActive){s=(n=r.collision).bodyA;var u=1;(o=n.bodyB).isStatic||s.isStatic||(u=.5),o.isStatic&&(u=0),h.moveTo(o.position.x,o.position.y),h.lineTo(o.position.x-n.penetration.x*u,o.position.y-n.penetration.y*u),u=1,o.isStatic||s.isStatic||(u=.5),s.isStatic&&(u=0),h.moveTo(s.position.x,s.position.y),h.lineTo(s.position.x+n.penetration.x*u,s.position.y+n.penetration.y*u)}l.wireframes?h.strokeStyle="rgba(255,165,0,0.5)":h.strokeStyle="orange",h.stroke()},r.grid=function(t,e,i){var r=i;t.options.wireframes?r.strokeStyle="rgba(255,180,0,0.1)":r.strokeStyle="rgba(255,180,0,0.5)",r.beginPath();for(var s=n.keys(e.buckets),o=0;o<s.length;o++){var a=s[o];if(!(e.buckets[a].length<2)){var h=a.split(/C|R/);r.rect(.5+parseInt(h[1],10)*e.bucketWidth,.5+parseInt(h[2],10)*e.bucketHeight,e.bucketWidth,e.bucketHeight)}}r.lineWidth=1,r.stroke()},r.inspector=function(t,e){var i,r=(t.engine,t.selected),n=t.render,s=n.options;if(s.hasBounds){var o=n.bounds.max.x-n.bounds.min.x,a=n.bounds.max.y-n.bounds.min.y,h=o/n.options.width,l=a/n.options.height;e.scale(1/h,1/l),e.translate(-n.bounds.min.x,-n.bounds.min.y)}for(var u=0;u<r.length;u++){var c=r[u].data;switch(e.translate(.5,.5),e.lineWidth=1,e.strokeStyle="rgba(255,165,0,0.9)",e.setLineDash([1,2]),c.type){case"body":i=c.bounds,e.beginPath(),e.rect(Math.floor(i.min.x-3),Math.floor(i.min.y-3),Math.floor(i.max.x-i.min.x+6),Math.floor(i.max.y-i.min.y+6)),e.closePath(),e.stroke();break;case"constraint":var d=c.pointA;c.bodyA&&(d=c.pointB),e.beginPath(),e.arc(d.x,d.y,10,0,2*Math.PI),e.closePath(),e.stroke()}e.setLineDash([]),e.translate(-.5,-.5)}null!==t.selectStart&&(e.translate(.5,.5),e.lineWidth=1,e.strokeStyle="rgba(255,165,0,0.6)",e.fillStyle="rgba(255,165,0,0.1)",i=t.selectBounds,e.beginPath(),e.rect(Math.floor(i.min.x),Math.floor(i.min.y),Math.floor(i.max.x-i.min.x),Math.floor(i.max.y-i.min.y)),e.closePath(),e.stroke(),e.fill(),e.translate(-.5,-.5)),s.hasBounds&&e.setTransform(1,0,0,1,0,0)};var i=function(t,e){var i=document.createElement("canvas");return i.width=t,i.height=e,i.oncontextmenu=function(){return!1},i.onselectstart=function(){return!1},i},c=function(t){var e=t.getContext("2d");return(window.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1)},d=function(t,e){var i=t.textures[e];return i||((i=t.textures[e]=new Image).src=e,i)},p=function(t,e){var i=e;/(jpg|gif|png)$/.test(e)&&(i="url("+e+")"),t.canvas.style.background=i,t.canvas.style.backgroundSize="contain",t.currentBackground=e}}()},{"../body/Composite":2,"../collision/Grid":6,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../geometry/Bounds":26,"../geometry/Vector":28}],32:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Bounds"),s=t("../body/Composite"),o=t("../core/Common"),a=t("../core/Events"),h=t("../geometry/Vector");!function(){var t,e;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout((function(){t(o.now())}),1e3/60)},e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(t){o.warn("RenderPixi.create: Matter.RenderPixi is deprecated (see docs)");var e={controller:r,engine:null,element:null,frameRequestId:null,canvas:null,renderer:null,container:null,spriteContainer:null,pixiOptions:null,options:{width:800,height:600,background:"#fafafa",wireframeBackground:"#222",hasBounds:!1,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1}},i=o.extend(e,t),n=!i.options.wireframes&&"transparent"===i.options.background;return i.pixiOptions=i.pixiOptions||{view:i.canvas,transparent:n,antialias:!0,backgroundColor:t.background},i.mouse=t.mouse,i.engine=t.engine,i.renderer=i.renderer||new PIXI.WebGLRenderer(i.options.width,i.options.height,i.pixiOptions),i.container=i.container||new PIXI.Container,i.spriteContainer=i.spriteContainer||new PIXI.Container,i.canvas=i.canvas||i.renderer.view,i.bounds=i.bounds||{min:{x:0,y:0},max:{x:i.options.width,y:i.options.height}},a.on(i.engine,"beforeUpdate",(function(){r.clear(i)})),i.textures={},i.sprites={},i.primitives={},i.container.addChild(i.spriteContainer),o.isElement(i.element)?i.element.appendChild(i.canvas):o.warn('No "render.element" passed, "render.canvas" was not inserted into document.'),i.canvas.oncontextmenu=function(){return!1},i.canvas.onselectstart=function(){return!1},i},r.run=function(e){!function i(n){e.frameRequestId=t(i),r.world(e)}()},r.stop=function(t){e(t.frameRequestId)},r.clear=function(t){for(var e=t.container,i=t.spriteContainer;e.children[0];)e.removeChild(e.children[0]);for(;i.children[0];)i.removeChild(i.children[0]);var r=t.sprites["bg-0"];t.textures={},t.sprites={},t.primitives={},t.sprites["bg-0"]=r,r&&e.addChildAt(r,0),t.container.addChild(t.spriteContainer),t.currentBackground=null,e.scale.set(1,1),e.position.set(0,0)},r.setBackground=function(t,e){if(t.currentBackground!==e){var i=e.indexOf&&-1!==e.indexOf("#"),r=t.sprites["bg-0"];if(i){var n=o.colorToNumber(e);t.renderer.backgroundColor=n,r&&t.container.removeChild(r)}else if(!r){var s=u(t,e);(r=t.sprites["bg-0"]=new PIXI.Sprite(s)).position.x=0,r.position.y=0,t.container.addChildAt(r,0)}t.currentBackground=e}},r.world=function(t){var e,i=t.engine.world,o=t.renderer,a=t.container,l=t.options,u=s.allBodies(i),c=s.allConstraints(i),d=[];l.wireframes?r.setBackground(t,l.wireframeBackground):r.setBackground(t,l.background);var p=t.bounds.max.x-t.bounds.min.x,f=t.bounds.max.y-t.bounds.min.y,m=p/t.options.width,y=f/t.options.height;if(l.hasBounds){for(e=0;e<u.length;e++){var v=u[e];v.render.sprite.visible=n.overlaps(v.bounds,t.bounds)}for(e=0;e<c.length;e++){var g=c[e],x=g.bodyA,b=g.bodyB,w=g.pointA,_=g.pointB;x&&(w=h.add(x.position,g.pointA)),b&&(_=h.add(b.position,g.pointB)),w&&_&&(n.contains(t.bounds,w)||n.contains(t.bounds,_))&&d.push(g)}a.scale.set(1/m,1/y),a.position.set(-t.bounds.min.x*(1/m),-t.bounds.min.y*(1/y))}else d=c;for(e=0;e<u.length;e++)r.body(t,u[e]);for(e=0;e<d.length;e++)r.constraint(t,d[e]);o.render(a)},r.constraint=function(t,e){var i=(t.engine,e.bodyA),r=e.bodyB,n=e.pointA,s=e.pointB,a=t.container,h=e.render,l="c-"+e.id,u=t.primitives[l];u||(u=t.primitives[l]=new PIXI.Graphics),h.visible&&e.pointA&&e.pointB?(-1===o.indexOf(a.children,u)&&a.addChild(u),u.clear(),u.beginFill(0,0),u.lineStyle(h.lineWidth,o.colorToNumber(h.strokeStyle),1),i?u.moveTo(i.position.x+n.x,i.position.y+n.y):u.moveTo(n.x,n.y),r?u.lineTo(r.position.x+s.x,r.position.y+s.y):u.lineTo(s.x,s.y),u.endFill()):u.clear()},r.body=function(t,e){var r=(t.engine,e.render);if(r.visible)if(r.sprite&&r.sprite.texture){var n="b-"+e.id,s=t.sprites[n],a=t.spriteContainer;s||(s=t.sprites[n]=i(t,e)),-1===o.indexOf(a.children,s)&&a.addChild(s),s.position.x=e.position.x,s.position.y=e.position.y,s.rotation=e.angle,s.scale.x=r.sprite.xScale||1,s.scale.y=r.sprite.yScale||1}else{var h="b-"+e.id,u=t.primitives[h],c=t.container;u||((u=t.primitives[h]=l(t,e)).initialAngle=e.angle),-1===o.indexOf(c.children,u)&&c.addChild(u),u.position.x=e.position.x,u.position.y=e.position.y,u.rotation=e.angle-u.initialAngle}};var i=function(t,e){var i=e.render.sprite.texture,r=u(t,i),n=new PIXI.Sprite(r);return n.anchor.x=e.render.sprite.xOffset,n.anchor.y=e.render.sprite.yOffset,n},l=function(t,e){var i,r=e.render,n=t.options,s=new PIXI.Graphics,a=o.colorToNumber(r.fillStyle),h=o.colorToNumber(r.strokeStyle),l=o.colorToNumber(r.strokeStyle),u=o.colorToNumber("#bbb"),c=o.colorToNumber("#CD5C5C");s.clear();for(var d=e.parts.length>1?1:0;d<e.parts.length;d++){i=e.parts[d],n.wireframes?(s.beginFill(0,0),s.lineStyle(1,u,1)):(s.beginFill(a,1),s.lineStyle(r.lineWidth,h,1)),s.moveTo(i.vertices[0].x-e.position.x,i.vertices[0].y-e.position.y);for(var p=1;p<i.vertices.length;p++)s.lineTo(i.vertices[p].x-e.position.x,i.vertices[p].y-e.position.y);s.lineTo(i.vertices[0].x-e.position.x,i.vertices[0].y-e.position.y),s.endFill(),(n.showAngleIndicator||n.showAxes)&&(s.beginFill(0,0),n.wireframes?s.lineStyle(1,c,1):s.lineStyle(1,l),s.moveTo(i.position.x-e.position.x,i.position.y-e.position.y),s.lineTo((i.vertices[0].x+i.vertices[i.vertices.length-1].x)/2-e.position.x,(i.vertices[0].y+i.vertices[i.vertices.length-1].y)/2-e.position.y),s.endFill())}return s},u=function(t,e){var i=t.textures[e];return i||(i=t.textures[e]=PIXI.Texture.fromImage(e)),i}}()},{"../body/Composite":2,"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"../geometry/Vector":28}]},{},[30])(30)}).call(this,i(4))},function(t,e,i){var r,n,s;!function(i){var o=/iPhone/i,a=/iPod/i,h=/iPad/i,l=/\bAndroid(?:.+)Mobile\b/i,u=/Android/i,c=/\bAndroid(?:.+)SD4930UR\b/i,d=/\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i,p=/Windows Phone/i,f=/\bWindows(?:.+)ARM\b/i,m=/BlackBerry/i,y=/BB10/i,v=/Opera Mini/i,g=/\b(CriOS|Chrome)(?:.+)Mobile/i,x=/Mobile(?:.+)Firefox\b/i;function b(t,e){return t.test(e)}function w(t){var e=t||("undefined"!=typeof navigator?navigator.userAgent:""),i=e.split("[FBAN");void 0!==i[1]&&(e=i[0]),void 0!==(i=e.split("Twitter"))[1]&&(e=i[0]);var r={apple:{phone:b(o,e)&&!b(p,e),ipod:b(a,e),tablet:!b(o,e)&&b(h,e)&&!b(p,e),device:(b(o,e)||b(a,e)||b(h,e))&&!b(p,e)},amazon:{phone:b(c,e),tablet:!b(c,e)&&b(d,e),device:b(c,e)||b(d,e)},android:{phone:!b(p,e)&&b(c,e)||!b(p,e)&&b(l,e),tablet:!b(p,e)&&!b(c,e)&&!b(l,e)&&(b(d,e)||b(u,e)),device:!b(p,e)&&(b(c,e)||b(d,e)||b(l,e)||b(u,e))||b(/\bokhttp\b/i,e)},windows:{phone:b(p,e),tablet:b(f,e),device:b(p,e)||b(f,e)},other:{blackberry:b(m,e),blackberry10:b(y,e),opera:b(v,e),firefox:b(x,e),chrome:b(g,e),device:b(m,e)||b(y,e)||b(v,e)||b(x,e)||b(g,e)}};return r.any=r.apple.device||r.android.device||r.windows.device||r.other.device,r.phone=r.apple.phone||r.android.phone||r.windows.phone,r.tablet=r.apple.tablet||r.android.tablet||r.windows.tablet,r}t.exports&&"undefined"==typeof window?t.exports=w:t.exports&&"undefined"!=typeof window?(t.exports=w(),t.exports.isMobile=w):(n=[],r=i.isMobile=w(),void 0===(s="function"==typeof r?r.apply(e,n):r)||(t.exports=s))}(this)},function(t,e,i){"use strict";var r=i(7),n=i(9);function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=x,e.resolve=function(t,e){return x(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?x(t,!1,!0).resolveObject(e):e},e.format=function(t){n.isString(t)&&(t=x(t));return t instanceof s?t.format():s.prototype.format.call(t)},e.Url=s;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,h=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(l),c=["%","/","?",";","#"].concat(u),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},y={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},g=i(10);function x(t,e,i){if(t&&n.isObject(t)&&t instanceof s)return t;var r=new s;return r.parse(t,e,i),r}s.prototype.parse=function(t,e,i){if(!n.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var s=t.indexOf("?"),a=-1!==s&&s<t.indexOf("#")?"?":"#",l=t.split(a);l[0]=l[0].replace(/\\/g,"/");var x=t=l.join(a);if(x=x.trim(),!i&&1===t.split("#").length){var b=h.exec(x);if(b)return this.path=x,this.href=x,this.pathname=b[1],b[2]?(this.search=b[2],this.query=e?g.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var w=o.exec(x);if(w){var _=(w=w[0]).toLowerCase();this.protocol=_,x=x.substr(w.length)}if(i||w||x.match(/^\/\/[^@\/]+@[^@\/]+/)){var S="//"===x.substr(0,2);!S||w&&y[w]||(x=x.substr(2),this.slashes=!0)}if(!y[w]&&(S||w&&!v[w])){for(var C,T,I=-1,E=0;E<d.length;E++){-1!==(A=x.indexOf(d[E]))&&(-1===I||A<I)&&(I=A)}-1!==(T=-1===I?x.lastIndexOf("@"):x.lastIndexOf("@",I))&&(C=x.slice(0,T),x=x.slice(T+1),this.auth=decodeURIComponent(C)),I=-1;for(E=0;E<c.length;E++){var A;-1!==(A=x.indexOf(c[E]))&&(-1===I||A<I)&&(I=A)}-1===I&&(I=x.length),this.host=x.slice(0,I),x=x.slice(I),this.parseHost(),this.hostname=this.hostname||"";var M="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!M)for(var P=this.hostname.split(/\./),k=(E=0,P.length);E<k;E++){var B=P[E];if(B&&!B.match(p)){for(var O="",R=0,F=B.length;R<F;R++)B.charCodeAt(R)>127?O+="x":O+=B[R];if(!O.match(p)){var D=P.slice(0,E),L=P.slice(E+1),U=B.match(f);U&&(D.push(U[1]),L.unshift(U[2])),L.length&&(x="/"+L.join(".")+x),this.hostname=D.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),M||(this.hostname=r.toASCII(this.hostname));var N=this.port?":"+this.port:"",V=this.hostname||"";this.host=V+N,this.href+=this.host,M&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==x[0]&&(x="/"+x))}if(!m[_])for(E=0,k=u.length;E<k;E++){var X=u[E];if(-1!==x.indexOf(X)){var j=encodeURIComponent(X);j===X&&(j=escape(X)),x=x.split(X).join(j)}}var z=x.indexOf("#");-1!==z&&(this.hash=x.substr(z),x=x.slice(0,z));var G=x.indexOf("?");if(-1!==G?(this.search=x.substr(G),this.query=x.substr(G+1),e&&(this.query=g.parse(this.query)),x=x.slice(0,G)):e&&(this.search="",this.query={}),x&&(this.pathname=x),v[_]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){N=this.pathname||"";var H=this.search||"";this.path=N+H}return this.href=this.format(),this},s.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",i=this.pathname||"",r=this.hash||"",s=!1,o="";this.host?s=t+this.host:this.hostname&&(s=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&n.isObject(this.query)&&Object.keys(this.query).length&&(o=g.stringify(this.query));var a=this.search||o&&"?"+o||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||v[e])&&!1!==s?(s="//"+(s||""),i&&"/"!==i.charAt(0)&&(i="/"+i)):s||(s=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),e+s+(i=i.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(a=a.replace("#","%23"))+r},s.prototype.resolve=function(t){return this.resolveObject(x(t,!1,!0)).format()},s.prototype.resolveObject=function(t){if(n.isString(t)){var e=new s;e.parse(t,!1,!0),t=e}for(var i=new s,r=Object.keys(this),o=0;o<r.length;o++){var a=r[o];i[a]=this[a]}if(i.hash=t.hash,""===t.href)return i.href=i.format(),i;if(t.slashes&&!t.protocol){for(var h=Object.keys(t),l=0;l<h.length;l++){var u=h[l];"protocol"!==u&&(i[u]=t[u])}return v[i.protocol]&&i.hostname&&!i.pathname&&(i.path=i.pathname="/"),i.href=i.format(),i}if(t.protocol&&t.protocol!==i.protocol){if(!v[t.protocol]){for(var c=Object.keys(t),d=0;d<c.length;d++){var p=c[d];i[p]=t[p]}return i.href=i.format(),i}if(i.protocol=t.protocol,t.host||y[t.protocol])i.pathname=t.pathname;else{for(var f=(t.pathname||"").split("/");f.length&&!(t.host=f.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),i.pathname=f.join("/")}if(i.search=t.search,i.query=t.query,i.host=t.host||"",i.auth=t.auth,i.hostname=t.hostname||t.host,i.port=t.port,i.pathname||i.search){var m=i.pathname||"",g=i.search||"";i.path=m+g}return i.slashes=i.slashes||t.slashes,i.href=i.format(),i}var x=i.pathname&&"/"===i.pathname.charAt(0),b=t.host||t.pathname&&"/"===t.pathname.charAt(0),w=b||x||i.host&&t.pathname,_=w,S=i.pathname&&i.pathname.split("/")||[],C=(f=t.pathname&&t.pathname.split("/")||[],i.protocol&&!v[i.protocol]);if(C&&(i.hostname="",i.port=null,i.host&&(""===S[0]?S[0]=i.host:S.unshift(i.host)),i.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===f[0]?f[0]=t.host:f.unshift(t.host)),t.host=null),w=w&&(""===f[0]||""===S[0])),b)i.host=t.host||""===t.host?t.host:i.host,i.hostname=t.hostname||""===t.hostname?t.hostname:i.hostname,i.search=t.search,i.query=t.query,S=f;else if(f.length)S||(S=[]),S.pop(),S=S.concat(f),i.search=t.search,i.query=t.query;else if(!n.isNullOrUndefined(t.search)){if(C)i.hostname=i.host=S.shift(),(M=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=M.shift(),i.host=i.hostname=M.shift());return i.search=t.search,i.query=t.query,n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.href=i.format(),i}if(!S.length)return i.pathname=null,i.search?i.path="/"+i.search:i.path=null,i.href=i.format(),i;for(var T=S.slice(-1)[0],I=(i.host||t.host||S.length>1)&&("."===T||".."===T)||""===T,E=0,A=S.length;A>=0;A--)"."===(T=S[A])?S.splice(A,1):".."===T?(S.splice(A,1),E++):E&&(S.splice(A,1),E--);if(!w&&!_)for(;E--;E)S.unshift("..");!w||""===S[0]||S[0]&&"/"===S[0].charAt(0)||S.unshift(""),I&&"/"!==S.join("/").substr(-1)&&S.push("");var M,P=""===S[0]||S[0]&&"/"===S[0].charAt(0);C&&(i.hostname=i.host=P?"":S.length?S.shift():"",(M=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=M.shift(),i.host=i.hostname=M.shift()));return(w=w||i.host&&S.length)&&!P&&S.unshift(""),S.length?i.pathname=S.join("/"):(i.pathname=null,i.path=null),n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.auth=t.auth||i.auth,i.slashes=i.slashes||t.slashes,i.href=i.format(),i},s.prototype.parseHost=function(){var t=this.host,e=a.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(13);function n(t,e,i){return{dx:-e-t*r.SQUISH_2D,dy:-i-t*r.SQUISH_2D,xsb:e,ysb:i}}function s(t,e,i,n){return{dx:-e-t*r.SQUISH_3D,dy:-i-t*r.SQUISH_3D,dz:-n-t*r.SQUISH_3D,xsb:e,ysb:i,zsb:n}}function o(t,e,i,n,s){return{dx:-e-t*r.SQUISH_4D,dy:-i-t*r.SQUISH_4D,dz:-n-t*r.SQUISH_4D,dw:-s-t*r.SQUISH_4D,xsb:e,ysb:i,zsb:n,wsb:s}}function a(t){var e=new Uint32Array(1);return e[0]=1664525*t[0]+1013904223,e}e.makeNoise2D=function(t){for(var e=[],i=0;i<r.p2D.length;i+=4){for(var s=r.base2D[r.p2D[i]],o=null,h=null,l=0;l<s.length;l+=3)h=n(s[l],s[l+1],s[l+2]),null===o?e[i/4]=h:o.next=h,o=h;h.next=n(r.p2D[i+1],r.p2D[i+2],r.p2D[i+3])}var u=[];for(i=0;i<r.lookupPairs2D.length;i+=2)u[r.lookupPairs2D[i]]=e[r.lookupPairs2D[i+1]];var c=new Uint8Array(256),d=new Uint8Array(256),p=new Uint8Array(256);for(i=0;i<256;i++)p[i]=i;var f=new Uint32Array(1);for(f[0]=t,f=a(a(a(f))),i=255;i>=0;i--){f=a(f);var m=new Uint32Array(1);m[0]=(f[0]+31)%(i+1),m[0]<0&&(m[0]+=i+1),c[i]=p[m[0]],d[i]=14&c[i],p[m[0]]=p[i]}return function(t,e){for(var i=(t+e)*r.STRETCH_2D,n=t+i,s=e+i,o=Math.floor(n),a=Math.floor(s),h=(o+a)*r.SQUISH_2D,l=t-(o+h),p=e-(a+h),f=n-o,m=s-a,y=f+m,v=0,g=u[f-m+1|y<<1|y+m<<2|y+f<<4];void 0!==g;g=g.next){var x=l+g.dx,b=p+g.dy,w=2-x*x-b*b;if(w>0){var _=o+g.xsb,S=a+g.ysb,C=c[255&_],T=d[C+S&255];v+=w*w*w*w*(r.gradients2D[T]*x+r.gradients2D[T+1]*b)}}return v*r.NORM_2D}},e.makeNoise3D=function(t){for(var e=[],i=0;i<r.p3D.length;i+=9){for(var n=r.base3D[r.p3D[i]],o=null,h=null,l=0;l<n.length;l+=4)h=s(n[l],n[l+1],n[l+2],n[l+3]),null===o?e[i/9]=h:o.next=h,o=h;h.next=s(r.p3D[i+1],r.p3D[i+2],r.p3D[i+3],r.p3D[i+4]),h.next.next=s(r.p3D[i+5],r.p3D[i+6],r.p3D[i+7],r.p3D[i+8])}var u=[];for(i=0;i<r.lookupPairs3D.length;i+=2)u[r.lookupPairs3D[i]]=e[r.lookupPairs3D[i+1]];var c=new Uint8Array(256),d=new Uint8Array(256),p=new Uint8Array(256);for(i=0;i<256;i++)p[i]=i;var f=new Uint32Array(1);for(f[0]=t,f=a(a(a(f))),i=255;i>=0;i--){f=a(f);var m=new Uint32Array(1);m[0]=(f[0]+31)%(i+1),m[0]<0&&(m[0]+=i+1),c[i]=p[m[0]],d[i]=c[i]%24*3,p[m[0]]=p[i]}return function(t,e,i){for(var n=(t+e+i)*r.STRETCH_3D,s=t+n,o=e+n,a=i+n,h=Math.floor(s),l=Math.floor(o),p=Math.floor(a),f=(h+l+p)*r.SQUISH_3D,m=t-(h+f),y=e-(l+f),v=i-(p+f),g=s-h,x=o-l,b=a-p,w=g+x+b,_=0,S=u[x-b+1|g-x+1<<1|g-b+1<<2|w<<3|w+b<<5|w+x<<7|w+g<<9];void 0!==S;S=S.next){var C=m+S.dx,T=y+S.dy,I=v+S.dz,E=2-C*C-T*T-I*I;if(E>0){var A=h+S.xsb,M=l+S.ysb,P=p+S.zsb,k=c[255&A],B=c[k+M&255],O=d[B+P&255];_+=E*E*E*E*(r.gradients3D[O]*C+r.gradients3D[O+1]*T+r.gradients3D[O+2]*I)}}return _*r.NORM_3D}},e.makeNoise4D=function(t){for(var e=[],i=0;i<r.p4D.length;i+=16){for(var n=r.base4D[r.p4D[i]],s=null,h=null,l=0;l<n.length;l+=5)h=o(n[l],n[l+1],n[l+2],n[l+3],n[l+4]),null===s?e[i/16]=h:s.next=h,s=h;h.next=o(r.p4D[i+1],r.p4D[i+2],r.p4D[i+3],r.p4D[i+4],r.p4D[i+5]),h.next.next=o(r.p4D[i+6],r.p4D[i+7],r.p4D[i+8],r.p4D[i+9],r.p4D[i+10]),h.next.next.next=o(r.p4D[i+11],r.p4D[i+12],r.p4D[i+13],r.p4D[i+14],r.p4D[i+15])}var u=[];for(i=0;i<r.lookupPairs4D.length;i+=2)u[r.lookupPairs4D[i]]=e[r.lookupPairs4D[i+1]];var c=new Uint8Array(256),d=new Uint8Array(256),p=new Uint8Array(256);for(i=0;i<256;i++)p[i]=i;var f=new Uint32Array(1);for(f[0]=t,f=a(a(a(f))),i=255;i>=0;i--){f=a(f);var m=new Uint32Array(1);m[0]=(f[0]+31)%(i+1),m[0]<0&&(m[0]+=i+1),c[i]=p[m[0]],d[i]=252&c[i],p[m[0]]=p[i]}return function(t,e,i,n){for(var s=(t+e+i+n)*r.STRETCH_4D,o=t+s,a=e+s,h=i+s,l=n+s,p=Math.floor(o),f=Math.floor(a),m=Math.floor(h),y=Math.floor(l),v=(p+f+m+y)*r.SQUISH_4D,g=t-(p+v),x=e-(f+v),b=i-(m+v),w=n-(y+v),_=o-p,S=a-f,C=h-m,T=l-y,I=_+S+C+T,E=0,A=u[C-T+1|S-C+1<<1|S-T+1<<2|_-S+1<<3|_-C+1<<4|_-T+1<<5|I<<6|I+T<<8|I+C<<11|I+S<<14|I+_<<17];void 0!==A;A=A.next){var M=g+A.dx,P=x+A.dy,k=b+A.dz,B=w+A.dw,O=2-M*M-P*P-k*k-B*B;if(O>0){var R=p+A.xsb,F=f+A.ysb,D=m+A.zsb,L=y+A.wsb,U=c[255&R],N=c[U+F&255],V=c[N+D&255],X=d[V+L&255];E+=O*O*O*O*(r.gradients4D[X]*M+r.gradients4D[X+1]*P+r.gradients4D[X+2]*k+r.gradients4D[X+3]*B)}}return E*r.NORM_4D}}},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";var r=Object.prototype.hasOwnProperty,n="~";function s(){}function o(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function a(t,e,i,r,s){if("function"!=typeof i)throw new TypeError("The listener must be a function");var a=new o(i,r||t,s),h=n?n+e:e;return t._events[h]?t._events[h].fn?t._events[h]=[t._events[h],a]:t._events[h].push(a):(t._events[h]=a,t._eventsCount++),t}function h(t,e){0==--t._eventsCount?t._events=new s:delete t._events[e]}function l(){this._events=new s,this._eventsCount=0}Object.create&&(s.prototype=Object.create(null),(new s).__proto__||(n=!1)),l.prototype.eventNames=function(){var t,e,i=[];if(0===this._eventsCount)return i;for(e in t=this._events)r.call(t,e)&&i.push(n?e.slice(1):e);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},l.prototype.listeners=function(t){var e=n?n+t:t,i=this._events[e];if(!i)return[];if(i.fn)return[i.fn];for(var r=0,s=i.length,o=new Array(s);r<s;r++)o[r]=i[r].fn;return o},l.prototype.listenerCount=function(t){var e=n?n+t:t,i=this._events[e];return i?i.fn?1:i.length:0},l.prototype.emit=function(t,e,i,r,s,o){var a=n?n+t:t;if(!this._events[a])return!1;var h,l,u=this._events[a],c=arguments.length;if(u.fn){switch(u.once&&this.removeListener(t,u.fn,void 0,!0),c){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,e),!0;case 3:return u.fn.call(u.context,e,i),!0;case 4:return u.fn.call(u.context,e,i,r),!0;case 5:return u.fn.call(u.context,e,i,r,s),!0;case 6:return u.fn.call(u.context,e,i,r,s,o),!0}for(l=1,h=new Array(c-1);l<c;l++)h[l-1]=arguments[l];u.fn.apply(u.context,h)}else{var d,p=u.length;for(l=0;l<p;l++)switch(u[l].once&&this.removeListener(t,u[l].fn,void 0,!0),c){case 1:u[l].fn.call(u[l].context);break;case 2:u[l].fn.call(u[l].context,e);break;case 3:u[l].fn.call(u[l].context,e,i);break;case 4:u[l].fn.call(u[l].context,e,i,r);break;default:if(!h)for(d=1,h=new Array(c-1);d<c;d++)h[d-1]=arguments[d];u[l].fn.apply(u[l].context,h)}}return!0},l.prototype.on=function(t,e,i){return a(this,t,e,i,!1)},l.prototype.once=function(t,e,i){return a(this,t,e,i,!0)},l.prototype.removeListener=function(t,e,i,r){var s=n?n+t:t;if(!this._events[s])return this;if(!e)return h(this,s),this;var o=this._events[s];if(o.fn)o.fn!==e||r&&!o.once||i&&o.context!==i||h(this,s);else{for(var a=0,l=[],u=o.length;a<u;a++)(o[a].fn!==e||r&&!o[a].once||i&&o[a].context!==i)&&l.push(o[a]);l.length?this._events[s]=1===l.length?l[0]:l:h(this,s)}return this},l.prototype.removeAllListeners=function(t){var e;return t?(e=n?n+t:t,this._events[e]&&h(this,e)):(this._events=new s,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prefixed=n,l.EventEmitter=l,t.exports=l},function(t,e,i){"use strict";function r(t,e,i){i=i||2;var r,a,h,l,u,p,f,y=e&&e.length,v=y?e[0]*i:t.length,g=n(t,0,v,i,!0),x=[];if(!g||g.next===g.prev)return x;if(y&&(g=function(t,e,i,r){var o,a,h,l,u,p=[];for(o=0,a=e.length;o<a;o++)h=e[o]*r,l=o<a-1?e[o+1]*r:t.length,(u=n(t,h,l,r,!1))===u.next&&(u.steiner=!0),p.push(m(u));for(p.sort(c),o=0;o<p.length;o++)d(p[o],i),i=s(i,i.next);return i}(t,e,g,i)),t.length>80*i){r=h=t[0],a=l=t[1];for(var b=i;b<v;b+=i)(u=t[b])<r&&(r=u),(p=t[b+1])<a&&(a=p),u>h&&(h=u),p>l&&(l=p);f=0!==(f=Math.max(h-r,l-a))?1/f:0}return o(g,x,i,r,a,f),x}function n(t,e,i,r,n){var s,o;if(n===A(t,e,i,r)>0)for(s=e;s<i;s+=r)o=T(s,t[s],t[s+1],o);else for(s=i-r;s>=e;s-=r)o=T(s,t[s],t[s+1],o);return o&&x(o,o.next)&&(I(o),o=o.next),o}function s(t,e){if(!t)return t;e||(e=t);var i,r=t;do{if(i=!1,r.steiner||!x(r,r.next)&&0!==g(r.prev,r,r.next))r=r.next;else{if(I(r),(r=e=r.prev)===r.next)break;i=!0}}while(i||r!==e);return e}function o(t,e,i,r,n,c,d){if(t){!d&&c&&function(t,e,i,r){var n=t;do{null===n.z&&(n.z=f(n.x,n.y,e,i,r)),n.prevZ=n.prev,n.nextZ=n.next,n=n.next}while(n!==t);n.prevZ.nextZ=null,n.prevZ=null,function(t){var e,i,r,n,s,o,a,h,l=1;do{for(i=t,t=null,s=null,o=0;i;){for(o++,r=i,a=0,e=0;e<l&&(a++,r=r.nextZ);e++);for(h=l;a>0||h>0&&r;)0!==a&&(0===h||!r||i.z<=r.z)?(n=i,i=i.nextZ,a--):(n=r,r=r.nextZ,h--),s?s.nextZ=n:t=n,n.prevZ=s,s=n;i=r}s.nextZ=null,l*=2}while(o>1)}(n)}(t,r,n,c);for(var p,m,y=t;t.prev!==t.next;)if(p=t.prev,m=t.next,c?h(t,r,n,c):a(t))e.push(p.i/i),e.push(t.i/i),e.push(m.i/i),I(t),t=m.next,y=m.next;else if((t=m)===y){d?1===d?o(t=l(s(t),e,i),e,i,r,n,c,2):2===d&&u(t,e,i,r,n,c):o(s(t),e,i,r,n,c,1);break}}}function a(t){var e=t.prev,i=t,r=t.next;if(g(e,i,r)>=0)return!1;for(var n=t.next.next;n!==t.prev;){if(y(e.x,e.y,i.x,i.y,r.x,r.y,n.x,n.y)&&g(n.prev,n,n.next)>=0)return!1;n=n.next}return!0}function h(t,e,i,r){var n=t.prev,s=t,o=t.next;if(g(n,s,o)>=0)return!1;for(var a=n.x<s.x?n.x<o.x?n.x:o.x:s.x<o.x?s.x:o.x,h=n.y<s.y?n.y<o.y?n.y:o.y:s.y<o.y?s.y:o.y,l=n.x>s.x?n.x>o.x?n.x:o.x:s.x>o.x?s.x:o.x,u=n.y>s.y?n.y>o.y?n.y:o.y:s.y>o.y?s.y:o.y,c=f(a,h,e,i,r),d=f(l,u,e,i,r),p=t.prevZ,m=t.nextZ;p&&p.z>=c&&m&&m.z<=d;){if(p!==t.prev&&p!==t.next&&y(n.x,n.y,s.x,s.y,o.x,o.y,p.x,p.y)&&g(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,m!==t.prev&&m!==t.next&&y(n.x,n.y,s.x,s.y,o.x,o.y,m.x,m.y)&&g(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;p&&p.z>=c;){if(p!==t.prev&&p!==t.next&&y(n.x,n.y,s.x,s.y,o.x,o.y,p.x,p.y)&&g(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;m&&m.z<=d;){if(m!==t.prev&&m!==t.next&&y(n.x,n.y,s.x,s.y,o.x,o.y,m.x,m.y)&&g(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function l(t,e,i){var r=t;do{var n=r.prev,o=r.next.next;!x(n,o)&&b(n,r,r.next,o)&&S(n,o)&&S(o,n)&&(e.push(n.i/i),e.push(r.i/i),e.push(o.i/i),I(r),I(r.next),r=t=o),r=r.next}while(r!==t);return s(r)}function u(t,e,i,r,n,a){var h=t;do{for(var l=h.next.next;l!==h.prev;){if(h.i!==l.i&&v(h,l)){var u=C(h,l);return h=s(h,h.next),u=s(u,u.next),o(h,e,i,r,n,a),void o(u,e,i,r,n,a)}l=l.next}h=h.next}while(h!==t)}function c(t,e){return t.x-e.x}function d(t,e){if(e=function(t,e){var i,r=e,n=t.x,s=t.y,o=-1/0;do{if(s<=r.y&&s>=r.next.y&&r.next.y!==r.y){var a=r.x+(s-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(a<=n&&a>o){if(o=a,a===n){if(s===r.y)return r;if(s===r.next.y)return r.next}i=r.x<r.next.x?r:r.next}}r=r.next}while(r!==e);if(!i)return null;if(n===o)return i;var h,l=i,u=i.x,c=i.y,d=1/0;r=i;do{n>=r.x&&r.x>=u&&n!==r.x&&y(s<c?n:o,s,u,c,s<c?o:n,s,r.x,r.y)&&(h=Math.abs(s-r.y)/(n-r.x),S(r,t)&&(h<d||h===d&&(r.x>i.x||r.x===i.x&&p(i,r)))&&(i=r,d=h)),r=r.next}while(r!==l);return i}(t,e)){var i=C(e,t);s(i,i.next)}}function p(t,e){return g(t.prev,t,e.prev)<0&&g(e.next,t,t.next)<0}function f(t,e,i,r,n){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*n)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*n)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function m(t){var e=t,i=t;do{(e.x<i.x||e.x===i.x&&e.y<i.y)&&(i=e),e=e.next}while(e!==t);return i}function y(t,e,i,r,n,s,o,a){return(n-o)*(e-a)-(t-o)*(s-a)>=0&&(t-o)*(r-a)-(i-o)*(e-a)>=0&&(i-o)*(s-a)-(n-o)*(r-a)>=0}function v(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&b(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&(S(t,e)&&S(e,t)&&function(t,e){var i=t,r=!1,n=(t.x+e.x)/2,s=(t.y+e.y)/2;do{i.y>s!=i.next.y>s&&i.next.y!==i.y&&n<(i.next.x-i.x)*(s-i.y)/(i.next.y-i.y)+i.x&&(r=!r),i=i.next}while(i!==t);return r}(t,e)&&(g(t.prev,t,e.prev)||g(t,e.prev,e))||x(t,e)&&g(t.prev,t,t.next)>0&&g(e.prev,e,e.next)>0)}function g(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function x(t,e){return t.x===e.x&&t.y===e.y}function b(t,e,i,r){var n=_(g(t,e,i)),s=_(g(t,e,r)),o=_(g(i,r,t)),a=_(g(i,r,e));return n!==s&&o!==a||(!(0!==n||!w(t,i,e))||(!(0!==s||!w(t,r,e))||(!(0!==o||!w(i,t,r))||!(0!==a||!w(i,e,r)))))}function w(t,e,i){return e.x<=Math.max(t.x,i.x)&&e.x>=Math.min(t.x,i.x)&&e.y<=Math.max(t.y,i.y)&&e.y>=Math.min(t.y,i.y)}function _(t){return t>0?1:t<0?-1:0}function S(t,e){return g(t.prev,t,t.next)<0?g(t,e,t.next)>=0&&g(t,t.prev,e)>=0:g(t,e,t.prev)<0||g(t,t.next,e)<0}function C(t,e){var i=new E(t.i,t.x,t.y),r=new E(e.i,e.x,e.y),n=t.next,s=e.prev;return t.next=e,e.prev=t,i.next=n,n.prev=i,r.next=i,i.prev=r,s.next=r,r.prev=s,r}function T(t,e,i,r){var n=new E(t,e,i);return r?(n.next=r.next,n.prev=r,r.next.prev=n,r.next=n):(n.prev=n,n.next=n),n}function I(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function E(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function A(t,e,i,r){for(var n=0,s=e,o=i-r;s<i;s+=r)n+=(t[o]-t[s])*(t[s+1]+t[o+1]),o=s;return n}t.exports=r,t.exports.default=r,r.deviation=function(t,e,i,r){var n=e&&e.length,s=n?e[0]*i:t.length,o=Math.abs(A(t,0,s,i));if(n)for(var a=0,h=e.length;a<h;a++){var l=e[a]*i,u=a<h-1?e[a+1]*i:t.length;o-=Math.abs(A(t,l,u,i))}var c=0;for(a=0;a<r.length;a+=3){var d=r[a]*i,p=r[a+1]*i,f=r[a+2]*i;c+=Math.abs((t[d]-t[f])*(t[p+1]-t[d+1])-(t[d]-t[p])*(t[f+1]-t[d+1]))}return 0===o&&0===c?0:Math.abs((c-o)/o)},r.flatten=function(t){for(var e=t[0][0].length,i={vertices:[],holes:[],dimensions:e},r=0,n=0;n<t.length;n++){for(var s=0;s<t[n].length;s++)for(var o=0;o<e;o++)i.vertices.push(t[n][s][o]);n>0&&(r+=t[n-1].length,i.holes.push(r))}return i}},function(t,e,i){(function(t,r){var n;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(s){e&&e.nodeType,t&&t.nodeType;var o="object"==typeof r&&r;o.global!==o&&o.window!==o&&o.self;var a,h=2147483647,l=/^xn--/,u=/[^\x20-\x7E]/,c=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function m(t){throw new RangeError(d[t])}function y(t,e){for(var i=t.length,r=[];i--;)r[i]=e(t[i]);return r}function v(t,e){var i=t.split("@"),r="";return i.length>1&&(r=i[0]+"@",t=i[1]),r+y((t=t.replace(c,".")).split("."),e).join(".")}function g(t){for(var e,i,r=[],n=0,s=t.length;n<s;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<s?56320==(64512&(i=t.charCodeAt(n++)))?r.push(((1023&e)<<10)+(1023&i)+65536):(r.push(e),n--):r.push(e);return r}function x(t){return y(t,(function(t){var e="";return t>65535&&(e+=f((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=f(t)})).join("")}function b(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function w(t,e,i){var r=0;for(t=i?p(t/700):t>>1,t+=p(t/e);t>455;r+=36)t=p(t/35);return p(r+36*t/(t+38))}function _(t){var e,i,r,n,s,o,a,l,u,c,d,f=[],y=t.length,v=0,g=128,b=72;for((i=t.lastIndexOf("-"))<0&&(i=0),r=0;r<i;++r)t.charCodeAt(r)>=128&&m("not-basic"),f.push(t.charCodeAt(r));for(n=i>0?i+1:0;n<y;){for(s=v,o=1,a=36;n>=y&&m("invalid-input"),((l=(d=t.charCodeAt(n++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:36)>=36||l>p((h-v)/o))&&m("overflow"),v+=l*o,!(l<(u=a<=b?1:a>=b+26?26:a-b));a+=36)o>p(h/(c=36-u))&&m("overflow"),o*=c;b=w(v-s,e=f.length+1,0==s),p(v/e)>h-g&&m("overflow"),g+=p(v/e),v%=e,f.splice(v++,0,g)}return x(f)}function S(t){var e,i,r,n,s,o,a,l,u,c,d,y,v,x,_,S=[];for(y=(t=g(t)).length,e=128,i=0,s=72,o=0;o<y;++o)(d=t[o])<128&&S.push(f(d));for(r=n=S.length,n&&S.push("-");r<y;){for(a=h,o=0;o<y;++o)(d=t[o])>=e&&d<a&&(a=d);for(a-e>p((h-i)/(v=r+1))&&m("overflow"),i+=(a-e)*v,e=a,o=0;o<y;++o)if((d=t[o])<e&&++i>h&&m("overflow"),d==e){for(l=i,u=36;!(l<(c=u<=s?1:u>=s+26?26:u-s));u+=36)_=l-c,x=36-c,S.push(f(b(c+_%x,0))),l=p(_/x);S.push(f(b(l,0))),s=w(i,v,r==n),i=0,++r}++i,++e}return S.join("")}a={version:"1.4.1",ucs2:{decode:g,encode:x},decode:_,encode:S,toASCII:function(t){return v(t,(function(t){return u.test(t)?"xn--"+S(t):t}))},toUnicode:function(t){return v(t,(function(t){return l.test(t)?_(t.slice(4).toLowerCase()):t}))}},void 0===(n=function(){return a}.call(e,i,e,t))||(t.exports=n)}()}).call(this,i(8)(t),i(4))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,i){"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},function(t,e,i){"use strict";e.decode=e.parse=i(11),e.encode=e.stringify=i(12)},function(t,e,i){"use strict";function r(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,i,s){e=e||"&",i=i||"=";var o={};if("string"!=typeof t||0===t.length)return o;var a=/\+/g;t=t.split(e);var h=1e3;s&&"number"==typeof s.maxKeys&&(h=s.maxKeys);var l=t.length;h>0&&l>h&&(l=h);for(var u=0;u<l;++u){var c,d,p,f,m=t[u].replace(a,"%20"),y=m.indexOf(i);y>=0?(c=m.substr(0,y),d=m.substr(y+1)):(c=m,d=""),p=decodeURIComponent(c),f=decodeURIComponent(d),r(o,p)?n(o[p])?o[p].push(f):o[p]=[o[p],f]:o[p]=f}return o};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,i){"use strict";var r=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,i,a){return e=e||"&",i=i||"=",null===t&&(t=void 0),"object"==typeof t?s(o(t),(function(o){var a=encodeURIComponent(r(o))+i;return n(t[o])?s(t[o],(function(t){return a+encodeURIComponent(r(t))})).join(e):a+encodeURIComponent(r(t[o]))})).join(e):a?encodeURIComponent(r(a))+i+encodeURIComponent(r(t)):""};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function s(t,e){if(t.map)return t.map(e);for(var i=[],r=0;r<t.length;r++)i.push(e(t[r],r));return i}var o=Object.keys||function(t){var e=[];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.push(i);return e}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NORM_2D=1/47,e.NORM_3D=1/103,e.NORM_4D=1/30,e.SQUISH_2D=(Math.sqrt(3)-1)/2,e.SQUISH_3D=(Math.sqrt(4)-1)/3,e.SQUISH_4D=(Math.sqrt(5)-1)/4,e.STRETCH_2D=(1/Math.sqrt(3)-1)/2,e.STRETCH_3D=(1/Math.sqrt(4)-1)/3,e.STRETCH_4D=(1/Math.sqrt(5)-1)/4,e.base2D=[[1,1,0,1,0,1,0,0,0],[1,1,0,1,0,1,2,1,1]],e.base3D=[[0,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1],[2,1,1,0,2,1,0,1,2,0,1,1,3,1,1,1],[1,1,0,0,1,0,1,0,1,0,0,1,2,1,1,0,2,1,0,1,2,0,1,1]],e.base4D=[[0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1],[3,1,1,1,0,3,1,1,0,1,3,1,0,1,1,3,0,1,1,1,4,1,1,1,1],[1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,2,1,1,0,0,2,1,0,1,0,2,1,0,0,1,2,0,1,1,0,2,0,1,0,1,2,0,0,1,1],[3,1,1,1,0,3,1,1,0,1,3,1,0,1,1,3,0,1,1,1,2,1,1,0,0,2,1,0,1,0,2,1,0,0,1,2,0,1,1,0,2,0,1,0,1,2,0,0,1,1]],e.gradients2D=[5,2,2,5,-5,2,-2,5,5,-2,2,-5,-5,-2,-2,-5],e.gradients3D=[-11,4,4,-4,11,4,-4,4,11,11,4,4,4,11,4,4,4,11,-11,-4,4,-4,-11,4,-4,-4,11,11,-4,4,4,-11,4,4,-4,11,-11,4,-4,-4,11,-4,-4,4,-11,11,4,-4,4,11,-4,4,4,-11,-11,-4,-4,-4,-11,-4,-4,-4,-11,11,-4,-4,4,-11,-4,4,-4,-11],e.gradients4D=[3,1,1,1,1,3,1,1,1,1,3,1,1,1,1,3,-3,1,1,1,-1,3,1,1,-1,1,3,1,-1,1,1,3,3,-1,1,1,1,-3,1,1,1,-1,3,1,1,-1,1,3,-3,-1,1,1,-1,-3,1,1,-1,-1,3,1,-1,-1,1,3,3,1,-1,1,1,3,-1,1,1,1,-3,1,1,1,-1,3,-3,1,-1,1,-1,3,-1,1,-1,1,-3,1,-1,1,-1,3,3,-1,-1,1,1,-3,-1,1,1,-1,-3,1,1,-1,-1,3,-3,-1,-1,1,-1,-3,-1,1,-1,-1,-3,1,-1,-1,-1,3,3,1,1,-1,1,3,1,-1,1,1,3,-1,1,1,1,-3,-3,1,1,-1,-1,3,1,-1,-1,1,3,-1,-1,1,1,-3,3,-1,1,-1,1,-3,1,-1,1,-1,3,-1,1,-1,1,-3,-3,-1,1,-1,-1,-3,1,-1,-1,-1,3,-1,-1,-1,1,-3,3,1,-1,-1,1,3,-1,-1,1,1,-3,-1,1,1,-1,-3,-3,1,-1,-1,-1,3,-1,-1,-1,1,-3,-1,-1,1,-1,-3,3,-1,-1,-1,1,-3,-1,-1,1,-1,-3,-1,1,-1,-1,-3,-3,-1,-1,-1,-1,-3,-1,-1,-1,-1,-3,-1,-1,-1,-1,-3],e.lookupPairs2D=[0,1,1,0,4,1,17,0,20,2,21,2,22,5,23,5,26,4,39,3,42,4,43,3],e.lookupPairs3D=[0,2,1,1,2,2,5,1,6,0,7,0,32,2,34,2,129,1,133,1,160,5,161,5,518,0,519,0,546,4,550,4,645,3,647,3,672,5,673,5,674,4,677,3,678,4,679,3,680,13,681,13,682,12,685,14,686,12,687,14,712,20,714,18,809,21,813,23,840,20,841,21,1198,19,1199,22,1226,18,1230,19,1325,23,1327,22,1352,15,1353,17,1354,15,1357,17,1358,16,1359,16,1360,11,1361,10,1362,11,1365,10,1366,9,1367,9,1392,11,1394,11,1489,10,1493,10,1520,8,1521,8,1878,9,1879,9,1906,7,1910,7,2005,6,2007,6,2032,8,2033,8,2034,7,2037,6,2038,7,2039,6],e.lookupPairs4D=[0,3,1,2,2,3,5,2,6,1,7,1,8,3,9,2,10,3,13,2,16,3,18,3,22,1,23,1,24,3,26,3,33,2,37,2,38,1,39,1,41,2,45,2,54,1,55,1,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,256,3,258,3,264,3,266,3,272,3,274,3,280,3,282,3,2049,2,2053,2,2057,2,2061,2,2081,2,2085,2,2089,2,2093,2,2304,9,2305,9,2312,9,2313,9,16390,1,16391,1,16406,1,16407,1,16422,1,16423,1,16438,1,16439,1,16642,8,16646,8,16658,8,16662,8,18437,6,18439,6,18469,6,18471,6,18688,9,18689,9,18690,8,18693,6,18694,8,18695,6,18696,9,18697,9,18706,8,18710,8,18725,6,18727,6,131128,0,131129,0,131130,0,131131,0,131132,0,131133,0,131134,0,131135,0,131352,7,131354,7,131384,7,131386,7,133161,5,133165,5,133177,5,133181,5,133376,9,133377,9,133384,9,133385,9,133400,7,133402,7,133417,5,133421,5,133432,7,133433,5,133434,7,133437,5,147510,4,147511,4,147518,4,147519,4,147714,8,147718,8,147730,8,147734,8,147736,7,147738,7,147766,4,147767,4,147768,7,147770,7,147774,4,147775,4,149509,6,149511,6,149541,6,149543,6,149545,5,149549,5,149558,4,149559,4,149561,5,149565,5,149566,4,149567,4,149760,9,149761,9,149762,8,149765,6,149766,8,149767,6,149768,9,149769,9,149778,8,149782,8,149784,7,149786,7,149797,6,149799,6,149801,5,149805,5,149814,4,149815,4,149816,7,149817,5,149818,7,149821,5,149822,4,149823,4,149824,37,149825,37,149826,36,149829,34,149830,36,149831,34,149832,37,149833,37,149842,36,149846,36,149848,35,149850,35,149861,34,149863,34,149865,33,149869,33,149878,32,149879,32,149880,35,149881,33,149882,35,149885,33,149886,32,149887,32,150080,49,150082,48,150088,49,150098,48,150104,47,150106,47,151873,46,151877,45,151881,46,151909,45,151913,44,151917,44,152128,49,152129,46,152136,49,152137,46,166214,43,166215,42,166230,43,166247,42,166262,41,166263,41,166466,48,166470,43,166482,48,166486,43,168261,45,168263,42,168293,45,168295,42,168512,31,168513,28,168514,31,168517,28,168518,25,168519,25,280952,40,280953,39,280954,40,280957,39,280958,38,280959,38,281176,47,281178,47,281208,40,281210,40,282985,44,282989,44,283001,39,283005,39,283208,30,283209,27,283224,30,283241,27,283256,22,283257,22,297334,41,297335,41,297342,38,297343,38,297554,29,297558,24,297562,29,297590,24,297594,21,297598,21,299365,26,299367,23,299373,26,299383,23,299389,20,299391,20,299584,31,299585,28,299586,31,299589,28,299590,25,299591,25,299592,30,299593,27,299602,29,299606,24,299608,30,299610,29,299621,26,299623,23,299625,27,299629,26,299638,24,299639,23,299640,22,299641,22,299642,21,299645,20,299646,21,299647,20,299648,61,299649,60,299650,61,299653,60,299654,59,299655,59,299656,58,299657,57,299666,55,299670,54,299672,58,299674,55,299685,52,299687,51,299689,57,299693,52,299702,54,299703,51,299704,56,299705,56,299706,53,299709,50,299710,53,299711,50,299904,61,299906,61,299912,58,299922,55,299928,58,299930,55,301697,60,301701,60,301705,57,301733,52,301737,57,301741,52,301952,79,301953,79,301960,76,301961,76,316038,59,316039,59,316054,54,316071,51,316086,54,316087,51,316290,78,316294,78,316306,73,316310,73,318085,77,318087,77,318117,70,318119,70,318336,79,318337,79,318338,78,318341,77,318342,78,318343,77,430776,56,430777,56,430778,53,430781,50,430782,53,430783,50,431e3,75,431002,72,431032,75,431034,72,432809,74,432813,69,432825,74,432829,69,433032,76,433033,76,433048,75,433065,74,433080,75,433081,74,447158,71,447159,68,447166,71,447167,68,447378,73,447382,73,447386,72,447414,71,447418,72,447422,71,449189,70,449191,70,449197,69,449207,68,449213,69,449215,68,449408,67,449409,67,449410,66,449413,64,449414,66,449415,64,449416,67,449417,67,449426,66,449430,66,449432,65,449434,65,449445,64,449447,64,449449,63,449453,63,449462,62,449463,62,449464,65,449465,63,449466,65,449469,63,449470,62,449471,62,449472,19,449473,19,449474,18,449477,16,449478,18,449479,16,449480,19,449481,19,449490,18,449494,18,449496,17,449498,17,449509,16,449511,16,449513,15,449517,15,449526,14,449527,14,449528,17,449529,15,449530,17,449533,15,449534,14,449535,14,449728,19,449729,19,449730,18,449734,18,449736,19,449737,19,449746,18,449750,18,449752,17,449754,17,449784,17,449786,17,451520,19,451521,19,451525,16,451527,16,451528,19,451529,19,451557,16,451559,16,451561,15,451565,15,451577,15,451581,15,451776,19,451777,19,451784,19,451785,19,465858,18,465861,16,465862,18,465863,16,465874,18,465878,18,465893,16,465895,16,465910,14,465911,14,465918,14,465919,14,466114,18,466118,18,466130,18,466134,18,467909,16,467911,16,467941,16,467943,16,468160,13,468161,13,468162,13,468163,13,468164,13,468165,13,468166,13,468167,13,580568,17,580570,17,580585,15,580589,15,580598,14,580599,14,580600,17,580601,15,580602,17,580605,15,580606,14,580607,14,580824,17,580826,17,580856,17,580858,17,582633,15,582637,15,582649,15,582653,15,582856,12,582857,12,582872,12,582873,12,582888,12,582889,12,582904,12,582905,12,596982,14,596983,14,596990,14,596991,14,597202,11,597206,11,597210,11,597214,11,597234,11,597238,11,597242,11,597246,11,599013,10,599015,10,599021,10,599023,10,599029,10,599031,10,599037,10,599039,10,599232,13,599233,13,599234,13,599235,13,599236,13,599237,13,599238,13,599239,13,599240,12,599241,12,599250,11,599254,11,599256,12,599257,12,599258,11,599262,11,599269,10,599271,10,599272,12,599273,12,599277,10,599279,10,599282,11,599285,10,599286,11,599287,10,599288,12,599289,12,599290,11,599293,10,599294,11,599295,10],e.p2D=[0,0,1,-1,0,0,-1,1,0,2,1,1,1,2,2,0,1,2,0,2,1,0,0,0],e.p3D=[0,0,1,-1,0,0,1,0,-1,0,0,-1,1,0,0,0,1,-1,0,0,-1,0,1,0,0,-1,1,0,2,1,1,0,1,1,1,-1,0,2,1,0,1,1,1,-1,1,0,2,0,1,1,1,-1,1,1,1,3,2,1,0,3,1,2,0,1,3,2,0,1,3,1,0,2,1,3,0,2,1,3,0,1,2,1,1,1,0,0,2,2,0,0,1,1,0,1,0,2,0,2,0,1,1,0,0,1,2,0,0,2,2,0,0,0,0,1,1,-1,1,2,0,0,0,0,1,-1,1,1,2,0,0,0,0,1,1,1,-1,2,3,1,1,1,2,0,0,2,2,3,1,1,1,2,2,0,0,2,3,1,1,1,2,0,2,0,2,1,1,-1,1,2,0,0,2,2,1,1,-1,1,2,2,0,0,2,1,-1,1,1,2,0,0,2,2,1,-1,1,1,2,0,2,0,2,1,1,1,-1,2,2,0,0,2,1,1,1,-1,2,0,2,0],e.p4D=[0,0,1,-1,0,0,0,1,0,-1,0,0,1,0,0,-1,0,0,-1,1,0,0,0,0,1,-1,0,0,0,1,0,-1,0,0,-1,0,1,0,0,0,-1,1,0,0,0,0,1,-1,0,0,-1,0,0,1,0,0,-1,0,1,0,0,0,-1,1,0,2,1,1,0,0,1,1,1,-1,0,1,1,1,0,-1,0,2,1,0,1,0,1,1,-1,1,0,1,1,0,1,-1,0,2,0,1,1,0,1,-1,1,1,0,1,0,1,1,-1,0,2,1,0,0,1,1,1,-1,0,1,1,1,0,-1,1,0,2,0,1,0,1,1,-1,1,0,1,1,0,1,-1,1,0,2,0,0,1,1,1,-1,0,1,1,1,0,-1,1,1,1,4,2,1,1,0,4,1,2,1,0,4,1,1,2,0,1,4,2,1,0,1,4,1,2,0,1,4,1,1,0,2,1,4,2,0,1,1,4,1,0,2,1,4,1,0,1,2,1,4,0,2,1,1,4,0,1,2,1,4,0,1,1,2,1,2,1,1,0,0,3,2,1,0,0,3,1,2,0,0,1,2,1,0,1,0,3,2,0,1,0,3,1,0,2,0,1,2,0,1,1,0,3,0,2,1,0,3,0,1,2,0,1,2,1,0,0,1,3,2,0,0,1,3,1,0,0,2,1,2,0,1,0,1,3,0,2,0,1,3,0,1,0,2,1,2,0,0,1,1,3,0,0,2,1,3,0,0,1,2,2,3,1,1,1,0,2,1,1,1,-1,2,2,0,0,0,2,3,1,1,0,1,2,1,1,-1,1,2,2,0,0,0,2,3,1,0,1,1,2,1,-1,1,1,2,2,0,0,0,2,3,1,1,1,0,2,1,1,1,-1,2,0,2,0,0,2,3,1,1,0,1,2,1,1,-1,1,2,0,2,0,0,2,3,0,1,1,1,2,-1,1,1,1,2,0,2,0,0,2,3,1,1,1,0,2,1,1,1,-1,2,0,0,2,0,2,3,1,0,1,1,2,1,-1,1,1,2,0,0,2,0,2,3,0,1,1,1,2,-1,1,1,1,2,0,0,2,0,2,3,1,1,0,1,2,1,1,-1,1,2,0,0,0,2,2,3,1,0,1,1,2,1,-1,1,1,2,0,0,0,2,2,3,0,1,1,1,2,-1,1,1,1,2,0,0,0,2,2,1,1,1,-1,0,1,1,1,0,-1,0,0,0,0,0,2,1,1,-1,1,0,1,1,0,1,-1,0,0,0,0,0,2,1,-1,1,1,0,1,0,1,1,-1,0,0,0,0,0,2,1,1,-1,0,1,1,1,0,-1,1,0,0,0,0,0,2,1,-1,1,0,1,1,0,1,-1,1,0,0,0,0,0,2,1,-1,0,1,1,1,0,-1,1,1,0,0,0,0,0,2,1,1,1,-1,0,1,1,1,0,-1,2,2,0,0,0,2,1,1,-1,1,0,1,1,0,1,-1,2,2,0,0,0,2,1,1,-1,0,1,1,1,0,-1,1,2,2,0,0,0,2,1,1,1,-1,0,1,1,1,0,-1,2,0,2,0,0,2,1,-1,1,1,0,1,0,1,1,-1,2,0,2,0,0,2,1,-1,1,0,1,1,0,1,-1,1,2,0,2,0,0,2,1,1,-1,1,0,1,1,0,1,-1,2,0,0,2,0,2,1,-1,1,1,0,1,0,1,1,-1,2,0,0,2,0,2,1,-1,0,1,1,1,0,-1,1,1,2,0,0,2,0,2,1,1,-1,0,1,1,1,0,-1,1,2,0,0,0,2,2,1,-1,1,0,1,1,0,1,-1,1,2,0,0,0,2,2,1,-1,0,1,1,1,0,-1,1,1,2,0,0,0,2,3,1,1,0,0,0,2,2,0,0,0,2,1,1,1,-1,3,1,0,1,0,0,2,0,2,0,0,2,1,1,1,-1,3,1,0,0,1,0,2,0,0,2,0,2,1,1,1,-1,3,1,1,0,0,0,2,2,0,0,0,2,1,1,-1,1,3,1,0,1,0,0,2,0,2,0,0,2,1,1,-1,1,3,1,0,0,0,1,2,0,0,0,2,2,1,1,-1,1,3,1,1,0,0,0,2,2,0,0,0,2,1,-1,1,1,3,1,0,0,1,0,2,0,0,2,0,2,1,-1,1,1,3,1,0,0,0,1,2,0,0,0,2,2,1,-1,1,1,3,1,0,1,0,0,2,0,2,0,0,2,-1,1,1,1,3,1,0,0,1,0,2,0,0,2,0,2,-1,1,1,1,3,1,0,0,0,1,2,0,0,0,2,2,-1,1,1,1,3,3,2,1,0,0,3,1,2,0,0,4,1,1,1,1,3,3,2,0,1,0,3,1,0,2,0,4,1,1,1,1,3,3,0,2,1,0,3,0,1,2,0,4,1,1,1,1,3,3,2,0,0,1,3,1,0,0,2,4,1,1,1,1,3,3,0,2,0,1,3,0,1,0,2,4,1,1,1,1,3,3,0,0,2,1,3,0,0,1,2,4,1,1,1,1,3,3,2,1,0,0,3,1,2,0,0,2,1,1,1,-1,3,3,2,0,1,0,3,1,0,2,0,2,1,1,1,-1,3,3,0,2,1,0,3,0,1,2,0,2,1,1,1,-1,3,3,2,1,0,0,3,1,2,0,0,2,1,1,-1,1,3,3,2,0,0,1,3,1,0,0,2,2,1,1,-1,1,3,3,0,2,0,1,3,0,1,0,2,2,1,1,-1,1,3,3,2,0,1,0,3,1,0,2,0,2,1,-1,1,1,3,3,2,0,0,1,3,1,0,0,2,2,1,-1,1,1,3,3,0,0,2,1,3,0,0,1,2,2,1,-1,1,1,3,3,0,2,1,0,3,0,1,2,0,2,-1,1,1,1,3,3,0,2,0,1,3,0,1,0,2,2,-1,1,1,1,3,3,0,0,2,1,3,0,0,1,2,2,-1,1,1,1]},function(t,e,i){"use strict";i.r(e);let r=PIXI.loader,n=PIXI.loader.resources;var s=i(0),o=i.n(s),a=function(t){this.items=[],this._name=t,this._aliasCount=0},h={empty:{configurable:!0},name:{configurable:!0}};a.prototype.emit=function(t,e,i,r,n,s,o,a){if(arguments.length>8)throw new Error("max arguments reached");var h=this,l=h.name,u=h.items;this._aliasCount++;for(var c=0,d=u.length;c<d;c++)u[c][l](t,e,i,r,n,s,o,a);return u===this.items&&this._aliasCount--,this},a.prototype.ensureNonAliasedItems=function(){this._aliasCount>0&&this.items.length>1&&(this._aliasCount=0,this.items=this.items.slice(0))},a.prototype.add=function(t){return t[this._name]&&(this.ensureNonAliasedItems(),this.remove(t),this.items.push(t)),this},a.prototype.remove=function(t){var e=this.items.indexOf(t);return-1!==e&&(this.ensureNonAliasedItems(),this.items.splice(e,1)),this},a.prototype.contains=function(t){return-1!==this.items.indexOf(t)},a.prototype.removeAll=function(){return this.ensureNonAliasedItems(),this.items.length=0,this},a.prototype.destroy=function(){this.removeAll(),this.items=null,this._name=null},h.empty.get=function(){return 0===this.items.length},h.name.get=function(){return this._name},Object.defineProperties(a.prototype,h),a.prototype.dispatch=a.prototype.emit,a.prototype.run=a.prototype.emit;var l=i(1),u=i.n(l);var c={MIPMAP_TEXTURES:1,ANISOTROPIC_LEVEL:0,RESOLUTION:1,FILTER_RESOLUTION:1,SPRITE_MAX_TEXTURES:
/*!
 * @pixi/settings - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/settings is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
function(t){var e=!0;if(u.a.tablet||u.a.phone){if(e=!1,u.a.apple.device){var i=navigator.userAgent.match(/OS (\d+)_(\d+)?/);if(i)parseInt(i[1],10)>=11&&(e=!0)}if(u.a.android.device){var r=navigator.userAgent.match(/Android\s([0-9.]*)/);if(r)parseInt(r[1],10)>=7&&(e=!0)}}return e?t:4}(32),SPRITE_BATCH_SIZE:4096,RENDER_OPTIONS:{view:null,antialias:!1,forceFXAA:!1,autoDensity:!1,transparent:!1,backgroundColor:0,clearBeforeRender:!0,preserveDrawingBuffer:!1,width:800,height:600,legacy:!1},GC_MODE:0,GC_MAX_IDLE:3600,GC_MAX_CHECK_COUNT:600,WRAP_MODE:33071,SCALE_MODE:1,PRECISION_VERTEX:"highp",PRECISION_FRAGMENT:u.a.apple.device?"highp":"mediump",CAN_UPLOAD_SAME_BUFFER:!u.a.apple.device,CREATE_IMAGE_BITMAP:!1,ROUND_PIXELS:!1},d=i(5),p=i.n(d),f=(i(6),i(2)),m=i.n(f),y=0,v=1,g=2,x=0,b=1,w=0,_=1,S=2,C=3,T=4,I=5,E=6,A=7,M=8,P=9,k=10,B=11,O=12,R=13,F=14,D=15,L=16,U=17,N=18,V=19,X=20,j=21,z=22,G=23,H=24,W=25,Y=26,q=27,K=28,Z=4,Q=5,J=6408,$=6402,tt=3553,et=34067,it=35866,rt=34069,nt=5121,st=5123,ot=5126,at=36193,ht=1,lt=0,ut=33071,ct=1,dt=1,pt="mediump",ft="highp";
/*!
 * @pixi/utils - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/utils is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
c.RETINA_PREFIX=/@([0-9\.]+)x/,c.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT=!0;var mt,yt=!1;function vt(t,e){return(e=e||[])[0]=(t>>16&255)/255,e[1]=(t>>8&255)/255,e[2]=(255&t)/255,e}function gt(t){return(255*t[0]<<16)+(255*t[1]<<8)+(255*t[2]|0)}var xt=function(){for(var t=[],e=[],i=0;i<32;i++)t[i]=i,e[i]=i;t[U]=w,t[N]=_,t[V]=C,e[w]=U,e[_]=N,e[C]=V;var r=[];return r.push(e),r.push(t),r}();function bt(t,e,i){var r,n=t.length;if(!(e>=n||0===i)){var s=n-(i=e+i>n?n-e:i);for(r=e;r<s;++r)t[r]=t[r+i];t.length=s}}var wt=0;function _t(){return++wt}function St(t){return t+=0===t,--t,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,(t|=t>>>16)+1}function Ct(t){return!(t&t-1||!t)}function Tt(t){var e=(t>65535)<<4,i=((t>>>=e)>255)<<3;return e|=i,e|=i=((t>>>=i)>15)<<2,(e|=i=((t>>>=i)>3)<<1)|(t>>>=i)>>1}var It={},Et=Object.create(null),At=Object.create(null);var Mt=function(t,e,i){this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.resolution=i||c.RESOLUTION,this.resize(t,e)},Pt={width:{configurable:!0},height:{configurable:!0}};Mt.prototype.clear=function(){this.context.setTransform(1,0,0,1,0,0),this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},Mt.prototype.resize=function(t,e){this.canvas.width=t*this.resolution,this.canvas.height=e*this.resolution},Mt.prototype.destroy=function(){this.context=null,this.canvas=null},Pt.width.get=function(){return this.canvas.width},Pt.width.set=function(t){this.canvas.width=t},Pt.height.get=function(){return this.canvas.height},Pt.height.set=function(t){this.canvas.height=t},Object.defineProperties(Mt.prototype,Pt);var kt;function Bt(t,e){var i=c.RETINA_PREFIX.exec(t);return i?parseFloat(i[1]):void 0!==e?e:1}var Ot={};
/*!
 * @pixi/ticker - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/ticker is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
c.TARGET_FPMS=.06;var Rt=0,Ft=-25,Dt=function(t,e,i,r){void 0===e&&(e=null),void 0===i&&(i=0),void 0===r&&(r=!1),this.fn=t,this.context=e,this.priority=i,this.once=r,this.next=null,this.previous=null,this._destroyed=!1};Dt.prototype.match=function(t,e){return e=e||null,this.fn===t&&this.context===e},Dt.prototype.emit=function(t){this.fn&&(this.context?this.fn.call(this.context,t):this.fn(t));var e=this.next;return this.once&&this.destroy(!0),this._destroyed&&(this.next=null),e},Dt.prototype.connect=function(t){this.previous=t,t.next&&(t.next.previous=this),this.next=t.next,t.next=this},Dt.prototype.destroy=function(t){void 0===t&&(t=!1),this._destroyed=!0,this.fn=null,this.context=null,this.previous&&(this.previous.next=this.next),this.next&&(this.next.previous=this.previous);var e=this.next;return this.next=t?null:e,this.previous=null,e};var Lt=function(){var t=this;this._head=new Dt(null,null,1/0),this._requestId=null,this._maxElapsedMS=100,this._minElapsedMS=0,this.autoStart=!1,this.deltaTime=1,this.deltaMS=1/c.TARGET_FPMS,this.elapsedMS=1/c.TARGET_FPMS,this.lastTime=-1,this.speed=1,this.started=!1,this._protected=!1,this._lastFrame=-1,this._tick=function(e){t._requestId=null,t.started&&(t.update(e),t.started&&null===t._requestId&&t._head.next&&(t._requestId=requestAnimationFrame(t._tick)))}},Ut={FPS:{configurable:!0},minFPS:{configurable:!0},maxFPS:{configurable:!0}},Nt={shared:{configurable:!0},system:{configurable:!0}};Lt.prototype._requestIfNeeded=function(){null===this._requestId&&this._head.next&&(this.lastTime=performance.now(),this._lastFrame=this.lastTime,this._requestId=requestAnimationFrame(this._tick))},Lt.prototype._cancelIfNeeded=function(){null!==this._requestId&&(cancelAnimationFrame(this._requestId),this._requestId=null)},Lt.prototype._startIfPossible=function(){this.started?this._requestIfNeeded():this.autoStart&&this.start()},Lt.prototype.add=function(t,e,i){return void 0===i&&(i=Rt),this._addListener(new Dt(t,e,i))},Lt.prototype.addOnce=function(t,e,i){return void 0===i&&(i=Rt),this._addListener(new Dt(t,e,i,!0))},Lt.prototype._addListener=function(t){var e=this._head.next,i=this._head;if(e){for(;e;){if(t.priority>e.priority){t.connect(i);break}i=e,e=e.next}t.previous||t.connect(i)}else t.connect(i);return this._startIfPossible(),this},Lt.prototype.remove=function(t,e){for(var i=this._head.next;i;)i=i.match(t,e)?i.destroy():i.next;return this._head.next||this._cancelIfNeeded(),this},Lt.prototype.start=function(){this.started||(this.started=!0,this._requestIfNeeded())},Lt.prototype.stop=function(){this.started&&(this.started=!1,this._cancelIfNeeded())},Lt.prototype.destroy=function(){if(!this._protected){this.stop();for(var t=this._head.next;t;)t=t.destroy(!0);this._head.destroy(),this._head=null}},Lt.prototype.update=function(t){var e;if(void 0===t&&(t=performance.now()),t>this.lastTime){if((e=this.elapsedMS=t-this.lastTime)>this._maxElapsedMS&&(e=this._maxElapsedMS),e*=this.speed,this._minElapsedMS){var i=t-this._lastFrame|0;if(i<this._minElapsedMS)return;this._lastFrame=t-i%this._minElapsedMS}this.deltaMS=e,this.deltaTime=this.deltaMS*c.TARGET_FPMS;for(var r=this._head,n=r.next;n;)n=n.emit(this.deltaTime);r.next||this._cancelIfNeeded()}else this.deltaTime=this.deltaMS=this.elapsedMS=0;this.lastTime=t},Ut.FPS.get=function(){return 1e3/this.elapsedMS},Ut.minFPS.get=function(){return 1e3/this._maxElapsedMS},Ut.minFPS.set=function(t){var e=Math.min(this.maxFPS,t),i=Math.min(Math.max(0,e)/1e3,c.TARGET_FPMS);this._maxElapsedMS=1/i},Ut.maxFPS.get=function(){return this._minElapsedMS?Math.round(1e3/this._minElapsedMS):0},Ut.maxFPS.set=function(t){if(0===t)this._minElapsedMS=0;else{var e=Math.max(this.minFPS,t);this._minElapsedMS=1/(e/1e3)}},Nt.shared.get=function(){if(!Lt._shared){var t=Lt._shared=new Lt;t.autoStart=!0,t._protected=!0}return Lt._shared},Nt.system.get=function(){if(!Lt._system){var t=Lt._system=new Lt;t.autoStart=!0,t._protected=!0}return Lt._system},Object.defineProperties(Lt.prototype,Ut),Object.defineProperties(Lt,Nt);var Vt=function(){};Vt.init=function(t){var e=this;t=Object.assign({autoStart:!0,sharedTicker:!1},t),Object.defineProperty(this,"ticker",{set:function(t){this._ticker&&this._ticker.remove(this.render,this),this._ticker=t,t&&t.add(this.render,this,Ft)},get:function(){return this._ticker}}),this.stop=function(){e._ticker.stop()},this.start=function(){e._ticker.start()},this._ticker=null,this.ticker=t.sharedTicker?Lt.shared:new Lt,t.autoStart&&this.start()},Vt.destroy=function(){if(this._ticker){var t=this._ticker;this.ticker=null,t.destroy()}};
/*!
 * @pixi/math - v5.1.0
 * Compiled Fri, 19 Jul 2019 21:54:36 UTC
 *
 * @pixi/math is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var Xt=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e};Xt.prototype.clone=function(){return new Xt(this.x,this.y)},Xt.prototype.copyFrom=function(t){return this.set(t.x,t.y),this},Xt.prototype.copyTo=function(t){return t.set(this.x,this.y),t},Xt.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},Xt.prototype.set=function(t,e){this.x=t||0,this.y=e||(0!==e?this.x:0)};var jt=function(t,e,i,r){void 0===i&&(i=0),void 0===r&&(r=0),this._x=i,this._y=r,this.cb=t,this.scope=e},zt={x:{configurable:!0},y:{configurable:!0}};jt.prototype.clone=function(t,e){void 0===t&&(t=null),void 0===e&&(e=null);var i=t||this.cb,r=e||this.scope;return new jt(i,r,this._x,this._y)},jt.prototype.set=function(t,e){var i=t||0,r=e||(0!==e?i:0);this._x===i&&this._y===r||(this._x=i,this._y=r,this.cb.call(this.scope))},jt.prototype.copyFrom=function(t){return this._x===t.x&&this._y===t.y||(this._x=t.x,this._y=t.y,this.cb.call(this.scope)),this},jt.prototype.copyTo=function(t){return t.set(this._x,this._y),t},jt.prototype.equals=function(t){return t.x===this._x&&t.y===this._y},zt.x.get=function(){return this._x},zt.x.set=function(t){this._x!==t&&(this._x=t,this.cb.call(this.scope))},zt.y.get=function(){return this._y},zt.y.set=function(t){this._y!==t&&(this._y=t,this.cb.call(this.scope))},Object.defineProperties(jt.prototype,zt);var Gt=2*Math.PI,Ht=180/Math.PI,Wt=Math.PI/180,Yt=0,qt=1,Kt=2,Zt=3,Qt=4,Jt=function(t,e,i,r,n,s){void 0===t&&(t=1),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=1),void 0===n&&(n=0),void 0===s&&(s=0),this.a=t,this.b=e,this.c=i,this.d=r,this.tx=n,this.ty=s,this.array=null},$t={IDENTITY:{configurable:!0},TEMP_MATRIX:{configurable:!0}};Jt.prototype.fromArray=function(t){this.a=t[0],this.b=t[1],this.c=t[3],this.d=t[4],this.tx=t[2],this.ty=t[5]},Jt.prototype.set=function(t,e,i,r,n,s){return this.a=t,this.b=e,this.c=i,this.d=r,this.tx=n,this.ty=s,this},Jt.prototype.toArray=function(t,e){this.array||(this.array=new Float32Array(9));var i=e||this.array;return t?(i[0]=this.a,i[1]=this.b,i[2]=0,i[3]=this.c,i[4]=this.d,i[5]=0,i[6]=this.tx,i[7]=this.ty,i[8]=1):(i[0]=this.a,i[1]=this.c,i[2]=this.tx,i[3]=this.b,i[4]=this.d,i[5]=this.ty,i[6]=0,i[7]=0,i[8]=1),i},Jt.prototype.apply=function(t,e){e=e||new Xt;var i=t.x,r=t.y;return e.x=this.a*i+this.c*r+this.tx,e.y=this.b*i+this.d*r+this.ty,e},Jt.prototype.applyInverse=function(t,e){e=e||new Xt;var i=1/(this.a*this.d+this.c*-this.b),r=t.x,n=t.y;return e.x=this.d*i*r+-this.c*i*n+(this.ty*this.c-this.tx*this.d)*i,e.y=this.a*i*n+-this.b*i*r+(-this.ty*this.a+this.tx*this.b)*i,e},Jt.prototype.translate=function(t,e){return this.tx+=t,this.ty+=e,this},Jt.prototype.scale=function(t,e){return this.a*=t,this.d*=e,this.c*=t,this.b*=e,this.tx*=t,this.ty*=e,this},Jt.prototype.rotate=function(t){var e=Math.cos(t),i=Math.sin(t),r=this.a,n=this.c,s=this.tx;return this.a=r*e-this.b*i,this.b=r*i+this.b*e,this.c=n*e-this.d*i,this.d=n*i+this.d*e,this.tx=s*e-this.ty*i,this.ty=s*i+this.ty*e,this},Jt.prototype.append=function(t){var e=this.a,i=this.b,r=this.c,n=this.d;return this.a=t.a*e+t.b*r,this.b=t.a*i+t.b*n,this.c=t.c*e+t.d*r,this.d=t.c*i+t.d*n,this.tx=t.tx*e+t.ty*r+this.tx,this.ty=t.tx*i+t.ty*n+this.ty,this},Jt.prototype.setTransform=function(t,e,i,r,n,s,o,a,h){return this.a=Math.cos(o+h)*n,this.b=Math.sin(o+h)*n,this.c=-Math.sin(o-a)*s,this.d=Math.cos(o-a)*s,this.tx=t-(i*this.a+r*this.c),this.ty=e-(i*this.b+r*this.d),this},Jt.prototype.prepend=function(t){var e=this.tx;if(1!==t.a||0!==t.b||0!==t.c||1!==t.d){var i=this.a,r=this.c;this.a=i*t.a+this.b*t.c,this.b=i*t.b+this.b*t.d,this.c=r*t.a+this.d*t.c,this.d=r*t.b+this.d*t.d}return this.tx=e*t.a+this.ty*t.c+t.tx,this.ty=e*t.b+this.ty*t.d+t.ty,this},Jt.prototype.decompose=function(t){var e=this.a,i=this.b,r=this.c,n=this.d,s=-Math.atan2(-r,n),o=Math.atan2(i,e),a=Math.abs(s+o);return a<1e-5||Math.abs(Gt-a)<1e-5?(t.rotation=o,t.skew.x=t.skew.y=0):(t.rotation=0,t.skew.x=s,t.skew.y=o),t.scale.x=Math.sqrt(e*e+i*i),t.scale.y=Math.sqrt(r*r+n*n),t.position.x=this.tx,t.position.y=this.ty,t},Jt.prototype.invert=function(){var t=this.a,e=this.b,i=this.c,r=this.d,n=this.tx,s=t*r-e*i;return this.a=r/s,this.b=-e/s,this.c=-i/s,this.d=t/s,this.tx=(i*this.ty-r*n)/s,this.ty=-(t*this.ty-e*n)/s,this},Jt.prototype.identity=function(){return this.a=1,this.b=0,this.c=0,this.d=1,this.tx=0,this.ty=0,this},Jt.prototype.clone=function(){var t=new Jt;return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t},Jt.prototype.copyTo=function(t){return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t},Jt.prototype.copyFrom=function(t){return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.tx=t.tx,this.ty=t.ty,this},$t.IDENTITY.get=function(){return new Jt},$t.TEMP_MATRIX.get=function(){return new Jt},Object.defineProperties(Jt,$t);var te=[1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1,0,1],ee=[0,1,1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1],ie=[0,-1,-1,-1,0,1,1,1,0,1,1,1,0,-1,-1,-1],re=[1,1,0,-1,-1,-1,0,1,-1,-1,0,1,1,1,0,-1],ne=[],se=[],oe=Math.sign;!function(){for(var t=0;t<16;t++){var e=[];ne.push(e);for(var i=0;i<16;i++)for(var r=oe(te[t]*te[i]+ie[t]*ee[i]),n=oe(ee[t]*te[i]+re[t]*ee[i]),s=oe(te[t]*ie[i]+ie[t]*re[i]),o=oe(ee[t]*ie[i]+re[t]*re[i]),a=0;a<16;a++)if(te[a]===r&&ee[a]===n&&ie[a]===s&&re[a]===o){e.push(a);break}}for(var h=0;h<16;h++){var l=new Jt;l.set(te[h],ee[h],ie[h],re[h],0,0),se.push(l)}}();var ae={E:0,SE:1,S:2,SW:3,W:4,NW:5,N:6,NE:7,MIRROR_VERTICAL:8,MAIN_DIAGONAL:10,MIRROR_HORIZONTAL:12,REVERSE_DIAGONAL:14,uX:function(t){return te[t]},uY:function(t){return ee[t]},vX:function(t){return ie[t]},vY:function(t){return re[t]},inv:function(t){return 8&t?15&t:7&-t},add:function(t,e){return ne[t][e]},sub:function(t,e){return ne[t][ae.inv(e)]},rotate180:function(t){return 4^t},isVertical:function(t){return 2==(3&t)},byDirection:function(t,e){return 2*Math.abs(t)<=Math.abs(e)?e>=0?ae.S:ae.N:2*Math.abs(e)<=Math.abs(t)?t>0?ae.E:ae.W:e>0?t>0?ae.SE:ae.SW:t>0?ae.NE:ae.NW},matrixAppendRotationInv:function(t,e,i,r){void 0===i&&(i=0),void 0===r&&(r=0);var n=se[ae.inv(e)];n.tx=i,n.ty=r,t.append(n)}},he=function(){this.worldTransform=new Jt,this.localTransform=new Jt,this.position=new jt(this.onChange,this,0,0),this.scale=new jt(this.onChange,this,1,1),this.pivot=new jt(this.onChange,this,0,0),this.skew=new jt(this.updateSkew,this,0,0),this._rotation=0,this._cx=1,this._sx=0,this._cy=0,this._sy=1,this._localID=0,this._currentLocalID=0,this._worldID=0,this._parentID=0},le={rotation:{configurable:!0}};he.prototype.onChange=function(){this._localID++},he.prototype.updateSkew=function(){this._cx=Math.cos(this._rotation+this.skew._y),this._sx=Math.sin(this._rotation+this.skew._y),this._cy=-Math.sin(this._rotation-this.skew._x),this._sy=Math.cos(this._rotation-this.skew._x),this._localID++},he.prototype.updateLocalTransform=function(){var t=this.localTransform;this._localID!==this._currentLocalID&&(t.a=this._cx*this.scale._x,t.b=this._sx*this.scale._x,t.c=this._cy*this.scale._y,t.d=this._sy*this.scale._y,t.tx=this.position._x-(this.pivot._x*t.a+this.pivot._y*t.c),t.ty=this.position._y-(this.pivot._x*t.b+this.pivot._y*t.d),this._currentLocalID=this._localID,this._parentID=-1)},he.prototype.updateTransform=function(t){var e=this.localTransform;if(this._localID!==this._currentLocalID&&(e.a=this._cx*this.scale._x,e.b=this._sx*this.scale._x,e.c=this._cy*this.scale._y,e.d=this._sy*this.scale._y,e.tx=this.position._x-(this.pivot._x*e.a+this.pivot._y*e.c),e.ty=this.position._y-(this.pivot._x*e.b+this.pivot._y*e.d),this._currentLocalID=this._localID,this._parentID=-1),this._parentID!==t._worldID){var i=t.worldTransform,r=this.worldTransform;r.a=e.a*i.a+e.b*i.c,r.b=e.a*i.b+e.b*i.d,r.c=e.c*i.a+e.d*i.c,r.d=e.c*i.b+e.d*i.d,r.tx=e.tx*i.a+e.ty*i.c+i.tx,r.ty=e.tx*i.b+e.ty*i.d+i.ty,this._parentID=t._worldID,this._worldID++}},he.prototype.setFromMatrix=function(t){t.decompose(this),this._localID++},le.rotation.get=function(){return this._rotation},le.rotation.set=function(t){this._rotation!==t&&(this._rotation=t,this.updateSkew())},Object.defineProperties(he.prototype,le),he.IDENTITY=new he;var ue=function(t,e,i,r){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=0),this.x=Number(t),this.y=Number(e),this.width=Number(i),this.height=Number(r),this.type=qt},ce={left:{configurable:!0},right:{configurable:!0},top:{configurable:!0},bottom:{configurable:!0}},de={EMPTY:{configurable:!0}};ce.left.get=function(){return this.x},ce.right.get=function(){return this.x+this.width},ce.top.get=function(){return this.y},ce.bottom.get=function(){return this.y+this.height},de.EMPTY.get=function(){return new ue(0,0,0,0)},ue.prototype.clone=function(){return new ue(this.x,this.y,this.width,this.height)},ue.prototype.copyFrom=function(t){return this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this},ue.prototype.copyTo=function(t){return t.x=this.x,t.y=this.y,t.width=this.width,t.height=this.height,t},ue.prototype.contains=function(t,e){return!(this.width<=0||this.height<=0)&&(t>=this.x&&t<this.x+this.width&&e>=this.y&&e<this.y+this.height)},ue.prototype.pad=function(t,e){t=t||0,e=e||(0!==e?t:0),this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e},ue.prototype.fit=function(t){var e=Math.max(this.x,t.x),i=Math.min(this.x+this.width,t.x+t.width),r=Math.max(this.y,t.y),n=Math.min(this.y+this.height,t.y+t.height);this.x=e,this.width=Math.max(i-e,0),this.y=r,this.height=Math.max(n-r,0)},ue.prototype.ceil=function(t,e){void 0===t&&(t=1),void 0===e&&(e=.001);var i=Math.ceil((this.x+this.width-e)*t)/t,r=Math.ceil((this.y+this.height-e)*t)/t;this.x=Math.floor((this.x+e)*t)/t,this.y=Math.floor((this.y+e)*t)/t,this.width=i-this.x,this.height=r-this.y},ue.prototype.enlarge=function(t){var e=Math.min(this.x,t.x),i=Math.max(this.x+this.width,t.x+t.width),r=Math.min(this.y,t.y),n=Math.max(this.y+this.height,t.y+t.height);this.x=e,this.width=i-e,this.y=r,this.height=n-r},Object.defineProperties(ue.prototype,ce),Object.defineProperties(ue,de);var pe=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),this.x=t,this.y=e,this.radius=i,this.type=Kt};pe.prototype.clone=function(){return new pe(this.x,this.y,this.radius)},pe.prototype.contains=function(t,e){if(this.radius<=0)return!1;var i=this.radius*this.radius,r=this.x-t,n=this.y-e;return(r*=r)+(n*=n)<=i},pe.prototype.getBounds=function(){return new ue(this.x-this.radius,this.y-this.radius,2*this.radius,2*this.radius)};var fe=function(t,e,i,r){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=0),this.x=t,this.y=e,this.width=i,this.height=r,this.type=Zt};fe.prototype.clone=function(){return new fe(this.x,this.y,this.width,this.height)},fe.prototype.contains=function(t,e){if(this.width<=0||this.height<=0)return!1;var i=(t-this.x)/this.width,r=(e-this.y)/this.height;return(i*=i)+(r*=r)<=1},fe.prototype.getBounds=function(){return new ue(this.x-this.width,this.y-this.height,this.width,this.height)};var me=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(Array.isArray(t[0])&&(t=t[0]),t[0]instanceof Xt){for(var i=[],r=0,n=t.length;r<n;r++)i.push(t[r].x,t[r].y);t=i}this.points=t,this.type=Yt,this.closeStroke=!0};me.prototype.clone=function(){var t=new me(this.points.slice());return t.closeStroke=this.closeStroke,t},me.prototype.contains=function(t,e){for(var i=!1,r=this.points.length/2,n=0,s=r-1;n<r;s=n++){var o=this.points[2*n],a=this.points[2*n+1],h=this.points[2*s],l=this.points[2*s+1];a>e!=l>e&&t<(e-a)/(l-a)*(h-o)+o&&(i=!i)}return i};var ye=function(t,e,i,r,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===r&&(r=0),void 0===n&&(n=20),this.x=t,this.y=e,this.width=i,this.height=r,this.radius=n,this.type=Qt};ye.prototype.clone=function(){return new ye(this.x,this.y,this.width,this.height,this.radius)},ye.prototype.contains=function(t,e){if(this.width<=0||this.height<=0)return!1;if(t>=this.x&&t<=this.x+this.width&&e>=this.y&&e<=this.y+this.height){if(e>=this.y+this.radius&&e<=this.y+this.height-this.radius||t>=this.x+this.radius&&t<=this.x+this.width-this.radius)return!0;var i=t-(this.x+this.radius),r=e-(this.y+this.radius),n=this.radius*this.radius;if(i*i+r*r<=n)return!0;if((i=t-(this.x+this.width-this.radius))*i+r*r<=n)return!0;if(i*i+(r=e-(this.y+this.height-this.radius))*r<=n)return!0;if((i=t-(this.x+this.radius))*i+r*r<=n)return!0}return!1},
/*!
 * @pixi/display - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/display is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
c.SORTABLE_CHILDREN=!1;var ve=function(){this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0,this.rect=null};ve.prototype.isEmpty=function(){return this.minX>this.maxX||this.minY>this.maxY},ve.prototype.clear=function(){this.updateID++,this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0},ve.prototype.getRectangle=function(t){return this.minX>this.maxX||this.minY>this.maxY?ue.EMPTY:((t=t||new ue(0,0,1,1)).x=this.minX,t.y=this.minY,t.width=this.maxX-this.minX,t.height=this.maxY-this.minY,t)},ve.prototype.addPoint=function(t){this.minX=Math.min(this.minX,t.x),this.maxX=Math.max(this.maxX,t.x),this.minY=Math.min(this.minY,t.y),this.maxY=Math.max(this.maxY,t.y)},ve.prototype.addQuad=function(t){var e=this.minX,i=this.minY,r=this.maxX,n=this.maxY,s=t[0],o=t[1];e=s<e?s:e,i=o<i?o:i,r=s>r?s:r,n=o>n?o:n,e=(s=t[2])<e?s:e,i=(o=t[3])<i?o:i,r=s>r?s:r,n=o>n?o:n,e=(s=t[4])<e?s:e,i=(o=t[5])<i?o:i,r=s>r?s:r,n=o>n?o:n,e=(s=t[6])<e?s:e,i=(o=t[7])<i?o:i,r=s>r?s:r,n=o>n?o:n,this.minX=e,this.minY=i,this.maxX=r,this.maxY=n},ve.prototype.addFrame=function(t,e,i,r,n){var s=t.worldTransform,o=s.a,a=s.b,h=s.c,l=s.d,u=s.tx,c=s.ty,d=this.minX,p=this.minY,f=this.maxX,m=this.maxY,y=o*e+h*i+u,v=a*e+l*i+c;d=y<d?y:d,p=v<p?v:p,f=y>f?y:f,m=v>m?v:m,d=(y=o*r+h*i+u)<d?y:d,p=(v=a*r+l*i+c)<p?v:p,f=y>f?y:f,m=v>m?v:m,d=(y=o*e+h*n+u)<d?y:d,p=(v=a*e+l*n+c)<p?v:p,f=y>f?y:f,m=v>m?v:m,d=(y=o*r+h*n+u)<d?y:d,p=(v=a*r+l*n+c)<p?v:p,f=y>f?y:f,m=v>m?v:m,this.minX=d,this.minY=p,this.maxX=f,this.maxY=m},ve.prototype.addVertexData=function(t,e,i){for(var r=this.minX,n=this.minY,s=this.maxX,o=this.maxY,a=e;a<i;a+=2){var h=t[a],l=t[a+1];r=h<r?h:r,n=l<n?l:n,s=h>s?h:s,o=l>o?l:o}this.minX=r,this.minY=n,this.maxX=s,this.maxY=o},ve.prototype.addVertices=function(t,e,i,r){for(var n=t.worldTransform,s=n.a,o=n.b,a=n.c,h=n.d,l=n.tx,u=n.ty,c=this.minX,d=this.minY,p=this.maxX,f=this.maxY,m=i;m<r;m+=2){var y=e[m],v=e[m+1],g=s*y+a*v+l,x=h*v+o*y+u;c=g<c?g:c,d=x<d?x:d,p=g>p?g:p,f=x>f?x:f}this.minX=c,this.minY=d,this.maxX=p,this.maxY=f},ve.prototype.addBounds=function(t){var e=this.minX,i=this.minY,r=this.maxX,n=this.maxY;this.minX=t.minX<e?t.minX:e,this.minY=t.minY<i?t.minY:i,this.maxX=t.maxX>r?t.maxX:r,this.maxY=t.maxY>n?t.maxY:n},ve.prototype.addBoundsMask=function(t,e){var i=t.minX>e.minX?t.minX:e.minX,r=t.minY>e.minY?t.minY:e.minY,n=t.maxX<e.maxX?t.maxX:e.maxX,s=t.maxY<e.maxY?t.maxY:e.maxY;if(i<=n&&r<=s){var o=this.minX,a=this.minY,h=this.maxX,l=this.maxY;this.minX=i<o?i:o,this.minY=r<a?r:a,this.maxX=n>h?n:h,this.maxY=s>l?s:l}},ve.prototype.addBoundsArea=function(t,e){var i=t.minX>e.x?t.minX:e.x,r=t.minY>e.y?t.minY:e.y,n=t.maxX<e.x+e.width?t.maxX:e.x+e.width,s=t.maxY<e.y+e.height?t.maxY:e.y+e.height;if(i<=n&&r<=s){var o=this.minX,a=this.minY,h=this.maxX,l=this.maxY;this.minX=i<o?i:o,this.minY=r<a?r:a,this.maxX=n>h?n:h,this.maxY=s>l?s:l}};var ge=function(t){function e(){t.call(this),this.tempDisplayObjectParent=null,this.transform=new he,this.alpha=1,this.visible=!0,this.renderable=!0,this.parent=null,this.worldAlpha=1,this._lastSortedIndex=0,this._zIndex=0,this.filterArea=null,this.filters=null,this._enabledFilters=null,this._bounds=new ve,this._boundsID=0,this._lastBoundsID=-1,this._boundsRect=null,this._localBoundsRect=null,this._mask=null,this._destroyed=!1,this.isSprite=!1}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={_tempDisplayObjectParent:{configurable:!0},x:{configurable:!0},y:{configurable:!0},worldTransform:{configurable:!0},localTransform:{configurable:!0},position:{configurable:!0},scale:{configurable:!0},pivot:{configurable:!0},skew:{configurable:!0},rotation:{configurable:!0},angle:{configurable:!0},zIndex:{configurable:!0},worldVisible:{configurable:!0},mask:{configurable:!0}};return e.mixin=function(t){for(var i=Object.keys(t),r=0;r<i.length;++r){var n=i[r];Object.defineProperty(e.prototype,n,Object.getOwnPropertyDescriptor(t,n))}},i._tempDisplayObjectParent.get=function(){return null===this.tempDisplayObjectParent&&(this.tempDisplayObjectParent=new e),this.tempDisplayObjectParent},e.prototype.updateTransform=function(){this.transform.updateTransform(this.parent.transform),this.worldAlpha=this.alpha*this.parent.worldAlpha,this._bounds.updateID++},e.prototype._recursivePostUpdateTransform=function(){this.parent?(this.parent._recursivePostUpdateTransform(),this.transform.updateTransform(this.parent.transform)):this.transform.updateTransform(this._tempDisplayObjectParent.transform)},e.prototype.getBounds=function(t,e){return t||(this.parent?(this._recursivePostUpdateTransform(),this.updateTransform()):(this.parent=this._tempDisplayObjectParent,this.updateTransform(),this.parent=null)),this._boundsID!==this._lastBoundsID&&(this.calculateBounds(),this._lastBoundsID=this._boundsID),e||(this._boundsRect||(this._boundsRect=new ue),e=this._boundsRect),this._bounds.getRectangle(e)},e.prototype.getLocalBounds=function(t){var e=this.transform,i=this.parent;this.parent=null,this.transform=this._tempDisplayObjectParent.transform,t||(this._localBoundsRect||(this._localBoundsRect=new ue),t=this._localBoundsRect);var r=this.getBounds(!1,t);return this.parent=i,this.transform=e,r},e.prototype.toGlobal=function(t,e,i){return void 0===i&&(i=!1),i||(this._recursivePostUpdateTransform(),this.parent?this.displayObjectUpdateTransform():(this.parent=this._tempDisplayObjectParent,this.displayObjectUpdateTransform(),this.parent=null)),this.worldTransform.apply(t,e)},e.prototype.toLocal=function(t,e,i,r){return e&&(t=e.toGlobal(t,i,r)),r||(this._recursivePostUpdateTransform(),this.parent?this.displayObjectUpdateTransform():(this.parent=this._tempDisplayObjectParent,this.displayObjectUpdateTransform(),this.parent=null)),this.worldTransform.applyInverse(t,i)},e.prototype.render=function(t){},e.prototype.setParent=function(t){if(!t||!t.addChild)throw new Error("setParent: Argument must be a Container");return t.addChild(this),t},e.prototype.setTransform=function(t,e,i,r,n,s,o,a,h){return void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=1),void 0===r&&(r=1),void 0===n&&(n=0),void 0===s&&(s=0),void 0===o&&(o=0),void 0===a&&(a=0),void 0===h&&(h=0),this.position.x=t,this.position.y=e,this.scale.x=i||1,this.scale.y=r||1,this.rotation=n,this.skew.x=s,this.skew.y=o,this.pivot.x=a,this.pivot.y=h,this},e.prototype.destroy=function(){this.removeAllListeners(),this.parent&&this.parent.removeChild(this),this.transform=null,this.parent=null,this._bounds=null,this._currentBounds=null,this._mask=null,this.filterArea=null,this.interactive=!1,this.interactiveChildren=!1,this._destroyed=!0},i.x.get=function(){return this.position.x},i.x.set=function(t){this.transform.position.x=t},i.y.get=function(){return this.position.y},i.y.set=function(t){this.transform.position.y=t},i.worldTransform.get=function(){return this.transform.worldTransform},i.localTransform.get=function(){return this.transform.localTransform},i.position.get=function(){return this.transform.position},i.position.set=function(t){this.transform.position.copyFrom(t)},i.scale.get=function(){return this.transform.scale},i.scale.set=function(t){this.transform.scale.copyFrom(t)},i.pivot.get=function(){return this.transform.pivot},i.pivot.set=function(t){this.transform.pivot.copyFrom(t)},i.skew.get=function(){return this.transform.skew},i.skew.set=function(t){this.transform.skew.copyFrom(t)},i.rotation.get=function(){return this.transform.rotation},i.rotation.set=function(t){this.transform.rotation=t},i.angle.get=function(){return this.transform.rotation*Ht},i.angle.set=function(t){this.transform.rotation=t*Wt},i.zIndex.get=function(){return this._zIndex},i.zIndex.set=function(t){this._zIndex=t,this.parent&&(this.parent.sortDirty=!0)},i.worldVisible.get=function(){var t=this;do{if(!t.visible)return!1;t=t.parent}while(t);return!0},i.mask.get=function(){return this._mask},i.mask.set=function(t){this._mask&&(this._mask.renderable=!0,this._mask.isMask=!1),this._mask=t,this._mask&&(this._mask.renderable=!1,this._mask.isMask=!0)},Object.defineProperties(e.prototype,i),e}(p.a);function xe(t,e){return t.zIndex===e.zIndex?t._lastSortedIndex-e._lastSortedIndex:t.zIndex-e.zIndex}ge.prototype.displayObjectUpdateTransform=ge.prototype.updateTransform;var be=function(t){function e(){t.call(this),this.children=[],this.sortableChildren=c.SORTABLE_CHILDREN,this.sortDirty=!1}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={width:{configurable:!0},height:{configurable:!0}};return e.prototype.onChildrenChange=function(){},e.prototype.addChild=function(t){var e=arguments,i=arguments.length;if(i>1)for(var r=0;r<i;r++)this.addChild(e[r]);else t.parent&&t.parent.removeChild(t),t.parent=this,this.sortDirty=!0,t.transform._parentID=-1,this.children.push(t),this._boundsID++,this.onChildrenChange(this.children.length-1),this.emit("childAdded",t,this,this.children.length-1),t.emit("added",this);return t},e.prototype.addChildAt=function(t,e){if(e<0||e>this.children.length)throw new Error(t+"addChildAt: The index "+e+" supplied is out of bounds "+this.children.length);return t.parent&&t.parent.removeChild(t),t.parent=this,this.sortDirty=!0,t.transform._parentID=-1,this.children.splice(e,0,t),this._boundsID++,this.onChildrenChange(e),t.emit("added",this),this.emit("childAdded",t,this,e),t},e.prototype.swapChildren=function(t,e){if(t!==e){var i=this.getChildIndex(t),r=this.getChildIndex(e);this.children[i]=e,this.children[r]=t,this.onChildrenChange(i<r?i:r)}},e.prototype.getChildIndex=function(t){var e=this.children.indexOf(t);if(-1===e)throw new Error("The supplied DisplayObject must be a child of the caller");return e},e.prototype.setChildIndex=function(t,e){if(e<0||e>=this.children.length)throw new Error("The index "+e+" supplied is out of bounds "+this.children.length);var i=this.getChildIndex(t);bt(this.children,i,1),this.children.splice(e,0,t),this.onChildrenChange(e)},e.prototype.getChildAt=function(t){if(t<0||t>=this.children.length)throw new Error("getChildAt: Index ("+t+") does not exist.");return this.children[t]},e.prototype.removeChild=function(t){var e=arguments,i=arguments.length;if(i>1)for(var r=0;r<i;r++)this.removeChild(e[r]);else{var n=this.children.indexOf(t);if(-1===n)return null;t.parent=null,t.transform._parentID=-1,bt(this.children,n,1),this._boundsID++,this.onChildrenChange(n),t.emit("removed",this),this.emit("childRemoved",t,this,n)}return t},e.prototype.removeChildAt=function(t){var e=this.getChildAt(t);return e.parent=null,e.transform._parentID=-1,bt(this.children,t,1),this._boundsID++,this.onChildrenChange(t),e.emit("removed",this),this.emit("childRemoved",e,this,t),e},e.prototype.removeChildren=function(t,e){void 0===t&&(t=0);var i,r=t,n="number"==typeof e?e:this.children.length,s=n-r;if(s>0&&s<=n){i=this.children.splice(r,s);for(var o=0;o<i.length;++o)i[o].parent=null,i[o].transform&&(i[o].transform._parentID=-1);this._boundsID++,this.onChildrenChange(t);for(var a=0;a<i.length;++a)i[a].emit("removed",this),this.emit("childRemoved",i[a],this,a);return i}if(0===s&&0===this.children.length)return[];throw new RangeError("removeChildren: numeric values are outside the acceptable range.")},e.prototype.sortChildren=function(){for(var t=!1,e=0,i=this.children.length;e<i;++e){var r=this.children[e];r._lastSortedIndex=e,t||0===r.zIndex||(t=!0)}t&&this.children.length>1&&this.children.sort(xe),this.sortDirty=!1},e.prototype.updateTransform=function(){this.sortableChildren&&this.sortDirty&&this.sortChildren(),this._boundsID++,this.transform.updateTransform(this.parent.transform),this.worldAlpha=this.alpha*this.parent.worldAlpha;for(var t=0,e=this.children.length;t<e;++t){var i=this.children[t];i.visible&&i.updateTransform()}},e.prototype.calculateBounds=function(){this._bounds.clear(),this._calculateBounds();for(var t=0;t<this.children.length;t++){var e=this.children[t];e.visible&&e.renderable&&(e.calculateBounds(),e._mask?(e._mask.calculateBounds(),this._bounds.addBoundsMask(e._bounds,e._mask._bounds)):e.filterArea?this._bounds.addBoundsArea(e._bounds,e.filterArea):this._bounds.addBounds(e._bounds))}this._lastBoundsID=this._boundsID},e.prototype._calculateBounds=function(){},e.prototype.render=function(t){if(this.visible&&!(this.worldAlpha<=0)&&this.renderable)if(this._mask||this.filters&&this.filters.length)this.renderAdvanced(t);else{this._render(t);for(var e=0,i=this.children.length;e<i;++e)this.children[e].render(t)}},e.prototype.renderAdvanced=function(t){t.batch.flush();var e=this.filters,i=this._mask;if(e){this._enabledFilters||(this._enabledFilters=[]),this._enabledFilters.length=0;for(var r=0;r<e.length;r++)e[r].enabled&&this._enabledFilters.push(e[r]);this._enabledFilters.length&&t.filter.push(this,this._enabledFilters)}i&&t.mask.push(this,this._mask),this._render(t);for(var n=0,s=this.children.length;n<s;n++)this.children[n].render(t);t.batch.flush(),i&&t.mask.pop(this,this._mask),e&&this._enabledFilters&&this._enabledFilters.length&&t.filter.pop()},e.prototype._render=function(t){},e.prototype.destroy=function(e){t.prototype.destroy.call(this),this.sortDirty=!1;var i="boolean"==typeof e?e:e&&e.children,r=this.removeChildren(0,this.children.length);if(i)for(var n=0;n<r.length;++n)r[n].destroy(e)},i.width.get=function(){return this.scale.x*this.getLocalBounds().width},i.width.set=function(t){var e=this.getLocalBounds().width;this.scale.x=0!==e?t/e:1,this._width=t},i.height.get=function(){return this.scale.y*this.getLocalBounds().height},i.height.set=function(t){var e=this.getLocalBounds().height;this.scale.y=0!==e?t/e:1,this._height=t},Object.defineProperties(e.prototype,i),e}(ge);be.prototype.containerUpdateTransform=be.prototype.updateTransform;
/*!
 * @pixi/core - v5.1.5
 * Compiled Tue, 24 Sep 2019 04:07:05 UTC
 *
 * @pixi/core is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var we=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this._width=t,this._height=e,this.destroyed=!1,this.internal=!1,this.onResize=new a("setRealSize",2),this.onUpdate=new a("update"),this.onError=new a("onError",1)},_e={valid:{configurable:!0},width:{configurable:!0},height:{configurable:!0}};we.prototype.bind=function(t){this.onResize.add(t),this.onUpdate.add(t),this.onError.add(t),(this._width||this._height)&&this.onResize.run(this._width,this._height)},we.prototype.unbind=function(t){this.onResize.remove(t),this.onUpdate.remove(t),this.onError.remove(t)},we.prototype.resize=function(t,e){t===this._width&&e===this._height||(this._width=t,this._height=e,this.onResize.run(t,e))},_e.valid.get=function(){return!!this._width&&!!this._height},we.prototype.update=function(){this.destroyed||this.onUpdate.run()},we.prototype.load=function(){return Promise.resolve()},_e.width.get=function(){return this._width},_e.height.get=function(){return this._height},we.prototype.upload=function(t,e,i){return!1},we.prototype.style=function(t,e,i){return!1},we.prototype.dispose=function(){},we.prototype.destroy=function(){this.destroyed||(this.destroyed=!0,this.dispose(),this.onError.removeAll(),this.onError=null,this.onResize.removeAll(),this.onResize=null,this.onUpdate.removeAll(),this.onUpdate=null)},Object.defineProperties(we.prototype,_e);var Se=function(t){function e(e){var i=e.naturalWidth||e.videoWidth||e.width,r=e.naturalHeight||e.videoHeight||e.height;t.call(this,i,r),this.source=e,this.noSubImage=!1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.crossOrigin=function(t,e,i){void 0===i&&0!==e.indexOf("data:")?t.crossOrigin=function(t,e){if(void 0===e&&(e=window.location),0===t.indexOf("data:"))return"";e=e||window.location,kt||(kt=document.createElement("a")),kt.href=t;var i=!(t=m.a.parse(kt.href)).port&&""===e.port||t.port===e.port;return t.hostname===e.hostname&&i&&t.protocol===e.protocol?"":"anonymous"}(e):!1!==i&&(t.crossOrigin="string"==typeof i?i:"anonymous")},e.prototype.upload=function(t,e,i,r){var n=t.gl,s=e.realWidth,o=e.realHeight;return r=r||this.source,n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),this.noSubImage||e.target!==n.TEXTURE_2D||i.width!==s||i.height!==o?(i.width=s,i.height=o,n.texImage2D(e.target,0,e.format,e.format,e.type,r)):n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.format,e.type,r),!0},e.prototype.update=function(){if(!this.destroyed){var e=this.source.naturalWidth||this.source.videoWidth||this.source.width,i=this.source.naturalHeight||this.source.videoHeight||this.source.height;this.resize(e,i),t.prototype.update.call(this)}},e.prototype.dispose=function(){this.source=null},e}(we),Ce=function(t){function e(e,i){if(i=i||{},!(e instanceof HTMLImageElement)){var r=new Image;t.crossOrigin(r,e,i.crossorigin),r.src=e,e=r}t.call(this,e),!e.complete&&this._width&&this._height&&(this._width=0,this._height=0),this.url=e.src,this._process=null,this.preserveBitmap=!1,this.createBitmap=(void 0!==i.createBitmap?i.createBitmap:c.CREATE_IMAGE_BITMAP)&&!!window.createImageBitmap,this.premultiplyAlpha=!1!==i.premultiplyAlpha,this.bitmap=null,this._load=null,!1!==i.autoLoad&&this.load()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.load=function(t){var e=this;return void 0!==t&&(this.createBitmap=t),this._load?this._load:(this._load=new Promise((function(t){e.url=e.source.src;var i=e.source,r=function(){e.destroyed||(i.onload=null,i.onerror=null,e.resize(i.width,i.height),e._load=null,e.createBitmap?t(e.process()):t(e))};i.complete&&i.src?r():(i.onload=r,i.onerror=function(t){return e.onError.run(t)})})),this._load)},e.prototype.process=function(){var t=this;return null!==this._process?this._process:null===this.bitmap&&window.createImageBitmap?(this._process=window.createImageBitmap(this.source,0,0,this.source.width,this.source.height,{premultiplyAlpha:this.premultiplyAlpha?"premultiply":"none"}).then((function(e){return t.destroyed?Promise.reject():(t.bitmap=e,t.update(),t._process=null,Promise.resolve(t))})),this._process):Promise.resolve(this)},e.prototype.upload=function(e,i,r){if(i.premultiplyAlpha=this.premultiplyAlpha,!this.createBitmap)return t.prototype.upload.call(this,e,i,r);if(!this.bitmap&&(this.process(),!this.bitmap))return!1;if(t.prototype.upload.call(this,e,i,r,this.bitmap),!this.preserveBitmap){var n=!0;for(var s in i._glTextures){var o=i._glTextures[s];if(o!==r&&o.dirtyId!==i.dirtyId){n=!1;break}}n&&(this.bitmap.close&&this.bitmap.close(),this.bitmap=null)}return!0},e.prototype.dispose=function(){this.source.onload=null,this.source.onerror=null,t.prototype.dispose.call(this),this.bitmap&&(this.bitmap.close(),this.bitmap=null),this._process=null,this._load=null},e}(Se),Te=[];function Ie(t,e){if(!t)return null;var i="";if("string"==typeof t){var r=/\.(\w{3,4})(?:$|\?|#)/i.exec(t);r&&(i=r[1].toLowerCase())}for(var n=Te.length-1;n>=0;--n){var s=Te[n];if(s.test&&s.test(t,i))return new s(t,e)}return new Ce(t,e)}var Ee=function(t){function e(e,i){var r=i||{},n=r.width,s=r.height;if(!n||!s)throw new Error("BufferResource width or height invalid");t.call(this,n,s),this.data=e}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.upload=function(t,e,i){var r=t.gl;return r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),i.width===e.width&&i.height===e.height?r.texSubImage2D(e.target,0,0,0,e.width,e.height,e.format,e.type,this.data):(i.width=e.width,i.height=e.height,r.texImage2D(e.target,0,i.internalFormat,e.width,e.height,0,e.format,i.type,this.data)),!0},e.prototype.dispose=function(){this.data=null},e.test=function(t){return t instanceof Float32Array||t instanceof Uint8Array||t instanceof Uint32Array},e}(we),Ae={scaleMode:lt,format:J,premultiplyAlpha:!1},Me=function(t){function e(e,i){void 0===e&&(e=null),void 0===i&&(i=null),t.call(this);var r=(i=i||{}).premultiplyAlpha,n=i.mipmap,s=i.anisotropicLevel,o=i.scaleMode,a=i.width,h=i.height,l=i.wrapMode,u=i.format,d=i.type,p=i.target,f=i.resolution,m=i.resourceOptions;!e||e instanceof we||((e=Ie(e,m)).internal=!0),this.width=a||0,this.height=h||0,this.resolution=f||c.RESOLUTION,this.mipmap=void 0!==n?n:c.MIPMAP_TEXTURES,this.anisotropicLevel=void 0!==s?s:c.ANISOTROPIC_LEVEL,this.wrapMode=l||c.WRAP_MODE,this.scaleMode=void 0!==o?o:c.SCALE_MODE,this.format=u||J,this.type=d||nt,this.target=p||tt,this.premultiplyAlpha=!1!==r,this.uid=_t(),this.touched=0,this.isPowerOfTwo=!1,this._refreshPOT(),this._glTextures={},this.dirtyId=0,this.dirtyStyleId=0,this.cacheId=null,this.valid=a>0&&h>0,this.textureCacheIds=[],this.destroyed=!1,this.resource=null,this._batchEnabled=0,this.setResource(e)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={realWidth:{configurable:!0},realHeight:{configurable:!0}};return i.realWidth.get=function(){return Math.ceil(this.width*this.resolution-1e-4)},i.realHeight.get=function(){return Math.ceil(this.height*this.resolution-1e-4)},e.prototype.setStyle=function(t,e){var i;return void 0!==t&&t!==this.scaleMode&&(this.scaleMode=t,i=!0),void 0!==e&&e!==this.mipmap&&(this.mipmap=e,i=!0),i&&this.dirtyStyleId++,this},e.prototype.setSize=function(t,e,i){return this.resolution=i||this.resolution,this.width=t,this.height=e,this._refreshPOT(),this.update(),this},e.prototype.setRealSize=function(t,e,i){return this.resolution=i||this.resolution,this.width=t/this.resolution,this.height=e/this.resolution,this._refreshPOT(),this.update(),this},e.prototype._refreshPOT=function(){this.isPowerOfTwo=Ct(this.realWidth)&&Ct(this.realHeight)},e.prototype.setResolution=function(t){var e=this.resolution;return e===t?this:(this.resolution=t,this.valid&&(this.width=this.width*e/t,this.height=this.height*e/t,this.emit("update",this)),this._refreshPOT(),this)},e.prototype.setResource=function(t){if(this.resource===t)return this;if(this.resource)throw new Error("Resource can be set only once");return t.bind(this),this.resource=t,this},e.prototype.update=function(){this.valid?(this.dirtyId++,this.dirtyStyleId++,this.emit("update",this)):this.width>0&&this.height>0&&(this.valid=!0,this.emit("loaded",this),this.emit("update",this))},e.prototype.onError=function(t){this.emit("error",this,t)},e.prototype.destroy=function(){this.resource&&(this.resource.unbind(this),this.resource.internal&&this.resource.destroy(),this.resource=null),this.cacheId&&(delete At[this.cacheId],delete Et[this.cacheId],this.cacheId=null),this.dispose(),e.removeFromCache(this),this.textureCacheIds=null,this.destroyed=!0},e.prototype.dispose=function(){this.emit("dispose",this)},e.from=function(t,i){var r=null;"string"==typeof t?r=t:(t._pixiId||(t._pixiId="pixiid_"+_t()),r=t._pixiId);var n=At[r];return n||((n=new e(t,i)).cacheId=r,e.addToCache(n,r)),n},e.fromBuffer=function(t,i,r,n){t=t||new Float32Array(i*r*4);var s=new Ee(t,{width:i,height:r}),o=t instanceof Float32Array?ot:nt;return new e(s,Object.assign(Ae,n||{width:i,height:r,type:o}))},e.addToCache=function(t,e){e&&(-1===t.textureCacheIds.indexOf(e)&&t.textureCacheIds.push(e),At[e]&&console.warn("BaseTexture added to the cache with an id ["+e+"] that already had an entry"),At[e]=t)},e.removeFromCache=function(t){if("string"==typeof t){var e=At[t];if(e){var i=e.textureCacheIds.indexOf(t);return i>-1&&e.textureCacheIds.splice(i,1),delete At[t],e}}else if(t&&t.textureCacheIds){for(var r=0;r<t.textureCacheIds.length;++r)delete At[t.textureCacheIds[r]];return t.textureCacheIds.length=0,t}return null},Object.defineProperties(e.prototype,i),e}(p.a);Me._globalBatch=0;var Pe=function(t){function e(e,i){var r;i=i||{};var n=e;Array.isArray(e)&&(r=e,n=e.length),t.call(this,i.width,i.height),this.items=[],this.itemDirtyIds=[];for(var s=0;s<n;s++){var o=new Me;this.items.push(o),this.itemDirtyIds.push(-1)}if(this.length=n,this._load=null,r)for(var a=0;a<n;a++)this.addResourceAt(Ie(r[a],i),a)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.dispose=function(){for(var t=0,e=this.length;t<e;t++)this.items[t].destroy();this.items=null,this.itemDirtyIds=null,this._load=null},e.prototype.addResourceAt=function(t,e){if(!this.items[e])throw new Error("Index "+e+" is out of bounds");return t.valid&&!this.valid&&this.resize(t.width,t.height),this.items[e].setResource(t),this},e.prototype.bind=function(e){t.prototype.bind.call(this,e),e.target=it;for(var i=0;i<this.length;i++)this.items[i].on("update",e.update,e)},e.prototype.unbind=function(e){t.prototype.unbind.call(this,e);for(var i=0;i<this.length;i++)this.items[i].off("update",e.update,e)},e.prototype.load=function(){var t=this;if(this._load)return this._load;var e=this.items.map((function(t){return t.resource})),i=e.map((function(t){return t.load()}));return this._load=Promise.all(i).then((function(){var i=e[0],r=i.width,n=i.height;return t.resize(r,n),Promise.resolve(t)})),this._load},e.prototype.upload=function(t,e,i){var r=this.length,n=this.itemDirtyIds,s=this.items,o=t.gl;i.dirtyId<0&&o.texImage3D(o.TEXTURE_2D_ARRAY,0,e.format,this._width,this._height,r,0,e.format,e.type,null);for(var a=0;a<r;a++){var h=s[a];n[a]<h.dirtyId&&(n[a]=h.dirtyId,h.valid&&o.texSubImage3D(o.TEXTURE_2D_ARRAY,0,0,0,a,h.resource.width,h.resource.height,1,e.format,e.type,h.resource.source))}return!0},e}(we),ke=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.test=function(t){var e=window.OffscreenCanvas;return!!(e&&t instanceof e)||t instanceof HTMLCanvasElement},e}(Se),Be=function(t){function e(i,r){if(r=r||{},t.call(this,i,r),this.length!==e.SIDES)throw new Error("Invalid length. Got "+this.length+", expected 6");for(var n=0;n<e.SIDES;n++)this.items[n].target=rt+n;!1!==r.autoLoad&&this.load()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.bind=function(e){t.prototype.bind.call(this,e),e.target=et},e.prototype.upload=function(t,i,r){for(var n=this.itemDirtyIds,s=0;s<e.SIDES;s++){var o=this.items[s];n[s]<o.dirtyId&&(n[s]=o.dirtyId,o.valid&&o.resource.upload(t,o,r))}return!0},e}(Pe);Be.SIDES=6;var Oe=function(t){function e(e,i){i=i||{},t.call(this,document.createElement("canvas")),this._width=0,this._height=0,this.svg=e,this.scale=i.scale||1,this._overrideWidth=i.width,this._overrideHeight=i.height,this._resolve=null,this._crossorigin=i.crossorigin,this._load=null,!1!==i.autoLoad&&this.load()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.load=function(){var t=this;return this._load?this._load:(this._load=new Promise((function(e){if(t._resolve=function(){t.resize(t.source.width,t.source.height),e(t)},/^\<svg/.test(t.svg.trim())){if(!btoa)throw new Error("Your browser doesn't support base64 conversions.");t.svg="data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(t.svg)))}t._loadSvg()})),this._load)},e.prototype._loadSvg=function(){var e=this,i=new Image;t.crossOrigin(i,this.svg,this._crossorigin),i.src=this.svg,i.onerror=function(t){i.onerror=null,e.onError.run(t)},i.onload=function(){var t=i.width,r=i.height;if(!t||!r)throw new Error("The SVG image must have width and height defined (in pixels), canvas API needs them.");var n=t*e.scale,s=r*e.scale;(e._overrideWidth||e._overrideHeight)&&(n=e._overrideWidth||e._overrideHeight/r*t,s=e._overrideHeight||e._overrideWidth/t*r),n=Math.round(n),s=Math.round(s);var o=e.source;o.width=n,o.height=s,o._pixiId="canvas_"+_t(),o.getContext("2d").drawImage(i,0,0,t,r,0,0,n,s),e._resolve(),e._resolve=null}},e.getSize=function(t){var i=e.SVG_SIZE.exec(t),r={};return i&&(r[i[1]]=Math.round(parseFloat(i[3])),r[i[5]]=Math.round(parseFloat(i[7]))),r},e.prototype.dispose=function(){t.prototype.dispose.call(this),this._resolve=null,this._crossorigin=null},e.test=function(t,e){return"svg"===e||"string"==typeof t&&0===t.indexOf("data:image/svg+xml;base64")||"string"==typeof t&&0===t.indexOf("<svg")},e}(Se);Oe.SVG_SIZE=/<svg[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*>/i;var Re=function(t){function e(e,i){if(i=i||{},!(e instanceof HTMLVideoElement)){var r=document.createElement("video");r.setAttribute("preload","auto"),r.setAttribute("webkit-playsinline",""),r.setAttribute("playsinline",""),"string"==typeof e&&(e=[e]),t.crossOrigin(r,e[0].src||e[0],i.crossorigin);for(var n=0;n<e.length;++n){var s=document.createElement("source"),o=e[n],a=o.src,h=o.mime,l=(a=a||e[n]).split("?").shift().toLowerCase(),u=l.substr(l.lastIndexOf(".")+1);h=h||"video/"+u,s.src=a,s.type=h,r.appendChild(s)}e=r}t.call(this,e),this.noSubImage=!0,this._autoUpdate=!0,this._isAutoUpdating=!1,this._updateFPS=i.updateFPS||0,this._msToNextUpdate=0,this.autoPlay=!1!==i.autoPlay,this._load=null,this._resolve=null,this._onCanPlay=this._onCanPlay.bind(this),this._onError=this._onError.bind(this),!1!==i.autoLoad&&this.load()}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={autoUpdate:{configurable:!0},updateFPS:{configurable:!0}};return e.prototype.update=function(e){if(void 0===e&&(e=0),!this.destroyed){var i=Lt.shared.elapsedMS*this.source.playbackRate;this._msToNextUpdate=Math.floor(this._msToNextUpdate-i),(!this._updateFPS||this._msToNextUpdate<=0)&&(t.prototype.update.call(this,e),this._msToNextUpdate=this._updateFPS?Math.floor(1e3/this._updateFPS):0)}},e.prototype.load=function(){var t=this;if(this._load)return this._load;var e=this.source;return(e.readyState===e.HAVE_ENOUGH_DATA||e.readyState===e.HAVE_FUTURE_DATA)&&e.width&&e.height&&(e.complete=!0),e.addEventListener("play",this._onPlayStart.bind(this)),e.addEventListener("pause",this._onPlayStop.bind(this)),this._isSourceReady()?this._onCanPlay():(e.addEventListener("canplay",this._onCanPlay),e.addEventListener("canplaythrough",this._onCanPlay),e.addEventListener("error",this._onError,!0)),this._load=new Promise((function(i){t.valid?i(t):(t._resolve=i,e.load())})),this._load},e.prototype._onError=function(){this.source.removeEventListener("error",this._onError,!0),this.onError.run(event)},e.prototype._isSourcePlaying=function(){var t=this.source;return t.currentTime>0&&!1===t.paused&&!1===t.ended&&t.readyState>2},e.prototype._isSourceReady=function(){return 3===this.source.readyState||4===this.source.readyState},e.prototype._onPlayStart=function(){this.valid||this._onCanPlay(),!this._isAutoUpdating&&this.autoUpdate&&(Lt.shared.add(this.update,this),this._isAutoUpdating=!0)},e.prototype._onPlayStop=function(){this._isAutoUpdating&&(Lt.shared.remove(this.update,this),this._isAutoUpdating=!1)},e.prototype._onCanPlay=function(){var t=this.source;t.removeEventListener("canplay",this._onCanPlay),t.removeEventListener("canplaythrough",this._onCanPlay);var e=this.valid;this.resize(t.videoWidth,t.videoHeight),!e&&this._resolve&&(this._resolve(this),this._resolve=null),this._isSourcePlaying()?this._onPlayStart():this.autoPlay&&t.play()},e.prototype.dispose=function(){this._isAutoUpdating&&Lt.shared.remove(this.update,this),this.source&&(this.source.removeEventListener("error",this._onError,!0),this.source.pause(),this.source.src="",this.source.load()),t.prototype.dispose.call(this)},i.autoUpdate.get=function(){return this._autoUpdate},i.autoUpdate.set=function(t){t!==this._autoUpdate&&(this._autoUpdate=t,!this._autoUpdate&&this._isAutoUpdating?(Lt.shared.remove(this.update,this),this._isAutoUpdating=!1):this._autoUpdate&&!this._isAutoUpdating&&(Lt.shared.add(this.update,this),this._isAutoUpdating=!0))},i.updateFPS.get=function(){return this._updateFPS},i.updateFPS.set=function(t){t!==this._updateFPS&&(this._updateFPS=t)},e.test=function(t,i){return t instanceof HTMLVideoElement||e.TYPES.indexOf(i)>-1},Object.defineProperties(e.prototype,i),e}(Se);Re.TYPES=["mp4","m4v","webm","ogg","ogv","h264","avi","mov"];var Fe=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.test=function(t){return!!window.createImageBitmap&&t instanceof ImageBitmap},e}(Se);Te.push(Ce,Fe,ke,Re,Oe,Ee,Be,Pe);var De=function(t){this.renderer=t};De.prototype.destroy=function(){this.renderer=null};var Le=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.upload=function(t,e,i){var r=t.gl;return r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),i.width===e.width&&i.height===e.height?r.texSubImage2D(e.target,0,0,0,e.width,e.height,e.format,e.type,this.data):(i.width=e.width,i.height=e.height,r.texImage2D(e.target,0,r.DEPTH_COMPONENT16,e.width,e.height,0,e.format,e.type,this.data)),!0},e}(Ee),Ue=function(t,e){this.width=Math.ceil(t||100),this.height=Math.ceil(e||100),this.stencil=!1,this.depth=!1,this.dirtyId=0,this.dirtyFormat=0,this.dirtySize=0,this.depthTexture=null,this.colorTextures=[],this.glFramebuffers={},this.disposeRunner=new a("disposeFramebuffer",2)},Ne={colorTexture:{configurable:!0}};Ne.colorTexture.get=function(){return this.colorTextures[0]},Ue.prototype.addColorTexture=function(t,e){return void 0===t&&(t=0),this.colorTextures[t]=e||new Me(null,{scaleMode:0,resolution:1,mipmap:!1,width:this.width,height:this.height}),this.dirtyId++,this.dirtyFormat++,this},Ue.prototype.addDepthTexture=function(t){return this.depthTexture=t||new Me(new Le(null,{width:this.width,height:this.height}),{scaleMode:0,resolution:1,width:this.width,height:this.height,mipmap:!1,format:$,type:st}),this.dirtyId++,this.dirtyFormat++,this},Ue.prototype.enableDepth=function(){return this.depth=!0,this.dirtyId++,this.dirtyFormat++,this},Ue.prototype.enableStencil=function(){return this.stencil=!0,this.dirtyId++,this.dirtyFormat++,this},Ue.prototype.resize=function(t,e){if(t=Math.ceil(t),e=Math.ceil(e),t!==this.width||e!==this.height){this.width=t,this.height=e,this.dirtyId++,this.dirtySize++;for(var i=0;i<this.colorTextures.length;i++){var r=this.colorTextures[i],n=r.resolution;r.setSize(t/n,e/n)}if(this.depthTexture){var s=this.depthTexture.resolution;this.depthTexture.setSize(t/s,e/s)}}},Ue.prototype.dispose=function(){this.disposeRunner.run(this,!1)},Object.defineProperties(Ue.prototype,Ne);var Ve=function(t){function e(e){if("number"==typeof e){var i=arguments[0],r=arguments[1],n=arguments[2],s=arguments[3];e={width:i,height:r,scaleMode:n,resolution:s}}t.call(this,null,e);var o=e||{},a=o.width,h=o.height;this.mipmap=!1,this.width=Math.ceil(a)||100,this.height=Math.ceil(h)||100,this.valid=!0,this._canvasRenderTarget=null,this.clearColor=[0,0,0,0],this.framebuffer=new Ue(this.width*this.resolution,this.height*this.resolution).addColorTexture(0,this),this.stencilMaskStack=[],this.filterStack=[{}]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.resize=function(t,e){t=Math.ceil(t),e=Math.ceil(e),this.framebuffer.resize(t*this.resolution,e*this.resolution)},e.prototype.dispose=function(){this.framebuffer.dispose(),t.prototype.dispose.call(this)},e.prototype.destroy=function(){t.prototype.destroy.call(this,!0),this.framebuffer=null},e}(Me),Xe=function(){this.x0=0,this.y0=0,this.x1=1,this.y1=0,this.x2=1,this.y2=1,this.x3=0,this.y3=1,this.uvsFloat32=new Float32Array(8)};Xe.prototype.set=function(t,e,i){var r=e.width,n=e.height;if(i){var s=t.width/2/r,o=t.height/2/n,a=t.x/r+s,h=t.y/n+o;i=ae.add(i,ae.NW),this.x0=a+s*ae.uX(i),this.y0=h+o*ae.uY(i),i=ae.add(i,2),this.x1=a+s*ae.uX(i),this.y1=h+o*ae.uY(i),i=ae.add(i,2),this.x2=a+s*ae.uX(i),this.y2=h+o*ae.uY(i),i=ae.add(i,2),this.x3=a+s*ae.uX(i),this.y3=h+o*ae.uY(i)}else this.x0=t.x/r,this.y0=t.y/n,this.x1=(t.x+t.width)/r,this.y1=t.y/n,this.x2=(t.x+t.width)/r,this.y2=(t.y+t.height)/n,this.x3=t.x/r,this.y3=(t.y+t.height)/n;this.uvsFloat32[0]=this.x0,this.uvsFloat32[1]=this.y0,this.uvsFloat32[2]=this.x1,this.uvsFloat32[3]=this.y1,this.uvsFloat32[4]=this.x2,this.uvsFloat32[5]=this.y2,this.uvsFloat32[6]=this.x3,this.uvsFloat32[7]=this.y3};var je=new Xe,ze=function(t){function e(i,r,n,s,o,a){if(t.call(this),this.noFrame=!1,r||(this.noFrame=!0,r=new ue(0,0,1,1)),i instanceof e&&(i=i.baseTexture),this.baseTexture=i,this._frame=r,this.trim=s,this.valid=!1,this.requiresUpdate=!1,this._uvs=je,this.uvMatrix=null,this.orig=n||r,this._rotate=Number(o||0),!0===o)this._rotate=2;else if(this._rotate%2!=0)throw new Error("attempt to use diamond-shaped UVs. If you are sure, set rotation manually");this.defaultAnchor=a?new Xt(a.x,a.y):new Xt(0,0),this._updateID=0,this.textureCacheIds=[],i.valid?this.noFrame?i.valid&&this.onBaseTextureUpdated(i):this.frame=r:i.once("loaded",this.onBaseTextureUpdated,this),this.noFrame&&i.on("update",this.onBaseTextureUpdated,this)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={resolution:{configurable:!0},frame:{configurable:!0},rotate:{configurable:!0},width:{configurable:!0},height:{configurable:!0}};return e.prototype.update=function(){this.baseTexture.resource&&this.baseTexture.resource.update()},e.prototype.onBaseTextureUpdated=function(t){if(this.noFrame){if(!this.baseTexture.valid)return;this._frame.width=t.width,this._frame.height=t.height,this.valid=!0,this.updateUvs()}else this.frame=this._frame;this.emit("update",this)},e.prototype.destroy=function(t){if(this.baseTexture){if(t){var i=this.baseTexture.resource;i&&Et[i.url]&&e.removeFromCache(i.url),this.baseTexture.destroy()}this.baseTexture.off("update",this.onBaseTextureUpdated,this),this.baseTexture=null}this._frame=null,this._uvs=null,this.trim=null,this.orig=null,this.valid=!1,e.removeFromCache(this),this.textureCacheIds=null},e.prototype.clone=function(){return new e(this.baseTexture,this.frame,this.orig,this.trim,this.rotate,this.defaultAnchor)},e.prototype.updateUvs=function(){this._uvs===je&&(this._uvs=new Xe),this._uvs.set(this._frame,this.baseTexture,this.rotate),this._updateID++},e.from=function(t,i){void 0===i&&(i={});var r=null;"string"==typeof t?r=t:(t._pixiId||(t._pixiId="pixiid_"+_t()),r=t._pixiId);var n=Et[r];return n||(i.resolution||(i.resolution=Bt(t)),(n=new e(new Me(t,i))).baseTexture.cacheId=r,Me.addToCache(n.baseTexture,r),e.addToCache(n,r)),n},e.fromBuffer=function(t,i,r,n){return new e(Me.fromBuffer(t,i,r,n))},e.fromLoader=function(t,i,r){var n=new Ce(t);n.url=i;var s=new e(new Me(n,{scaleMode:c.SCALE_MODE,resolution:Bt(i)}));return r||(r=i),Me.addToCache(s.baseTexture,r),e.addToCache(s,r),r!==i&&(Me.addToCache(s.baseTexture,i),e.addToCache(s,i)),s},e.addToCache=function(t,e){e&&(-1===t.textureCacheIds.indexOf(e)&&t.textureCacheIds.push(e),Et[e]&&console.warn("Texture added to the cache with an id ["+e+"] that already had an entry"),Et[e]=t)},e.removeFromCache=function(t){if("string"==typeof t){var e=Et[t];if(e){var i=e.textureCacheIds.indexOf(t);return i>-1&&e.textureCacheIds.splice(i,1),delete Et[t],e}}else if(t&&t.textureCacheIds){for(var r=0;r<t.textureCacheIds.length;++r)Et[t.textureCacheIds[r]]===t&&delete Et[t.textureCacheIds[r]];return t.textureCacheIds.length=0,t}return null},i.resolution.get=function(){return this.baseTexture.resolution},i.frame.get=function(){return this._frame},i.frame.set=function(t){this._frame=t,this.noFrame=!1;var e=t.x,i=t.y,r=t.width,n=t.height,s=e+r>this.baseTexture.width,o=i+n>this.baseTexture.height;if(s||o){var a=s&&o?"and":"or",h="X: "+e+" + "+r+" = "+(e+r)+" > "+this.baseTexture.width,l="Y: "+i+" + "+n+" = "+(i+n)+" > "+this.baseTexture.height;throw new Error("Texture Error: frame does not fit inside the base Texture dimensions: "+h+" "+a+" "+l)}this.valid=r&&n&&this.baseTexture.valid,this.trim||this.rotate||(this.orig=t),this.valid&&this.updateUvs()},i.rotate.get=function(){return this._rotate},i.rotate.set=function(t){this._rotate=t,this.valid&&this.updateUvs()},i.width.get=function(){return this.orig.width},i.height.get=function(){return this.orig.height},Object.defineProperties(e.prototype,i),e}(p.a);function Ge(t){t.destroy=function(){},t.on=function(){},t.once=function(){},t.emit=function(){}}ze.EMPTY=new ze(new Me),Ge(ze.EMPTY),Ge(ze.EMPTY.baseTexture),ze.WHITE=function(){var t=document.createElement("canvas");t.width=16,t.height=16;var e=t.getContext("2d");return e.fillStyle="white",e.fillRect(0,0,16,16),new ze(new Me(new ke(t)))}(),Ge(ze.WHITE),Ge(ze.WHITE.baseTexture);var He=function(t){function e(e,i){var r=null;if(!(e instanceof Ve)){var n=arguments[1],s=arguments[2],o=arguments[3],a=arguments[4];console.warn("Please use RenderTexture.create("+n+", "+s+") instead of the ctor directly."),r=arguments[0],i=null,e=new Ve({width:n,height:s,scaleMode:o,resolution:a})}t.call(this,e,i),this.legacyRenderer=r,this.valid=!0,this.filterFrame=null,this.filterPoolKey=null,this.updateUvs()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.resize=function(t,e,i){void 0===i&&(i=!0),t=Math.ceil(t),e=Math.ceil(e),this.valid=t>0&&e>0,this._frame.width=this.orig.width=t,this._frame.height=this.orig.height=e,i&&this.baseTexture.resize(t,e),this.updateUvs()},e.prototype.setResolution=function(t){var e=this.baseTexture;e.resolution!==t&&(e.setResolution(t),this.resize(e.width,e.height,!1))},e.create=function(t){return"number"==typeof t&&(t={width:t,height:arguments[1],scaleMode:arguments[2],resolution:arguments[3]}),new e(new Ve(t))},e}(ze),We=function(t){this.texturePool={},this.textureOptions=t||{},this.enableFullScreen=!1,this._pixelsWidth=0,this._pixelsHeight=0};We.prototype.createTexture=function(t,e){var i=new Ve(Object.assign({width:t,height:e,resolution:1},this.textureOptions));return new He(i)},We.prototype.getOptimalTexture=function(t,e,i){void 0===i&&(i=1);var r=We.SCREEN_KEY;t*=i,e*=i,this.enableFullScreen&&t===this._pixelsWidth&&e===this._pixelsHeight||(r=(65535&(t=St(t)))<<16|65535&(e=St(e))),this.texturePool[r]||(this.texturePool[r]=[]);var n=this.texturePool[r].pop();return n||(n=this.createTexture(t,e)),n.filterPoolKey=r,n.setResolution(i),n},We.prototype.getFilterTexture=function(t,e){var i=this.getOptimalTexture(t.width,t.height,e||t.resolution);return i.filterFrame=t.filterFrame,i},We.prototype.returnTexture=function(t){var e=t.filterPoolKey;t.filterFrame=null,this.texturePool[e].push(t)},We.prototype.returnFilterTexture=function(t){this.returnTexture(t)},We.prototype.clear=function(t){if(t=!1!==t)for(var e in this.texturePool){var i=this.texturePool[e];if(i)for(var r=0;r<i.length;r++)i[r].destroy(!0)}this.texturePool={}},We.prototype.setScreenSize=function(t){if(t.width!==this._pixelsWidth||t.height!==this._pixelsHeight){var e=We.SCREEN_KEY,i=this.texturePool[e];if(this.enableFullScreen=t.width>0&&t.height>0,i)for(var r=0;r<i.length;r++)i[r].destroy(!0);this.texturePool[e]=[],this._pixelsWidth=t.width,this._pixelsHeight=t.height}},We.SCREEN_KEY="screen";var Ye=function(t,e,i,r,n,s,o){void 0===i&&(i=!1),void 0===r&&(r=5126),this.buffer=t,this.size=e,this.normalized=i,this.type=r,this.stride=n,this.start=s,this.instance=o};Ye.prototype.destroy=function(){this.buffer=null},Ye.from=function(t,e,i,r,n){return new Ye(t,e,i,r,n)};var qe=0,Ke=function(t,e,i){void 0===e&&(e=!0),void 0===i&&(i=!1),this.data=t||new Float32Array(1),this._glBuffers={},this._updateID=0,this.index=i,this.static=e,this.id=qe++,this.disposeRunner=new a("disposeBuffer",2)};function Ze(t){if(4===t.BYTES_PER_ELEMENT)return t instanceof Float32Array?"Float32Array":t instanceof Uint32Array?"Uint32Array":"Int32Array";if(2===t.BYTES_PER_ELEMENT){if(t instanceof Uint16Array)return"Uint16Array"}else if(1===t.BYTES_PER_ELEMENT&&t instanceof Uint8Array)return"Uint8Array";return null}Ke.prototype.update=function(t){this.data=t||this.data,this._updateID++},Ke.prototype.dispose=function(){this.disposeRunner.run(this,!1)},Ke.prototype.destroy=function(){this.dispose(),this.data=null},Ke.from=function(t){return t instanceof Array&&(t=new Float32Array(t)),new Ke(t)};var Qe={Float32Array:Float32Array,Uint32Array:Uint32Array,Int32Array:Int32Array,Uint8Array:Uint8Array};var Je={5126:4,5123:2,5121:1},$e=0,ti={Float32Array:Float32Array,Uint32Array:Uint32Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array},ei=function(t,e){void 0===t&&(t=[]),void 0===e&&(e={}),this.buffers=t,this.indexBuffer=null,this.attributes=e,this.glVertexArrayObjects={},this.id=$e++,this.instanced=!1,this.instanceCount=1,this.disposeRunner=new a("disposeGeometry",2),this.refCount=0};ei.prototype.addAttribute=function(t,e,i,r,n,s,o,a){if(void 0===r&&(r=!1),void 0===a&&(a=!1),!e)throw new Error("You must pass a buffer when creating an attribute");e.data||(e instanceof Array&&(e=new Float32Array(e)),e=new Ke(e));var h=t.split("|");if(h.length>1){for(var l=0;l<h.length;l++)this.addAttribute(h[l],e,i,r,n);return this}var u=this.buffers.indexOf(e);return-1===u&&(this.buffers.push(e),u=this.buffers.length-1),this.attributes[t]=new Ye(u,i,r,n,s,o,a),this.instanced=this.instanced||a,this},ei.prototype.getAttribute=function(t){return this.attributes[t]},ei.prototype.getBuffer=function(t){return this.buffers[this.getAttribute(t).buffer]},ei.prototype.addIndex=function(t){return t.data||(t instanceof Array&&(t=new Uint16Array(t)),t=new Ke(t)),t.index=!0,this.indexBuffer=t,-1===this.buffers.indexOf(t)&&this.buffers.push(t),this},ei.prototype.getIndex=function(){return this.indexBuffer},ei.prototype.interleave=function(){if(1===this.buffers.length||2===this.buffers.length&&this.indexBuffer)return this;var t,e=[],i=[],r=new Ke;for(t in this.attributes){var n=this.attributes[t],s=this.buffers[n.buffer];e.push(s.data),i.push(n.size*Je[n.type]/4),n.buffer=0}for(r.data=function(t,e){for(var i=0,r=0,n={},s=0;s<t.length;s++)r+=e[s],i+=t[s].length;for(var o=new ArrayBuffer(4*i),a=null,h=0,l=0;l<t.length;l++){var u=e[l],c=t[l],d=Ze(c);n[d]||(n[d]=new Qe[d](o)),a=n[d];for(var p=0;p<c.length;p++){a[(p/u|0)*r+h+p%u]=c[p]}h+=u}return new Float32Array(o)}(e,i),t=0;t<this.buffers.length;t++)this.buffers[t]!==this.indexBuffer&&this.buffers[t].destroy();return this.buffers=[r],this.indexBuffer&&this.buffers.push(this.indexBuffer),this},ei.prototype.getSize=function(){for(var t in this.attributes){var e=this.attributes[t];return this.buffers[e.buffer].data.length/(e.stride/4||e.size)}return 0},ei.prototype.dispose=function(){this.disposeRunner.run(this,!1)},ei.prototype.destroy=function(){this.dispose(),this.buffers=null,this.indexBuffer.destroy(),this.attributes=null},ei.prototype.clone=function(){for(var t=new ei,e=0;e<this.buffers.length;e++)t.buffers[e]=new Ke(this.buffers[e].data.slice());for(var i in this.attributes){var r=this.attributes[i];t.attributes[i]=new Ye(r.buffer,r.size,r.normalized,r.type,r.stride,r.start,r.instance)}return this.indexBuffer&&(t.indexBuffer=t.buffers[this.buffers.indexOf(this.indexBuffer)],t.indexBuffer.index=!0),t},ei.merge=function(t){for(var e,i=new ei,r=[],n=[],s=[],o=0;o<t.length;o++){e=t[o];for(var a=0;a<e.buffers.length;a++)n[a]=n[a]||0,n[a]+=e.buffers[a].data.length,s[a]=0}for(var h=0;h<e.buffers.length;h++)r[h]=new(ti[Ze(e.buffers[h].data)])(n[h]),i.buffers[h]=new Ke(r[h]);for(var l=0;l<t.length;l++){e=t[l];for(var u=0;u<e.buffers.length;u++)r[u].set(e.buffers[u].data,s[u]),s[u]+=e.buffers[u].data.length}if(i.attributes=e.attributes,e.indexBuffer){i.indexBuffer=i.buffers[e.buffers.indexOf(e.indexBuffer)],i.indexBuffer.index=!0;for(var c=0,d=0,p=0,f=0,m=0;m<e.buffers.length;m++)if(e.buffers[m]!==e.indexBuffer){f=m;break}for(var y in e.attributes){var v=e.attributes[y];(0|v.buffer)===f&&(d+=v.size*Je[v.type]/4)}for(var g=0;g<t.length;g++){for(var x=t[g].indexBuffer.data,b=0;b<x.length;b++)i.indexBuffer.data[b+p]+=c;c+=e.buffers[f].data.length/d,p+=x.length}}return i};var ii=function(t){function e(){t.call(this),this.addAttribute("aVertexPosition",[0,0,1,0,1,1,0,1]).addIndex([0,1,3,2])}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(ei),ri=function(t){function e(){t.call(this),this.vertices=new Float32Array([-1,-1,1,-1,1,1,-1,1]),this.uvs=new Float32Array([0,0,1,0,1,1,0,1]),this.vertexBuffer=new Ke(this.vertices),this.uvBuffer=new Ke(this.uvs),this.addAttribute("aVertexPosition",this.vertexBuffer).addAttribute("aTextureCoord",this.uvBuffer).addIndex([0,1,2,0,2,3])}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.map=function(t,e){var i=0,r=0;return this.uvs[0]=i,this.uvs[1]=r,this.uvs[2]=i+e.width/t.width,this.uvs[3]=r,this.uvs[4]=i+e.width/t.width,this.uvs[5]=r+e.height/t.height,this.uvs[6]=i,this.uvs[7]=r+e.height/t.height,i=e.x,r=e.y,this.vertices[0]=i,this.vertices[1]=r,this.vertices[2]=i+e.width,this.vertices[3]=r,this.vertices[4]=i+e.width,this.vertices[5]=r+e.height,this.vertices[6]=i,this.vertices[7]=r+e.height,this.invalidate(),this},e.prototype.invalidate=function(){return this.vertexBuffer._updateID++,this.uvBuffer._updateID++,this},e}(ei),ni=0,si=function(t,e){this.uniforms=t,this.group=!0,this.syncUniforms={},this.dirtyId=0,this.id=ni++,this.static=!!e};si.prototype.update=function(){this.dirtyId++},si.prototype.add=function(t,e,i){this.uniforms[t]=new si(e,i)},si.from=function(t,e){return new si(t,e)};var oi=function(){this.renderTexture=null,this.target=null,this.legacy=!1,this.resolution=1,this.sourceFrame=new ue,this.destinationFrame=new ue,this.filters=[]};oi.prototype.clear=function(){this.target=null,this.filters=null,this.renderTexture=null};var ai=function(t){function e(e){t.call(this,e),this.defaultFilterStack=[{}],this.texturePool=new We,this.texturePool.setScreenSize(e.view),this.statePool=[],this.quad=new ii,this.quadUv=new ri,this.tempRect=new ue,this.activeState={},this.globalUniforms=new si({outputFrame:this.tempRect,inputSize:new Float32Array(4),inputPixel:new Float32Array(4),inputClamp:new Float32Array(4),resolution:1,filterArea:new Float32Array(4),filterClamp:new Float32Array(4)},!0),this._pixelsWidth=e.view.width,this._pixelsHeight=e.view.height}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(t,e){for(var i=this.renderer,r=this.defaultFilterStack,n=this.statePool.pop()||new oi,s=e[0].resolution,o=e[0].padding,a=e[0].autoFit,h=e[0].legacy,l=1;l<e.length;l++){var u=e[l];s=Math.min(s,u.resolution),o=Math.max(o,u.padding),a=a||u.autoFit,h=h||u.legacy}1===r.length&&(this.defaultFilterStack[0].renderTexture=i.renderTexture.current),r.push(n),n.resolution=s,n.legacy=h,n.target=t,n.sourceFrame.copyFrom(t.filterArea||t.getBounds(!0)),n.sourceFrame.pad(o),a&&n.sourceFrame.fit(this.renderer.renderTexture.sourceFrame),n.sourceFrame.ceil(s),n.renderTexture=this.getOptimalFilterTexture(n.sourceFrame.width,n.sourceFrame.height,s),n.filters=e,n.destinationFrame.width=n.renderTexture.width,n.destinationFrame.height=n.renderTexture.height,n.renderTexture.filterFrame=n.sourceFrame,i.renderTexture.bind(n.renderTexture,n.sourceFrame),i.renderTexture.clear()},e.prototype.pop=function(){var t=this.defaultFilterStack,e=t.pop(),i=e.filters;this.activeState=e;var r=this.globalUniforms.uniforms;r.outputFrame=e.sourceFrame,r.resolution=e.resolution;var n=r.inputSize,s=r.inputPixel,o=r.inputClamp;if(n[0]=e.destinationFrame.width,n[1]=e.destinationFrame.height,n[2]=1/n[0],n[3]=1/n[1],s[0]=n[0]*e.resolution,s[1]=n[1]*e.resolution,s[2]=1/s[0],s[3]=1/s[1],o[0]=.5*s[2],o[1]=.5*s[3],o[2]=e.sourceFrame.width*n[2]-.5*s[2],o[3]=e.sourceFrame.height*n[3]-.5*s[3],e.legacy){var a=r.filterArea;a[0]=e.destinationFrame.width,a[1]=e.destinationFrame.height,a[2]=e.sourceFrame.x,a[3]=e.sourceFrame.y,r.filterClamp=r.inputClamp}this.globalUniforms.update();var h=t[t.length-1];if(1===i.length)i[0].apply(this,e.renderTexture,h.renderTexture,!1,e),this.returnFilterTexture(e.renderTexture);else{var l=e.renderTexture,u=this.getOptimalFilterTexture(l.width,l.height,e.resolution);u.filterFrame=l.filterFrame;var c=0;for(c=0;c<i.length-1;++c){i[c].apply(this,l,u,!0,e);var d=l;l=u,u=d}i[c].apply(this,l,h.renderTexture,!1,e),this.returnFilterTexture(l),this.returnFilterTexture(u)}e.clear(),this.statePool.push(e)},e.prototype.applyFilter=function(t,e,i,r){var n=this.renderer;n.renderTexture.bind(i,i?i.filterFrame:null),r&&n.renderTexture.clear(),t.uniforms.uSampler=e,t.uniforms.filterGlobals=this.globalUniforms,n.state.set(t.state),n.shader.bind(t),t.legacy?(this.quadUv.map(e._frame,e.filterFrame),n.geometry.bind(this.quadUv),n.geometry.draw(Z)):(n.geometry.bind(this.quad),n.geometry.draw(Q))},e.prototype.calculateSpriteMatrix=function(t,e){var i=this.activeState,r=i.sourceFrame,n=i.destinationFrame,s=e._texture.orig,o=t.set(n.width,0,0,n.height,r.x,r.y),a=e.worldTransform.copyTo(Jt.TEMP_MATRIX);return a.invert(),o.prepend(a),o.scale(1/s.width,1/s.height),o.translate(e.anchor.x,e.anchor.y),o},e.prototype.destroy=function(){this.texturePool.clear(!1)},e.prototype.getOptimalFilterTexture=function(t,e,i){return void 0===i&&(i=1),this.texturePool.getOptimalTexture(t,e,i)},e.prototype.getFilterTexture=function(t,e){if("number"==typeof t){var i=t;t=e,e=i}t=t||this.activeState.renderTexture;var r=this.texturePool.getOptimalTexture(t.width,t.height,e||t.resolution);return r.filterFrame=t.filterFrame,r},e.prototype.returnFilterTexture=function(t){this.texturePool.returnTexture(t)},e.prototype.emptyPool=function(){this.texturePool.clear(!0)},e.prototype.resize=function(){this.texturePool.setScreenSize(this.renderer.view)},e}(De),hi=function(t){this.renderer=t};hi.prototype.flush=function(){},hi.prototype.destroy=function(){this.renderer=null},hi.prototype.start=function(){},hi.prototype.stop=function(){this.flush()},hi.prototype.render=function(t){};var li=function(t){function e(e){t.call(this,e),this.emptyRenderer=new hi(e),this.currentRenderer=this.emptyRenderer}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setObjectRenderer=function(t){this.currentRenderer!==t&&(this.currentRenderer.stop(),this.currentRenderer=t,this.currentRenderer.start())},e.prototype.flush=function(){this.setObjectRenderer(this.emptyRenderer)},e.prototype.reset=function(){this.setObjectRenderer(this.emptyRenderer)},e}(De);c.PREFER_ENV=u.a.any?v:g;var ui=0,ci=function(t){function e(e){t.call(this,e),this.webGLVersion=1,this.extensions={},this.handleContextLost=this.handleContextLost.bind(this),this.handleContextRestored=this.handleContextRestored.bind(this),e.view.addEventListener("webglcontextlost",this.handleContextLost,!1),e.view.addEventListener("webglcontextrestored",this.handleContextRestored,!1)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={isLost:{configurable:!0}};return i.isLost.get=function(){return!this.gl||this.gl.isContextLost()},e.prototype.contextChange=function(t){this.gl=t,this.renderer.gl=t,this.renderer.CONTEXT_UID=ui++,t.isContextLost()&&t.getExtension("WEBGL_lose_context")&&t.getExtension("WEBGL_lose_context").restoreContext()},e.prototype.initFromContext=function(t){this.gl=t,this.validateContext(t),this.renderer.gl=t,this.renderer.CONTEXT_UID=ui++,this.renderer.runners.contextChange.run(t)},e.prototype.initFromOptions=function(t){var e=this.createContext(this.renderer.view,t);this.initFromContext(e)},e.prototype.createContext=function(t,e){var i;if(c.PREFER_ENV>=g&&(i=t.getContext("webgl2",e)),i)this.webGLVersion=2;else if(this.webGLVersion=1,!(i=t.getContext("webgl",e)||t.getContext("experimental-webgl",e)))throw new Error("This browser does not support WebGL. Try using the canvas renderer");return this.gl=i,this.getExtensions(),i},e.prototype.getExtensions=function(){var t=this.gl;1===this.webGLVersion?Object.assign(this.extensions,{drawBuffers:t.getExtension("WEBGL_draw_buffers"),depthTexture:t.getExtension("WEBKIT_WEBGL_depth_texture"),loseContext:t.getExtension("WEBGL_lose_context"),vertexArrayObject:t.getExtension("OES_vertex_array_object")||t.getExtension("MOZ_OES_vertex_array_object")||t.getExtension("WEBKIT_OES_vertex_array_object"),anisotropicFiltering:t.getExtension("EXT_texture_filter_anisotropic"),uint32ElementIndex:t.getExtension("OES_element_index_uint"),floatTexture:t.getExtension("OES_texture_float"),floatTextureLinear:t.getExtension("OES_texture_float_linear"),textureHalfFloat:t.getExtension("OES_texture_half_float"),textureHalfFloatLinear:t.getExtension("OES_texture_half_float_linear")}):2===this.webGLVersion&&Object.assign(this.extensions,{anisotropicFiltering:t.getExtension("EXT_texture_filter_anisotropic"),colorBufferFloat:t.getExtension("EXT_color_buffer_float"),floatTextureLinear:t.getExtension("OES_texture_float_linear")})},e.prototype.handleContextLost=function(t){t.preventDefault()},e.prototype.handleContextRestored=function(){this.renderer.runners.contextChange.run(this.gl)},e.prototype.destroy=function(){var t=this.renderer.view;t.removeEventListener("webglcontextlost",this.handleContextLost),t.removeEventListener("webglcontextrestored",this.handleContextRestored),this.gl.useProgram(null),this.extensions.loseContext&&this.extensions.loseContext.loseContext()},e.prototype.postrender=function(){this.gl.flush()},e.prototype.validateContext=function(t){t.getContextAttributes().stencil||console.warn("Provided WebGL context does not have a stencil buffer, masks may not render correctly")},Object.defineProperties(e.prototype,i),e}(De),di=function(t){function e(e){t.call(this,e),this.managedFramebuffers=[],this.unknownFramebuffer=new Ue(10,10)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={size:{configurable:!0}};return e.prototype.contextChange=function(){var t=this.gl=this.renderer.gl;if(this.CONTEXT_UID=this.renderer.CONTEXT_UID,this.current=this.unknownFramebuffer,this.viewport=new ue,this.hasMRT=!0,this.writeDepthTexture=!0,this.disposeAll(!0),1===this.renderer.context.webGLVersion){var e=this.renderer.context.extensions.drawBuffers,i=this.renderer.context.extensions.depthTexture;c.PREFER_ENV===y&&(e=null,i=null),e?t.drawBuffers=function(t){return e.drawBuffersWEBGL(t)}:(this.hasMRT=!1,t.drawBuffers=function(){}),i||(this.writeDepthTexture=!1)}},e.prototype.bind=function(t,e){var i=this.gl;if(t){var r=t.glFramebuffers[this.CONTEXT_UID]||this.initFramebuffer(t);this.current!==t&&(this.current=t,i.bindFramebuffer(i.FRAMEBUFFER,r.framebuffer)),r.dirtyId!==t.dirtyId&&(r.dirtyId=t.dirtyId,r.dirtyFormat!==t.dirtyFormat?(r.dirtyFormat=t.dirtyFormat,this.updateFramebuffer(t)):r.dirtySize!==t.dirtySize&&(r.dirtySize=t.dirtySize,this.resizeFramebuffer(t)));for(var n=0;n<t.colorTextures.length;n++)t.colorTextures[n].texturePart?this.renderer.texture.unbind(t.colorTextures[n].texture):this.renderer.texture.unbind(t.colorTextures[n]);t.depthTexture&&this.renderer.texture.unbind(t.depthTexture),e?this.setViewport(e.x,e.y,e.width,e.height):this.setViewport(0,0,t.width,t.height)}else this.current&&(this.current=null,i.bindFramebuffer(i.FRAMEBUFFER,null)),e?this.setViewport(e.x,e.y,e.width,e.height):this.setViewport(0,0,this.renderer.width,this.renderer.height)},e.prototype.setViewport=function(t,e,i,r){var n=this.viewport;n.width===i&&n.height===r&&n.x===t&&n.y===e||(n.x=t,n.y=e,n.width=i,n.height=r,this.gl.viewport(t,e,i,r))},i.size.get=function(){return this.current?{x:0,y:0,width:this.current.width,height:this.current.height}:{x:0,y:0,width:this.renderer.width,height:this.renderer.height}},e.prototype.clear=function(t,e,i,r){var n=this.gl;n.clearColor(t,e,i,r),n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT)},e.prototype.initFramebuffer=function(t){var e={framebuffer:this.gl.createFramebuffer(),stencil:null,dirtyId:0,dirtyFormat:0,dirtySize:0};return t.glFramebuffers[this.CONTEXT_UID]=e,this.managedFramebuffers.push(t),t.disposeRunner.add(this),e},e.prototype.resizeFramebuffer=function(t){var e=this.gl,i=t.glFramebuffers[this.CONTEXT_UID];i.stencil&&(e.bindRenderbuffer(e.RENDERBUFFER,i.stencil),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,t.width,t.height));for(var r=t.colorTextures,n=0;n<r.length;n++)this.renderer.texture.bind(r[n],0);t.depthTexture&&this.renderer.texture.bind(t.depthTexture,0)},e.prototype.updateFramebuffer=function(t){var e=this.gl,i=t.glFramebuffers[this.CONTEXT_UID],r=t.colorTextures.length;e.drawBuffers||(r=Math.min(r,1));for(var n=[],s=0;s<r;s++){var o=t.colorTextures[s];o.texturePart?(this.renderer.texture.bind(o.texture,0),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+s,e.TEXTURE_CUBE_MAP_NEGATIVE_X+o.side,o.texture._glTextures[this.CONTEXT_UID].texture,0)):(this.renderer.texture.bind(o,0),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+s,e.TEXTURE_2D,o._glTextures[this.CONTEXT_UID].texture,0)),n.push(e.COLOR_ATTACHMENT0+s)}if((n.length>1&&e.drawBuffers(n),t.depthTexture)&&this.writeDepthTexture){var a=t.depthTexture;this.renderer.texture.bind(a,0),e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,a._glTextures[this.CONTEXT_UID].texture,0)}i.stencil||!t.stencil&&!t.depth||(i.stencil=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,i.stencil),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,t.width,t.height),t.depthTexture||e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,i.stencil))},e.prototype.disposeFramebuffer=function(t,e){var i=t.glFramebuffers[this.CONTEXT_UID],r=this.gl;if(i){delete t.glFramebuffers[this.CONTEXT_UID];var n=this.managedFramebuffers.indexOf(t);n>=0&&this.managedFramebuffers.splice(n,1),t.disposeRunner.remove(this),e||(r.deleteFramebuffer(i.framebuffer),i.stencil&&r.deleteRenderbuffer(i.stencil))}},e.prototype.disposeAll=function(t){var e=this.managedFramebuffers;this.managedFramebuffers=[];for(var i=0;i<e.length;i++)this.disposeFramebuffer(e[i],t)},e.prototype.forceStencil=function(){var t=this.current;if(t){var e=t.glFramebuffers[this.CONTEXT_UID];if(e&&!e.stencil){t.enableStencil();var i=t.width,r=t.height,n=this.gl,s=n.createRenderbuffer();n.bindRenderbuffer(n.RENDERBUFFER,s),n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_STENCIL,i,r),e.stencil=s,n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.RENDERBUFFER,s)}}},e.prototype.reset=function(){this.current=this.unknownFramebuffer,this.viewport=new ue},Object.defineProperties(e.prototype,i),e}(De),pi=function(t){this.buffer=t,this.updateID=-1,this.byteLength=-1,this.refCount=0},fi={5126:4,5123:2,5121:1},mi=function(t){function e(e){t.call(this,e),this._activeGeometry=null,this._activeVao=null,this.hasVao=!0,this.hasInstance=!0,this.canUseUInt32ElementIndex=!1,this.boundBuffers={},this.managedGeometries={},this.managedBuffers={}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(){this.disposeAll(!0);var t=this.gl=this.renderer.gl,e=this.renderer.context;if(this.CONTEXT_UID=this.renderer.CONTEXT_UID,!t.createVertexArray){var i=this.renderer.context.extensions.vertexArrayObject;c.PREFER_ENV===y&&(i=null),i?(t.createVertexArray=function(){return i.createVertexArrayOES()},t.bindVertexArray=function(t){return i.bindVertexArrayOES(t)},t.deleteVertexArray=function(t){return i.deleteVertexArrayOES(t)}):(this.hasVao=!1,t.createVertexArray=function(){},t.bindVertexArray=function(){},t.deleteVertexArray=function(){})}if(!t.vertexAttribDivisor){var r=t.getExtension("ANGLE_instanced_arrays");r?(t.vertexAttribDivisor=function(t,e){return r.vertexAttribDivisorANGLE(t,e)},t.drawElementsInstanced=function(t,e,i,n,s){return r.drawElementsInstancedANGLE(t,e,i,n,s)},t.drawArraysInstanced=function(t,e,i,n){return r.drawArraysInstancedANGLE(t,e,i,n)}):this.hasInstance=!1}this.canUseUInt32ElementIndex=2===e.webGLVersion||!!e.extensions.uint32ElementIndex},e.prototype.bind=function(t,e){e=e||this.renderer.shader.shader;var i=this.gl,r=t.glVertexArrayObjects[this.CONTEXT_UID];r||(this.managedGeometries[t.id]=t,t.disposeRunner.add(this),t.glVertexArrayObjects[this.CONTEXT_UID]=r={});var n=r[e.program.id]||this.initGeometryVao(t,e.program);this._activeGeometry=t,this._activeVao!==n&&(this._activeVao=n,this.hasVao?i.bindVertexArray(n):this.activateVao(t,e.program)),this.updateBuffers()},e.prototype.reset=function(){this.unbind()},e.prototype.updateBuffers=function(){for(var t=this._activeGeometry,e=this.gl,i=0;i<t.buffers.length;i++){var r=t.buffers[i],n=r._glBuffers[this.CONTEXT_UID];if(r._updateID!==n.updateID){n.updateID=r._updateID;var s=r.index?e.ELEMENT_ARRAY_BUFFER:e.ARRAY_BUFFER;if(e.bindBuffer(s,n.buffer),this._boundBuffer=n,n.byteLength>=r.data.byteLength)e.bufferSubData(s,0,r.data);else{var o=r.static?e.STATIC_DRAW:e.DYNAMIC_DRAW;n.byteLength=r.data.byteLength,e.bufferData(s,r.data,o)}}}},e.prototype.checkCompatibility=function(t,e){var i=t.attributes,r=e.attributeData;for(var n in r)if(!i[n])throw new Error('shader and geometry incompatible, geometry missing the "'+n+'" attribute')},e.prototype.getSignature=function(t,e){var i=t.attributes,r=e.attributeData,n=["g",t.id];for(var s in i)r[s]&&n.push(s);return n.join("-")},e.prototype.initGeometryVao=function(t,e){this.checkCompatibility(t,e);var i=this.gl,r=this.CONTEXT_UID,n=this.getSignature(t,e),s=t.glVertexArrayObjects[this.CONTEXT_UID],o=s[n];if(o)return s[e.id]=o,o;var a=t.buffers,h=t.attributes,l={},u={};for(var c in a)l[c]=0,u[c]=0;for(var d in h)!h[d].size&&e.attributeData[d]?h[d].size=e.attributeData[d].size:h[d].size||console.warn("PIXI Geometry attribute '"+d+"' size cannot be determined (likely the bound shader does not have the attribute)"),l[h[d].buffer]+=h[d].size*fi[h[d].type];for(var p in h){var f=h[p],m=f.size;void 0===f.stride&&(l[f.buffer]===m*fi[f.type]?f.stride=0:f.stride=l[f.buffer]),void 0===f.start&&(f.start=u[f.buffer],u[f.buffer]+=m*fi[f.type])}o=i.createVertexArray(),i.bindVertexArray(o);for(var y=0;y<a.length;y++){var v=a[y];v._glBuffers[r]||(v._glBuffers[r]=new pi(i.createBuffer()),this.managedBuffers[v.id]=v,v.disposeRunner.add(this)),v._glBuffers[r].refCount++}return this.activateVao(t,e),this._activeVao=o,s[e.id]=o,s[n]=o,o},e.prototype.disposeBuffer=function(t,e){if(this.managedBuffers[t.id]){delete this.managedBuffers[t.id];var i=t._glBuffers[this.CONTEXT_UID],r=this.gl;t.disposeRunner.remove(this),i&&(e||r.deleteBuffer(i.buffer),delete t._glBuffers[this.CONTEXT_UID])}},e.prototype.disposeGeometry=function(t,e){if(this.managedGeometries[t.id]){delete this.managedGeometries[t.id];var i=t.glVertexArrayObjects[this.CONTEXT_UID],r=this.gl,n=t.buffers;if(t.disposeRunner.remove(this),i){for(var s=0;s<n.length;s++){var o=n[s]._glBuffers[this.CONTEXT_UID];o.refCount--,0!==o.refCount||e||this.disposeBuffer(n[s],e)}if(!e)for(var a in i)if("g"===a[0]){var h=i[a];this._activeVao===h&&this.unbind(),r.deleteVertexArray(h)}delete t.glVertexArrayObjects[this.CONTEXT_UID]}}},e.prototype.disposeAll=function(t){for(var e=Object.keys(this.managedGeometries),i=0;i<e.length;i++)this.disposeGeometry(this.managedGeometries[e[i]],t);e=Object.keys(this.managedBuffers);for(var r=0;r<e.length;r++)this.disposeBuffer(this.managedBuffers[e[r]],t)},e.prototype.activateVao=function(t,e){var i=this.gl,r=this.CONTEXT_UID,n=t.buffers,s=t.attributes;t.indexBuffer&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,t.indexBuffer._glBuffers[r].buffer);var o=null;for(var a in s){var h=s[a],l=n[h.buffer]._glBuffers[r];if(e.attributeData[a]){o!==l&&(i.bindBuffer(i.ARRAY_BUFFER,l.buffer),o=l);var u=e.attributeData[a].location;if(i.enableVertexAttribArray(u),i.vertexAttribPointer(u,h.size,h.type||i.FLOAT,h.normalized,h.stride,h.start),h.instance){if(!this.hasInstance)throw new Error("geometry error, GPU Instancing is not supported on this device");i.vertexAttribDivisor(u,1)}}}},e.prototype.draw=function(t,e,i,r){var n=this.gl,s=this._activeGeometry;if(s.indexBuffer){var o=s.indexBuffer.data.BYTES_PER_ELEMENT,a=2===o?n.UNSIGNED_SHORT:n.UNSIGNED_INT;2===o||4===o&&this.canUseUInt32ElementIndex?s.instanced?n.drawElementsInstanced(t,e||s.indexBuffer.data.length,a,(i||0)*o,r||1):n.drawElements(t,e||s.indexBuffer.data.length,a,(i||0)*o):console.warn("unsupported index buffer type: uint32")}else s.instanced?n.drawArraysInstanced(t,i,e||s.getSize(),r||1):n.drawArrays(t,i,e||s.getSize());return this},e.prototype.unbind=function(){this.gl.bindVertexArray(null),this._activeVao=null,this._activeGeometry=null},e}(De);function yi(t,e,i,r){var n=vi(t,t.VERTEX_SHADER,e),s=vi(t,t.FRAGMENT_SHADER,i),o=t.createProgram();if(t.attachShader(o,n),t.attachShader(o,s),r)for(var a in r)t.bindAttribLocation(o,r[a],a);return t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS)||(console.error("Pixi.js Error: Could not initialize shader."),console.error("gl.VALIDATE_STATUS",t.getProgramParameter(o,t.VALIDATE_STATUS)),console.error("gl.getError()",t.getError()),""!==t.getProgramInfoLog(o)&&console.warn("Pixi.js Warning: gl.getProgramInfoLog()",t.getProgramInfoLog(o)),t.deleteProgram(o),o=null),t.deleteShader(n),t.deleteShader(s),o}function vi(t,e,i){var r=t.createShader(e);return t.shaderSource(r,i),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS)?r:(console.warn(i),console.error(t.getShaderInfoLog(r)),null)}function gi(t,e){switch(t){case"float":return 0;case"vec2":return new Float32Array(2*e);case"vec3":return new Float32Array(3*e);case"vec4":return new Float32Array(4*e);case"int":case"sampler2D":case"sampler2DArray":return 0;case"ivec2":return new Int32Array(2*e);case"ivec3":return new Int32Array(3*e);case"ivec4":return new Int32Array(4*e);case"bool":return!1;case"bvec2":return xi(2*e);case"bvec3":return xi(3*e);case"bvec4":return xi(4*e);case"mat2":return new Float32Array([1,0,0,1]);case"mat3":return new Float32Array([1,0,0,0,1,0,0,0,1]);case"mat4":return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}return null}function xi(t){for(var e=new Array(t),i=0;i<e.length;i++)e[i]=!1;return e}var bi,wi={},_i=wi;function Si(){if(_i===wi||_i.isContextLost()){var t,e=document.createElement("canvas");c.PREFER_ENV>=g&&(t=e.getContext("webgl2",{})),t||((t=e.getContext("webgl",{})||e.getContext("experimental-webgl",{}))?t.getExtension("WEBGL_draw_buffers"):t=null),_i=t}return _i}function Ci(t,e,i){if("precision"!==t.substring(0,9)){var r=e;return e===ft&&i!==ft&&(r=pt),"precision "+r+" float;\n"+t}return i!==ft&&"precision highp"===t.substring(0,15)?t.replace("precision highp","precision mediump"):t}var Ti={float:1,vec2:2,vec3:3,vec4:4,int:1,ivec2:2,ivec3:3,ivec4:4,bool:1,bvec2:2,bvec3:3,bvec4:4,mat2:4,mat3:9,mat4:16,sampler2D:1};function Ii(t){return Ti[t]}var Ei=null,Ai={FLOAT:"float",FLOAT_VEC2:"vec2",FLOAT_VEC3:"vec3",FLOAT_VEC4:"vec4",INT:"int",INT_VEC2:"ivec2",INT_VEC3:"ivec3",INT_VEC4:"ivec4",BOOL:"bool",BOOL_VEC2:"bvec2",BOOL_VEC3:"bvec3",BOOL_VEC4:"bvec4",FLOAT_MAT2:"mat2",FLOAT_MAT3:"mat3",FLOAT_MAT4:"mat4",SAMPLER_2D:"sampler2D",SAMPLER_CUBE:"samplerCube",SAMPLER_2D_ARRAY:"sampler2DArray"};function Mi(t,e){if(!Ei){var i=Object.keys(Ai);Ei={};for(var r=0;r<i.length;++r){var n=i[r];Ei[t[n]]=Ai[n]}}return Ei[e]}var Pi={float:"\n    if(cv !== v)\n    {\n        cv.v = v;\n        gl.uniform1f(location, v)\n    }",vec2:"\n    if(cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        gl.uniform2f(location, v[0], v[1])\n    }",vec3:"\n    if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3f(location, v[0], v[1], v[2])\n    }",vec4:"gl.uniform4f(location, v[0], v[1], v[2], v[3])",int:"gl.uniform1i(location, v)",ivec2:"gl.uniform2i(location, v[0], v[1])",ivec3:"gl.uniform3i(location, v[0], v[1], v[2])",ivec4:"gl.uniform4i(location, v[0], v[1], v[2], v[3])",bool:"gl.uniform1i(location, v)",bvec2:"gl.uniform2i(location, v[0], v[1])",bvec3:"gl.uniform3i(location, v[0], v[1], v[2])",bvec4:"gl.uniform4i(location, v[0], v[1], v[2], v[3])",mat2:"gl.uniformMatrix2fv(location, false, v)",mat3:"gl.uniformMatrix3fv(location, false, v)",mat4:"gl.uniformMatrix4fv(location, false, v)",sampler2D:"gl.uniform1i(location, v)",samplerCube:"gl.uniform1i(location, v)",sampler2DArray:"gl.uniform1i(location, v)"},ki={float:"gl.uniform1fv(location, v)",vec2:"gl.uniform2fv(location, v)",vec3:"gl.uniform3fv(location, v)",vec4:"gl.uniform4fv(location, v)",mat4:"gl.uniformMatrix4fv(location, false, v)",mat3:"gl.uniformMatrix3fv(location, false, v)",mat2:"gl.uniformMatrix2fv(location, false, v)",int:"gl.uniform1iv(location, v)",ivec2:"gl.uniform2iv(location, v)",ivec3:"gl.uniform3iv(location, v)",ivec4:"gl.uniform4iv(location, v)",bool:"gl.uniform1iv(location, v)",bvec2:"gl.uniform2iv(location, v)",bvec3:"gl.uniform3iv(location, v)",bvec4:"gl.uniform4iv(location, v)",sampler2D:"gl.uniform1iv(location, v)",samplerCube:"gl.uniform1iv(location, v)",sampler2DArray:"gl.uniform1iv(location, v)"};var Bi,Oi=["precision mediump float;","void main(void){","float test = 0.1;","%forloop%","gl_FragColor = vec4(0.0);","}"].join("\n");function Ri(t){for(var e="",i=0;i<t;++i)i>0&&(e+="\nelse "),i<t-1&&(e+="if(test == "+i+".0){}");return e}var Fi=0,Di={},Li=function t(e,i,r){void 0===r&&(r="pixi-shader"),this.id=Fi++,this.vertexSrc=e||t.defaultVertexSrc,this.fragmentSrc=i||t.defaultFragmentSrc,this.vertexSrc=this.vertexSrc.trim(),this.fragmentSrc=this.fragmentSrc.trim(),"#version"!==this.vertexSrc.substring(0,8)&&(r=r.replace(/\s+/g,"-"),Di[r]?(Di[r]++,r+="-"+Di[r]):Di[r]=1,this.vertexSrc="#define SHADER_NAME "+r+"\n"+this.vertexSrc,this.fragmentSrc="#define SHADER_NAME "+r+"\n"+this.fragmentSrc,this.vertexSrc=Ci(this.vertexSrc,c.PRECISION_VERTEX,ft),this.fragmentSrc=Ci(this.fragmentSrc,c.PRECISION_FRAGMENT,function(){if(!bi){bi=pt;var t=Si();if(t&&t.getShaderPrecisionFormat){var e=t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT);bi=e.precision?ft:pt}}return bi}())),this.extractData(this.vertexSrc,this.fragmentSrc),this.glPrograms={},this.syncUniforms=null},Ui={defaultVertexSrc:{configurable:!0},defaultFragmentSrc:{configurable:!0}};Li.prototype.extractData=function(t,e){var i=Si();if(i){var r=yi(i,t,e);this.attributeData=this.getAttributeData(r,i),this.uniformData=this.getUniformData(r,i),i.deleteProgram(r)}else this.uniformData={},this.attributeData={}},Li.prototype.getAttributeData=function(t,e){for(var i={},r=[],n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),s=0;s<n;s++){var o=e.getActiveAttrib(t,s),a=Mi(e,o.type),h={type:a,name:o.name,size:Ii(a),location:0};i[o.name]=h,r.push(h)}r.sort((function(t,e){return t.name>e.name?1:-1}));for(var l=0;l<r.length;l++)r[l].location=l;return i},Li.prototype.getUniformData=function(t,e){for(var i={},r=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),n=0;n<r;n++){var s=e.getActiveUniform(t,n),o=s.name.replace(/\[.*?\]/,""),a=s.name.match(/\[.*?\]/,""),h=Mi(e,s.type);i[o]={type:h,size:s.size,isArray:a,value:gi(h,s.size)}}return i},Ui.defaultVertexSrc.get=function(){return"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vTextureCoord = aTextureCoord;\n}\n"},Ui.defaultFragmentSrc.get=function(){return"varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor *= texture2D(uSampler, vTextureCoord);\n}"},Li.from=function(t,e,i){var r=t+e,n=It[r];return n||(It[r]=n=new Li(t,e,i)),n},Object.defineProperties(Li,Ui);var Ni=function(t,e){for(var i in this.program=t,this.uniformGroup=e?e instanceof si?e:new si(e):new si({}),t.uniformData)this.uniformGroup.uniforms[i]instanceof Array&&(this.uniformGroup.uniforms[i]=new Float32Array(this.uniformGroup.uniforms[i]))},Vi={uniforms:{configurable:!0}};Ni.prototype.checkUniformExists=function(t,e){if(e.uniforms[t])return!0;for(var i in e.uniforms){var r=e.uniforms[i];if(r.group&&this.checkUniformExists(t,r))return!0}return!1},Ni.prototype.destroy=function(){this.uniformGroup=null},Vi.uniforms.get=function(){return this.uniformGroup.uniforms},Ni.from=function(t,e,i){var r=Li.from(t,e);return new Ni(r,i)},Object.defineProperties(Ni.prototype,Vi);var Xi=function(){this.data=0,this.blendMode=w,this.polygonOffset=0,this.blend=!0},ji={blend:{configurable:!0},offsets:{configurable:!0},culling:{configurable:!0},depthTest:{configurable:!0},clockwiseFrontFace:{configurable:!0},blendMode:{configurable:!0},polygonOffset:{configurable:!0}};ji.blend.get=function(){return!!(1&this.data)},ji.blend.set=function(t){!!(1&this.data)!==t&&(this.data^=1)},ji.offsets.get=function(){return!!(2&this.data)},ji.offsets.set=function(t){!!(2&this.data)!==t&&(this.data^=2)},ji.culling.get=function(){return!!(4&this.data)},ji.culling.set=function(t){!!(4&this.data)!==t&&(this.data^=4)},ji.depthTest.get=function(){return!!(8&this.data)},ji.depthTest.set=function(t){!!(8&this.data)!==t&&(this.data^=8)},ji.clockwiseFrontFace.get=function(){return!!(16&this.data)},ji.clockwiseFrontFace.set=function(t){!!(16&this.data)!==t&&(this.data^=16)},ji.blendMode.get=function(){return this._blendMode},ji.blendMode.set=function(t){this.blend=t!==X,this._blendMode=t},ji.polygonOffset.get=function(){return this._polygonOffset},ji.polygonOffset.set=function(t){this.offsets=!!t,this._polygonOffset=t},Xi.for2d=function(){var t=new Xi;return t.depthTest=!1,t.blend=!0,t},Object.defineProperties(Xi.prototype,ji);var zi=function(t){function e(i,r,n){var s=Li.from(i||e.defaultVertexSrc,r||e.defaultFragmentSrc);t.call(this,s,n),this.padding=0,this.resolution=c.FILTER_RESOLUTION,this.enabled=!0,this.autoFit=!0,this.legacy=!!this.program.attributeData.aTextureCoord,this.state=new Xi}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={blendMode:{configurable:!0}},r={defaultVertexSrc:{configurable:!0},defaultFragmentSrc:{configurable:!0}};return e.prototype.apply=function(t,e,i,r,n){t.applyFilter(this,e,i,r,n)},i.blendMode.get=function(){return this.state.blendMode},i.blendMode.set=function(t){this.state.blendMode=t},r.defaultVertexSrc.get=function(){return"attribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n"},r.defaultFragmentSrc.get=function(){return"varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor = texture2D(uSampler, vTextureCoord);\n}\n"},Object.defineProperties(e.prototype,i),Object.defineProperties(e,r),e}(Ni);zi.SOURCE_KEY_MAP={};var Gi=new Jt,Hi=function(t,e){this._texture=t,this.mapCoord=new Jt,this.uClampFrame=new Float32Array(4),this.uClampOffset=new Float32Array(2),this._updateID=-1,this.clampOffset=0,this.clampMargin=void 0===e?.5:e,this.isSimple=!1},Wi={texture:{configurable:!0}};Wi.texture.get=function(){return this._texture},Wi.texture.set=function(t){this._texture=t,this._updateID=-1},Hi.prototype.multiplyUvs=function(t,e){void 0===e&&(e=t);for(var i=this.mapCoord,r=0;r<t.length;r+=2){var n=t[r],s=t[r+1];e[r]=n*i.a+s*i.c+i.tx,e[r+1]=n*i.b+s*i.d+i.ty}return e},Hi.prototype.update=function(t){var e=this._texture;if(!e||!e.valid)return!1;if(!t&&this._updateID===e._updateID)return!1;this._updateID=e._updateID;var i=e._uvs;this.mapCoord.set(i.x1-i.x0,i.y1-i.y0,i.x3-i.x0,i.y3-i.y0,i.x0,i.y0);var r=e.orig,n=e.trim;n&&(Gi.set(r.width/n.width,0,0,r.height/n.height,-n.x/n.width,-n.y/n.height),this.mapCoord.append(Gi));var s=e.baseTexture,o=this.uClampFrame,a=this.clampMargin/s.resolution,h=this.clampOffset;return o[0]=(e._frame.x+a+h)/s.width,o[1]=(e._frame.y+a+h)/s.height,o[2]=(e._frame.x+e._frame.width-a+h)/s.width,o[3]=(e._frame.y+e._frame.height-a+h)/s.height,this.uClampOffset[0]=h/s.realWidth,this.uClampOffset[1]=h/s.realHeight,this.isSimple=e._frame.width===s.width&&e._frame.height===s.height&&0===e.rotate,!0},Object.defineProperties(Hi.prototype,Wi);var Yi=function(t){function e(e){var i=new Jt;t.call(this,"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 otherMatrix;\n\nvarying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n}\n","varying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform sampler2D mask;\nuniform float alpha;\nuniform float npmAlpha;\nuniform vec4 maskClamp;\n\nvoid main(void)\n{\n    float clip = step(3.5,\n        step(maskClamp.x, vMaskCoord.x) +\n        step(maskClamp.y, vMaskCoord.y) +\n        step(vMaskCoord.x, maskClamp.z) +\n        step(vMaskCoord.y, maskClamp.w));\n\n    vec4 original = texture2D(uSampler, vTextureCoord);\n    vec4 masky = texture2D(mask, vMaskCoord);\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\n\n    original *= (alphaMul * masky.r * alpha * clip);\n\n    gl_FragColor = original;\n}\n"),e.renderable=!1,this.maskSprite=e,this.maskMatrix=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t,e,i,r){var n=this.maskSprite,s=this.maskSprite.texture;s.valid&&(s.transform||(s.transform=new Hi(s,0)),s.transform.update(),this.uniforms.npmAlpha=s.baseTexture.premultiplyAlpha?0:1,this.uniforms.mask=s,this.uniforms.otherMatrix=t.calculateSpriteMatrix(this.maskMatrix,n).prepend(s.transform.mapCoord),this.uniforms.alpha=n.worldAlpha,this.uniforms.maskClamp=s.transform.uClampFrame,t.applyFilter(this,e,i,r))},e}(zi),qi=function(t){function e(e){t.call(this,e),this.scissor=!1,this.scissorData=null,this.scissorRenderTarget=null,this.enableScissor=!1,this.alphaMaskPool=[],this.alphaMaskIndex=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(t,e){if(e.isSprite)this.pushSpriteMask(t,e);else if(this.enableScissor&&!this.scissor&&this.renderer._activeRenderTarget.root&&!this.renderer.stencil.stencilMaskStack.length&&e.isFastRect()){var i=e.worldTransform,r=Math.atan2(i.b,i.a);(r=Math.round(r*(180/Math.PI)))%90?this.pushStencilMask(e):this.pushScissorMask(t,e)}else this.pushStencilMask(e)},e.prototype.pop=function(t,e){e.isSprite?this.popSpriteMask(t,e):this.enableScissor&&!this.renderer.stencil.stencilMaskStack.length?this.popScissorMask(t,e):this.popStencilMask(t,e)},e.prototype.pushSpriteMask=function(t,e){var i=this.alphaMaskPool[this.alphaMaskIndex];i||(i=this.alphaMaskPool[this.alphaMaskIndex]=[new Yi(e)]),i[0].resolution=this.renderer.resolution,i[0].maskSprite=e;var r=t.filterArea;t.filterArea=e.getBounds(!0),this.renderer.filter.push(t,i),t.filterArea=r,this.alphaMaskIndex++},e.prototype.popSpriteMask=function(){this.renderer.filter.pop(),this.alphaMaskIndex--},e.prototype.pushStencilMask=function(t){this.renderer.batch.flush(),this.renderer.stencil.pushStencil(t)},e.prototype.popStencilMask=function(){this.renderer.stencil.popStencil()},e.prototype.pushScissorMask=function(t,e){e.renderable=!0;var i=this.renderer._activeRenderTarget,r=e.getBounds();r.fit(i.size),e.renderable=!1,this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);var n=this.renderer.resolution;this.renderer.gl.scissor(r.x*n,(i.root?i.size.height-r.y-r.height:r.y)*n,r.width*n,r.height*n),this.scissorRenderTarget=i,this.scissorData=e,this.scissor=!0},e.prototype.popScissorMask=function(){this.scissorRenderTarget=null,this.scissorData=null,this.scissor=!1;var t=this.renderer.gl;t.disable(t.SCISSOR_TEST)},e}(De),Ki=function(t){function e(e){t.call(this,e),this.stencilMaskStack=[]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setMaskStack=function(t){var e=this.renderer.gl,i=this.stencilMaskStack.length;this.stencilMaskStack=t,t.length!==i&&(0===t.length?e.disable(e.STENCIL_TEST):(e.enable(e.STENCIL_TEST),this._useCurrent()))},e.prototype.pushStencil=function(t){var e=this.renderer.gl,i=this.stencilMaskStack.length;0===i&&(this.renderer.framebuffer.forceStencil(),e.enable(e.STENCIL_TEST)),this.stencilMaskStack.push(t),e.colorMask(!1,!1,!1,!1),e.stencilFunc(e.EQUAL,i,this._getBitwiseMask()),e.stencilOp(e.KEEP,e.KEEP,e.INCR),t.renderable=!0,t.render(this.renderer),this.renderer.batch.flush(),t.renderable=!1,this._useCurrent()},e.prototype.popStencil=function(){var t=this.renderer.gl,e=this.stencilMaskStack.pop();0===this.stencilMaskStack.length?(t.disable(t.STENCIL_TEST),t.clear(t.STENCIL_BUFFER_BIT),t.clearStencil(0)):(t.colorMask(!1,!1,!1,!1),t.stencilOp(t.KEEP,t.KEEP,t.DECR),e.renderable=!0,e.render(this.renderer),this.renderer.batch.flush(),e.renderable=!1,this._useCurrent())},e.prototype._useCurrent=function(){var t=this.renderer.gl;t.colorMask(!0,!0,!0,!0),t.stencilFunc(t.EQUAL,this.stencilMaskStack.length,this._getBitwiseMask()),t.stencilOp(t.KEEP,t.KEEP,t.KEEP)},e.prototype._getBitwiseMask=function(){return(1<<this.stencilMaskStack.length)-1},e.prototype.destroy=function(){t.prototype.destroy.call(this,this),this.stencilMaskStack=null},e}(De),Zi=function(t){function e(e){t.call(this,e),this.destinationFrame=null,this.sourceFrame=null,this.defaultFrame=null,this.projectionMatrix=new Jt,this.transform=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.update=function(t,e,i,r){this.destinationFrame=t||this.destinationFrame||this.defaultFrame,this.sourceFrame=e||this.sourceFrame||t,this.calculateProjection(this.destinationFrame,this.sourceFrame,i,r),this.transform&&this.projectionMatrix.append(this.transform);var n=this.renderer;n.globalUniforms.uniforms.projectionMatrix=this.projectionMatrix,n.globalUniforms.update(),n.shader.shader&&n.shader.syncUniformGroup(n.shader.shader.uniforms.globals)},e.prototype.calculateProjection=function(t,e,i,r){var n=this.projectionMatrix;r?(n.a=1/t.width*2*i,n.d=-1/t.height*2*i,n.tx=-1-e.x*n.a,n.ty=1-e.y*n.d):(n.a=1/t.width*2*i,n.d=1/t.height*2*i,n.tx=-1-e.x*n.a,n.ty=-1-e.y*n.d)},e.prototype.setTransform=function(){},e}(De),Qi=new ue,Ji=function(t){function e(e){t.call(this,e),this.clearColor=e._backgroundColorRgba,this.defaultMaskStack=[],this.current=null,this.sourceFrame=new ue,this.destinationFrame=new ue}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.bind=function(t,e,i){void 0===t&&(t=null),this.current=t;var r,n=this.renderer;if(t){var s=t.baseTexture;r=s.resolution,i||(Qi.width=s.realWidth,Qi.height=s.realHeight,i=Qi),e||(e=i),this.renderer.framebuffer.bind(s.framebuffer,i),this.renderer.projection.update(i,e,r,!1),this.renderer.stencil.setMaskStack(s.stencilMaskStack)}else r=this.renderer.resolution,i||(Qi.width=n.width,Qi.height=n.height,i=Qi),e||(e=i),n.framebuffer.bind(null,i),this.renderer.projection.update(i,e,r,!0),this.renderer.stencil.setMaskStack(this.defaultMaskStack);this.sourceFrame.copyFrom(e),this.destinationFrame.x=i.x/r,this.destinationFrame.y=i.y/r,this.destinationFrame.width=i.width/r,this.destinationFrame.height=i.height/r,e===i&&this.sourceFrame.copyFrom(this.destinationFrame)},e.prototype.clear=function(t){t=this.current?t||this.current.baseTexture.clearColor:t||this.clearColor,this.renderer.framebuffer.clear(t[0],t[1],t[2],t[3])},e.prototype.resize=function(){this.bind(null)},e.prototype.reset=function(){this.bind(null)},e}(De),$i=function(t,e){this.program=t,this.uniformData=e,this.uniformGroups={}};$i.prototype.destroy=function(){this.uniformData=null,this.uniformGroups=null,this.program=null};var tr=0,er=function(t){function e(e){t.call(this,e),this.systemCheck(),this.gl=null,this.shader=null,this.program=null,this.cache={},this.id=tr++}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.systemCheck=function(){if(!function(){if("boolean"==typeof Bi)return Bi;try{var t=new Function("param1","param2","param3","return param1[param2] === param3;");Bi=!0===t({a:"b"},"a","b")}catch(t){Bi=!1}return Bi}())throw new Error("Current environment does not allow unsafe-eval, please use @pixi/unsafe-eval module to enable support.")},e.prototype.contextChange=function(t){this.gl=t,this.reset()},e.prototype.bind=function(t,e){t.uniforms.globals=this.renderer.globalUniforms;var i=t.program,r=i.glPrograms[this.renderer.CONTEXT_UID]||this.generateShader(t);return this.shader=t,this.program!==i&&(this.program=i,this.gl.useProgram(r.program)),e||this.syncUniformGroup(t.uniformGroup),r},e.prototype.setUniforms=function(t){var e=this.shader.program,i=e.glPrograms[this.renderer.CONTEXT_UID];e.syncUniforms(i.uniformData,t,this.renderer)},e.prototype.syncUniformGroup=function(t){var e=this.getglProgram();t.static&&t.dirtyId===e.uniformGroups[t.id]||(e.uniformGroups[t.id]=t.dirtyId,this.syncUniforms(t,e))},e.prototype.syncUniforms=function(t,e){(t.syncUniforms[this.shader.program.id]||this.createSyncGroups(t))(e.uniformData,t.uniforms,this.renderer)},e.prototype.createSyncGroups=function(t){var e=this.getSignature(t,this.shader.program.uniformData);return this.cache[e]||(this.cache[e]=function(t,e){var i=0,r="var v = null;\n    var cv = null\n    var gl = renderer.gl";for(var n in t.uniforms){var s=e[n];if(s)if("float"===s.type&&1===s.size)r+="\n            if(uv."+n+" !== ud."+n+".value)\n            {\n                ud."+n+".value = uv."+n+"\n                gl.uniform1f(ud."+n+".location, uv."+n+")\n            }\n";else if("sampler2D"!==s.type&&"samplerCube"!==s.type&&"sampler2DArray"!==s.type||1!==s.size||s.isArray)if("mat3"===s.type&&1===s.size)void 0!==t.uniforms[n].a?r+="\n                gl.uniformMatrix3fv(ud."+n+".location, false, uv."+n+".toArray(true));\n                \n":r+="\n                gl.uniformMatrix3fv(ud."+n+".location, false, uv."+n+");\n                \n";else if("vec2"===s.type&&1===s.size)void 0!==t.uniforms[n].x?r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud."+n+".location, v.x, v.y);\n                }\n":r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud."+n+".location, v[0], v[1]);\n                }\n                \n";else if("vec4"===s.type&&1===s.size)void 0!==t.uniforms[n].width?r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud."+n+".location, v.x, v.y, v.width, v.height)\n                }\n":r+="\n                cv = ud."+n+".value;\n                v = uv."+n+";\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud."+n+".location, v[0], v[1], v[2], v[3])\n                }\n                \n";else{r+="\n            cv = ud."+n+".value;\n            v = uv."+n+";\n            "+(1===s.size?Pi:ki)[s.type].replace("location","ud."+n+".location")+";\n"}else r+="\n            renderer.texture.bind(uv."+n+", "+i+");\n\n            if(ud."+n+".value !== "+i+")\n            {\n                ud."+n+".value = "+i+";\n                gl.uniform1i(ud."+n+".location, "+i+");\n; // eslint-disable-line max-len\n            }\n",i++;else t.uniforms[n].group&&(r+="\n                    renderer.shader.syncUniformGroup(uv."+n+");\n                ")}return new Function("ud","uv","renderer",r)}(t,this.shader.program.uniformData)),t.syncUniforms[this.shader.program.id]=this.cache[e],t.syncUniforms[this.shader.program.id]},e.prototype.getSignature=function(t,e){var i=t.uniforms,r=[];for(var n in i)r.push(n),e[n]&&r.push(e[n].type);return r.join("-")},e.prototype.getglProgram=function(){return this.shader?this.shader.program.glPrograms[this.renderer.CONTEXT_UID]:null},e.prototype.generateShader=function(t){var e=this.gl,i=t.program,r={};for(var n in i.attributeData)r[n]=i.attributeData[n].location;var s=yi(e,i.vertexSrc,i.fragmentSrc,r),o={};for(var a in i.uniformData){var h=i.uniformData[a];o[a]={location:e.getUniformLocation(s,a),value:gi(h.type,h.size)}}var l=new $i(s,o);return i.glPrograms[this.renderer.CONTEXT_UID]=l,l},e.prototype.reset=function(){this.program=null,this.shader=null},e.prototype.destroy=function(){this.destroyed=!0},e}(De);var ir=function(t){function e(e){t.call(this,e),this.gl=null,this.stateId=0,this.polygonOffset=0,this.blendMode=X,this._blendEq=!1,this.map=[],this.map[0]=this.setBlend,this.map[1]=this.setOffset,this.map[2]=this.setCullFace,this.map[3]=this.setDepthTest,this.map[4]=this.setFrontFace,this.checks=[],this.defaultState=new Xi,this.defaultState.blend=!0,this.defaultState.depth=!0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(t){this.gl=t,this.blendModes=function(t,e){return void 0===e&&(e=[]),e[w]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[_]=[t.ONE,t.ONE],e[S]=[t.DST_COLOR,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[C]=[t.ONE,t.ONE_MINUS_SRC_COLOR,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[T]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[I]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[E]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[A]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[M]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[P]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[k]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[B]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[O]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[R]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[F]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[D]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[L]=[t.ONE,t.ONE_MINUS_SRC_ALPHA],e[X]=[0,0],e[U]=[t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[N]=[t.SRC_ALPHA,t.ONE,t.ONE,t.ONE],e[V]=[t.SRC_ALPHA,t.ONE_MINUS_SRC_COLOR,t.ONE,t.ONE_MINUS_SRC_ALPHA],e[j]=[t.DST_ALPHA,t.ZERO],e[z]=[t.ONE_MINUS_DST_ALPHA,t.ZERO],e[G]=[t.DST_ALPHA,t.ONE_MINUS_SRC_ALPHA],e[H]=[t.ONE_MINUS_DST_ALPHA,t.ONE],e[W]=[t.ZERO,t.SRC_ALPHA],e[Y]=[t.ZERO,t.ONE_MINUS_SRC_ALPHA],e[q]=[t.ONE_MINUS_DST_ALPHA,t.SRC_ALPHA],e[K]=[t.ONE,t.ONE,t.ONE,t.ONE,t.FUNC_REVERSE_SUBTRACT,t.FUNC_ADD],e}(t),this.set(this.defaultState),this.reset()},e.prototype.set=function(t){if(t=t||this.defaultState,this.stateId!==t.data){for(var e=this.stateId^t.data,i=0;e;)1&e&&this.map[i].call(this,!!(t.data&1<<i)),e>>=1,i++;this.stateId=t.data}for(var r=0;r<this.checks.length;r++)this.checks[r](this,t)},e.prototype.forceState=function(t){t=t||this.defaultState;for(var e=0;e<this.map.length;e++)this.map[e].call(this,!!(t.data&1<<e));for(var i=0;i<this.checks.length;i++)this.checks[i](this,t);this.stateId=t.data},e.prototype.setBlend=function(t){this.updateCheck(e.checkBlendMode,t),this.gl[t?"enable":"disable"](this.gl.BLEND)},e.prototype.setOffset=function(t){this.updateCheck(e.checkPolygonOffset,t),this.gl[t?"enable":"disable"](this.gl.POLYGON_OFFSET_FILL)},e.prototype.setDepthTest=function(t){this.gl[t?"enable":"disable"](this.gl.DEPTH_TEST)},e.prototype.setCullFace=function(t){this.gl[t?"enable":"disable"](this.gl.CULL_FACE)},e.prototype.setFrontFace=function(t){this.gl.frontFace(this.gl[t?"CW":"CCW"])},e.prototype.setBlendMode=function(t){if(t!==this.blendMode){this.blendMode=t;var e=this.blendModes[t],i=this.gl;2===e.length?i.blendFunc(e[0],e[1]):i.blendFuncSeparate(e[0],e[1],e[2],e[3]),6===e.length?(this._blendEq=!0,i.blendEquationSeparate(e[4],e[5])):this._blendEq&&(this._blendEq=!1,i.blendEquationSeparate(i.FUNC_ADD,i.FUNC_ADD))}},e.prototype.setPolygonOffset=function(t,e){this.gl.polygonOffset(t,e)},e.prototype.reset=function(){this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!1),this.forceState(0),this._blendEq=!0,this.blendMode=-1,this.setBlendMode(0)},e.prototype.updateCheck=function(t,e){var i=this.checks.indexOf(t);e&&-1===i?this.checks.push(t):e||-1===i||this.checks.splice(i,1)},e.checkBlendMode=function(t,e){t.setBlendMode(e.blendMode)},e.checkPolygonOffset=function(t,e){t.setPolygonOffset(e.polygonOffset,0)},e}(De),rr=function(t){function e(e){t.call(this,e),this.count=0,this.checkCount=0,this.maxIdle=c.GC_MAX_IDLE,this.checkCountMax=c.GC_MAX_CHECK_COUNT,this.mode=c.GC_MODE}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.postrender=function(){this.count++,this.mode!==dt&&(this.checkCount++,this.checkCount>this.checkCountMax&&(this.checkCount=0,this.run()))},e.prototype.run=function(){for(var t=this.renderer.texture,e=t.managedTextures,i=!1,r=0;r<e.length;r++){var n=e[r];!n.framebuffer&&this.count-n.touched>this.maxIdle&&(t.destroyTexture(n,!0),e[r]=null,i=!0)}if(i){for(var s=0,o=0;o<e.length;o++)null!==e[o]&&(e[s++]=e[o]);e.length=s}},e.prototype.unload=function(t){var e=this.renderer.textureSystem;t._texture&&t._texture._glRenderTargets&&e.destroyTexture(t._texture);for(var i=t.children.length-1;i>=0;i--)this.unload(t.children[i])},e}(De),nr=function(t){this.texture=t,this.width=-1,this.height=-1,this.dirtyId=-1,this.dirtyStyleId=-1,this.mipmap=!1,this.wrapMode=33071,this.type=6408,this.internalFormat=5121},sr=function(t){function e(e){t.call(this,e),this.boundTextures=[],this.currentLocation=-1,this.managedTextures=[],this._unknownBoundTextures=!1,this.unknownTexture=new Me}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(){var t=this.gl=this.renderer.gl;this.CONTEXT_UID=this.renderer.CONTEXT_UID,this.webGLVersion=this.renderer.context.webGLVersion;var e=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);this.boundTextures.length=e;for(var i=0;i<e;i++)this.boundTextures[i]=null;this.emptyTextures={};var r=new nr(t.createTexture());t.bindTexture(t.TEXTURE_2D,r.texture),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array(4)),this.emptyTextures[t.TEXTURE_2D]=r,this.emptyTextures[t.TEXTURE_CUBE_MAP]=new nr(t.createTexture()),t.bindTexture(t.TEXTURE_CUBE_MAP,this.emptyTextures[t.TEXTURE_CUBE_MAP].texture);for(var n=0;n<6;n++)t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,null);t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR);for(var s=0;s<this.boundTextures.length;s++)this.bind(null,s)},e.prototype.bind=function(t,e){void 0===e&&(e=0);var i=this.gl;if(t){if((t=t.baseTexture||t).valid){t.touched=this.renderer.textureGC.count;var r=t._glTextures[this.CONTEXT_UID]||this.initTexture(t);this.currentLocation!==e&&(this.currentLocation=e,i.activeTexture(i.TEXTURE0+e)),this.boundTextures[e]!==t&&i.bindTexture(t.target,r.texture),r.dirtyId!==t.dirtyId&&this.updateTexture(t),this.boundTextures[e]=t}}else this.currentLocation!==e&&(this.currentLocation=e,i.activeTexture(i.TEXTURE0+e)),i.bindTexture(i.TEXTURE_2D,this.emptyTextures[i.TEXTURE_2D].texture),this.boundTextures[e]=null},e.prototype.reset=function(){this._unknownBoundTextures=!0,this.currentLocation=-1;for(var t=0;t<this.boundTextures.length;t++)this.boundTextures[t]=this.unknownTexture},e.prototype.unbind=function(t){var e=this.gl,i=this.boundTextures;if(this._unknownBoundTextures){this._unknownBoundTextures=!1;for(var r=0;r<i.length;r++)i[r]===this.unknownTexture&&this.bind(null,r)}for(var n=0;n<i.length;n++)i[n]===t&&(this.currentLocation!==n&&(e.activeTexture(e.TEXTURE0+n),this.currentLocation=n),e.bindTexture(e.TEXTURE_2D,this.emptyTextures[t.target].texture),i[n]=null)},e.prototype.initTexture=function(t){var e=new nr(this.gl.createTexture());return e.dirtyId=-1,t._glTextures[this.CONTEXT_UID]=e,this.managedTextures.push(t),t.on("dispose",this.destroyTexture,this),e},e.prototype.initTextureType=function(t,e){if(e.internalFormat=t.format,e.type=t.type,2===this.webGLVersion){var i=this.renderer.gl;t.type===i.FLOAT&&t.format===i.RGBA&&(e.internalFormat=i.RGBA32F),t.type===at&&(e.type=i.HALF_FLOAT),e.type===i.HALF_FLOAT&&t.format===i.RGBA&&(e.internalFormat=i.RGBA16F)}},e.prototype.updateTexture=function(t){var e=t._glTextures[this.CONTEXT_UID];if(e){var i=this.renderer;if(this.initTextureType(t,e),t.resource&&t.resource.upload(i,t,e));else{var r=t.realWidth,n=t.realHeight,s=i.gl;(e.width!==r||e.height!==n||e.dirtyId<0)&&(e.width=r,e.height=n,s.texImage2D(t.target,0,e.internalFormat,r,n,0,t.format,e.type,null))}t.dirtyStyleId!==e.dirtyStyleId&&this.updateTextureStyle(t),e.dirtyId=t.dirtyId}},e.prototype.destroyTexture=function(t,e){var i=this.gl;if((t=t.baseTexture||t)._glTextures[this.CONTEXT_UID]&&(this.unbind(t),i.deleteTexture(t._glTextures[this.CONTEXT_UID].texture),t.off("dispose",this.destroyTexture,this),delete t._glTextures[this.CONTEXT_UID],!e)){var r=this.managedTextures.indexOf(t);-1!==r&&bt(this.managedTextures,r,1)}},e.prototype.updateTextureStyle=function(t){var e=t._glTextures[this.CONTEXT_UID];e&&(t.mipmap!==ct&&2===this.webGLVersion||t.isPowerOfTwo?(e.mipmap=t.mipmap>=1,e.wrapMode=t.wrapMode):(e.mipmap=0,e.wrapMode=ut),t.resource&&t.resource.style(this.renderer,t,e)||this.setStyle(t,e),e.dirtyStyleId=t.dirtyStyleId)},e.prototype.setStyle=function(t,e){var i=this.gl;if(e.mipmap&&i.generateMipmap(t.target),i.texParameteri(t.target,i.TEXTURE_WRAP_S,e.wrapMode),i.texParameteri(t.target,i.TEXTURE_WRAP_T,e.wrapMode),e.mipmap){i.texParameteri(t.target,i.TEXTURE_MIN_FILTER,t.scaleMode?i.LINEAR_MIPMAP_LINEAR:i.NEAREST_MIPMAP_NEAREST);var r=this.renderer.context.extensions.anisotropicFiltering;if(r&&t.anisotropicLevel>0&&t.scaleMode===ht){var n=Math.min(t.anisotropicLevel,i.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT));i.texParameterf(t.target,r.TEXTURE_MAX_ANISOTROPY_EXT,n)}}else i.texParameteri(t.target,i.TEXTURE_MIN_FILTER,t.scaleMode?i.LINEAR:i.NEAREST);i.texParameteri(t.target,i.TEXTURE_MAG_FILTER,t.scaleMode?i.LINEAR:i.NEAREST)},e}(De),or=new Jt;p.a;var ar=function(){this.textures=[],this.ids=[],this.blend=0,this.textureCount=0,this.start=0,this.size=0,this.type=4},hr=function(t){this.rawBinaryData=new ArrayBuffer(t),this.uint32View=new Uint32Array(this.rawBinaryData),this.float32View=new Float32Array(this.rawBinaryData)},lr={int8View:{configurable:!0},uint8View:{configurable:!0},int16View:{configurable:!0},uint16View:{configurable:!0},int32View:{configurable:!0}};lr.int8View.get=function(){return this._int8View||(this._int8View=new Int8Array(this.rawBinaryData)),this._int8View},lr.uint8View.get=function(){return this._uint8View||(this._uint8View=new Uint8Array(this.rawBinaryData)),this._uint8View},lr.int16View.get=function(){return this._int16View||(this._int16View=new Int16Array(this.rawBinaryData)),this._int16View},lr.uint16View.get=function(){return this._uint16View||(this._uint16View=new Uint16Array(this.rawBinaryData)),this._uint16View},lr.int32View.get=function(){return this._int32View||(this._int32View=new Int32Array(this.rawBinaryData)),this._int32View},hr.prototype.view=function(t){return this[t+"View"]},hr.prototype.destroy=function(){this.rawBinaryData=null,this._int8View=null,this._uint8View=null,this._int16View=null,this._uint16View=null,this._int32View=null,this.uint32View=null,this.float32View=null},hr.sizeOf=function(t){switch(t){case"int8":case"uint8":return 1;case"int16":case"uint16":return 2;case"int32":case"uint32":case"float32":return 4;default:throw new Error(t+" isn't a valid view type")}},Object.defineProperties(hr.prototype,lr);var ur=function(t){function e(e){t.call(this,e),this.shaderGenerator=null,this.geometryClass=null,this.vertexSize=null,this.state=Xi.for2d(),this.size=8e3,this._vertexCount=0,this._indexCount=0,this._bufferedElements=[],this._bufferSize=0,this._shader=null,this._packedGeometries=[],this._packedGeometryPoolSize=2,this._flushId=0,this._drawCalls=[];for(var i=0;i<this.size/4;i++)this._drawCalls[i]=new ar;this._aBuffers={},this._iBuffers={},this.MAX_TEXTURES=1,this.renderer.on("prerender",this.onPrerender,this),e.runners.contextChange.add(this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contextChange=function(){var t=this.renderer.gl;c.PREFER_ENV===y?this.MAX_TEXTURES=1:(this.MAX_TEXTURES=Math.min(t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),c.SPRITE_MAX_TEXTURES),this.MAX_TEXTURES=function(t,e){if(0===t)throw new Error("Invalid value of `0` passed to `checkMaxIfStatementsInShader`");for(var i=e.createShader(e.FRAGMENT_SHADER);;){var r=Oi.replace(/%forloop%/gi,Ri(t));if(e.shaderSource(i,r),e.compileShader(i),e.getShaderParameter(i,e.COMPILE_STATUS))break;t=t/2|0}return t}(this.MAX_TEXTURES,t)),this._shader=this.shaderGenerator.generateShader(this.MAX_TEXTURES);for(var e=0;e<this._packedGeometryPoolSize;e++)this._packedGeometries[e]=new this.geometryClass},e.prototype.onPrerender=function(){this._flushId=0},e.prototype.render=function(t){t._texture.valid&&(this._vertexCount+t.vertexData.length/2>this.size&&this.flush(),this._vertexCount+=t.vertexData.length/2,this._indexCount+=t.indices.length,this._bufferedElements[this._bufferSize++]=t)},e.prototype.flush=function(){if(0!==this._vertexCount){var t,e,i=this.getAttributeBuffer(this._vertexCount),r=this.getIndexBuffer(this._indexCount),n=this.renderer.gl,s=this._bufferedElements,o=this._drawCalls,a=this.MAX_TEXTURES,h=this._packedGeometries,l=this.vertexSize,u=this.renderer.textureGC.count,d=0,p=0,f=0,m=o[0],y=0,v=-1;m.textureCount=0,m.start=0,m.blend=v;var g,x=++Me._globalBatch;for(g=0;g<this._bufferSize;++g){var b=s[g];s[g]=null,t=b._texture.baseTexture;var w=xt[t.premultiplyAlpha?1:0][b.blendMode];v!==w&&(v=w,e=null,f=a,x++),e!==t&&(e=t,t._batchEnabled!==x&&(f===a&&(x++,f=0,m.size=p-m.start,(m=o[y++]).textureCount=0,m.blend=v,m.start=p),t.touched=u,t._batchEnabled=x,t._id=f,m.textures[m.textureCount++]=t,f++)),this.packInterleavedGeometry(b,i,r,d,p),d+=b.vertexData.length/2*l,p+=b.indices.length}Me._globalBatch=x,m.size=p-m.start,c.CAN_UPLOAD_SAME_BUFFER?(h[this._flushId]._buffer.update(i.rawBinaryData,0),h[this._flushId]._indexBuffer.update(r,0),this.renderer.geometry.updateBuffers()):(this._packedGeometryPoolSize<=this._flushId&&(this._packedGeometryPoolSize++,h[this._flushId]=new this.geometryClass),h[this._flushId]._buffer.update(i.rawBinaryData,0),h[this._flushId]._indexBuffer.update(r,0),this.renderer.geometry.bind(h[this._flushId]),this.renderer.geometry.updateBuffers(),this._flushId++);var _=this.renderer.texture,S=this.renderer.state;for(g=0;g<y;g++){for(var C=o[g],T=C.textureCount,I=0;I<T;I++)_.bind(C.textures[I],I),C.textures[I]=null;S.setBlendMode(C.blend),n.drawElements(C.type,C.size,n.UNSIGNED_SHORT,2*C.start)}this._bufferSize=0,this._vertexCount=0,this._indexCount=0}},e.prototype.start=function(){this.renderer.state.set(this.state),this.renderer.shader.bind(this._shader),c.CAN_UPLOAD_SAME_BUFFER&&this.renderer.geometry.bind(this._packedGeometries[this._flushId])},e.prototype.stop=function(){this.flush()},e.prototype.destroy=function(){for(var e=0;e<this._packedGeometryPoolSize;e++)this._packedGeometries[e]&&this._packedGeometries[e].destroy();this.renderer.off("prerender",this.onPrerender,this),this._aBuffers=null,this._iBuffers=null,this._packedGeometries=null,this._drawCalls=null,this._shader&&(this._shader.destroy(),this._shader=null),t.prototype.destroy.call(this)},e.prototype.getAttributeBuffer=function(t){var e=St(Math.ceil(t/8)),i=Tt(e),r=8*e;this._aBuffers.length<=i&&(this._iBuffers.length=i+1);var n=this._aBuffers[r];return n||(this._aBuffers[r]=n=new hr(r*this.vertexSize*4)),n},e.prototype.getIndexBuffer=function(t){var e=St(Math.ceil(t/12)),i=Tt(e),r=12*e;this._iBuffers.length<=i&&(this._iBuffers.length=i+1);var n=this._iBuffers[i];return n||(this._iBuffers[i]=n=new Uint16Array(r)),n},e.prototype.packInterleavedGeometry=function(t,e,i,r,n){for(var s=e.uint32View,o=e.float32View,a=r/this.vertexSize,h=t.uvs,l=t.indices,u=t.vertexData,c=t._texture.baseTexture._id,d=Math.min(t.worldAlpha,1),p=d<1&&t._texture.baseTexture.premultiplyAlpha?function(t,e){if(1===e)return(255*e<<24)+t;if(0===e)return 0;var i=t>>16&255,r=t>>8&255,n=255&t;return(255*e<<24)+((i=i*e+.5|0)<<16)+((r=r*e+.5|0)<<8)+(n=n*e+.5|0)}(t._tintRGB,d):t._tintRGB+(255*d<<24),f=0;f<u.length;f+=2)o[r++]=u[f],o[r++]=u[f+1],o[r++]=h[f],o[r++]=h[f+1],s[r++]=p,o[r++]=c;for(var m=0;m<l.length;m++)i[n++]=a+l[m]},e}(hi),cr=function(t,e){if(this.vertexSrc=t,this.fragTemplate=e,this.programCache={},this.defaultGroupCache={},e.indexOf("%count%")<0)throw new Error('Fragment template must contain "%count%".');if(e.indexOf("%forloop%")<0)throw new Error('Fragment template must contain "%forloop%".')};cr.prototype.generateShader=function(t){if(!this.programCache[t]){for(var e=new Int32Array(t),i=0;i<t;i++)e[i]=i;this.defaultGroupCache[t]=si.from({uSamplers:e},!0);var r=this.fragTemplate;r=(r=r.replace(/%count%/gi,""+t)).replace(/%forloop%/gi,this.generateSampleSrc(t)),this.programCache[t]=new Li(this.vertexSrc,r)}var n={tint:new Float32Array([1,1,1,1]),translationMatrix:new Jt,default:this.defaultGroupCache[t]};return new Ni(this.programCache[t],n)},cr.prototype.generateSampleSrc=function(t){var e="";e+="\n",e+="\n";for(var i=0;i<t;i++)i>0&&(e+="\nelse "),i<t-1&&(e+="if(vTextureId < "+i+".5)"),e+="\n{",e+="\n\tcolor = texture2D(uSamplers["+i+"], vTextureCoord);",e+="\n}";return e+="\n",e+="\n"};var dr=function(t){function e(e){void 0===e&&(e=!1),t.call(this),this._buffer=new Ke(null,e,!1),this._indexBuffer=new Ke(null,e,!0),this.addAttribute("aVertexPosition",this._buffer,2,!1,ot).addAttribute("aTextureCoord",this._buffer,2,!1,ot).addAttribute("aColor",this._buffer,4,!0,nt).addAttribute("aTextureId",this._buffer,1,!0,ot).addIndex(this._indexBuffer)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(ei),pr="precision highp float;\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform vec4 tint;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vColor = aColor * tint;\n}\n",fr="varying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\nuniform sampler2D uSamplers[%count%];\n\nvoid main(void){\n    vec4 color;\n    %forloop%\n    gl_FragColor = color * vColor;\n}\n",mr=function(){},yr={defaultVertexSrc:{configurable:!0},defaultFragmentTemplate:{configurable:!0}};mr.create=function(t){var e=Object.assign({vertex:pr,fragment:fr,geometryClass:dr,vertexSize:6},t),i=e.vertex,r=e.fragment,n=e.vertexSize,s=e.geometryClass;return function(t){function e(e){t.call(this,e),this.shaderGenerator=new cr(i,r),this.geometryClass=s,this.vertexSize=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(ur)},yr.defaultVertexSrc.get=function(){return pr},yr.defaultFragmentTemplate.get=function(){return fr},Object.defineProperties(mr,yr);mr.create();
/*!
 * @pixi/filter-pixelate - v3.0.3
 * Compiled Wed, 29 May 2019 03:04:05 UTC
 *
 * @pixi/filter-pixelate is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */var vr=function(t){function e(e){void 0===e&&(e=10),t.call(this,"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}","precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform vec2 size;\nuniform sampler2D uSampler;\n\nuniform vec4 filterArea;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 pixelate(vec2 coord, vec2 size)\n{\n\treturn floor( coord / size ) * size;\n}\n\nvoid main(void)\n{\n    vec2 coord = mapCoord(vTextureCoord);\n\n    coord = pixelate(coord, size);\n\n    coord = unmapCoord(coord);\n\n    gl_FragColor = texture2D(uSampler, coord);\n}\n"),this.size=e}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={size:{configurable:!0}};return i.size.get=function(){return this.uniforms.size},i.size.set=function(t){"number"==typeof t&&(t=[t,t]),this.uniforms.size=t},Object.defineProperties(e.prototype,i),e}(zi);class gr{constructor(t,e,i,r,n,s){this.x=t*i,this.y=e*i,this.w=i,this.h=i,this.Collider=new o.a.Bodies.rectangle(this.x,this.y,i,i,{isStatic:!0}),this.edgeBoxes=[],this.edgeBoxWidth=1,this.edgeBoxHeight=2;if(this.walkBoxHeight=20,n){let t=new o.a.Bodies.rectangle(this.x+i/2-this.edgeBoxWidth/2,this.y-i/2+20,this.edgeBoxWidth,this.walkBoxHeight,{isStatic:!0,isSensor:!0});t.isEdgeBox=!0,t.isRight=!0,this.edgeBoxes.push(t)}if(r){let t=new o.a.Bodies.rectangle(this.x-i/2+this.edgeBoxWidth/2,this.y-i/2+20,this.edgeBoxWidth,this.walkBoxHeight,{isStatic:!0,isSensor:!0});t.isEdgeBox=!0,t.isRight=!1,this.edgeBoxes.push(t)}s&&(this.walkBox=new o.a.Bodies.rectangle(this.x,this.y-i/2-this.walkBoxHeight/2,i,this.walkBoxHeight,{isStatic:!0,isSensor:!0}),this.walkBox.isEdgeBox=!1)}drawRect(t,e){if(t.beginFill(6304424),t.drawRect(this.Collider.vertices[0].x,this.Collider.vertices[0].y,this.w,this.h),t.endFill(),this.walkBox&&(e.beginFill(3319874,.5),e.drawRect(this.x-this.w/2,this.walkBox.position.y-this.walkBoxHeight/2,this.w,this.walkBoxHeight),e.endFill()),0!=this.edgeBoxes.length)for(let t of this.edgeBoxes)e.beginFill(16515843,.8),e.drawRect(t.position.x-this.edgeBoxWidth/2,t.position.y-this.edgeBoxWidth/2,this.edgeBoxWidth,this.edgeBoxHeight),e.endFill()}}class xr{constructor(t,e,i,r,n=!1){this.a=new o.a.Vector.create(t,e),this.b=new o.a.Vector.create(i,r),this.isEdge=n}}class br{constructor(t,e,i){this.pos=t,this.dir=o.a.Vector.create(1,0),this.dir=o.a.Vector.rotateAbout(this.dir,e,o.a.Vector.create(0,0)),this.angle=e,this.endpoint=i,this.closestPoint=i}setDir(t){this.dir=t,this.angle=o.a.Vector.angle(this.dir,o.a.Vector.create(0,0))}lookAt(t,e){this.dir.x=t-this.pos.x,this.dir.y=e-this.pos.y,this.dir=o.a.Vector.normalise(this.dir)}show(){stroke(127),push(),translate(this.pos.x,this.pos.y),line(0,0,10*this.dir.x,10*this.dir.y),pop()}cast(t){const e=t.a.x,i=t.a.y,r=t.b.x,n=t.b.y,s=this.pos.x,a=this.pos.y,h=this.pos.x+this.dir.x,l=this.pos.y+this.dir.y,u=(e-r)*(a-l)-(i-n)*(s-h);if(0==u)return;const c=((e-s)*(a-l)-(i-a)*(s-h))/u;if(c>0&&c<1&&-((e-r)*(i-a)-(i-n)*(e-s))/u>0){const t=o.a.Vector.create();return t.x=e+c*(r-e),t.y=i+c*(n-i),t}}}class wr{constructor(t,e,i,r,n){this.pos=o.a.Vector.create(t,e),this.rays=[],this.cornerRays=[],this.hangRay=new br(this.pos,0,o.a.Vector.create(0,0)),this.hangRay.setDir(o.a.Vector.create(0,-1)),this.endpoints=r,this.segments=i,this.tris=[],this.shaderProgram=n,this.color=[1,.831,.322,1,.831,.322,1,.831,.322];for(let t of r){let e=o.a.Vector.create(t.x-this.pos.x,t.y-this.pos.y);o.a.Vector.normalise(e);let i=new br(this.pos,0,t);i.setDir(e),this.rays.push(i)}this.renderer=PIXI.autoDetectRenderer(),this.uniforms={dimensions:[window.innerWidth,window.innerHeight],position:[this.pos.x,this.pos.y],time:Math.random()},this.shader=new PIXI.Shader.from(n.vert,n.frag,this.uniforms)}compare(t,e){return t.angle-e.angle}update(t,e){this.pos.x=t,this.pos.y=e,this.rays=[],this.uniforms={dimensions:[window.innerWidth,window.innerHeight],position:[t,e],time:Math.random()},this.shader=new PIXI.Shader.from(this.shaderProgram.vert,this.shaderProgram.frag,this.uniforms),this.cornerRays=[];for(let t of this.endpoints){let e=o.a.Vector.create(t.x-this.pos.x,t.y-this.pos.y);o.a.Vector.normalise(e);let i=new br(this.pos,0,t);i.setDir(e),this.rays.push(i)}this.look(),this.auxLook()}look(){for(let t of this.rays)this.cast(t)}cast(t){let e=t.endpoint,i=Math.sqrt(Math.pow(this.pos.x-e.x,2)+Math.pow(this.pos.y-e.y,2));for(let r of this.segments){const n=t.cast(r);if(n){const t=Math.sqrt(Math.pow(this.pos.x-n.x,2)+Math.pow(this.pos.y-n.y,2));t<i&&(i=t,e=n)}}if(e&&(t.closestPoint=e,e==t.endpoint)){let e=new br(this.pos,0,o.a.Vector.create(-5e3,0)),i=new br(this.pos,0,o.a.Vector.create(-5e3,0));e.setDir(o.a.Vector.rotate(t.dir,-.005)),i.setDir(o.a.Vector.rotate(t.dir,.005)),this.cornerRays.push(e,i)}}auxLook(){for(let t of this.cornerRays)t=this.auxCast(t),this.rays.push(t);this.rays.sort(this.compare)}auxCast(t){let e=null,i=1/0;for(let r of this.segments){const n=t.cast(r);if(n){const t=Math.sqrt(Math.pow(this.pos.x-n.x,2)+Math.pow(this.pos.y-n.y,2));t<i&&(i=t,e=n)}}return e&&(t.closestPoint=e),t}show(t){t.lineStyle(1,14561865),t.beginFill(16706423,1),t.drawCircle(this.pos.x,this.pos.y,10),t.endFill()}drawLight(t){t.lineStyle(0),t.beginFill(16706423,.5),t.drawPolygon([this.pos.x,this.pos.y,this.rays[0].closestPoint.x,this.rays[0].closestPoint.y,this.rays[this.rays.length-1].closestPoint.x,this.rays[this.rays.length-1].closestPoint.y]),t.endFill();for(let e=1;e<this.rays.length;e++)t.beginFill(16706423,.5),t.drawPolygon([this.pos.x,this.pos.y,this.rays[e-1].closestPoint.x,this.rays[e-1].closestPoint.y,this.rays[e].closestPoint.x,this.rays[e].closestPoint.y]),t.endFill()}drawMesh(t){this.tris=[];for(let e=1;e<this.rays.length;e++){const i=(new PIXI.Geometry).addAttribute("aVertexPosition",[this.pos.x,this.pos.y,this.rays[e-1].closestPoint.x,this.rays[e-1].closestPoint.y,this.rays[e].closestPoint.x,this.rays[e].closestPoint.y],2).addAttribute("aColor",this.color,3),r=new PIXI.Mesh(i,this.shader);r.filters=t,this.tris.push(r)}const e=(new PIXI.Geometry).addAttribute("aVertexPosition",[this.pos.x,this.pos.y,this.rays[0].closestPoint.x,this.rays[0].closestPoint.y,this.rays[this.rays.length-1].closestPoint.x,this.rays[this.rays.length-1].closestPoint.y],2).addAttribute("aColor",this.color,3),i=new PIXI.Mesh(e,this.shader);i.filters=t,this.tris.push(i)}}class _r{constructor(t,e,i,r,n,s){this.pos=o.a.Vector.create(t,e),this.castSegments=i,this.visionSource=new wr(t,e,i,r,n),this.numStaticRays=this.visionSource.rays.length,this.vel=-1.5,this.visionSource.look(),this.visionSource.auxLook(),this.lightContainer=new PIXI.Container,this.torch=new Sr(t,e,s)}update(t){this.lightContainer.destroy({children:!0}),this.lightContainer=new PIXI.Container,this.pos.x+=this.vel*t,this.visionSource.update(this.pos.x,this.pos.y),this.visionSource.drawMesh();for(let t=0;t<this.visionSource.tris.length;t++)this.lightContainer.addChild(this.visionSource.tris[t])}}class Sr{constructor(t,e,i){this.animation=new PIXI.AnimatedSprite(i),this.animation.position.set(t,e),this.animation.anchor.set(.5),this.animation.scale.set(1.5,1.5),this.animation.animationSpeed=.2,this.animation.gotoAndPlay(9*Math.random())}}class Cr{constructor(t,e,i){this.sprite=new PIXI.Sprite.from(i),this.sprite.position.set(t,e),this.sprite.anchor.set(.5),this.sprite.scale.set(2.5),this.x=t,this.y=e,this.width=this.sprite.width,this.height=this.sprite.height,this.DissolveValue=.8,this.collider=new o.a.Bodies.rectangle(t,e,this.width,this.height,{isStatic:!0,isSensor:!0}),this.collider.isCatnip=!0,this.collider.spriteReference=this.sprite}update(t){this.sprite.y=this.y+t}FixedUpdate(){this.sprite.filters&&(this.DissolveValue-=.01,this.sprite.filters[0].uniforms.DissolveVal=this.DissolveValue,this.DissolveValue<=0&&(this.sprite.renderable=!1,this.sprite.filters[0].uniforms.DissolveVal=.75,this.sprite.filters=null))}}class Tr{constructor(t,e,i,r,n,s,o){this.w=t,this.h=e,this.tileSize=i,this.tileMap={},this.tileset=s,this.numLights=r,this.freeCells=[],this.groundTiles=[],this.terrain=[],this.lights=[],this.torchFrames=o,this.torchSprites=[],this.shaderProgram=n,this.tileContainer=new PIXI.Container,this.backgroundContainer=new PIXI.Container,this.torchContainer=new PIXI.Container,this.edges=new Set,this.vertices=new Set,this.powerups=[]}generateLights(t,e){for(let i=0;i<e;i++){let e=Math.floor(ROT.RNG.getUniform()*t.length),i=t.splice(e,1)[0];this.tileMap[i]="*"}}addLights(t){for(let e in this.tileMap)if("*"==this.tileMap[e]){let i=e.split(","),r=parseInt(i[0]),n=parseInt(i[1]);this.lights.push(new _r(r*this.tileSize,n*this.tileSize,this.edges,this.vertices,t,this.torchFrames))}this.lights.forEach(t=>{this.torchSprites.push(t.torch.animation)})}parallaxScroll(t,e,i){this.backgroundContainer.x=t.x/e,this.backgroundContainer.y=t.y/i}tileSpriteInit(t,e,i,r=0){let n=new PIXI.Sprite.from(i);n.width=this.tileSize-6,n.height=this.tileSize,0!=r&&n.scale.set(r),n.anchor.set(.5),n.position.x=t*this.tileSize,n.position.y=e*this.tileSize,this.tileContainer.addChild(n)}}class Ir extends Tr{constructor(t,e,i,r,n,s,o){super(t,e,i,r,n,s,o),this.cellMap=new ROT.Map.Cellular(t,e,{born:[4,5,6,7,8],survive:[2,3,4,5]}),this.cellMap.randomize(.5);for(var a=8;a>=0;a--)this.cellMap.create();this.cellMap.connect(null,1),this.cellMap.connect((t,e,i)=>{let r=t+","+e;this.tileMap[r]=i});for(let i in this.tileMap){let r=i.split(","),n=parseInt(r[0]),s=parseInt(r[1]);0!=n&&0!=s&&n!=t-1&&s!=e-1||(this.tileMap[i]=1),this.tileMap[i]||this.freeCells.push(i)}this.generateLights(this.freeCells,r),this.caveWalls(this.tileMap,!0,this.tileContainer,this.tileSize),this.generateCatnip(10),this.backgroundTiling(),this.addFeatures(this.freeCells,this.tileMap),this.addCatnip(),console.log("ray cast vertices: ",this.vertices.size),this.addLights(n);let h=Math.floor(ROT.RNG.getUniform()*this.freeCells.length),l=this.freeCells.splice(h,1)[0].split(",");this.playerSpawn=new PIXI.Point(parseInt(l[0])*this.tileSize,parseInt(l[1])*this.tileSize)}caveWalls(t,e,i,r){for(let n in t)if(1==t[n]){let s,o=n.split(","),a=parseInt(o[0]),h=parseInt(o[1]),l=!1,u=!1,c=!1,d=!1,p=!1,f=!1,m=!1,y=!1;if(1==t[a-1+","+h]&&(l=!0),1==t[a+1+","+h]&&(u=!0),1==t[a+","+(h-1)]&&(c=!0),1==t[a+","+(h+1)]&&(d=!0),1==t[a-1+","+(h-1)]&&(p=!0),1==t[a+1+","+(h-1)]&&(f=!0),1==t[a+1+","+(h+1)]&&(m=!0),1==t[a-1+","+(h+1)]&&(y=!0),!c&&h>0&&this.groundTiles.push(n),e){let t=new gr(a,h,this.tileSize,!l&&!c,!u&&!c,!c);this.terrain.push(t);let e=t.Collider.vertices;e.forEach((t,e)=>{switch(e){case 0:(!l&&!c||!c&&p)&&this.vertices.add(t);break;case 1:(!u&&!c||!c&&f)&&this.vertices.add(t);break;case 2:(!u&&!d||!d&&m)&&this.vertices.add(t);break;case 3:(!l&&!d||!d&&y)&&this.vertices.add(t)}}),c||this.edges.add(new xr(e[0].x,e[0].y,e[1].x,e[1].y)),u||this.edges.add(new xr(e[1].x,e[1].y,e[2].x,e[2].y)),d||this.edges.add(new xr(e[3].x,e[3].y,e[2].x,e[2].y)),l||this.edges.add(new xr(e[0].x,e[0].y,e[3].x,e[3].y))}if(s=c&&d&&u&&l?"Interior":!c&&l&&u&&d?"TopEdge":c&&l&&u&&!d?"BottomEdge":c&&l&&!u&&d?"RightEdge":c&&!l&&u&&d?"LeftEdge":!c&&!l&&u&&d?"TLCorner":!c&&l&&!u&&d?"TRCorner":c&&!l&&u&&!d?"BLCorner":c&&l&&!u&&!d?"BRCorner":c+l+u+d==1?"Wang":c+d==2||l+u==2?"Shaft":"Loner",s){let t=new PIXI.Sprite.from(this.tileset.get(s));switch(t.width=r+2,t.height=r,t.anchor.set(.5),t.position.x=a*r,t.position.y=h*r,s){case"Wang":l?t.angle=90:c?t.angle=180:u&&(t.angle=270);break;case"Shaft":l&&(t.angle=90)}i.addChild(t)}}}backgroundTiling(){this.bgScale=2;let t=new PIXI.TilingSprite(this.tileset.get("Background"),this.tileSize*this.w*this.bgScale,this.tileSize*this.h*this.bgScale);t.x-=this.w*this.tileSize*this.bgScale/2,t.y-=this.h*this.tileSize*this.bgScale/2,t.tileScale.x=this.tileSize/this.tileset.get("Background").width*.75,t.tileScale.y=this.tileSize/this.tileset.get("Background").height*.75,this.backgroundContainer.addChild(t),this.bgSprite=t}addFeatures(t,e){for(let i of t){let t=i.split(","),r=parseInt(t[0]),n=parseInt(t[1]);if(0==Math.floor(3*ROT.RNG.getUniform()))if(1==e[r+","+(n-1)])this.tileSpriteInit(r,n,this.tileset.get("Spikes"));else if(1==e[r+","+(n+1)])switch(Math.floor(2*ROT.RNG.getUniform())){case 0:this.tileSpriteInit(r,n,this.tileset.get("Grass-1"));break;case 1:this.tileSpriteInit(r,n,this.tileset.get("Grass-2"))}}}generateCatnip(t){for(let e=0;e<t;e++){let t=Math.floor(ROT.RNG.getUniform()*this.groundTiles.length),e=this.groundTiles.splice(t,1)[0],i=e.split(","),r=(parseInt(i[0]),parseInt(i[1]));r-=1,this.tileMap[e]="N"}}addCatnip(){for(let t in this.tileMap)if("N"==this.tileMap[t]){let e=t.split(","),i=parseInt(e[0]),r=parseInt(e[1]),n=new Cr(i*this.tileSize,--r*this.tileSize,this.tileset.get("catnip"));this.powerups.push(n),this.tileContainer.addChild(n.sprite)}}}class Er{constructor(){this.isRunning=!1,this.startTime=null,this.endTime=null,this.elapsedTime=null;let t=new Date;this.initTime=t.getTime()}start(){this.isRunning=!0;let t=new Date;this.startTime=t.getTime()}stop(){this.isRunning&&(this.isRunning=!1)}getElapsedTime(){if(this.isRunning){return(new Date).getTime()-this.startTime}return 0}}class Ar{constructor(t,e){this.lastInput=null,this.prevTimeScale=1,this.prevVel=0,this.animationContainer=new PIXI.Container,this.position=new PIXI.Point(t.x,t.y),this.scale=3.5,this.maxVel=5,this.defaultMaxVel=5,this.tripMaxVel=6.5,this.jumpVel=-25,this.defaultJumpVel=-25,this.tripJumpVel=-30,this.unScaledJumpVel=-25,this.xVel=0,this.isGrounded=!1,this.inSlide=!1,this.inSlowDown=!1,this.jumpInput=!1,this.isHanging=!1,this.cameraSnapped=!0,this.bouncyBug=0,this.collisionTimer=new Er,this.wallJumpTimer=new Er,this.lateJumpDuration=225,this.fallDamageMS=1500,this.grappleMS=125,this.fallDamageVel=10,this.idleFrameCount=0,this.maxIdleFrames=60,this.climbTranslation=new PIXI.Point(0,0),this.cameraMovement=new PIXI.Point(0,0),this.flip="left",this.animations=e,this.currentAnimation="none",this.colliderWidth=this.animations.get("walk").width,this.colliderHeight=this.animations.get("walk").height,this.A=o.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.B=o.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.C=o.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.D=o.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.bounds=[new xr(this.A.x,this.A.y,this.B.x,this.B.y),new xr(this.A.x,this.A.y,this.C.x,this.C.y),new xr(this.C.x,this.C.y,this.D.x,this.D.y),new xr(this.B.x,this.B.y,this.D.x,this.D.y)],this.body=new o.a.Bodies.rectangle(this.position.x,this.position.y,this.colliderWidth,this.colliderHeight,{density:5e-4,frictionAir:.06,restitution:0,friction:.01,inertia:1/0}),this.animations.forEach(t=>{this.animationContainer.addChild(t)})}update(t){if(!this.isGrounded&&this.body.velocity.y>1&&(this.prevVel=this.body.velocity.y),this.wallJumpTimer.isRunning&&this.wallJumpTimer.getElapsedTime()>this.grappleMS&&(this.handleEvent({type:"inputDown",direction:this.lastInput}),this.wallJumpTimer.stop()),"stop"!=this.currentAnimation||this.animations.get("stop").playing?"idle"!=this.currentAnimation||this.animations.get("idle").playing||(this.idleFrameCount++,this.idleFrameCount>this.maxIdleFrames&&(this.idleFrameCount=0,this.setAnimation("idle",0,!0),this.maxIdleFrames=200*Math.random())):this.setAnimation("idle"),"climb"==this.currentAnimation){if("end"!=this.lastInput&&this.lastInput!=this.flip&&this.animations.get("climb").currentFrame<4)console.log("climb cancel",this.lastInput),this.setAnimation("jump",5),this.setFlip(this.lastInput),this.isGrounded=!1,this.inSlide=!1,this.jumpInput=!1,this.cameraSnapped=!0,o.a.Body.setStatic(this.body,!1),this.isHanging=!1;else if(!this.animations.get("climb").playing){switch(o.a.Body.setPosition(this.body,new o.a.Vector.create(this.climbTranslation.x,this.climbTranslation.y)),o.a.Body.setVelocity(this.body,new o.a.Vector.create(0,0)),this.lastInput!=this.flip&&(this.lastInput="end"),this.lastInput){case"right":this.setAnimation("walk"),this.xVel=this.maxVel,this.inSlowDown=!1;break;case"left":this.setAnimation("walk"),this.xVel=-this.maxVel,this.inSlowDown=!1;break;default:this.setAnimation("stop"),this.inSlowDown=!0}this.lockCamera(),this.bouncyBug||(this.bouncyBug=1),this.isGrounded=!0,this.inSlide=!1,this.jumpInput=!1,this.isHanging=!1,o.a.Body.setStatic(this.body,!1)}}else o.a.Body.setVelocity(this.body,new o.a.Vector.create(this.xVel,this.body.velocity.y));this.setPosition(this.body.position.x,this.body.position.y),this.inSlowDown&&this.slowVelocity(),t!=this.prevTimeScale&&(this.animations.forEach((function(e){e.animationSpeed*=.5==t?.5:2})),this.prevTimeScale=t);let e,i=this.lateJumpDuration/5/t;this.inSlide?(i/=2,e=i):e=this.lateJumpDuration/t,!this.isHanging&&this.collisionTimer.isRunning&&this.collisionTimer.getElapsedTime()>i&&this.setAnimation("jump",5),!this.isHanging&&this.collisionTimer.isRunning&&this.collisionTimer.getElapsedTime()>e&&(this.collisionTimer.stop(),this.isGrounded=!1,this.inSlide=!1,this.jumpInput=!1)}setPosition(t,e){this.position.x=t,this.position.y=e,this.A=o.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.B=o.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y-this.colliderHeight/2),this.C=o.a.Vector.create(this.position.x-this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.D=o.a.Vector.create(this.position.x+this.colliderWidth/2,this.position.y+this.colliderHeight/2),this.bounds=[new xr(this.A.x,this.A.y,this.B.x,this.B.y),new xr(this.A.x,this.A.y,this.C.x,this.C.y),new xr(this.C.x,this.C.y,this.D.x,this.D.y),new xr(this.B.x,this.B.y,this.D.x,this.D.y)],this.animations.forEach((function(i){i.x=t,i.y=e}))}setAnimation(t,e=0,i=!1){if(t!=this.currentAnimation||i){this.currentAnimation=t,this.animations.forEach((function(t){t.visible=!1}));var r=this.animations.get(t);r.visible=!0,r.gotoAndPlay(e),this.animations.set(t,r)}}setFlip(t){var e;this.cameraSnapped&&("right"==t?(e=-Math.abs(this.scale),this.scale=-Math.abs(this.scale),this.flip="right"):"left"==t&&(e=Math.abs(this.scale),this.scale=Math.abs(this.scale),this.flip="left"),this.animations.forEach((function(t){t.scale.x=e})))}slowVelocity(){this.xVel>0?(this.xVel-=.1,this.xVel<=0&&(this.xVel=0,this.inSlowDown=!1)):this.xVel<0&&(this.xVel+=.1,this.xVel>=0&&(this.xVel=0,this.inSlowDown=!1))}drawCollider(t){t.clear(),t.beginFill(16549891,.5),t.drawRect(this.position.x-this.colliderWidth/2,this.position.y-this.colliderHeight/2-1,this.colliderWidth,this.colliderHeight),t.endFill()}getClimbDistance(t,e){this.animations.get("climb").totalFrames;this.cameraMovement.x=(t-this.position.x)/45,this.cameraMovement.y=(e-this.position.y)/45}startLedgeClimb(t,e){let i=o.a.Vector;this.inSlide=!1,this.isGrounded=!1,this.isHanging=!0,this.setAnimation("climb");let r=40,n=-60;e?this.setFlip("left"):(r*=-1,n*=-1,this.setFlip("right"));let s=new i.create(t.x+r,t.y+0);o.a.Body.setStatic(this.body,!0),o.a.Body.setVelocity(this.body,new i.create(0,0)),o.a.Body.setPosition(this.body,s),this.climbTranslation.set(s.x+n,s.y+-52),this.getClimbDistance(this.climbTranslation.x,this.climbTranslation.y),this.cameraSnapped=!1}lockCamera(){this.cameraSnapped=!0}handleEvent(t){switch(t.type){case"inputDown":switch(t.direction){case"up":this.isGrounded?(o.a.Body.setVelocity(this.body,o.a.Vector.create(this.xVel,this.jumpVel)),this.setAnimation("jump",0,!0),this.isGrounded=!1,this.jumpInput=!0,this.inSlide=!1):this.inSlide&&(this.wallJumpTimer.start(),"right"==this.flip?(this.setFlip("left"),this.xVel=1.5*-this.maxVel,o.a.Body.setVelocity(this.body,o.a.Vector.create(this.xVel,.85*this.jumpVel)),this.setAnimation("jump",0,!0),this.inSlide=!1,this.jumpInput=!0):"left"==this.flip&&(this.setFlip("right"),this.xVel=1.5*this.maxVel,o.a.Body.setVelocity(this.body,o.a.Vector.create(this.xVel,.85*this.jumpVel)),this.setAnimation("jump",0,!0),this.inSlide=!1,this.jumpInput=!0));break;case"down":break;case"right":this.isGrounded&&this.setAnimation("walk"),this.setFlip("right"),this.inSlowDown=!1,this.xVel=this.maxVel,this.lastInput="right";break;case"left":this.isGrounded&&this.setAnimation("walk"),this.setFlip("left"),this.inSlowDown=!1,this.xVel=-this.maxVel,this.lastInput="left"}break;case"inputUp":switch(t.direction){case"up":case"down":break;case"right":case"left":this.lastInput="end",this.isGrounded?(this.setAnimation("stop"),this.xVel=0):this.inSlowDown=!0}}}}var Mr=function(t,e,i,r,n){this.rightDown=!1,this.leftDown=!1,document.onkeydown=function(e){e=e||window.event;let s={type:"inputDown"};"38"==e.keyCode?s.direction="up":"40"==e.keyCode?s.direction="down":"37"!=e.keyCode||this.leftDown?"39"!=e.keyCode||this.rightDown?"32"==e.keyCode?n.isOpen?s.direction="enter":i.speed=.5:"88"==e.keyCode?t.showDebug^=!0:"70"==e.keyCode?r.addTrauma(1):"27"==e.keyCode&&n.onClick(i):(s.direction="right",this.leftDown=!1,this.rightDown=!0):(s.direction="left",this.rightDown=!1,this.leftDown=!0);n.isOpen?("up"==s.direction?s.direction="left":"down"==s.direction&&(s.direction="right"),n.handleEvent(s)):t.handleEvent(s)},document.onkeyup=function(e){e=e||window.event;let r={type:"inputUp"};"38"==e.keyCode?r.direction="up":"40"==e.keyCode?r.direction="down":"37"==e.keyCode&&this.leftDown?(r.direction="left",this.leftDown=!1):"39"==e.keyCode&&this.rightDown?(this.rightDown=!1,r.direction="right"):"32"==e.keyCode&&(n.isOpen||(i.speed=1));t.handleEvent(r)}};Mr.prototype.constructor=Mr;class Pr{constructor(t,e,i){let r=new PIXI.Graphics;this.mesh=new PIXI.Graphics;let n=e.tileSize,s=e.w,o=e.h;const a=new PIXI.Rectangle(-n/2,-n/2,s*n,o*n);r.beginFill(16777215,1),r.drawRect(-n/2,-n/2,s*n,o*n),r.endFill(),t.forEach(t=>{t.lightContainer.children.forEach(t=>{let e=t.geometry.getBuffer("aVertexPosition").data;r.beginFill(0,1),r.moveTo(e[0],e[1]),r.lineTo(e[2],e[3]),r.lineTo(e[4],e[5]),r.lineTo(e[0],e[1]),r.endFill()})});const h=i.generateTexture(r,PIXI.SCALE_MODES.NEAREST,1,a);this.focus=new PIXI.Sprite(h),this.focus.x=-n/2,this.focus.y=-n/2,this.mesh.beginFill(0,.4),this.mesh.drawRect(-n/2,-n/2,s*n,o*n),this.mesh.endFill(),this.mesh.mask=this.focus}}var kr=i(3);class Br{constructor(t){this.targetPos=t,this.position=t,this.offset=new PIXI.Point(0,0),this.angleOffset=0,this.maxOffset=250,this.maxAngleOffset=10,this.flipOffset=75,this.shake=0,this.trauma=0,this.baseSeed=Date.now(),this.xNoise=Object(kr.makeNoise2D)(this.baseSeed),this.yNoise=Object(kr.makeNoise2D)(this.baseSeed+1),this.rNoise=Object(kr.makeNoise2D)(this.baseSeed+2),this.noiseIncrement=0}update(t,e,i){this.noiseIncrement+=i,this.trauma-=.015*i,this.trauma<0&&(this.trauma=0),this.shake=Math.pow(this.trauma,2),this.simplexShake();let r=new PIXI.Point;r.copyFrom(t),"right"==e?r.x+=this.flipOffset:r.x-=this.flipOffset,this.asymptoticAverage(r,.05),this.position.x+=this.offset.x,this.position.y+=this.offset.y}addTrauma(t){this.trauma+=t,console.log("trauma += ",t)}randomShake(){this.offset.x=this.maxOffset*this.shake*(2*Math.random()-1),this.offset.y=this.maxOffset*this.shake*(2*Math.random()-1),this.angleOffset=this.maxAngleOffset*this.shake*(2*Math.random()-1)}simplexShake(){this.offset.x=this.maxOffset*this.shake*this.xNoise(this.noiseIncrement,0),this.offset.y=this.maxOffset*this.shake*this.yNoise(this.noiseIncrement,0),this.angleOffset=this.maxAngleOffset*this.shake*this.rNoise(this.noiseIncrement,0)}asymptoticAverage(t,e){const i=1-e;this.position.x=i*this.position.x+e*t.x,this.position.y=i*this.position.y+e*t.y}}
/*!
 * @pixi/filter-color-replace - v3.0.3
 * Compiled Wed, 29 May 2019 03:04:05 UTC
 *
 * @pixi/filter-color-replace is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */var Or=function(t){function e(e,i,r){void 0===e&&(e=16711680),void 0===i&&(i=0),void 0===r&&(r=.4),t.call(this,"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}","varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec3 originalColor;\nuniform vec3 newColor;\nuniform float epsilon;\nvoid main(void) {\n    vec4 currentColor = texture2D(uSampler, vTextureCoord);\n    vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));\n    float colorDistance = length(colorDiff);\n    float doReplace = step(colorDistance, epsilon);\n    gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);\n}\n"),this.uniforms.originalColor=new Float32Array(3),this.uniforms.newColor=new Float32Array(3),this.originalColor=e,this.newColor=i,this.epsilon=r}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={originalColor:{configurable:!0},newColor:{configurable:!0},epsilon:{configurable:!0}};return i.originalColor.set=function(t){var e=this.uniforms.originalColor;"number"==typeof t?(vt(t,e),this._originalColor=t):(e[0]=t[0],e[1]=t[1],e[2]=t[2],this._originalColor=gt(e))},i.originalColor.get=function(){return this._originalColor},i.newColor.set=function(t){var e=this.uniforms.newColor;"number"==typeof t?(vt(t,e),this._newColor=t):(e[0]=t[0],e[1]=t[1],e[2]=t[2],this._newColor=gt(e))},i.newColor.get=function(){return this._newColor},i.epsilon.set=function(t){this.uniforms.epsilon=t},i.epsilon.get=function(){return this.uniforms.epsilon},Object.defineProperties(e.prototype,i),e}(zi);class Rr{constructor(t,e,i,r,n,s,o,a){this.ticker=o,this.catnipTicker=a,this.isOpen=!1,this.inPaletteMenu=!1,this.inOptionsMenu=!1,this.toggleButton=new Fr([t.get("pause"),t.get("exit")]),this.paletteFilter=n,this.colorMaps=e,this.playerAnimations=s,this.cameraShake=!0,this.menuColors=[16753234,3749987,11916254,9734845],this.toggleButton.sprites.forEach(t=>{t.on("click",this.onClick.bind(this,o)),t.on("tap",this.onClick.bind(this,o)),t.position.set(i.x,i.y)}),this.pausedText=this.staticText(t),this.pauseTicker=new PIXI.Ticker,this.pauseTicker.add(this.pauseBlinker.bind(this)),this.PAUSE_BLINKER_INTERVAL=500,this.pauseBlinkerLag=0,this.toggleButtonOffset=new PIXI.Point(window.innerWidth-this.toggleButton.width-16,32-window.innerHeight),this.buttonContainer=new PIXI.Container,this.buttonContainer.addChild(this.toggleButton.buttonContainer,this.pausedText),this.animationContainer=r,this.mainMenu=new Dr(i),this.paletteMenu=new Lr(i),this.optionsMenu=new Ur(i),this.activeMenu=this.mainMenu,this.subMenus=[this.mainMenu,this.paletteMenu,this.optionsMenu],this.subMenus.forEach(t=>{this.buttonContainer.addChild(t.displayContainer)});let h=new Or(1576960,16753234,.001);this.playerAnimations.filters=[h],this.changePalette(),this.subMenus.forEach(t=>{t.displayContainer.children.forEach(t=>{t.visible=!1})})}onClick(t){this.isOpen^=1,this.toggleButton.sprites.forEach(t=>{t.visible^=1}),this.isOpen?(this.activeMenu.onToggle(this.isOpen),this.inPaletteMenu=!1):(this.activeMenu.onToggle(this.isOpen),this.activeMenu=this.mainMenu,this.activeMenu.onToggle(this.isOpen)),this.controller&&this.controller.buttons.forEach(t=>{t.inPause=this.isOpen}),this.isOpen?(this.pauseTicker.start(),this.pausedText.visible=!0,this.pauseBlinkerLag=0,this.pauseBlinker(),t.speed=0,this.catnipTicker.speed=0,this.controller&&this.controller.buttonContainer.children.forEach(t=>{t.interactive=!1}),this.animationContainer.children.forEach(t=>{t.stop&&t.stop()}),this.playerAnimations.children.forEach(t=>{t.stop()})):(t.speed=1,this.catnipTicker.speed=1,this.pausedText.visible=!1,this.pauseTicker.stop(),this.controller&&this.controller.buttonContainer.children.forEach(t=>{t.interactive=!0}),this.animationContainer.children.forEach(t=>{t.play&&t.play()}),this.playerAnimations.children.forEach(t=>{t.play()}))}handleEvent(t){let e=!1;switch(t.type){case"inputDown":switch(t.direction){case"right":this.activeMenu.currentIndex>=this.activeMenu.options.length-1?this.activeMenu.currentIndex=0:this.activeMenu.currentIndex++;const t=this.activeMenu.currentIndex;this.activeMenu.currentKey=this.activeMenu.options[t].label,this.inPaletteMenu&&this.changePalette();break;case"left":0==this.activeMenu.currentIndex?this.activeMenu.currentIndex=this.activeMenu.options.length-1:this.activeMenu.currentIndex--;const i=this.activeMenu.currentIndex;this.activeMenu.currentKey=this.activeMenu.options[i].label,this.inPaletteMenu&&this.changePalette();break;case"enter":case"up":switch(e=!0,this.activeMenu.currentKey){case"RESUME":this.onClick(this.ticker);break;case"REROLL":this.onReroll();break;case"PALETTE":e=!1,this.togglePalleteMenu(!0);break;case"OPTIONS":e=!1,this.toggleOptionsMenu(!0);break;case"BACK":e=!1,this.toggleOptionsMenu(!1);break;case"HIDE   BUTTONS:   ON":case"HIDE   BUTTONS:   OFF":if(this.controller){this.controller.buttonContainer.visible^=1;const t=this.controller.buttonContainer.visible;this.toggleButton.buttonContainer.children.forEach(e=>{e.alpha=t?.5:0}),t?(this.optionsMenu.options[1].inactiveSprite.text="HIDE   BUTTONS:   OFF",this.optionsMenu.options[1].activeSprite.text="HIDE   BUTTONS:   OFF"):(this.optionsMenu.options[1].inactiveSprite.text="HIDE   BUTTONS:   ON",this.optionsMenu.options[1].activeSprite.text="HIDE   BUTTONS:   ON")}e=!1;break;case"CAMERA   SHAKE:   OFF":case"CAMERA   SHAKE:   ON":this.cameraShake^=1,this.cameraShake?(this.optionsMenu.options[2].inactiveSprite.text="CAMERA   SHAKE:   ON",this.optionsMenu.options[2].activeSprite.text="CAMERA   SHAKE:   ON"):(this.optionsMenu.options[2].inactiveSprite.text="CAMERA   SHAKE:   OFF",this.optionsMenu.options[2].activeSprite.text="CAMERA   SHAKE:   OFF"),e=!1;break;default:e=!1,this.togglePalleteMenu(!1)}}e||this.activeMenu.updateOptions()}}onReroll(){window.location.reload()}changePalette(){switch(this.playerAnimations.filters.length=1,this.paletteMenu.currentKey){case"SIMBA":break;default:const t=this.paletteMenu.currentIndex-1;this.paletteFilter.uniforms.Palette=this.colorMaps[t],this.playerAnimations.filters.push(this.paletteFilter)}let t={fill:this.menuColors[this.paletteMenu.currentIndex],fontSize:52,fontFamily:"ARCADECLASSIC"};this.subMenus.forEach(e=>{e.displayContainer.removeChildren(),e.options.forEach(i=>{delete i.inactiveSprite,i.inactiveSprite=new PIXI.Text(i.label,t),e.displayContainer.addChild(i.inactiveSprite),e.displayContainer.addChild(i.activeSprite)})})}togglePalleteMenu(t){t?(this.inPaletteMenu=!0,this.mainMenu.displayContainer.visible=!1,this.optionsMenu.displayContainer.visible=!1,this.paletteMenu.onToggle(!0,!0),this.activeMenu=this.paletteMenu):(this.inPaletteMenu=!1,this.paletteMenu.displayContainer.visible=!1,this.mainMenu.displayContainer.visible=!0,this.mainMenu.currentIndex=0,this.mainMenu.currentKey="RESUME",this.activeMenu=this.mainMenu)}toggleOptionsMenu(t){t?(this.inOptionsMenu=!0,this.mainMenu.displayContainer.visible=!1,this.paletteMenu.displayContainer.visible=!1,this.optionsMenu.displayContainer.visible=!0,this.optionsMenu.onToggle(!0,!1),this.activeMenu=this.optionsMenu):(this.inOptionsMenu=!1,this.paletteMenu.displayContainer.visible=!1,this.optionsMenu.displayContainer.visible=!1,this.mainMenu.displayContainer.visible=!0,this.mainMenu.currentIndex=0,this.mainMenu.currentKey="RESUME",this.activeMenu=this.mainMenu)}attachController(t){this.controller=t,this.buttonContainer.addChild(this.controller.buttonContainer)}staticText(t){let e=new PIXI.Text("PAUSED",{fill:16777215,fontSize:52,fontFamily:"ARCADECLASSIC"});return e.visible=!1,e.anchor.set(.5),e}pauseBlinker(){this.pauseBlinkerLag+=this.pauseTicker.deltaMS,this.pauseBlinkerLag>this.PAUSE_BLINKER_INTERVAL&&(this.pauseBlinkerLag-=this.PAUSE_BLINKER_INTERVAL,this.pausedText.visible^=1)}moveButtons(t){this.controller&&this.controller.moveButtons(t),this.toggleButton.setPosition(t,this.toggleButtonOffset),this.pausedText.position.copyFrom(t),this.pausedText.y-=window.innerHeight-(this.pausedText.height/2+6),this.mainMenu.moveElements(this.pausedText.position),this.paletteMenu.moveElements(this.pausedText.position),this.optionsMenu.moveElements(this.pausedText.position)}onResize(){this.toggleButtonOffset=new PIXI.Point(window.innerWidth-this.toggleButton.width-16,32-window.innerHeight),this.controller&&this.controller.onResize()}}class Fr{constructor(t){this.sprites=new Map([["pause",PIXI.Sprite.from(t[0])],["exit",PIXI.Sprite.from(t[1])]]),this.buttonContainer=new PIXI.Container,this.sprites.forEach(t=>{t.interactive=!0,t.alpha=.5,t.scale.set(3),this.buttonContainer.addChild(t)}),this.width=this.sprites.get("exit").width,this.height=this.sprites.get("exit").height,this.sprites.get("exit").visible=!1}setPosition(t,e){let i=new PIXI.Point;i.copyFrom(t),i.x+=e.x,i.y+=e.y,this.buttonContainer.children.forEach(t=>{t.position.copyFrom(i)})}}class Dr{constructor(t){this.displayContainer=new PIXI.Container,this.currentIndex=0,this.options=[new Nr("RESUME"),new Nr("REROLL"),new Nr("PALETTE"),new Nr("OPTIONS")],this.options.forEach(t=>{this.displayContainer.addChild(t.inactiveSprite),this.displayContainer.addChild(t.activeSprite)}),this.currentKey=this.options[0].label,this.moveElements(t)}moveElements(t){this.options.forEach((e,i)=>{e.activeSprite.position.copyFrom(t),e.inactiveSprite.position.copyFrom(t),e.activeSprite.y+=100,e.inactiveSprite.y+=100,e.inactiveSprite.x-=200,e.activeSprite.x-=200,e.activeSprite.x+=40*i,e.activeSprite.y+=e.activeSprite.height*i,e.inactiveSprite.x+=40*i,e.inactiveSprite.y+=e.activeSprite.height*i;e.activeSprite.x+=5,e.activeSprite.y-=5})}onToggle(t,e){t?(e?this.currentKey=this.options[this.currentIndex].label:this.currentIndex=0,this.displayContainer.visible=!0,this.options.forEach((t,e)=>{t.inactiveSprite.visible=!0,t.activeSprite.visible=!1,0==e&&(t.activeSprite.visible=!0)})):this.options.forEach(t=>{t.inactiveSprite.visible=!1,t.activeSprite.visible=!1})}updateOptions(){console.log("successful pause menu event"),this.options.forEach((t,e)=>{t.activeSprite.visible=!1,e==this.currentIndex&&(t.activeSprite.visible=!0)})}}class Lr extends Dr{constructor(t){super(t),this.currentIndex=Math.floor(4*Math.random()),this.displayContainer.removeChildren(),this.options=[new Nr("SIMBA"),new Nr("VANTA"),new Nr("COCO"),new Nr("PURP")],this.options.forEach(t=>{this.displayContainer.addChild(t.inactiveSprite),this.displayContainer.addChild(t.activeSprite)}),this.moveElements(t),this.currentKey=this.options[this.currentIndex].label}}class Ur extends Dr{constructor(t){super(t),this.displayContainer.removeChildren(),this.options=[new Nr("BACK"),new Nr("HIDE   BUTTONS:   OFF"),new Nr("CAMERA   SHAKE:   ON")],this.options.forEach(t=>{this.displayContainer.addChild(t.inactiveSprite),this.displayContainer.addChild(t.activeSprite)}),this.moveElements(t),this.currentKey=this.options[this.currentIndex].label}}class Nr{constructor(t){this.label=t,this.style1={fill:16753234,fontSize:52,fontFamily:"ARCADECLASSIC"};this.inactiveSprite=new PIXI.Text(t,this.style1),this.activeSprite=new PIXI.Text(t,{fill:16777215,fontSize:52,fontFamily:"ARCADECLASSIC"}),this.activeSprite.visible=!1,this.inactiveSprite.visible=!1}}class Vr{constructor(t,e,i,r,n,s){this.clientTopLeft=new PIXI.Point(e.x-window.innerWidth,e.y-window.innerHeight),n.addEventListener("touchstart",this.handleTouches.bind(this)),n.addEventListener("touchend",this.handleTouches.bind(this)),n.addEventListener("touchmove",this.handleTouches.bind(this)),n.addEventListener("click",t=>{console.log("click: x: ",t.clientX,"y: ",t.clientY)}),this.buttonContainer=new PIXI.Container,this.buttons=new Map([["left",new Xr(t.get("left"),"left",e,i,r)],["right",new Xr(t.get("right"),"right",e,i,r)],["up",new Xr(t.get("up"),"up",e,i,r)]]),this.buttons.forEach(t=>{t.sprites.forEach(t=>{this.buttonContainer.addChild(t)})}),this.leftButtonOffset=new PIXI.Point(10-window.innerWidth,window.innerHeight-(this.buttons.get("left").height+10)),this.rightButtonOffset=new PIXI.Point(this.leftButtonOffset.x+this.buttons.get("left").width+5,this.leftButtonOffset.y),this.upButtonOffset=new PIXI.Point(window.innerWidth-this.buttons.get("left").width-5,this.leftButtonOffset.y);let o=this.buttons.get("left").sprites.get("unpressed");console.log(o.getBounds())}handleTouches(t){console.log("touches: ",t.touches.length),this.buttons.forEach(e=>{let i=!1;for(let r=0;r<t.touches.length;r++){let n=t.touches.item(r);e.interactionRectangle.contains(n.clientX,n.clientY)&&(i=!0)}i!=e.pressed&&(e.pressed=i,e.pressed?e.onPress():e.onEnd())})}onMove(t){let e=t.data.global;this.buttons.forEach(t=>{t.pressed?t.sprites.get("pressed").getBounds().contains(e.x,e.y)||t.onEnd():t.sprites.get("unpressed").getBounds().contains(e.x,e.y)&&t.onPress()})}moveButtons(t){this.buttons.get("left").interactionRectangle=this.buttons.get("left").sprites.get("unpressed").getBounds(),this.buttons.get("right").interactionRectangle=this.buttons.get("right").sprites.get("unpressed").getBounds(),this.buttons.get("up").interactionRectangle=this.buttons.get("up").sprites.get("unpressed").getBounds(),this.buttons.get("left").setPosition(t,this.leftButtonOffset),this.buttons.get("right").setPosition(t,this.rightButtonOffset),this.buttons.get("up").setPosition(t,this.upButtonOffset)}onResize(){this.leftButtonOffset=new PIXI.Point(10-window.innerWidth,window.innerHeight-(this.buttons.get("left").height+10)),this.rightButtonOffset=new PIXI.Point(this.leftButtonOffset.x+this.buttons.get("left").width+5,this.leftButtonOffset.y),this.upButtonOffset=new PIXI.Point(window.innerWidth-this.buttons.get("left").width-5,this.leftButtonOffset.y)}}class Xr extends class{constructor(t){this.pressed=!1,this.sprites=new Map([["unpressed",new PIXI.Sprite.from(t[0])],["pressed",new PIXI.Sprite.from(t[1])]]),this.sprites.forEach(t=>{t.interactive=!0,t.visible=!1,t.scale.set(7)}),this.sprites.get("unpressed").visible=!0,this.interactionRectangle=new PIXI.Rectangle,console.log("hello")}}{constructor(t,e,i,r,n){super(t),this.type=e,this.eventCallback=r,this.pauseCallback=n,this.inPause=!1,this.sprites.forEach(t=>{t.position.copyFrom(i),t.alpha=.5}),this.height=this.sprites.get("unpressed").height,this.width=this.sprites.get("unpressed").width}onPress(){this.swapButtons();const t={type:"inputDown",direction:this.type};this.inPause?("up"==t.direction&&(t.direction="enter"),this.pauseCallback(t)):this.eventCallback(t),this.pressed=!0}onEnd(){this.swapButtons();const t={type:"inputUp",direction:this.type};this.inPause?this.pauseCallback(t):this.eventCallback(t),this.pressed=!1}onMove(t){let e=t.data.global;this.pressed?this.sprites.get("pressed").getBounds().contains(e.x,e.y)||this.onEnd():this.sprites.get("unpressed").getBounds().contains(e.x,e.y)&&this.onPress()}swapButtons(){this.sprites.get("unpressed").visible?(this.sprites.get("unpressed").visible=!1,this.sprites.get("pressed").visible=!0):(this.sprites.get("unpressed").visible=!0,this.sprites.get("pressed").visible=!1)}setPosition(t,e){let i=new PIXI.Point;i.copyFrom(t),i.x+=e.x,i.y+=e.y,this.sprites.forEach(t=>{t.position.copyFrom(i)})}}class jr extends PIXI.Filter{constructor(t,e,i){const r=new PIXI.Matrix;t.renderable=!1;let n={mapSampler:t._texture,filterMatrix:r,scale:{x:1,y:1},DissolveVal:1};super(e.vert,e.frag,n),this.maskSprite=t,this.maskMatrix=r,null==i&&(i=20),this.scale=new PIXI.Point(i,i)}apply(t,e,i,r){this.uniforms.filterMatrix=t.calculateSpriteMatrix(this.maskMatrix,this.maskSprite),this.uniforms.scale.x=this.scale.x,this.uniforms.scale.y=this.scale.y,t.applyFilter(this,e,i,r)}get map(){return this.uniforms.mapSampler}set map(t){this.uniforms.mapSampler=t}}class zr extends PIXI.Filter{constructor(t,e,i){const r=new PIXI.Matrix;t.renderable=!1,super(e.vert,e.frag,{mapSampler:t._texture,filterMatrix:r,scale:{x:1,y:1},rotation:new Float32Array([1,0,0,1]),bezierVal:0}),this.maskSprite=t,this.maskMatrix=r,null==i&&(i=20),this.scale=new PIXI.Point(i,i)}apply(t,e,i,r){this.uniforms.filterMatrix=t.calculateSpriteMatrix(this.maskMatrix,this.maskSprite),this.uniforms.scale.x=this.scale.x,this.uniforms.scale.y=this.scale.y;const n=this.maskSprite.transform.worldTransform,s=Math.sqrt(n.a*n.a+n.b*n.b),o=Math.sqrt(n.c*n.c+n.d*n.d);0!==s&&0!==o&&(this.uniforms.rotation[0]=n.a/s,this.uniforms.rotation[1]=n.b/s,this.uniforms.rotation[2]=n.c/o,this.uniforms.rotation[3]=n.d/o),t.applyFilter(this,e,i,r)}get map(){return this.uniforms.mapSampler}set map(t){this.uniforms.mapSampler=t}}class Gr{constructor(t=[new PIXI.Point(0,0),new PIXI.Point(.5,0),new PIXI.Point(.5,1),new PIXI.Point(1,1)]){this.points=t}getY(t){let e=Math.pow(1-t,3)*this.points[0].y;return e+=3*Math.pow(1-t,2)*t*this.points[1].y,e+=3*(1-t)*Math.pow(t,2)*this.points[2].y,e+=Math.pow(t,3)*this.points[3].y,e}}class Hr{constructor(t,e,i){this.playerDefaultVel=e.maxVel,this.playerTripVel=1.3*e.maxVel,this.playerDefaultJump=e.jumpVel,this.playerTripJump=1.2*e.jumpVel,this.cameraRotation=0,this.bezierTime=0,this.filterTime=0,this.filterTransitionMS=3e3,this.filterStaticMS=1e4,this.displacementIncrement=.5,this.bezierIncrement=1/(this.filterTransitionMS/16.666),this.ticker=new PIXI.Ticker,this.tickerMS=0,this.ticker.add(this.onTick.bind(this)),this.bezierCurve=new Gr,this.powerupTimer=new Er,this.powerupTimer.start(),this.foregroundNoise=PIXI.Sprite.from("https://res.cloudinary.com/dvxikybyi/image/upload/v1486634113/2yYayZk_vqsyzx.png"),this.foregroundNoise.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.backgroundNoise=PIXI.Sprite.from("https://res.cloudinary.com/dvxikybyi/image/upload/v1486634113/2yYayZk_vqsyzx.png"),this.backgroundNoise.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.foregroundNoise.scale.set(.6),this.backgroundNoise.scale.set(.6),this.foregroundFilter=new zr(this.foregroundNoise,t),this.backgroundFilter=new zr(this.backgroundNoise,t),console.log("crash test"),this.badFilterSolution=(new PIXI.Graphics).beginFill(0,0).drawRect(-2e3,-2e3,8e3,8e3).endFill(),this.powerups=i,this.maxCatnipFloatOffset=10,this.floatTimescale=.05,this.floatTime=0}onTick(){this.tickerMS+=this.ticker.deltaMS}update(t){this.foregroundNoise.position.set(this.filterTime,this.filterTime),this.backgroundNoise.position.set(this.filterTime,this.filterTime),this.floatTime+=t*this.floatTimescale;const e=this.maxCatnipFloatOffset*Math.sin(this.floatTime);this.powerups.forEach(t=>{t.update(e)})}FixedUpdate(t,e,i){if(this.ticker.started){let e;t.maxVel=this.playerTripVel,t.jumpVel=this.playerTripJump,this.filterTime+=this.displacementIncrement,this.bezierTime>1?(this.bezierTime=1,e=1):e=this.bezierCurve.getY(this.bezierTime),this.foregroundFilter.uniforms.bezierVal=e,this.backgroundFilter.uniforms.bezierVal=e,this.cameraRotation=.015*e*Math.sin(.02*this.filterTime),this.tickerMS<this.filterTransitionMS?this.bezierTime+=this.bezierIncrement:this.tickerMS>this.filterTransitionMS+this.filterStaticMS&&(this.bezierTime-=this.bezierIncrement),this.tickerMS>2*this.filterTransitionMS+this.filterStaticMS&&(this.filterTime=0,this.bezierTime=0,this.ticker.stop(),[],[],t.jumpVel=this.playerDefaultJump,t.maxVel=this.playerDefaultVel)}this.powerups.forEach(t=>{t.FixedUpdate()})}addToStage(t,e){t.addChild(this.foregroundNoise),e.addChild(this.backgroundNoise),t.addChild(this.badFilterSolution)}start(){this.tickerMS=0,this.ticker.start()}}class Wr{constructor(t,e){this.filter=new PIXI.Filter(null,t,{Palette:e})}}let Yr,qr,Kr=o.a.Engine,Zr=o.a.World,Qr=o.a.Events;class Jr{constructor(t,e){PIXI.SCALE_MODES.DEFAULT=PIXI.SCALE_MODES.NEAREST,PIXI.settings.SCALE_MODE=PIXI.SCALE_MODES.NEAREST,this.app=e,this.worldContainer=new PIXI.Container,this.animationContainer=new PIXI.Container,this.foregroundContainer=new PIXI.Container,this.backgroundContainer=new PIXI.Container,this.pauseMusic=t.pauseMusic,this.paletteIndex=2,this.paletteSwap=new Wr(t.paletteFrag,t.paletteTextures[this.paletteIndex]),this.dissolveSprite=new PIXI.Sprite.from("https://res.cloudinary.com/dvxikybyi/image/upload/v1486634113/2yYayZk_vqsyzx.png"),this.dissolveSprite.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.dissolveSprite.scale.set(.2),this.dissolveShader=t.dissolveShader,this.bezierDisplacementShader=t.displacementShader,this.worldContainer.addChild(this.dissolveSprite),this.engine=Kr.create(),this.world=this.engine.world,this.updateLag=0,this.tileMap=new Ir(25,25,150,6,t.lightShader,t.tileset,t.torchFrames),this.allLights=new PIXI.Container;let i=this.tileMap.playerSpawn;this.player=new Ar(i,t.catAnimations),console.log(this.player),this.catnipTrip=new Hr(this.bezierDisplacementShader,this.player,this.tileMap.powerups),this.tileMap.torchSprites.forEach(t=>{this.animationContainer.addChild(t)}),this.animationContainer.addChild(this.player.animationContainer),Zr.add(this.world,this.player.body),this.tileMap.terrain.forEach(t=>{Zr.add(this.world,t.Collider),t.walkBox&&Zr.add(this.world,t.walkBox),Zr.add(this.world,t.edgeBoxes)}),this.tileMap.powerups.forEach(t=>{Zr.add(this.world,t.collider)}),this.camera=new Br(i),this.pauseMenu=new Rr(t.menuButtons,t.paletteTextures,i,this.animationContainer,this.paletteSwap.filter,this.player.animationContainer,this.app.ticker,this.catnipTrip.ticker),this.buttonController=null,"ontouchstart"in document.documentElement&&(this.buttonController=new Vr(t.buttonFrames,this.player.position,this.player.handleEvent.bind(this.player),this.pauseMenu.handleEvent.bind(this.pauseMenu),this.app.renderer.view),this.pauseMenu.attachController(this.buttonController)),this.KBInput=new Mr(this.player,this.player.body,this.app.ticker,this.camera,this.pauseMenu),window.addEventListener("resize",this.onWindowResize.bind(this),!1),this.collisionEventSetup(),this.app.stage.position.set(this.app.screen.width/2,this.app.screen.height/2),this.tileMap.lights.forEach(t=>{t.update(this.app.ticker.speed)}),this.initLayers(),this.app.stage.scale.set(.5),this.app.ticker.add(t=>this.loop(t))}loop(t){this.FixedUpdate(),this.catnipTrip.ticker.started&&(this.worldContainer.rotation=this.catnipTrip.cameraRotation),this.pauseMenu.moveButtons(this.camera.position),this.app.stage.pivot.copyFrom(this.camera.position),this.app.stage.angle=this.camera.angleOffset,this.tileMap.parallaxScroll(this.app.stage.pivot,1.2,1.2),this.catnipTrip.update(t)}FixedUpdate(){for(this.updateLag+=this.app.ticker.deltaMS;this.updateLag>=16.666;)this.player.update(this.app.ticker.speed),Kr.update(this.engine),this.player.cameraSnapped?this.camera.update(this.player.position,this.player.flip,this.app.ticker.speed):this.camera.update(this.player.climbTranslation,this.player.flip,this.app.ticker.speed),!this.player.isGrounded&&!this.player.inSlide&&!this.player.isHanging&&this.player.body.velocity.y>0?this.world.gravity.y<3.5&&(this.world.gravity.y+=.015):this.world.gravity.y=1,this.updateLag-=16.666,this.tileMap.lights.forEach(t=>{t.lightContainer.children.forEach(t=>{t.shader.uniforms.time+=3e-5})}),this.catnipTrip.FixedUpdate(this.player,this.foregroundContainer.filters,this.backgroundContainer.filters)}initLayers(){this.backgroundContainer.addChild(this.tileMap.backgroundContainer),this.worldContainer.addChild(this.backgroundContainer),this.foregroundContainer.addChild(this.animationContainer),this.foregroundContainer.addChild(this.tileMap.tileContainer),this.tileMap.lights.forEach(t=>{this.allLights.addChild(t.lightContainer)}),this.foregroundContainer.addChild(this.allLights);let t=new Pr(this.tileMap.lights,this.tileMap,this.app.renderer);this.foregroundContainer.addChild(t.focus),this.foregroundContainer.addChild(t.mesh),this.worldContainer.addChild(this.foregroundContainer),this.app.stage.addChild(this.worldContainer),this.app.stage.addChild(this.pauseMenu.buttonContainer),this.foregroundContainer.addChild(this.catnipTrip.foregroundNoise),this.foregroundContainer.addChild(this.catnipTrip.badFilterSolution),this.tileMap.backgroundContainer.addChild(this.catnipTrip.backgroundNoise),this.worldContainer.filters=[new vr(3)]}collisionEventSetup(){Qr.on(this.engine,"collisionActive",t=>{for(var e=!1,i=!1,r=t.pairs,n=0,s=0;s<r.length;s++){let t,o=r[s];if(o.bodyA.id==this.player.body.id)t=o.bodyB;else{if(o.bodyB.id!=this.player.body.id)continue;t=o.bodyA}if(t.isSensor){if(t.isEdgeBox){if("right"==this.player.lastInput&&!t.isRight||"left"==this.player.lastInput&&t.isRight){this.world.gravity.y=1;const e=this.player.prevVel;return e>this.player.fallDamageVel&&this.pauseMenu.cameraShake&&this.camera.addTrauma(e/(2*this.player.fallDamageVel)),void this.player.startLedgeClimb(t.position,t.isRight)}e=!1,this.player.isGrounded=!1,this.player.inSlide=!0}else this.player.isHanging||(e=!0);t.isCatnip&&(this.foregroundContainer.filters=[this.catnipTrip.foregroundFilter],this.tileMap.backgroundContainer.filters=[this.catnipTrip.backgroundFilter],this.catnipTrip.start(),Zr.remove(this.world,t),t.spriteReference.filters=[new jr(this.dissolveSprite,this.dissolveShader,1)],console.log(t.spriteReference))}else this.player.collisionTimer.stop(),i=!0,n++}if(e||!i||this.player.isGrounded){if(!this.player.isGrounded&&(e&&i&&!this.player.inSlide||n>=2&&e)){this.world.gravity.y=1;const t=this.player.prevVel;t>this.player.fallDamageVel&&this.pauseMenu.cameraShake&&this.camera.addTrauma(t/(2*this.player.fallDamageVel)),this.player.prevVel=0,this.player.isGrounded=!0,this.player.inSlide=!1,0==this.player.xVel||this.player.inSlowDown?this.player.setAnimation("stop"):this.player.inSlowDown||this.player.setAnimation("walk")}}else{if(this.player.wallJumpTimer.stop(),this.player.xVel=0,this.player.inSlide=!0,"right"==this.player.flip)(o=this.player.animations.get("slide")).scale.x=-this.player.scale,o.angle=-90,this.player.animations.set("slide",o);else if("left"==this.player.flip){var o;(o=this.player.animations.get("slide")).scale.x=-this.player.scale,o.angle=90,this.player.animations.set("slide",o)}this.player.setAnimation("slide")}}),Qr.on(this.engine,"collisionEnd",t=>{let e=t.pairs;for(var i=0;i<e.length;i++){let t,r=e[i];r.bodyA.id==this.player.body.id?t=r.bodyB:r.bodyB.id==this.player.body.id&&(t=r.bodyA),t.isSensor||(this.player.collisionTimer.start(),this.player.body.velocity.y<0&&(this.player.setAnimation("jump",5),this.player.collisionTimer.stop(),this.player.isGrounded=!1,this.player.inSlide=!1,this.player.jumpInput=!1))}})}onWindowResize(){console.log("resize");const t=this.app.view.parentNode;this.app.renderer.resize(t.clientWidth,t.clientHeight),this.app.stage.position.set(this.app.screen.width/2,this.app.screen.height/2),this.tileMap.lights.forEach(t=>{t.update(this.app.ticker.speed),this.worldContainer.addChild(t.lightContainer)}),this.pauseMenu.onResize()}}!function(t,e){for(var i=0,r=0,n=t.length;r<n;++r)!function(r){var n=document.createElement("span");n.innerHTML="giItT1WQy@!-/#",n.style.position="absolute",n.style.left="-10000px",n.style.top="-10000px",n.style.fontSize="300px",n.style.fontFamily="sans-serif",n.style.fontVariant="normal",n.style.fontStyle="normal",n.style.fontWeight="normal",n.style.letterSpacing="0",document.body.appendChild(n);var s,o=n.offsetWidth;function a(){if(n&&n.offsetWidth!=o&&(++i,n.parentNode.removeChild(n),n=null),i>=t.length&&(s&&clearInterval(s),i==t.length))return e(),!0}n.style.fontFamily=r,a()||(s=setInterval(a,50))}(t[r])}(["ARCADECLASSIC"],(Yr=new PIXI.Application({width:window.innerWidth,height:window.innerHeight,antialias:!0,transparent:!1,resolution:1,backgroundColor:0,autoDensity:!0}),Yr.renderer.view.style.position="absolute",Yr.renderer.view.style.display="block",void document.getElementById("myCanvas").appendChild(Yr.view)));let $r=new class{constructor(t){this.doneLoading=!1,PIXI.SCALE_MODES.DEFAULT=PIXI.SCALE_MODES.NEAREST,PIXI.settings.SCALE_MODE=PIXI.SCALE_MODES.NEAREST,r.add(["sprites/catWalk1.json","sprites/catStop.json","sprites/catIdle.json","sprites/catJump.json","sprites/wallSlide.json","sprites/catHang.json","sprites/catClimbFull.json","sprites/catFall.json","sprites/cathouse_r1.png","sprites/tileSet2.json","sprites/torchSprites.json","sprites/keys.json","sprites/menuButtons.json","sprites/color_map_1.png","sprites/color_map_2.png","sprites/color_map_3.png","shaders/lightFilterVert.GLSL","shaders/lightFilterFrag.GLSL","shaders/lightVert.GLSL","shaders/lightFrag.GLSL","shaders/dissolve/dissolveVert.GLSL","shaders/dissolve/dissolveFrag.GLSL","shaders/BezierDisplacementFilter/BezierDispVert.GLSL","shaders/BezierDisplacementFilter/BezierDispFrag.GLSL","shaders/PaletteSwap/paletteSwap.GLSL"]).add("pauseMusic","sound/tropical jam.mp3").add("ARCADECLASSIC","fonts/ARCADECLASSIC.TTF").load(this.onLoad.bind(this,t))}onLoad(t){this.lightShader=this.loadShaders(),this.dissolveShader=this.loadDissolveShader(),this.displacementShader=this.loadDisplacementShader(),this.paletteFrag=this.loadPaletteFrag(),this.paletteTextures=this.loadPalettes(),this.catAnimations=this.animationsInit(),this.tileset=this.loadTiles(),this.torchFrames=this.loadTorch(),this.doneLoading=!0,this.buttonFrames=this.loadButtons(),this.menuButtons=this.loadMenu(),this.pauseMusic=this.loadSound(),this.pauseMusic.loop=!0,this.menuFont=this.loadFont(),t()}checkLoad(){console.log(this.lightShader),console.log(this.catAnimations),console.log(this.doneLoading)}loadPalettes(){return[PIXI.Texture.from(n["sprites/color_map_1.png"].data),PIXI.Texture.from(n["sprites/color_map_2.png"].data),PIXI.Texture.from(n["sprites/color_map_3.png"].data)]}loadShaders(){return{vert:n["shaders/lightVert.GLSL"].data,frag:n["shaders/lightFrag.GLSL"].data}}loadDissolveShader(){return{vert:n["shaders/dissolve/dissolveVert.GLSL"].data,frag:n["shaders/dissolve/dissolveFrag.GLSL"].data}}loadDisplacementShader(){return{vert:n["shaders/BezierDisplacementFilter/BezierDispVert.GLSL"].data,frag:n["shaders/BezierDisplacementFilter/BezierDispFrag.GLSL"].data}}loadPaletteFrag(){return n["shaders/PaletteSwap/paletteSwap.GLSL"].data}animationsInit(){let t=new Map([["walk",this.loadSprite("walk",10,!0)],["stop",this.loadSprite("stop",4,!1)],["idle",this.loadSprite("idle",9,!1)],["jump",this.loadSprite("jump",8,!1)],["slide",this.loadSprite("slide",4,!1)],["hang",this.loadSprite("hang",3,!1)],["climb",this.loadSprite("climb",9,!1)],["fall",this.loadSprite("fall",6,!0)]]);return t.get("slide").anchor.y=.3,t.get("hang").anchor.y=.3,t.get("climb").anchor.y=.65,t.get("climb").anchor.x=.85,t.get("idle").animationSpeed=.15,t.forEach((t,e)=>{"jump"!=e&&(t.visible=!1)}),t.get("jump").play(),t}loadSprite(t,e,i,r=.2){let n=[];for(let i=1;i<e+1;i++){const e=`${t} (${i}).png`;n.push(PIXI.Texture.from(e))}let s=new PIXI.AnimatedSprite(n);return s.x=window.innerWidth/2,s.y=window.innerHeight/2,s.vx=0,s.vy=0,s.scale.set(3.5,3.5),s.anchor.set(.5),s.animationSpeed=r,s.loop=i,s}loadTorch(){let t=[];for(let e=1;e<10;e++){const i=e;t.push(PIXI.Texture.from(`torch (${i}).png`))}return t}loadTiles(){let t=[];for(let e=1;e<24;e++){const i=e;let r=PIXI.Texture.from(`caveTile (${i}).png`);t.push(r)}return new Map([["Background",t[0]],["TLCorner",t[1]],["TopEdge",t[2]],["TRCorner",t[3]],["LeftEdge",t[4]],["Interior",t[5]],["RightEdge",t[6]],["BLCorner",t[7]],["BottomEdge",t[8]],["BRCorner",t[9]],["Wang",t[10]],["Shaft",t[11]],["Loner",t[13]],["Spikes",t[14]],["Moon",t[15]],["Sky",t[16]],["Stars-1",t[17]],["Stars-2",t[18]],["Stars-3",t[19]],["Grass-1",t[20]],["Grass-2",t[21]],["catnip",t[22]]])}loadButtons(){return new Map([["right",[PIXI.Texture.from("right-key (1).png"),PIXI.Texture.from("right-key (2).png")]],["left",[PIXI.Texture.from("left-key (1).png"),PIXI.Texture.from("left-key (2).png")]],["up",[PIXI.Texture.from("a-key (1).png"),PIXI.Texture.from("a-key (2).png")]]])}loadMenu(){return new Map([["pause",PIXI.Texture.from("pause.png")],["exit",PIXI.Texture.from("exit-button.png")],["paused-text",PIXI.Texture.from("paused-text.png")]])}loadSound(){return n.pauseMusic.data}loadFont(){return n.ARCADECLASSIC}}(function(){qr=new Jr($r,Yr,this),document.getElementById("myCanvas").ontouchend=t=>{t.preventDefault()},document.getElementById("myCanvas").ontouchmove=t=>{t.preventDefault()},document.getElementById("myCanvas").ontouchstart=t=>{t.preventDefault()}}.bind(void 0))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,